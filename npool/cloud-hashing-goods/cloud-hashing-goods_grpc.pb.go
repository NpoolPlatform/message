// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package npool

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CloudHashingGoodsClient is the client API for CloudHashingGoods service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudHashingGoodsClient interface {
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionResponse, error)
	CreateVendorLocation(ctx context.Context, in *CreateVendorLocationRequest, opts ...grpc.CallOption) (*CreateVendorLocationResponse, error)
	UpdateVendorLocation(ctx context.Context, in *UpdateVendorLocationRequest, opts ...grpc.CallOption) (*UpdateVendorLocationResponse, error)
	GetVendorLocation(ctx context.Context, in *GetVendorLocationRequest, opts ...grpc.CallOption) (*GetVendorLocationResponse, error)
	DeleteVendorLocation(ctx context.Context, in *DeleteVendorLocationRequest, opts ...grpc.CallOption) (*DeleteVendorLocationResponse, error)
	GetVendorLocations(ctx context.Context, in *GetVendorLocationsRequest, opts ...grpc.CallOption) (*GetVendorLocationsResponse, error)
	CreatePriceCurrency(ctx context.Context, in *CreatePriceCurrencyRequest, opts ...grpc.CallOption) (*CreatePriceCurrencyResponse, error)
	UpdatePriceCurrency(ctx context.Context, in *UpdatePriceCurrencyRequest, opts ...grpc.CallOption) (*UpdatePriceCurrencyResponse, error)
	GetPriceCurrency(ctx context.Context, in *GetPriceCurrencyRequest, opts ...grpc.CallOption) (*GetPriceCurrencyResponse, error)
	GetPriceCurrencys(ctx context.Context, in *GetPriceCurrencysRequest, opts ...grpc.CallOption) (*GetPriceCurrencysResponse, error)
	CreateTargetArea(ctx context.Context, in *CreateTargetAreaRequest, opts ...grpc.CallOption) (*CreateTargetAreaResponse, error)
	UpdateTargetArea(ctx context.Context, in *UpdateTargetAreaRequest, opts ...grpc.CallOption) (*UpdateTargetAreaResponse, error)
	GetTargetArea(ctx context.Context, in *GetTargetAreaRequest, opts ...grpc.CallOption) (*GetTargetAreaResponse, error)
	DeleteTargetArea(ctx context.Context, in *DeleteTargetAreaRequest, opts ...grpc.CallOption) (*DeleteTargetAreaResponse, error)
	DeleteTargetAreaByContinentCountry(ctx context.Context, in *DeleteTargetAreaByContinentCountryRequest, opts ...grpc.CallOption) (*DeleteTargetAreaByContinentCountryResponse, error)
	GetTargetAreas(ctx context.Context, in *GetTargetAreasRequest, opts ...grpc.CallOption) (*GetTargetAreasResponse, error)
	CreateDeviceInfo(ctx context.Context, in *CreateDeviceInfoRequest, opts ...grpc.CallOption) (*CreateDeviceInfoResponse, error)
	UpdateDeviceInfo(ctx context.Context, in *UpdateDeviceInfoRequest, opts ...grpc.CallOption) (*UpdateDeviceInfoResponse, error)
	GetDeviceInfo(ctx context.Context, in *GetDeviceInfoRequest, opts ...grpc.CallOption) (*GetDeviceInfoResponse, error)
	DeleteDeviceInfo(ctx context.Context, in *DeleteDeviceInfoRequest, opts ...grpc.CallOption) (*DeleteDeviceInfoResponse, error)
	GetDeviceInfos(ctx context.Context, in *GetDeviceInfosRequest, opts ...grpc.CallOption) (*GetDeviceInfosResponse, error)
	// Good information for CRUD
	CreateGood(ctx context.Context, in *CreateGoodRequest, opts ...grpc.CallOption) (*CreateGoodResponse, error)
	UpdateGood(ctx context.Context, in *UpdateGoodRequest, opts ...grpc.CallOption) (*UpdateGoodResponse, error)
	GetGood(ctx context.Context, in *GetGoodRequest, opts ...grpc.CallOption) (*GetGoodResponse, error)
	DeleteGood(ctx context.Context, in *DeleteGoodRequest, opts ...grpc.CallOption) (*DeleteGoodResponse, error)
	GetGoods(ctx context.Context, in *GetGoodsRequest, opts ...grpc.CallOption) (*GetGoodsResponse, error)
	// Good information for API
	GetGoodDetail(ctx context.Context, in *GetGoodDetailRequest, opts ...grpc.CallOption) (*GetGoodDetailResponse, error)
	GetGoodsDetail(ctx context.Context, in *GetGoodsDetailRequest, opts ...grpc.CallOption) (*GetGoodsDetailResponse, error)
	CreateRecommend(ctx context.Context, in *CreateRecommendRequest, opts ...grpc.CallOption) (*CreateRecommendResponse, error)
	UpdateRecommend(ctx context.Context, in *UpdateRecommendRequest, opts ...grpc.CallOption) (*UpdateRecommendResponse, error)
	GetRecommendsByApp(ctx context.Context, in *GetRecommendsByAppRequest, opts ...grpc.CallOption) (*GetRecommendsByAppResponse, error)
	GetRecommendsByRecommender(ctx context.Context, in *GetRecommendsByRecommenderRequest, opts ...grpc.CallOption) (*GetRecommendsByRecommenderResponse, error)
	DeleteRecommend(ctx context.Context, in *DeleteRecommendRequest, opts ...grpc.CallOption) (*DeleteRecommendResponse, error)
	GetRecommendGoodsByApp(ctx context.Context, in *GetRecommendGoodsByAppRequest, opts ...grpc.CallOption) (*GetRecommendGoodsByAppResponse, error)
	GetRecommendGoodsByRecommender(ctx context.Context, in *GetRecommendGoodsByRecommenderRequest, opts ...grpc.CallOption) (*GetRecommendGoodsByRecommenderResponse, error)
	AuthorizeAppGood(ctx context.Context, in *AuthorizeAppGoodRequest, opts ...grpc.CallOption) (*AuthorizeAppGoodResponse, error)
	SetAppGoodPrice(ctx context.Context, in *SetAppGoodPriceRequest, opts ...grpc.CallOption) (*SetAppGoodPriceResponse, error)
	CheckAppGood(ctx context.Context, in *CheckAppGoodRequest, opts ...grpc.CallOption) (*CheckAppGoodResponse, error)
	OnsaleAppGood(ctx context.Context, in *OnsaleAppGoodRequest, opts ...grpc.CallOption) (*OnsaleAppGoodResponse, error)
	OffsaleAppGood(ctx context.Context, in *OffsaleAppGoodRequest, opts ...grpc.CallOption) (*OffsaleAppGoodResponse, error)
	UnauthorizeAppGood(ctx context.Context, in *UnauthorizeAppGoodRequest, opts ...grpc.CallOption) (*UnauthorizeAppGoodResponse, error)
	AuthorizeAppTargetArea(ctx context.Context, in *AuthorizeAppTargetAreaRequest, opts ...grpc.CallOption) (*AuthorizeAppTargetAreaResponse, error)
	CheckAppTargetArea(ctx context.Context, in *CheckAppTargetAreaRequest, opts ...grpc.CallOption) (*CheckAppTargetAreaResponse, error)
	UnauthorizeAppTargetArea(ctx context.Context, in *UnauthorizeAppTargetAreaRequest, opts ...grpc.CallOption) (*UnauthorizeAppTargetAreaResponse, error)
	AuthorizeAppGoodTargetArea(ctx context.Context, in *AuthorizeAppGoodTargetAreaRequest, opts ...grpc.CallOption) (*AuthorizeAppGoodTargetAreaResponse, error)
	CheckAppGoodTargetArea(ctx context.Context, in *CheckAppGoodTargetAreaRequest, opts ...grpc.CallOption) (*CheckAppGoodTargetAreaResponse, error)
	UnauthorizeAppGoodTargetArea(ctx context.Context, in *UnauthorizeAppGoodTargetAreaRequest, opts ...grpc.CallOption) (*UnauthorizeAppGoodTargetAreaResponse, error)
	CreateGoodComment(ctx context.Context, in *CreateGoodCommentRequest, opts ...grpc.CallOption) (*CreateGoodCommentResponse, error)
	UpdateGoodComment(ctx context.Context, in *UpdateGoodCommentRequest, opts ...grpc.CallOption) (*UpdateGoodCommentResponse, error)
	GetGoodComments(ctx context.Context, in *GetGoodCommentsRequest, opts ...grpc.CallOption) (*GetGoodCommentsResponse, error)
	CreateGoodExtraInfo(ctx context.Context, in *CreateGoodExtraInfoRequest, opts ...grpc.CallOption) (*CreateGoodExtraInfoRequest, error)
	GetGoodExtraInfo(ctx context.Context, in *GetGoodExtraInfoRequest, opts ...grpc.CallOption) (*GetGoodExtraInfoRequest, error)
	UpdateGoodExtraInfo(ctx context.Context, in *UpdateGoodExtraInfoRequest, opts ...grpc.CallOption) (*UpdateGoodExtraInfoRequest, error)
	CreateGoodReview(ctx context.Context, in *CreateGoodReviewRequest, opts ...grpc.CallOption) (*CreateGoodReviewResponse, error)
	UpdateGoodReview(ctx context.Context, in *UpdateGoodReviewRequest, opts ...grpc.CallOption) (*UpdateGoodReviewResponse, error)
	GetGoodReview(ctx context.Context, in *GetGoodReviewRequest, opts ...grpc.CallOption) (*GetGoodReviewResponse, error)
	CreateFee(ctx context.Context, in *CreateFeeRequest, opts ...grpc.CallOption) (*CreateFeeResponse, error)
	GetFee(ctx context.Context, in *GetFeeRequest, opts ...grpc.CallOption) (*GetFeeResponse, error)
	GetFees(ctx context.Context, in *GetFeesRequest, opts ...grpc.CallOption) (*GetFeesResponse, error)
	CreateFeeType(ctx context.Context, in *CreateFeeTypeRequest, opts ...grpc.CallOption) (*CreateFeeTypeResponse, error)
	UpdateFeeType(ctx context.Context, in *UpdateFeeTypeRequest, opts ...grpc.CallOption) (*UpdateFeeTypeResponse, error)
	GetFeeType(ctx context.Context, in *GetFeeTypeRequest, opts ...grpc.CallOption) (*GetFeeTypeResponse, error)
	GetFeeTypes(ctx context.Context, in *GetFeeTypesRequest, opts ...grpc.CallOption) (*GetFeeTypesResponse, error)
}

type cloudHashingGoodsClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudHashingGoodsClient(cc grpc.ClientConnInterface) CloudHashingGoodsClient {
	return &cloudHashingGoodsClient{cc}
}

func (c *cloudHashingGoodsClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) CreateVendorLocation(ctx context.Context, in *CreateVendorLocationRequest, opts ...grpc.CallOption) (*CreateVendorLocationResponse, error) {
	out := new(CreateVendorLocationResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/CreateVendorLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) UpdateVendorLocation(ctx context.Context, in *UpdateVendorLocationRequest, opts ...grpc.CallOption) (*UpdateVendorLocationResponse, error) {
	out := new(UpdateVendorLocationResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/UpdateVendorLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) GetVendorLocation(ctx context.Context, in *GetVendorLocationRequest, opts ...grpc.CallOption) (*GetVendorLocationResponse, error) {
	out := new(GetVendorLocationResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/GetVendorLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) DeleteVendorLocation(ctx context.Context, in *DeleteVendorLocationRequest, opts ...grpc.CallOption) (*DeleteVendorLocationResponse, error) {
	out := new(DeleteVendorLocationResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/DeleteVendorLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) GetVendorLocations(ctx context.Context, in *GetVendorLocationsRequest, opts ...grpc.CallOption) (*GetVendorLocationsResponse, error) {
	out := new(GetVendorLocationsResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/GetVendorLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) CreatePriceCurrency(ctx context.Context, in *CreatePriceCurrencyRequest, opts ...grpc.CallOption) (*CreatePriceCurrencyResponse, error) {
	out := new(CreatePriceCurrencyResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/CreatePriceCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) UpdatePriceCurrency(ctx context.Context, in *UpdatePriceCurrencyRequest, opts ...grpc.CallOption) (*UpdatePriceCurrencyResponse, error) {
	out := new(UpdatePriceCurrencyResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/UpdatePriceCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) GetPriceCurrency(ctx context.Context, in *GetPriceCurrencyRequest, opts ...grpc.CallOption) (*GetPriceCurrencyResponse, error) {
	out := new(GetPriceCurrencyResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/GetPriceCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) GetPriceCurrencys(ctx context.Context, in *GetPriceCurrencysRequest, opts ...grpc.CallOption) (*GetPriceCurrencysResponse, error) {
	out := new(GetPriceCurrencysResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/GetPriceCurrencys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) CreateTargetArea(ctx context.Context, in *CreateTargetAreaRequest, opts ...grpc.CallOption) (*CreateTargetAreaResponse, error) {
	out := new(CreateTargetAreaResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/CreateTargetArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) UpdateTargetArea(ctx context.Context, in *UpdateTargetAreaRequest, opts ...grpc.CallOption) (*UpdateTargetAreaResponse, error) {
	out := new(UpdateTargetAreaResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/UpdateTargetArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) GetTargetArea(ctx context.Context, in *GetTargetAreaRequest, opts ...grpc.CallOption) (*GetTargetAreaResponse, error) {
	out := new(GetTargetAreaResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/GetTargetArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) DeleteTargetArea(ctx context.Context, in *DeleteTargetAreaRequest, opts ...grpc.CallOption) (*DeleteTargetAreaResponse, error) {
	out := new(DeleteTargetAreaResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/DeleteTargetArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) DeleteTargetAreaByContinentCountry(ctx context.Context, in *DeleteTargetAreaByContinentCountryRequest, opts ...grpc.CallOption) (*DeleteTargetAreaByContinentCountryResponse, error) {
	out := new(DeleteTargetAreaByContinentCountryResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/DeleteTargetAreaByContinentCountry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) GetTargetAreas(ctx context.Context, in *GetTargetAreasRequest, opts ...grpc.CallOption) (*GetTargetAreasResponse, error) {
	out := new(GetTargetAreasResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/GetTargetAreas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) CreateDeviceInfo(ctx context.Context, in *CreateDeviceInfoRequest, opts ...grpc.CallOption) (*CreateDeviceInfoResponse, error) {
	out := new(CreateDeviceInfoResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/CreateDeviceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) UpdateDeviceInfo(ctx context.Context, in *UpdateDeviceInfoRequest, opts ...grpc.CallOption) (*UpdateDeviceInfoResponse, error) {
	out := new(UpdateDeviceInfoResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/UpdateDeviceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) GetDeviceInfo(ctx context.Context, in *GetDeviceInfoRequest, opts ...grpc.CallOption) (*GetDeviceInfoResponse, error) {
	out := new(GetDeviceInfoResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/GetDeviceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) DeleteDeviceInfo(ctx context.Context, in *DeleteDeviceInfoRequest, opts ...grpc.CallOption) (*DeleteDeviceInfoResponse, error) {
	out := new(DeleteDeviceInfoResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/DeleteDeviceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) GetDeviceInfos(ctx context.Context, in *GetDeviceInfosRequest, opts ...grpc.CallOption) (*GetDeviceInfosResponse, error) {
	out := new(GetDeviceInfosResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/GetDeviceInfos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) CreateGood(ctx context.Context, in *CreateGoodRequest, opts ...grpc.CallOption) (*CreateGoodResponse, error) {
	out := new(CreateGoodResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/CreateGood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) UpdateGood(ctx context.Context, in *UpdateGoodRequest, opts ...grpc.CallOption) (*UpdateGoodResponse, error) {
	out := new(UpdateGoodResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/UpdateGood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) GetGood(ctx context.Context, in *GetGoodRequest, opts ...grpc.CallOption) (*GetGoodResponse, error) {
	out := new(GetGoodResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/GetGood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) DeleteGood(ctx context.Context, in *DeleteGoodRequest, opts ...grpc.CallOption) (*DeleteGoodResponse, error) {
	out := new(DeleteGoodResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/DeleteGood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) GetGoods(ctx context.Context, in *GetGoodsRequest, opts ...grpc.CallOption) (*GetGoodsResponse, error) {
	out := new(GetGoodsResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/GetGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) GetGoodDetail(ctx context.Context, in *GetGoodDetailRequest, opts ...grpc.CallOption) (*GetGoodDetailResponse, error) {
	out := new(GetGoodDetailResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/GetGoodDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) GetGoodsDetail(ctx context.Context, in *GetGoodsDetailRequest, opts ...grpc.CallOption) (*GetGoodsDetailResponse, error) {
	out := new(GetGoodsDetailResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/GetGoodsDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) CreateRecommend(ctx context.Context, in *CreateRecommendRequest, opts ...grpc.CallOption) (*CreateRecommendResponse, error) {
	out := new(CreateRecommendResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/CreateRecommend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) UpdateRecommend(ctx context.Context, in *UpdateRecommendRequest, opts ...grpc.CallOption) (*UpdateRecommendResponse, error) {
	out := new(UpdateRecommendResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/UpdateRecommend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) GetRecommendsByApp(ctx context.Context, in *GetRecommendsByAppRequest, opts ...grpc.CallOption) (*GetRecommendsByAppResponse, error) {
	out := new(GetRecommendsByAppResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/GetRecommendsByApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) GetRecommendsByRecommender(ctx context.Context, in *GetRecommendsByRecommenderRequest, opts ...grpc.CallOption) (*GetRecommendsByRecommenderResponse, error) {
	out := new(GetRecommendsByRecommenderResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/GetRecommendsByRecommender", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) DeleteRecommend(ctx context.Context, in *DeleteRecommendRequest, opts ...grpc.CallOption) (*DeleteRecommendResponse, error) {
	out := new(DeleteRecommendResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/DeleteRecommend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) GetRecommendGoodsByApp(ctx context.Context, in *GetRecommendGoodsByAppRequest, opts ...grpc.CallOption) (*GetRecommendGoodsByAppResponse, error) {
	out := new(GetRecommendGoodsByAppResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/GetRecommendGoodsByApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) GetRecommendGoodsByRecommender(ctx context.Context, in *GetRecommendGoodsByRecommenderRequest, opts ...grpc.CallOption) (*GetRecommendGoodsByRecommenderResponse, error) {
	out := new(GetRecommendGoodsByRecommenderResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/GetRecommendGoodsByRecommender", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) AuthorizeAppGood(ctx context.Context, in *AuthorizeAppGoodRequest, opts ...grpc.CallOption) (*AuthorizeAppGoodResponse, error) {
	out := new(AuthorizeAppGoodResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/AuthorizeAppGood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) SetAppGoodPrice(ctx context.Context, in *SetAppGoodPriceRequest, opts ...grpc.CallOption) (*SetAppGoodPriceResponse, error) {
	out := new(SetAppGoodPriceResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/SetAppGoodPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) CheckAppGood(ctx context.Context, in *CheckAppGoodRequest, opts ...grpc.CallOption) (*CheckAppGoodResponse, error) {
	out := new(CheckAppGoodResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/CheckAppGood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) OnsaleAppGood(ctx context.Context, in *OnsaleAppGoodRequest, opts ...grpc.CallOption) (*OnsaleAppGoodResponse, error) {
	out := new(OnsaleAppGoodResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/OnsaleAppGood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) OffsaleAppGood(ctx context.Context, in *OffsaleAppGoodRequest, opts ...grpc.CallOption) (*OffsaleAppGoodResponse, error) {
	out := new(OffsaleAppGoodResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/OffsaleAppGood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) UnauthorizeAppGood(ctx context.Context, in *UnauthorizeAppGoodRequest, opts ...grpc.CallOption) (*UnauthorizeAppGoodResponse, error) {
	out := new(UnauthorizeAppGoodResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/UnauthorizeAppGood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) AuthorizeAppTargetArea(ctx context.Context, in *AuthorizeAppTargetAreaRequest, opts ...grpc.CallOption) (*AuthorizeAppTargetAreaResponse, error) {
	out := new(AuthorizeAppTargetAreaResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/AuthorizeAppTargetArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) CheckAppTargetArea(ctx context.Context, in *CheckAppTargetAreaRequest, opts ...grpc.CallOption) (*CheckAppTargetAreaResponse, error) {
	out := new(CheckAppTargetAreaResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/CheckAppTargetArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) UnauthorizeAppTargetArea(ctx context.Context, in *UnauthorizeAppTargetAreaRequest, opts ...grpc.CallOption) (*UnauthorizeAppTargetAreaResponse, error) {
	out := new(UnauthorizeAppTargetAreaResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/UnauthorizeAppTargetArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) AuthorizeAppGoodTargetArea(ctx context.Context, in *AuthorizeAppGoodTargetAreaRequest, opts ...grpc.CallOption) (*AuthorizeAppGoodTargetAreaResponse, error) {
	out := new(AuthorizeAppGoodTargetAreaResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/AuthorizeAppGoodTargetArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) CheckAppGoodTargetArea(ctx context.Context, in *CheckAppGoodTargetAreaRequest, opts ...grpc.CallOption) (*CheckAppGoodTargetAreaResponse, error) {
	out := new(CheckAppGoodTargetAreaResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/CheckAppGoodTargetArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) UnauthorizeAppGoodTargetArea(ctx context.Context, in *UnauthorizeAppGoodTargetAreaRequest, opts ...grpc.CallOption) (*UnauthorizeAppGoodTargetAreaResponse, error) {
	out := new(UnauthorizeAppGoodTargetAreaResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/UnauthorizeAppGoodTargetArea", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) CreateGoodComment(ctx context.Context, in *CreateGoodCommentRequest, opts ...grpc.CallOption) (*CreateGoodCommentResponse, error) {
	out := new(CreateGoodCommentResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/CreateGoodComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) UpdateGoodComment(ctx context.Context, in *UpdateGoodCommentRequest, opts ...grpc.CallOption) (*UpdateGoodCommentResponse, error) {
	out := new(UpdateGoodCommentResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/UpdateGoodComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) GetGoodComments(ctx context.Context, in *GetGoodCommentsRequest, opts ...grpc.CallOption) (*GetGoodCommentsResponse, error) {
	out := new(GetGoodCommentsResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/GetGoodComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) CreateGoodExtraInfo(ctx context.Context, in *CreateGoodExtraInfoRequest, opts ...grpc.CallOption) (*CreateGoodExtraInfoRequest, error) {
	out := new(CreateGoodExtraInfoRequest)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/CreateGoodExtraInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) GetGoodExtraInfo(ctx context.Context, in *GetGoodExtraInfoRequest, opts ...grpc.CallOption) (*GetGoodExtraInfoRequest, error) {
	out := new(GetGoodExtraInfoRequest)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/GetGoodExtraInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) UpdateGoodExtraInfo(ctx context.Context, in *UpdateGoodExtraInfoRequest, opts ...grpc.CallOption) (*UpdateGoodExtraInfoRequest, error) {
	out := new(UpdateGoodExtraInfoRequest)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/UpdateGoodExtraInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) CreateGoodReview(ctx context.Context, in *CreateGoodReviewRequest, opts ...grpc.CallOption) (*CreateGoodReviewResponse, error) {
	out := new(CreateGoodReviewResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/CreateGoodReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) UpdateGoodReview(ctx context.Context, in *UpdateGoodReviewRequest, opts ...grpc.CallOption) (*UpdateGoodReviewResponse, error) {
	out := new(UpdateGoodReviewResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/UpdateGoodReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) GetGoodReview(ctx context.Context, in *GetGoodReviewRequest, opts ...grpc.CallOption) (*GetGoodReviewResponse, error) {
	out := new(GetGoodReviewResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/GetGoodReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) CreateFee(ctx context.Context, in *CreateFeeRequest, opts ...grpc.CallOption) (*CreateFeeResponse, error) {
	out := new(CreateFeeResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/CreateFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) GetFee(ctx context.Context, in *GetFeeRequest, opts ...grpc.CallOption) (*GetFeeResponse, error) {
	out := new(GetFeeResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/GetFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) GetFees(ctx context.Context, in *GetFeesRequest, opts ...grpc.CallOption) (*GetFeesResponse, error) {
	out := new(GetFeesResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/GetFees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) CreateFeeType(ctx context.Context, in *CreateFeeTypeRequest, opts ...grpc.CallOption) (*CreateFeeTypeResponse, error) {
	out := new(CreateFeeTypeResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/CreateFeeType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) UpdateFeeType(ctx context.Context, in *UpdateFeeTypeRequest, opts ...grpc.CallOption) (*UpdateFeeTypeResponse, error) {
	out := new(UpdateFeeTypeResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/UpdateFeeType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) GetFeeType(ctx context.Context, in *GetFeeTypeRequest, opts ...grpc.CallOption) (*GetFeeTypeResponse, error) {
	out := new(GetFeeTypeResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/GetFeeType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingGoodsClient) GetFeeTypes(ctx context.Context, in *GetFeeTypesRequest, opts ...grpc.CallOption) (*GetFeeTypesResponse, error) {
	out := new(GetFeeTypesResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.goods.v1.CloudHashingGoods/GetFeeTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudHashingGoodsServer is the server API for CloudHashingGoods service.
// All implementations must embed UnimplementedCloudHashingGoodsServer
// for forward compatibility
type CloudHashingGoodsServer interface {
	Version(context.Context, *emptypb.Empty) (*VersionResponse, error)
	CreateVendorLocation(context.Context, *CreateVendorLocationRequest) (*CreateVendorLocationResponse, error)
	UpdateVendorLocation(context.Context, *UpdateVendorLocationRequest) (*UpdateVendorLocationResponse, error)
	GetVendorLocation(context.Context, *GetVendorLocationRequest) (*GetVendorLocationResponse, error)
	DeleteVendorLocation(context.Context, *DeleteVendorLocationRequest) (*DeleteVendorLocationResponse, error)
	GetVendorLocations(context.Context, *GetVendorLocationsRequest) (*GetVendorLocationsResponse, error)
	CreatePriceCurrency(context.Context, *CreatePriceCurrencyRequest) (*CreatePriceCurrencyResponse, error)
	UpdatePriceCurrency(context.Context, *UpdatePriceCurrencyRequest) (*UpdatePriceCurrencyResponse, error)
	GetPriceCurrency(context.Context, *GetPriceCurrencyRequest) (*GetPriceCurrencyResponse, error)
	GetPriceCurrencys(context.Context, *GetPriceCurrencysRequest) (*GetPriceCurrencysResponse, error)
	CreateTargetArea(context.Context, *CreateTargetAreaRequest) (*CreateTargetAreaResponse, error)
	UpdateTargetArea(context.Context, *UpdateTargetAreaRequest) (*UpdateTargetAreaResponse, error)
	GetTargetArea(context.Context, *GetTargetAreaRequest) (*GetTargetAreaResponse, error)
	DeleteTargetArea(context.Context, *DeleteTargetAreaRequest) (*DeleteTargetAreaResponse, error)
	DeleteTargetAreaByContinentCountry(context.Context, *DeleteTargetAreaByContinentCountryRequest) (*DeleteTargetAreaByContinentCountryResponse, error)
	GetTargetAreas(context.Context, *GetTargetAreasRequest) (*GetTargetAreasResponse, error)
	CreateDeviceInfo(context.Context, *CreateDeviceInfoRequest) (*CreateDeviceInfoResponse, error)
	UpdateDeviceInfo(context.Context, *UpdateDeviceInfoRequest) (*UpdateDeviceInfoResponse, error)
	GetDeviceInfo(context.Context, *GetDeviceInfoRequest) (*GetDeviceInfoResponse, error)
	DeleteDeviceInfo(context.Context, *DeleteDeviceInfoRequest) (*DeleteDeviceInfoResponse, error)
	GetDeviceInfos(context.Context, *GetDeviceInfosRequest) (*GetDeviceInfosResponse, error)
	// Good information for CRUD
	CreateGood(context.Context, *CreateGoodRequest) (*CreateGoodResponse, error)
	UpdateGood(context.Context, *UpdateGoodRequest) (*UpdateGoodResponse, error)
	GetGood(context.Context, *GetGoodRequest) (*GetGoodResponse, error)
	DeleteGood(context.Context, *DeleteGoodRequest) (*DeleteGoodResponse, error)
	GetGoods(context.Context, *GetGoodsRequest) (*GetGoodsResponse, error)
	// Good information for API
	GetGoodDetail(context.Context, *GetGoodDetailRequest) (*GetGoodDetailResponse, error)
	GetGoodsDetail(context.Context, *GetGoodsDetailRequest) (*GetGoodsDetailResponse, error)
	CreateRecommend(context.Context, *CreateRecommendRequest) (*CreateRecommendResponse, error)
	UpdateRecommend(context.Context, *UpdateRecommendRequest) (*UpdateRecommendResponse, error)
	GetRecommendsByApp(context.Context, *GetRecommendsByAppRequest) (*GetRecommendsByAppResponse, error)
	GetRecommendsByRecommender(context.Context, *GetRecommendsByRecommenderRequest) (*GetRecommendsByRecommenderResponse, error)
	DeleteRecommend(context.Context, *DeleteRecommendRequest) (*DeleteRecommendResponse, error)
	GetRecommendGoodsByApp(context.Context, *GetRecommendGoodsByAppRequest) (*GetRecommendGoodsByAppResponse, error)
	GetRecommendGoodsByRecommender(context.Context, *GetRecommendGoodsByRecommenderRequest) (*GetRecommendGoodsByRecommenderResponse, error)
	AuthorizeAppGood(context.Context, *AuthorizeAppGoodRequest) (*AuthorizeAppGoodResponse, error)
	SetAppGoodPrice(context.Context, *SetAppGoodPriceRequest) (*SetAppGoodPriceResponse, error)
	CheckAppGood(context.Context, *CheckAppGoodRequest) (*CheckAppGoodResponse, error)
	OnsaleAppGood(context.Context, *OnsaleAppGoodRequest) (*OnsaleAppGoodResponse, error)
	OffsaleAppGood(context.Context, *OffsaleAppGoodRequest) (*OffsaleAppGoodResponse, error)
	UnauthorizeAppGood(context.Context, *UnauthorizeAppGoodRequest) (*UnauthorizeAppGoodResponse, error)
	AuthorizeAppTargetArea(context.Context, *AuthorizeAppTargetAreaRequest) (*AuthorizeAppTargetAreaResponse, error)
	CheckAppTargetArea(context.Context, *CheckAppTargetAreaRequest) (*CheckAppTargetAreaResponse, error)
	UnauthorizeAppTargetArea(context.Context, *UnauthorizeAppTargetAreaRequest) (*UnauthorizeAppTargetAreaResponse, error)
	AuthorizeAppGoodTargetArea(context.Context, *AuthorizeAppGoodTargetAreaRequest) (*AuthorizeAppGoodTargetAreaResponse, error)
	CheckAppGoodTargetArea(context.Context, *CheckAppGoodTargetAreaRequest) (*CheckAppGoodTargetAreaResponse, error)
	UnauthorizeAppGoodTargetArea(context.Context, *UnauthorizeAppGoodTargetAreaRequest) (*UnauthorizeAppGoodTargetAreaResponse, error)
	CreateGoodComment(context.Context, *CreateGoodCommentRequest) (*CreateGoodCommentResponse, error)
	UpdateGoodComment(context.Context, *UpdateGoodCommentRequest) (*UpdateGoodCommentResponse, error)
	GetGoodComments(context.Context, *GetGoodCommentsRequest) (*GetGoodCommentsResponse, error)
	CreateGoodExtraInfo(context.Context, *CreateGoodExtraInfoRequest) (*CreateGoodExtraInfoRequest, error)
	GetGoodExtraInfo(context.Context, *GetGoodExtraInfoRequest) (*GetGoodExtraInfoRequest, error)
	UpdateGoodExtraInfo(context.Context, *UpdateGoodExtraInfoRequest) (*UpdateGoodExtraInfoRequest, error)
	CreateGoodReview(context.Context, *CreateGoodReviewRequest) (*CreateGoodReviewResponse, error)
	UpdateGoodReview(context.Context, *UpdateGoodReviewRequest) (*UpdateGoodReviewResponse, error)
	GetGoodReview(context.Context, *GetGoodReviewRequest) (*GetGoodReviewResponse, error)
	CreateFee(context.Context, *CreateFeeRequest) (*CreateFeeResponse, error)
	GetFee(context.Context, *GetFeeRequest) (*GetFeeResponse, error)
	GetFees(context.Context, *GetFeesRequest) (*GetFeesResponse, error)
	CreateFeeType(context.Context, *CreateFeeTypeRequest) (*CreateFeeTypeResponse, error)
	UpdateFeeType(context.Context, *UpdateFeeTypeRequest) (*UpdateFeeTypeResponse, error)
	GetFeeType(context.Context, *GetFeeTypeRequest) (*GetFeeTypeResponse, error)
	GetFeeTypes(context.Context, *GetFeeTypesRequest) (*GetFeeTypesResponse, error)
	mustEmbedUnimplementedCloudHashingGoodsServer()
}

// UnimplementedCloudHashingGoodsServer must be embedded to have forward compatible implementations.
type UnimplementedCloudHashingGoodsServer struct {
}

func (UnimplementedCloudHashingGoodsServer) Version(context.Context, *emptypb.Empty) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedCloudHashingGoodsServer) CreateVendorLocation(context.Context, *CreateVendorLocationRequest) (*CreateVendorLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVendorLocation not implemented")
}
func (UnimplementedCloudHashingGoodsServer) UpdateVendorLocation(context.Context, *UpdateVendorLocationRequest) (*UpdateVendorLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVendorLocation not implemented")
}
func (UnimplementedCloudHashingGoodsServer) GetVendorLocation(context.Context, *GetVendorLocationRequest) (*GetVendorLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVendorLocation not implemented")
}
func (UnimplementedCloudHashingGoodsServer) DeleteVendorLocation(context.Context, *DeleteVendorLocationRequest) (*DeleteVendorLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVendorLocation not implemented")
}
func (UnimplementedCloudHashingGoodsServer) GetVendorLocations(context.Context, *GetVendorLocationsRequest) (*GetVendorLocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVendorLocations not implemented")
}
func (UnimplementedCloudHashingGoodsServer) CreatePriceCurrency(context.Context, *CreatePriceCurrencyRequest) (*CreatePriceCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePriceCurrency not implemented")
}
func (UnimplementedCloudHashingGoodsServer) UpdatePriceCurrency(context.Context, *UpdatePriceCurrencyRequest) (*UpdatePriceCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePriceCurrency not implemented")
}
func (UnimplementedCloudHashingGoodsServer) GetPriceCurrency(context.Context, *GetPriceCurrencyRequest) (*GetPriceCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPriceCurrency not implemented")
}
func (UnimplementedCloudHashingGoodsServer) GetPriceCurrencys(context.Context, *GetPriceCurrencysRequest) (*GetPriceCurrencysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPriceCurrencys not implemented")
}
func (UnimplementedCloudHashingGoodsServer) CreateTargetArea(context.Context, *CreateTargetAreaRequest) (*CreateTargetAreaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTargetArea not implemented")
}
func (UnimplementedCloudHashingGoodsServer) UpdateTargetArea(context.Context, *UpdateTargetAreaRequest) (*UpdateTargetAreaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTargetArea not implemented")
}
func (UnimplementedCloudHashingGoodsServer) GetTargetArea(context.Context, *GetTargetAreaRequest) (*GetTargetAreaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTargetArea not implemented")
}
func (UnimplementedCloudHashingGoodsServer) DeleteTargetArea(context.Context, *DeleteTargetAreaRequest) (*DeleteTargetAreaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTargetArea not implemented")
}
func (UnimplementedCloudHashingGoodsServer) DeleteTargetAreaByContinentCountry(context.Context, *DeleteTargetAreaByContinentCountryRequest) (*DeleteTargetAreaByContinentCountryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTargetAreaByContinentCountry not implemented")
}
func (UnimplementedCloudHashingGoodsServer) GetTargetAreas(context.Context, *GetTargetAreasRequest) (*GetTargetAreasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTargetAreas not implemented")
}
func (UnimplementedCloudHashingGoodsServer) CreateDeviceInfo(context.Context, *CreateDeviceInfoRequest) (*CreateDeviceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeviceInfo not implemented")
}
func (UnimplementedCloudHashingGoodsServer) UpdateDeviceInfo(context.Context, *UpdateDeviceInfoRequest) (*UpdateDeviceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeviceInfo not implemented")
}
func (UnimplementedCloudHashingGoodsServer) GetDeviceInfo(context.Context, *GetDeviceInfoRequest) (*GetDeviceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceInfo not implemented")
}
func (UnimplementedCloudHashingGoodsServer) DeleteDeviceInfo(context.Context, *DeleteDeviceInfoRequest) (*DeleteDeviceInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeviceInfo not implemented")
}
func (UnimplementedCloudHashingGoodsServer) GetDeviceInfos(context.Context, *GetDeviceInfosRequest) (*GetDeviceInfosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceInfos not implemented")
}
func (UnimplementedCloudHashingGoodsServer) CreateGood(context.Context, *CreateGoodRequest) (*CreateGoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGood not implemented")
}
func (UnimplementedCloudHashingGoodsServer) UpdateGood(context.Context, *UpdateGoodRequest) (*UpdateGoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGood not implemented")
}
func (UnimplementedCloudHashingGoodsServer) GetGood(context.Context, *GetGoodRequest) (*GetGoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGood not implemented")
}
func (UnimplementedCloudHashingGoodsServer) DeleteGood(context.Context, *DeleteGoodRequest) (*DeleteGoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGood not implemented")
}
func (UnimplementedCloudHashingGoodsServer) GetGoods(context.Context, *GetGoodsRequest) (*GetGoodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoods not implemented")
}
func (UnimplementedCloudHashingGoodsServer) GetGoodDetail(context.Context, *GetGoodDetailRequest) (*GetGoodDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodDetail not implemented")
}
func (UnimplementedCloudHashingGoodsServer) GetGoodsDetail(context.Context, *GetGoodsDetailRequest) (*GetGoodsDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodsDetail not implemented")
}
func (UnimplementedCloudHashingGoodsServer) CreateRecommend(context.Context, *CreateRecommendRequest) (*CreateRecommendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecommend not implemented")
}
func (UnimplementedCloudHashingGoodsServer) UpdateRecommend(context.Context, *UpdateRecommendRequest) (*UpdateRecommendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecommend not implemented")
}
func (UnimplementedCloudHashingGoodsServer) GetRecommendsByApp(context.Context, *GetRecommendsByAppRequest) (*GetRecommendsByAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendsByApp not implemented")
}
func (UnimplementedCloudHashingGoodsServer) GetRecommendsByRecommender(context.Context, *GetRecommendsByRecommenderRequest) (*GetRecommendsByRecommenderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendsByRecommender not implemented")
}
func (UnimplementedCloudHashingGoodsServer) DeleteRecommend(context.Context, *DeleteRecommendRequest) (*DeleteRecommendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecommend not implemented")
}
func (UnimplementedCloudHashingGoodsServer) GetRecommendGoodsByApp(context.Context, *GetRecommendGoodsByAppRequest) (*GetRecommendGoodsByAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendGoodsByApp not implemented")
}
func (UnimplementedCloudHashingGoodsServer) GetRecommendGoodsByRecommender(context.Context, *GetRecommendGoodsByRecommenderRequest) (*GetRecommendGoodsByRecommenderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendGoodsByRecommender not implemented")
}
func (UnimplementedCloudHashingGoodsServer) AuthorizeAppGood(context.Context, *AuthorizeAppGoodRequest) (*AuthorizeAppGoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizeAppGood not implemented")
}
func (UnimplementedCloudHashingGoodsServer) SetAppGoodPrice(context.Context, *SetAppGoodPriceRequest) (*SetAppGoodPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAppGoodPrice not implemented")
}
func (UnimplementedCloudHashingGoodsServer) CheckAppGood(context.Context, *CheckAppGoodRequest) (*CheckAppGoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAppGood not implemented")
}
func (UnimplementedCloudHashingGoodsServer) OnsaleAppGood(context.Context, *OnsaleAppGoodRequest) (*OnsaleAppGoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnsaleAppGood not implemented")
}
func (UnimplementedCloudHashingGoodsServer) OffsaleAppGood(context.Context, *OffsaleAppGoodRequest) (*OffsaleAppGoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OffsaleAppGood not implemented")
}
func (UnimplementedCloudHashingGoodsServer) UnauthorizeAppGood(context.Context, *UnauthorizeAppGoodRequest) (*UnauthorizeAppGoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnauthorizeAppGood not implemented")
}
func (UnimplementedCloudHashingGoodsServer) AuthorizeAppTargetArea(context.Context, *AuthorizeAppTargetAreaRequest) (*AuthorizeAppTargetAreaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizeAppTargetArea not implemented")
}
func (UnimplementedCloudHashingGoodsServer) CheckAppTargetArea(context.Context, *CheckAppTargetAreaRequest) (*CheckAppTargetAreaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAppTargetArea not implemented")
}
func (UnimplementedCloudHashingGoodsServer) UnauthorizeAppTargetArea(context.Context, *UnauthorizeAppTargetAreaRequest) (*UnauthorizeAppTargetAreaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnauthorizeAppTargetArea not implemented")
}
func (UnimplementedCloudHashingGoodsServer) AuthorizeAppGoodTargetArea(context.Context, *AuthorizeAppGoodTargetAreaRequest) (*AuthorizeAppGoodTargetAreaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizeAppGoodTargetArea not implemented")
}
func (UnimplementedCloudHashingGoodsServer) CheckAppGoodTargetArea(context.Context, *CheckAppGoodTargetAreaRequest) (*CheckAppGoodTargetAreaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckAppGoodTargetArea not implemented")
}
func (UnimplementedCloudHashingGoodsServer) UnauthorizeAppGoodTargetArea(context.Context, *UnauthorizeAppGoodTargetAreaRequest) (*UnauthorizeAppGoodTargetAreaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnauthorizeAppGoodTargetArea not implemented")
}
func (UnimplementedCloudHashingGoodsServer) CreateGoodComment(context.Context, *CreateGoodCommentRequest) (*CreateGoodCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGoodComment not implemented")
}
func (UnimplementedCloudHashingGoodsServer) UpdateGoodComment(context.Context, *UpdateGoodCommentRequest) (*UpdateGoodCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGoodComment not implemented")
}
func (UnimplementedCloudHashingGoodsServer) GetGoodComments(context.Context, *GetGoodCommentsRequest) (*GetGoodCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodComments not implemented")
}
func (UnimplementedCloudHashingGoodsServer) CreateGoodExtraInfo(context.Context, *CreateGoodExtraInfoRequest) (*CreateGoodExtraInfoRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGoodExtraInfo not implemented")
}
func (UnimplementedCloudHashingGoodsServer) GetGoodExtraInfo(context.Context, *GetGoodExtraInfoRequest) (*GetGoodExtraInfoRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodExtraInfo not implemented")
}
func (UnimplementedCloudHashingGoodsServer) UpdateGoodExtraInfo(context.Context, *UpdateGoodExtraInfoRequest) (*UpdateGoodExtraInfoRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGoodExtraInfo not implemented")
}
func (UnimplementedCloudHashingGoodsServer) CreateGoodReview(context.Context, *CreateGoodReviewRequest) (*CreateGoodReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGoodReview not implemented")
}
func (UnimplementedCloudHashingGoodsServer) UpdateGoodReview(context.Context, *UpdateGoodReviewRequest) (*UpdateGoodReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGoodReview not implemented")
}
func (UnimplementedCloudHashingGoodsServer) GetGoodReview(context.Context, *GetGoodReviewRequest) (*GetGoodReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodReview not implemented")
}
func (UnimplementedCloudHashingGoodsServer) CreateFee(context.Context, *CreateFeeRequest) (*CreateFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFee not implemented")
}
func (UnimplementedCloudHashingGoodsServer) GetFee(context.Context, *GetFeeRequest) (*GetFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFee not implemented")
}
func (UnimplementedCloudHashingGoodsServer) GetFees(context.Context, *GetFeesRequest) (*GetFeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFees not implemented")
}
func (UnimplementedCloudHashingGoodsServer) CreateFeeType(context.Context, *CreateFeeTypeRequest) (*CreateFeeTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeeType not implemented")
}
func (UnimplementedCloudHashingGoodsServer) UpdateFeeType(context.Context, *UpdateFeeTypeRequest) (*UpdateFeeTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeeType not implemented")
}
func (UnimplementedCloudHashingGoodsServer) GetFeeType(context.Context, *GetFeeTypeRequest) (*GetFeeTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeeType not implemented")
}
func (UnimplementedCloudHashingGoodsServer) GetFeeTypes(context.Context, *GetFeeTypesRequest) (*GetFeeTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeeTypes not implemented")
}
func (UnimplementedCloudHashingGoodsServer) mustEmbedUnimplementedCloudHashingGoodsServer() {}

// UnsafeCloudHashingGoodsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudHashingGoodsServer will
// result in compilation errors.
type UnsafeCloudHashingGoodsServer interface {
	mustEmbedUnimplementedCloudHashingGoodsServer()
}

func RegisterCloudHashingGoodsServer(s grpc.ServiceRegistrar, srv CloudHashingGoodsServer) {
	s.RegisterService(&CloudHashingGoods_ServiceDesc, srv)
}

func _CloudHashingGoods_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_CreateVendorLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVendorLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).CreateVendorLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/CreateVendorLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).CreateVendorLocation(ctx, req.(*CreateVendorLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_UpdateVendorLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVendorLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).UpdateVendorLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/UpdateVendorLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).UpdateVendorLocation(ctx, req.(*UpdateVendorLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_GetVendorLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVendorLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).GetVendorLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/GetVendorLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).GetVendorLocation(ctx, req.(*GetVendorLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_DeleteVendorLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVendorLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).DeleteVendorLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/DeleteVendorLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).DeleteVendorLocation(ctx, req.(*DeleteVendorLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_GetVendorLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVendorLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).GetVendorLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/GetVendorLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).GetVendorLocations(ctx, req.(*GetVendorLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_CreatePriceCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePriceCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).CreatePriceCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/CreatePriceCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).CreatePriceCurrency(ctx, req.(*CreatePriceCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_UpdatePriceCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePriceCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).UpdatePriceCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/UpdatePriceCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).UpdatePriceCurrency(ctx, req.(*UpdatePriceCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_GetPriceCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPriceCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).GetPriceCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/GetPriceCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).GetPriceCurrency(ctx, req.(*GetPriceCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_GetPriceCurrencys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPriceCurrencysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).GetPriceCurrencys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/GetPriceCurrencys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).GetPriceCurrencys(ctx, req.(*GetPriceCurrencysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_CreateTargetArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTargetAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).CreateTargetArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/CreateTargetArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).CreateTargetArea(ctx, req.(*CreateTargetAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_UpdateTargetArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTargetAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).UpdateTargetArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/UpdateTargetArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).UpdateTargetArea(ctx, req.(*UpdateTargetAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_GetTargetArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTargetAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).GetTargetArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/GetTargetArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).GetTargetArea(ctx, req.(*GetTargetAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_DeleteTargetArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTargetAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).DeleteTargetArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/DeleteTargetArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).DeleteTargetArea(ctx, req.(*DeleteTargetAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_DeleteTargetAreaByContinentCountry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTargetAreaByContinentCountryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).DeleteTargetAreaByContinentCountry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/DeleteTargetAreaByContinentCountry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).DeleteTargetAreaByContinentCountry(ctx, req.(*DeleteTargetAreaByContinentCountryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_GetTargetAreas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTargetAreasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).GetTargetAreas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/GetTargetAreas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).GetTargetAreas(ctx, req.(*GetTargetAreasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_CreateDeviceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).CreateDeviceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/CreateDeviceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).CreateDeviceInfo(ctx, req.(*CreateDeviceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_UpdateDeviceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).UpdateDeviceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/UpdateDeviceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).UpdateDeviceInfo(ctx, req.(*UpdateDeviceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_GetDeviceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).GetDeviceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/GetDeviceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).GetDeviceInfo(ctx, req.(*GetDeviceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_DeleteDeviceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).DeleteDeviceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/DeleteDeviceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).DeleteDeviceInfo(ctx, req.(*DeleteDeviceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_GetDeviceInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceInfosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).GetDeviceInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/GetDeviceInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).GetDeviceInfos(ctx, req.(*GetDeviceInfosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_CreateGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).CreateGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/CreateGood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).CreateGood(ctx, req.(*CreateGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_UpdateGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).UpdateGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/UpdateGood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).UpdateGood(ctx, req.(*UpdateGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_GetGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).GetGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/GetGood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).GetGood(ctx, req.(*GetGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_DeleteGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).DeleteGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/DeleteGood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).DeleteGood(ctx, req.(*DeleteGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_GetGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).GetGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/GetGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).GetGoods(ctx, req.(*GetGoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_GetGoodDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoodDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).GetGoodDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/GetGoodDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).GetGoodDetail(ctx, req.(*GetGoodDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_GetGoodsDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoodsDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).GetGoodsDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/GetGoodsDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).GetGoodsDetail(ctx, req.(*GetGoodsDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_CreateRecommend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRecommendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).CreateRecommend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/CreateRecommend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).CreateRecommend(ctx, req.(*CreateRecommendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_UpdateRecommend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRecommendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).UpdateRecommend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/UpdateRecommend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).UpdateRecommend(ctx, req.(*UpdateRecommendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_GetRecommendsByApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendsByAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).GetRecommendsByApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/GetRecommendsByApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).GetRecommendsByApp(ctx, req.(*GetRecommendsByAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_GetRecommendsByRecommender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendsByRecommenderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).GetRecommendsByRecommender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/GetRecommendsByRecommender",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).GetRecommendsByRecommender(ctx, req.(*GetRecommendsByRecommenderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_DeleteRecommend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRecommendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).DeleteRecommend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/DeleteRecommend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).DeleteRecommend(ctx, req.(*DeleteRecommendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_GetRecommendGoodsByApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendGoodsByAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).GetRecommendGoodsByApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/GetRecommendGoodsByApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).GetRecommendGoodsByApp(ctx, req.(*GetRecommendGoodsByAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_GetRecommendGoodsByRecommender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendGoodsByRecommenderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).GetRecommendGoodsByRecommender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/GetRecommendGoodsByRecommender",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).GetRecommendGoodsByRecommender(ctx, req.(*GetRecommendGoodsByRecommenderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_AuthorizeAppGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeAppGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).AuthorizeAppGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/AuthorizeAppGood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).AuthorizeAppGood(ctx, req.(*AuthorizeAppGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_SetAppGoodPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAppGoodPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).SetAppGoodPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/SetAppGoodPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).SetAppGoodPrice(ctx, req.(*SetAppGoodPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_CheckAppGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAppGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).CheckAppGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/CheckAppGood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).CheckAppGood(ctx, req.(*CheckAppGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_OnsaleAppGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnsaleAppGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).OnsaleAppGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/OnsaleAppGood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).OnsaleAppGood(ctx, req.(*OnsaleAppGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_OffsaleAppGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OffsaleAppGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).OffsaleAppGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/OffsaleAppGood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).OffsaleAppGood(ctx, req.(*OffsaleAppGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_UnauthorizeAppGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnauthorizeAppGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).UnauthorizeAppGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/UnauthorizeAppGood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).UnauthorizeAppGood(ctx, req.(*UnauthorizeAppGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_AuthorizeAppTargetArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeAppTargetAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).AuthorizeAppTargetArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/AuthorizeAppTargetArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).AuthorizeAppTargetArea(ctx, req.(*AuthorizeAppTargetAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_CheckAppTargetArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAppTargetAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).CheckAppTargetArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/CheckAppTargetArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).CheckAppTargetArea(ctx, req.(*CheckAppTargetAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_UnauthorizeAppTargetArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnauthorizeAppTargetAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).UnauthorizeAppTargetArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/UnauthorizeAppTargetArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).UnauthorizeAppTargetArea(ctx, req.(*UnauthorizeAppTargetAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_AuthorizeAppGoodTargetArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeAppGoodTargetAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).AuthorizeAppGoodTargetArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/AuthorizeAppGoodTargetArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).AuthorizeAppGoodTargetArea(ctx, req.(*AuthorizeAppGoodTargetAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_CheckAppGoodTargetArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckAppGoodTargetAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).CheckAppGoodTargetArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/CheckAppGoodTargetArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).CheckAppGoodTargetArea(ctx, req.(*CheckAppGoodTargetAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_UnauthorizeAppGoodTargetArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnauthorizeAppGoodTargetAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).UnauthorizeAppGoodTargetArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/UnauthorizeAppGoodTargetArea",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).UnauthorizeAppGoodTargetArea(ctx, req.(*UnauthorizeAppGoodTargetAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_CreateGoodComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGoodCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).CreateGoodComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/CreateGoodComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).CreateGoodComment(ctx, req.(*CreateGoodCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_UpdateGoodComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGoodCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).UpdateGoodComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/UpdateGoodComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).UpdateGoodComment(ctx, req.(*UpdateGoodCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_GetGoodComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoodCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).GetGoodComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/GetGoodComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).GetGoodComments(ctx, req.(*GetGoodCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_CreateGoodExtraInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGoodExtraInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).CreateGoodExtraInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/CreateGoodExtraInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).CreateGoodExtraInfo(ctx, req.(*CreateGoodExtraInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_GetGoodExtraInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoodExtraInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).GetGoodExtraInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/GetGoodExtraInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).GetGoodExtraInfo(ctx, req.(*GetGoodExtraInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_UpdateGoodExtraInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGoodExtraInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).UpdateGoodExtraInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/UpdateGoodExtraInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).UpdateGoodExtraInfo(ctx, req.(*UpdateGoodExtraInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_CreateGoodReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGoodReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).CreateGoodReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/CreateGoodReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).CreateGoodReview(ctx, req.(*CreateGoodReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_UpdateGoodReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGoodReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).UpdateGoodReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/UpdateGoodReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).UpdateGoodReview(ctx, req.(*UpdateGoodReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_GetGoodReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoodReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).GetGoodReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/GetGoodReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).GetGoodReview(ctx, req.(*GetGoodReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_CreateFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).CreateFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/CreateFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).CreateFee(ctx, req.(*CreateFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_GetFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).GetFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/GetFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).GetFee(ctx, req.(*GetFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_GetFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).GetFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/GetFees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).GetFees(ctx, req.(*GetFeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_CreateFeeType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFeeTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).CreateFeeType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/CreateFeeType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).CreateFeeType(ctx, req.(*CreateFeeTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_UpdateFeeType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeeTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).UpdateFeeType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/UpdateFeeType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).UpdateFeeType(ctx, req.(*UpdateFeeTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_GetFeeType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeeTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).GetFeeType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/GetFeeType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).GetFeeType(ctx, req.(*GetFeeTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingGoods_GetFeeTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeeTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingGoodsServer).GetFeeTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.goods.v1.CloudHashingGoods/GetFeeTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingGoodsServer).GetFeeTypes(ctx, req.(*GetFeeTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudHashingGoods_ServiceDesc is the grpc.ServiceDesc for CloudHashingGoods service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudHashingGoods_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.hashing.goods.v1.CloudHashingGoods",
	HandlerType: (*CloudHashingGoodsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _CloudHashingGoods_Version_Handler,
		},
		{
			MethodName: "CreateVendorLocation",
			Handler:    _CloudHashingGoods_CreateVendorLocation_Handler,
		},
		{
			MethodName: "UpdateVendorLocation",
			Handler:    _CloudHashingGoods_UpdateVendorLocation_Handler,
		},
		{
			MethodName: "GetVendorLocation",
			Handler:    _CloudHashingGoods_GetVendorLocation_Handler,
		},
		{
			MethodName: "DeleteVendorLocation",
			Handler:    _CloudHashingGoods_DeleteVendorLocation_Handler,
		},
		{
			MethodName: "GetVendorLocations",
			Handler:    _CloudHashingGoods_GetVendorLocations_Handler,
		},
		{
			MethodName: "CreatePriceCurrency",
			Handler:    _CloudHashingGoods_CreatePriceCurrency_Handler,
		},
		{
			MethodName: "UpdatePriceCurrency",
			Handler:    _CloudHashingGoods_UpdatePriceCurrency_Handler,
		},
		{
			MethodName: "GetPriceCurrency",
			Handler:    _CloudHashingGoods_GetPriceCurrency_Handler,
		},
		{
			MethodName: "GetPriceCurrencys",
			Handler:    _CloudHashingGoods_GetPriceCurrencys_Handler,
		},
		{
			MethodName: "CreateTargetArea",
			Handler:    _CloudHashingGoods_CreateTargetArea_Handler,
		},
		{
			MethodName: "UpdateTargetArea",
			Handler:    _CloudHashingGoods_UpdateTargetArea_Handler,
		},
		{
			MethodName: "GetTargetArea",
			Handler:    _CloudHashingGoods_GetTargetArea_Handler,
		},
		{
			MethodName: "DeleteTargetArea",
			Handler:    _CloudHashingGoods_DeleteTargetArea_Handler,
		},
		{
			MethodName: "DeleteTargetAreaByContinentCountry",
			Handler:    _CloudHashingGoods_DeleteTargetAreaByContinentCountry_Handler,
		},
		{
			MethodName: "GetTargetAreas",
			Handler:    _CloudHashingGoods_GetTargetAreas_Handler,
		},
		{
			MethodName: "CreateDeviceInfo",
			Handler:    _CloudHashingGoods_CreateDeviceInfo_Handler,
		},
		{
			MethodName: "UpdateDeviceInfo",
			Handler:    _CloudHashingGoods_UpdateDeviceInfo_Handler,
		},
		{
			MethodName: "GetDeviceInfo",
			Handler:    _CloudHashingGoods_GetDeviceInfo_Handler,
		},
		{
			MethodName: "DeleteDeviceInfo",
			Handler:    _CloudHashingGoods_DeleteDeviceInfo_Handler,
		},
		{
			MethodName: "GetDeviceInfos",
			Handler:    _CloudHashingGoods_GetDeviceInfos_Handler,
		},
		{
			MethodName: "CreateGood",
			Handler:    _CloudHashingGoods_CreateGood_Handler,
		},
		{
			MethodName: "UpdateGood",
			Handler:    _CloudHashingGoods_UpdateGood_Handler,
		},
		{
			MethodName: "GetGood",
			Handler:    _CloudHashingGoods_GetGood_Handler,
		},
		{
			MethodName: "DeleteGood",
			Handler:    _CloudHashingGoods_DeleteGood_Handler,
		},
		{
			MethodName: "GetGoods",
			Handler:    _CloudHashingGoods_GetGoods_Handler,
		},
		{
			MethodName: "GetGoodDetail",
			Handler:    _CloudHashingGoods_GetGoodDetail_Handler,
		},
		{
			MethodName: "GetGoodsDetail",
			Handler:    _CloudHashingGoods_GetGoodsDetail_Handler,
		},
		{
			MethodName: "CreateRecommend",
			Handler:    _CloudHashingGoods_CreateRecommend_Handler,
		},
		{
			MethodName: "UpdateRecommend",
			Handler:    _CloudHashingGoods_UpdateRecommend_Handler,
		},
		{
			MethodName: "GetRecommendsByApp",
			Handler:    _CloudHashingGoods_GetRecommendsByApp_Handler,
		},
		{
			MethodName: "GetRecommendsByRecommender",
			Handler:    _CloudHashingGoods_GetRecommendsByRecommender_Handler,
		},
		{
			MethodName: "DeleteRecommend",
			Handler:    _CloudHashingGoods_DeleteRecommend_Handler,
		},
		{
			MethodName: "GetRecommendGoodsByApp",
			Handler:    _CloudHashingGoods_GetRecommendGoodsByApp_Handler,
		},
		{
			MethodName: "GetRecommendGoodsByRecommender",
			Handler:    _CloudHashingGoods_GetRecommendGoodsByRecommender_Handler,
		},
		{
			MethodName: "AuthorizeAppGood",
			Handler:    _CloudHashingGoods_AuthorizeAppGood_Handler,
		},
		{
			MethodName: "SetAppGoodPrice",
			Handler:    _CloudHashingGoods_SetAppGoodPrice_Handler,
		},
		{
			MethodName: "CheckAppGood",
			Handler:    _CloudHashingGoods_CheckAppGood_Handler,
		},
		{
			MethodName: "OnsaleAppGood",
			Handler:    _CloudHashingGoods_OnsaleAppGood_Handler,
		},
		{
			MethodName: "OffsaleAppGood",
			Handler:    _CloudHashingGoods_OffsaleAppGood_Handler,
		},
		{
			MethodName: "UnauthorizeAppGood",
			Handler:    _CloudHashingGoods_UnauthorizeAppGood_Handler,
		},
		{
			MethodName: "AuthorizeAppTargetArea",
			Handler:    _CloudHashingGoods_AuthorizeAppTargetArea_Handler,
		},
		{
			MethodName: "CheckAppTargetArea",
			Handler:    _CloudHashingGoods_CheckAppTargetArea_Handler,
		},
		{
			MethodName: "UnauthorizeAppTargetArea",
			Handler:    _CloudHashingGoods_UnauthorizeAppTargetArea_Handler,
		},
		{
			MethodName: "AuthorizeAppGoodTargetArea",
			Handler:    _CloudHashingGoods_AuthorizeAppGoodTargetArea_Handler,
		},
		{
			MethodName: "CheckAppGoodTargetArea",
			Handler:    _CloudHashingGoods_CheckAppGoodTargetArea_Handler,
		},
		{
			MethodName: "UnauthorizeAppGoodTargetArea",
			Handler:    _CloudHashingGoods_UnauthorizeAppGoodTargetArea_Handler,
		},
		{
			MethodName: "CreateGoodComment",
			Handler:    _CloudHashingGoods_CreateGoodComment_Handler,
		},
		{
			MethodName: "UpdateGoodComment",
			Handler:    _CloudHashingGoods_UpdateGoodComment_Handler,
		},
		{
			MethodName: "GetGoodComments",
			Handler:    _CloudHashingGoods_GetGoodComments_Handler,
		},
		{
			MethodName: "CreateGoodExtraInfo",
			Handler:    _CloudHashingGoods_CreateGoodExtraInfo_Handler,
		},
		{
			MethodName: "GetGoodExtraInfo",
			Handler:    _CloudHashingGoods_GetGoodExtraInfo_Handler,
		},
		{
			MethodName: "UpdateGoodExtraInfo",
			Handler:    _CloudHashingGoods_UpdateGoodExtraInfo_Handler,
		},
		{
			MethodName: "CreateGoodReview",
			Handler:    _CloudHashingGoods_CreateGoodReview_Handler,
		},
		{
			MethodName: "UpdateGoodReview",
			Handler:    _CloudHashingGoods_UpdateGoodReview_Handler,
		},
		{
			MethodName: "GetGoodReview",
			Handler:    _CloudHashingGoods_GetGoodReview_Handler,
		},
		{
			MethodName: "CreateFee",
			Handler:    _CloudHashingGoods_CreateFee_Handler,
		},
		{
			MethodName: "GetFee",
			Handler:    _CloudHashingGoods_GetFee_Handler,
		},
		{
			MethodName: "GetFees",
			Handler:    _CloudHashingGoods_GetFees_Handler,
		},
		{
			MethodName: "CreateFeeType",
			Handler:    _CloudHashingGoods_CreateFeeType_Handler,
		},
		{
			MethodName: "UpdateFeeType",
			Handler:    _CloudHashingGoods_UpdateFeeType_Handler,
		},
		{
			MethodName: "GetFeeType",
			Handler:    _CloudHashingGoods_GetFeeType_Handler,
		},
		{
			MethodName: "GetFeeTypes",
			Handler:    _CloudHashingGoods_GetFeeTypes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/cloud-hashing-goods.proto",
}
