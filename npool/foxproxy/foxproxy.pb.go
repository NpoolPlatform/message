// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.18.1
// source: npool/foxproxy/foxproxy.proto

package foxproxy

import (
	v1 "github.com/NpoolPlatform/message/npool/basetypes/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ################ define types and states ###################
type StatusCode int32

const (
	StatusCode_StatusCodeDefault        StatusCode = 0
	StatusCode_StatusCodeSuccess        StatusCode = 10
	StatusCode_StatusCodeFailed         StatusCode = 11
	StatusCode_StatusCodeNotSupportCoin StatusCode = 20
	StatusCode_StatusCodeUnmarshalErr   StatusCode = 30
	StatusCode_StatusCodeMarshalErr     StatusCode = 40
)

// Enum value maps for StatusCode.
var (
	StatusCode_name = map[int32]string{
		0:  "StatusCodeDefault",
		10: "StatusCodeSuccess",
		11: "StatusCodeFailed",
		20: "StatusCodeNotSupportCoin",
		30: "StatusCodeUnmarshalErr",
		40: "StatusCodeMarshalErr",
	}
	StatusCode_value = map[string]int32{
		"StatusCodeDefault":        0,
		"StatusCodeSuccess":        10,
		"StatusCodeFailed":         11,
		"StatusCodeNotSupportCoin": 20,
		"StatusCodeUnmarshalErr":   30,
		"StatusCodeMarshalErr":     40,
	}
)

func (x StatusCode) Enum() *StatusCode {
	p := new(StatusCode)
	*p = x
	return p
}

func (x StatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_npool_foxproxy_foxproxy_proto_enumTypes[0].Descriptor()
}

func (StatusCode) Type() protoreflect.EnumType {
	return &file_npool_foxproxy_foxproxy_proto_enumTypes[0]
}

func (x StatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatusCode.Descriptor instead.
func (StatusCode) EnumDescriptor() ([]byte, []int) {
	return file_npool_foxproxy_foxproxy_proto_rawDescGZIP(), []int{0}
}

type ClientType int32

const (
	ClientType_ClientTypeDefault ClientType = 0
	ClientType_ClientTypePlugin  ClientType = 10
	ClientType_ClientTypeSign    ClientType = 20
)

// Enum value maps for ClientType.
var (
	ClientType_name = map[int32]string{
		0:  "ClientTypeDefault",
		10: "ClientTypePlugin",
		20: "ClientTypeSign",
	}
	ClientType_value = map[string]int32{
		"ClientTypeDefault": 0,
		"ClientTypePlugin":  10,
		"ClientTypeSign":    20,
	}
)

func (x ClientType) Enum() *ClientType {
	p := new(ClientType)
	*p = x
	return p
}

func (x ClientType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientType) Descriptor() protoreflect.EnumDescriptor {
	return file_npool_foxproxy_foxproxy_proto_enumTypes[1].Descriptor()
}

func (ClientType) Type() protoreflect.EnumType {
	return &file_npool_foxproxy_foxproxy_proto_enumTypes[1]
}

func (x ClientType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClientType.Descriptor instead.
func (ClientType) EnumDescriptor() ([]byte, []int) {
	return file_npool_foxproxy_foxproxy_proto_rawDescGZIP(), []int{1}
}

type MsgType int32

const (
	MsgType_MsgTypeDefault      MsgType = 0
	MsgType_MsgTypeEcho         MsgType = 1
	MsgType_MsgTypeRegisterCoin MsgType = 10
	MsgType_MsgTypeGetBalance   MsgType = 20
	MsgType_MsgTypeUpdateTx     MsgType = 30
)

// Enum value maps for MsgType.
var (
	MsgType_name = map[int32]string{
		0:  "MsgTypeDefault",
		1:  "MsgTypeEcho",
		10: "MsgTypeRegisterCoin",
		20: "MsgTypeGetBalance",
		30: "MsgTypeUpdateTx",
	}
	MsgType_value = map[string]int32{
		"MsgTypeDefault":      0,
		"MsgTypeEcho":         1,
		"MsgTypeRegisterCoin": 10,
		"MsgTypeGetBalance":   20,
		"MsgTypeUpdateTx":     30,
	}
)

func (x MsgType) Enum() *MsgType {
	p := new(MsgType)
	*p = x
	return p
}

func (x MsgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MsgType) Descriptor() protoreflect.EnumDescriptor {
	return file_npool_foxproxy_foxproxy_proto_enumTypes[2].Descriptor()
}

func (MsgType) Type() protoreflect.EnumType {
	return &file_npool_foxproxy_foxproxy_proto_enumTypes[2]
}

func (x MsgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MsgType.Descriptor instead.
func (MsgType) EnumDescriptor() ([]byte, []int) {
	return file_npool_foxproxy_foxproxy_proto_rawDescGZIP(), []int{2}
}

type CoinType int32

const (
	CoinType_CoinTypeUnKnow CoinType = 0
	// mainnet
	CoinType_CoinTypefilecoin    CoinType = 1
	CoinType_CoinTypebitcoin     CoinType = 2
	CoinType_CoinTypeethereum    CoinType = 3
	CoinType_CoinTypeusdterc20   CoinType = 4
	CoinType_CoinTypespacemesh   CoinType = 5
	CoinType_CoinTypesolana      CoinType = 6
	CoinType_CoinTypeusdttrc20   CoinType = 7
	CoinType_CoinTypebinancecoin CoinType = 8
	CoinType_CoinTypetron        CoinType = 9
	CoinType_CoinTypebinanceusd  CoinType = 10
	CoinType_CoinTypeusdcerc20   CoinType = 11
	CoinType_CoinTypealeo        CoinType = 12
	CoinType_CoinTypeironfish    CoinType = 13
	CoinType_CoinTypeusdtbep20   CoinType = 14
	CoinType_CoinTypedepinc      CoinType = 15
	CoinType_CoinTypechia        CoinType = 16
	// testnet
	CoinType_CoinTypetfilecoin    CoinType = 100
	CoinType_CoinTypetbitcoin     CoinType = 101
	CoinType_CoinTypetethereum    CoinType = 102
	CoinType_CoinTypetusdterc20   CoinType = 103
	CoinType_CoinTypetspacemesh   CoinType = 104
	CoinType_CoinTypetsolana      CoinType = 105
	CoinType_CoinTypetusdttrc20   CoinType = 106
	CoinType_CoinTypetbinancecoin CoinType = 107
	CoinType_CoinTypettron        CoinType = 108
	CoinType_CoinTypetbinanceusd  CoinType = 109
	CoinType_CoinTypetusdcerc20   CoinType = 110
	CoinType_CoinTypetaleo        CoinType = 111
	CoinType_CoinTypetironfish    CoinType = 112
	CoinType_CoinTypetusdtbep20   CoinType = 113
	CoinType_CoinTypetdepinc      CoinType = 114
	CoinType_CoinTypetchia        CoinType = 115
)

// Enum value maps for CoinType.
var (
	CoinType_name = map[int32]string{
		0:   "CoinTypeUnKnow",
		1:   "CoinTypefilecoin",
		2:   "CoinTypebitcoin",
		3:   "CoinTypeethereum",
		4:   "CoinTypeusdterc20",
		5:   "CoinTypespacemesh",
		6:   "CoinTypesolana",
		7:   "CoinTypeusdttrc20",
		8:   "CoinTypebinancecoin",
		9:   "CoinTypetron",
		10:  "CoinTypebinanceusd",
		11:  "CoinTypeusdcerc20",
		12:  "CoinTypealeo",
		13:  "CoinTypeironfish",
		14:  "CoinTypeusdtbep20",
		15:  "CoinTypedepinc",
		16:  "CoinTypechia",
		100: "CoinTypetfilecoin",
		101: "CoinTypetbitcoin",
		102: "CoinTypetethereum",
		103: "CoinTypetusdterc20",
		104: "CoinTypetspacemesh",
		105: "CoinTypetsolana",
		106: "CoinTypetusdttrc20",
		107: "CoinTypetbinancecoin",
		108: "CoinTypettron",
		109: "CoinTypetbinanceusd",
		110: "CoinTypetusdcerc20",
		111: "CoinTypetaleo",
		112: "CoinTypetironfish",
		113: "CoinTypetusdtbep20",
		114: "CoinTypetdepinc",
		115: "CoinTypetchia",
	}
	CoinType_value = map[string]int32{
		"CoinTypeUnKnow":       0,
		"CoinTypefilecoin":     1,
		"CoinTypebitcoin":      2,
		"CoinTypeethereum":     3,
		"CoinTypeusdterc20":    4,
		"CoinTypespacemesh":    5,
		"CoinTypesolana":       6,
		"CoinTypeusdttrc20":    7,
		"CoinTypebinancecoin":  8,
		"CoinTypetron":         9,
		"CoinTypebinanceusd":   10,
		"CoinTypeusdcerc20":    11,
		"CoinTypealeo":         12,
		"CoinTypeironfish":     13,
		"CoinTypeusdtbep20":    14,
		"CoinTypedepinc":       15,
		"CoinTypechia":         16,
		"CoinTypetfilecoin":    100,
		"CoinTypetbitcoin":     101,
		"CoinTypetethereum":    102,
		"CoinTypetusdterc20":   103,
		"CoinTypetspacemesh":   104,
		"CoinTypetsolana":      105,
		"CoinTypetusdttrc20":   106,
		"CoinTypetbinancecoin": 107,
		"CoinTypettron":        108,
		"CoinTypetbinanceusd":  109,
		"CoinTypetusdcerc20":   110,
		"CoinTypetaleo":        111,
		"CoinTypetironfish":    112,
		"CoinTypetusdtbep20":   113,
		"CoinTypetdepinc":      114,
		"CoinTypetchia":        115,
	}
)

func (x CoinType) Enum() *CoinType {
	p := new(CoinType)
	*p = x
	return p
}

func (x CoinType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CoinType) Descriptor() protoreflect.EnumDescriptor {
	return file_npool_foxproxy_foxproxy_proto_enumTypes[3].Descriptor()
}

func (CoinType) Type() protoreflect.EnumType {
	return &file_npool_foxproxy_foxproxy_proto_enumTypes[3]
}

func (x CoinType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CoinType.Descriptor instead.
func (CoinType) EnumDescriptor() ([]byte, []int) {
	return file_npool_foxproxy_foxproxy_proto_rawDescGZIP(), []int{3}
}

type ChainType int32

const (
	ChainType_UnKnow ChainType = 0
	// mainnet
	ChainType_Filecoin    ChainType = 1
	ChainType_Bitcoin     ChainType = 2
	ChainType_Ethereum    ChainType = 3
	ChainType_Spacemesh   ChainType = 4
	ChainType_Solana      ChainType = 5
	ChainType_Binancecoin ChainType = 6
	ChainType_Tron        ChainType = 7
	ChainType_Aleo        ChainType = 8
	ChainType_Ironfish    ChainType = 9
	ChainType_Depinc      ChainType = 10
	ChainType_Chia        ChainType = 11
	// testnet
	ChainType_TFilecoin    ChainType = 101
	ChainType_TBitcoin     ChainType = 102
	ChainType_TEthereum    ChainType = 103
	ChainType_TSpacemesh   ChainType = 104
	ChainType_TSolana      ChainType = 105
	ChainType_TBinancecoin ChainType = 106
	ChainType_TTron        ChainType = 107
	ChainType_TAleo        ChainType = 108
	ChainType_TIronfish    ChainType = 109
	ChainType_TDepinc      ChainType = 110
	ChainType_TChia        ChainType = 111
)

// Enum value maps for ChainType.
var (
	ChainType_name = map[int32]string{
		0:   "UnKnow",
		1:   "Filecoin",
		2:   "Bitcoin",
		3:   "Ethereum",
		4:   "Spacemesh",
		5:   "Solana",
		6:   "Binancecoin",
		7:   "Tron",
		8:   "Aleo",
		9:   "Ironfish",
		10:  "Depinc",
		11:  "Chia",
		101: "TFilecoin",
		102: "TBitcoin",
		103: "TEthereum",
		104: "TSpacemesh",
		105: "TSolana",
		106: "TBinancecoin",
		107: "TTron",
		108: "TAleo",
		109: "TIronfish",
		110: "TDepinc",
		111: "TChia",
	}
	ChainType_value = map[string]int32{
		"UnKnow":       0,
		"Filecoin":     1,
		"Bitcoin":      2,
		"Ethereum":     3,
		"Spacemesh":    4,
		"Solana":       5,
		"Binancecoin":  6,
		"Tron":         7,
		"Aleo":         8,
		"Ironfish":     9,
		"Depinc":       10,
		"Chia":         11,
		"TFilecoin":    101,
		"TBitcoin":     102,
		"TEthereum":    103,
		"TSpacemesh":   104,
		"TSolana":      105,
		"TBinancecoin": 106,
		"TTron":        107,
		"TAleo":        108,
		"TIronfish":    109,
		"TDepinc":      110,
		"TChia":        111,
	}
)

func (x ChainType) Enum() *ChainType {
	p := new(ChainType)
	*p = x
	return p
}

func (x ChainType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChainType) Descriptor() protoreflect.EnumDescriptor {
	return file_npool_foxproxy_foxproxy_proto_enumTypes[4].Descriptor()
}

func (ChainType) Type() protoreflect.EnumType {
	return &file_npool_foxproxy_foxproxy_proto_enumTypes[4]
}

func (x ChainType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChainType.Descriptor instead.
func (ChainType) EnumDescriptor() ([]byte, []int) {
	return file_npool_foxproxy_foxproxy_proto_rawDescGZIP(), []int{4}
}

type CoinInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string    `protobuf:"bytes,10,opt,name=Name,proto3" json:"Name,omitempty"`
	CoinType  CoinType  `protobuf:"varint,20,opt,name=CoinType,proto3,enum=fox.proxy.v1.CoinType" json:"CoinType,omitempty"`
	ChainType ChainType `protobuf:"varint,30,opt,name=ChainType,proto3,enum=fox.proxy.v1.ChainType" json:"ChainType,omitempty"`
}

func (x *CoinInfo) Reset() {
	*x = CoinInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_foxproxy_foxproxy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinInfo) ProtoMessage() {}

func (x *CoinInfo) ProtoReflect() protoreflect.Message {
	mi := &file_npool_foxproxy_foxproxy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinInfo.ProtoReflect.Descriptor instead.
func (*CoinInfo) Descriptor() ([]byte, []int) {
	return file_npool_foxproxy_foxproxy_proto_rawDescGZIP(), []int{0}
}

func (x *CoinInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CoinInfo) GetCoinType() CoinType {
	if x != nil {
		return x.CoinType
	}
	return CoinType_CoinTypeUnKnow
}

func (x *CoinInfo) GetChainType() ChainType {
	if x != nil {
		return x.ChainType
	}
	return ChainType_UnKnow
}

type ClientInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         string      `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	Infos      []*CoinInfo `protobuf:"bytes,20,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Position   string      `protobuf:"bytes,30,opt,name=Position,proto3" json:"Position,omitempty"`
	ClientType ClientType  `protobuf:"varint,40,opt,name=ClientType,proto3,enum=fox.proxy.v1.ClientType" json:"ClientType,omitempty"`
}

func (x *ClientInfo) Reset() {
	*x = ClientInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_foxproxy_foxproxy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientInfo) ProtoMessage() {}

func (x *ClientInfo) ProtoReflect() protoreflect.Message {
	mi := &file_npool_foxproxy_foxproxy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientInfo.ProtoReflect.Descriptor instead.
func (*ClientInfo) Descriptor() ([]byte, []int) {
	return file_npool_foxproxy_foxproxy_proto_rawDescGZIP(), []int{1}
}

func (x *ClientInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ClientInfo) GetInfos() []*CoinInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *ClientInfo) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *ClientInfo) GetClientType() ClientType {
	if x != nil {
		return x.ClientType
	}
	return ClientType_ClientTypeDefault
}

type RegisterCoinInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                string     `protobuf:"bytes,10,opt,name=Name,proto3" json:"Name,omitempty"`
	Unit                string     `protobuf:"bytes,20,opt,name=Unit,proto3" json:"Unit,omitempty"`
	ENV                 string     `protobuf:"bytes,30,opt,name=ENV,proto3" json:"ENV,omitempty"`
	ChainType           ChainType  `protobuf:"varint,40,opt,name=ChainType,proto3,enum=fox.proxy.v1.ChainType" json:"ChainType,omitempty"`
	ChainNativeUnit     string     `protobuf:"bytes,50,opt,name=ChainNativeUnit,proto3" json:"ChainNativeUnit,omitempty"`
	ChainAtomicUnit     string     `protobuf:"bytes,60,opt,name=ChainAtomicUnit,proto3" json:"ChainAtomicUnit,omitempty"`
	ChainUnitExp        uint32     `protobuf:"varint,70,opt,name=ChainUnitExp,proto3" json:"ChainUnitExp,omitempty"`
	GasType             v1.GasType `protobuf:"varint,80,opt,name=GasType,proto3,enum=basetypes.v1.GasType" json:"GasType,omitempty"`
	ChainID             string     `protobuf:"bytes,90,opt,name=ChainID,proto3" json:"ChainID,omitempty"`
	ChainNickname       string     `protobuf:"bytes,100,opt,name=ChainNickname,proto3" json:"ChainNickname,omitempty"`
	ChainNativeCoinName string     `protobuf:"bytes,110,opt,name=ChainNativeCoinName,proto3" json:"ChainNativeCoinName,omitempty"`
}

func (x *RegisterCoinInfo) Reset() {
	*x = RegisterCoinInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_foxproxy_foxproxy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterCoinInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterCoinInfo) ProtoMessage() {}

func (x *RegisterCoinInfo) ProtoReflect() protoreflect.Message {
	mi := &file_npool_foxproxy_foxproxy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterCoinInfo.ProtoReflect.Descriptor instead.
func (*RegisterCoinInfo) Descriptor() ([]byte, []int) {
	return file_npool_foxproxy_foxproxy_proto_rawDescGZIP(), []int{2}
}

func (x *RegisterCoinInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RegisterCoinInfo) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *RegisterCoinInfo) GetENV() string {
	if x != nil {
		return x.ENV
	}
	return ""
}

func (x *RegisterCoinInfo) GetChainType() ChainType {
	if x != nil {
		return x.ChainType
	}
	return ChainType_UnKnow
}

func (x *RegisterCoinInfo) GetChainNativeUnit() string {
	if x != nil {
		return x.ChainNativeUnit
	}
	return ""
}

func (x *RegisterCoinInfo) GetChainAtomicUnit() string {
	if x != nil {
		return x.ChainAtomicUnit
	}
	return ""
}

func (x *RegisterCoinInfo) GetChainUnitExp() uint32 {
	if x != nil {
		return x.ChainUnitExp
	}
	return 0
}

func (x *RegisterCoinInfo) GetGasType() v1.GasType {
	if x != nil {
		return x.GasType
	}
	return v1.GasType(0)
}

func (x *RegisterCoinInfo) GetChainID() string {
	if x != nil {
		return x.ChainID
	}
	return ""
}

func (x *RegisterCoinInfo) GetChainNickname() string {
	if x != nil {
		return x.ChainNickname
	}
	return ""
}

func (x *RegisterCoinInfo) GetChainNativeCoinName() string {
	if x != nil {
		return x.ChainNativeCoinName
	}
	return ""
}

type DataElement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectID  string     `protobuf:"bytes,10,opt,name=ConnectID,proto3" json:"ConnectID,omitempty"`
	MsgID      string     `protobuf:"bytes,20,opt,name=MsgID,proto3" json:"MsgID,omitempty"`
	MsgType    MsgType    `protobuf:"varint,30,opt,name=MsgType,proto3,enum=fox.proxy.v1.MsgType" json:"MsgType,omitempty"`
	Payload    []byte     `protobuf:"bytes,100,opt,name=Payload,proto3" json:"Payload,omitempty"`
	StatusCode StatusCode `protobuf:"varint,200,opt,name=StatusCode,proto3,enum=fox.proxy.v1.StatusCode" json:"StatusCode,omitempty"`
	StatusMsg  *string    `protobuf:"bytes,210,opt,name=StatusMsg,proto3,oneof" json:"StatusMsg,omitempty"`
}

func (x *DataElement) Reset() {
	*x = DataElement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_foxproxy_foxproxy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataElement) ProtoMessage() {}

func (x *DataElement) ProtoReflect() protoreflect.Message {
	mi := &file_npool_foxproxy_foxproxy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataElement.ProtoReflect.Descriptor instead.
func (*DataElement) Descriptor() ([]byte, []int) {
	return file_npool_foxproxy_foxproxy_proto_rawDescGZIP(), []int{3}
}

func (x *DataElement) GetConnectID() string {
	if x != nil {
		return x.ConnectID
	}
	return ""
}

func (x *DataElement) GetMsgID() string {
	if x != nil {
		return x.MsgID
	}
	return ""
}

func (x *DataElement) GetMsgType() MsgType {
	if x != nil {
		return x.MsgType
	}
	return MsgType_MsgTypeDefault
}

func (x *DataElement) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *DataElement) GetStatusCode() StatusCode {
	if x != nil {
		return x.StatusCode
	}
	return StatusCode_StatusCodeDefault
}

func (x *DataElement) GetStatusMsg() string {
	if x != nil && x.StatusMsg != nil {
		return *x.StatusMsg
	}
	return ""
}

type EmptyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyResponse) Reset() {
	*x = EmptyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_foxproxy_foxproxy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyResponse) ProtoMessage() {}

func (x *EmptyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_foxproxy_foxproxy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyResponse.ProtoReflect.Descriptor instead.
func (*EmptyResponse) Descriptor() ([]byte, []int) {
	return file_npool_foxproxy_foxproxy_proto_rawDescGZIP(), []int{4}
}

// ######################### sync api struct ###############################
type RegisterCoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *RegisterCoinInfo `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *RegisterCoinRequest) Reset() {
	*x = RegisterCoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_foxproxy_foxproxy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterCoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterCoinRequest) ProtoMessage() {}

func (x *RegisterCoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_foxproxy_foxproxy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterCoinRequest.ProtoReflect.Descriptor instead.
func (*RegisterCoinRequest) Descriptor() ([]byte, []int) {
	return file_npool_foxproxy_foxproxy_proto_rawDescGZIP(), []int{5}
}

func (x *RegisterCoinRequest) GetInfo() *RegisterCoinInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type RegisterCoinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RegisterCoinResponse) Reset() {
	*x = RegisterCoinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_foxproxy_foxproxy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterCoinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterCoinResponse) ProtoMessage() {}

func (x *RegisterCoinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_foxproxy_foxproxy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterCoinResponse.ProtoReflect.Descriptor instead.
func (*RegisterCoinResponse) Descriptor() ([]byte, []int) {
	return file_npool_foxproxy_foxproxy_proto_rawDescGZIP(), []int{6}
}

type GetClientInfosRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetClientInfosRequest) Reset() {
	*x = GetClientInfosRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_foxproxy_foxproxy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClientInfosRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClientInfosRequest) ProtoMessage() {}

func (x *GetClientInfosRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_foxproxy_foxproxy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClientInfosRequest.ProtoReflect.Descriptor instead.
func (*GetClientInfosRequest) Descriptor() ([]byte, []int) {
	return file_npool_foxproxy_foxproxy_proto_rawDescGZIP(), []int{7}
}

type GetClientInfosResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*ClientInfo `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32        `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetClientInfosResponse) Reset() {
	*x = GetClientInfosResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_foxproxy_foxproxy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClientInfosResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClientInfosResponse) ProtoMessage() {}

func (x *GetClientInfosResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_foxproxy_foxproxy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClientInfosResponse.ProtoReflect.Descriptor instead.
func (*GetClientInfosResponse) Descriptor() ([]byte, []int) {
	return file_npool_foxproxy_foxproxy_proto_rawDescGZIP(), []int{8}
}

func (x *GetClientInfosResponse) GetInfos() []*ClientInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetClientInfosResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

var File_npool_foxproxy_foxproxy_proto protoreflect.FileDescriptor

var file_npool_foxproxy_foxproxy_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x66, 0x6f, 0x78, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2f, 0x66, 0x6f, 0x78, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0c, 0x66, 0x6f, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f,
	0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x6e, 0x70, 0x6f, 0x6f,
	0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x67,
	0x61, 0x73, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x89, 0x01, 0x0a,
	0x08, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a,
	0x08, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x66, 0x6f, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x35, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x66, 0x6f, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa0, 0x01, 0x0a, 0x0a, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x66, 0x6f, 0x78, 0x2e, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x38, 0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x66, 0x6f, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x9e, 0x03, 0x0a, 0x10,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x4e, 0x56, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x45, 0x4e, 0x56, 0x12, 0x35, 0x0a, 0x09, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x66, 0x6f, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x3c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x74, 0x6f, 0x6d, 0x69,
	0x63, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x55, 0x6e,
	0x69, 0x74, 0x45, 0x78, 0x70, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x45, 0x78, 0x70, 0x12, 0x2f, 0x0a, 0x07, 0x47, 0x61, 0x73,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x07, 0x47, 0x61, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xf9, 0x01, 0x0a,
	0x0b, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73,
	0x67, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x44,
	0x12, 0x2f, 0x0a, 0x07, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x66, 0x6f, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x66, 0x6f, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x4d, 0x73, 0x67, 0x18, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x22, 0x0f, 0x0a, 0x0d, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x49, 0x0a, 0x13, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x32, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x66, 0x6f, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x16, 0x0a, 0x14, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5e, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x66, 0x6f, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x2a, 0xa4, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x0b, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x4e, 0x6f, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x43, 0x6f, 0x69, 0x6e, 0x10, 0x14, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x55, 0x6e, 0x6d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x45, 0x72, 0x72,
	0x10, 0x1e, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x4d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x10, 0x28, 0x2a, 0x4d, 0x0a, 0x0a,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x10, 0x14, 0x2a, 0x73, 0x0a, 0x07, 0x4d,
	0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x73,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x45, 0x63, 0x68, 0x6f, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4d,
	0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x69, 0x6e, 0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x47,
	0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x14, 0x12, 0x13, 0x0a, 0x0f, 0x4d,
	0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x78, 0x10, 0x1e,
	0x2a, 0xe0, 0x05, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x0e, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x66, 0x69, 0x6c,
	0x65, 0x63, 0x6f, 0x69, 0x6e, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x6f, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x62, 0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10,
	0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d,
	0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x75, 0x73,
	0x64, 0x74, 0x65, 0x72, 0x63, 0x32, 0x30, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x6f, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x10, 0x05,
	0x12, 0x12, 0x0a, 0x0e, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x6f, 0x6c, 0x61,
	0x6e, 0x61, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x75, 0x73, 0x64, 0x74, 0x74, 0x72, 0x63, 0x32, 0x30, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x43,
	0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x63, 0x6f,
	0x69, 0x6e, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x74, 0x72, 0x6f, 0x6e, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x75, 0x73, 0x64, 0x10, 0x0a, 0x12, 0x15,
	0x0a, 0x11, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x75, 0x73, 0x64, 0x63, 0x65, 0x72,
	0x63, 0x32, 0x30, 0x10, 0x0b, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x61, 0x6c, 0x65, 0x6f, 0x10, 0x0c, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x6f, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x69, 0x72, 0x6f, 0x6e, 0x66, 0x69, 0x73, 0x68, 0x10, 0x0d, 0x12, 0x15, 0x0a,
	0x11, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x75, 0x73, 0x64, 0x74, 0x62, 0x65, 0x70,
	0x32, 0x30, 0x10, 0x0e, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x64, 0x65, 0x70, 0x69, 0x6e, 0x63, 0x10, 0x0f, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x6f, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x63, 0x68, 0x69, 0x61, 0x10, 0x10, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x6f,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x74, 0x66, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x10,
	0x64, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x74, 0x62, 0x69,
	0x74, 0x63, 0x6f, 0x69, 0x6e, 0x10, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x6f, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x74, 0x65, 0x74, 0x68, 0x65, 0x72, 0x65, 0x75, 0x6d, 0x10, 0x66, 0x12, 0x16,
	0x0a, 0x12, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x74, 0x75, 0x73, 0x64, 0x74, 0x65,
	0x72, 0x63, 0x32, 0x30, 0x10, 0x67, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x74, 0x73, 0x70, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x73, 0x68, 0x10, 0x68, 0x12, 0x13,
	0x0a, 0x0f, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x74, 0x73, 0x6f, 0x6c, 0x61, 0x6e,
	0x61, 0x10, 0x69, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x74,
	0x75, 0x73, 0x64, 0x74, 0x74, 0x72, 0x63, 0x32, 0x30, 0x10, 0x6a, 0x12, 0x18, 0x0a, 0x14, 0x43,
	0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x74, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x63,
	0x6f, 0x69, 0x6e, 0x10, 0x6b, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x74, 0x74, 0x72, 0x6f, 0x6e, 0x10, 0x6c, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x6f, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x74, 0x62, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x75, 0x73, 0x64, 0x10,
	0x6d, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x74, 0x75, 0x73,
	0x64, 0x63, 0x65, 0x72, 0x63, 0x32, 0x30, 0x10, 0x6e, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x6f, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x74, 0x61, 0x6c, 0x65, 0x6f, 0x10, 0x6f, 0x12, 0x15, 0x0a, 0x11,
	0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x74, 0x69, 0x72, 0x6f, 0x6e, 0x66, 0x69, 0x73,
	0x68, 0x10, 0x70, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x74,
	0x75, 0x73, 0x64, 0x74, 0x62, 0x65, 0x70, 0x32, 0x30, 0x10, 0x71, 0x12, 0x13, 0x0a, 0x0f, 0x43,
	0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x74, 0x64, 0x65, 0x70, 0x69, 0x6e, 0x63, 0x10, 0x72,
	0x12, 0x11, 0x0a, 0x0d, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x74, 0x63, 0x68, 0x69,
	0x61, 0x10, 0x73, 0x2a, 0xbc, 0x02, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x6e, 0x4b, 0x6e, 0x6f, 0x77, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x46, 0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x42,
	0x69, 0x74, 0x63, 0x6f, 0x69, 0x6e, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x65, 0x75, 0x6d, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x73, 0x68, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x6f, 0x6c, 0x61, 0x6e, 0x61, 0x10,
	0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x63, 0x6f, 0x69, 0x6e,
	0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x72, 0x6f, 0x6e, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04,
	0x41, 0x6c, 0x65, 0x6f, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x72, 0x6f, 0x6e, 0x66, 0x69,
	0x73, 0x68, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x65, 0x70, 0x69, 0x6e, 0x63, 0x10, 0x0a,
	0x12, 0x08, 0x0a, 0x04, 0x43, 0x68, 0x69, 0x61, 0x10, 0x0b, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x46,
	0x69, 0x6c, 0x65, 0x63, 0x6f, 0x69, 0x6e, 0x10, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x42, 0x69,
	0x74, 0x63, 0x6f, 0x69, 0x6e, 0x10, 0x66, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x45, 0x74, 0x68, 0x65,
	0x72, 0x65, 0x75, 0x6d, 0x10, 0x67, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x53, 0x70, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x73, 0x68, 0x10, 0x68, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x53, 0x6f, 0x6c, 0x61, 0x6e,
	0x61, 0x10, 0x69, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x42, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x63,
	0x6f, 0x69, 0x6e, 0x10, 0x6a, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x54, 0x72, 0x6f, 0x6e, 0x10, 0x6b,
	0x12, 0x09, 0x0a, 0x05, 0x54, 0x41, 0x6c, 0x65, 0x6f, 0x10, 0x6c, 0x12, 0x0d, 0x0a, 0x09, 0x54,
	0x49, 0x72, 0x6f, 0x6e, 0x66, 0x69, 0x73, 0x68, 0x10, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x44,
	0x65, 0x70, 0x69, 0x6e, 0x63, 0x10, 0x6e, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x43, 0x68, 0x69, 0x61,
	0x10, 0x6f, 0x32, 0x58, 0x0a, 0x0e, 0x46, 0x6f, 0x78, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x46, 0x0a, 0x08, 0x44, 0x45, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x19, 0x2e, 0x66, 0x6f, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x19, 0x2e, 0x66, 0x6f,
	0x78, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x32, 0x99, 0x02, 0x0a,
	0x08, 0x46, 0x6f, 0x78, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x55, 0x0a, 0x07, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1d, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x0d, 0x3a, 0x01, 0x2a, 0x22, 0x08, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x57, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e,
	0x12, 0x21, 0x2e, 0x66, 0x6f, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x66, 0x6f, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x23, 0x2e, 0x66, 0x6f,
	0x78, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x66, 0x6f, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x31, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f,
	0x6f, 0x6c, 0x2f, 0x66, 0x6f, 0x78, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_npool_foxproxy_foxproxy_proto_rawDescOnce sync.Once
	file_npool_foxproxy_foxproxy_proto_rawDescData = file_npool_foxproxy_foxproxy_proto_rawDesc
)

func file_npool_foxproxy_foxproxy_proto_rawDescGZIP() []byte {
	file_npool_foxproxy_foxproxy_proto_rawDescOnce.Do(func() {
		file_npool_foxproxy_foxproxy_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_foxproxy_foxproxy_proto_rawDescData)
	})
	return file_npool_foxproxy_foxproxy_proto_rawDescData
}

var file_npool_foxproxy_foxproxy_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_npool_foxproxy_foxproxy_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_npool_foxproxy_foxproxy_proto_goTypes = []interface{}{
	(StatusCode)(0),                // 0: fox.proxy.v1.StatusCode
	(ClientType)(0),                // 1: fox.proxy.v1.ClientType
	(MsgType)(0),                   // 2: fox.proxy.v1.MsgType
	(CoinType)(0),                  // 3: fox.proxy.v1.CoinType
	(ChainType)(0),                 // 4: fox.proxy.v1.ChainType
	(*CoinInfo)(nil),               // 5: fox.proxy.v1.CoinInfo
	(*ClientInfo)(nil),             // 6: fox.proxy.v1.ClientInfo
	(*RegisterCoinInfo)(nil),       // 7: fox.proxy.v1.RegisterCoinInfo
	(*DataElement)(nil),            // 8: fox.proxy.v1.DataElement
	(*EmptyResponse)(nil),          // 9: fox.proxy.v1.EmptyResponse
	(*RegisterCoinRequest)(nil),    // 10: fox.proxy.v1.RegisterCoinRequest
	(*RegisterCoinResponse)(nil),   // 11: fox.proxy.v1.RegisterCoinResponse
	(*GetClientInfosRequest)(nil),  // 12: fox.proxy.v1.GetClientInfosRequest
	(*GetClientInfosResponse)(nil), // 13: fox.proxy.v1.GetClientInfosResponse
	(v1.GasType)(0),                // 14: basetypes.v1.GasType
	(*emptypb.Empty)(nil),          // 15: google.protobuf.Empty
	(*v1.VersionResponse)(nil),     // 16: basetypes.v1.VersionResponse
}
var file_npool_foxproxy_foxproxy_proto_depIdxs = []int32{
	3,  // 0: fox.proxy.v1.CoinInfo.CoinType:type_name -> fox.proxy.v1.CoinType
	4,  // 1: fox.proxy.v1.CoinInfo.ChainType:type_name -> fox.proxy.v1.ChainType
	5,  // 2: fox.proxy.v1.ClientInfo.Infos:type_name -> fox.proxy.v1.CoinInfo
	1,  // 3: fox.proxy.v1.ClientInfo.ClientType:type_name -> fox.proxy.v1.ClientType
	4,  // 4: fox.proxy.v1.RegisterCoinInfo.ChainType:type_name -> fox.proxy.v1.ChainType
	14, // 5: fox.proxy.v1.RegisterCoinInfo.GasType:type_name -> basetypes.v1.GasType
	2,  // 6: fox.proxy.v1.DataElement.MsgType:type_name -> fox.proxy.v1.MsgType
	0,  // 7: fox.proxy.v1.DataElement.StatusCode:type_name -> fox.proxy.v1.StatusCode
	7,  // 8: fox.proxy.v1.RegisterCoinRequest.Info:type_name -> fox.proxy.v1.RegisterCoinInfo
	6,  // 9: fox.proxy.v1.GetClientInfosResponse.Infos:type_name -> fox.proxy.v1.ClientInfo
	8,  // 10: fox.proxy.v1.FoxProxyStream.DEStream:input_type -> fox.proxy.v1.DataElement
	15, // 11: fox.proxy.v1.FoxProxy.Version:input_type -> google.protobuf.Empty
	10, // 12: fox.proxy.v1.FoxProxy.RegisterCoin:input_type -> fox.proxy.v1.RegisterCoinRequest
	12, // 13: fox.proxy.v1.FoxProxy.GetClientInfos:input_type -> fox.proxy.v1.GetClientInfosRequest
	8,  // 14: fox.proxy.v1.FoxProxyStream.DEStream:output_type -> fox.proxy.v1.DataElement
	16, // 15: fox.proxy.v1.FoxProxy.Version:output_type -> basetypes.v1.VersionResponse
	11, // 16: fox.proxy.v1.FoxProxy.RegisterCoin:output_type -> fox.proxy.v1.RegisterCoinResponse
	13, // 17: fox.proxy.v1.FoxProxy.GetClientInfos:output_type -> fox.proxy.v1.GetClientInfosResponse
	14, // [14:18] is the sub-list for method output_type
	10, // [10:14] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_npool_foxproxy_foxproxy_proto_init() }
func file_npool_foxproxy_foxproxy_proto_init() {
	if File_npool_foxproxy_foxproxy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_foxproxy_foxproxy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_foxproxy_foxproxy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_foxproxy_foxproxy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterCoinInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_foxproxy_foxproxy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataElement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_foxproxy_foxproxy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_foxproxy_foxproxy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterCoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_foxproxy_foxproxy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterCoinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_foxproxy_foxproxy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClientInfosRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_foxproxy_foxproxy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClientInfosResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_foxproxy_foxproxy_proto_msgTypes[3].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_foxproxy_foxproxy_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_npool_foxproxy_foxproxy_proto_goTypes,
		DependencyIndexes: file_npool_foxproxy_foxproxy_proto_depIdxs,
		EnumInfos:         file_npool_foxproxy_foxproxy_proto_enumTypes,
		MessageInfos:      file_npool_foxproxy_foxproxy_proto_msgTypes,
	}.Build()
	File_npool_foxproxy_foxproxy_proto = out.File
	file_npool_foxproxy_foxproxy_proto_rawDesc = nil
	file_npool_foxproxy_foxproxy_proto_goTypes = nil
	file_npool_foxproxy_foxproxy_proto_depIdxs = nil
}
