syntax = "proto3";

package fox.proxy.v1;

option go_package = "github.com/NpoolPlatform/message/npool/foxproxy";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "npool/basetypes/v1/version.proto";
import "npool/basetypes/v1/gastype.proto";

// FoxProxy http service only for inner
service FoxProxyStream {
  // async stream
  rpc DEStream(stream DataElement)
      returns (stream DataElement) {}
}

// FoxProxy http service only for inner
service FoxProxy {
  // sync
  rpc Version(google.protobuf.Empty) returns (basetypes.v1.VersionResponse) {
    option (google.api.http) = {
      post : "/version"
      body : "*"
    };
  }
  rpc RegisterCoin(RegisterCoinRequest) returns (RegisterCoinResponse) {}
  rpc GetClientInfos(GetClientInfosRequest) returns (GetClientInfosResponse) {}
}
// ################ define types and states ###################
enum StatusCode {
  StatusCodeDefault = 0;
  StatusCodeSuccess = 10;
  StatusCodeFailed = 11;
  StatusCodeNotSupportCoin = 20;
  StatusCodeUnmarshalErr = 30;
  StatusCodeMarshalErr = 40;
}

enum ClientType {
  ClientTypeDefault = 0;
  ClientTypePlugin = 10;
  ClientTypeSign = 20;
}

enum MsgType {
  MsgTypeDefault = 0;
  MsgTypeEcho = 1;
  MsgTypeRegisterCoin = 10;
  MsgTypeGetBalance = 20;
  MsgTypeUpdateTx = 30;
}

enum CoinType {
  CoinTypeUnKnow = 0;
  // mainnet
  CoinTypefilecoin = 1;
  CoinTypebitcoin = 2;
  CoinTypeethereum = 3;
  CoinTypeusdterc20 = 4;
  CoinTypespacemesh = 5;
  CoinTypesolana = 6;
  CoinTypeusdttrc20 = 7;
  CoinTypebinancecoin = 8;
  CoinTypetron = 9;
  CoinTypebinanceusd = 10;
  CoinTypeusdcerc20 = 11;
  CoinTypealeo = 12;
  CoinTypeironfish = 13;
  CoinTypeusdtbep20 = 14;
  CoinTypedepinc = 15;
  CoinTypechia = 16;

  // testnet
  CoinTypetfilecoin = 100;
  CoinTypetbitcoin = 101;
  CoinTypetethereum = 102;
  CoinTypetusdterc20 = 103;
  CoinTypetspacemesh = 104;
  CoinTypetsolana = 105;
  CoinTypetusdttrc20 = 106;
  CoinTypetbinancecoin = 107;
  CoinTypettron = 108;
  CoinTypetbinanceusd = 109;
  CoinTypetusdcerc20 = 110;
  CoinTypetaleo = 111;
  CoinTypetironfish = 112;
  CoinTypetusdtbep20 = 113;
  CoinTypetdepinc = 114;
  CoinTypetchia = 115;
}

enum ChainType {
  UnKnow = 0;
  // mainnet
  Filecoin = 1;
  Bitcoin = 2;
  Ethereum = 3;
  Spacemesh = 4;
  Solana = 5;
  Binancecoin = 6;
  Tron = 7;
  Aleo = 8;
  Ironfish = 9;
  Depinc = 10;
  Chia = 11;

  // testnet
  TFilecoin = 101;
  TBitcoin = 102;
  TEthereum = 103;
  TSpacemesh = 104;
  TSolana = 105;
  TBinancecoin = 106;
  TTron = 107;
  TAleo = 108;
  TIronfish = 109;
  TDepinc = 110;
  TChia = 111;
}

// ################## define infos for payload ####################

message CoinInfo {
  string Name = 10;
  CoinType CoinType = 20;
  ChainType ChainType = 30;
}

message ClientInfo {
  string ID = 10;
  repeated CoinInfo Infos = 20;
  string Position = 30;
  ClientType ClientType = 40;
}

message RegisterCoinInfo {
  string Name = 10;
  string Unit = 20;
  string ENV = 30;
  ChainType ChainType = 40;
  string ChainNativeUnit = 50;
  string ChainAtomicUnit = 60;
  uint32 ChainUnitExp = 70;
  basetypes.v1.GasType GasType = 80;
  string ChainID = 90;
  string ChainNickname = 100;
  string ChainNativeCoinName = 110;
}

message DataElement {
  string ConnectID = 10;
  string MsgID = 20;
  MsgType MsgType = 30;
  bytes Payload = 100;
  StatusCode StatusCode = 200; 
  optional string StatusMsg = 210; 
}

message EmptyResponse {}

// ######################### sync api struct ###############################
message RegisterCoinRequest {
  RegisterCoinInfo Info = 10;
}

message RegisterCoinResponse {}

message GetClientInfosRequest {}

message GetClientInfosResponse {
  repeated ClientInfo Infos = 10;
  uint32 Total = 20;
}