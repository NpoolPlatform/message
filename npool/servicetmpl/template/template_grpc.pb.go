// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/servicetmpl/template/template.proto

package template

import (
	context "context"
	npool "github.com/NpoolPlatform/message/npool"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceTemplateTemplateClient is the client API for ServiceTemplateTemplate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceTemplateTemplateClient interface {
	// Method Version
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*npool.VersionResponse, error)
	CreateTemplate(ctx context.Context, in *CreateTemplateRequest, opts ...grpc.CallOption) (*CreateTemplateResponse, error)
	CreateTemplates(ctx context.Context, in *CreateTemplatesRequest, opts ...grpc.CallOption) (*CreateTemplatesResponse, error)
	UpdateTemplate(ctx context.Context, in *UpdateTemplateRequest, opts ...grpc.CallOption) (*UpdateTemplateResponse, error)
	GetTemplate(ctx context.Context, in *GetTemplateRequest, opts ...grpc.CallOption) (*GetTemplateResponse, error)
	GetTemplateOnly(ctx context.Context, in *GetTemplateOnlyRequest, opts ...grpc.CallOption) (*GetTemplateOnlyResponse, error)
	GetTemplates(ctx context.Context, in *GetTemplatesRequest, opts ...grpc.CallOption) (*GetTemplatesResponse, error)
	ExistTemplate(ctx context.Context, in *ExistTemplateRequest, opts ...grpc.CallOption) (*ExistTemplateResponse, error)
	ExistTemplateConds(ctx context.Context, in *ExistTemplateCondsRequest, opts ...grpc.CallOption) (*ExistTemplateCondsResponse, error)
	CountTemplates(ctx context.Context, in *CountTemplatesRequest, opts ...grpc.CallOption) (*CountTemplatesResponse, error)
	DeleteTemplate(ctx context.Context, in *DeleteTemplateRequest, opts ...grpc.CallOption) (*DeleteTemplateResponse, error)
}

type serviceTemplateTemplateClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceTemplateTemplateClient(cc grpc.ClientConnInterface) ServiceTemplateTemplateClient {
	return &serviceTemplateTemplateClient{cc}
}

func (c *serviceTemplateTemplateClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*npool.VersionResponse, error) {
	out := new(npool.VersionResponse)
	err := c.cc.Invoke(ctx, "/service.template.v1.ServiceTemplateTemplate/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceTemplateTemplateClient) CreateTemplate(ctx context.Context, in *CreateTemplateRequest, opts ...grpc.CallOption) (*CreateTemplateResponse, error) {
	out := new(CreateTemplateResponse)
	err := c.cc.Invoke(ctx, "/service.template.v1.ServiceTemplateTemplate/CreateTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceTemplateTemplateClient) CreateTemplates(ctx context.Context, in *CreateTemplatesRequest, opts ...grpc.CallOption) (*CreateTemplatesResponse, error) {
	out := new(CreateTemplatesResponse)
	err := c.cc.Invoke(ctx, "/service.template.v1.ServiceTemplateTemplate/CreateTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceTemplateTemplateClient) UpdateTemplate(ctx context.Context, in *UpdateTemplateRequest, opts ...grpc.CallOption) (*UpdateTemplateResponse, error) {
	out := new(UpdateTemplateResponse)
	err := c.cc.Invoke(ctx, "/service.template.v1.ServiceTemplateTemplate/UpdateTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceTemplateTemplateClient) GetTemplate(ctx context.Context, in *GetTemplateRequest, opts ...grpc.CallOption) (*GetTemplateResponse, error) {
	out := new(GetTemplateResponse)
	err := c.cc.Invoke(ctx, "/service.template.v1.ServiceTemplateTemplate/GetTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceTemplateTemplateClient) GetTemplateOnly(ctx context.Context, in *GetTemplateOnlyRequest, opts ...grpc.CallOption) (*GetTemplateOnlyResponse, error) {
	out := new(GetTemplateOnlyResponse)
	err := c.cc.Invoke(ctx, "/service.template.v1.ServiceTemplateTemplate/GetTemplateOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceTemplateTemplateClient) GetTemplates(ctx context.Context, in *GetTemplatesRequest, opts ...grpc.CallOption) (*GetTemplatesResponse, error) {
	out := new(GetTemplatesResponse)
	err := c.cc.Invoke(ctx, "/service.template.v1.ServiceTemplateTemplate/GetTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceTemplateTemplateClient) ExistTemplate(ctx context.Context, in *ExistTemplateRequest, opts ...grpc.CallOption) (*ExistTemplateResponse, error) {
	out := new(ExistTemplateResponse)
	err := c.cc.Invoke(ctx, "/service.template.v1.ServiceTemplateTemplate/ExistTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceTemplateTemplateClient) ExistTemplateConds(ctx context.Context, in *ExistTemplateCondsRequest, opts ...grpc.CallOption) (*ExistTemplateCondsResponse, error) {
	out := new(ExistTemplateCondsResponse)
	err := c.cc.Invoke(ctx, "/service.template.v1.ServiceTemplateTemplate/ExistTemplateConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceTemplateTemplateClient) CountTemplates(ctx context.Context, in *CountTemplatesRequest, opts ...grpc.CallOption) (*CountTemplatesResponse, error) {
	out := new(CountTemplatesResponse)
	err := c.cc.Invoke(ctx, "/service.template.v1.ServiceTemplateTemplate/CountTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceTemplateTemplateClient) DeleteTemplate(ctx context.Context, in *DeleteTemplateRequest, opts ...grpc.CallOption) (*DeleteTemplateResponse, error) {
	out := new(DeleteTemplateResponse)
	err := c.cc.Invoke(ctx, "/service.template.v1.ServiceTemplateTemplate/DeleteTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceTemplateTemplateServer is the server API for ServiceTemplateTemplate service.
// All implementations must embed UnimplementedServiceTemplateTemplateServer
// for forward compatibility
type ServiceTemplateTemplateServer interface {
	// Method Version
	Version(context.Context, *emptypb.Empty) (*npool.VersionResponse, error)
	CreateTemplate(context.Context, *CreateTemplateRequest) (*CreateTemplateResponse, error)
	CreateTemplates(context.Context, *CreateTemplatesRequest) (*CreateTemplatesResponse, error)
	UpdateTemplate(context.Context, *UpdateTemplateRequest) (*UpdateTemplateResponse, error)
	GetTemplate(context.Context, *GetTemplateRequest) (*GetTemplateResponse, error)
	GetTemplateOnly(context.Context, *GetTemplateOnlyRequest) (*GetTemplateOnlyResponse, error)
	GetTemplates(context.Context, *GetTemplatesRequest) (*GetTemplatesResponse, error)
	ExistTemplate(context.Context, *ExistTemplateRequest) (*ExistTemplateResponse, error)
	ExistTemplateConds(context.Context, *ExistTemplateCondsRequest) (*ExistTemplateCondsResponse, error)
	CountTemplates(context.Context, *CountTemplatesRequest) (*CountTemplatesResponse, error)
	DeleteTemplate(context.Context, *DeleteTemplateRequest) (*DeleteTemplateResponse, error)
	mustEmbedUnimplementedServiceTemplateTemplateServer()
}

// UnimplementedServiceTemplateTemplateServer must be embedded to have forward compatible implementations.
type UnimplementedServiceTemplateTemplateServer struct {
}

func (UnimplementedServiceTemplateTemplateServer) Version(context.Context, *emptypb.Empty) (*npool.VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedServiceTemplateTemplateServer) CreateTemplate(context.Context, *CreateTemplateRequest) (*CreateTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTemplate not implemented")
}
func (UnimplementedServiceTemplateTemplateServer) CreateTemplates(context.Context, *CreateTemplatesRequest) (*CreateTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTemplates not implemented")
}
func (UnimplementedServiceTemplateTemplateServer) UpdateTemplate(context.Context, *UpdateTemplateRequest) (*UpdateTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTemplate not implemented")
}
func (UnimplementedServiceTemplateTemplateServer) GetTemplate(context.Context, *GetTemplateRequest) (*GetTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplate not implemented")
}
func (UnimplementedServiceTemplateTemplateServer) GetTemplateOnly(context.Context, *GetTemplateOnlyRequest) (*GetTemplateOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplateOnly not implemented")
}
func (UnimplementedServiceTemplateTemplateServer) GetTemplates(context.Context, *GetTemplatesRequest) (*GetTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplates not implemented")
}
func (UnimplementedServiceTemplateTemplateServer) ExistTemplate(context.Context, *ExistTemplateRequest) (*ExistTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistTemplate not implemented")
}
func (UnimplementedServiceTemplateTemplateServer) ExistTemplateConds(context.Context, *ExistTemplateCondsRequest) (*ExistTemplateCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistTemplateConds not implemented")
}
func (UnimplementedServiceTemplateTemplateServer) CountTemplates(context.Context, *CountTemplatesRequest) (*CountTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountTemplates not implemented")
}
func (UnimplementedServiceTemplateTemplateServer) DeleteTemplate(context.Context, *DeleteTemplateRequest) (*DeleteTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemplate not implemented")
}
func (UnimplementedServiceTemplateTemplateServer) mustEmbedUnimplementedServiceTemplateTemplateServer() {
}

// UnsafeServiceTemplateTemplateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceTemplateTemplateServer will
// result in compilation errors.
type UnsafeServiceTemplateTemplateServer interface {
	mustEmbedUnimplementedServiceTemplateTemplateServer()
}

func RegisterServiceTemplateTemplateServer(s grpc.ServiceRegistrar, srv ServiceTemplateTemplateServer) {
	s.RegisterService(&ServiceTemplateTemplate_ServiceDesc, srv)
}

func _ServiceTemplateTemplate_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceTemplateTemplateServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.template.v1.ServiceTemplateTemplate/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceTemplateTemplateServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceTemplateTemplate_CreateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceTemplateTemplateServer).CreateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.template.v1.ServiceTemplateTemplate/CreateTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceTemplateTemplateServer).CreateTemplate(ctx, req.(*CreateTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceTemplateTemplate_CreateTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceTemplateTemplateServer).CreateTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.template.v1.ServiceTemplateTemplate/CreateTemplates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceTemplateTemplateServer).CreateTemplates(ctx, req.(*CreateTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceTemplateTemplate_UpdateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceTemplateTemplateServer).UpdateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.template.v1.ServiceTemplateTemplate/UpdateTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceTemplateTemplateServer).UpdateTemplate(ctx, req.(*UpdateTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceTemplateTemplate_GetTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceTemplateTemplateServer).GetTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.template.v1.ServiceTemplateTemplate/GetTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceTemplateTemplateServer).GetTemplate(ctx, req.(*GetTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceTemplateTemplate_GetTemplateOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemplateOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceTemplateTemplateServer).GetTemplateOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.template.v1.ServiceTemplateTemplate/GetTemplateOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceTemplateTemplateServer).GetTemplateOnly(ctx, req.(*GetTemplateOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceTemplateTemplate_GetTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceTemplateTemplateServer).GetTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.template.v1.ServiceTemplateTemplate/GetTemplates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceTemplateTemplateServer).GetTemplates(ctx, req.(*GetTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceTemplateTemplate_ExistTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceTemplateTemplateServer).ExistTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.template.v1.ServiceTemplateTemplate/ExistTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceTemplateTemplateServer).ExistTemplate(ctx, req.(*ExistTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceTemplateTemplate_ExistTemplateConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistTemplateCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceTemplateTemplateServer).ExistTemplateConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.template.v1.ServiceTemplateTemplate/ExistTemplateConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceTemplateTemplateServer).ExistTemplateConds(ctx, req.(*ExistTemplateCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceTemplateTemplate_CountTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceTemplateTemplateServer).CountTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.template.v1.ServiceTemplateTemplate/CountTemplates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceTemplateTemplateServer).CountTemplates(ctx, req.(*CountTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceTemplateTemplate_DeleteTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceTemplateTemplateServer).DeleteTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.template.v1.ServiceTemplateTemplate/DeleteTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceTemplateTemplateServer).DeleteTemplate(ctx, req.(*DeleteTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceTemplateTemplate_ServiceDesc is the grpc.ServiceDesc for ServiceTemplateTemplate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceTemplateTemplate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.template.v1.ServiceTemplateTemplate",
	HandlerType: (*ServiceTemplateTemplateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _ServiceTemplateTemplate_Version_Handler,
		},
		{
			MethodName: "CreateTemplate",
			Handler:    _ServiceTemplateTemplate_CreateTemplate_Handler,
		},
		{
			MethodName: "CreateTemplates",
			Handler:    _ServiceTemplateTemplate_CreateTemplates_Handler,
		},
		{
			MethodName: "UpdateTemplate",
			Handler:    _ServiceTemplateTemplate_UpdateTemplate_Handler,
		},
		{
			MethodName: "GetTemplate",
			Handler:    _ServiceTemplateTemplate_GetTemplate_Handler,
		},
		{
			MethodName: "GetTemplateOnly",
			Handler:    _ServiceTemplateTemplate_GetTemplateOnly_Handler,
		},
		{
			MethodName: "GetTemplates",
			Handler:    _ServiceTemplateTemplate_GetTemplates_Handler,
		},
		{
			MethodName: "ExistTemplate",
			Handler:    _ServiceTemplateTemplate_ExistTemplate_Handler,
		},
		{
			MethodName: "ExistTemplateConds",
			Handler:    _ServiceTemplateTemplate_ExistTemplateConds_Handler,
		},
		{
			MethodName: "CountTemplates",
			Handler:    _ServiceTemplateTemplate_CountTemplates_Handler,
		},
		{
			MethodName: "DeleteTemplate",
			Handler:    _ServiceTemplateTemplate_DeleteTemplate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/servicetmpl/template/template.proto",
}
