// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/servicetmpl/general/general.proto

package general

import (
	context "context"
	npool "github.com/NpoolPlatform/message/npool"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TemplateGeneralClient is the client API for TemplateGeneral service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TemplateGeneralClient interface {
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*npool.VersionResponse, error)
	CreateGeneral(ctx context.Context, in *CreateGeneralRequest, opts ...grpc.CallOption) (*CreateGeneralResponse, error)
	CreateGenerals(ctx context.Context, in *CreateGeneralsRequest, opts ...grpc.CallOption) (*CreateGeneralsResponse, error)
	AddGeneral(ctx context.Context, in *AddGeneralRequest, opts ...grpc.CallOption) (*AddGeneralResponse, error)
	GetGeneral(ctx context.Context, in *GetGeneralRequest, opts ...grpc.CallOption) (*GetGeneralResponse, error)
	GetGeneralOnly(ctx context.Context, in *GetGeneralOnlyRequest, opts ...grpc.CallOption) (*GetGeneralOnlyResponse, error)
	GetGenerals(ctx context.Context, in *GetGeneralsRequest, opts ...grpc.CallOption) (*GetGeneralsResponse, error)
	ExistGeneral(ctx context.Context, in *ExistGeneralRequest, opts ...grpc.CallOption) (*ExistGeneralResponse, error)
	ExistGeneralConds(ctx context.Context, in *ExistGeneralCondsRequest, opts ...grpc.CallOption) (*ExistGeneralCondsResponse, error)
	CountGenerals(ctx context.Context, in *CountGeneralsRequest, opts ...grpc.CallOption) (*CountGeneralsResponse, error)
	DeleteGeneral(ctx context.Context, in *DeleteGeneralRequest, opts ...grpc.CallOption) (*DeleteGeneralResponse, error)
}

type templateGeneralClient struct {
	cc grpc.ClientConnInterface
}

func NewTemplateGeneralClient(cc grpc.ClientConnInterface) TemplateGeneralClient {
	return &templateGeneralClient{cc}
}

func (c *templateGeneralClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*npool.VersionResponse, error) {
	out := new(npool.VersionResponse)
	err := c.cc.Invoke(ctx, "/service.template.general.v1.TemplateGeneral/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateGeneralClient) CreateGeneral(ctx context.Context, in *CreateGeneralRequest, opts ...grpc.CallOption) (*CreateGeneralResponse, error) {
	out := new(CreateGeneralResponse)
	err := c.cc.Invoke(ctx, "/service.template.general.v1.TemplateGeneral/CreateGeneral", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateGeneralClient) CreateGenerals(ctx context.Context, in *CreateGeneralsRequest, opts ...grpc.CallOption) (*CreateGeneralsResponse, error) {
	out := new(CreateGeneralsResponse)
	err := c.cc.Invoke(ctx, "/service.template.general.v1.TemplateGeneral/CreateGenerals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateGeneralClient) AddGeneral(ctx context.Context, in *AddGeneralRequest, opts ...grpc.CallOption) (*AddGeneralResponse, error) {
	out := new(AddGeneralResponse)
	err := c.cc.Invoke(ctx, "/service.template.general.v1.TemplateGeneral/AddGeneral", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateGeneralClient) GetGeneral(ctx context.Context, in *GetGeneralRequest, opts ...grpc.CallOption) (*GetGeneralResponse, error) {
	out := new(GetGeneralResponse)
	err := c.cc.Invoke(ctx, "/service.template.general.v1.TemplateGeneral/GetGeneral", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateGeneralClient) GetGeneralOnly(ctx context.Context, in *GetGeneralOnlyRequest, opts ...grpc.CallOption) (*GetGeneralOnlyResponse, error) {
	out := new(GetGeneralOnlyResponse)
	err := c.cc.Invoke(ctx, "/service.template.general.v1.TemplateGeneral/GetGeneralOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateGeneralClient) GetGenerals(ctx context.Context, in *GetGeneralsRequest, opts ...grpc.CallOption) (*GetGeneralsResponse, error) {
	out := new(GetGeneralsResponse)
	err := c.cc.Invoke(ctx, "/service.template.general.v1.TemplateGeneral/GetGenerals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateGeneralClient) ExistGeneral(ctx context.Context, in *ExistGeneralRequest, opts ...grpc.CallOption) (*ExistGeneralResponse, error) {
	out := new(ExistGeneralResponse)
	err := c.cc.Invoke(ctx, "/service.template.general.v1.TemplateGeneral/ExistGeneral", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateGeneralClient) ExistGeneralConds(ctx context.Context, in *ExistGeneralCondsRequest, opts ...grpc.CallOption) (*ExistGeneralCondsResponse, error) {
	out := new(ExistGeneralCondsResponse)
	err := c.cc.Invoke(ctx, "/service.template.general.v1.TemplateGeneral/ExistGeneralConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateGeneralClient) CountGenerals(ctx context.Context, in *CountGeneralsRequest, opts ...grpc.CallOption) (*CountGeneralsResponse, error) {
	out := new(CountGeneralsResponse)
	err := c.cc.Invoke(ctx, "/service.template.general.v1.TemplateGeneral/CountGenerals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templateGeneralClient) DeleteGeneral(ctx context.Context, in *DeleteGeneralRequest, opts ...grpc.CallOption) (*DeleteGeneralResponse, error) {
	out := new(DeleteGeneralResponse)
	err := c.cc.Invoke(ctx, "/service.template.general.v1.TemplateGeneral/DeleteGeneral", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TemplateGeneralServer is the server API for TemplateGeneral service.
// All implementations must embed UnimplementedTemplateGeneralServer
// for forward compatibility
type TemplateGeneralServer interface {
	Version(context.Context, *emptypb.Empty) (*npool.VersionResponse, error)
	CreateGeneral(context.Context, *CreateGeneralRequest) (*CreateGeneralResponse, error)
	CreateGenerals(context.Context, *CreateGeneralsRequest) (*CreateGeneralsResponse, error)
	AddGeneral(context.Context, *AddGeneralRequest) (*AddGeneralResponse, error)
	GetGeneral(context.Context, *GetGeneralRequest) (*GetGeneralResponse, error)
	GetGeneralOnly(context.Context, *GetGeneralOnlyRequest) (*GetGeneralOnlyResponse, error)
	GetGenerals(context.Context, *GetGeneralsRequest) (*GetGeneralsResponse, error)
	ExistGeneral(context.Context, *ExistGeneralRequest) (*ExistGeneralResponse, error)
	ExistGeneralConds(context.Context, *ExistGeneralCondsRequest) (*ExistGeneralCondsResponse, error)
	CountGenerals(context.Context, *CountGeneralsRequest) (*CountGeneralsResponse, error)
	DeleteGeneral(context.Context, *DeleteGeneralRequest) (*DeleteGeneralResponse, error)
	mustEmbedUnimplementedTemplateGeneralServer()
}

// UnimplementedTemplateGeneralServer must be embedded to have forward compatible implementations.
type UnimplementedTemplateGeneralServer struct {
}

func (UnimplementedTemplateGeneralServer) Version(context.Context, *emptypb.Empty) (*npool.VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedTemplateGeneralServer) CreateGeneral(context.Context, *CreateGeneralRequest) (*CreateGeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGeneral not implemented")
}
func (UnimplementedTemplateGeneralServer) CreateGenerals(context.Context, *CreateGeneralsRequest) (*CreateGeneralsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGenerals not implemented")
}
func (UnimplementedTemplateGeneralServer) AddGeneral(context.Context, *AddGeneralRequest) (*AddGeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGeneral not implemented")
}
func (UnimplementedTemplateGeneralServer) GetGeneral(context.Context, *GetGeneralRequest) (*GetGeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGeneral not implemented")
}
func (UnimplementedTemplateGeneralServer) GetGeneralOnly(context.Context, *GetGeneralOnlyRequest) (*GetGeneralOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGeneralOnly not implemented")
}
func (UnimplementedTemplateGeneralServer) GetGenerals(context.Context, *GetGeneralsRequest) (*GetGeneralsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGenerals not implemented")
}
func (UnimplementedTemplateGeneralServer) ExistGeneral(context.Context, *ExistGeneralRequest) (*ExistGeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistGeneral not implemented")
}
func (UnimplementedTemplateGeneralServer) ExistGeneralConds(context.Context, *ExistGeneralCondsRequest) (*ExistGeneralCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistGeneralConds not implemented")
}
func (UnimplementedTemplateGeneralServer) CountGenerals(context.Context, *CountGeneralsRequest) (*CountGeneralsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountGenerals not implemented")
}
func (UnimplementedTemplateGeneralServer) DeleteGeneral(context.Context, *DeleteGeneralRequest) (*DeleteGeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGeneral not implemented")
}
func (UnimplementedTemplateGeneralServer) mustEmbedUnimplementedTemplateGeneralServer() {}

// UnsafeTemplateGeneralServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TemplateGeneralServer will
// result in compilation errors.
type UnsafeTemplateGeneralServer interface {
	mustEmbedUnimplementedTemplateGeneralServer()
}

func RegisterTemplateGeneralServer(s grpc.ServiceRegistrar, srv TemplateGeneralServer) {
	s.RegisterService(&TemplateGeneral_ServiceDesc, srv)
}

func _TemplateGeneral_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateGeneralServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.template.general.v1.TemplateGeneral/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateGeneralServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateGeneral_CreateGeneral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGeneralRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateGeneralServer).CreateGeneral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.template.general.v1.TemplateGeneral/CreateGeneral",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateGeneralServer).CreateGeneral(ctx, req.(*CreateGeneralRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateGeneral_CreateGenerals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGeneralsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateGeneralServer).CreateGenerals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.template.general.v1.TemplateGeneral/CreateGenerals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateGeneralServer).CreateGenerals(ctx, req.(*CreateGeneralsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateGeneral_AddGeneral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGeneralRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateGeneralServer).AddGeneral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.template.general.v1.TemplateGeneral/AddGeneral",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateGeneralServer).AddGeneral(ctx, req.(*AddGeneralRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateGeneral_GetGeneral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGeneralRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateGeneralServer).GetGeneral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.template.general.v1.TemplateGeneral/GetGeneral",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateGeneralServer).GetGeneral(ctx, req.(*GetGeneralRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateGeneral_GetGeneralOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGeneralOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateGeneralServer).GetGeneralOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.template.general.v1.TemplateGeneral/GetGeneralOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateGeneralServer).GetGeneralOnly(ctx, req.(*GetGeneralOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateGeneral_GetGenerals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGeneralsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateGeneralServer).GetGenerals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.template.general.v1.TemplateGeneral/GetGenerals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateGeneralServer).GetGenerals(ctx, req.(*GetGeneralsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateGeneral_ExistGeneral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistGeneralRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateGeneralServer).ExistGeneral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.template.general.v1.TemplateGeneral/ExistGeneral",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateGeneralServer).ExistGeneral(ctx, req.(*ExistGeneralRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateGeneral_ExistGeneralConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistGeneralCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateGeneralServer).ExistGeneralConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.template.general.v1.TemplateGeneral/ExistGeneralConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateGeneralServer).ExistGeneralConds(ctx, req.(*ExistGeneralCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateGeneral_CountGenerals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountGeneralsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateGeneralServer).CountGenerals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.template.general.v1.TemplateGeneral/CountGenerals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateGeneralServer).CountGenerals(ctx, req.(*CountGeneralsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TemplateGeneral_DeleteGeneral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGeneralRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplateGeneralServer).DeleteGeneral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.template.general.v1.TemplateGeneral/DeleteGeneral",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplateGeneralServer).DeleteGeneral(ctx, req.(*DeleteGeneralRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TemplateGeneral_ServiceDesc is the grpc.ServiceDesc for TemplateGeneral service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TemplateGeneral_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.template.general.v1.TemplateGeneral",
	HandlerType: (*TemplateGeneralServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _TemplateGeneral_Version_Handler,
		},
		{
			MethodName: "CreateGeneral",
			Handler:    _TemplateGeneral_CreateGeneral_Handler,
		},
		{
			MethodName: "CreateGenerals",
			Handler:    _TemplateGeneral_CreateGenerals_Handler,
		},
		{
			MethodName: "AddGeneral",
			Handler:    _TemplateGeneral_AddGeneral_Handler,
		},
		{
			MethodName: "GetGeneral",
			Handler:    _TemplateGeneral_GetGeneral_Handler,
		},
		{
			MethodName: "GetGeneralOnly",
			Handler:    _TemplateGeneral_GetGeneralOnly_Handler,
		},
		{
			MethodName: "GetGenerals",
			Handler:    _TemplateGeneral_GetGenerals_Handler,
		},
		{
			MethodName: "ExistGeneral",
			Handler:    _TemplateGeneral_ExistGeneral_Handler,
		},
		{
			MethodName: "ExistGeneralConds",
			Handler:    _TemplateGeneral_ExistGeneralConds_Handler,
		},
		{
			MethodName: "CountGenerals",
			Handler:    _TemplateGeneral_CountGenerals_Handler,
		},
		{
			MethodName: "DeleteGeneral",
			Handler:    _TemplateGeneral_DeleteGeneral_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/servicetmpl/general/general.proto",
}
