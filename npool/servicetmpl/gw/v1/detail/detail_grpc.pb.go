// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/servicetmpl/gw/v1/detail/detail.proto

package detail

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gateway_GetDetails_FullMethodName     = "/servicetmpl.gateway.detail.v1.Gateway/GetDetails"
	Gateway_GetAppDetails_FullMethodName  = "/servicetmpl.gateway.detail.v1.Gateway/GetAppDetails"
	Gateway_GetNAppDetails_FullMethodName = "/servicetmpl.gateway.detail.v1.Gateway/GetNAppDetails"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	GetDetails(ctx context.Context, in *GetDetailsRequest, opts ...grpc.CallOption) (*GetDetailsResponse, error)
	GetAppDetails(ctx context.Context, in *GetAppDetailsRequest, opts ...grpc.CallOption) (*GetAppDetailsResponse, error)
	GetNAppDetails(ctx context.Context, in *GetNAppDetailsRequest, opts ...grpc.CallOption) (*GetNAppDetailsResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) GetDetails(ctx context.Context, in *GetDetailsRequest, opts ...grpc.CallOption) (*GetDetailsResponse, error) {
	out := new(GetDetailsResponse)
	err := c.cc.Invoke(ctx, Gateway_GetDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetAppDetails(ctx context.Context, in *GetAppDetailsRequest, opts ...grpc.CallOption) (*GetAppDetailsResponse, error) {
	out := new(GetAppDetailsResponse)
	err := c.cc.Invoke(ctx, Gateway_GetAppDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetNAppDetails(ctx context.Context, in *GetNAppDetailsRequest, opts ...grpc.CallOption) (*GetNAppDetailsResponse, error) {
	out := new(GetNAppDetailsResponse)
	err := c.cc.Invoke(ctx, Gateway_GetNAppDetails_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	GetDetails(context.Context, *GetDetailsRequest) (*GetDetailsResponse, error)
	GetAppDetails(context.Context, *GetAppDetailsRequest) (*GetAppDetailsResponse, error)
	GetNAppDetails(context.Context, *GetNAppDetailsRequest) (*GetNAppDetailsResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) GetDetails(context.Context, *GetDetailsRequest) (*GetDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetails not implemented")
}
func (UnimplementedGatewayServer) GetAppDetails(context.Context, *GetAppDetailsRequest) (*GetAppDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppDetails not implemented")
}
func (UnimplementedGatewayServer) GetNAppDetails(context.Context, *GetNAppDetailsRequest) (*GetNAppDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNAppDetails not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_GetDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetDetails(ctx, req.(*GetDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetAppDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetAppDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetAppDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetAppDetails(ctx, req.(*GetAppDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetNAppDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNAppDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetNAppDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetNAppDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetNAppDetails(ctx, req.(*GetNAppDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "servicetmpl.gateway.detail.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDetails",
			Handler:    _Gateway_GetDetails_Handler,
		},
		{
			MethodName: "GetAppDetails",
			Handler:    _Gateway_GetAppDetails_Handler,
		},
		{
			MethodName: "GetNAppDetails",
			Handler:    _Gateway_GetNAppDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/servicetmpl/gw/v1/detail/detail.proto",
}
