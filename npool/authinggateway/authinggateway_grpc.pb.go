// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/authinggateway/authinggateway.proto

package authinggateway

import (
	context "context"
	npool "github.com/NpoolPlatform/message/npool"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthingGatewayClient is the client API for AuthingGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthingGatewayClient interface {
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*npool.VersionResponse, error)
	AuthByApp(ctx context.Context, in *AuthByAppRequest, opts ...grpc.CallOption) (*AuthByAppResponse, error)
	AuthByAppRoleUser(ctx context.Context, in *AuthByAppRoleUserRequest, opts ...grpc.CallOption) (*AuthByAppRoleUserResponse, error)
	GetAuthHistories(ctx context.Context, in *GetAuthHistoriesRequest, opts ...grpc.CallOption) (*GetAuthHistoriesResponse, error)
}

type authingGatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthingGatewayClient(cc grpc.ClientConnInterface) AuthingGatewayClient {
	return &authingGatewayClient{cc}
}

func (c *authingGatewayClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*npool.VersionResponse, error) {
	out := new(npool.VersionResponse)
	err := c.cc.Invoke(ctx, "/authing.gateway.v1.AuthingGateway/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authingGatewayClient) AuthByApp(ctx context.Context, in *AuthByAppRequest, opts ...grpc.CallOption) (*AuthByAppResponse, error) {
	out := new(AuthByAppResponse)
	err := c.cc.Invoke(ctx, "/authing.gateway.v1.AuthingGateway/AuthByApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authingGatewayClient) AuthByAppRoleUser(ctx context.Context, in *AuthByAppRoleUserRequest, opts ...grpc.CallOption) (*AuthByAppRoleUserResponse, error) {
	out := new(AuthByAppRoleUserResponse)
	err := c.cc.Invoke(ctx, "/authing.gateway.v1.AuthingGateway/AuthByAppRoleUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authingGatewayClient) GetAuthHistories(ctx context.Context, in *GetAuthHistoriesRequest, opts ...grpc.CallOption) (*GetAuthHistoriesResponse, error) {
	out := new(GetAuthHistoriesResponse)
	err := c.cc.Invoke(ctx, "/authing.gateway.v1.AuthingGateway/GetAuthHistories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthingGatewayServer is the server API for AuthingGateway service.
// All implementations must embed UnimplementedAuthingGatewayServer
// for forward compatibility
type AuthingGatewayServer interface {
	Version(context.Context, *emptypb.Empty) (*npool.VersionResponse, error)
	AuthByApp(context.Context, *AuthByAppRequest) (*AuthByAppResponse, error)
	AuthByAppRoleUser(context.Context, *AuthByAppRoleUserRequest) (*AuthByAppRoleUserResponse, error)
	GetAuthHistories(context.Context, *GetAuthHistoriesRequest) (*GetAuthHistoriesResponse, error)
	mustEmbedUnimplementedAuthingGatewayServer()
}

// UnimplementedAuthingGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedAuthingGatewayServer struct {
}

func (UnimplementedAuthingGatewayServer) Version(context.Context, *emptypb.Empty) (*npool.VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedAuthingGatewayServer) AuthByApp(context.Context, *AuthByAppRequest) (*AuthByAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthByApp not implemented")
}
func (UnimplementedAuthingGatewayServer) AuthByAppRoleUser(context.Context, *AuthByAppRoleUserRequest) (*AuthByAppRoleUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthByAppRoleUser not implemented")
}
func (UnimplementedAuthingGatewayServer) GetAuthHistories(context.Context, *GetAuthHistoriesRequest) (*GetAuthHistoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthHistories not implemented")
}
func (UnimplementedAuthingGatewayServer) mustEmbedUnimplementedAuthingGatewayServer() {}

// UnsafeAuthingGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthingGatewayServer will
// result in compilation errors.
type UnsafeAuthingGatewayServer interface {
	mustEmbedUnimplementedAuthingGatewayServer()
}

func RegisterAuthingGatewayServer(s grpc.ServiceRegistrar, srv AuthingGatewayServer) {
	s.RegisterService(&AuthingGateway_ServiceDesc, srv)
}

func _AuthingGateway_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthingGatewayServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authing.gateway.v1.AuthingGateway/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthingGatewayServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthingGateway_AuthByApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthByAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthingGatewayServer).AuthByApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authing.gateway.v1.AuthingGateway/AuthByApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthingGatewayServer).AuthByApp(ctx, req.(*AuthByAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthingGateway_AuthByAppRoleUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthByAppRoleUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthingGatewayServer).AuthByAppRoleUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authing.gateway.v1.AuthingGateway/AuthByAppRoleUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthingGatewayServer).AuthByAppRoleUser(ctx, req.(*AuthByAppRoleUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthingGateway_GetAuthHistories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthHistoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthingGatewayServer).GetAuthHistories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authing.gateway.v1.AuthingGateway/GetAuthHistories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthingGatewayServer).GetAuthHistories(ctx, req.(*GetAuthHistoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthingGateway_ServiceDesc is the grpc.ServiceDesc for AuthingGateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthingGateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authing.gateway.v1.AuthingGateway",
	HandlerType: (*AuthingGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _AuthingGateway_Version_Handler,
		},
		{
			MethodName: "AuthByApp",
			Handler:    _AuthingGateway_AuthByApp_Handler,
		},
		{
			MethodName: "AuthByAppRoleUser",
			Handler:    _AuthingGateway_AuthByAppRoleUser_Handler,
		},
		{
			MethodName: "GetAuthHistories",
			Handler:    _AuthingGateway_GetAuthHistories_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/authinggateway/authinggateway.proto",
}
