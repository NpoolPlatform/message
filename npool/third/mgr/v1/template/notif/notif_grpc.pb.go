// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/third/mgr/v1/template/notif/notif.proto

package notif

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateNotifTemplate(ctx context.Context, in *CreateNotifTemplateRequest, opts ...grpc.CallOption) (*CreateNotifTemplateResponse, error)
	CreateNotifTemplates(ctx context.Context, in *CreateNotifTemplatesRequest, opts ...grpc.CallOption) (*CreateNotifTemplatesResponse, error)
	UpdateNotifTemplate(ctx context.Context, in *UpdateNotifTemplateRequest, opts ...grpc.CallOption) (*UpdateNotifTemplateResponse, error)
	GetNotifTemplate(ctx context.Context, in *GetNotifTemplateRequest, opts ...grpc.CallOption) (*GetNotifTemplateResponse, error)
	GetNotifTemplateOnly(ctx context.Context, in *GetNotifTemplateOnlyRequest, opts ...grpc.CallOption) (*GetNotifTemplateOnlyResponse, error)
	GetNotifTemplates(ctx context.Context, in *GetNotifTemplatesRequest, opts ...grpc.CallOption) (*GetNotifTemplatesResponse, error)
	ExistNotifTemplate(ctx context.Context, in *ExistNotifTemplateRequest, opts ...grpc.CallOption) (*ExistNotifTemplateResponse, error)
	ExistNotifTemplateConds(ctx context.Context, in *ExistNotifTemplateCondsRequest, opts ...grpc.CallOption) (*ExistNotifTemplateCondsResponse, error)
	CountNotifTemplates(ctx context.Context, in *CountNotifTemplatesRequest, opts ...grpc.CallOption) (*CountNotifTemplatesResponse, error)
	DeleteNotifTemplate(ctx context.Context, in *DeleteNotifTemplateRequest, opts ...grpc.CallOption) (*DeleteNotifTemplateResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateNotifTemplate(ctx context.Context, in *CreateNotifTemplateRequest, opts ...grpc.CallOption) (*CreateNotifTemplateResponse, error) {
	out := new(CreateNotifTemplateResponse)
	err := c.cc.Invoke(ctx, "/third.manager.template.notif1.v1.Manager/CreateNotifTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateNotifTemplates(ctx context.Context, in *CreateNotifTemplatesRequest, opts ...grpc.CallOption) (*CreateNotifTemplatesResponse, error) {
	out := new(CreateNotifTemplatesResponse)
	err := c.cc.Invoke(ctx, "/third.manager.template.notif1.v1.Manager/CreateNotifTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateNotifTemplate(ctx context.Context, in *UpdateNotifTemplateRequest, opts ...grpc.CallOption) (*UpdateNotifTemplateResponse, error) {
	out := new(UpdateNotifTemplateResponse)
	err := c.cc.Invoke(ctx, "/third.manager.template.notif1.v1.Manager/UpdateNotifTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetNotifTemplate(ctx context.Context, in *GetNotifTemplateRequest, opts ...grpc.CallOption) (*GetNotifTemplateResponse, error) {
	out := new(GetNotifTemplateResponse)
	err := c.cc.Invoke(ctx, "/third.manager.template.notif1.v1.Manager/GetNotifTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetNotifTemplateOnly(ctx context.Context, in *GetNotifTemplateOnlyRequest, opts ...grpc.CallOption) (*GetNotifTemplateOnlyResponse, error) {
	out := new(GetNotifTemplateOnlyResponse)
	err := c.cc.Invoke(ctx, "/third.manager.template.notif1.v1.Manager/GetNotifTemplateOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetNotifTemplates(ctx context.Context, in *GetNotifTemplatesRequest, opts ...grpc.CallOption) (*GetNotifTemplatesResponse, error) {
	out := new(GetNotifTemplatesResponse)
	err := c.cc.Invoke(ctx, "/third.manager.template.notif1.v1.Manager/GetNotifTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistNotifTemplate(ctx context.Context, in *ExistNotifTemplateRequest, opts ...grpc.CallOption) (*ExistNotifTemplateResponse, error) {
	out := new(ExistNotifTemplateResponse)
	err := c.cc.Invoke(ctx, "/third.manager.template.notif1.v1.Manager/ExistNotifTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistNotifTemplateConds(ctx context.Context, in *ExistNotifTemplateCondsRequest, opts ...grpc.CallOption) (*ExistNotifTemplateCondsResponse, error) {
	out := new(ExistNotifTemplateCondsResponse)
	err := c.cc.Invoke(ctx, "/third.manager.template.notif1.v1.Manager/ExistNotifTemplateConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountNotifTemplates(ctx context.Context, in *CountNotifTemplatesRequest, opts ...grpc.CallOption) (*CountNotifTemplatesResponse, error) {
	out := new(CountNotifTemplatesResponse)
	err := c.cc.Invoke(ctx, "/third.manager.template.notif1.v1.Manager/CountNotifTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteNotifTemplate(ctx context.Context, in *DeleteNotifTemplateRequest, opts ...grpc.CallOption) (*DeleteNotifTemplateResponse, error) {
	out := new(DeleteNotifTemplateResponse)
	err := c.cc.Invoke(ctx, "/third.manager.template.notif1.v1.Manager/DeleteNotifTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateNotifTemplate(context.Context, *CreateNotifTemplateRequest) (*CreateNotifTemplateResponse, error)
	CreateNotifTemplates(context.Context, *CreateNotifTemplatesRequest) (*CreateNotifTemplatesResponse, error)
	UpdateNotifTemplate(context.Context, *UpdateNotifTemplateRequest) (*UpdateNotifTemplateResponse, error)
	GetNotifTemplate(context.Context, *GetNotifTemplateRequest) (*GetNotifTemplateResponse, error)
	GetNotifTemplateOnly(context.Context, *GetNotifTemplateOnlyRequest) (*GetNotifTemplateOnlyResponse, error)
	GetNotifTemplates(context.Context, *GetNotifTemplatesRequest) (*GetNotifTemplatesResponse, error)
	ExistNotifTemplate(context.Context, *ExistNotifTemplateRequest) (*ExistNotifTemplateResponse, error)
	ExistNotifTemplateConds(context.Context, *ExistNotifTemplateCondsRequest) (*ExistNotifTemplateCondsResponse, error)
	CountNotifTemplates(context.Context, *CountNotifTemplatesRequest) (*CountNotifTemplatesResponse, error)
	DeleteNotifTemplate(context.Context, *DeleteNotifTemplateRequest) (*DeleteNotifTemplateResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateNotifTemplate(context.Context, *CreateNotifTemplateRequest) (*CreateNotifTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotifTemplate not implemented")
}
func (UnimplementedManagerServer) CreateNotifTemplates(context.Context, *CreateNotifTemplatesRequest) (*CreateNotifTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotifTemplates not implemented")
}
func (UnimplementedManagerServer) UpdateNotifTemplate(context.Context, *UpdateNotifTemplateRequest) (*UpdateNotifTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotifTemplate not implemented")
}
func (UnimplementedManagerServer) GetNotifTemplate(context.Context, *GetNotifTemplateRequest) (*GetNotifTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotifTemplate not implemented")
}
func (UnimplementedManagerServer) GetNotifTemplateOnly(context.Context, *GetNotifTemplateOnlyRequest) (*GetNotifTemplateOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotifTemplateOnly not implemented")
}
func (UnimplementedManagerServer) GetNotifTemplates(context.Context, *GetNotifTemplatesRequest) (*GetNotifTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotifTemplates not implemented")
}
func (UnimplementedManagerServer) ExistNotifTemplate(context.Context, *ExistNotifTemplateRequest) (*ExistNotifTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistNotifTemplate not implemented")
}
func (UnimplementedManagerServer) ExistNotifTemplateConds(context.Context, *ExistNotifTemplateCondsRequest) (*ExistNotifTemplateCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistNotifTemplateConds not implemented")
}
func (UnimplementedManagerServer) CountNotifTemplates(context.Context, *CountNotifTemplatesRequest) (*CountNotifTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountNotifTemplates not implemented")
}
func (UnimplementedManagerServer) DeleteNotifTemplate(context.Context, *DeleteNotifTemplateRequest) (*DeleteNotifTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNotifTemplate not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateNotifTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotifTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateNotifTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/third.manager.template.notif1.v1.Manager/CreateNotifTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateNotifTemplate(ctx, req.(*CreateNotifTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateNotifTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotifTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateNotifTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/third.manager.template.notif1.v1.Manager/CreateNotifTemplates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateNotifTemplates(ctx, req.(*CreateNotifTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateNotifTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNotifTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateNotifTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/third.manager.template.notif1.v1.Manager/UpdateNotifTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateNotifTemplate(ctx, req.(*UpdateNotifTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetNotifTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotifTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetNotifTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/third.manager.template.notif1.v1.Manager/GetNotifTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetNotifTemplate(ctx, req.(*GetNotifTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetNotifTemplateOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotifTemplateOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetNotifTemplateOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/third.manager.template.notif1.v1.Manager/GetNotifTemplateOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetNotifTemplateOnly(ctx, req.(*GetNotifTemplateOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetNotifTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotifTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetNotifTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/third.manager.template.notif1.v1.Manager/GetNotifTemplates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetNotifTemplates(ctx, req.(*GetNotifTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistNotifTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistNotifTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistNotifTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/third.manager.template.notif1.v1.Manager/ExistNotifTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistNotifTemplate(ctx, req.(*ExistNotifTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistNotifTemplateConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistNotifTemplateCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistNotifTemplateConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/third.manager.template.notif1.v1.Manager/ExistNotifTemplateConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistNotifTemplateConds(ctx, req.(*ExistNotifTemplateCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountNotifTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountNotifTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountNotifTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/third.manager.template.notif1.v1.Manager/CountNotifTemplates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountNotifTemplates(ctx, req.(*CountNotifTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteNotifTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNotifTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteNotifTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/third.manager.template.notif1.v1.Manager/DeleteNotifTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteNotifTemplate(ctx, req.(*DeleteNotifTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "third.manager.template.notif1.v1.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNotifTemplate",
			Handler:    _Manager_CreateNotifTemplate_Handler,
		},
		{
			MethodName: "CreateNotifTemplates",
			Handler:    _Manager_CreateNotifTemplates_Handler,
		},
		{
			MethodName: "UpdateNotifTemplate",
			Handler:    _Manager_UpdateNotifTemplate_Handler,
		},
		{
			MethodName: "GetNotifTemplate",
			Handler:    _Manager_GetNotifTemplate_Handler,
		},
		{
			MethodName: "GetNotifTemplateOnly",
			Handler:    _Manager_GetNotifTemplateOnly_Handler,
		},
		{
			MethodName: "GetNotifTemplates",
			Handler:    _Manager_GetNotifTemplates_Handler,
		},
		{
			MethodName: "ExistNotifTemplate",
			Handler:    _Manager_ExistNotifTemplate_Handler,
		},
		{
			MethodName: "ExistNotifTemplateConds",
			Handler:    _Manager_ExistNotifTemplateConds_Handler,
		},
		{
			MethodName: "CountNotifTemplates",
			Handler:    _Manager_CountNotifTemplates_Handler,
		},
		{
			MethodName: "DeleteNotifTemplate",
			Handler:    _Manager_DeleteNotifTemplate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/third/mgr/v1/template/notif/notif.proto",
}
