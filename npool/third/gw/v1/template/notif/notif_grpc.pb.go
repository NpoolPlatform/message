// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/third/gw/v1/template/notif/notif.proto

package notif

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	CreateNotifTemplate(ctx context.Context, in *CreateNotifTemplateRequest, opts ...grpc.CallOption) (*CreateNotifTemplateResponse, error)
	CreateAppNotifTemplate(ctx context.Context, in *CreateAppNotifTemplateRequest, opts ...grpc.CallOption) (*CreateAppNotifTemplateResponse, error)
	GetNotifTemplate(ctx context.Context, in *GetNotifTemplateRequest, opts ...grpc.CallOption) (*GetNotifTemplateResponse, error)
	GetNotifTemplates(ctx context.Context, in *GetNotifTemplatesRequest, opts ...grpc.CallOption) (*GetNotifTemplatesResponse, error)
	GetAppNotifTemplates(ctx context.Context, in *GetAppNotifTemplatesRequest, opts ...grpc.CallOption) (*GetAppNotifTemplatesResponse, error)
	UpdateNotifTemplate(ctx context.Context, in *UpdateNotifTemplateRequest, opts ...grpc.CallOption) (*UpdateNotifTemplateResponse, error)
	UpdateAppNotifTemplate(ctx context.Context, in *UpdateAppNotifTemplateRequest, opts ...grpc.CallOption) (*UpdateAppNotifTemplateResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) CreateNotifTemplate(ctx context.Context, in *CreateNotifTemplateRequest, opts ...grpc.CallOption) (*CreateNotifTemplateResponse, error) {
	out := new(CreateNotifTemplateResponse)
	err := c.cc.Invoke(ctx, "/third.gateway.template.notif3.v1.Gateway/CreateNotifTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) CreateAppNotifTemplate(ctx context.Context, in *CreateAppNotifTemplateRequest, opts ...grpc.CallOption) (*CreateAppNotifTemplateResponse, error) {
	out := new(CreateAppNotifTemplateResponse)
	err := c.cc.Invoke(ctx, "/third.gateway.template.notif3.v1.Gateway/CreateAppNotifTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetNotifTemplate(ctx context.Context, in *GetNotifTemplateRequest, opts ...grpc.CallOption) (*GetNotifTemplateResponse, error) {
	out := new(GetNotifTemplateResponse)
	err := c.cc.Invoke(ctx, "/third.gateway.template.notif3.v1.Gateway/GetNotifTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetNotifTemplates(ctx context.Context, in *GetNotifTemplatesRequest, opts ...grpc.CallOption) (*GetNotifTemplatesResponse, error) {
	out := new(GetNotifTemplatesResponse)
	err := c.cc.Invoke(ctx, "/third.gateway.template.notif3.v1.Gateway/GetNotifTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetAppNotifTemplates(ctx context.Context, in *GetAppNotifTemplatesRequest, opts ...grpc.CallOption) (*GetAppNotifTemplatesResponse, error) {
	out := new(GetAppNotifTemplatesResponse)
	err := c.cc.Invoke(ctx, "/third.gateway.template.notif3.v1.Gateway/GetAppNotifTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdateNotifTemplate(ctx context.Context, in *UpdateNotifTemplateRequest, opts ...grpc.CallOption) (*UpdateNotifTemplateResponse, error) {
	out := new(UpdateNotifTemplateResponse)
	err := c.cc.Invoke(ctx, "/third.gateway.template.notif3.v1.Gateway/UpdateNotifTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdateAppNotifTemplate(ctx context.Context, in *UpdateAppNotifTemplateRequest, opts ...grpc.CallOption) (*UpdateAppNotifTemplateResponse, error) {
	out := new(UpdateAppNotifTemplateResponse)
	err := c.cc.Invoke(ctx, "/third.gateway.template.notif3.v1.Gateway/UpdateAppNotifTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	CreateNotifTemplate(context.Context, *CreateNotifTemplateRequest) (*CreateNotifTemplateResponse, error)
	CreateAppNotifTemplate(context.Context, *CreateAppNotifTemplateRequest) (*CreateAppNotifTemplateResponse, error)
	GetNotifTemplate(context.Context, *GetNotifTemplateRequest) (*GetNotifTemplateResponse, error)
	GetNotifTemplates(context.Context, *GetNotifTemplatesRequest) (*GetNotifTemplatesResponse, error)
	GetAppNotifTemplates(context.Context, *GetAppNotifTemplatesRequest) (*GetAppNotifTemplatesResponse, error)
	UpdateNotifTemplate(context.Context, *UpdateNotifTemplateRequest) (*UpdateNotifTemplateResponse, error)
	UpdateAppNotifTemplate(context.Context, *UpdateAppNotifTemplateRequest) (*UpdateAppNotifTemplateResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) CreateNotifTemplate(context.Context, *CreateNotifTemplateRequest) (*CreateNotifTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNotifTemplate not implemented")
}
func (UnimplementedGatewayServer) CreateAppNotifTemplate(context.Context, *CreateAppNotifTemplateRequest) (*CreateAppNotifTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppNotifTemplate not implemented")
}
func (UnimplementedGatewayServer) GetNotifTemplate(context.Context, *GetNotifTemplateRequest) (*GetNotifTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotifTemplate not implemented")
}
func (UnimplementedGatewayServer) GetNotifTemplates(context.Context, *GetNotifTemplatesRequest) (*GetNotifTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotifTemplates not implemented")
}
func (UnimplementedGatewayServer) GetAppNotifTemplates(context.Context, *GetAppNotifTemplatesRequest) (*GetAppNotifTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppNotifTemplates not implemented")
}
func (UnimplementedGatewayServer) UpdateNotifTemplate(context.Context, *UpdateNotifTemplateRequest) (*UpdateNotifTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotifTemplate not implemented")
}
func (UnimplementedGatewayServer) UpdateAppNotifTemplate(context.Context, *UpdateAppNotifTemplateRequest) (*UpdateAppNotifTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppNotifTemplate not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_CreateNotifTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNotifTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateNotifTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/third.gateway.template.notif3.v1.Gateway/CreateNotifTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateNotifTemplate(ctx, req.(*CreateNotifTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_CreateAppNotifTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppNotifTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateAppNotifTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/third.gateway.template.notif3.v1.Gateway/CreateAppNotifTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateAppNotifTemplate(ctx, req.(*CreateAppNotifTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetNotifTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotifTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetNotifTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/third.gateway.template.notif3.v1.Gateway/GetNotifTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetNotifTemplate(ctx, req.(*GetNotifTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetNotifTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotifTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetNotifTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/third.gateway.template.notif3.v1.Gateway/GetNotifTemplates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetNotifTemplates(ctx, req.(*GetNotifTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetAppNotifTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppNotifTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetAppNotifTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/third.gateway.template.notif3.v1.Gateway/GetAppNotifTemplates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetAppNotifTemplates(ctx, req.(*GetAppNotifTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdateNotifTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNotifTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateNotifTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/third.gateway.template.notif3.v1.Gateway/UpdateNotifTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateNotifTemplate(ctx, req.(*UpdateNotifTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdateAppNotifTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppNotifTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateAppNotifTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/third.gateway.template.notif3.v1.Gateway/UpdateAppNotifTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateAppNotifTemplate(ctx, req.(*UpdateAppNotifTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "third.gateway.template.notif3.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNotifTemplate",
			Handler:    _Gateway_CreateNotifTemplate_Handler,
		},
		{
			MethodName: "CreateAppNotifTemplate",
			Handler:    _Gateway_CreateAppNotifTemplate_Handler,
		},
		{
			MethodName: "GetNotifTemplate",
			Handler:    _Gateway_GetNotifTemplate_Handler,
		},
		{
			MethodName: "GetNotifTemplates",
			Handler:    _Gateway_GetNotifTemplates_Handler,
		},
		{
			MethodName: "GetAppNotifTemplates",
			Handler:    _Gateway_GetAppNotifTemplates_Handler,
		},
		{
			MethodName: "UpdateNotifTemplate",
			Handler:    _Gateway_UpdateNotifTemplate_Handler,
		},
		{
			MethodName: "UpdateAppNotifTemplate",
			Handler:    _Gateway_UpdateAppNotifTemplate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/third/gw/v1/template/notif/notif.proto",
}
