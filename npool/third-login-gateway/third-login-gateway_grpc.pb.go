// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/third-login-gateway/third-login-gateway.proto

package third_login_gateway

import (
	context "context"
	npool "github.com/NpoolPlatform/message/npool"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ThirdLoginGatewayClient is the client API for ThirdLoginGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThirdLoginGatewayClient interface {
	// Method Version
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*npool.VersionResponse, error)
	GetThirdAuthByApp(ctx context.Context, in *GetThirdAuthByAppRequest, opts ...grpc.CallOption) (*GetThirdAuthByAppResponse, error)
	AuthLogin(ctx context.Context, in *AuthLoginRequest, opts ...grpc.CallOption) (*AuthLoginResponse, error)
}

type thirdLoginGatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewThirdLoginGatewayClient(cc grpc.ClientConnInterface) ThirdLoginGatewayClient {
	return &thirdLoginGatewayClient{cc}
}

func (c *thirdLoginGatewayClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*npool.VersionResponse, error) {
	out := new(npool.VersionResponse)
	err := c.cc.Invoke(ctx, "/third.gateway.v1.ThirdLoginGateway/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thirdLoginGatewayClient) GetThirdAuthByApp(ctx context.Context, in *GetThirdAuthByAppRequest, opts ...grpc.CallOption) (*GetThirdAuthByAppResponse, error) {
	out := new(GetThirdAuthByAppResponse)
	err := c.cc.Invoke(ctx, "/third.gateway.v1.ThirdLoginGateway/GetThirdAuthByApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thirdLoginGatewayClient) AuthLogin(ctx context.Context, in *AuthLoginRequest, opts ...grpc.CallOption) (*AuthLoginResponse, error) {
	out := new(AuthLoginResponse)
	err := c.cc.Invoke(ctx, "/third.gateway.v1.ThirdLoginGateway/AuthLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThirdLoginGatewayServer is the server API for ThirdLoginGateway service.
// All implementations must embed UnimplementedThirdLoginGatewayServer
// for forward compatibility
type ThirdLoginGatewayServer interface {
	// Method Version
	Version(context.Context, *emptypb.Empty) (*npool.VersionResponse, error)
	GetThirdAuthByApp(context.Context, *GetThirdAuthByAppRequest) (*GetThirdAuthByAppResponse, error)
	AuthLogin(context.Context, *AuthLoginRequest) (*AuthLoginResponse, error)
	mustEmbedUnimplementedThirdLoginGatewayServer()
}

// UnimplementedThirdLoginGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedThirdLoginGatewayServer struct {
}

func (UnimplementedThirdLoginGatewayServer) Version(context.Context, *emptypb.Empty) (*npool.VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedThirdLoginGatewayServer) GetThirdAuthByApp(context.Context, *GetThirdAuthByAppRequest) (*GetThirdAuthByAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThirdAuthByApp not implemented")
}
func (UnimplementedThirdLoginGatewayServer) AuthLogin(context.Context, *AuthLoginRequest) (*AuthLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthLogin not implemented")
}
func (UnimplementedThirdLoginGatewayServer) mustEmbedUnimplementedThirdLoginGatewayServer() {}

// UnsafeThirdLoginGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThirdLoginGatewayServer will
// result in compilation errors.
type UnsafeThirdLoginGatewayServer interface {
	mustEmbedUnimplementedThirdLoginGatewayServer()
}

func RegisterThirdLoginGatewayServer(s grpc.ServiceRegistrar, srv ThirdLoginGatewayServer) {
	s.RegisterService(&ThirdLoginGateway_ServiceDesc, srv)
}

func _ThirdLoginGateway_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThirdLoginGatewayServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/third.gateway.v1.ThirdLoginGateway/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThirdLoginGatewayServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThirdLoginGateway_GetThirdAuthByApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetThirdAuthByAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThirdLoginGatewayServer).GetThirdAuthByApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/third.gateway.v1.ThirdLoginGateway/GetThirdAuthByApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThirdLoginGatewayServer).GetThirdAuthByApp(ctx, req.(*GetThirdAuthByAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThirdLoginGateway_AuthLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThirdLoginGatewayServer).AuthLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/third.gateway.v1.ThirdLoginGateway/AuthLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThirdLoginGatewayServer).AuthLogin(ctx, req.(*AuthLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ThirdLoginGateway_ServiceDesc is the grpc.ServiceDesc for ThirdLoginGateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ThirdLoginGateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "third.gateway.v1.ThirdLoginGateway",
	HandlerType: (*ThirdLoginGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _ThirdLoginGateway_Version_Handler,
		},
		{
			MethodName: "GetThirdAuthByApp",
			Handler:    _ThirdLoginGateway_GetThirdAuthByApp_Handler,
		},
		{
			MethodName: "AuthLogin",
			Handler:    _ThirdLoginGateway_AuthLogin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/third-login-gateway/third-login-gateway.proto",
}
