syntax = "proto3";

package order.middleware.payment.v1;

option go_package = "github.com/NpoolPlatform/message/npool/order/mw/v1/payment";

import "npool/basetypes/v1/conds.proto";
import "npool/basetypes/order/v1/enums.proto";

// Service Name
service Middleware {
    rpc CreatePayment     (CreatePaymentRequest)     returns (CreatePaymentResponse)     {}
    rpc CreatePayments    (CreatePaymentsRequest)    returns (CreatePaymentsResponse)    {}
    rpc UpdatePayment     (UpdatePaymentRequest)     returns (UpdatePaymentResponse)     {}
    rpc GetPayment        (GetPaymentRequest)        returns (GetPaymentResponse)        {}
    rpc GetPaymentOnly    (GetPaymentOnlyRequest)    returns (GetPaymentOnlyResponse)    {}
    rpc GetPayments       (GetPaymentsRequest)       returns (GetPaymentsResponse)       {}
    rpc ExistPayment      (ExistPaymentRequest)      returns (ExistPaymentResponse)      {}
    rpc ExistPaymentConds (ExistPaymentCondsRequest) returns (ExistPaymentCondsResponse) {}
    rpc CountPayments     (CountPaymentsRequest)     returns (CountPaymentsResponse)     {}
    rpc DeletePayment     (DeletePaymentRequest)     returns (DeletePaymentResponse)     {}
}

message PaymentReq {
    optional string       ID                    = 10;
    optional string       AppID                 = 20;
    optional string       UserID                = 30;
    optional string       GoodID                = 40;
    optional string       OrderID               = 50;
    optional string       AccountID             = 60;
    optional string       StartAmount           = 70;
    optional string       Amount                = 80;
    optional string       PayWithBalanceAmount  = 90;
    optional string       FinishAmount          = 100;
    optional string       CoinUsdCurrency       = 110;
    optional string       LocalCoinUsdCurrency  = 120;
    optional string       LiveCoinUsdCurrency   = 130;
    optional string       CoinInfoID            = 140;
    optional basetypes.order.v1.PaymentState State    = 150;
    optional string       ChainTransactionID    = 160;
    optional bool         UserSetPaid           = 170;
    optional bool         UserSetCanceled       = 180;
    optional bool         FakePayment           = 190;
}

message Payment {
    // @inject_tag: sql:"id"
    string       ID                    = 10;
    // @inject_tag: sql:"app_id"
    string       AppID                 = 20;
    // @inject_tag: sql:"user_id"
    string       UserID                = 30;
    // @inject_tag: sql:"good_id"
    string       GoodID                = 40;
    // @inject_tag: sql:"order_id"
    string       OrderID               = 50;
    // @inject_tag: sql:"account_id"
    string       AccountID             = 60;
    // @inject_tag: sql:"start_amount"
    string       StartAmount           = 70;
    // @inject_tag: sql:"amount"
    string       Amount                = 80;
    // @inject_tag: sql:"pay_with_balance_amount"
    string       PayWithBalanceAmount  = 90;
    // @inject_tag: sql:"finish_amount"
    string       FinishAmount          = 100;
    // @inject_tag: sql:"coin_usd_currency"
    string       CoinUsdCurrency       = 110;
    // @inject_tag: sql:"local_coin_usd_currency"
    string       LocalCoinUsdCurrency  = 120;
    // @inject_tag: sql:"live_coin_usd_currency"
    string       LiveCoinUsdCurrency   = 130;
    // @inject_tag: sql:"coin_info_id"
    string       CoinInfoID            = 140;
    // @inject_tag: sql:"state"
    string PaymentStateStr             = 149;
    basetypes.order.v1.PaymentState State    = 150;
    // @inject_tag: sql:"chain_transaction_id"
    string       ChainTransactionID    = 160;
    // @inject_tag: sql:"user_set_paid"
    bool         UserSetPaid           = 170;
    // @inject_tag: sql:"user_set_canceled"
    bool         UserSetCanceled       = 180;
    // @inject_tag: sql:"fake_payment"
    bool         FakePayment           = 290;
    // @inject_tag: sql:"created_at"
    uint32       CreatedAt             = 200;
    // @inject_tag: sql:"updated_at"
    uint32       UpdatedAt             = 210;
}

message Conds {
    basetypes.v1.StringVal ID         = 10;
    basetypes.v1.StringVal AppID      = 20;
    basetypes.v1.StringVal UserID     = 30;
    basetypes.v1.StringVal GoodID     = 40;
    basetypes.v1.StringVal OrderID    = 50;
    basetypes.v1.StringVal AccountID  = 60;
    basetypes.v1.StringVal CoinInfoID = 70;
    basetypes.v1.Uint32Val State      = 80;
}


message CreatePaymentRequest {
    PaymentReq Info = 10;
}

message CreatePaymentResponse {
    Payment Info = 10;
}

message CreatePaymentsRequest {
    repeated PaymentReq Infos = 10;
}

message CreatePaymentsResponse {
    repeated Payment Infos = 10;
}

message UpdatePaymentRequest {
    PaymentReq Info = 10;
}

message UpdatePaymentResponse {
    Payment Info = 10;
}

message GetPaymentRequest {
    string ID = 10;
}

message GetPaymentResponse {
    Payment Info = 10;
}

message GetPaymentsRequest {
    Conds Conds   = 10;
    int32 Offset  = 20;
    int32 Limit   = 30;
}

message GetPaymentsResponse {
    repeated Payment Infos = 10;
    uint32        Total = 20;
}

message GetPaymentOnlyRequest {
    Conds Conds = 10;
}

message GetPaymentOnlyResponse {
    Payment Info = 10;
}

message ExistPaymentRequest {
    string ID = 10;
}

message ExistPaymentResponse {
    bool Info = 10;
}

message ExistPaymentCondsRequest {
    Conds Conds = 10;
}

message ExistPaymentCondsResponse {
    bool Info = 10;
}

message CountPaymentsRequest {
    Conds Conds = 10;
}

message CountPaymentsResponse {
    uint32 Info = 10;
}

message DeletePaymentRequest {
    PaymentReq Info = 10;
}

message DeletePaymentResponse {
    Payment Info = 10;
}