syntax = "proto3";

package order.middleware.payment.v1;

option go_package = "github.com/NpoolPlatform/message/npool/order/mw/v1/payment";

import "npool/basetypes/v1/conds.proto";
import "npool/basetypes/order/v1/enums.proto";

// Service Name
service Middleware {
  rpc GetPayments (GetPaymentsRequest) returns (GetPaymentsResponse) {}
  rpc UpdatePayment (UpdatePaymentRequest) returns (UpdatePaymentResponse) {}
}

message PaymentReq {
    optional uint32 ID = 10;
    optional string EntID = 20;
    optional basetypes.order.v1.PaymentObseleteState ObseleteState = 30;
}

message Payment {
    // @inject_tag: sql:"id"
    uint32 ID = 10;
    // @inject_tag: sql:"ent_id"
    string EntID = 20;
    // @inject_tag: sql:"obselete_state"
    string ObseleteStateStr = 30;
    basetypes.order.v1.PaymentObseleteState ObseleteState = 40;

    repeated PaymentBalanceInfo PaymentBalances = 50;
    repeated PaymentTransferInfo PaymentTransfers = 60;

    // @inject_tag: sql:"created_at"
    uint32 CreatedAt = 1000;
    // @inject_tag: sql:"updated_at"
    uint32 UpdatedAt = 1010;
}

message Conds {
    optional basetypes.v1.Uint32Val ObseleteState = 10;
}

message GetPaymentsRequest {
    Conds Conds = 10;
    int32 Offset = 20;
    int32 Limit = 30;
}

message GetPaymentsResponse {
    repeated Payment Infos = 10;
}

message UpdatePaymentRequest {
    PaymentReq Info = 10;
}

message UpdatePaymentResponse {
}

message PaymentBalanceReq {
    optional string CoinTypeID = 10;
    optional string Amount = 20;
    optional string CoinUSDCurrency = 30;
    optional string LocalCoinUSDCurrency = 40;
    optional string LiveCoinUSDCurrency = 50;
}

message PaymentBalanceInfo {
    // @inject_tag: sql:"payment_id"
    string PaymentID = 10;
    // @inject_tag: sql:"coin_type_id"
    string CoinTypeID = 20;
    // @inject_tag: sql:"amount"
    string Amount = 30;
    // @inject_tag: sql:"coin_usd_currency"
    string CoinUSDCurrency = 40;
    // @inject_tag: sql:"local_coin_usd_currency"
    string LocalCoinUSDCurrency = 50;
    // @inject_tag: sql:"live_coin_usd_currency"
    string LiveCoinUSDCurrency = 60;
    // @inject_tag: sql:"created_at"
    uint32 CreatedAt = 70;
}

message PaymentContractReq {
    optional string CoinTypeID = 10;
    optional string Amount = 20;
}

message PaymentContractInfo {
    // @inject_tag: sql:"payment_id"
    string PaymentID = 10;
    // @inject_tag: sql:"coin_type_id"
    string CoinTypeID = 20;
    // @inject_tag: sql:"amount"
    string Amount = 30;
    // @inject_tag: sql:"created_at"
    uint32 CreatedAt = 40;
}

message PaymentTransferReq {
    optional string EntID = 10;
    optional string CoinTypeID = 20;
    optional string Amount = 30;
    optional string AccountID = 40;
    optional string StartAmount = 50;
    optional string CoinUSDCurrency = 60;
    optional string LocalCoinUSDCurrency = 70;
    optional string LiveCoinUSDCurrency = 80;
    optional string FinishAmount = 90;
}

message PaymentTransferInfo {
    // @inject_tag: sql:"ent_id"
    string EntID = 10;
    // @inject_tag: sql:"payment_id"
    string PaymentID = 20;
    // @inject_tag: sql:"coin_type_id"
    string CoinTypeID = 30;
    // @inject_tag: sql:"amount"
    string Amount = 40;
    // @inject_tag: sql:"account_id"
    string AccountID = 50;
    // @inject_tag: sql:"start_amount"
    string StartAmount = 60;
    // @inject_tag: sql:"coin_usd_currency"
    string CoinUSDCurrency = 70;
    // @inject_tag: sql:"local_coin_usd_currency"
    string LocalCoinUSDCurrency = 80;
    // @inject_tag: sql:"live_coin_usd_currency"
    string LiveCoinUSDCurrency = 90;
    // @inject_tag: sql:"finish_amount"
    string FinishAmount = 100;
    // @inject_tag: sql:"created_at"
    uint32 CreatedAt = 110;
}
