// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.18.1
// source: npool/order/mw/v1/payment/payment.proto

package payment

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PaymentBalanceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinTypeID           *string `protobuf:"bytes,10,opt,name=CoinTypeID,proto3,oneof" json:"CoinTypeID,omitempty"`
	Amount               *string `protobuf:"bytes,20,opt,name=Amount,proto3,oneof" json:"Amount,omitempty"`
	CoinUSDCurrency      *string `protobuf:"bytes,30,opt,name=CoinUSDCurrency,proto3,oneof" json:"CoinUSDCurrency,omitempty"`
	LocalCoinUSDCurrency *string `protobuf:"bytes,40,opt,name=LocalCoinUSDCurrency,proto3,oneof" json:"LocalCoinUSDCurrency,omitempty"`
	LiveCoinUSDCurrency  *string `protobuf:"bytes,50,opt,name=LiveCoinUSDCurrency,proto3,oneof" json:"LiveCoinUSDCurrency,omitempty"`
}

func (x *PaymentBalanceReq) Reset() {
	*x = PaymentBalanceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_payment_payment_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentBalanceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentBalanceReq) ProtoMessage() {}

func (x *PaymentBalanceReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_payment_payment_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentBalanceReq.ProtoReflect.Descriptor instead.
func (*PaymentBalanceReq) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_payment_payment_proto_rawDescGZIP(), []int{0}
}

func (x *PaymentBalanceReq) GetCoinTypeID() string {
	if x != nil && x.CoinTypeID != nil {
		return *x.CoinTypeID
	}
	return ""
}

func (x *PaymentBalanceReq) GetAmount() string {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return ""
}

func (x *PaymentBalanceReq) GetCoinUSDCurrency() string {
	if x != nil && x.CoinUSDCurrency != nil {
		return *x.CoinUSDCurrency
	}
	return ""
}

func (x *PaymentBalanceReq) GetLocalCoinUSDCurrency() string {
	if x != nil && x.LocalCoinUSDCurrency != nil {
		return *x.LocalCoinUSDCurrency
	}
	return ""
}

func (x *PaymentBalanceReq) GetLiveCoinUSDCurrency() string {
	if x != nil && x.LiveCoinUSDCurrency != nil {
		return *x.LiveCoinUSDCurrency
	}
	return ""
}

type PaymentBalanceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: sql:"payment_id"
	PaymentID string `protobuf:"bytes,10,opt,name=PaymentID,proto3" json:"PaymentID,omitempty" sql:"payment_id"`
	// @inject_tag: sql:"coin_type_id"
	CoinTypeID string `protobuf:"bytes,20,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty" sql:"coin_type_id"`
	// @inject_tag: sql:"amount"
	Amount string `protobuf:"bytes,30,opt,name=Amount,proto3" json:"Amount,omitempty" sql:"amount"`
	// @inject_tag: sql:"coin_usd_currency"
	CoinUSDCurrency string `protobuf:"bytes,40,opt,name=CoinUSDCurrency,proto3" json:"CoinUSDCurrency,omitempty" sql:"coin_usd_currency"`
	// @inject_tag: sql:"local_coin_usd_currency"
	LocalCoinUSDCurrency string `protobuf:"bytes,50,opt,name=LocalCoinUSDCurrency,proto3" json:"LocalCoinUSDCurrency,omitempty" sql:"local_coin_usd_currency"`
	// @inject_tag: sql:"live_coin_usd_currency"
	LiveCoinUSDCurrency string `protobuf:"bytes,60,opt,name=LiveCoinUSDCurrency,proto3" json:"LiveCoinUSDCurrency,omitempty" sql:"live_coin_usd_currency"`
	// @inject_tag: sql:"created_at"
	CreatedAt uint32 `protobuf:"varint,70,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
}

func (x *PaymentBalanceInfo) Reset() {
	*x = PaymentBalanceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_payment_payment_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentBalanceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentBalanceInfo) ProtoMessage() {}

func (x *PaymentBalanceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_payment_payment_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentBalanceInfo.ProtoReflect.Descriptor instead.
func (*PaymentBalanceInfo) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_payment_payment_proto_rawDescGZIP(), []int{1}
}

func (x *PaymentBalanceInfo) GetPaymentID() string {
	if x != nil {
		return x.PaymentID
	}
	return ""
}

func (x *PaymentBalanceInfo) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

func (x *PaymentBalanceInfo) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *PaymentBalanceInfo) GetCoinUSDCurrency() string {
	if x != nil {
		return x.CoinUSDCurrency
	}
	return ""
}

func (x *PaymentBalanceInfo) GetLocalCoinUSDCurrency() string {
	if x != nil {
		return x.LocalCoinUSDCurrency
	}
	return ""
}

func (x *PaymentBalanceInfo) GetLiveCoinUSDCurrency() string {
	if x != nil {
		return x.LiveCoinUSDCurrency
	}
	return ""
}

func (x *PaymentBalanceInfo) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type PaymentContractReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinTypeID *string `protobuf:"bytes,10,opt,name=CoinTypeID,proto3,oneof" json:"CoinTypeID,omitempty"`
	Amount     *string `protobuf:"bytes,20,opt,name=Amount,proto3,oneof" json:"Amount,omitempty"`
}

func (x *PaymentContractReq) Reset() {
	*x = PaymentContractReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_payment_payment_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentContractReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentContractReq) ProtoMessage() {}

func (x *PaymentContractReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_payment_payment_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentContractReq.ProtoReflect.Descriptor instead.
func (*PaymentContractReq) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_payment_payment_proto_rawDescGZIP(), []int{2}
}

func (x *PaymentContractReq) GetCoinTypeID() string {
	if x != nil && x.CoinTypeID != nil {
		return *x.CoinTypeID
	}
	return ""
}

func (x *PaymentContractReq) GetAmount() string {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return ""
}

type PaymentContractInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: sql:"payment_id"
	PaymentID string `protobuf:"bytes,10,opt,name=PaymentID,proto3" json:"PaymentID,omitempty" sql:"payment_id"`
	// @inject_tag: sql:"coin_type_id"
	CoinTypeID string `protobuf:"bytes,20,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty" sql:"coin_type_id"`
	// @inject_tag: sql:"amount"
	Amount string `protobuf:"bytes,30,opt,name=Amount,proto3" json:"Amount,omitempty" sql:"amount"`
	// @inject_tag: sql:"created_at"
	CreatedAt uint32 `protobuf:"varint,40,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
}

func (x *PaymentContractInfo) Reset() {
	*x = PaymentContractInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_payment_payment_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentContractInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentContractInfo) ProtoMessage() {}

func (x *PaymentContractInfo) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_payment_payment_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentContractInfo.ProtoReflect.Descriptor instead.
func (*PaymentContractInfo) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_payment_payment_proto_rawDescGZIP(), []int{3}
}

func (x *PaymentContractInfo) GetPaymentID() string {
	if x != nil {
		return x.PaymentID
	}
	return ""
}

func (x *PaymentContractInfo) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

func (x *PaymentContractInfo) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *PaymentContractInfo) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type PaymentTransferReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntID                *string `protobuf:"bytes,10,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	CoinTypeID           *string `protobuf:"bytes,20,opt,name=CoinTypeID,proto3,oneof" json:"CoinTypeID,omitempty"`
	Amount               *string `protobuf:"bytes,30,opt,name=Amount,proto3,oneof" json:"Amount,omitempty"`
	AccountID            *string `protobuf:"bytes,40,opt,name=AccountID,proto3,oneof" json:"AccountID,omitempty"`
	StartAmount          *string `protobuf:"bytes,50,opt,name=StartAmount,proto3,oneof" json:"StartAmount,omitempty"`
	CoinUSDCurrency      *string `protobuf:"bytes,60,opt,name=CoinUSDCurrency,proto3,oneof" json:"CoinUSDCurrency,omitempty"`
	LocalCoinUSDCurrency *string `protobuf:"bytes,70,opt,name=LocalCoinUSDCurrency,proto3,oneof" json:"LocalCoinUSDCurrency,omitempty"`
	LiveCoinUSDCurrency  *string `protobuf:"bytes,80,opt,name=LiveCoinUSDCurrency,proto3,oneof" json:"LiveCoinUSDCurrency,omitempty"`
	FinishAmount         *string `protobuf:"bytes,90,opt,name=FinishAmount,proto3,oneof" json:"FinishAmount,omitempty"`
}

func (x *PaymentTransferReq) Reset() {
	*x = PaymentTransferReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_payment_payment_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentTransferReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentTransferReq) ProtoMessage() {}

func (x *PaymentTransferReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_payment_payment_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentTransferReq.ProtoReflect.Descriptor instead.
func (*PaymentTransferReq) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_payment_payment_proto_rawDescGZIP(), []int{4}
}

func (x *PaymentTransferReq) GetEntID() string {
	if x != nil && x.EntID != nil {
		return *x.EntID
	}
	return ""
}

func (x *PaymentTransferReq) GetCoinTypeID() string {
	if x != nil && x.CoinTypeID != nil {
		return *x.CoinTypeID
	}
	return ""
}

func (x *PaymentTransferReq) GetAmount() string {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return ""
}

func (x *PaymentTransferReq) GetAccountID() string {
	if x != nil && x.AccountID != nil {
		return *x.AccountID
	}
	return ""
}

func (x *PaymentTransferReq) GetStartAmount() string {
	if x != nil && x.StartAmount != nil {
		return *x.StartAmount
	}
	return ""
}

func (x *PaymentTransferReq) GetCoinUSDCurrency() string {
	if x != nil && x.CoinUSDCurrency != nil {
		return *x.CoinUSDCurrency
	}
	return ""
}

func (x *PaymentTransferReq) GetLocalCoinUSDCurrency() string {
	if x != nil && x.LocalCoinUSDCurrency != nil {
		return *x.LocalCoinUSDCurrency
	}
	return ""
}

func (x *PaymentTransferReq) GetLiveCoinUSDCurrency() string {
	if x != nil && x.LiveCoinUSDCurrency != nil {
		return *x.LiveCoinUSDCurrency
	}
	return ""
}

func (x *PaymentTransferReq) GetFinishAmount() string {
	if x != nil && x.FinishAmount != nil {
		return *x.FinishAmount
	}
	return ""
}

type PaymentTransferInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: sql:"ent_id"
	EntID string `protobuf:"bytes,10,opt,name=EntID,proto3" json:"EntID,omitempty" sql:"ent_id"`
	// @inject_tag: sql:"payment_id"
	PaymentID string `protobuf:"bytes,20,opt,name=PaymentID,proto3" json:"PaymentID,omitempty" sql:"payment_id"`
	// @inject_tag: sql:"coin_type_id"
	CoinTypeID string `protobuf:"bytes,30,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty" sql:"coin_type_id"`
	// @inject_tag: sql:"amount"
	Amount string `protobuf:"bytes,40,opt,name=Amount,proto3" json:"Amount,omitempty" sql:"amount"`
	// @inject_tag: sql:"account_id"
	AccountID string `protobuf:"bytes,50,opt,name=AccountID,proto3" json:"AccountID,omitempty" sql:"account_id"`
	// @inject_tag: sql:"start_amount"
	StartAmount string `protobuf:"bytes,60,opt,name=StartAmount,proto3" json:"StartAmount,omitempty" sql:"start_amount"`
	// @inject_tag: sql:"coin_usd_currency"
	CoinUSDCurrency string `protobuf:"bytes,70,opt,name=CoinUSDCurrency,proto3" json:"CoinUSDCurrency,omitempty" sql:"coin_usd_currency"`
	// @inject_tag: sql:"local_coin_usd_currency"
	LocalCoinUSDCurrency string `protobuf:"bytes,80,opt,name=LocalCoinUSDCurrency,proto3" json:"LocalCoinUSDCurrency,omitempty" sql:"local_coin_usd_currency"`
	// @inject_tag: sql:"live_coin_usd_currency"
	LiveCoinUSDCurrency string `protobuf:"bytes,90,opt,name=LiveCoinUSDCurrency,proto3" json:"LiveCoinUSDCurrency,omitempty" sql:"live_coin_usd_currency"`
	// @inject_tag: sql:"finish_amount"
	FinishAmount string `protobuf:"bytes,100,opt,name=FinishAmount,proto3" json:"FinishAmount,omitempty" sql:"finish_amount"`
	// @inject_tag: sql:"created_at"
	CreatedAt uint32 `protobuf:"varint,110,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
}

func (x *PaymentTransferInfo) Reset() {
	*x = PaymentTransferInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_payment_payment_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentTransferInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentTransferInfo) ProtoMessage() {}

func (x *PaymentTransferInfo) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_payment_payment_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentTransferInfo.ProtoReflect.Descriptor instead.
func (*PaymentTransferInfo) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_payment_payment_proto_rawDescGZIP(), []int{5}
}

func (x *PaymentTransferInfo) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *PaymentTransferInfo) GetPaymentID() string {
	if x != nil {
		return x.PaymentID
	}
	return ""
}

func (x *PaymentTransferInfo) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

func (x *PaymentTransferInfo) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *PaymentTransferInfo) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *PaymentTransferInfo) GetStartAmount() string {
	if x != nil {
		return x.StartAmount
	}
	return ""
}

func (x *PaymentTransferInfo) GetCoinUSDCurrency() string {
	if x != nil {
		return x.CoinUSDCurrency
	}
	return ""
}

func (x *PaymentTransferInfo) GetLocalCoinUSDCurrency() string {
	if x != nil {
		return x.LocalCoinUSDCurrency
	}
	return ""
}

func (x *PaymentTransferInfo) GetLiveCoinUSDCurrency() string {
	if x != nil {
		return x.LiveCoinUSDCurrency
	}
	return ""
}

func (x *PaymentTransferInfo) GetFinishAmount() string {
	if x != nil {
		return x.FinishAmount
	}
	return ""
}

func (x *PaymentTransferInfo) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

var File_npool_order_mw_v1_payment_payment_proto protoreflect.FileDescriptor

var file_npool_order_mw_v1_payment_payment_proto_rawDesc = []byte{
	0x0a, 0x27, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x6d, 0x77,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x22, 0xd3, 0x02, 0x0a, 0x11, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x0a,
	0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d,
	0x0a, 0x0f, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x53, 0x44, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0f, 0x43, 0x6f, 0x69, 0x6e, 0x55,
	0x53, 0x44, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a,
	0x14, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x53, 0x44, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x14, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x53, 0x44, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x13, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f,
	0x69, 0x6e, 0x55, 0x53, 0x44, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x13, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x55,
	0x53, 0x44, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x43, 0x6f, 0x69, 0x6e,
	0x55, 0x53, 0x44, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x17, 0x0a, 0x15, 0x5f,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x53, 0x44, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x69,
	0x6e, 0x55, 0x53, 0x44, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x98, 0x02, 0x0a,
	0x12, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x69,
	0x6e, 0x55, 0x53, 0x44, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x53, 0x44, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x32, 0x0a, 0x14, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e,
	0x55, 0x53, 0x44, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x53, 0x44, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x4c, 0x69, 0x76, 0x65, 0x43,
	0x6f, 0x69, 0x6e, 0x55, 0x53, 0x44, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x3c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x53,
	0x44, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x70, 0x0a, 0x12, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a,
	0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x89, 0x01, 0x0a, 0x13, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x9b, 0x04, 0x0a, 0x12, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x05,
	0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x45,
	0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x43,
	0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x0b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x53, 0x44, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0f,
	0x43, 0x6f, 0x69, 0x6e, 0x55, 0x53, 0x44, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x37, 0x0a, 0x14, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x55,
	0x53, 0x44, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x06, 0x52, 0x14, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x53, 0x44,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x13, 0x4c,
	0x69, 0x76, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x53, 0x44, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x13, 0x4c, 0x69, 0x76, 0x65,
	0x43, 0x6f, 0x69, 0x6e, 0x55, 0x53, 0x44, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0c, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x45, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x53, 0x44, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x55,
	0x53, 0x44, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x4c,
	0x69, 0x76, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x53, 0x44, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x93, 0x03, 0x0a, 0x13, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x45,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x69, 0x6e, 0x55,
	0x53, 0x44, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x53, 0x44, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x32, 0x0a, 0x14, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x53,
	0x44, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x53, 0x44, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x69,
	0x6e, 0x55, 0x53, 0x44, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x5a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x53, 0x44, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70,
	0x6f, 0x6f, 0x6c, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_order_mw_v1_payment_payment_proto_rawDescOnce sync.Once
	file_npool_order_mw_v1_payment_payment_proto_rawDescData = file_npool_order_mw_v1_payment_payment_proto_rawDesc
)

func file_npool_order_mw_v1_payment_payment_proto_rawDescGZIP() []byte {
	file_npool_order_mw_v1_payment_payment_proto_rawDescOnce.Do(func() {
		file_npool_order_mw_v1_payment_payment_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_order_mw_v1_payment_payment_proto_rawDescData)
	})
	return file_npool_order_mw_v1_payment_payment_proto_rawDescData
}

var file_npool_order_mw_v1_payment_payment_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_npool_order_mw_v1_payment_payment_proto_goTypes = []interface{}{
	(*PaymentBalanceReq)(nil),   // 0: order.middleware.payment.v1.PaymentBalanceReq
	(*PaymentBalanceInfo)(nil),  // 1: order.middleware.payment.v1.PaymentBalanceInfo
	(*PaymentContractReq)(nil),  // 2: order.middleware.payment.v1.PaymentContractReq
	(*PaymentContractInfo)(nil), // 3: order.middleware.payment.v1.PaymentContractInfo
	(*PaymentTransferReq)(nil),  // 4: order.middleware.payment.v1.PaymentTransferReq
	(*PaymentTransferInfo)(nil), // 5: order.middleware.payment.v1.PaymentTransferInfo
}
var file_npool_order_mw_v1_payment_payment_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_npool_order_mw_v1_payment_payment_proto_init() }
func file_npool_order_mw_v1_payment_payment_proto_init() {
	if File_npool_order_mw_v1_payment_payment_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_order_mw_v1_payment_payment_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentBalanceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_payment_payment_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentBalanceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_payment_payment_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentContractReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_payment_payment_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentContractInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_payment_payment_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentTransferReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_payment_payment_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentTransferInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_order_mw_v1_payment_payment_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_npool_order_mw_v1_payment_payment_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_npool_order_mw_v1_payment_payment_proto_msgTypes[4].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_order_mw_v1_payment_payment_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_npool_order_mw_v1_payment_payment_proto_goTypes,
		DependencyIndexes: file_npool_order_mw_v1_payment_payment_proto_depIdxs,
		MessageInfos:      file_npool_order_mw_v1_payment_payment_proto_msgTypes,
	}.Build()
	File_npool_order_mw_v1_payment_payment_proto = out.File
	file_npool_order_mw_v1_payment_payment_proto_rawDesc = nil
	file_npool_order_mw_v1_payment_payment_proto_goTypes = nil
	file_npool_order_mw_v1_payment_payment_proto_depIdxs = nil
}
