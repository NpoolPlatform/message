// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/order/mw/v1/powerrental/miningpoolorderuser/miningpoolorderuser.proto

package miningpoolorderuser

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Middleware_CreateMiningPoolOrderUser_FullMethodName     = "/order.middleware.miningpoolorderuser.v1.Middleware/CreateMiningPoolOrderUser"
	Middleware_GetMiningPoolOrderUser_FullMethodName        = "/order.middleware.miningpoolorderuser.v1.Middleware/GetMiningPoolOrderUser"
	Middleware_GetMiningPoolOrderUsers_FullMethodName       = "/order.middleware.miningpoolorderuser.v1.Middleware/GetMiningPoolOrderUsers"
	Middleware_ExistMiningPoolOrderUser_FullMethodName      = "/order.middleware.miningpoolorderuser.v1.Middleware/ExistMiningPoolOrderUser"
	Middleware_ExistMiningPoolOrderUserConds_FullMethodName = "/order.middleware.miningpoolorderuser.v1.Middleware/ExistMiningPoolOrderUserConds"
	Middleware_DeleteMiningPoolOrderUser_FullMethodName     = "/order.middleware.miningpoolorderuser.v1.Middleware/DeleteMiningPoolOrderUser"
)

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
	CreateMiningPoolOrderUser(ctx context.Context, in *CreateMiningPoolOrderUserRequest, opts ...grpc.CallOption) (*CreateMiningPoolOrderUserResponse, error)
	GetMiningPoolOrderUser(ctx context.Context, in *GetMiningPoolOrderUserRequest, opts ...grpc.CallOption) (*GetMiningPoolOrderUserResponse, error)
	GetMiningPoolOrderUsers(ctx context.Context, in *GetMiningPoolOrderUsersRequest, opts ...grpc.CallOption) (*GetMiningPoolOrderUsersResponse, error)
	ExistMiningPoolOrderUser(ctx context.Context, in *ExistMiningPoolOrderUserRequest, opts ...grpc.CallOption) (*ExistMiningPoolOrderUserResponse, error)
	ExistMiningPoolOrderUserConds(ctx context.Context, in *ExistMiningPoolOrderUserCondsRequest, opts ...grpc.CallOption) (*ExistMiningPoolOrderUserCondsResponse, error)
	DeleteMiningPoolOrderUser(ctx context.Context, in *DeleteMiningPoolOrderUserRequest, opts ...grpc.CallOption) (*DeleteMiningPoolOrderUserResponse, error)
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) CreateMiningPoolOrderUser(ctx context.Context, in *CreateMiningPoolOrderUserRequest, opts ...grpc.CallOption) (*CreateMiningPoolOrderUserResponse, error) {
	out := new(CreateMiningPoolOrderUserResponse)
	err := c.cc.Invoke(ctx, Middleware_CreateMiningPoolOrderUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetMiningPoolOrderUser(ctx context.Context, in *GetMiningPoolOrderUserRequest, opts ...grpc.CallOption) (*GetMiningPoolOrderUserResponse, error) {
	out := new(GetMiningPoolOrderUserResponse)
	err := c.cc.Invoke(ctx, Middleware_GetMiningPoolOrderUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetMiningPoolOrderUsers(ctx context.Context, in *GetMiningPoolOrderUsersRequest, opts ...grpc.CallOption) (*GetMiningPoolOrderUsersResponse, error) {
	out := new(GetMiningPoolOrderUsersResponse)
	err := c.cc.Invoke(ctx, Middleware_GetMiningPoolOrderUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ExistMiningPoolOrderUser(ctx context.Context, in *ExistMiningPoolOrderUserRequest, opts ...grpc.CallOption) (*ExistMiningPoolOrderUserResponse, error) {
	out := new(ExistMiningPoolOrderUserResponse)
	err := c.cc.Invoke(ctx, Middleware_ExistMiningPoolOrderUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ExistMiningPoolOrderUserConds(ctx context.Context, in *ExistMiningPoolOrderUserCondsRequest, opts ...grpc.CallOption) (*ExistMiningPoolOrderUserCondsResponse, error) {
	out := new(ExistMiningPoolOrderUserCondsResponse)
	err := c.cc.Invoke(ctx, Middleware_ExistMiningPoolOrderUserConds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) DeleteMiningPoolOrderUser(ctx context.Context, in *DeleteMiningPoolOrderUserRequest, opts ...grpc.CallOption) (*DeleteMiningPoolOrderUserResponse, error) {
	out := new(DeleteMiningPoolOrderUserResponse)
	err := c.cc.Invoke(ctx, Middleware_DeleteMiningPoolOrderUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
	CreateMiningPoolOrderUser(context.Context, *CreateMiningPoolOrderUserRequest) (*CreateMiningPoolOrderUserResponse, error)
	GetMiningPoolOrderUser(context.Context, *GetMiningPoolOrderUserRequest) (*GetMiningPoolOrderUserResponse, error)
	GetMiningPoolOrderUsers(context.Context, *GetMiningPoolOrderUsersRequest) (*GetMiningPoolOrderUsersResponse, error)
	ExistMiningPoolOrderUser(context.Context, *ExistMiningPoolOrderUserRequest) (*ExistMiningPoolOrderUserResponse, error)
	ExistMiningPoolOrderUserConds(context.Context, *ExistMiningPoolOrderUserCondsRequest) (*ExistMiningPoolOrderUserCondsResponse, error)
	DeleteMiningPoolOrderUser(context.Context, *DeleteMiningPoolOrderUserRequest) (*DeleteMiningPoolOrderUserResponse, error)
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) CreateMiningPoolOrderUser(context.Context, *CreateMiningPoolOrderUserRequest) (*CreateMiningPoolOrderUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMiningPoolOrderUser not implemented")
}
func (UnimplementedMiddlewareServer) GetMiningPoolOrderUser(context.Context, *GetMiningPoolOrderUserRequest) (*GetMiningPoolOrderUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMiningPoolOrderUser not implemented")
}
func (UnimplementedMiddlewareServer) GetMiningPoolOrderUsers(context.Context, *GetMiningPoolOrderUsersRequest) (*GetMiningPoolOrderUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMiningPoolOrderUsers not implemented")
}
func (UnimplementedMiddlewareServer) ExistMiningPoolOrderUser(context.Context, *ExistMiningPoolOrderUserRequest) (*ExistMiningPoolOrderUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistMiningPoolOrderUser not implemented")
}
func (UnimplementedMiddlewareServer) ExistMiningPoolOrderUserConds(context.Context, *ExistMiningPoolOrderUserCondsRequest) (*ExistMiningPoolOrderUserCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistMiningPoolOrderUserConds not implemented")
}
func (UnimplementedMiddlewareServer) DeleteMiningPoolOrderUser(context.Context, *DeleteMiningPoolOrderUserRequest) (*DeleteMiningPoolOrderUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMiningPoolOrderUser not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_CreateMiningPoolOrderUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMiningPoolOrderUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateMiningPoolOrderUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_CreateMiningPoolOrderUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateMiningPoolOrderUser(ctx, req.(*CreateMiningPoolOrderUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetMiningPoolOrderUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMiningPoolOrderUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetMiningPoolOrderUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetMiningPoolOrderUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetMiningPoolOrderUser(ctx, req.(*GetMiningPoolOrderUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetMiningPoolOrderUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMiningPoolOrderUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetMiningPoolOrderUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetMiningPoolOrderUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetMiningPoolOrderUsers(ctx, req.(*GetMiningPoolOrderUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ExistMiningPoolOrderUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistMiningPoolOrderUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ExistMiningPoolOrderUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_ExistMiningPoolOrderUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ExistMiningPoolOrderUser(ctx, req.(*ExistMiningPoolOrderUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ExistMiningPoolOrderUserConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistMiningPoolOrderUserCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ExistMiningPoolOrderUserConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_ExistMiningPoolOrderUserConds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ExistMiningPoolOrderUserConds(ctx, req.(*ExistMiningPoolOrderUserCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_DeleteMiningPoolOrderUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMiningPoolOrderUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).DeleteMiningPoolOrderUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_DeleteMiningPoolOrderUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).DeleteMiningPoolOrderUser(ctx, req.(*DeleteMiningPoolOrderUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.middleware.miningpoolorderuser.v1.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMiningPoolOrderUser",
			Handler:    _Middleware_CreateMiningPoolOrderUser_Handler,
		},
		{
			MethodName: "GetMiningPoolOrderUser",
			Handler:    _Middleware_GetMiningPoolOrderUser_Handler,
		},
		{
			MethodName: "GetMiningPoolOrderUsers",
			Handler:    _Middleware_GetMiningPoolOrderUsers_Handler,
		},
		{
			MethodName: "ExistMiningPoolOrderUser",
			Handler:    _Middleware_ExistMiningPoolOrderUser_Handler,
		},
		{
			MethodName: "ExistMiningPoolOrderUserConds",
			Handler:    _Middleware_ExistMiningPoolOrderUserConds_Handler,
		},
		{
			MethodName: "DeleteMiningPoolOrderUser",
			Handler:    _Middleware_DeleteMiningPoolOrderUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/order/mw/v1/powerrental/miningpoolorderuser/miningpoolorderuser.proto",
}
