syntax = "proto3";

package order.middleware.powerrental.v1;

option go_package = "github.com/NpoolPlatform/message/npool/order/mw/v1/powerrental";

import "google/api/annotations.proto";
import "npool/basetypes/order/v1/enums.proto";
import "npool/basetypes/good/v1/enums.proto";
import "npool/basetypes/v1/conds.proto";
import "npool/order/mw/v1/payment/payment.proto";
import "npool/order/mw/v1/order/coupon/coupon.proto";
import "npool/order/mw/v1/fee/fee.proto";

// Service Name
service Middleware {
    rpc CreatePowerRentalOrder (CreatePowerRentalOrderRequest) returns (CreatePowerRentalOrderResponse) {}
    rpc CreatePowerRentalOrderWithFees (CreatePowerRentalOrderWithFeesRequest) returns (CreatePowerRentalOrderWithFeesResponse) {}
    rpc UpdatePowerRentalOrder (UpdatePowerRentalOrderRequest) returns (UpdatePowerRentalOrderResponse) {}
    rpc GetPowerRentalOrder (GetPowerRentalOrderRequest) returns (GetPowerRentalOrderResponse) {}
    rpc GetPowerRentalOrders (GetPowerRentalOrdersRequest) returns (GetPowerRentalOrdersResponse) {}
    rpc ExistPowerRentalOrder (ExistPowerRentalOrderRequest) returns (ExistPowerRentalOrderResponse) {}
    rpc ExistPowerRentalOrderConds (ExistPowerRentalOrderCondsRequest) returns (ExistPowerRentalOrderCondsResponse) {}
    rpc DeletePowerRentalOrder (DeletePowerRentalOrderRequest) returns (DeletePowerRentalOrderResponse) {}
}

message PowerRentalOrderReq {
    // Order base
    optional uint32 ID = 10;
    optional string EntID = 20;
    optional string AppID = 30;
    optional string UserID = 40;
    optional string GoodID = 50;
    optional basetypes.good.v1.GoodType GoodType = 60;
    optional string AppGoodID = 70;
    optional string OrderID = 80;
    optional basetypes.order.v1.OrderType OrderType = 100;
    optional basetypes.order.v1.PaymentType PaymentType = 110;
    optional bool Simulate = 130;

    // Power rental
    optional string AppGoodStockID = 200;
    optional string Units = 210;
    optional string GoodValueUSD = 220;
    optional string PaymentAmountUSD = 230;
    optional string DiscountAmountUSD = 240;
    optional string PromotionID = 250;
    optional uint32 DurationSeconds = 260;
    optional basetypes.order.v1.InvestmentType InvestmentType = 270;

    // Order state base
    optional basetypes.order.v1.OrderState OrderState = 300;
    optional basetypes.order.v1.OrderStartMode StartMode = 310;
    optional uint32 StartAt = 320;
    optional uint32 LastBenefitAt = 330;
    optional basetypes.order.v1.BenefitState BenefitState = 340;

    // Power rental state
    // AppGoodStockID or AppMiningGoodStockID
    optional bool UserSetPaid = 410;
    optional bool UserSetCanceled = 420;
    optional bool AdminSetCanceled = 430;
    optional basetypes.order.v1.PaymentState PaymentState = 440;
    optional basetypes.order.v1.OrderRenewState RenewState = 450;
    optional uint32 RenewNotifyAt = 460;

    // Work flow and lock
    optional bool Rollback = 500;
    optional string AppGoodStockLockID = 510;
    optional string LedgerLockID = 520;

    // Coupons
    repeated string CouponIDs = 600;
    // Payment balances
    repeated order.middleware.payment.v1.PaymentBalanceReq PaymentBalances = 610;
    // Payment transfers
    repeated order.middleware.payment.v1.PaymentTransferReq PaymentTransfers = 620;
}

message PowerRentalOrder {
    // Base order information
    // @inject_tag: sql:"id"
    uint32 ID = 10;
    // @inject_tag: sql:"ent_id"
    string EntID = 20;
    // @inject_tag: sql:"app_id"
    string AppID = 30;
    // @inject_tag: sql:"user_id"
    string UserID = 40;
    // @inject_tag: sql:"good_id"
    string GoodID = 50;
    // @inject_tag: sql:"good_type"
    string GoodTypeStr = 60;
    basetypes.good.v1.GoodType GoodType = 70;
    // @inject_tag: sql:"app_good_id"
    string AppGoodID = 80;
    // @inject_tag: sql:"order_id"
    string OrderID = 90;
    // @inject_tag: sql:"parent_order_id"
    string ParentOrderID = 100;
    // @inject_tag: sql:"order_type"
    string OrderTypeStr = 110;
    basetypes.order.v1.OrderType OrderType = 120;
    // @inject_tag: sql:"payment_type"
    string PaymentTypeStr = 130;
    basetypes.order.v1.PaymentType PaymentType = 140;
    // @inject_tag: sql:"create_method"
    string CreateMethodStr = 150;
    basetypes.order.v1.OrderCreateMethod CreateMethod = 160;
    // @inject_tag: sql:"simulate"
    bool Simulate = 170;

    // Base order state information
    // @inject_tag: sql:"order_state"
    string OrderStateStr = 200;
    basetypes.order.v1.OrderState OrderState = 210;
    // @inject_tag: sql:"start_mode"
    string StartModeStr = 220;
    basetypes.order.v1.OrderStartMode StartMode = 230;
    // @inject_tag: sql:"start_at"
    uint32 StartAt = 240;
    // @inject_tag: sql:"last_benefit_at"
    uint32 LastBenefitAt = 250;
    // @inject_tag: sql:"benefit_state"
    string BenefitStateStr = 260;
    basetypes.order.v1.BenefitState BenefitState = 270;

    // Power rental information
    // @inject_tag: sql:"app_good_stock_id"
    string AppGoodStockID = 300;
    // @inject_tag: sql:"units"
    string Units = 310;
    // @inject_tag: sql:"good_value_usd"
    string GoodValueUSD = 320;
    // @inject_tag: sql:"payment_amount_usd"
    string PaymentAmountUSD = 330;
    // @inject_tag: sql:"discount_amount_usd"
    string DiscountAmountUSD = 340;
    // @inject_tag: sql:"promotion_id"
    string PromotionID = 350;
    // @inject_tag: sql:"duration_seconds"
    uint32 DurationSeconds = 360;
    // @inject_tag: sql:"investment_type"
    string InvestmentTypeStr = 370;
    basetypes.order.v1.InvestmentType InvestmentType = 380;

    // Power rental state information
    // @inject_tag: sql:"cancel_state"
    string CancelStateStr = 400;
    basetypes.order.v1.OrderState CancelState = 410;
    // Calculate with start at and duration seconds
    uint32 EndAt = 420;
    // @inject_tag: sql:"paid_at"
    uint32 PaidAt = 430;
    // @inject_tag: sql:"user_set_paid"
    bool UserSetPaid = 440;
    // @inject_tag: sql:"user_set_canceled"
    bool UserSetCanceled = 450;
    // @inject_tag: sql:"admin_set_canceled"
    bool AdminSetCanceled = 460;
    // @inject_tag: sql:"payment_state"
    string PaymentStateStr = 470;
    basetypes.order.v1.PaymentState PaymentState = 480;
    // @inject_tag: sql:"out_of_gas_hours"
    uint32 OutOfGasHours = 490;
    // @inject_tag: sql:"compensate_horus"
    uint32 CompensateHours = 500;
    // @inject_tag: sql:"renew_state"
    string RenewStateStr = 510;
    basetypes.order.v1.OrderRenewState RenewState = 520;
    // @inject_tag: sql:"renew_notify_at"
    uint32 RenewNotifyAt = 530;
    // @inject_tag: sql:"app_good_stock_lock_id"
    string AppGoodStockLockID = 540;
    // @inject_tag: sql:"ledger_lock_id"
    string LedgerLockID = 550;
    // @inject_tag: sql:"payment_id"
    string PaymentID = 560;
    // @inject_tag: sql:"payment_obselete_state"
    string PaymentObseleteStateStr = 570;
    basetypes.order.v1.PaymentObseleteState PaymentObseleteState = 580;

    // Coupons
    repeated order.middleware.order1.coupon.v1.OrderCouponInfo Coupons = 600;
    // Payment balances
    repeated order.middleware.payment.v1.PaymentBalanceInfo PaymentBalances = 610;
    // Payment transfers
    repeated order.middleware.payment.v1.PaymentTransferInfo PaymentTransfers = 620;
    // Fee duration infos
    repeated order.middleware.fee.v1.FeeDuration FeeDurations = 630;

    // @inject_tag: sql:"created_at"
    uint32 CreatedAt = 1000;
    // @inject_tag: sql:"updated_at"
    uint32 UpdatedAt = 1010;
}

message Conds {
    // order
    optional basetypes.v1.Uint32Val ID = 10;
    optional basetypes.v1.Uint32SliceVal IDs = 20;
    optional basetypes.v1.StringVal EntID = 30;
    optional basetypes.v1.StringSliceVal EntIDs = 40;
    optional basetypes.v1.StringVal AppID = 50;
    optional basetypes.v1.StringVal UserID = 60;
    optional basetypes.v1.StringVal GoodID = 70;
    optional basetypes.v1.StringSliceVal GoodIDs = 80;
    optional basetypes.v1.StringVal AppGoodID = 90;
    optional basetypes.v1.StringSliceVal AppGoodIDs = 100;
    optional basetypes.v1.StringVal OrderID = 110;
    optional basetypes.v1.StringSliceVal OrderIDs = 120;
    optional basetypes.v1.StringVal ParentOrderID = 130;
    optional basetypes.v1.StringSliceVal ParentOrderIDs = 140;
    optional basetypes.v1.Uint32Val OrderType = 150;
    optional basetypes.v1.Uint32Val PaymentType = 160;
    optional basetypes.v1.Uint32SliceVal PaymentTypes = 170;
    optional basetypes.v1.BoolVal Simulate = 180;

    // orderstate
    optional basetypes.v1.Uint32Val OrderState = 200;
    optional basetypes.v1.Uint32SliceVal OrderStates = 210;
    optional basetypes.v1.Uint32Val StartMode = 220;
    optional basetypes.v1.Uint32Val LastBenefitAt = 230;
    optional basetypes.v1.Uint32Val BenefitState = 240;

    // power rental
    optional basetypes.v1.BoolVal AdminSetCanceled = 300;
    optional basetypes.v1.BoolVal UserSetCanceled = 310;

    // power rental state
    optional basetypes.v1.Uint32Val RenewState = 400;
    optional basetypes.v1.Uint32Val RenewNotifyAt = 410;
    optional basetypes.v1.Uint32Val PaymentState = 420;
    optional basetypes.v1.Uint32SliceVal PaymentStates = 430;

    // coupon
    optional basetypes.v1.StringVal CouponID = 500;
    optional basetypes.v1.StringSliceVal CouponIDs = 510;

    // transaction id
    optional basetypes.v1.StringVal TransactionID = 600;
    optional basetypes.v1.StringSliceVal TransactionIDs = 610;

    // other
    optional basetypes.v1.Uint32Val CreatedAt = 700;
    optional basetypes.v1.Uint32Val UpdatedAt = 710;
    optional basetypes.v1.Uint32Val PaidAt = 720;
}

message CreatePowerRentalOrderRequest {
    PowerRentalOrderReq Info = 10;
}

message CreatePowerRentalOrderResponse {
    PowerRentalOrder Info = 10;
}

message CreatePowerRentalOrderWithFeesRequest {
    PowerRentalOrderReq PowerRentalOrder = 10;
    repeated order.middleware.fee.v1.FeeOrderReq FeeOrders = 20;
}

message CreatePowerRentalOrderWithFeesResponse {
}

message UpdatePowerRentalOrderRequest {
    PowerRentalOrderReq Info = 10;
}

message UpdatePowerRentalOrderResponse {
    PowerRentalOrder Info = 10;
}

message GetPowerRentalOrderRequest {
    string OrderID = 10;
}

message GetPowerRentalOrderResponse {
    PowerRentalOrder Info = 10;
}

message GetPowerRentalOrdersRequest {
    Conds Conds = 10;
    int32 Offset = 20;
    int32 Limit = 30;
}

message GetPowerRentalOrdersResponse {
    repeated PowerRentalOrder Infos = 10;
    uint32 Total = 20;
}

message ExistPowerRentalOrderRequest {
    string OrderID = 10;
}

message ExistPowerRentalOrderResponse {
    bool Info = 10;
}

message ExistPowerRentalOrderCondsRequest {
    Conds Conds = 10;
}

message ExistPowerRentalOrderCondsResponse {
    bool Info = 10;
}

message DeletePowerRentalOrderRequest {
    PowerRentalOrderReq Info = 10;
}

message DeletePowerRentalOrderResponse {
    PowerRentalOrder Info = 10;
}


