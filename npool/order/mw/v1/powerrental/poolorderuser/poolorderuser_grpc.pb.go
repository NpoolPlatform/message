// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/order/mw/v1/powerrental/poolorderuser/poolorderuser.proto

package poolorderuser

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Middleware_CreatePoolOrderUser_FullMethodName     = "/order.middleware.poolorderuser.v1.Middleware/CreatePoolOrderUser"
	Middleware_GetPoolOrderUser_FullMethodName        = "/order.middleware.poolorderuser.v1.Middleware/GetPoolOrderUser"
	Middleware_GetPoolOrderUsers_FullMethodName       = "/order.middleware.poolorderuser.v1.Middleware/GetPoolOrderUsers"
	Middleware_ExistPoolOrderUser_FullMethodName      = "/order.middleware.poolorderuser.v1.Middleware/ExistPoolOrderUser"
	Middleware_ExistPoolOrderUserConds_FullMethodName = "/order.middleware.poolorderuser.v1.Middleware/ExistPoolOrderUserConds"
	Middleware_DeletePoolOrderUser_FullMethodName     = "/order.middleware.poolorderuser.v1.Middleware/DeletePoolOrderUser"
)

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
	CreatePoolOrderUser(ctx context.Context, in *CreatePoolOrderUserRequest, opts ...grpc.CallOption) (*CreatePoolOrderUserResponse, error)
	GetPoolOrderUser(ctx context.Context, in *GetPoolOrderUserRequest, opts ...grpc.CallOption) (*GetPoolOrderUserResponse, error)
	GetPoolOrderUsers(ctx context.Context, in *GetPoolOrderUsersRequest, opts ...grpc.CallOption) (*GetPoolOrderUsersResponse, error)
	ExistPoolOrderUser(ctx context.Context, in *ExistPoolOrderUserRequest, opts ...grpc.CallOption) (*ExistPoolOrderUserResponse, error)
	ExistPoolOrderUserConds(ctx context.Context, in *ExistPoolOrderUserCondsRequest, opts ...grpc.CallOption) (*ExistPoolOrderUserCondsResponse, error)
	DeletePoolOrderUser(ctx context.Context, in *DeletePoolOrderUserRequest, opts ...grpc.CallOption) (*DeletePoolOrderUserResponse, error)
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) CreatePoolOrderUser(ctx context.Context, in *CreatePoolOrderUserRequest, opts ...grpc.CallOption) (*CreatePoolOrderUserResponse, error) {
	out := new(CreatePoolOrderUserResponse)
	err := c.cc.Invoke(ctx, Middleware_CreatePoolOrderUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetPoolOrderUser(ctx context.Context, in *GetPoolOrderUserRequest, opts ...grpc.CallOption) (*GetPoolOrderUserResponse, error) {
	out := new(GetPoolOrderUserResponse)
	err := c.cc.Invoke(ctx, Middleware_GetPoolOrderUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetPoolOrderUsers(ctx context.Context, in *GetPoolOrderUsersRequest, opts ...grpc.CallOption) (*GetPoolOrderUsersResponse, error) {
	out := new(GetPoolOrderUsersResponse)
	err := c.cc.Invoke(ctx, Middleware_GetPoolOrderUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ExistPoolOrderUser(ctx context.Context, in *ExistPoolOrderUserRequest, opts ...grpc.CallOption) (*ExistPoolOrderUserResponse, error) {
	out := new(ExistPoolOrderUserResponse)
	err := c.cc.Invoke(ctx, Middleware_ExistPoolOrderUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ExistPoolOrderUserConds(ctx context.Context, in *ExistPoolOrderUserCondsRequest, opts ...grpc.CallOption) (*ExistPoolOrderUserCondsResponse, error) {
	out := new(ExistPoolOrderUserCondsResponse)
	err := c.cc.Invoke(ctx, Middleware_ExistPoolOrderUserConds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) DeletePoolOrderUser(ctx context.Context, in *DeletePoolOrderUserRequest, opts ...grpc.CallOption) (*DeletePoolOrderUserResponse, error) {
	out := new(DeletePoolOrderUserResponse)
	err := c.cc.Invoke(ctx, Middleware_DeletePoolOrderUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
	CreatePoolOrderUser(context.Context, *CreatePoolOrderUserRequest) (*CreatePoolOrderUserResponse, error)
	GetPoolOrderUser(context.Context, *GetPoolOrderUserRequest) (*GetPoolOrderUserResponse, error)
	GetPoolOrderUsers(context.Context, *GetPoolOrderUsersRequest) (*GetPoolOrderUsersResponse, error)
	ExistPoolOrderUser(context.Context, *ExistPoolOrderUserRequest) (*ExistPoolOrderUserResponse, error)
	ExistPoolOrderUserConds(context.Context, *ExistPoolOrderUserCondsRequest) (*ExistPoolOrderUserCondsResponse, error)
	DeletePoolOrderUser(context.Context, *DeletePoolOrderUserRequest) (*DeletePoolOrderUserResponse, error)
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) CreatePoolOrderUser(context.Context, *CreatePoolOrderUserRequest) (*CreatePoolOrderUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePoolOrderUser not implemented")
}
func (UnimplementedMiddlewareServer) GetPoolOrderUser(context.Context, *GetPoolOrderUserRequest) (*GetPoolOrderUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPoolOrderUser not implemented")
}
func (UnimplementedMiddlewareServer) GetPoolOrderUsers(context.Context, *GetPoolOrderUsersRequest) (*GetPoolOrderUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPoolOrderUsers not implemented")
}
func (UnimplementedMiddlewareServer) ExistPoolOrderUser(context.Context, *ExistPoolOrderUserRequest) (*ExistPoolOrderUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistPoolOrderUser not implemented")
}
func (UnimplementedMiddlewareServer) ExistPoolOrderUserConds(context.Context, *ExistPoolOrderUserCondsRequest) (*ExistPoolOrderUserCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistPoolOrderUserConds not implemented")
}
func (UnimplementedMiddlewareServer) DeletePoolOrderUser(context.Context, *DeletePoolOrderUserRequest) (*DeletePoolOrderUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePoolOrderUser not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_CreatePoolOrderUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePoolOrderUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreatePoolOrderUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_CreatePoolOrderUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreatePoolOrderUser(ctx, req.(*CreatePoolOrderUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetPoolOrderUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPoolOrderUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetPoolOrderUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetPoolOrderUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetPoolOrderUser(ctx, req.(*GetPoolOrderUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetPoolOrderUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPoolOrderUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetPoolOrderUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetPoolOrderUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetPoolOrderUsers(ctx, req.(*GetPoolOrderUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ExistPoolOrderUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistPoolOrderUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ExistPoolOrderUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_ExistPoolOrderUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ExistPoolOrderUser(ctx, req.(*ExistPoolOrderUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ExistPoolOrderUserConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistPoolOrderUserCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ExistPoolOrderUserConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_ExistPoolOrderUserConds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ExistPoolOrderUserConds(ctx, req.(*ExistPoolOrderUserCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_DeletePoolOrderUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePoolOrderUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).DeletePoolOrderUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_DeletePoolOrderUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).DeletePoolOrderUser(ctx, req.(*DeletePoolOrderUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.middleware.poolorderuser.v1.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePoolOrderUser",
			Handler:    _Middleware_CreatePoolOrderUser_Handler,
		},
		{
			MethodName: "GetPoolOrderUser",
			Handler:    _Middleware_GetPoolOrderUser_Handler,
		},
		{
			MethodName: "GetPoolOrderUsers",
			Handler:    _Middleware_GetPoolOrderUsers_Handler,
		},
		{
			MethodName: "ExistPoolOrderUser",
			Handler:    _Middleware_ExistPoolOrderUser_Handler,
		},
		{
			MethodName: "ExistPoolOrderUserConds",
			Handler:    _Middleware_ExistPoolOrderUserConds_Handler,
		},
		{
			MethodName: "DeletePoolOrderUser",
			Handler:    _Middleware_DeletePoolOrderUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/order/mw/v1/powerrental/poolorderuser/poolorderuser.proto",
}
