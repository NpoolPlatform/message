// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.18.1
// source: npool/order/mw/v1/powerrental/powerrental.proto

package powerrental

import (
	v1 "github.com/NpoolPlatform/message/npool/basetypes/good/v1"
	v11 "github.com/NpoolPlatform/message/npool/basetypes/order/v1"
	v12 "github.com/NpoolPlatform/message/npool/basetypes/v1"
	fee "github.com/NpoolPlatform/message/npool/order/mw/v1/fee"
	coupon "github.com/NpoolPlatform/message/npool/order/mw/v1/order/coupon"
	payment "github.com/NpoolPlatform/message/npool/order/mw/v1/payment"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PowerRentalOrderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Order base
	ID           *uint32                `protobuf:"varint,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID        *string                `protobuf:"bytes,20,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	AppID        *string                `protobuf:"bytes,30,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	UserID       *string                `protobuf:"bytes,40,opt,name=UserID,proto3,oneof" json:"UserID,omitempty"`
	GoodID       *string                `protobuf:"bytes,50,opt,name=GoodID,proto3,oneof" json:"GoodID,omitempty"`
	GoodType     *v1.GoodType           `protobuf:"varint,60,opt,name=GoodType,proto3,enum=basetypes.good.v1.GoodType,oneof" json:"GoodType,omitempty"`
	AppGoodID    *string                `protobuf:"bytes,70,opt,name=AppGoodID,proto3,oneof" json:"AppGoodID,omitempty"`
	OrderID      *string                `protobuf:"bytes,80,opt,name=OrderID,proto3,oneof" json:"OrderID,omitempty"`
	OrderType    *v11.OrderType         `protobuf:"varint,100,opt,name=OrderType,proto3,enum=basetypes.order.v1.OrderType,oneof" json:"OrderType,omitempty"`
	PaymentType  *v11.PaymentType       `protobuf:"varint,110,opt,name=PaymentType,proto3,enum=basetypes.order.v1.PaymentType,oneof" json:"PaymentType,omitempty"`
	CreateMethod *v11.OrderCreateMethod `protobuf:"varint,120,opt,name=CreateMethod,proto3,enum=basetypes.order.v1.OrderCreateMethod,oneof" json:"CreateMethod,omitempty"`
	Simulate     *bool                  `protobuf:"varint,130,opt,name=Simulate,proto3,oneof" json:"Simulate,omitempty"`
	// Power rental
	AppGoodStockID    *string             `protobuf:"bytes,200,opt,name=AppGoodStockID,proto3,oneof" json:"AppGoodStockID,omitempty"`
	Units             *string             `protobuf:"bytes,210,opt,name=Units,proto3,oneof" json:"Units,omitempty"`
	GoodValueUSD      *string             `protobuf:"bytes,220,opt,name=GoodValueUSD,proto3,oneof" json:"GoodValueUSD,omitempty"`
	PaymentAmountUSD  *string             `protobuf:"bytes,230,opt,name=PaymentAmountUSD,proto3,oneof" json:"PaymentAmountUSD,omitempty"`
	DiscountAmountUSD *string             `protobuf:"bytes,240,opt,name=DiscountAmountUSD,proto3,oneof" json:"DiscountAmountUSD,omitempty"`
	PromotionID       *string             `protobuf:"bytes,250,opt,name=PromotionID,proto3,oneof" json:"PromotionID,omitempty"`
	DurationSeconds   *uint32             `protobuf:"varint,260,opt,name=DurationSeconds,proto3,oneof" json:"DurationSeconds,omitempty"`
	InvestmentType    *v11.InvestmentType `protobuf:"varint,270,opt,name=InvestmentType,proto3,enum=basetypes.order.v1.InvestmentType,oneof" json:"InvestmentType,omitempty"`
	// Order state base
	OrderState    *v11.OrderState     `protobuf:"varint,300,opt,name=OrderState,proto3,enum=basetypes.order.v1.OrderState,oneof" json:"OrderState,omitempty"`
	StartMode     *v11.OrderStartMode `protobuf:"varint,310,opt,name=StartMode,proto3,enum=basetypes.order.v1.OrderStartMode,oneof" json:"StartMode,omitempty"`
	StartAt       *uint32             `protobuf:"varint,320,opt,name=StartAt,proto3,oneof" json:"StartAt,omitempty"`
	LastBenefitAt *uint32             `protobuf:"varint,330,opt,name=LastBenefitAt,proto3,oneof" json:"LastBenefitAt,omitempty"`
	BenefitState  *v11.BenefitState   `protobuf:"varint,340,opt,name=BenefitState,proto3,enum=basetypes.order.v1.BenefitState,oneof" json:"BenefitState,omitempty"`
	// Power rental state
	// AppGoodStockID or AppMiningGoodStockID
	UserSetPaid      *bool                `protobuf:"varint,410,opt,name=UserSetPaid,proto3,oneof" json:"UserSetPaid,omitempty"`
	UserSetCanceled  *bool                `protobuf:"varint,420,opt,name=UserSetCanceled,proto3,oneof" json:"UserSetCanceled,omitempty"`
	AdminSetCanceled *bool                `protobuf:"varint,430,opt,name=AdminSetCanceled,proto3,oneof" json:"AdminSetCanceled,omitempty"`
	PaymentState     *v11.PaymentState    `protobuf:"varint,440,opt,name=PaymentState,proto3,enum=basetypes.order.v1.PaymentState,oneof" json:"PaymentState,omitempty"`
	RenewState       *v11.OrderRenewState `protobuf:"varint,450,opt,name=RenewState,proto3,enum=basetypes.order.v1.OrderRenewState,oneof" json:"RenewState,omitempty"`
	RenewNotifyAt    *uint32              `protobuf:"varint,460,opt,name=RenewNotifyAt,proto3,oneof" json:"RenewNotifyAt,omitempty"`
	// Work flow and lock
	Rollback           *bool   `protobuf:"varint,500,opt,name=Rollback,proto3,oneof" json:"Rollback,omitempty"`
	AppGoodStockLockID *string `protobuf:"bytes,510,opt,name=AppGoodStockLockID,proto3,oneof" json:"AppGoodStockLockID,omitempty"`
	LedgerLockID       *string `protobuf:"bytes,520,opt,name=LedgerLockID,proto3,oneof" json:"LedgerLockID,omitempty"`
	PaymentID          *string `protobuf:"bytes,530,opt,name=PaymentID,proto3,oneof" json:"PaymentID,omitempty"`
	// Coupons
	CouponIDs []string `protobuf:"bytes,600,rep,name=CouponIDs,proto3" json:"CouponIDs,omitempty"`
	// Payment balances
	PaymentBalances []*payment.PaymentBalanceReq `protobuf:"bytes,610,rep,name=PaymentBalances,proto3" json:"PaymentBalances,omitempty"`
	// Payment transfers
	PaymentTransfers []*payment.PaymentTransferReq `protobuf:"bytes,620,rep,name=PaymentTransfers,proto3" json:"PaymentTransfers,omitempty"`
}

func (x *PowerRentalOrderReq) Reset() {
	*x = PowerRentalOrderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerRentalOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerRentalOrderReq) ProtoMessage() {}

func (x *PowerRentalOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerRentalOrderReq.ProtoReflect.Descriptor instead.
func (*PowerRentalOrderReq) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{0}
}

func (x *PowerRentalOrderReq) GetID() uint32 {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return 0
}

func (x *PowerRentalOrderReq) GetEntID() string {
	if x != nil && x.EntID != nil {
		return *x.EntID
	}
	return ""
}

func (x *PowerRentalOrderReq) GetAppID() string {
	if x != nil && x.AppID != nil {
		return *x.AppID
	}
	return ""
}

func (x *PowerRentalOrderReq) GetUserID() string {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return ""
}

func (x *PowerRentalOrderReq) GetGoodID() string {
	if x != nil && x.GoodID != nil {
		return *x.GoodID
	}
	return ""
}

func (x *PowerRentalOrderReq) GetGoodType() v1.GoodType {
	if x != nil && x.GoodType != nil {
		return *x.GoodType
	}
	return v1.GoodType(0)
}

func (x *PowerRentalOrderReq) GetAppGoodID() string {
	if x != nil && x.AppGoodID != nil {
		return *x.AppGoodID
	}
	return ""
}

func (x *PowerRentalOrderReq) GetOrderID() string {
	if x != nil && x.OrderID != nil {
		return *x.OrderID
	}
	return ""
}

func (x *PowerRentalOrderReq) GetOrderType() v11.OrderType {
	if x != nil && x.OrderType != nil {
		return *x.OrderType
	}
	return v11.OrderType(0)
}

func (x *PowerRentalOrderReq) GetPaymentType() v11.PaymentType {
	if x != nil && x.PaymentType != nil {
		return *x.PaymentType
	}
	return v11.PaymentType(0)
}

func (x *PowerRentalOrderReq) GetCreateMethod() v11.OrderCreateMethod {
	if x != nil && x.CreateMethod != nil {
		return *x.CreateMethod
	}
	return v11.OrderCreateMethod(0)
}

func (x *PowerRentalOrderReq) GetSimulate() bool {
	if x != nil && x.Simulate != nil {
		return *x.Simulate
	}
	return false
}

func (x *PowerRentalOrderReq) GetAppGoodStockID() string {
	if x != nil && x.AppGoodStockID != nil {
		return *x.AppGoodStockID
	}
	return ""
}

func (x *PowerRentalOrderReq) GetUnits() string {
	if x != nil && x.Units != nil {
		return *x.Units
	}
	return ""
}

func (x *PowerRentalOrderReq) GetGoodValueUSD() string {
	if x != nil && x.GoodValueUSD != nil {
		return *x.GoodValueUSD
	}
	return ""
}

func (x *PowerRentalOrderReq) GetPaymentAmountUSD() string {
	if x != nil && x.PaymentAmountUSD != nil {
		return *x.PaymentAmountUSD
	}
	return ""
}

func (x *PowerRentalOrderReq) GetDiscountAmountUSD() string {
	if x != nil && x.DiscountAmountUSD != nil {
		return *x.DiscountAmountUSD
	}
	return ""
}

func (x *PowerRentalOrderReq) GetPromotionID() string {
	if x != nil && x.PromotionID != nil {
		return *x.PromotionID
	}
	return ""
}

func (x *PowerRentalOrderReq) GetDurationSeconds() uint32 {
	if x != nil && x.DurationSeconds != nil {
		return *x.DurationSeconds
	}
	return 0
}

func (x *PowerRentalOrderReq) GetInvestmentType() v11.InvestmentType {
	if x != nil && x.InvestmentType != nil {
		return *x.InvestmentType
	}
	return v11.InvestmentType(0)
}

func (x *PowerRentalOrderReq) GetOrderState() v11.OrderState {
	if x != nil && x.OrderState != nil {
		return *x.OrderState
	}
	return v11.OrderState(0)
}

func (x *PowerRentalOrderReq) GetStartMode() v11.OrderStartMode {
	if x != nil && x.StartMode != nil {
		return *x.StartMode
	}
	return v11.OrderStartMode(0)
}

func (x *PowerRentalOrderReq) GetStartAt() uint32 {
	if x != nil && x.StartAt != nil {
		return *x.StartAt
	}
	return 0
}

func (x *PowerRentalOrderReq) GetLastBenefitAt() uint32 {
	if x != nil && x.LastBenefitAt != nil {
		return *x.LastBenefitAt
	}
	return 0
}

func (x *PowerRentalOrderReq) GetBenefitState() v11.BenefitState {
	if x != nil && x.BenefitState != nil {
		return *x.BenefitState
	}
	return v11.BenefitState(0)
}

func (x *PowerRentalOrderReq) GetUserSetPaid() bool {
	if x != nil && x.UserSetPaid != nil {
		return *x.UserSetPaid
	}
	return false
}

func (x *PowerRentalOrderReq) GetUserSetCanceled() bool {
	if x != nil && x.UserSetCanceled != nil {
		return *x.UserSetCanceled
	}
	return false
}

func (x *PowerRentalOrderReq) GetAdminSetCanceled() bool {
	if x != nil && x.AdminSetCanceled != nil {
		return *x.AdminSetCanceled
	}
	return false
}

func (x *PowerRentalOrderReq) GetPaymentState() v11.PaymentState {
	if x != nil && x.PaymentState != nil {
		return *x.PaymentState
	}
	return v11.PaymentState(0)
}

func (x *PowerRentalOrderReq) GetRenewState() v11.OrderRenewState {
	if x != nil && x.RenewState != nil {
		return *x.RenewState
	}
	return v11.OrderRenewState(0)
}

func (x *PowerRentalOrderReq) GetRenewNotifyAt() uint32 {
	if x != nil && x.RenewNotifyAt != nil {
		return *x.RenewNotifyAt
	}
	return 0
}

func (x *PowerRentalOrderReq) GetRollback() bool {
	if x != nil && x.Rollback != nil {
		return *x.Rollback
	}
	return false
}

func (x *PowerRentalOrderReq) GetAppGoodStockLockID() string {
	if x != nil && x.AppGoodStockLockID != nil {
		return *x.AppGoodStockLockID
	}
	return ""
}

func (x *PowerRentalOrderReq) GetLedgerLockID() string {
	if x != nil && x.LedgerLockID != nil {
		return *x.LedgerLockID
	}
	return ""
}

func (x *PowerRentalOrderReq) GetPaymentID() string {
	if x != nil && x.PaymentID != nil {
		return *x.PaymentID
	}
	return ""
}

func (x *PowerRentalOrderReq) GetCouponIDs() []string {
	if x != nil {
		return x.CouponIDs
	}
	return nil
}

func (x *PowerRentalOrderReq) GetPaymentBalances() []*payment.PaymentBalanceReq {
	if x != nil {
		return x.PaymentBalances
	}
	return nil
}

func (x *PowerRentalOrderReq) GetPaymentTransfers() []*payment.PaymentTransferReq {
	if x != nil {
		return x.PaymentTransfers
	}
	return nil
}

type PowerRentalOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Base order information
	// @inject_tag: sql:"id"
	ID uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty" sql:"id"`
	// @inject_tag: sql:"ent_id"
	EntID string `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty" sql:"ent_id"`
	// @inject_tag: sql:"app_id"
	AppID string `protobuf:"bytes,30,opt,name=AppID,proto3" json:"AppID,omitempty" sql:"app_id"`
	// @inject_tag: sql:"user_id"
	UserID string `protobuf:"bytes,40,opt,name=UserID,proto3" json:"UserID,omitempty" sql:"user_id"`
	// @inject_tag: sql:"good_id"
	GoodID string `protobuf:"bytes,50,opt,name=GoodID,proto3" json:"GoodID,omitempty" sql:"good_id"`
	// @inject_tag: sql:"good_type"
	GoodTypeStr string      `protobuf:"bytes,60,opt,name=GoodTypeStr,proto3" json:"GoodTypeStr,omitempty" sql:"good_type"`
	GoodType    v1.GoodType `protobuf:"varint,70,opt,name=GoodType,proto3,enum=basetypes.good.v1.GoodType" json:"GoodType,omitempty"`
	// @inject_tag: sql:"app_good_id"
	AppGoodID string `protobuf:"bytes,80,opt,name=AppGoodID,proto3" json:"AppGoodID,omitempty" sql:"app_good_id"`
	// @inject_tag: sql:"order_id"
	OrderID string `protobuf:"bytes,90,opt,name=OrderID,proto3" json:"OrderID,omitempty" sql:"order_id"`
	// @inject_tag: sql:"order_type"
	OrderTypeStr string        `protobuf:"bytes,110,opt,name=OrderTypeStr,proto3" json:"OrderTypeStr,omitempty" sql:"order_type"`
	OrderType    v11.OrderType `protobuf:"varint,120,opt,name=OrderType,proto3,enum=basetypes.order.v1.OrderType" json:"OrderType,omitempty"`
	// @inject_tag: sql:"payment_type"
	PaymentTypeStr string          `protobuf:"bytes,130,opt,name=PaymentTypeStr,proto3" json:"PaymentTypeStr,omitempty" sql:"payment_type"`
	PaymentType    v11.PaymentType `protobuf:"varint,140,opt,name=PaymentType,proto3,enum=basetypes.order.v1.PaymentType" json:"PaymentType,omitempty"`
	// @inject_tag: sql:"create_method"
	CreateMethodStr string                `protobuf:"bytes,150,opt,name=CreateMethodStr,proto3" json:"CreateMethodStr,omitempty" sql:"create_method"`
	CreateMethod    v11.OrderCreateMethod `protobuf:"varint,160,opt,name=CreateMethod,proto3,enum=basetypes.order.v1.OrderCreateMethod" json:"CreateMethod,omitempty"`
	// @inject_tag: sql:"simulate"
	Simulate bool `protobuf:"varint,170,opt,name=Simulate,proto3" json:"Simulate,omitempty" sql:"simulate"`
	// Base order state information
	// @inject_tag: sql:"order_state"
	OrderStateStr string         `protobuf:"bytes,200,opt,name=OrderStateStr,proto3" json:"OrderStateStr,omitempty" sql:"order_state"`
	OrderState    v11.OrderState `protobuf:"varint,210,opt,name=OrderState,proto3,enum=basetypes.order.v1.OrderState" json:"OrderState,omitempty"`
	// @inject_tag: sql:"start_mode"
	StartModeStr string             `protobuf:"bytes,220,opt,name=StartModeStr,proto3" json:"StartModeStr,omitempty" sql:"start_mode"`
	StartMode    v11.OrderStartMode `protobuf:"varint,230,opt,name=StartMode,proto3,enum=basetypes.order.v1.OrderStartMode" json:"StartMode,omitempty"`
	// @inject_tag: sql:"start_at"
	StartAt uint32 `protobuf:"varint,240,opt,name=StartAt,proto3" json:"StartAt,omitempty" sql:"start_at"`
	// @inject_tag: sql:"last_benefit_at"
	LastBenefitAt uint32 `protobuf:"varint,250,opt,name=LastBenefitAt,proto3" json:"LastBenefitAt,omitempty" sql:"last_benefit_at"`
	// @inject_tag: sql:"benefit_state"
	BenefitStateStr string           `protobuf:"bytes,260,opt,name=BenefitStateStr,proto3" json:"BenefitStateStr,omitempty" sql:"benefit_state"`
	BenefitState    v11.BenefitState `protobuf:"varint,270,opt,name=BenefitState,proto3,enum=basetypes.order.v1.BenefitState" json:"BenefitState,omitempty"`
	// Power rental information
	// @inject_tag: sql:"app_good_stock_id"
	AppGoodStockID string `protobuf:"bytes,300,opt,name=AppGoodStockID,proto3" json:"AppGoodStockID,omitempty" sql:"app_good_stock_id"`
	// @inject_tag: sql:"units"
	Units string `protobuf:"bytes,310,opt,name=Units,proto3" json:"Units,omitempty" sql:"units"`
	// @inject_tag: sql:"good_value_usd"
	GoodValueUSD string `protobuf:"bytes,320,opt,name=GoodValueUSD,proto3" json:"GoodValueUSD,omitempty" sql:"good_value_usd"`
	// @inject_tag: sql:"payment_amount_usd"
	PaymentAmountUSD string `protobuf:"bytes,330,opt,name=PaymentAmountUSD,proto3" json:"PaymentAmountUSD,omitempty" sql:"payment_amount_usd"`
	// @inject_tag: sql:"discount_amount_usd"
	DiscountAmountUSD string `protobuf:"bytes,340,opt,name=DiscountAmountUSD,proto3" json:"DiscountAmountUSD,omitempty" sql:"discount_amount_usd"`
	// @inject_tag: sql:"promotion_id"
	PromotionID string `protobuf:"bytes,350,opt,name=PromotionID,proto3" json:"PromotionID,omitempty" sql:"promotion_id"`
	// @inject_tag: sql:"duration_seconds"
	DurationSeconds uint32 `protobuf:"varint,360,opt,name=DurationSeconds,proto3" json:"DurationSeconds,omitempty" sql:"duration_seconds"`
	// @inject_tag: sql:"investment_type"
	InvestmentTypeStr string             `protobuf:"bytes,370,opt,name=InvestmentTypeStr,proto3" json:"InvestmentTypeStr,omitempty" sql:"investment_type"`
	InvestmentType    v11.InvestmentType `protobuf:"varint,380,opt,name=InvestmentType,proto3,enum=basetypes.order.v1.InvestmentType" json:"InvestmentType,omitempty"`
	// Power rental state information
	// @inject_tag: sql:"cancel_state"
	CancelStateStr string         `protobuf:"bytes,400,opt,name=CancelStateStr,proto3" json:"CancelStateStr,omitempty" sql:"cancel_state"`
	CancelState    v11.OrderState `protobuf:"varint,410,opt,name=CancelState,proto3,enum=basetypes.order.v1.OrderState" json:"CancelState,omitempty"`
	// @inject_tag: sql:"canceled_at"
	CanceledAt uint32 `protobuf:"varint,420,opt,name=CanceledAt,proto3" json:"CanceledAt,omitempty" sql:"canceled_at"`
	// Calculate with start at and duration seconds
	EndAt uint32 `protobuf:"varint,430,opt,name=EndAt,proto3" json:"EndAt,omitempty"`
	// @inject_tag: sql:"paid_at"
	PaidAt uint32 `protobuf:"varint,440,opt,name=PaidAt,proto3" json:"PaidAt,omitempty" sql:"paid_at"`
	// @inject_tag: sql:"user_set_paid"
	UserSetPaid bool `protobuf:"varint,450,opt,name=UserSetPaid,proto3" json:"UserSetPaid,omitempty" sql:"user_set_paid"`
	// @inject_tag: sql:"user_set_canceled"
	UserSetCanceled bool `protobuf:"varint,460,opt,name=UserSetCanceled,proto3" json:"UserSetCanceled,omitempty" sql:"user_set_canceled"`
	// @inject_tag: sql:"admin_set_canceled"
	AdminSetCanceled bool `protobuf:"varint,470,opt,name=AdminSetCanceled,proto3" json:"AdminSetCanceled,omitempty" sql:"admin_set_canceled"`
	// @inject_tag: sql:"payment_state"
	PaymentStateStr string           `protobuf:"bytes,480,opt,name=PaymentStateStr,proto3" json:"PaymentStateStr,omitempty" sql:"payment_state"`
	PaymentState    v11.PaymentState `protobuf:"varint,490,opt,name=PaymentState,proto3,enum=basetypes.order.v1.PaymentState" json:"PaymentState,omitempty"`
	// @inject_tag: sql:"outofgas_seconds"
	OutOfGasSeconds uint32 `protobuf:"varint,500,opt,name=OutOfGasSeconds,proto3" json:"OutOfGasSeconds,omitempty" sql:"outofgas_seconds"`
	// @inject_tag: sql:"compensate_seconds"
	CompensateSeconds uint32 `protobuf:"varint,510,opt,name=CompensateSeconds,proto3" json:"CompensateSeconds,omitempty" sql:"compensate_seconds"`
	// @inject_tag: sql:"renew_state"
	RenewStateStr string              `protobuf:"bytes,520,opt,name=RenewStateStr,proto3" json:"RenewStateStr,omitempty" sql:"renew_state"`
	RenewState    v11.OrderRenewState `protobuf:"varint,530,opt,name=RenewState,proto3,enum=basetypes.order.v1.OrderRenewState" json:"RenewState,omitempty"`
	// @inject_tag: sql:"renew_notify_at"
	RenewNotifyAt uint32 `protobuf:"varint,540,opt,name=RenewNotifyAt,proto3" json:"RenewNotifyAt,omitempty" sql:"renew_notify_at"`
	// @inject_tag: sql:"app_good_stock_lock_id"
	AppGoodStockLockID string `protobuf:"bytes,550,opt,name=AppGoodStockLockID,proto3" json:"AppGoodStockLockID,omitempty" sql:"app_good_stock_lock_id"`
	// @inject_tag: sql:"ledger_lock_id"
	LedgerLockID string `protobuf:"bytes,560,opt,name=LedgerLockID,proto3" json:"LedgerLockID,omitempty" sql:"ledger_lock_id"`
	// @inject_tag: sql:"payment_id"
	PaymentID string `protobuf:"bytes,570,opt,name=PaymentID,proto3" json:"PaymentID,omitempty" sql:"payment_id"`
	// @inject_tag: sql:"payment_obselete_state"
	PaymentObseleteStateStr string                   `protobuf:"bytes,580,opt,name=PaymentObseleteStateStr,proto3" json:"PaymentObseleteStateStr,omitempty" sql:"payment_obselete_state"`
	PaymentObseleteState    v11.PaymentObseleteState `protobuf:"varint,590,opt,name=PaymentObseleteState,proto3,enum=basetypes.order.v1.PaymentObseleteState" json:"PaymentObseleteState,omitempty"`
	// Coupons
	Coupons []*coupon.OrderCouponInfo `protobuf:"bytes,600,rep,name=Coupons,proto3" json:"Coupons,omitempty"`
	// Payment balances
	PaymentBalances []*payment.PaymentBalanceInfo `protobuf:"bytes,610,rep,name=PaymentBalances,proto3" json:"PaymentBalances,omitempty"`
	// Payment transfers
	PaymentTransfers []*payment.PaymentTransferInfo `protobuf:"bytes,620,rep,name=PaymentTransfers,proto3" json:"PaymentTransfers,omitempty"`
	// Fee duration infos
	FeeDurations []*fee.FeeDuration `protobuf:"bytes,630,rep,name=FeeDurations,proto3" json:"FeeDurations,omitempty"`
	// @inject_tag: sql:"created_at"
	CreatedAt uint32 `protobuf:"varint,1000,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
	// @inject_tag: sql:"updated_at"
	UpdatedAt uint32 `protobuf:"varint,1010,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty" sql:"updated_at"`
}

func (x *PowerRentalOrder) Reset() {
	*x = PowerRentalOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerRentalOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerRentalOrder) ProtoMessage() {}

func (x *PowerRentalOrder) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerRentalOrder.ProtoReflect.Descriptor instead.
func (*PowerRentalOrder) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{1}
}

func (x *PowerRentalOrder) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *PowerRentalOrder) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *PowerRentalOrder) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *PowerRentalOrder) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *PowerRentalOrder) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *PowerRentalOrder) GetGoodTypeStr() string {
	if x != nil {
		return x.GoodTypeStr
	}
	return ""
}

func (x *PowerRentalOrder) GetGoodType() v1.GoodType {
	if x != nil {
		return x.GoodType
	}
	return v1.GoodType(0)
}

func (x *PowerRentalOrder) GetAppGoodID() string {
	if x != nil {
		return x.AppGoodID
	}
	return ""
}

func (x *PowerRentalOrder) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

func (x *PowerRentalOrder) GetOrderTypeStr() string {
	if x != nil {
		return x.OrderTypeStr
	}
	return ""
}

func (x *PowerRentalOrder) GetOrderType() v11.OrderType {
	if x != nil {
		return x.OrderType
	}
	return v11.OrderType(0)
}

func (x *PowerRentalOrder) GetPaymentTypeStr() string {
	if x != nil {
		return x.PaymentTypeStr
	}
	return ""
}

func (x *PowerRentalOrder) GetPaymentType() v11.PaymentType {
	if x != nil {
		return x.PaymentType
	}
	return v11.PaymentType(0)
}

func (x *PowerRentalOrder) GetCreateMethodStr() string {
	if x != nil {
		return x.CreateMethodStr
	}
	return ""
}

func (x *PowerRentalOrder) GetCreateMethod() v11.OrderCreateMethod {
	if x != nil {
		return x.CreateMethod
	}
	return v11.OrderCreateMethod(0)
}

func (x *PowerRentalOrder) GetSimulate() bool {
	if x != nil {
		return x.Simulate
	}
	return false
}

func (x *PowerRentalOrder) GetOrderStateStr() string {
	if x != nil {
		return x.OrderStateStr
	}
	return ""
}

func (x *PowerRentalOrder) GetOrderState() v11.OrderState {
	if x != nil {
		return x.OrderState
	}
	return v11.OrderState(0)
}

func (x *PowerRentalOrder) GetStartModeStr() string {
	if x != nil {
		return x.StartModeStr
	}
	return ""
}

func (x *PowerRentalOrder) GetStartMode() v11.OrderStartMode {
	if x != nil {
		return x.StartMode
	}
	return v11.OrderStartMode(0)
}

func (x *PowerRentalOrder) GetStartAt() uint32 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *PowerRentalOrder) GetLastBenefitAt() uint32 {
	if x != nil {
		return x.LastBenefitAt
	}
	return 0
}

func (x *PowerRentalOrder) GetBenefitStateStr() string {
	if x != nil {
		return x.BenefitStateStr
	}
	return ""
}

func (x *PowerRentalOrder) GetBenefitState() v11.BenefitState {
	if x != nil {
		return x.BenefitState
	}
	return v11.BenefitState(0)
}

func (x *PowerRentalOrder) GetAppGoodStockID() string {
	if x != nil {
		return x.AppGoodStockID
	}
	return ""
}

func (x *PowerRentalOrder) GetUnits() string {
	if x != nil {
		return x.Units
	}
	return ""
}

func (x *PowerRentalOrder) GetGoodValueUSD() string {
	if x != nil {
		return x.GoodValueUSD
	}
	return ""
}

func (x *PowerRentalOrder) GetPaymentAmountUSD() string {
	if x != nil {
		return x.PaymentAmountUSD
	}
	return ""
}

func (x *PowerRentalOrder) GetDiscountAmountUSD() string {
	if x != nil {
		return x.DiscountAmountUSD
	}
	return ""
}

func (x *PowerRentalOrder) GetPromotionID() string {
	if x != nil {
		return x.PromotionID
	}
	return ""
}

func (x *PowerRentalOrder) GetDurationSeconds() uint32 {
	if x != nil {
		return x.DurationSeconds
	}
	return 0
}

func (x *PowerRentalOrder) GetInvestmentTypeStr() string {
	if x != nil {
		return x.InvestmentTypeStr
	}
	return ""
}

func (x *PowerRentalOrder) GetInvestmentType() v11.InvestmentType {
	if x != nil {
		return x.InvestmentType
	}
	return v11.InvestmentType(0)
}

func (x *PowerRentalOrder) GetCancelStateStr() string {
	if x != nil {
		return x.CancelStateStr
	}
	return ""
}

func (x *PowerRentalOrder) GetCancelState() v11.OrderState {
	if x != nil {
		return x.CancelState
	}
	return v11.OrderState(0)
}

func (x *PowerRentalOrder) GetCanceledAt() uint32 {
	if x != nil {
		return x.CanceledAt
	}
	return 0
}

func (x *PowerRentalOrder) GetEndAt() uint32 {
	if x != nil {
		return x.EndAt
	}
	return 0
}

func (x *PowerRentalOrder) GetPaidAt() uint32 {
	if x != nil {
		return x.PaidAt
	}
	return 0
}

func (x *PowerRentalOrder) GetUserSetPaid() bool {
	if x != nil {
		return x.UserSetPaid
	}
	return false
}

func (x *PowerRentalOrder) GetUserSetCanceled() bool {
	if x != nil {
		return x.UserSetCanceled
	}
	return false
}

func (x *PowerRentalOrder) GetAdminSetCanceled() bool {
	if x != nil {
		return x.AdminSetCanceled
	}
	return false
}

func (x *PowerRentalOrder) GetPaymentStateStr() string {
	if x != nil {
		return x.PaymentStateStr
	}
	return ""
}

func (x *PowerRentalOrder) GetPaymentState() v11.PaymentState {
	if x != nil {
		return x.PaymentState
	}
	return v11.PaymentState(0)
}

func (x *PowerRentalOrder) GetOutOfGasSeconds() uint32 {
	if x != nil {
		return x.OutOfGasSeconds
	}
	return 0
}

func (x *PowerRentalOrder) GetCompensateSeconds() uint32 {
	if x != nil {
		return x.CompensateSeconds
	}
	return 0
}

func (x *PowerRentalOrder) GetRenewStateStr() string {
	if x != nil {
		return x.RenewStateStr
	}
	return ""
}

func (x *PowerRentalOrder) GetRenewState() v11.OrderRenewState {
	if x != nil {
		return x.RenewState
	}
	return v11.OrderRenewState(0)
}

func (x *PowerRentalOrder) GetRenewNotifyAt() uint32 {
	if x != nil {
		return x.RenewNotifyAt
	}
	return 0
}

func (x *PowerRentalOrder) GetAppGoodStockLockID() string {
	if x != nil {
		return x.AppGoodStockLockID
	}
	return ""
}

func (x *PowerRentalOrder) GetLedgerLockID() string {
	if x != nil {
		return x.LedgerLockID
	}
	return ""
}

func (x *PowerRentalOrder) GetPaymentID() string {
	if x != nil {
		return x.PaymentID
	}
	return ""
}

func (x *PowerRentalOrder) GetPaymentObseleteStateStr() string {
	if x != nil {
		return x.PaymentObseleteStateStr
	}
	return ""
}

func (x *PowerRentalOrder) GetPaymentObseleteState() v11.PaymentObseleteState {
	if x != nil {
		return x.PaymentObseleteState
	}
	return v11.PaymentObseleteState(0)
}

func (x *PowerRentalOrder) GetCoupons() []*coupon.OrderCouponInfo {
	if x != nil {
		return x.Coupons
	}
	return nil
}

func (x *PowerRentalOrder) GetPaymentBalances() []*payment.PaymentBalanceInfo {
	if x != nil {
		return x.PaymentBalances
	}
	return nil
}

func (x *PowerRentalOrder) GetPaymentTransfers() []*payment.PaymentTransferInfo {
	if x != nil {
		return x.PaymentTransfers
	}
	return nil
}

func (x *PowerRentalOrder) GetFeeDurations() []*fee.FeeDuration {
	if x != nil {
		return x.FeeDurations
	}
	return nil
}

func (x *PowerRentalOrder) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *PowerRentalOrder) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// order
	ID           *v12.Uint32Val      `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	IDs          *v12.Uint32SliceVal `protobuf:"bytes,20,opt,name=IDs,proto3,oneof" json:"IDs,omitempty"`
	EntID        *v12.StringVal      `protobuf:"bytes,30,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	EntIDs       *v12.StringSliceVal `protobuf:"bytes,40,opt,name=EntIDs,proto3,oneof" json:"EntIDs,omitempty"`
	AppID        *v12.StringVal      `protobuf:"bytes,50,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	UserID       *v12.StringVal      `protobuf:"bytes,60,opt,name=UserID,proto3,oneof" json:"UserID,omitempty"`
	GoodID       *v12.StringVal      `protobuf:"bytes,70,opt,name=GoodID,proto3,oneof" json:"GoodID,omitempty"`
	GoodIDs      *v12.StringSliceVal `protobuf:"bytes,80,opt,name=GoodIDs,proto3,oneof" json:"GoodIDs,omitempty"`
	AppGoodID    *v12.StringVal      `protobuf:"bytes,90,opt,name=AppGoodID,proto3,oneof" json:"AppGoodID,omitempty"`
	AppGoodIDs   *v12.StringSliceVal `protobuf:"bytes,100,opt,name=AppGoodIDs,proto3,oneof" json:"AppGoodIDs,omitempty"`
	OrderID      *v12.StringVal      `protobuf:"bytes,110,opt,name=OrderID,proto3,oneof" json:"OrderID,omitempty"`
	OrderIDs     *v12.StringSliceVal `protobuf:"bytes,120,opt,name=OrderIDs,proto3,oneof" json:"OrderIDs,omitempty"`
	OrderType    *v12.Uint32Val      `protobuf:"bytes,150,opt,name=OrderType,proto3,oneof" json:"OrderType,omitempty"`
	PaymentType  *v12.Uint32Val      `protobuf:"bytes,160,opt,name=PaymentType,proto3,oneof" json:"PaymentType,omitempty"`
	PaymentTypes *v12.Uint32SliceVal `protobuf:"bytes,170,opt,name=PaymentTypes,proto3,oneof" json:"PaymentTypes,omitempty"`
	Simulate     *v12.BoolVal        `protobuf:"bytes,180,opt,name=Simulate,proto3,oneof" json:"Simulate,omitempty"`
	OrderTypes   *v12.Uint32SliceVal `protobuf:"bytes,190,opt,name=OrderTypes,proto3,oneof" json:"OrderTypes,omitempty"`
	// orderstate
	OrderState    *v12.Uint32Val      `protobuf:"bytes,200,opt,name=OrderState,proto3,oneof" json:"OrderState,omitempty"`
	OrderStates   *v12.Uint32SliceVal `protobuf:"bytes,210,opt,name=OrderStates,proto3,oneof" json:"OrderStates,omitempty"`
	StartMode     *v12.Uint32Val      `protobuf:"bytes,220,opt,name=StartMode,proto3,oneof" json:"StartMode,omitempty"`
	LastBenefitAt *v12.Uint32Val      `protobuf:"bytes,230,opt,name=LastBenefitAt,proto3,oneof" json:"LastBenefitAt,omitempty"`
	BenefitState  *v12.Uint32Val      `protobuf:"bytes,240,opt,name=BenefitState,proto3,oneof" json:"BenefitState,omitempty"`
	// power rental
	AdminSetCanceled *v12.BoolVal `protobuf:"bytes,300,opt,name=AdminSetCanceled,proto3,oneof" json:"AdminSetCanceled,omitempty"`
	UserSetCanceled  *v12.BoolVal `protobuf:"bytes,310,opt,name=UserSetCanceled,proto3,oneof" json:"UserSetCanceled,omitempty"`
	// power rental state
	RenewState    *v12.Uint32Val      `protobuf:"bytes,400,opt,name=RenewState,proto3,oneof" json:"RenewState,omitempty"`
	RenewNotifyAt *v12.Uint32Val      `protobuf:"bytes,410,opt,name=RenewNotifyAt,proto3,oneof" json:"RenewNotifyAt,omitempty"`
	PaymentState  *v12.Uint32Val      `protobuf:"bytes,420,opt,name=PaymentState,proto3,oneof" json:"PaymentState,omitempty"`
	PaymentStates *v12.Uint32SliceVal `protobuf:"bytes,430,opt,name=PaymentStates,proto3,oneof" json:"PaymentStates,omitempty"`
	// coupon
	CouponID  *v12.StringVal      `protobuf:"bytes,500,opt,name=CouponID,proto3,oneof" json:"CouponID,omitempty"`
	CouponIDs *v12.StringSliceVal `protobuf:"bytes,510,opt,name=CouponIDs,proto3,oneof" json:"CouponIDs,omitempty"`
	// transaction id
	TransactionID  *v12.StringVal      `protobuf:"bytes,600,opt,name=TransactionID,proto3,oneof" json:"TransactionID,omitempty"`
	TransactionIDs *v12.StringSliceVal `protobuf:"bytes,610,opt,name=TransactionIDs,proto3,oneof" json:"TransactionIDs,omitempty"`
	// other
	CreatedAt *v12.Uint32Val `protobuf:"bytes,700,opt,name=CreatedAt,proto3,oneof" json:"CreatedAt,omitempty"`
	UpdatedAt *v12.Uint32Val `protobuf:"bytes,710,opt,name=UpdatedAt,proto3,oneof" json:"UpdatedAt,omitempty"`
	PaidAt    *v12.Uint32Val `protobuf:"bytes,720,opt,name=PaidAt,proto3,oneof" json:"PaidAt,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *v12.Uint32Val {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetIDs() *v12.Uint32SliceVal {
	if x != nil {
		return x.IDs
	}
	return nil
}

func (x *Conds) GetEntID() *v12.StringVal {
	if x != nil {
		return x.EntID
	}
	return nil
}

func (x *Conds) GetEntIDs() *v12.StringSliceVal {
	if x != nil {
		return x.EntIDs
	}
	return nil
}

func (x *Conds) GetAppID() *v12.StringVal {
	if x != nil {
		return x.AppID
	}
	return nil
}

func (x *Conds) GetUserID() *v12.StringVal {
	if x != nil {
		return x.UserID
	}
	return nil
}

func (x *Conds) GetGoodID() *v12.StringVal {
	if x != nil {
		return x.GoodID
	}
	return nil
}

func (x *Conds) GetGoodIDs() *v12.StringSliceVal {
	if x != nil {
		return x.GoodIDs
	}
	return nil
}

func (x *Conds) GetAppGoodID() *v12.StringVal {
	if x != nil {
		return x.AppGoodID
	}
	return nil
}

func (x *Conds) GetAppGoodIDs() *v12.StringSliceVal {
	if x != nil {
		return x.AppGoodIDs
	}
	return nil
}

func (x *Conds) GetOrderID() *v12.StringVal {
	if x != nil {
		return x.OrderID
	}
	return nil
}

func (x *Conds) GetOrderIDs() *v12.StringSliceVal {
	if x != nil {
		return x.OrderIDs
	}
	return nil
}

func (x *Conds) GetOrderType() *v12.Uint32Val {
	if x != nil {
		return x.OrderType
	}
	return nil
}

func (x *Conds) GetPaymentType() *v12.Uint32Val {
	if x != nil {
		return x.PaymentType
	}
	return nil
}

func (x *Conds) GetPaymentTypes() *v12.Uint32SliceVal {
	if x != nil {
		return x.PaymentTypes
	}
	return nil
}

func (x *Conds) GetSimulate() *v12.BoolVal {
	if x != nil {
		return x.Simulate
	}
	return nil
}

func (x *Conds) GetOrderTypes() *v12.Uint32SliceVal {
	if x != nil {
		return x.OrderTypes
	}
	return nil
}

func (x *Conds) GetOrderState() *v12.Uint32Val {
	if x != nil {
		return x.OrderState
	}
	return nil
}

func (x *Conds) GetOrderStates() *v12.Uint32SliceVal {
	if x != nil {
		return x.OrderStates
	}
	return nil
}

func (x *Conds) GetStartMode() *v12.Uint32Val {
	if x != nil {
		return x.StartMode
	}
	return nil
}

func (x *Conds) GetLastBenefitAt() *v12.Uint32Val {
	if x != nil {
		return x.LastBenefitAt
	}
	return nil
}

func (x *Conds) GetBenefitState() *v12.Uint32Val {
	if x != nil {
		return x.BenefitState
	}
	return nil
}

func (x *Conds) GetAdminSetCanceled() *v12.BoolVal {
	if x != nil {
		return x.AdminSetCanceled
	}
	return nil
}

func (x *Conds) GetUserSetCanceled() *v12.BoolVal {
	if x != nil {
		return x.UserSetCanceled
	}
	return nil
}

func (x *Conds) GetRenewState() *v12.Uint32Val {
	if x != nil {
		return x.RenewState
	}
	return nil
}

func (x *Conds) GetRenewNotifyAt() *v12.Uint32Val {
	if x != nil {
		return x.RenewNotifyAt
	}
	return nil
}

func (x *Conds) GetPaymentState() *v12.Uint32Val {
	if x != nil {
		return x.PaymentState
	}
	return nil
}

func (x *Conds) GetPaymentStates() *v12.Uint32SliceVal {
	if x != nil {
		return x.PaymentStates
	}
	return nil
}

func (x *Conds) GetCouponID() *v12.StringVal {
	if x != nil {
		return x.CouponID
	}
	return nil
}

func (x *Conds) GetCouponIDs() *v12.StringSliceVal {
	if x != nil {
		return x.CouponIDs
	}
	return nil
}

func (x *Conds) GetTransactionID() *v12.StringVal {
	if x != nil {
		return x.TransactionID
	}
	return nil
}

func (x *Conds) GetTransactionIDs() *v12.StringSliceVal {
	if x != nil {
		return x.TransactionIDs
	}
	return nil
}

func (x *Conds) GetCreatedAt() *v12.Uint32Val {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Conds) GetUpdatedAt() *v12.Uint32Val {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Conds) GetPaidAt() *v12.Uint32Val {
	if x != nil {
		return x.PaidAt
	}
	return nil
}

type CreatePowerRentalOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PowerRentalOrderReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreatePowerRentalOrderRequest) Reset() {
	*x = CreatePowerRentalOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePowerRentalOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePowerRentalOrderRequest) ProtoMessage() {}

func (x *CreatePowerRentalOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePowerRentalOrderRequest.ProtoReflect.Descriptor instead.
func (*CreatePowerRentalOrderRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{3}
}

func (x *CreatePowerRentalOrderRequest) GetInfo() *PowerRentalOrderReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreatePowerRentalOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PowerRentalOrder `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreatePowerRentalOrderResponse) Reset() {
	*x = CreatePowerRentalOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePowerRentalOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePowerRentalOrderResponse) ProtoMessage() {}

func (x *CreatePowerRentalOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePowerRentalOrderResponse.ProtoReflect.Descriptor instead.
func (*CreatePowerRentalOrderResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{4}
}

func (x *CreatePowerRentalOrderResponse) GetInfo() *PowerRentalOrder {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreatePowerRentalOrderWithFeesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PowerRentalOrder *PowerRentalOrderReq `protobuf:"bytes,10,opt,name=PowerRentalOrder,proto3" json:"PowerRentalOrder,omitempty"`
	FeeOrders        []*fee.FeeOrderReq   `protobuf:"bytes,20,rep,name=FeeOrders,proto3" json:"FeeOrders,omitempty"`
}

func (x *CreatePowerRentalOrderWithFeesRequest) Reset() {
	*x = CreatePowerRentalOrderWithFeesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePowerRentalOrderWithFeesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePowerRentalOrderWithFeesRequest) ProtoMessage() {}

func (x *CreatePowerRentalOrderWithFeesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePowerRentalOrderWithFeesRequest.ProtoReflect.Descriptor instead.
func (*CreatePowerRentalOrderWithFeesRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{5}
}

func (x *CreatePowerRentalOrderWithFeesRequest) GetPowerRentalOrder() *PowerRentalOrderReq {
	if x != nil {
		return x.PowerRentalOrder
	}
	return nil
}

func (x *CreatePowerRentalOrderWithFeesRequest) GetFeeOrders() []*fee.FeeOrderReq {
	if x != nil {
		return x.FeeOrders
	}
	return nil
}

type CreatePowerRentalOrderWithFeesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreatePowerRentalOrderWithFeesResponse) Reset() {
	*x = CreatePowerRentalOrderWithFeesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePowerRentalOrderWithFeesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePowerRentalOrderWithFeesResponse) ProtoMessage() {}

func (x *CreatePowerRentalOrderWithFeesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePowerRentalOrderWithFeesResponse.ProtoReflect.Descriptor instead.
func (*CreatePowerRentalOrderWithFeesResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{6}
}

type UpdatePowerRentalOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PowerRentalOrderReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdatePowerRentalOrderRequest) Reset() {
	*x = UpdatePowerRentalOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePowerRentalOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePowerRentalOrderRequest) ProtoMessage() {}

func (x *UpdatePowerRentalOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePowerRentalOrderRequest.ProtoReflect.Descriptor instead.
func (*UpdatePowerRentalOrderRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{7}
}

func (x *UpdatePowerRentalOrderRequest) GetInfo() *PowerRentalOrderReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdatePowerRentalOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PowerRentalOrder `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdatePowerRentalOrderResponse) Reset() {
	*x = UpdatePowerRentalOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePowerRentalOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePowerRentalOrderResponse) ProtoMessage() {}

func (x *UpdatePowerRentalOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePowerRentalOrderResponse.ProtoReflect.Descriptor instead.
func (*UpdatePowerRentalOrderResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{8}
}

func (x *UpdatePowerRentalOrderResponse) GetInfo() *PowerRentalOrder {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetPowerRentalOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderID string `protobuf:"bytes,10,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
}

func (x *GetPowerRentalOrderRequest) Reset() {
	*x = GetPowerRentalOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPowerRentalOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPowerRentalOrderRequest) ProtoMessage() {}

func (x *GetPowerRentalOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPowerRentalOrderRequest.ProtoReflect.Descriptor instead.
func (*GetPowerRentalOrderRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{9}
}

func (x *GetPowerRentalOrderRequest) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

type GetPowerRentalOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PowerRentalOrder `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetPowerRentalOrderResponse) Reset() {
	*x = GetPowerRentalOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPowerRentalOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPowerRentalOrderResponse) ProtoMessage() {}

func (x *GetPowerRentalOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPowerRentalOrderResponse.ProtoReflect.Descriptor instead.
func (*GetPowerRentalOrderResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{10}
}

func (x *GetPowerRentalOrderResponse) GetInfo() *PowerRentalOrder {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetPowerRentalOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetPowerRentalOrdersRequest) Reset() {
	*x = GetPowerRentalOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPowerRentalOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPowerRentalOrdersRequest) ProtoMessage() {}

func (x *GetPowerRentalOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPowerRentalOrdersRequest.ProtoReflect.Descriptor instead.
func (*GetPowerRentalOrdersRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{11}
}

func (x *GetPowerRentalOrdersRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetPowerRentalOrdersRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetPowerRentalOrdersRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetPowerRentalOrdersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*PowerRentalOrder `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32              `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetPowerRentalOrdersResponse) Reset() {
	*x = GetPowerRentalOrdersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPowerRentalOrdersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPowerRentalOrdersResponse) ProtoMessage() {}

func (x *GetPowerRentalOrdersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPowerRentalOrdersResponse.ProtoReflect.Descriptor instead.
func (*GetPowerRentalOrdersResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{12}
}

func (x *GetPowerRentalOrdersResponse) GetInfos() []*PowerRentalOrder {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetPowerRentalOrdersResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type CountPowerRentalOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *CountPowerRentalOrdersRequest) Reset() {
	*x = CountPowerRentalOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountPowerRentalOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountPowerRentalOrdersRequest) ProtoMessage() {}

func (x *CountPowerRentalOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountPowerRentalOrdersRequest.ProtoReflect.Descriptor instead.
func (*CountPowerRentalOrdersRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{13}
}

func (x *CountPowerRentalOrdersRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type CountPowerRentalOrdersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info uint32 `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CountPowerRentalOrdersResponse) Reset() {
	*x = CountPowerRentalOrdersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountPowerRentalOrdersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountPowerRentalOrdersResponse) ProtoMessage() {}

func (x *CountPowerRentalOrdersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountPowerRentalOrdersResponse.ProtoReflect.Descriptor instead.
func (*CountPowerRentalOrdersResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{14}
}

func (x *CountPowerRentalOrdersResponse) GetInfo() uint32 {
	if x != nil {
		return x.Info
	}
	return 0
}

type ExistPowerRentalOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderID string `protobuf:"bytes,10,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
}

func (x *ExistPowerRentalOrderRequest) Reset() {
	*x = ExistPowerRentalOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistPowerRentalOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistPowerRentalOrderRequest) ProtoMessage() {}

func (x *ExistPowerRentalOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistPowerRentalOrderRequest.ProtoReflect.Descriptor instead.
func (*ExistPowerRentalOrderRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{15}
}

func (x *ExistPowerRentalOrderRequest) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

type ExistPowerRentalOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistPowerRentalOrderResponse) Reset() {
	*x = ExistPowerRentalOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistPowerRentalOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistPowerRentalOrderResponse) ProtoMessage() {}

func (x *ExistPowerRentalOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistPowerRentalOrderResponse.ProtoReflect.Descriptor instead.
func (*ExistPowerRentalOrderResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{16}
}

func (x *ExistPowerRentalOrderResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type ExistPowerRentalOrderCondsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *ExistPowerRentalOrderCondsRequest) Reset() {
	*x = ExistPowerRentalOrderCondsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistPowerRentalOrderCondsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistPowerRentalOrderCondsRequest) ProtoMessage() {}

func (x *ExistPowerRentalOrderCondsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistPowerRentalOrderCondsRequest.ProtoReflect.Descriptor instead.
func (*ExistPowerRentalOrderCondsRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{17}
}

func (x *ExistPowerRentalOrderCondsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type ExistPowerRentalOrderCondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistPowerRentalOrderCondsResponse) Reset() {
	*x = ExistPowerRentalOrderCondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistPowerRentalOrderCondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistPowerRentalOrderCondsResponse) ProtoMessage() {}

func (x *ExistPowerRentalOrderCondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistPowerRentalOrderCondsResponse.ProtoReflect.Descriptor instead.
func (*ExistPowerRentalOrderCondsResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{18}
}

func (x *ExistPowerRentalOrderCondsResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type DeletePowerRentalOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PowerRentalOrderReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeletePowerRentalOrderRequest) Reset() {
	*x = DeletePowerRentalOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePowerRentalOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePowerRentalOrderRequest) ProtoMessage() {}

func (x *DeletePowerRentalOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePowerRentalOrderRequest.ProtoReflect.Descriptor instead.
func (*DeletePowerRentalOrderRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{19}
}

func (x *DeletePowerRentalOrderRequest) GetInfo() *PowerRentalOrderReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type DeletePowerRentalOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PowerRentalOrder `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeletePowerRentalOrderResponse) Reset() {
	*x = DeletePowerRentalOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePowerRentalOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePowerRentalOrderResponse) ProtoMessage() {}

func (x *DeletePowerRentalOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePowerRentalOrderResponse.ProtoReflect.Descriptor instead.
func (*DeletePowerRentalOrderResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{20}
}

func (x *DeletePowerRentalOrderResponse) GetInfo() *PowerRentalOrder {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_order_mw_v1_powerrental_powerrental_proto protoreflect.FileDescriptor

var file_npool_order_mw_v1_powerrental_powerrental_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x6d, 0x77,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2f,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x24, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x76, 0x31, 0x2f,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x6e, 0x70, 0x6f,
	0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x6e, 0x70, 0x6f,
	0x6f, 0x6c, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x63, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x6d,
	0x77, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x65, 0x65, 0x2f, 0x66, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xa9, 0x13, 0x0a, 0x13, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12,
	0x3c, 0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x48, 0x05,
	0x52, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a,
	0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x06, 0x52, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x50, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x07, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12,
	0x40, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x48, 0x08, 0x52, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x46, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x6e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x09, 0x52, 0x0b, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x0c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x48, 0x0a, 0x52, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x08, 0x53, 0x69, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0b, 0x52, 0x08,
	0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0e, 0x41,
	0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0xc8, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x05, 0x55, 0x6e, 0x69,
	0x74, 0x73, 0x18, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x05, 0x55, 0x6e, 0x69,
	0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0c, 0x47, 0x6f, 0x6f, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x55, 0x53, 0x44, 0x18, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0c,
	0x47, 0x6f, 0x6f, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x53, 0x44, 0x88, 0x01, 0x01, 0x12,
	0x30, 0x0a, 0x10, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x55, 0x53, 0x44, 0x18, 0xe6, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x10, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x53, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x32, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x55, 0x53, 0x44, 0x18, 0xf0, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52,
	0x11, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x55,
	0x53, 0x44, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x0b, 0x50,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a,
	0x0f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x84, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x12, 0x52, 0x0f, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a,
	0x0e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x8e, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x13, 0x52, 0x0e, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x44, 0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0xac, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x48, 0x14, 0x52, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x18, 0xb6, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x15, 0x52,
	0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a,
	0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0xc0, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x16, 0x52, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0d, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x41, 0x74, 0x18, 0xca,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x17, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x74, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0c, 0x42, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0xd4, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x48, 0x18, 0x52, 0x0c, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x50, 0x61, 0x69, 0x64, 0x18, 0x9a, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x19, 0x52, 0x0b, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x50, 0x61, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a,
	0x0f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64,
	0x18, 0xa4, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x1a, 0x52, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a,
	0x10, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65,
	0x64, 0x18, 0xae, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x1b, 0x52, 0x10, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x4a, 0x0a, 0x0c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18,
	0xb8, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x1c, 0x52, 0x0c, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x0a, 0x52,
	0x65, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0xc2, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x65, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x1d, 0x52, 0x0a, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0d, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x41, 0x74, 0x18, 0xcc, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x1e,
	0x52, 0x0d, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x41, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x08, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0xf4,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x1f, 0x52, 0x08, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0xfe, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x20, 0x52, 0x12, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0c, 0x4c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x88, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x21, 0x52, 0x0c, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x6b, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x09, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x92, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x22, 0x52, 0x09, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x49, 0x44, 0x73, 0x18, 0xd8, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x12, 0x59, 0x0a, 0x0f, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0xe2, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x52, 0x0f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x12, 0x5c, 0x0a, 0x10, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x18, 0xec, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x52, 0x10,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x74, 0x49,
	0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x41, 0x70, 0x70, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x49,
	0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x53, 0x69, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x55, 0x6e, 0x69, 0x74,
	0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55,
	0x53, 0x44, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x55, 0x53, 0x44, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x53, 0x44, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x41, 0x74, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x50, 0x61, 0x69, 0x64,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x65, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65,
	0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x52,
	0x65, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x52, 0x65,
	0x6e, 0x65, 0x77, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x41, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x41, 0x70, 0x70,
	0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x44,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0xbc,
	0x15, 0x0a, 0x10, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49,
	0x44, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12,
	0x20, 0x0a, 0x0b, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x18, 0x3c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74,
	0x72, 0x12, 0x37, 0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x46, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x70,
	0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41,
	0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x53,
	0x74, 0x72, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x12, 0x3b, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x53, 0x74, 0x72, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x12, 0x42, 0x0a, 0x0b,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x8c, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x29, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x53, 0x74, 0x72, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x74, 0x72, 0x12, 0x4a, 0x0a, 0x0c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0xa0, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1b, 0x0a, 0x08, 0x53, 0x69, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x53, 0x69, 0x6d, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x72, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x12, 0x3f, 0x0a, 0x0a, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0c,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x72, 0x18, 0xdc, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74,
	0x72, 0x12, 0x41, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0xe6,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18,
	0xf0, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12,
	0x25, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x41, 0x74,
	0x18, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x74, 0x41, 0x74, 0x12, 0x29, 0x0a, 0x0f, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x18, 0x84, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x72, 0x12, 0x45, 0x0a, 0x0c, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x8e, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x42, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x47,
	0x6f, 0x6f, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0xac, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49,
	0x44, 0x12, 0x15, 0x0a, 0x05, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x18, 0xb6, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0c, 0x47, 0x6f, 0x6f, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x53, 0x44, 0x18, 0xc0, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x47, 0x6f, 0x6f, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x53, 0x44, 0x12, 0x2b, 0x0a,
	0x10, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x53,
	0x44, 0x18, 0xca, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x53, 0x44, 0x12, 0x2d, 0x0a, 0x11, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x53, 0x44, 0x18,
	0xd4, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x53, 0x44, 0x12, 0x21, 0x0a, 0x0b, 0x50, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0xde, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x0f,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0xe8, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x11, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x18, 0xf2, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x12, 0x4b, 0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0xfc, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x72, 0x18, 0x90, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x12, 0x41, 0x0a, 0x0b,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x9a, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x0b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1f, 0x0a, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x74, 0x18, 0xa4, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x15, 0x0a, 0x05, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18, 0xae, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x17, 0x0a, 0x06, 0x50, 0x61, 0x69, 0x64, 0x41,
	0x74, 0x18, 0xb8, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x50, 0x61, 0x69, 0x64, 0x41, 0x74,
	0x12, 0x21, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x50, 0x61, 0x69, 0x64, 0x18,
	0xc2, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x50,
	0x61, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x18, 0xcc, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x12, 0x2b,
	0x0a, 0x10, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x65, 0x64, 0x18, 0xd6, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x53, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x0f, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x18, 0xe0,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x12, 0x45, 0x0a, 0x0c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0xea, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x0c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a,
	0x0f, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x47, 0x61, 0x73, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0xf4, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x47, 0x61,
	0x73, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x70,
	0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0xfe, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0d, 0x52, 0x65, 0x6e, 0x65, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x18, 0x88, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x12, 0x44,
	0x0a, 0x0a, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x92, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x41, 0x74, 0x18, 0x9c, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x52, 0x65,
	0x6e, 0x65, 0x77, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x41, 0x74, 0x12, 0x2f, 0x0a, 0x12, 0x41,
	0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x6b, 0x49,
	0x44, 0x18, 0xa6, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f,
	0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x0c,
	0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0xb0, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x6b, 0x49,
	0x44, 0x12, 0x1d, 0x0a, 0x09, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0xba,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x39, 0x0a, 0x17, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x18, 0xc4, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x17, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x12, 0x5d, 0x0a, 0x14, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x18, 0xce, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x62, 0x73, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x14, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x62, 0x73,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x07, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x73, 0x18, 0xd8, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x31, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x07, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x12, 0x5a, 0x0a, 0x0f, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0xe2, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x5d, 0x0a, 0x10, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x18, 0xec, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x10, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x73, 0x12, 0x49, 0x0a, 0x0c, 0x46, 0x65, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0xf6, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x66,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0c, 0x46, 0x65, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x1d, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xe8, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xf2, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x8e, 0x15,
	0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x02,
	0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x03, 0x49, 0x44, 0x73, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c,
	0x48, 0x01, 0x52, 0x03, 0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x45, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x48, 0x02, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x39,
	0x0a, 0x06, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x06,
	0x45, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x48, 0x04, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x05, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x46, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x06, 0x52, 0x06,
	0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x07, 0x47, 0x6f, 0x6f,
	0x64, 0x49, 0x44, 0x73, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x07, 0x52, 0x07, 0x47, 0x6f, 0x6f, 0x64,
	0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f,
	0x64, 0x49, 0x44, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x48, 0x08, 0x52, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x12, 0x41, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x73,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63,
	0x65, 0x56, 0x61, 0x6c, 0x48, 0x09, 0x52, 0x0a, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49,
	0x44, 0x73, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48,
	0x0a, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a,
	0x08, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x0b, 0x52,
	0x08, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x09,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x0c, 0x52, 0x09, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0b, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x0d, 0x52, 0x0b, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0c, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48,
	0x0e, 0x52, 0x0c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x37, 0x0a, 0x08, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x18, 0xb4,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x48, 0x0f, 0x52, 0x08,
	0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0a, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x10,
	0x52, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x3d, 0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0xc8, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x11, 0x52,
	0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x44,
	0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0xd2, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56,
	0x61, 0x6c, 0x48, 0x12, 0x52, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x18, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x48, 0x13, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x43, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74,
	0x41, 0x74, 0x18, 0xe6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x48, 0x14, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x74, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x0c, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0xf0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x15, 0x52, 0x0c, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x10, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x18, 0xac, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x48, 0x16, 0x52, 0x10, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x45, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x65, 0x64, 0x18, 0xb6, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x48, 0x17, 0x52, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0a, 0x52, 0x65, 0x6e,
	0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x90, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x18, 0x52, 0x0a, 0x52, 0x65, 0x6e, 0x65, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0d, 0x52, 0x65, 0x6e, 0x65,
	0x77, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x41, 0x74, 0x18, 0x9a, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x19, 0x52, 0x0d, 0x52, 0x65, 0x6e,
	0x65, 0x77, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a,
	0x0c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0xa4, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x1a, 0x52,
	0x0c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x48, 0x0a, 0x0d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x18, 0xae, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x6c,
	0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x1b, 0x52, 0x0d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x08, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0xf4, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x1c, 0x52, 0x08, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x09, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49,
	0x44, 0x73, 0x18, 0xfe, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53,
	0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x1d, 0x52, 0x09, 0x43, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0xd8, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x1e, 0x52, 0x0d, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x18, 0xe2,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65,
	0x56, 0x61, 0x6c, 0x48, 0x1f, 0x52, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xbc, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x20, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0xc6, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x48, 0x21, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x35, 0x0a, 0x06, 0x50, 0x61, 0x69, 0x64, 0x41, 0x74, 0x18, 0xd0, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x22, 0x52, 0x06,
	0x50, 0x61, 0x69, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x49, 0x44, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x74,
	0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x41, 0x70, 0x70, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x41, 0x70,
	0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x41, 0x70, 0x70, 0x47,
	0x6f, 0x6f, 0x64, 0x49, 0x44, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x73, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x4c, 0x61, 0x73, 0x74,
	0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x41, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x42, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x65, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x41, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x49, 0x44, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49,
	0x44, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x50, 0x61, 0x69, 0x64, 0x41, 0x74, 0x22, 0x69,
	0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x48, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x67, 0x0a, 0x1e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0xcd, 0x01, 0x0a, 0x25, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x57, 0x69, 0x74,
	0x68, 0x46, 0x65, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x10,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x52, 0x10, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x42,
	0x0a, 0x09, 0x46, 0x65, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x52, 0x09, 0x46, 0x65, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x22, 0x28, 0x0a, 0x26, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68,
	0x46, 0x65, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x69, 0x0a, 0x1d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x67, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x36, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x22, 0x64, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x89,
	0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c,
	0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x7d, 0x0a, 0x1c, 0x47, 0x65,
	0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x5d, 0x0a, 0x1d, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x34, 0x0a, 0x1e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x38,
	0x0a, 0x1c, 0x45, 0x78, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x22, 0x33, 0x0a, 0x1d, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x61, 0x0a,
	0x21, 0x45, 0x78, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x22, 0x38, 0x0a, 0x22, 0x45, 0x78, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x69, 0x0a, 0x1d, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x67, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0xac,
	0x0b, 0x0a, 0x0a, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x12, 0x9b, 0x01,
	0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3e, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xb3, 0x01, 0x0a, 0x1e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x46, 0x65, 0x65, 0x73, 0x12, 0x46,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x46, 0x65, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x57,
	0x69, 0x74, 0x68, 0x46, 0x65, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x9b, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3e, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x92, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3b, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x95, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x3c, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9b, 0x01, 0x0a,
	0x16, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x3e, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x98, 0x01, 0x0a, 0x15, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x3d, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa7, 0x01, 0x0a, 0x1a, 0x45, 0x78, 0x69, 0x73, 0x74, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x42, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x9b, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3e, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x40, 0x5a,
	0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f,
	0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x6d, 0x77,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescOnce sync.Once
	file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescData = file_npool_order_mw_v1_powerrental_powerrental_proto_rawDesc
)

func file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP() []byte {
	file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescOnce.Do(func() {
		file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescData)
	})
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescData
}

var file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_npool_order_mw_v1_powerrental_powerrental_proto_goTypes = []interface{}{
	(*PowerRentalOrderReq)(nil),                    // 0: order.middleware.powerrental.v1.PowerRentalOrderReq
	(*PowerRentalOrder)(nil),                       // 1: order.middleware.powerrental.v1.PowerRentalOrder
	(*Conds)(nil),                                  // 2: order.middleware.powerrental.v1.Conds
	(*CreatePowerRentalOrderRequest)(nil),          // 3: order.middleware.powerrental.v1.CreatePowerRentalOrderRequest
	(*CreatePowerRentalOrderResponse)(nil),         // 4: order.middleware.powerrental.v1.CreatePowerRentalOrderResponse
	(*CreatePowerRentalOrderWithFeesRequest)(nil),  // 5: order.middleware.powerrental.v1.CreatePowerRentalOrderWithFeesRequest
	(*CreatePowerRentalOrderWithFeesResponse)(nil), // 6: order.middleware.powerrental.v1.CreatePowerRentalOrderWithFeesResponse
	(*UpdatePowerRentalOrderRequest)(nil),          // 7: order.middleware.powerrental.v1.UpdatePowerRentalOrderRequest
	(*UpdatePowerRentalOrderResponse)(nil),         // 8: order.middleware.powerrental.v1.UpdatePowerRentalOrderResponse
	(*GetPowerRentalOrderRequest)(nil),             // 9: order.middleware.powerrental.v1.GetPowerRentalOrderRequest
	(*GetPowerRentalOrderResponse)(nil),            // 10: order.middleware.powerrental.v1.GetPowerRentalOrderResponse
	(*GetPowerRentalOrdersRequest)(nil),            // 11: order.middleware.powerrental.v1.GetPowerRentalOrdersRequest
	(*GetPowerRentalOrdersResponse)(nil),           // 12: order.middleware.powerrental.v1.GetPowerRentalOrdersResponse
	(*CountPowerRentalOrdersRequest)(nil),          // 13: order.middleware.powerrental.v1.CountPowerRentalOrdersRequest
	(*CountPowerRentalOrdersResponse)(nil),         // 14: order.middleware.powerrental.v1.CountPowerRentalOrdersResponse
	(*ExistPowerRentalOrderRequest)(nil),           // 15: order.middleware.powerrental.v1.ExistPowerRentalOrderRequest
	(*ExistPowerRentalOrderResponse)(nil),          // 16: order.middleware.powerrental.v1.ExistPowerRentalOrderResponse
	(*ExistPowerRentalOrderCondsRequest)(nil),      // 17: order.middleware.powerrental.v1.ExistPowerRentalOrderCondsRequest
	(*ExistPowerRentalOrderCondsResponse)(nil),     // 18: order.middleware.powerrental.v1.ExistPowerRentalOrderCondsResponse
	(*DeletePowerRentalOrderRequest)(nil),          // 19: order.middleware.powerrental.v1.DeletePowerRentalOrderRequest
	(*DeletePowerRentalOrderResponse)(nil),         // 20: order.middleware.powerrental.v1.DeletePowerRentalOrderResponse
	(v1.GoodType)(0),                               // 21: basetypes.good.v1.GoodType
	(v11.OrderType)(0),                             // 22: basetypes.order.v1.OrderType
	(v11.PaymentType)(0),                           // 23: basetypes.order.v1.PaymentType
	(v11.OrderCreateMethod)(0),                     // 24: basetypes.order.v1.OrderCreateMethod
	(v11.InvestmentType)(0),                        // 25: basetypes.order.v1.InvestmentType
	(v11.OrderState)(0),                            // 26: basetypes.order.v1.OrderState
	(v11.OrderStartMode)(0),                        // 27: basetypes.order.v1.OrderStartMode
	(v11.BenefitState)(0),                          // 28: basetypes.order.v1.BenefitState
	(v11.PaymentState)(0),                          // 29: basetypes.order.v1.PaymentState
	(v11.OrderRenewState)(0),                       // 30: basetypes.order.v1.OrderRenewState
	(*payment.PaymentBalanceReq)(nil),              // 31: order.middleware.payment.v1.PaymentBalanceReq
	(*payment.PaymentTransferReq)(nil),             // 32: order.middleware.payment.v1.PaymentTransferReq
	(v11.PaymentObseleteState)(0),                  // 33: basetypes.order.v1.PaymentObseleteState
	(*coupon.OrderCouponInfo)(nil),                 // 34: order.middleware.order1.coupon.v1.OrderCouponInfo
	(*payment.PaymentBalanceInfo)(nil),             // 35: order.middleware.payment.v1.PaymentBalanceInfo
	(*payment.PaymentTransferInfo)(nil),            // 36: order.middleware.payment.v1.PaymentTransferInfo
	(*fee.FeeDuration)(nil),                        // 37: order.middleware.fee.v1.FeeDuration
	(*v12.Uint32Val)(nil),                          // 38: basetypes.v1.Uint32Val
	(*v12.Uint32SliceVal)(nil),                     // 39: basetypes.v1.Uint32SliceVal
	(*v12.StringVal)(nil),                          // 40: basetypes.v1.StringVal
	(*v12.StringSliceVal)(nil),                     // 41: basetypes.v1.StringSliceVal
	(*v12.BoolVal)(nil),                            // 42: basetypes.v1.BoolVal
	(*fee.FeeOrderReq)(nil),                        // 43: order.middleware.fee.v1.FeeOrderReq
}
var file_npool_order_mw_v1_powerrental_powerrental_proto_depIdxs = []int32{
	21, // 0: order.middleware.powerrental.v1.PowerRentalOrderReq.GoodType:type_name -> basetypes.good.v1.GoodType
	22, // 1: order.middleware.powerrental.v1.PowerRentalOrderReq.OrderType:type_name -> basetypes.order.v1.OrderType
	23, // 2: order.middleware.powerrental.v1.PowerRentalOrderReq.PaymentType:type_name -> basetypes.order.v1.PaymentType
	24, // 3: order.middleware.powerrental.v1.PowerRentalOrderReq.CreateMethod:type_name -> basetypes.order.v1.OrderCreateMethod
	25, // 4: order.middleware.powerrental.v1.PowerRentalOrderReq.InvestmentType:type_name -> basetypes.order.v1.InvestmentType
	26, // 5: order.middleware.powerrental.v1.PowerRentalOrderReq.OrderState:type_name -> basetypes.order.v1.OrderState
	27, // 6: order.middleware.powerrental.v1.PowerRentalOrderReq.StartMode:type_name -> basetypes.order.v1.OrderStartMode
	28, // 7: order.middleware.powerrental.v1.PowerRentalOrderReq.BenefitState:type_name -> basetypes.order.v1.BenefitState
	29, // 8: order.middleware.powerrental.v1.PowerRentalOrderReq.PaymentState:type_name -> basetypes.order.v1.PaymentState
	30, // 9: order.middleware.powerrental.v1.PowerRentalOrderReq.RenewState:type_name -> basetypes.order.v1.OrderRenewState
	31, // 10: order.middleware.powerrental.v1.PowerRentalOrderReq.PaymentBalances:type_name -> order.middleware.payment.v1.PaymentBalanceReq
	32, // 11: order.middleware.powerrental.v1.PowerRentalOrderReq.PaymentTransfers:type_name -> order.middleware.payment.v1.PaymentTransferReq
	21, // 12: order.middleware.powerrental.v1.PowerRentalOrder.GoodType:type_name -> basetypes.good.v1.GoodType
	22, // 13: order.middleware.powerrental.v1.PowerRentalOrder.OrderType:type_name -> basetypes.order.v1.OrderType
	23, // 14: order.middleware.powerrental.v1.PowerRentalOrder.PaymentType:type_name -> basetypes.order.v1.PaymentType
	24, // 15: order.middleware.powerrental.v1.PowerRentalOrder.CreateMethod:type_name -> basetypes.order.v1.OrderCreateMethod
	26, // 16: order.middleware.powerrental.v1.PowerRentalOrder.OrderState:type_name -> basetypes.order.v1.OrderState
	27, // 17: order.middleware.powerrental.v1.PowerRentalOrder.StartMode:type_name -> basetypes.order.v1.OrderStartMode
	28, // 18: order.middleware.powerrental.v1.PowerRentalOrder.BenefitState:type_name -> basetypes.order.v1.BenefitState
	25, // 19: order.middleware.powerrental.v1.PowerRentalOrder.InvestmentType:type_name -> basetypes.order.v1.InvestmentType
	26, // 20: order.middleware.powerrental.v1.PowerRentalOrder.CancelState:type_name -> basetypes.order.v1.OrderState
	29, // 21: order.middleware.powerrental.v1.PowerRentalOrder.PaymentState:type_name -> basetypes.order.v1.PaymentState
	30, // 22: order.middleware.powerrental.v1.PowerRentalOrder.RenewState:type_name -> basetypes.order.v1.OrderRenewState
	33, // 23: order.middleware.powerrental.v1.PowerRentalOrder.PaymentObseleteState:type_name -> basetypes.order.v1.PaymentObseleteState
	34, // 24: order.middleware.powerrental.v1.PowerRentalOrder.Coupons:type_name -> order.middleware.order1.coupon.v1.OrderCouponInfo
	35, // 25: order.middleware.powerrental.v1.PowerRentalOrder.PaymentBalances:type_name -> order.middleware.payment.v1.PaymentBalanceInfo
	36, // 26: order.middleware.powerrental.v1.PowerRentalOrder.PaymentTransfers:type_name -> order.middleware.payment.v1.PaymentTransferInfo
	37, // 27: order.middleware.powerrental.v1.PowerRentalOrder.FeeDurations:type_name -> order.middleware.fee.v1.FeeDuration
	38, // 28: order.middleware.powerrental.v1.Conds.ID:type_name -> basetypes.v1.Uint32Val
	39, // 29: order.middleware.powerrental.v1.Conds.IDs:type_name -> basetypes.v1.Uint32SliceVal
	40, // 30: order.middleware.powerrental.v1.Conds.EntID:type_name -> basetypes.v1.StringVal
	41, // 31: order.middleware.powerrental.v1.Conds.EntIDs:type_name -> basetypes.v1.StringSliceVal
	40, // 32: order.middleware.powerrental.v1.Conds.AppID:type_name -> basetypes.v1.StringVal
	40, // 33: order.middleware.powerrental.v1.Conds.UserID:type_name -> basetypes.v1.StringVal
	40, // 34: order.middleware.powerrental.v1.Conds.GoodID:type_name -> basetypes.v1.StringVal
	41, // 35: order.middleware.powerrental.v1.Conds.GoodIDs:type_name -> basetypes.v1.StringSliceVal
	40, // 36: order.middleware.powerrental.v1.Conds.AppGoodID:type_name -> basetypes.v1.StringVal
	41, // 37: order.middleware.powerrental.v1.Conds.AppGoodIDs:type_name -> basetypes.v1.StringSliceVal
	40, // 38: order.middleware.powerrental.v1.Conds.OrderID:type_name -> basetypes.v1.StringVal
	41, // 39: order.middleware.powerrental.v1.Conds.OrderIDs:type_name -> basetypes.v1.StringSliceVal
	38, // 40: order.middleware.powerrental.v1.Conds.OrderType:type_name -> basetypes.v1.Uint32Val
	38, // 41: order.middleware.powerrental.v1.Conds.PaymentType:type_name -> basetypes.v1.Uint32Val
	39, // 42: order.middleware.powerrental.v1.Conds.PaymentTypes:type_name -> basetypes.v1.Uint32SliceVal
	42, // 43: order.middleware.powerrental.v1.Conds.Simulate:type_name -> basetypes.v1.BoolVal
	39, // 44: order.middleware.powerrental.v1.Conds.OrderTypes:type_name -> basetypes.v1.Uint32SliceVal
	38, // 45: order.middleware.powerrental.v1.Conds.OrderState:type_name -> basetypes.v1.Uint32Val
	39, // 46: order.middleware.powerrental.v1.Conds.OrderStates:type_name -> basetypes.v1.Uint32SliceVal
	38, // 47: order.middleware.powerrental.v1.Conds.StartMode:type_name -> basetypes.v1.Uint32Val
	38, // 48: order.middleware.powerrental.v1.Conds.LastBenefitAt:type_name -> basetypes.v1.Uint32Val
	38, // 49: order.middleware.powerrental.v1.Conds.BenefitState:type_name -> basetypes.v1.Uint32Val
	42, // 50: order.middleware.powerrental.v1.Conds.AdminSetCanceled:type_name -> basetypes.v1.BoolVal
	42, // 51: order.middleware.powerrental.v1.Conds.UserSetCanceled:type_name -> basetypes.v1.BoolVal
	38, // 52: order.middleware.powerrental.v1.Conds.RenewState:type_name -> basetypes.v1.Uint32Val
	38, // 53: order.middleware.powerrental.v1.Conds.RenewNotifyAt:type_name -> basetypes.v1.Uint32Val
	38, // 54: order.middleware.powerrental.v1.Conds.PaymentState:type_name -> basetypes.v1.Uint32Val
	39, // 55: order.middleware.powerrental.v1.Conds.PaymentStates:type_name -> basetypes.v1.Uint32SliceVal
	40, // 56: order.middleware.powerrental.v1.Conds.CouponID:type_name -> basetypes.v1.StringVal
	41, // 57: order.middleware.powerrental.v1.Conds.CouponIDs:type_name -> basetypes.v1.StringSliceVal
	40, // 58: order.middleware.powerrental.v1.Conds.TransactionID:type_name -> basetypes.v1.StringVal
	41, // 59: order.middleware.powerrental.v1.Conds.TransactionIDs:type_name -> basetypes.v1.StringSliceVal
	38, // 60: order.middleware.powerrental.v1.Conds.CreatedAt:type_name -> basetypes.v1.Uint32Val
	38, // 61: order.middleware.powerrental.v1.Conds.UpdatedAt:type_name -> basetypes.v1.Uint32Val
	38, // 62: order.middleware.powerrental.v1.Conds.PaidAt:type_name -> basetypes.v1.Uint32Val
	0,  // 63: order.middleware.powerrental.v1.CreatePowerRentalOrderRequest.Info:type_name -> order.middleware.powerrental.v1.PowerRentalOrderReq
	1,  // 64: order.middleware.powerrental.v1.CreatePowerRentalOrderResponse.Info:type_name -> order.middleware.powerrental.v1.PowerRentalOrder
	0,  // 65: order.middleware.powerrental.v1.CreatePowerRentalOrderWithFeesRequest.PowerRentalOrder:type_name -> order.middleware.powerrental.v1.PowerRentalOrderReq
	43, // 66: order.middleware.powerrental.v1.CreatePowerRentalOrderWithFeesRequest.FeeOrders:type_name -> order.middleware.fee.v1.FeeOrderReq
	0,  // 67: order.middleware.powerrental.v1.UpdatePowerRentalOrderRequest.Info:type_name -> order.middleware.powerrental.v1.PowerRentalOrderReq
	1,  // 68: order.middleware.powerrental.v1.UpdatePowerRentalOrderResponse.Info:type_name -> order.middleware.powerrental.v1.PowerRentalOrder
	1,  // 69: order.middleware.powerrental.v1.GetPowerRentalOrderResponse.Info:type_name -> order.middleware.powerrental.v1.PowerRentalOrder
	2,  // 70: order.middleware.powerrental.v1.GetPowerRentalOrdersRequest.Conds:type_name -> order.middleware.powerrental.v1.Conds
	1,  // 71: order.middleware.powerrental.v1.GetPowerRentalOrdersResponse.Infos:type_name -> order.middleware.powerrental.v1.PowerRentalOrder
	2,  // 72: order.middleware.powerrental.v1.CountPowerRentalOrdersRequest.Conds:type_name -> order.middleware.powerrental.v1.Conds
	2,  // 73: order.middleware.powerrental.v1.ExistPowerRentalOrderCondsRequest.Conds:type_name -> order.middleware.powerrental.v1.Conds
	0,  // 74: order.middleware.powerrental.v1.DeletePowerRentalOrderRequest.Info:type_name -> order.middleware.powerrental.v1.PowerRentalOrderReq
	1,  // 75: order.middleware.powerrental.v1.DeletePowerRentalOrderResponse.Info:type_name -> order.middleware.powerrental.v1.PowerRentalOrder
	3,  // 76: order.middleware.powerrental.v1.Middleware.CreatePowerRentalOrder:input_type -> order.middleware.powerrental.v1.CreatePowerRentalOrderRequest
	5,  // 77: order.middleware.powerrental.v1.Middleware.CreatePowerRentalOrderWithFees:input_type -> order.middleware.powerrental.v1.CreatePowerRentalOrderWithFeesRequest
	7,  // 78: order.middleware.powerrental.v1.Middleware.UpdatePowerRentalOrder:input_type -> order.middleware.powerrental.v1.UpdatePowerRentalOrderRequest
	9,  // 79: order.middleware.powerrental.v1.Middleware.GetPowerRentalOrder:input_type -> order.middleware.powerrental.v1.GetPowerRentalOrderRequest
	11, // 80: order.middleware.powerrental.v1.Middleware.GetPowerRentalOrders:input_type -> order.middleware.powerrental.v1.GetPowerRentalOrdersRequest
	13, // 81: order.middleware.powerrental.v1.Middleware.CountPowerRentalOrders:input_type -> order.middleware.powerrental.v1.CountPowerRentalOrdersRequest
	15, // 82: order.middleware.powerrental.v1.Middleware.ExistPowerRentalOrder:input_type -> order.middleware.powerrental.v1.ExistPowerRentalOrderRequest
	17, // 83: order.middleware.powerrental.v1.Middleware.ExistPowerRentalOrderConds:input_type -> order.middleware.powerrental.v1.ExistPowerRentalOrderCondsRequest
	19, // 84: order.middleware.powerrental.v1.Middleware.DeletePowerRentalOrder:input_type -> order.middleware.powerrental.v1.DeletePowerRentalOrderRequest
	4,  // 85: order.middleware.powerrental.v1.Middleware.CreatePowerRentalOrder:output_type -> order.middleware.powerrental.v1.CreatePowerRentalOrderResponse
	6,  // 86: order.middleware.powerrental.v1.Middleware.CreatePowerRentalOrderWithFees:output_type -> order.middleware.powerrental.v1.CreatePowerRentalOrderWithFeesResponse
	8,  // 87: order.middleware.powerrental.v1.Middleware.UpdatePowerRentalOrder:output_type -> order.middleware.powerrental.v1.UpdatePowerRentalOrderResponse
	10, // 88: order.middleware.powerrental.v1.Middleware.GetPowerRentalOrder:output_type -> order.middleware.powerrental.v1.GetPowerRentalOrderResponse
	12, // 89: order.middleware.powerrental.v1.Middleware.GetPowerRentalOrders:output_type -> order.middleware.powerrental.v1.GetPowerRentalOrdersResponse
	14, // 90: order.middleware.powerrental.v1.Middleware.CountPowerRentalOrders:output_type -> order.middleware.powerrental.v1.CountPowerRentalOrdersResponse
	16, // 91: order.middleware.powerrental.v1.Middleware.ExistPowerRentalOrder:output_type -> order.middleware.powerrental.v1.ExistPowerRentalOrderResponse
	18, // 92: order.middleware.powerrental.v1.Middleware.ExistPowerRentalOrderConds:output_type -> order.middleware.powerrental.v1.ExistPowerRentalOrderCondsResponse
	20, // 93: order.middleware.powerrental.v1.Middleware.DeletePowerRentalOrder:output_type -> order.middleware.powerrental.v1.DeletePowerRentalOrderResponse
	85, // [85:94] is the sub-list for method output_type
	76, // [76:85] is the sub-list for method input_type
	76, // [76:76] is the sub-list for extension type_name
	76, // [76:76] is the sub-list for extension extendee
	0,  // [0:76] is the sub-list for field type_name
}

func init() { file_npool_order_mw_v1_powerrental_powerrental_proto_init() }
func file_npool_order_mw_v1_powerrental_powerrental_proto_init() {
	if File_npool_order_mw_v1_powerrental_powerrental_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PowerRentalOrderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PowerRentalOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePowerRentalOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePowerRentalOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePowerRentalOrderWithFeesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePowerRentalOrderWithFeesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePowerRentalOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePowerRentalOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPowerRentalOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPowerRentalOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPowerRentalOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPowerRentalOrdersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountPowerRentalOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountPowerRentalOrdersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistPowerRentalOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistPowerRentalOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistPowerRentalOrderCondsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistPowerRentalOrderCondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePowerRentalOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePowerRentalOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_order_mw_v1_powerrental_powerrental_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_order_mw_v1_powerrental_powerrental_proto_goTypes,
		DependencyIndexes: file_npool_order_mw_v1_powerrental_powerrental_proto_depIdxs,
		MessageInfos:      file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes,
	}.Build()
	File_npool_order_mw_v1_powerrental_powerrental_proto = out.File
	file_npool_order_mw_v1_powerrental_powerrental_proto_rawDesc = nil
	file_npool_order_mw_v1_powerrental_powerrental_proto_goTypes = nil
	file_npool_order_mw_v1_powerrental_powerrental_proto_depIdxs = nil
}
