// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.18.1
// source: npool/order/mw/v1/powerrental/powerrental.proto

package powerrental

import (
	v1 "github.com/NpoolPlatform/message/npool/basetypes/order/v1"
	v11 "github.com/NpoolPlatform/message/npool/basetypes/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PaymentAmount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinTypeID  string `protobuf:"bytes,10,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty"`
	USDCurrency string `protobuf:"bytes,20,opt,name=USDCurrency,proto3" json:"USDCurrency,omitempty"`
	Amount      string `protobuf:"bytes,30,opt,name=Amount,proto3" json:"Amount,omitempty"`
}

func (x *PaymentAmount) Reset() {
	*x = PaymentAmount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentAmount) ProtoMessage() {}

func (x *PaymentAmount) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentAmount.ProtoReflect.Descriptor instead.
func (*PaymentAmount) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{0}
}

func (x *PaymentAmount) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

func (x *PaymentAmount) GetUSDCurrency() string {
	if x != nil {
		return x.USDCurrency
	}
	return ""
}

func (x *PaymentAmount) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type PowerRentalOrderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                   *uint32            `protobuf:"varint,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID                *string            `protobuf:"bytes,20,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	AppID                *string            `protobuf:"bytes,30,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	UserID               *string            `protobuf:"bytes,40,opt,name=UserID,proto3,oneof" json:"UserID,omitempty"`
	GoodID               *string            `protobuf:"bytes,50,opt,name=GoodID,proto3,oneof" json:"GoodID,omitempty"`
	AppGoodID            *string            `protobuf:"bytes,60,opt,name=AppGoodID,proto3,oneof" json:"AppGoodID,omitempty"`
	ParentOrderID        *string            `protobuf:"bytes,61,opt,name=ParentOrderID,proto3,oneof" json:"ParentOrderID,omitempty"`
	Units                *string            `protobuf:"bytes,70,opt,name=Units,proto3,oneof" json:"Units,omitempty"`
	GoodValue            *string            `protobuf:"bytes,80,opt,name=GoodValue,proto3,oneof" json:"GoodValue,omitempty"`
	GoodValueUSD         *string            `protobuf:"bytes,81,opt,name=GoodValueUSD,proto3,oneof" json:"GoodValueUSD,omitempty"`
	PaymentAmount        *string            `protobuf:"bytes,90,opt,name=PaymentAmount,proto3,oneof" json:"PaymentAmount,omitempty"`
	DiscountAmount       *string            `protobuf:"bytes,100,opt,name=DiscountAmount,proto3,oneof" json:"DiscountAmount,omitempty"`
	PromotionID          *string            `protobuf:"bytes,110,opt,name=PromotionID,proto3,oneof" json:"PromotionID,omitempty"`
	Duration             *uint32            `protobuf:"varint,120,opt,name=Duration,proto3,oneof" json:"Duration,omitempty"`
	OrderType            *v1.OrderType      `protobuf:"varint,130,opt,name=OrderType,proto3,enum=basetypes.order.v1.OrderType,oneof" json:"OrderType,omitempty"`
	InvestmentType       *v1.InvestmentType `protobuf:"varint,140,opt,name=InvestmentType,proto3,enum=basetypes.order.v1.InvestmentType,oneof" json:"InvestmentType,omitempty"`
	CouponIDs            []string           `protobuf:"bytes,150,rep,name=CouponIDs,proto3" json:"CouponIDs,omitempty"`
	PaymentType          *v1.PaymentType    `protobuf:"varint,160,opt,name=PaymentType,proto3,enum=basetypes.order.v1.PaymentType,oneof" json:"PaymentType,omitempty"`
	CoinTypeID           *string            `protobuf:"bytes,170,opt,name=CoinTypeID,proto3,oneof" json:"CoinTypeID,omitempty"`
	PaymentCoinTypeID    *string            `protobuf:"bytes,171,opt,name=PaymentCoinTypeID,proto3,oneof" json:"PaymentCoinTypeID,omitempty"`
	TransferAmount       *string            `protobuf:"bytes,180,opt,name=TransferAmount,proto3,oneof" json:"TransferAmount,omitempty"`
	BalanceAmount        *string            `protobuf:"bytes,190,opt,name=BalanceAmount,proto3,oneof" json:"BalanceAmount,omitempty"`
	CoinUSDCurrency      *string            `protobuf:"bytes,200,opt,name=CoinUSDCurrency,proto3,oneof" json:"CoinUSDCurrency,omitempty"`
	LocalCoinUSDCurrency *string            `protobuf:"bytes,210,opt,name=LocalCoinUSDCurrency,proto3,oneof" json:"LocalCoinUSDCurrency,omitempty"`
	LiveCoinUSDCurrency  *string            `protobuf:"bytes,220,opt,name=LiveCoinUSDCurrency,proto3,oneof" json:"LiveCoinUSDCurrency,omitempty"`
	// Support multiple payment coins from user balances
	CreateMethod      *v1.OrderCreateMethod `protobuf:"varint,221,opt,name=CreateMethod,proto3,enum=basetypes.order.v1.OrderCreateMethod,oneof" json:"CreateMethod,omitempty"`
	MultiPaymentCoins *bool                 `protobuf:"varint,222,opt,name=MultiPaymentCoins,proto3,oneof" json:"MultiPaymentCoins,omitempty"`
	PaymentAmounts    []*PaymentAmount      `protobuf:"bytes,223,rep,name=PaymentAmounts,proto3" json:"PaymentAmounts,omitempty"`
	// payment
	PaymentAccountID   *string `protobuf:"bytes,230,opt,name=PaymentAccountID,proto3,oneof" json:"PaymentAccountID,omitempty"`
	PaymentStartAmount *string `protobuf:"bytes,240,opt,name=PaymentStartAmount,proto3,oneof" json:"PaymentStartAmount,omitempty"`
	// Create or Update
	// orderstate
	OrderState           *v1.OrderState      `protobuf:"varint,250,opt,name=OrderState,proto3,enum=basetypes.order.v1.OrderState,oneof" json:"OrderState,omitempty"`
	StartMode            *v1.OrderStartMode  `protobuf:"varint,260,opt,name=StartMode,proto3,enum=basetypes.order.v1.OrderStartMode,oneof" json:"StartMode,omitempty"`
	StartAt              *uint32             `protobuf:"varint,270,opt,name=StartAt,proto3,oneof" json:"StartAt,omitempty"`
	EndAt                *uint32             `protobuf:"varint,280,opt,name=EndAt,proto3,oneof" json:"EndAt,omitempty"`
	LastBenefitAt        *uint32             `protobuf:"varint,290,opt,name=LastBenefitAt,proto3,oneof" json:"LastBenefitAt,omitempty"`
	BenefitState         *v1.BenefitState    `protobuf:"varint,300,opt,name=BenefitState,proto3,enum=basetypes.order.v1.BenefitState,oneof" json:"BenefitState,omitempty"`
	UserSetPaid          *bool               `protobuf:"varint,310,opt,name=UserSetPaid,proto3,oneof" json:"UserSetPaid,omitempty"`
	UserSetCanceled      *bool               `protobuf:"varint,320,opt,name=UserSetCanceled,proto3,oneof" json:"UserSetCanceled,omitempty"`
	AdminSetCanceled     *bool               `protobuf:"varint,321,opt,name=AdminSetCanceled,proto3,oneof" json:"AdminSetCanceled,omitempty"`
	PaymentTransactionID *string             `protobuf:"bytes,330,opt,name=PaymentTransactionID,proto3,oneof" json:"PaymentTransactionID,omitempty"`
	PaymentFinishAmount  *string             `protobuf:"bytes,340,opt,name=PaymentFinishAmount,proto3,oneof" json:"PaymentFinishAmount,omitempty"`
	PaymentState         *v1.PaymentState    `protobuf:"varint,350,opt,name=PaymentState,proto3,enum=basetypes.order.v1.PaymentState,oneof" json:"PaymentState,omitempty"`
	OutOfGasHours        *uint32             `protobuf:"varint,360,opt,name=OutOfGasHours,proto3,oneof" json:"OutOfGasHours,omitempty"`
	CompensateHours      *uint32             `protobuf:"varint,370,opt,name=CompensateHours,proto3,oneof" json:"CompensateHours,omitempty"`
	Rollback             *bool               `protobuf:"varint,380,opt,name=Rollback,proto3,oneof" json:"Rollback,omitempty"`
	AppGoodStockLockID   *string             `protobuf:"bytes,400,opt,name=AppGoodStockLockID,proto3,oneof" json:"AppGoodStockLockID,omitempty"`
	LedgerLockID         *string             `protobuf:"bytes,410,opt,name=LedgerLockID,proto3,oneof" json:"LedgerLockID,omitempty"`
	RenewState           *v1.OrderRenewState `protobuf:"varint,420,opt,name=RenewState,proto3,enum=basetypes.order.v1.OrderRenewState,oneof" json:"RenewState,omitempty"`
	RenewNotifyAt        *uint32             `protobuf:"varint,430,opt,name=RenewNotifyAt,proto3,oneof" json:"RenewNotifyAt,omitempty"`
	Simulate             *bool               `protobuf:"varint,440,opt,name=Simulate,proto3,oneof" json:"Simulate,omitempty"`
}

func (x *PowerRentalOrderReq) Reset() {
	*x = PowerRentalOrderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerRentalOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerRentalOrderReq) ProtoMessage() {}

func (x *PowerRentalOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerRentalOrderReq.ProtoReflect.Descriptor instead.
func (*PowerRentalOrderReq) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{1}
}

func (x *PowerRentalOrderReq) GetID() uint32 {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return 0
}

func (x *PowerRentalOrderReq) GetEntID() string {
	if x != nil && x.EntID != nil {
		return *x.EntID
	}
	return ""
}

func (x *PowerRentalOrderReq) GetAppID() string {
	if x != nil && x.AppID != nil {
		return *x.AppID
	}
	return ""
}

func (x *PowerRentalOrderReq) GetUserID() string {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return ""
}

func (x *PowerRentalOrderReq) GetGoodID() string {
	if x != nil && x.GoodID != nil {
		return *x.GoodID
	}
	return ""
}

func (x *PowerRentalOrderReq) GetAppGoodID() string {
	if x != nil && x.AppGoodID != nil {
		return *x.AppGoodID
	}
	return ""
}

func (x *PowerRentalOrderReq) GetParentOrderID() string {
	if x != nil && x.ParentOrderID != nil {
		return *x.ParentOrderID
	}
	return ""
}

func (x *PowerRentalOrderReq) GetUnits() string {
	if x != nil && x.Units != nil {
		return *x.Units
	}
	return ""
}

func (x *PowerRentalOrderReq) GetGoodValue() string {
	if x != nil && x.GoodValue != nil {
		return *x.GoodValue
	}
	return ""
}

func (x *PowerRentalOrderReq) GetGoodValueUSD() string {
	if x != nil && x.GoodValueUSD != nil {
		return *x.GoodValueUSD
	}
	return ""
}

func (x *PowerRentalOrderReq) GetPaymentAmount() string {
	if x != nil && x.PaymentAmount != nil {
		return *x.PaymentAmount
	}
	return ""
}

func (x *PowerRentalOrderReq) GetDiscountAmount() string {
	if x != nil && x.DiscountAmount != nil {
		return *x.DiscountAmount
	}
	return ""
}

func (x *PowerRentalOrderReq) GetPromotionID() string {
	if x != nil && x.PromotionID != nil {
		return *x.PromotionID
	}
	return ""
}

func (x *PowerRentalOrderReq) GetDuration() uint32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *PowerRentalOrderReq) GetOrderType() v1.OrderType {
	if x != nil && x.OrderType != nil {
		return *x.OrderType
	}
	return v1.OrderType(0)
}

func (x *PowerRentalOrderReq) GetInvestmentType() v1.InvestmentType {
	if x != nil && x.InvestmentType != nil {
		return *x.InvestmentType
	}
	return v1.InvestmentType(0)
}

func (x *PowerRentalOrderReq) GetCouponIDs() []string {
	if x != nil {
		return x.CouponIDs
	}
	return nil
}

func (x *PowerRentalOrderReq) GetPaymentType() v1.PaymentType {
	if x != nil && x.PaymentType != nil {
		return *x.PaymentType
	}
	return v1.PaymentType(0)
}

func (x *PowerRentalOrderReq) GetCoinTypeID() string {
	if x != nil && x.CoinTypeID != nil {
		return *x.CoinTypeID
	}
	return ""
}

func (x *PowerRentalOrderReq) GetPaymentCoinTypeID() string {
	if x != nil && x.PaymentCoinTypeID != nil {
		return *x.PaymentCoinTypeID
	}
	return ""
}

func (x *PowerRentalOrderReq) GetTransferAmount() string {
	if x != nil && x.TransferAmount != nil {
		return *x.TransferAmount
	}
	return ""
}

func (x *PowerRentalOrderReq) GetBalanceAmount() string {
	if x != nil && x.BalanceAmount != nil {
		return *x.BalanceAmount
	}
	return ""
}

func (x *PowerRentalOrderReq) GetCoinUSDCurrency() string {
	if x != nil && x.CoinUSDCurrency != nil {
		return *x.CoinUSDCurrency
	}
	return ""
}

func (x *PowerRentalOrderReq) GetLocalCoinUSDCurrency() string {
	if x != nil && x.LocalCoinUSDCurrency != nil {
		return *x.LocalCoinUSDCurrency
	}
	return ""
}

func (x *PowerRentalOrderReq) GetLiveCoinUSDCurrency() string {
	if x != nil && x.LiveCoinUSDCurrency != nil {
		return *x.LiveCoinUSDCurrency
	}
	return ""
}

func (x *PowerRentalOrderReq) GetCreateMethod() v1.OrderCreateMethod {
	if x != nil && x.CreateMethod != nil {
		return *x.CreateMethod
	}
	return v1.OrderCreateMethod(0)
}

func (x *PowerRentalOrderReq) GetMultiPaymentCoins() bool {
	if x != nil && x.MultiPaymentCoins != nil {
		return *x.MultiPaymentCoins
	}
	return false
}

func (x *PowerRentalOrderReq) GetPaymentAmounts() []*PaymentAmount {
	if x != nil {
		return x.PaymentAmounts
	}
	return nil
}

func (x *PowerRentalOrderReq) GetPaymentAccountID() string {
	if x != nil && x.PaymentAccountID != nil {
		return *x.PaymentAccountID
	}
	return ""
}

func (x *PowerRentalOrderReq) GetPaymentStartAmount() string {
	if x != nil && x.PaymentStartAmount != nil {
		return *x.PaymentStartAmount
	}
	return ""
}

func (x *PowerRentalOrderReq) GetOrderState() v1.OrderState {
	if x != nil && x.OrderState != nil {
		return *x.OrderState
	}
	return v1.OrderState(0)
}

func (x *PowerRentalOrderReq) GetStartMode() v1.OrderStartMode {
	if x != nil && x.StartMode != nil {
		return *x.StartMode
	}
	return v1.OrderStartMode(0)
}

func (x *PowerRentalOrderReq) GetStartAt() uint32 {
	if x != nil && x.StartAt != nil {
		return *x.StartAt
	}
	return 0
}

func (x *PowerRentalOrderReq) GetEndAt() uint32 {
	if x != nil && x.EndAt != nil {
		return *x.EndAt
	}
	return 0
}

func (x *PowerRentalOrderReq) GetLastBenefitAt() uint32 {
	if x != nil && x.LastBenefitAt != nil {
		return *x.LastBenefitAt
	}
	return 0
}

func (x *PowerRentalOrderReq) GetBenefitState() v1.BenefitState {
	if x != nil && x.BenefitState != nil {
		return *x.BenefitState
	}
	return v1.BenefitState(0)
}

func (x *PowerRentalOrderReq) GetUserSetPaid() bool {
	if x != nil && x.UserSetPaid != nil {
		return *x.UserSetPaid
	}
	return false
}

func (x *PowerRentalOrderReq) GetUserSetCanceled() bool {
	if x != nil && x.UserSetCanceled != nil {
		return *x.UserSetCanceled
	}
	return false
}

func (x *PowerRentalOrderReq) GetAdminSetCanceled() bool {
	if x != nil && x.AdminSetCanceled != nil {
		return *x.AdminSetCanceled
	}
	return false
}

func (x *PowerRentalOrderReq) GetPaymentTransactionID() string {
	if x != nil && x.PaymentTransactionID != nil {
		return *x.PaymentTransactionID
	}
	return ""
}

func (x *PowerRentalOrderReq) GetPaymentFinishAmount() string {
	if x != nil && x.PaymentFinishAmount != nil {
		return *x.PaymentFinishAmount
	}
	return ""
}

func (x *PowerRentalOrderReq) GetPaymentState() v1.PaymentState {
	if x != nil && x.PaymentState != nil {
		return *x.PaymentState
	}
	return v1.PaymentState(0)
}

func (x *PowerRentalOrderReq) GetOutOfGasHours() uint32 {
	if x != nil && x.OutOfGasHours != nil {
		return *x.OutOfGasHours
	}
	return 0
}

func (x *PowerRentalOrderReq) GetCompensateHours() uint32 {
	if x != nil && x.CompensateHours != nil {
		return *x.CompensateHours
	}
	return 0
}

func (x *PowerRentalOrderReq) GetRollback() bool {
	if x != nil && x.Rollback != nil {
		return *x.Rollback
	}
	return false
}

func (x *PowerRentalOrderReq) GetAppGoodStockLockID() string {
	if x != nil && x.AppGoodStockLockID != nil {
		return *x.AppGoodStockLockID
	}
	return ""
}

func (x *PowerRentalOrderReq) GetLedgerLockID() string {
	if x != nil && x.LedgerLockID != nil {
		return *x.LedgerLockID
	}
	return ""
}

func (x *PowerRentalOrderReq) GetRenewState() v1.OrderRenewState {
	if x != nil && x.RenewState != nil {
		return *x.RenewState
	}
	return v1.OrderRenewState(0)
}

func (x *PowerRentalOrderReq) GetRenewNotifyAt() uint32 {
	if x != nil && x.RenewNotifyAt != nil {
		return *x.RenewNotifyAt
	}
	return 0
}

func (x *PowerRentalOrderReq) GetSimulate() bool {
	if x != nil && x.Simulate != nil {
		return *x.Simulate
	}
	return false
}

type PowerRentalOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// order
	// @inject_tag: sql:"id"
	ID uint32 `protobuf:"varint,9,opt,name=ID,proto3" json:"ID,omitempty" sql:"id"`
	// @inject_tag: sql:"ent_id"
	EntID string `protobuf:"bytes,10,opt,name=EntID,proto3" json:"EntID,omitempty" sql:"ent_id"`
	// @inject_tag: sql:"app_id"
	AppID string `protobuf:"bytes,20,opt,name=AppID,proto3" json:"AppID,omitempty" sql:"app_id"`
	// @inject_tag: sql:"user_id"
	UserID string `protobuf:"bytes,30,opt,name=UserID,proto3" json:"UserID,omitempty" sql:"user_id"`
	// @inject_tag: sql:"good_id"
	GoodID string `protobuf:"bytes,40,opt,name=GoodID,proto3" json:"GoodID,omitempty" sql:"good_id"`
	// @inject_tag: sql:"app_good_id"
	AppGoodID string `protobuf:"bytes,50,opt,name=AppGoodID,proto3" json:"AppGoodID,omitempty" sql:"app_good_id"`
	// @inject_tag: sql:"app_good_stock_id"
	AppGoodStockID string `protobuf:"bytes,51,opt,name=AppGoodStockID,proto3" json:"AppGoodStockID,omitempty" sql:"app_good_stock_id"`
	// @inject_tag: sql:"payment_id"
	PaymentID string `protobuf:"bytes,60,opt,name=PaymentID,proto3" json:"PaymentID,omitempty" sql:"payment_id"`
	// @inject_tag: sql:"parent_order_id"
	ParentOrderID string `protobuf:"bytes,70,opt,name=ParentOrderID,proto3" json:"ParentOrderID,omitempty" sql:"parent_order_id"`
	// @inject_tag: sql:"units_v1"
	Units string `protobuf:"bytes,80,opt,name=Units,proto3" json:"Units,omitempty" sql:"units_v1"`
	// @inject_tag: sql:"good_value"
	GoodValue string `protobuf:"bytes,90,opt,name=GoodValue,proto3" json:"GoodValue,omitempty" sql:"good_value"`
	// @inject_tag: sql:"good_value_usd"
	GoodValueUSD string `protobuf:"bytes,91,opt,name=GoodValueUSD,proto3" json:"GoodValueUSD,omitempty" sql:"good_value_usd"`
	// @inject_tag: sql:"payment_amount"
	PaymentAmount string `protobuf:"bytes,100,opt,name=PaymentAmount,proto3" json:"PaymentAmount,omitempty" sql:"payment_amount"`
	// @inject_tag: sql:"discount_amount"
	DiscountAmount string `protobuf:"bytes,110,opt,name=DiscountAmount,proto3" json:"DiscountAmount,omitempty" sql:"discount_amount"`
	// @inject_tag: sql:"promotion_id"
	PromotionID string `protobuf:"bytes,120,opt,name=PromotionID,proto3" json:"PromotionID,omitempty" sql:"promotion_id"`
	// @inject_tag: sql:"duration"
	Duration uint32 `protobuf:"varint,130,opt,name=Duration,proto3" json:"Duration,omitempty" sql:"duration"`
	// @inject_tag: sql:"order_type"
	OrderTypeStr string       `protobuf:"bytes,140,opt,name=OrderTypeStr,proto3" json:"OrderTypeStr,omitempty" sql:"order_type"`
	OrderType    v1.OrderType `protobuf:"varint,150,opt,name=OrderType,proto3,enum=basetypes.order.v1.OrderType" json:"OrderType,omitempty"`
	// @inject_tag: sql:"investment_type"
	InvestmentTypeStr string            `protobuf:"bytes,160,opt,name=InvestmentTypeStr,proto3" json:"InvestmentTypeStr,omitempty" sql:"investment_type"`
	InvestmentType    v1.InvestmentType `protobuf:"varint,170,opt,name=InvestmentType,proto3,enum=basetypes.order.v1.InvestmentType" json:"InvestmentType,omitempty"`
	// @inject_tag: sql:"coupon_ids"
	CouponIDsStr string   `protobuf:"bytes,180,opt,name=CouponIDsStr,proto3" json:"CouponIDsStr,omitempty" sql:"coupon_ids"`
	CouponIDs    []string `protobuf:"bytes,190,rep,name=CouponIDs,proto3" json:"CouponIDs,omitempty"`
	// @inject_tag: sql:"payment_type"
	PaymentTypeStr string         `protobuf:"bytes,200,opt,name=PaymentTypeStr,proto3" json:"PaymentTypeStr,omitempty" sql:"payment_type"`
	PaymentType    v1.PaymentType `protobuf:"varint,210,opt,name=PaymentType,proto3,enum=basetypes.order.v1.PaymentType" json:"PaymentType,omitempty"`
	// @inject_tag: sql:"coin_type_id"
	CoinTypeID string `protobuf:"bytes,220,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty" sql:"coin_type_id"`
	// @inject_tag: sql:"payment_coin_type_id"
	PaymentCoinTypeID string `protobuf:"bytes,221,opt,name=PaymentCoinTypeID,proto3" json:"PaymentCoinTypeID,omitempty" sql:"payment_coin_type_id"`
	// @inject_tag: sql:"transfer_amount"
	TransferAmount string `protobuf:"bytes,230,opt,name=TransferAmount,proto3" json:"TransferAmount,omitempty" sql:"transfer_amount"`
	// @inject_tag: sql:"balance_amount"
	BalanceAmount string `protobuf:"bytes,240,opt,name=BalanceAmount,proto3" json:"BalanceAmount,omitempty" sql:"balance_amount"`
	// @inject_tag: sql:"coin_usd_currency"
	CoinUSDCurrency string `protobuf:"bytes,250,opt,name=CoinUSDCurrency,proto3" json:"CoinUSDCurrency,omitempty" sql:"coin_usd_currency"`
	// @inject_tag: sql:"local_coin_usd_currency"
	LocalCoinUSDCurrency string `protobuf:"bytes,260,opt,name=LocalCoinUSDCurrency,proto3" json:"LocalCoinUSDCurrency,omitempty" sql:"local_coin_usd_currency"`
	// @inject_tag: sql:"live_coin_usd_currency"
	LiveCoinUSDCurrency string `protobuf:"bytes,270,opt,name=LiveCoinUSDCurrency,proto3" json:"LiveCoinUSDCurrency,omitempty" sql:"live_coin_usd_currency"`
	// @inject_tag: sql:"create_method"
	CreateMethodStr string               `protobuf:"bytes,271,opt,name=CreateMethodStr,proto3" json:"CreateMethodStr,omitempty" sql:"create_method"`
	CreateMethod    v1.OrderCreateMethod `protobuf:"varint,272,opt,name=CreateMethod,proto3,enum=basetypes.order.v1.OrderCreateMethod" json:"CreateMethod,omitempty"`
	// @inject_tag: sql:"multi_payment_coins"
	MultiPaymentCoins bool `protobuf:"varint,273,opt,name=MultiPaymentCoins,proto3" json:"MultiPaymentCoins,omitempty" sql:"multi_payment_coins"`
	// @inject_tag: sql:"payment_amounts"
	PaymentAmountsStr string           `protobuf:"bytes,274,opt,name=PaymentAmountsStr,proto3" json:"PaymentAmountsStr,omitempty" sql:"payment_amounts"`
	PaymentAmounts    []*PaymentAmount `protobuf:"bytes,275,rep,name=PaymentAmounts,proto3" json:"PaymentAmounts,omitempty"`
	// payment
	// @inject_tag: sql:"payment_account_id"
	PaymentAccountID string `protobuf:"bytes,280,opt,name=PaymentAccountID,proto3" json:"PaymentAccountID,omitempty" sql:"payment_account_id"`
	// @inject_tag: sql:"payment_start_amount"
	PaymentStartAmount string `protobuf:"bytes,290,opt,name=PaymentStartAmount,proto3" json:"PaymentStartAmount,omitempty" sql:"payment_start_amount"`
	// OrderState
	// @inject_tag: sql:"orderstate_id"
	OrderStateID string `protobuf:"bytes,300,opt,name=OrderStateID,proto3" json:"OrderStateID,omitempty" sql:"orderstate_id"`
	// @inject_tag: sql:"order_state"
	OrderStateStr string        `protobuf:"bytes,310,opt,name=OrderStateStr,proto3" json:"OrderStateStr,omitempty" sql:"order_state"`
	OrderState    v1.OrderState `protobuf:"varint,320,opt,name=OrderState,proto3,enum=basetypes.order.v1.OrderState" json:"OrderState,omitempty"`
	// @inject_tag: sql:"start_mode"
	StartModeStr string            `protobuf:"bytes,330,opt,name=StartModeStr,proto3" json:"StartModeStr,omitempty" sql:"start_mode"`
	StartMode    v1.OrderStartMode `protobuf:"varint,340,opt,name=StartMode,proto3,enum=basetypes.order.v1.OrderStartMode" json:"StartMode,omitempty"`
	// @inject_tag: sql:"start_at"
	StartAt uint32 `protobuf:"varint,350,opt,name=StartAt,proto3" json:"StartAt,omitempty" sql:"start_at"`
	// @inject_tag: sql:"end_at"
	EndAt uint32 `protobuf:"varint,360,opt,name=EndAt,proto3" json:"EndAt,omitempty" sql:"end_at"`
	// @inject_tag: sql:"last_benefit_at"
	LastBenefitAt uint32 `protobuf:"varint,370,opt,name=LastBenefitAt,proto3" json:"LastBenefitAt,omitempty" sql:"last_benefit_at"`
	// @inject_tag: sql:"benefit_state"
	BenefitStateStr string          `protobuf:"bytes,380,opt,name=BenefitStateStr,proto3" json:"BenefitStateStr,omitempty" sql:"benefit_state"`
	BenefitState    v1.BenefitState `protobuf:"varint,390,opt,name=BenefitState,proto3,enum=basetypes.order.v1.BenefitState" json:"BenefitState,omitempty"`
	// @inject_tag: sql:"user_set_paid"
	UserSetPaid bool `protobuf:"varint,400,opt,name=UserSetPaid,proto3" json:"UserSetPaid,omitempty" sql:"user_set_paid"`
	// @inject_tag: sql:"user_set_canceled"
	UserSetCanceled bool `protobuf:"varint,410,opt,name=UserSetCanceled,proto3" json:"UserSetCanceled,omitempty" sql:"user_set_canceled"`
	// @inject_tag: sql:"admin_set_canceled"
	AdminSetCanceled bool `protobuf:"varint,411,opt,name=AdminSetCanceled,proto3" json:"AdminSetCanceled,omitempty" sql:"admin_set_canceled"`
	// @inject_tag: sql:"payment_transaction_id"
	PaymentTransactionID string `protobuf:"bytes,420,opt,name=PaymentTransactionID,proto3" json:"PaymentTransactionID,omitempty" sql:"payment_transaction_id"`
	// @inject_tag: sql:"payment_finish_amount"
	PaymentFinishAmount string `protobuf:"bytes,430,opt,name=PaymentFinishAmount,proto3" json:"PaymentFinishAmount,omitempty" sql:"payment_finish_amount"`
	// @inject_tag: sql:"payment_state"
	PaymentStateStr string          `protobuf:"bytes,440,opt,name=PaymentStateStr,proto3" json:"PaymentStateStr,omitempty" sql:"payment_state"`
	PaymentState    v1.PaymentState `protobuf:"varint,450,opt,name=PaymentState,proto3,enum=basetypes.order.v1.PaymentState" json:"PaymentState,omitempty"`
	// @inject_tag: sql:"outofgas_hours"
	OutOfGasHours uint32 `protobuf:"varint,460,opt,name=OutOfGasHours,proto3" json:"OutOfGasHours,omitempty" sql:"outofgas_hours"`
	// @inject_tag: sql:"compensate_hours"
	CompensateHours uint32 `protobuf:"varint,470,opt,name=CompensateHours,proto3" json:"CompensateHours,omitempty" sql:"compensate_hours"`
	// @inject_tag: sql:"cancel_state"
	CancelStateStr string        `protobuf:"bytes,480,opt,name=CancelStateStr,proto3" json:"CancelStateStr,omitempty" sql:"cancel_state"`
	CancelState    v1.OrderState `protobuf:"varint,490,opt,name=CancelState,proto3,enum=basetypes.order.v1.OrderState" json:"CancelState,omitempty"`
	// @inject_tag: sql:"paid_at"
	PaidAt uint32 `protobuf:"varint,500,opt,name=PaidAt,proto3" json:"PaidAt,omitempty" sql:"paid_at"`
	// @inject_tag: sql:"app_good_stock_lock_id"
	AppGoodStockLockID string `protobuf:"bytes,510,opt,name=AppGoodStockLockID,proto3" json:"AppGoodStockLockID,omitempty" sql:"app_good_stock_lock_id"`
	// @inject_tag: sql:"ledger_lock_id"
	LedgerLockID string `protobuf:"bytes,520,opt,name=LedgerLockID,proto3" json:"LedgerLockID,omitempty" sql:"ledger_lock_id"`
	// @inject_tag: sql:"renew_state"
	RenewStateStr string             `protobuf:"bytes,530,opt,name=RenewStateStr,proto3" json:"RenewStateStr,omitempty" sql:"renew_state"`
	RenewState    v1.OrderRenewState `protobuf:"varint,540,opt,name=RenewState,proto3,enum=basetypes.order.v1.OrderRenewState" json:"RenewState,omitempty"`
	// @inject_tag: sql:"renew_notify_at"
	RenewNotifyAt uint32 `protobuf:"varint,550,opt,name=RenewNotifyAt,proto3" json:"RenewNotifyAt,omitempty" sql:"renew_notify_at"`
	// simulate
	// @inject_tag: sql:"simulate"
	Simulate bool `protobuf:"varint,560,opt,name=Simulate,proto3" json:"Simulate,omitempty" sql:"simulate"`
	// @inject_tag: sql:"created_at"
	CreatedAt uint32 `protobuf:"varint,1000,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
	// @inject_tag: sql:"updated_at"
	UpdatedAt uint32 `protobuf:"varint,1010,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty" sql:"updated_at"`
}

func (x *PowerRentalOrder) Reset() {
	*x = PowerRentalOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerRentalOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerRentalOrder) ProtoMessage() {}

func (x *PowerRentalOrder) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerRentalOrder.ProtoReflect.Descriptor instead.
func (*PowerRentalOrder) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{2}
}

func (x *PowerRentalOrder) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *PowerRentalOrder) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *PowerRentalOrder) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *PowerRentalOrder) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *PowerRentalOrder) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *PowerRentalOrder) GetAppGoodID() string {
	if x != nil {
		return x.AppGoodID
	}
	return ""
}

func (x *PowerRentalOrder) GetAppGoodStockID() string {
	if x != nil {
		return x.AppGoodStockID
	}
	return ""
}

func (x *PowerRentalOrder) GetPaymentID() string {
	if x != nil {
		return x.PaymentID
	}
	return ""
}

func (x *PowerRentalOrder) GetParentOrderID() string {
	if x != nil {
		return x.ParentOrderID
	}
	return ""
}

func (x *PowerRentalOrder) GetUnits() string {
	if x != nil {
		return x.Units
	}
	return ""
}

func (x *PowerRentalOrder) GetGoodValue() string {
	if x != nil {
		return x.GoodValue
	}
	return ""
}

func (x *PowerRentalOrder) GetGoodValueUSD() string {
	if x != nil {
		return x.GoodValueUSD
	}
	return ""
}

func (x *PowerRentalOrder) GetPaymentAmount() string {
	if x != nil {
		return x.PaymentAmount
	}
	return ""
}

func (x *PowerRentalOrder) GetDiscountAmount() string {
	if x != nil {
		return x.DiscountAmount
	}
	return ""
}

func (x *PowerRentalOrder) GetPromotionID() string {
	if x != nil {
		return x.PromotionID
	}
	return ""
}

func (x *PowerRentalOrder) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *PowerRentalOrder) GetOrderTypeStr() string {
	if x != nil {
		return x.OrderTypeStr
	}
	return ""
}

func (x *PowerRentalOrder) GetOrderType() v1.OrderType {
	if x != nil {
		return x.OrderType
	}
	return v1.OrderType(0)
}

func (x *PowerRentalOrder) GetInvestmentTypeStr() string {
	if x != nil {
		return x.InvestmentTypeStr
	}
	return ""
}

func (x *PowerRentalOrder) GetInvestmentType() v1.InvestmentType {
	if x != nil {
		return x.InvestmentType
	}
	return v1.InvestmentType(0)
}

func (x *PowerRentalOrder) GetCouponIDsStr() string {
	if x != nil {
		return x.CouponIDsStr
	}
	return ""
}

func (x *PowerRentalOrder) GetCouponIDs() []string {
	if x != nil {
		return x.CouponIDs
	}
	return nil
}

func (x *PowerRentalOrder) GetPaymentTypeStr() string {
	if x != nil {
		return x.PaymentTypeStr
	}
	return ""
}

func (x *PowerRentalOrder) GetPaymentType() v1.PaymentType {
	if x != nil {
		return x.PaymentType
	}
	return v1.PaymentType(0)
}

func (x *PowerRentalOrder) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

func (x *PowerRentalOrder) GetPaymentCoinTypeID() string {
	if x != nil {
		return x.PaymentCoinTypeID
	}
	return ""
}

func (x *PowerRentalOrder) GetTransferAmount() string {
	if x != nil {
		return x.TransferAmount
	}
	return ""
}

func (x *PowerRentalOrder) GetBalanceAmount() string {
	if x != nil {
		return x.BalanceAmount
	}
	return ""
}

func (x *PowerRentalOrder) GetCoinUSDCurrency() string {
	if x != nil {
		return x.CoinUSDCurrency
	}
	return ""
}

func (x *PowerRentalOrder) GetLocalCoinUSDCurrency() string {
	if x != nil {
		return x.LocalCoinUSDCurrency
	}
	return ""
}

func (x *PowerRentalOrder) GetLiveCoinUSDCurrency() string {
	if x != nil {
		return x.LiveCoinUSDCurrency
	}
	return ""
}

func (x *PowerRentalOrder) GetCreateMethodStr() string {
	if x != nil {
		return x.CreateMethodStr
	}
	return ""
}

func (x *PowerRentalOrder) GetCreateMethod() v1.OrderCreateMethod {
	if x != nil {
		return x.CreateMethod
	}
	return v1.OrderCreateMethod(0)
}

func (x *PowerRentalOrder) GetMultiPaymentCoins() bool {
	if x != nil {
		return x.MultiPaymentCoins
	}
	return false
}

func (x *PowerRentalOrder) GetPaymentAmountsStr() string {
	if x != nil {
		return x.PaymentAmountsStr
	}
	return ""
}

func (x *PowerRentalOrder) GetPaymentAmounts() []*PaymentAmount {
	if x != nil {
		return x.PaymentAmounts
	}
	return nil
}

func (x *PowerRentalOrder) GetPaymentAccountID() string {
	if x != nil {
		return x.PaymentAccountID
	}
	return ""
}

func (x *PowerRentalOrder) GetPaymentStartAmount() string {
	if x != nil {
		return x.PaymentStartAmount
	}
	return ""
}

func (x *PowerRentalOrder) GetOrderStateID() string {
	if x != nil {
		return x.OrderStateID
	}
	return ""
}

func (x *PowerRentalOrder) GetOrderStateStr() string {
	if x != nil {
		return x.OrderStateStr
	}
	return ""
}

func (x *PowerRentalOrder) GetOrderState() v1.OrderState {
	if x != nil {
		return x.OrderState
	}
	return v1.OrderState(0)
}

func (x *PowerRentalOrder) GetStartModeStr() string {
	if x != nil {
		return x.StartModeStr
	}
	return ""
}

func (x *PowerRentalOrder) GetStartMode() v1.OrderStartMode {
	if x != nil {
		return x.StartMode
	}
	return v1.OrderStartMode(0)
}

func (x *PowerRentalOrder) GetStartAt() uint32 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *PowerRentalOrder) GetEndAt() uint32 {
	if x != nil {
		return x.EndAt
	}
	return 0
}

func (x *PowerRentalOrder) GetLastBenefitAt() uint32 {
	if x != nil {
		return x.LastBenefitAt
	}
	return 0
}

func (x *PowerRentalOrder) GetBenefitStateStr() string {
	if x != nil {
		return x.BenefitStateStr
	}
	return ""
}

func (x *PowerRentalOrder) GetBenefitState() v1.BenefitState {
	if x != nil {
		return x.BenefitState
	}
	return v1.BenefitState(0)
}

func (x *PowerRentalOrder) GetUserSetPaid() bool {
	if x != nil {
		return x.UserSetPaid
	}
	return false
}

func (x *PowerRentalOrder) GetUserSetCanceled() bool {
	if x != nil {
		return x.UserSetCanceled
	}
	return false
}

func (x *PowerRentalOrder) GetAdminSetCanceled() bool {
	if x != nil {
		return x.AdminSetCanceled
	}
	return false
}

func (x *PowerRentalOrder) GetPaymentTransactionID() string {
	if x != nil {
		return x.PaymentTransactionID
	}
	return ""
}

func (x *PowerRentalOrder) GetPaymentFinishAmount() string {
	if x != nil {
		return x.PaymentFinishAmount
	}
	return ""
}

func (x *PowerRentalOrder) GetPaymentStateStr() string {
	if x != nil {
		return x.PaymentStateStr
	}
	return ""
}

func (x *PowerRentalOrder) GetPaymentState() v1.PaymentState {
	if x != nil {
		return x.PaymentState
	}
	return v1.PaymentState(0)
}

func (x *PowerRentalOrder) GetOutOfGasHours() uint32 {
	if x != nil {
		return x.OutOfGasHours
	}
	return 0
}

func (x *PowerRentalOrder) GetCompensateHours() uint32 {
	if x != nil {
		return x.CompensateHours
	}
	return 0
}

func (x *PowerRentalOrder) GetCancelStateStr() string {
	if x != nil {
		return x.CancelStateStr
	}
	return ""
}

func (x *PowerRentalOrder) GetCancelState() v1.OrderState {
	if x != nil {
		return x.CancelState
	}
	return v1.OrderState(0)
}

func (x *PowerRentalOrder) GetPaidAt() uint32 {
	if x != nil {
		return x.PaidAt
	}
	return 0
}

func (x *PowerRentalOrder) GetAppGoodStockLockID() string {
	if x != nil {
		return x.AppGoodStockLockID
	}
	return ""
}

func (x *PowerRentalOrder) GetLedgerLockID() string {
	if x != nil {
		return x.LedgerLockID
	}
	return ""
}

func (x *PowerRentalOrder) GetRenewStateStr() string {
	if x != nil {
		return x.RenewStateStr
	}
	return ""
}

func (x *PowerRentalOrder) GetRenewState() v1.OrderRenewState {
	if x != nil {
		return x.RenewState
	}
	return v1.OrderRenewState(0)
}

func (x *PowerRentalOrder) GetRenewNotifyAt() uint32 {
	if x != nil {
		return x.RenewNotifyAt
	}
	return 0
}

func (x *PowerRentalOrder) GetSimulate() bool {
	if x != nil {
		return x.Simulate
	}
	return false
}

func (x *PowerRentalOrder) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *PowerRentalOrder) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// order
	ID                *v11.Uint32Val      `protobuf:"bytes,9,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID             *v11.StringVal      `protobuf:"bytes,10,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	AppID             *v11.StringVal      `protobuf:"bytes,20,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	UserID            *v11.StringVal      `protobuf:"bytes,30,opt,name=UserID,proto3,oneof" json:"UserID,omitempty"`
	GoodID            *v11.StringVal      `protobuf:"bytes,40,opt,name=GoodID,proto3,oneof" json:"GoodID,omitempty"`
	AppGoodID         *v11.StringVal      `protobuf:"bytes,50,opt,name=AppGoodID,proto3,oneof" json:"AppGoodID,omitempty"`
	ParentOrderID     *v11.StringVal      `protobuf:"bytes,60,opt,name=ParentOrderID,proto3,oneof" json:"ParentOrderID,omitempty"`
	PaymentAmount     *v11.StringVal      `protobuf:"bytes,70,opt,name=PaymentAmount,proto3,oneof" json:"PaymentAmount,omitempty"`
	OrderType         *v11.Uint32Val      `protobuf:"bytes,80,opt,name=OrderType,proto3,oneof" json:"OrderType,omitempty"`
	InvestmentType    *v11.Uint32Val      `protobuf:"bytes,90,opt,name=InvestmentType,proto3,oneof" json:"InvestmentType,omitempty"`
	CouponIDs         *v11.StringSliceVal `protobuf:"bytes,100,opt,name=CouponIDs,proto3,oneof" json:"CouponIDs,omitempty"`
	PaymentType       *v11.Uint32Val      `protobuf:"bytes,110,opt,name=PaymentType,proto3,oneof" json:"PaymentType,omitempty"`
	CoinTypeID        *v11.StringVal      `protobuf:"bytes,120,opt,name=CoinTypeID,proto3,oneof" json:"CoinTypeID,omitempty"`
	PaymentCoinTypeID *v11.StringVal      `protobuf:"bytes,130,opt,name=PaymentCoinTypeID,proto3,oneof" json:"PaymentCoinTypeID,omitempty"`
	// orderstate
	OrderState           *v11.Uint32Val `protobuf:"bytes,140,opt,name=OrderState,proto3,oneof" json:"OrderState,omitempty"`
	StartMode            *v11.Uint32Val `protobuf:"bytes,150,opt,name=StartMode,proto3,oneof" json:"StartMode,omitempty"`
	LastBenefitAt        *v11.Uint32Val `protobuf:"bytes,160,opt,name=LastBenefitAt,proto3,oneof" json:"LastBenefitAt,omitempty"`
	BenefitState         *v11.Uint32Val `protobuf:"bytes,170,opt,name=BenefitState,proto3,oneof" json:"BenefitState,omitempty"`
	PaymentTransactionID *v11.StringVal `protobuf:"bytes,180,opt,name=PaymentTransactionID,proto3,oneof" json:"PaymentTransactionID,omitempty"`
	PaymentState         *v11.Uint32Val `protobuf:"bytes,190,opt,name=PaymentState,proto3,oneof" json:"PaymentState,omitempty"`
	// other
	IDs              *v11.Uint32SliceVal `protobuf:"bytes,199,opt,name=IDs,proto3,oneof" json:"IDs,omitempty"`
	EntIDs           *v11.StringSliceVal `protobuf:"bytes,200,opt,name=EntIDs,proto3,oneof" json:"EntIDs,omitempty"`
	CouponID         *v11.StringVal      `protobuf:"bytes,210,opt,name=CouponID,proto3,oneof" json:"CouponID,omitempty"`
	OrderStates      *v11.Uint32SliceVal `protobuf:"bytes,220,opt,name=OrderStates,proto3,oneof" json:"OrderStates,omitempty"`
	PaymentTypes     *v11.Uint32SliceVal `protobuf:"bytes,230,opt,name=PaymentTypes,proto3,oneof" json:"PaymentTypes,omitempty"`
	CreatedAt        *v11.Uint32Val      `protobuf:"bytes,240,opt,name=CreatedAt,proto3,oneof" json:"CreatedAt,omitempty"`
	UpdatedAt        *v11.Uint32Val      `protobuf:"bytes,250,opt,name=UpdatedAt,proto3,oneof" json:"UpdatedAt,omitempty"`
	AdminSetCanceled *v11.BoolVal        `protobuf:"bytes,260,opt,name=AdminSetCanceled,proto3,oneof" json:"AdminSetCanceled,omitempty"`
	UserSetCanceled  *v11.BoolVal        `protobuf:"bytes,270,opt,name=UserSetCanceled,proto3,oneof" json:"UserSetCanceled,omitempty"`
	ParentOrderIDs   *v11.StringSliceVal `protobuf:"bytes,280,opt,name=ParentOrderIDs,proto3,oneof" json:"ParentOrderIDs,omitempty"`
	RenewState       *v11.Uint32Val      `protobuf:"bytes,290,opt,name=RenewState,proto3,oneof" json:"RenewState,omitempty"`
	GoodIDs          *v11.StringSliceVal `protobuf:"bytes,300,opt,name=GoodIDs,proto3,oneof" json:"GoodIDs,omitempty"`
	AppGoodIDs       *v11.StringSliceVal `protobuf:"bytes,310,opt,name=AppGoodIDs,proto3,oneof" json:"AppGoodIDs,omitempty"`
	RenewNotifyAt    *v11.Uint32Val      `protobuf:"bytes,320,opt,name=RenewNotifyAt,proto3,oneof" json:"RenewNotifyAt,omitempty"`
	Simulate         *v11.BoolVal        `protobuf:"bytes,330,opt,name=Simulate,proto3,oneof" json:"Simulate,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{3}
}

func (x *Conds) GetID() *v11.Uint32Val {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetEntID() *v11.StringVal {
	if x != nil {
		return x.EntID
	}
	return nil
}

func (x *Conds) GetAppID() *v11.StringVal {
	if x != nil {
		return x.AppID
	}
	return nil
}

func (x *Conds) GetUserID() *v11.StringVal {
	if x != nil {
		return x.UserID
	}
	return nil
}

func (x *Conds) GetGoodID() *v11.StringVal {
	if x != nil {
		return x.GoodID
	}
	return nil
}

func (x *Conds) GetAppGoodID() *v11.StringVal {
	if x != nil {
		return x.AppGoodID
	}
	return nil
}

func (x *Conds) GetParentOrderID() *v11.StringVal {
	if x != nil {
		return x.ParentOrderID
	}
	return nil
}

func (x *Conds) GetPaymentAmount() *v11.StringVal {
	if x != nil {
		return x.PaymentAmount
	}
	return nil
}

func (x *Conds) GetOrderType() *v11.Uint32Val {
	if x != nil {
		return x.OrderType
	}
	return nil
}

func (x *Conds) GetInvestmentType() *v11.Uint32Val {
	if x != nil {
		return x.InvestmentType
	}
	return nil
}

func (x *Conds) GetCouponIDs() *v11.StringSliceVal {
	if x != nil {
		return x.CouponIDs
	}
	return nil
}

func (x *Conds) GetPaymentType() *v11.Uint32Val {
	if x != nil {
		return x.PaymentType
	}
	return nil
}

func (x *Conds) GetCoinTypeID() *v11.StringVal {
	if x != nil {
		return x.CoinTypeID
	}
	return nil
}

func (x *Conds) GetPaymentCoinTypeID() *v11.StringVal {
	if x != nil {
		return x.PaymentCoinTypeID
	}
	return nil
}

func (x *Conds) GetOrderState() *v11.Uint32Val {
	if x != nil {
		return x.OrderState
	}
	return nil
}

func (x *Conds) GetStartMode() *v11.Uint32Val {
	if x != nil {
		return x.StartMode
	}
	return nil
}

func (x *Conds) GetLastBenefitAt() *v11.Uint32Val {
	if x != nil {
		return x.LastBenefitAt
	}
	return nil
}

func (x *Conds) GetBenefitState() *v11.Uint32Val {
	if x != nil {
		return x.BenefitState
	}
	return nil
}

func (x *Conds) GetPaymentTransactionID() *v11.StringVal {
	if x != nil {
		return x.PaymentTransactionID
	}
	return nil
}

func (x *Conds) GetPaymentState() *v11.Uint32Val {
	if x != nil {
		return x.PaymentState
	}
	return nil
}

func (x *Conds) GetIDs() *v11.Uint32SliceVal {
	if x != nil {
		return x.IDs
	}
	return nil
}

func (x *Conds) GetEntIDs() *v11.StringSliceVal {
	if x != nil {
		return x.EntIDs
	}
	return nil
}

func (x *Conds) GetCouponID() *v11.StringVal {
	if x != nil {
		return x.CouponID
	}
	return nil
}

func (x *Conds) GetOrderStates() *v11.Uint32SliceVal {
	if x != nil {
		return x.OrderStates
	}
	return nil
}

func (x *Conds) GetPaymentTypes() *v11.Uint32SliceVal {
	if x != nil {
		return x.PaymentTypes
	}
	return nil
}

func (x *Conds) GetCreatedAt() *v11.Uint32Val {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Conds) GetUpdatedAt() *v11.Uint32Val {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Conds) GetAdminSetCanceled() *v11.BoolVal {
	if x != nil {
		return x.AdminSetCanceled
	}
	return nil
}

func (x *Conds) GetUserSetCanceled() *v11.BoolVal {
	if x != nil {
		return x.UserSetCanceled
	}
	return nil
}

func (x *Conds) GetParentOrderIDs() *v11.StringSliceVal {
	if x != nil {
		return x.ParentOrderIDs
	}
	return nil
}

func (x *Conds) GetRenewState() *v11.Uint32Val {
	if x != nil {
		return x.RenewState
	}
	return nil
}

func (x *Conds) GetGoodIDs() *v11.StringSliceVal {
	if x != nil {
		return x.GoodIDs
	}
	return nil
}

func (x *Conds) GetAppGoodIDs() *v11.StringSliceVal {
	if x != nil {
		return x.AppGoodIDs
	}
	return nil
}

func (x *Conds) GetRenewNotifyAt() *v11.Uint32Val {
	if x != nil {
		return x.RenewNotifyAt
	}
	return nil
}

func (x *Conds) GetSimulate() *v11.BoolVal {
	if x != nil {
		return x.Simulate
	}
	return nil
}

type CreatePowerRentalOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PowerRentalOrderReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreatePowerRentalOrderRequest) Reset() {
	*x = CreatePowerRentalOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePowerRentalOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePowerRentalOrderRequest) ProtoMessage() {}

func (x *CreatePowerRentalOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePowerRentalOrderRequest.ProtoReflect.Descriptor instead.
func (*CreatePowerRentalOrderRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{4}
}

func (x *CreatePowerRentalOrderRequest) GetInfo() *PowerRentalOrderReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreatePowerRentalOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PowerRentalOrder `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreatePowerRentalOrderResponse) Reset() {
	*x = CreatePowerRentalOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePowerRentalOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePowerRentalOrderResponse) ProtoMessage() {}

func (x *CreatePowerRentalOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePowerRentalOrderResponse.ProtoReflect.Descriptor instead.
func (*CreatePowerRentalOrderResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{5}
}

func (x *CreatePowerRentalOrderResponse) GetInfo() *PowerRentalOrder {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreatePowerRentalOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*PowerRentalOrderReq `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreatePowerRentalOrdersRequest) Reset() {
	*x = CreatePowerRentalOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePowerRentalOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePowerRentalOrdersRequest) ProtoMessage() {}

func (x *CreatePowerRentalOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePowerRentalOrdersRequest.ProtoReflect.Descriptor instead.
func (*CreatePowerRentalOrdersRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{6}
}

func (x *CreatePowerRentalOrdersRequest) GetInfos() []*PowerRentalOrderReq {
	if x != nil {
		return x.Infos
	}
	return nil
}

type CreatePowerRentalOrdersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*PowerRentalOrder `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreatePowerRentalOrdersResponse) Reset() {
	*x = CreatePowerRentalOrdersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePowerRentalOrdersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePowerRentalOrdersResponse) ProtoMessage() {}

func (x *CreatePowerRentalOrdersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePowerRentalOrdersResponse.ProtoReflect.Descriptor instead.
func (*CreatePowerRentalOrdersResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{7}
}

func (x *CreatePowerRentalOrdersResponse) GetInfos() []*PowerRentalOrder {
	if x != nil {
		return x.Infos
	}
	return nil
}

type UpdatePowerRentalOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PowerRentalOrderReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdatePowerRentalOrderRequest) Reset() {
	*x = UpdatePowerRentalOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePowerRentalOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePowerRentalOrderRequest) ProtoMessage() {}

func (x *UpdatePowerRentalOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePowerRentalOrderRequest.ProtoReflect.Descriptor instead.
func (*UpdatePowerRentalOrderRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{8}
}

func (x *UpdatePowerRentalOrderRequest) GetInfo() *PowerRentalOrderReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdatePowerRentalOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PowerRentalOrder `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdatePowerRentalOrderResponse) Reset() {
	*x = UpdatePowerRentalOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePowerRentalOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePowerRentalOrderResponse) ProtoMessage() {}

func (x *UpdatePowerRentalOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePowerRentalOrderResponse.ProtoReflect.Descriptor instead.
func (*UpdatePowerRentalOrderResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{9}
}

func (x *UpdatePowerRentalOrderResponse) GetInfo() *PowerRentalOrder {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdatePowerRentalOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*PowerRentalOrderReq `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *UpdatePowerRentalOrdersRequest) Reset() {
	*x = UpdatePowerRentalOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePowerRentalOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePowerRentalOrdersRequest) ProtoMessage() {}

func (x *UpdatePowerRentalOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePowerRentalOrdersRequest.ProtoReflect.Descriptor instead.
func (*UpdatePowerRentalOrdersRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{10}
}

func (x *UpdatePowerRentalOrdersRequest) GetInfos() []*PowerRentalOrderReq {
	if x != nil {
		return x.Infos
	}
	return nil
}

type UpdatePowerRentalOrdersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*PowerRentalOrder `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *UpdatePowerRentalOrdersResponse) Reset() {
	*x = UpdatePowerRentalOrdersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePowerRentalOrdersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePowerRentalOrdersResponse) ProtoMessage() {}

func (x *UpdatePowerRentalOrdersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePowerRentalOrdersResponse.ProtoReflect.Descriptor instead.
func (*UpdatePowerRentalOrdersResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{11}
}

func (x *UpdatePowerRentalOrdersResponse) GetInfos() []*PowerRentalOrder {
	if x != nil {
		return x.Infos
	}
	return nil
}

type GetPowerRentalOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntID string `protobuf:"bytes,10,opt,name=EntID,proto3" json:"EntID,omitempty"`
}

func (x *GetPowerRentalOrderRequest) Reset() {
	*x = GetPowerRentalOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPowerRentalOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPowerRentalOrderRequest) ProtoMessage() {}

func (x *GetPowerRentalOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPowerRentalOrderRequest.ProtoReflect.Descriptor instead.
func (*GetPowerRentalOrderRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{12}
}

func (x *GetPowerRentalOrderRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

type GetPowerRentalOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PowerRentalOrder `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetPowerRentalOrderResponse) Reset() {
	*x = GetPowerRentalOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPowerRentalOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPowerRentalOrderResponse) ProtoMessage() {}

func (x *GetPowerRentalOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPowerRentalOrderResponse.ProtoReflect.Descriptor instead.
func (*GetPowerRentalOrderResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{13}
}

func (x *GetPowerRentalOrderResponse) GetInfo() *PowerRentalOrder {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetPowerRentalOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,30,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,40,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetPowerRentalOrdersRequest) Reset() {
	*x = GetPowerRentalOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPowerRentalOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPowerRentalOrdersRequest) ProtoMessage() {}

func (x *GetPowerRentalOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPowerRentalOrdersRequest.ProtoReflect.Descriptor instead.
func (*GetPowerRentalOrdersRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{14}
}

func (x *GetPowerRentalOrdersRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetPowerRentalOrdersRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetPowerRentalOrdersRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetPowerRentalOrdersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*PowerRentalOrder `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32              `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetPowerRentalOrdersResponse) Reset() {
	*x = GetPowerRentalOrdersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPowerRentalOrdersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPowerRentalOrdersResponse) ProtoMessage() {}

func (x *GetPowerRentalOrdersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPowerRentalOrdersResponse.ProtoReflect.Descriptor instead.
func (*GetPowerRentalOrdersResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{15}
}

func (x *GetPowerRentalOrdersResponse) GetInfos() []*PowerRentalOrder {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetPowerRentalOrdersResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type OrderSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count          uint32           `protobuf:"varint,10,opt,name=Count,proto3" json:"Count,omitempty"`
	Units          string           `protobuf:"bytes,20,opt,name=Units,proto3" json:"Units,omitempty"`
	USDAmount      string           `protobuf:"bytes,30,opt,name=USDAmount,proto3" json:"USDAmount,omitempty"`
	PaymentAmounts []*PaymentAmount `protobuf:"bytes,40,rep,name=PaymentAmounts,proto3" json:"PaymentAmounts,omitempty"`
}

func (x *OrderSummary) Reset() {
	*x = OrderSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderSummary) ProtoMessage() {}

func (x *OrderSummary) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderSummary.ProtoReflect.Descriptor instead.
func (*OrderSummary) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{16}
}

func (x *OrderSummary) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *OrderSummary) GetUnits() string {
	if x != nil {
		return x.Units
	}
	return ""
}

func (x *OrderSummary) GetUSDAmount() string {
	if x != nil {
		return x.USDAmount
	}
	return ""
}

func (x *OrderSummary) GetPaymentAmounts() []*PaymentAmount {
	if x != nil {
		return x.PaymentAmounts
	}
	return nil
}

type SumPowerRentalOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *SumPowerRentalOrdersRequest) Reset() {
	*x = SumPowerRentalOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SumPowerRentalOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumPowerRentalOrdersRequest) ProtoMessage() {}

func (x *SumPowerRentalOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SumPowerRentalOrdersRequest.ProtoReflect.Descriptor instead.
func (*SumPowerRentalOrdersRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{17}
}

func (x *SumPowerRentalOrdersRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type SumPowerRentalOrdersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *OrderSummary `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *SumPowerRentalOrdersResponse) Reset() {
	*x = SumPowerRentalOrdersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SumPowerRentalOrdersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumPowerRentalOrdersResponse) ProtoMessage() {}

func (x *SumPowerRentalOrdersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SumPowerRentalOrdersResponse.ProtoReflect.Descriptor instead.
func (*SumPowerRentalOrdersResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{18}
}

func (x *SumPowerRentalOrdersResponse) GetInfo() *OrderSummary {
	if x != nil {
		return x.Info
	}
	return nil
}

type CountPowerRentalOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *CountPowerRentalOrdersRequest) Reset() {
	*x = CountPowerRentalOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountPowerRentalOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountPowerRentalOrdersRequest) ProtoMessage() {}

func (x *CountPowerRentalOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountPowerRentalOrdersRequest.ProtoReflect.Descriptor instead.
func (*CountPowerRentalOrdersRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{19}
}

func (x *CountPowerRentalOrdersRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type CountPowerRentalOrdersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info uint32 `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CountPowerRentalOrdersResponse) Reset() {
	*x = CountPowerRentalOrdersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountPowerRentalOrdersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountPowerRentalOrdersResponse) ProtoMessage() {}

func (x *CountPowerRentalOrdersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountPowerRentalOrdersResponse.ProtoReflect.Descriptor instead.
func (*CountPowerRentalOrdersResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{20}
}

func (x *CountPowerRentalOrdersResponse) GetInfo() uint32 {
	if x != nil {
		return x.Info
	}
	return 0
}

type ExistPowerRentalOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntID string `protobuf:"bytes,10,opt,name=EntID,proto3" json:"EntID,omitempty"`
}

func (x *ExistPowerRentalOrderRequest) Reset() {
	*x = ExistPowerRentalOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistPowerRentalOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistPowerRentalOrderRequest) ProtoMessage() {}

func (x *ExistPowerRentalOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistPowerRentalOrderRequest.ProtoReflect.Descriptor instead.
func (*ExistPowerRentalOrderRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{21}
}

func (x *ExistPowerRentalOrderRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

type ExistPowerRentalOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistPowerRentalOrderResponse) Reset() {
	*x = ExistPowerRentalOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistPowerRentalOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistPowerRentalOrderResponse) ProtoMessage() {}

func (x *ExistPowerRentalOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistPowerRentalOrderResponse.ProtoReflect.Descriptor instead.
func (*ExistPowerRentalOrderResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{22}
}

func (x *ExistPowerRentalOrderResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type ExistPowerRentalOrderCondsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *ExistPowerRentalOrderCondsRequest) Reset() {
	*x = ExistPowerRentalOrderCondsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistPowerRentalOrderCondsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistPowerRentalOrderCondsRequest) ProtoMessage() {}

func (x *ExistPowerRentalOrderCondsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistPowerRentalOrderCondsRequest.ProtoReflect.Descriptor instead.
func (*ExistPowerRentalOrderCondsRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{23}
}

func (x *ExistPowerRentalOrderCondsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type ExistPowerRentalOrderCondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistPowerRentalOrderCondsResponse) Reset() {
	*x = ExistPowerRentalOrderCondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistPowerRentalOrderCondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistPowerRentalOrderCondsResponse) ProtoMessage() {}

func (x *ExistPowerRentalOrderCondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistPowerRentalOrderCondsResponse.ProtoReflect.Descriptor instead.
func (*ExistPowerRentalOrderCondsResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{24}
}

func (x *ExistPowerRentalOrderCondsResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type DeletePowerRentalOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PowerRentalOrderReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeletePowerRentalOrderRequest) Reset() {
	*x = DeletePowerRentalOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePowerRentalOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePowerRentalOrderRequest) ProtoMessage() {}

func (x *DeletePowerRentalOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePowerRentalOrderRequest.ProtoReflect.Descriptor instead.
func (*DeletePowerRentalOrderRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{25}
}

func (x *DeletePowerRentalOrderRequest) GetInfo() *PowerRentalOrderReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type DeletePowerRentalOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PowerRentalOrder `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeletePowerRentalOrderResponse) Reset() {
	*x = DeletePowerRentalOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePowerRentalOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePowerRentalOrderResponse) ProtoMessage() {}

func (x *DeletePowerRentalOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePowerRentalOrderResponse.ProtoReflect.Descriptor instead.
func (*DeletePowerRentalOrderResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{26}
}

func (x *DeletePowerRentalOrderResponse) GetInfo() *PowerRentalOrder {
	if x != nil {
		return x.Info
	}
	return nil
}

type DeletePowerRentalOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*PowerRentalOrderReq `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *DeletePowerRentalOrdersRequest) Reset() {
	*x = DeletePowerRentalOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePowerRentalOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePowerRentalOrdersRequest) ProtoMessage() {}

func (x *DeletePowerRentalOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePowerRentalOrdersRequest.ProtoReflect.Descriptor instead.
func (*DeletePowerRentalOrdersRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{27}
}

func (x *DeletePowerRentalOrdersRequest) GetInfos() []*PowerRentalOrderReq {
	if x != nil {
		return x.Infos
	}
	return nil
}

type DeletePowerRentalOrdersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*PowerRentalOrder `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *DeletePowerRentalOrdersResponse) Reset() {
	*x = DeletePowerRentalOrdersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePowerRentalOrdersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePowerRentalOrdersResponse) ProtoMessage() {}

func (x *DeletePowerRentalOrdersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePowerRentalOrdersResponse.ProtoReflect.Descriptor instead.
func (*DeletePowerRentalOrdersResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{28}
}

func (x *DeletePowerRentalOrdersResponse) GetInfos() []*PowerRentalOrder {
	if x != nil {
		return x.Infos
	}
	return nil
}

var File_npool_order_mw_v1_powerrental_powerrental_proto protoreflect.FileDescriptor

var file_npool_order_mw_v1_powerrental_powerrental_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x6d, 0x77,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2f,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x24, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x69, 0x0a, 0x0d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x55, 0x53, 0x44, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x55, 0x53,
	0x44, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xb2, 0x19, 0x0a, 0x13, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x21,
	0x0a, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x05, 0x52, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x29, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0d, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x55, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x05, 0x55,
	0x6e, 0x69, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x47, 0x6f, 0x6f, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x09, 0x47, 0x6f,
	0x6f, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x47, 0x6f,
	0x6f, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x53, 0x44, 0x18, 0x51, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x09, 0x52, 0x0c, 0x47, 0x6f, 0x6f, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x53, 0x44,
	0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0d, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x0e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x50,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0c, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x78,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x0d, 0x52, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x48, 0x0e, 0x52, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x0f, 0x52, 0x0e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x49, 0x44, 0x73, 0x18, 0x96, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x12, 0x47, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x10,
	0x52, 0x0b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0xaa,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x11, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0xab, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x12, 0x52, 0x11, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xb4, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0d, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x14, 0x52, 0x0d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0f, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x53, 0x44, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15,
	0x52, 0x0f, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x53, 0x44, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x14, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x69,
	0x6e, 0x55, 0x53, 0x44, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0xd2, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x14, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e,
	0x55, 0x53, 0x44, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x36,
	0x0a, 0x13, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x53, 0x44, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x13,
	0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x53, 0x44, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0xdd, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x48, 0x18, 0x52, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x11, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0xde, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x19, 0x52, 0x11, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x57, 0x0a, 0x0e, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0xdf, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x10, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0xe6, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x1a, 0x52, 0x10, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x12, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xf0, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x12, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0a,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0xfa, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x48, 0x1c, 0x52, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x46, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18,
	0x84, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x1d, 0x52, 0x09, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x07, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x8e, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x1e, 0x52, 0x07,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x05, 0x45, 0x6e,
	0x64, 0x41, 0x74, 0x18, 0x98, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x1f, 0x52, 0x05, 0x45, 0x6e,
	0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x74, 0x41, 0x74, 0x18, 0xa2, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x20,
	0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x41, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0c, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x18, 0xac, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x21, 0x52, 0x0c, 0x42,
	0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26,
	0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x50, 0x61, 0x69, 0x64, 0x18, 0xb6, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x22, 0x52, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x50,
	0x61, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x18, 0xc0, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x23, 0x52, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x10, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53,
	0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x18, 0xc1, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x24, 0x52, 0x10, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x14, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0xca, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x25, 0x52, 0x14, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x12, 0x36, 0x0a, 0x13, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xd4, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x26, 0x52, 0x13, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0c, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0xde, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x48, 0x27, 0x52, 0x0c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0d, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x47,
	0x61, 0x73, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x18, 0xe8, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x28,
	0x52, 0x0d, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x47, 0x61, 0x73, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65,
	0x48, 0x6f, 0x75, 0x72, 0x73, 0x18, 0xf2, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x29, 0x52, 0x0f,
	0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x20, 0x0a, 0x08, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0xfc,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x2a, 0x52, 0x08, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x90, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x2b, 0x52, 0x12, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0c, 0x4c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x9a, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x2c, 0x52, 0x0c, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x6b, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x0a, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x18, 0xa4, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x2d,
	0x52, 0x0a, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0d, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x41, 0x74,
	0x18, 0xae, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x2e, 0x52, 0x0d, 0x52, 0x65, 0x6e, 0x65, 0x77,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x08, 0x53,
	0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x18, 0xb8, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x2f,
	0x52, 0x08, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x41, 0x70, 0x70, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x47, 0x6f, 0x6f,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x55, 0x53, 0x44, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x43,
	0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x53, 0x44,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x53, 0x44, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x53,
	0x44, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x41, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x41,
	0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x50, 0x61,
	0x69, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x53, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x42, 0x17, 0x0a, 0x15, 0x5f,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x47, 0x61, 0x73, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x48, 0x6f,
	0x75, 0x72, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b,
	0x42, 0x15, 0x0a, 0x13, 0x5f, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x4c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x52, 0x65, 0x6e,
	0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x52, 0x65, 0x6e, 0x65,
	0x77, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x41, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x53, 0x69,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x22, 0xed, 0x16, 0x0a, 0x10, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f,
	0x6f, 0x64, 0x49, 0x44, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x70, 0x70, 0x47,
	0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x41,
	0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x46, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x14, 0x0a, 0x05, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x6f, 0x6f, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x47, 0x6f, 0x6f, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x47, 0x6f, 0x6f, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x55, 0x53, 0x44, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x47, 0x6f, 0x6f,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x53, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x26, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x08, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x12, 0x3c, 0x0a, 0x09, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x11, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x18, 0xa0,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x12, 0x4b, 0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49,
	0x44, 0x73, 0x53, 0x74, 0x72, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x53, 0x74, 0x72, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x18, 0xbe, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x12, 0x27, 0x0a, 0x0e, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x18, 0xc8, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x53,
	0x74, 0x72, 0x12, 0x42, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x44, 0x18, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x11, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0xdd, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xe6, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x25, 0x0a, 0x0d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0xf0, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x0f, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x53,
	0x44, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x53, 0x44, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x33, 0x0a, 0x14, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x53,
	0x44, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x84, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x53, 0x44, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x31, 0x0a, 0x13, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f,
	0x69, 0x6e, 0x55, 0x53, 0x44, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x8e, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x53,
	0x44, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x29, 0x0a, 0x0f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x74, 0x72, 0x18, 0x8f, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x53, 0x74, 0x72, 0x12, 0x4a, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x90, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x52, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x2d, 0x0a, 0x11, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x91, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12,
	0x2d, 0x0a, 0x11, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x53, 0x74, 0x72, 0x18, 0x92, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x53, 0x74, 0x72, 0x12, 0x57,
	0x0a, 0x0e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x18, 0x93, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x10, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x98, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x12, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xa2, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x49, 0x44, 0x18, 0xac, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x0d, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x18, 0xb6, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x72, 0x12, 0x3f, 0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18,
	0xc0, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x53,
	0x74, 0x72, 0x18, 0xca, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x72, 0x12, 0x41, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x18, 0xd4, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x07, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0xde, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x15, 0x0a, 0x05, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18, 0xe8,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x25, 0x0a, 0x0d,
	0x4c, 0x61, 0x73, 0x74, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x41, 0x74, 0x18, 0xf2, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x74, 0x41, 0x74, 0x12, 0x29, 0x0a, 0x0f, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x18, 0xfc, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x42,
	0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x12, 0x45,
	0x0a, 0x0c, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x86,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65, 0x6e, 0x65, 0x66,
	0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x50, 0x61, 0x69, 0x64, 0x18, 0x90, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x50, 0x61, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x18, 0x9a, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x10, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x18, 0x9b, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64,
	0x12, 0x33, 0x0a, 0x14, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0xa4, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x31, 0x0a, 0x13, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xae, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x0f, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x18, 0xb8, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x72, 0x12, 0x45, 0x0a, 0x0c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x18, 0xc2, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x4f, 0x75,
	0x74, 0x4f, 0x66, 0x47, 0x61, 0x73, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x18, 0xcc, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x47, 0x61, 0x73, 0x48, 0x6f, 0x75, 0x72,
	0x73, 0x12, 0x29, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x48,
	0x6f, 0x75, 0x72, 0x73, 0x18, 0xd6, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x43, 0x6f, 0x6d,
	0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x0e,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x18, 0xe0,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x72, 0x12, 0x41, 0x0a, 0x0b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0xea, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x06, 0x50, 0x61, 0x69, 0x64,
	0x41, 0x74, 0x18, 0xf4, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x50, 0x61, 0x69, 0x64, 0x41,
	0x74, 0x12, 0x2f, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0xfe, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x6b,
	0x49, 0x44, 0x12, 0x23, 0x0a, 0x0c, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x6b,
	0x49, 0x44, 0x18, 0x88, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x0d, 0x52, 0x65, 0x6e, 0x65, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x18, 0x92, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x12, 0x44,
	0x0a, 0x0a, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x9c, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x41, 0x74, 0x18, 0xa6, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x52, 0x65,
	0x6e, 0x65, 0x77, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x08, 0x53,
	0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x18, 0xb0, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0xf2, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xd8, 0x15, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x2c, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x32,
	0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x02, 0x52, 0x05, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48,
	0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x06,
	0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x04, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x12, 0x3a, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x05,
	0x52, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x42,
	0x0a, 0x0d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x06,
	0x52, 0x0d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x12, 0x42, 0x0a, 0x0d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x48, 0x07, 0x52, 0x0d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x48, 0x08, 0x52, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x44, 0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x48, 0x09, 0x52, 0x0e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x09, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x49, 0x44, 0x73, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x0a, 0x52, 0x09, 0x43, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0b, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x0b, 0x52, 0x0b, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0a, 0x43, 0x6f, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x0c, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x11, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x82, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x0d, 0x52, 0x11,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x48, 0x0e, 0x52, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x48, 0x0f, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x43, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x41,
	0x74, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x48, 0x10, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74,
	0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x0c, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x11, 0x52, 0x0c, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x51, 0x0a, 0x14, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x48, 0x12, 0x52, 0x14, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x0c, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0xbe, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x13, 0x52, 0x0c, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34,
	0x0a, 0x03, 0x49, 0x44, 0x73, 0x18, 0xc7, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x14, 0x52, 0x03, 0x49, 0x44,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x06, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x18, 0xc8,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65,
	0x56, 0x61, 0x6c, 0x48, 0x15, 0x52, 0x06, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x39, 0x0a, 0x08, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0xd2, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x16, 0x52, 0x08,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0b, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0xdc, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48,
	0x17, 0x52, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x46, 0x0a, 0x0c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x18, 0xe6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x6c,
	0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x18, 0x52, 0x0c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xf0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x19, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x48, 0x1a, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x10, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x18, 0x84, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x48, 0x1b, 0x52, 0x10, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65,
	0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x0f,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x18,
	0x8e, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x48, 0x1c, 0x52,
	0x0f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x98, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x1d, 0x52, 0x0e, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x3d, 0x0a, 0x0a, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0xa2, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x1e, 0x52,
	0x0a, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3c,
	0x0a, 0x07, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x73, 0x18, 0xac, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x1f,
	0x52, 0x07, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0a,
	0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x73, 0x18, 0xb6, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48,
	0x20, 0x52, 0x0a, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x43, 0x0a, 0x0d, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x41,
	0x74, 0x18, 0xc0, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x48, 0x21, 0x52, 0x0d, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x08, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x18, 0xca, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x48,
	0x22, 0x52, 0x08, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05,
	0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x41, 0x70, 0x70, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x44, 0x73,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x44, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x65, 0x6e, 0x65, 0x66,
	0x69, 0x74, 0x41, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x49, 0x44, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x45, 0x6e, 0x74, 0x49,
	0x44, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x44, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65,
	0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x65, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x52, 0x65, 0x6e,
	0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x47, 0x6f, 0x6f, 0x64,
	0x49, 0x44, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49,
	0x44, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x41, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x22, 0x69, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x48, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x67, 0x0a, 0x1e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6c, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x52, 0x05, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x22, 0x6a, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22,
	0x69, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x48, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x67, 0x0a, 0x1e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x6c, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x22, 0x6a, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x32, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x45,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49,
	0x44, 0x22, 0x64, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x45, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x89, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05,
	0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x22, 0x7d, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0xb0, 0x01, 0x0a, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x55, 0x6e, 0x69,
	0x74, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x55, 0x53, 0x44, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x55, 0x53, 0x44, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x56, 0x0a,
	0x0e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18,
	0x28, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x5b, 0x0a, 0x1b, 0x53, 0x75, 0x6d, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x22, 0x61, 0x0a, 0x1c, 0x53, 0x75, 0x6d, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5d, 0x0a, 0x1d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x22, 0x34, 0x0a, 0x1e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x34, 0x0a, 0x1c, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44,
	0x22, 0x33, 0x0a, 0x1d, 0x45, 0x78, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x61, 0x0a, 0x21, 0x45, 0x78, 0x69, 0x73, 0x74, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x38, 0x0a, 0x22, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x69, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x67, 0x0a,
	0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x45, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6c, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x52, 0x05, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x22, 0x6a, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x32, 0xc7, 0x0f, 0x0a, 0x0a, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x12,
	0x9b, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3e, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9e, 0x01,
	0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x3f, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xc6,
	0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3e, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x9e, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x3f, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x92, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x3b, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x95, 0x01,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x3c, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x95, 0x01, 0x0a, 0x14, 0x53, 0x75, 0x6d, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x3c,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x75, 0x6d, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x75, 0x6d, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9b, 0x01,
	0x0a, 0x16, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x3e, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x98, 0x01, 0x0a, 0x15,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3d, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa7, 0x01, 0x0a, 0x1a, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x42, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0xc6, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3e, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x9e, 0x01, 0x0a, 0x17, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x3f, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x40, 0x5a, 0x3e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e,
	0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescOnce sync.Once
	file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescData = file_npool_order_mw_v1_powerrental_powerrental_proto_rawDesc
)

func file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescGZIP() []byte {
	file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescOnce.Do(func() {
		file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescData)
	})
	return file_npool_order_mw_v1_powerrental_powerrental_proto_rawDescData
}

var file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_npool_order_mw_v1_powerrental_powerrental_proto_goTypes = []interface{}{
	(*PaymentAmount)(nil),                      // 0: order.middleware.powerrental.v1.PaymentAmount
	(*PowerRentalOrderReq)(nil),                // 1: order.middleware.powerrental.v1.PowerRentalOrderReq
	(*PowerRentalOrder)(nil),                   // 2: order.middleware.powerrental.v1.PowerRentalOrder
	(*Conds)(nil),                              // 3: order.middleware.powerrental.v1.Conds
	(*CreatePowerRentalOrderRequest)(nil),      // 4: order.middleware.powerrental.v1.CreatePowerRentalOrderRequest
	(*CreatePowerRentalOrderResponse)(nil),     // 5: order.middleware.powerrental.v1.CreatePowerRentalOrderResponse
	(*CreatePowerRentalOrdersRequest)(nil),     // 6: order.middleware.powerrental.v1.CreatePowerRentalOrdersRequest
	(*CreatePowerRentalOrdersResponse)(nil),    // 7: order.middleware.powerrental.v1.CreatePowerRentalOrdersResponse
	(*UpdatePowerRentalOrderRequest)(nil),      // 8: order.middleware.powerrental.v1.UpdatePowerRentalOrderRequest
	(*UpdatePowerRentalOrderResponse)(nil),     // 9: order.middleware.powerrental.v1.UpdatePowerRentalOrderResponse
	(*UpdatePowerRentalOrdersRequest)(nil),     // 10: order.middleware.powerrental.v1.UpdatePowerRentalOrdersRequest
	(*UpdatePowerRentalOrdersResponse)(nil),    // 11: order.middleware.powerrental.v1.UpdatePowerRentalOrdersResponse
	(*GetPowerRentalOrderRequest)(nil),         // 12: order.middleware.powerrental.v1.GetPowerRentalOrderRequest
	(*GetPowerRentalOrderResponse)(nil),        // 13: order.middleware.powerrental.v1.GetPowerRentalOrderResponse
	(*GetPowerRentalOrdersRequest)(nil),        // 14: order.middleware.powerrental.v1.GetPowerRentalOrdersRequest
	(*GetPowerRentalOrdersResponse)(nil),       // 15: order.middleware.powerrental.v1.GetPowerRentalOrdersResponse
	(*OrderSummary)(nil),                       // 16: order.middleware.powerrental.v1.OrderSummary
	(*SumPowerRentalOrdersRequest)(nil),        // 17: order.middleware.powerrental.v1.SumPowerRentalOrdersRequest
	(*SumPowerRentalOrdersResponse)(nil),       // 18: order.middleware.powerrental.v1.SumPowerRentalOrdersResponse
	(*CountPowerRentalOrdersRequest)(nil),      // 19: order.middleware.powerrental.v1.CountPowerRentalOrdersRequest
	(*CountPowerRentalOrdersResponse)(nil),     // 20: order.middleware.powerrental.v1.CountPowerRentalOrdersResponse
	(*ExistPowerRentalOrderRequest)(nil),       // 21: order.middleware.powerrental.v1.ExistPowerRentalOrderRequest
	(*ExistPowerRentalOrderResponse)(nil),      // 22: order.middleware.powerrental.v1.ExistPowerRentalOrderResponse
	(*ExistPowerRentalOrderCondsRequest)(nil),  // 23: order.middleware.powerrental.v1.ExistPowerRentalOrderCondsRequest
	(*ExistPowerRentalOrderCondsResponse)(nil), // 24: order.middleware.powerrental.v1.ExistPowerRentalOrderCondsResponse
	(*DeletePowerRentalOrderRequest)(nil),      // 25: order.middleware.powerrental.v1.DeletePowerRentalOrderRequest
	(*DeletePowerRentalOrderResponse)(nil),     // 26: order.middleware.powerrental.v1.DeletePowerRentalOrderResponse
	(*DeletePowerRentalOrdersRequest)(nil),     // 27: order.middleware.powerrental.v1.DeletePowerRentalOrdersRequest
	(*DeletePowerRentalOrdersResponse)(nil),    // 28: order.middleware.powerrental.v1.DeletePowerRentalOrdersResponse
	(v1.OrderType)(0),                          // 29: basetypes.order.v1.OrderType
	(v1.InvestmentType)(0),                     // 30: basetypes.order.v1.InvestmentType
	(v1.PaymentType)(0),                        // 31: basetypes.order.v1.PaymentType
	(v1.OrderCreateMethod)(0),                  // 32: basetypes.order.v1.OrderCreateMethod
	(v1.OrderState)(0),                         // 33: basetypes.order.v1.OrderState
	(v1.OrderStartMode)(0),                     // 34: basetypes.order.v1.OrderStartMode
	(v1.BenefitState)(0),                       // 35: basetypes.order.v1.BenefitState
	(v1.PaymentState)(0),                       // 36: basetypes.order.v1.PaymentState
	(v1.OrderRenewState)(0),                    // 37: basetypes.order.v1.OrderRenewState
	(*v11.Uint32Val)(nil),                      // 38: basetypes.v1.Uint32Val
	(*v11.StringVal)(nil),                      // 39: basetypes.v1.StringVal
	(*v11.StringSliceVal)(nil),                 // 40: basetypes.v1.StringSliceVal
	(*v11.Uint32SliceVal)(nil),                 // 41: basetypes.v1.Uint32SliceVal
	(*v11.BoolVal)(nil),                        // 42: basetypes.v1.BoolVal
}
var file_npool_order_mw_v1_powerrental_powerrental_proto_depIdxs = []int32{
	29, // 0: order.middleware.powerrental.v1.PowerRentalOrderReq.OrderType:type_name -> basetypes.order.v1.OrderType
	30, // 1: order.middleware.powerrental.v1.PowerRentalOrderReq.InvestmentType:type_name -> basetypes.order.v1.InvestmentType
	31, // 2: order.middleware.powerrental.v1.PowerRentalOrderReq.PaymentType:type_name -> basetypes.order.v1.PaymentType
	32, // 3: order.middleware.powerrental.v1.PowerRentalOrderReq.CreateMethod:type_name -> basetypes.order.v1.OrderCreateMethod
	0,  // 4: order.middleware.powerrental.v1.PowerRentalOrderReq.PaymentAmounts:type_name -> order.middleware.powerrental.v1.PaymentAmount
	33, // 5: order.middleware.powerrental.v1.PowerRentalOrderReq.OrderState:type_name -> basetypes.order.v1.OrderState
	34, // 6: order.middleware.powerrental.v1.PowerRentalOrderReq.StartMode:type_name -> basetypes.order.v1.OrderStartMode
	35, // 7: order.middleware.powerrental.v1.PowerRentalOrderReq.BenefitState:type_name -> basetypes.order.v1.BenefitState
	36, // 8: order.middleware.powerrental.v1.PowerRentalOrderReq.PaymentState:type_name -> basetypes.order.v1.PaymentState
	37, // 9: order.middleware.powerrental.v1.PowerRentalOrderReq.RenewState:type_name -> basetypes.order.v1.OrderRenewState
	29, // 10: order.middleware.powerrental.v1.PowerRentalOrder.OrderType:type_name -> basetypes.order.v1.OrderType
	30, // 11: order.middleware.powerrental.v1.PowerRentalOrder.InvestmentType:type_name -> basetypes.order.v1.InvestmentType
	31, // 12: order.middleware.powerrental.v1.PowerRentalOrder.PaymentType:type_name -> basetypes.order.v1.PaymentType
	32, // 13: order.middleware.powerrental.v1.PowerRentalOrder.CreateMethod:type_name -> basetypes.order.v1.OrderCreateMethod
	0,  // 14: order.middleware.powerrental.v1.PowerRentalOrder.PaymentAmounts:type_name -> order.middleware.powerrental.v1.PaymentAmount
	33, // 15: order.middleware.powerrental.v1.PowerRentalOrder.OrderState:type_name -> basetypes.order.v1.OrderState
	34, // 16: order.middleware.powerrental.v1.PowerRentalOrder.StartMode:type_name -> basetypes.order.v1.OrderStartMode
	35, // 17: order.middleware.powerrental.v1.PowerRentalOrder.BenefitState:type_name -> basetypes.order.v1.BenefitState
	36, // 18: order.middleware.powerrental.v1.PowerRentalOrder.PaymentState:type_name -> basetypes.order.v1.PaymentState
	33, // 19: order.middleware.powerrental.v1.PowerRentalOrder.CancelState:type_name -> basetypes.order.v1.OrderState
	37, // 20: order.middleware.powerrental.v1.PowerRentalOrder.RenewState:type_name -> basetypes.order.v1.OrderRenewState
	38, // 21: order.middleware.powerrental.v1.Conds.ID:type_name -> basetypes.v1.Uint32Val
	39, // 22: order.middleware.powerrental.v1.Conds.EntID:type_name -> basetypes.v1.StringVal
	39, // 23: order.middleware.powerrental.v1.Conds.AppID:type_name -> basetypes.v1.StringVal
	39, // 24: order.middleware.powerrental.v1.Conds.UserID:type_name -> basetypes.v1.StringVal
	39, // 25: order.middleware.powerrental.v1.Conds.GoodID:type_name -> basetypes.v1.StringVal
	39, // 26: order.middleware.powerrental.v1.Conds.AppGoodID:type_name -> basetypes.v1.StringVal
	39, // 27: order.middleware.powerrental.v1.Conds.ParentOrderID:type_name -> basetypes.v1.StringVal
	39, // 28: order.middleware.powerrental.v1.Conds.PaymentAmount:type_name -> basetypes.v1.StringVal
	38, // 29: order.middleware.powerrental.v1.Conds.OrderType:type_name -> basetypes.v1.Uint32Val
	38, // 30: order.middleware.powerrental.v1.Conds.InvestmentType:type_name -> basetypes.v1.Uint32Val
	40, // 31: order.middleware.powerrental.v1.Conds.CouponIDs:type_name -> basetypes.v1.StringSliceVal
	38, // 32: order.middleware.powerrental.v1.Conds.PaymentType:type_name -> basetypes.v1.Uint32Val
	39, // 33: order.middleware.powerrental.v1.Conds.CoinTypeID:type_name -> basetypes.v1.StringVal
	39, // 34: order.middleware.powerrental.v1.Conds.PaymentCoinTypeID:type_name -> basetypes.v1.StringVal
	38, // 35: order.middleware.powerrental.v1.Conds.OrderState:type_name -> basetypes.v1.Uint32Val
	38, // 36: order.middleware.powerrental.v1.Conds.StartMode:type_name -> basetypes.v1.Uint32Val
	38, // 37: order.middleware.powerrental.v1.Conds.LastBenefitAt:type_name -> basetypes.v1.Uint32Val
	38, // 38: order.middleware.powerrental.v1.Conds.BenefitState:type_name -> basetypes.v1.Uint32Val
	39, // 39: order.middleware.powerrental.v1.Conds.PaymentTransactionID:type_name -> basetypes.v1.StringVal
	38, // 40: order.middleware.powerrental.v1.Conds.PaymentState:type_name -> basetypes.v1.Uint32Val
	41, // 41: order.middleware.powerrental.v1.Conds.IDs:type_name -> basetypes.v1.Uint32SliceVal
	40, // 42: order.middleware.powerrental.v1.Conds.EntIDs:type_name -> basetypes.v1.StringSliceVal
	39, // 43: order.middleware.powerrental.v1.Conds.CouponID:type_name -> basetypes.v1.StringVal
	41, // 44: order.middleware.powerrental.v1.Conds.OrderStates:type_name -> basetypes.v1.Uint32SliceVal
	41, // 45: order.middleware.powerrental.v1.Conds.PaymentTypes:type_name -> basetypes.v1.Uint32SliceVal
	38, // 46: order.middleware.powerrental.v1.Conds.CreatedAt:type_name -> basetypes.v1.Uint32Val
	38, // 47: order.middleware.powerrental.v1.Conds.UpdatedAt:type_name -> basetypes.v1.Uint32Val
	42, // 48: order.middleware.powerrental.v1.Conds.AdminSetCanceled:type_name -> basetypes.v1.BoolVal
	42, // 49: order.middleware.powerrental.v1.Conds.UserSetCanceled:type_name -> basetypes.v1.BoolVal
	40, // 50: order.middleware.powerrental.v1.Conds.ParentOrderIDs:type_name -> basetypes.v1.StringSliceVal
	38, // 51: order.middleware.powerrental.v1.Conds.RenewState:type_name -> basetypes.v1.Uint32Val
	40, // 52: order.middleware.powerrental.v1.Conds.GoodIDs:type_name -> basetypes.v1.StringSliceVal
	40, // 53: order.middleware.powerrental.v1.Conds.AppGoodIDs:type_name -> basetypes.v1.StringSliceVal
	38, // 54: order.middleware.powerrental.v1.Conds.RenewNotifyAt:type_name -> basetypes.v1.Uint32Val
	42, // 55: order.middleware.powerrental.v1.Conds.Simulate:type_name -> basetypes.v1.BoolVal
	1,  // 56: order.middleware.powerrental.v1.CreatePowerRentalOrderRequest.Info:type_name -> order.middleware.powerrental.v1.PowerRentalOrderReq
	2,  // 57: order.middleware.powerrental.v1.CreatePowerRentalOrderResponse.Info:type_name -> order.middleware.powerrental.v1.PowerRentalOrder
	1,  // 58: order.middleware.powerrental.v1.CreatePowerRentalOrdersRequest.Infos:type_name -> order.middleware.powerrental.v1.PowerRentalOrderReq
	2,  // 59: order.middleware.powerrental.v1.CreatePowerRentalOrdersResponse.Infos:type_name -> order.middleware.powerrental.v1.PowerRentalOrder
	1,  // 60: order.middleware.powerrental.v1.UpdatePowerRentalOrderRequest.Info:type_name -> order.middleware.powerrental.v1.PowerRentalOrderReq
	2,  // 61: order.middleware.powerrental.v1.UpdatePowerRentalOrderResponse.Info:type_name -> order.middleware.powerrental.v1.PowerRentalOrder
	1,  // 62: order.middleware.powerrental.v1.UpdatePowerRentalOrdersRequest.Infos:type_name -> order.middleware.powerrental.v1.PowerRentalOrderReq
	2,  // 63: order.middleware.powerrental.v1.UpdatePowerRentalOrdersResponse.Infos:type_name -> order.middleware.powerrental.v1.PowerRentalOrder
	2,  // 64: order.middleware.powerrental.v1.GetPowerRentalOrderResponse.Info:type_name -> order.middleware.powerrental.v1.PowerRentalOrder
	3,  // 65: order.middleware.powerrental.v1.GetPowerRentalOrdersRequest.Conds:type_name -> order.middleware.powerrental.v1.Conds
	2,  // 66: order.middleware.powerrental.v1.GetPowerRentalOrdersResponse.Infos:type_name -> order.middleware.powerrental.v1.PowerRentalOrder
	0,  // 67: order.middleware.powerrental.v1.OrderSummary.PaymentAmounts:type_name -> order.middleware.powerrental.v1.PaymentAmount
	3,  // 68: order.middleware.powerrental.v1.SumPowerRentalOrdersRequest.Conds:type_name -> order.middleware.powerrental.v1.Conds
	16, // 69: order.middleware.powerrental.v1.SumPowerRentalOrdersResponse.Info:type_name -> order.middleware.powerrental.v1.OrderSummary
	3,  // 70: order.middleware.powerrental.v1.CountPowerRentalOrdersRequest.Conds:type_name -> order.middleware.powerrental.v1.Conds
	3,  // 71: order.middleware.powerrental.v1.ExistPowerRentalOrderCondsRequest.Conds:type_name -> order.middleware.powerrental.v1.Conds
	1,  // 72: order.middleware.powerrental.v1.DeletePowerRentalOrderRequest.Info:type_name -> order.middleware.powerrental.v1.PowerRentalOrderReq
	2,  // 73: order.middleware.powerrental.v1.DeletePowerRentalOrderResponse.Info:type_name -> order.middleware.powerrental.v1.PowerRentalOrder
	1,  // 74: order.middleware.powerrental.v1.DeletePowerRentalOrdersRequest.Infos:type_name -> order.middleware.powerrental.v1.PowerRentalOrderReq
	2,  // 75: order.middleware.powerrental.v1.DeletePowerRentalOrdersResponse.Infos:type_name -> order.middleware.powerrental.v1.PowerRentalOrder
	4,  // 76: order.middleware.powerrental.v1.Middleware.CreatePowerRentalOrder:input_type -> order.middleware.powerrental.v1.CreatePowerRentalOrderRequest
	6,  // 77: order.middleware.powerrental.v1.Middleware.CreatePowerRentalOrders:input_type -> order.middleware.powerrental.v1.CreatePowerRentalOrdersRequest
	8,  // 78: order.middleware.powerrental.v1.Middleware.UpdatePowerRentalOrder:input_type -> order.middleware.powerrental.v1.UpdatePowerRentalOrderRequest
	10, // 79: order.middleware.powerrental.v1.Middleware.UpdatePowerRentalOrders:input_type -> order.middleware.powerrental.v1.UpdatePowerRentalOrdersRequest
	12, // 80: order.middleware.powerrental.v1.Middleware.GetPowerRentalOrder:input_type -> order.middleware.powerrental.v1.GetPowerRentalOrderRequest
	14, // 81: order.middleware.powerrental.v1.Middleware.GetPowerRentalOrders:input_type -> order.middleware.powerrental.v1.GetPowerRentalOrdersRequest
	17, // 82: order.middleware.powerrental.v1.Middleware.SumPowerRentalOrders:input_type -> order.middleware.powerrental.v1.SumPowerRentalOrdersRequest
	19, // 83: order.middleware.powerrental.v1.Middleware.CountPowerRentalOrders:input_type -> order.middleware.powerrental.v1.CountPowerRentalOrdersRequest
	21, // 84: order.middleware.powerrental.v1.Middleware.ExistPowerRentalOrder:input_type -> order.middleware.powerrental.v1.ExistPowerRentalOrderRequest
	23, // 85: order.middleware.powerrental.v1.Middleware.ExistPowerRentalOrderConds:input_type -> order.middleware.powerrental.v1.ExistPowerRentalOrderCondsRequest
	25, // 86: order.middleware.powerrental.v1.Middleware.DeletePowerRentalOrder:input_type -> order.middleware.powerrental.v1.DeletePowerRentalOrderRequest
	27, // 87: order.middleware.powerrental.v1.Middleware.DeletePowerRentalOrders:input_type -> order.middleware.powerrental.v1.DeletePowerRentalOrdersRequest
	5,  // 88: order.middleware.powerrental.v1.Middleware.CreatePowerRentalOrder:output_type -> order.middleware.powerrental.v1.CreatePowerRentalOrderResponse
	7,  // 89: order.middleware.powerrental.v1.Middleware.CreatePowerRentalOrders:output_type -> order.middleware.powerrental.v1.CreatePowerRentalOrdersResponse
	9,  // 90: order.middleware.powerrental.v1.Middleware.UpdatePowerRentalOrder:output_type -> order.middleware.powerrental.v1.UpdatePowerRentalOrderResponse
	11, // 91: order.middleware.powerrental.v1.Middleware.UpdatePowerRentalOrders:output_type -> order.middleware.powerrental.v1.UpdatePowerRentalOrdersResponse
	13, // 92: order.middleware.powerrental.v1.Middleware.GetPowerRentalOrder:output_type -> order.middleware.powerrental.v1.GetPowerRentalOrderResponse
	15, // 93: order.middleware.powerrental.v1.Middleware.GetPowerRentalOrders:output_type -> order.middleware.powerrental.v1.GetPowerRentalOrdersResponse
	18, // 94: order.middleware.powerrental.v1.Middleware.SumPowerRentalOrders:output_type -> order.middleware.powerrental.v1.SumPowerRentalOrdersResponse
	20, // 95: order.middleware.powerrental.v1.Middleware.CountPowerRentalOrders:output_type -> order.middleware.powerrental.v1.CountPowerRentalOrdersResponse
	22, // 96: order.middleware.powerrental.v1.Middleware.ExistPowerRentalOrder:output_type -> order.middleware.powerrental.v1.ExistPowerRentalOrderResponse
	24, // 97: order.middleware.powerrental.v1.Middleware.ExistPowerRentalOrderConds:output_type -> order.middleware.powerrental.v1.ExistPowerRentalOrderCondsResponse
	26, // 98: order.middleware.powerrental.v1.Middleware.DeletePowerRentalOrder:output_type -> order.middleware.powerrental.v1.DeletePowerRentalOrderResponse
	28, // 99: order.middleware.powerrental.v1.Middleware.DeletePowerRentalOrders:output_type -> order.middleware.powerrental.v1.DeletePowerRentalOrdersResponse
	88, // [88:100] is the sub-list for method output_type
	76, // [76:88] is the sub-list for method input_type
	76, // [76:76] is the sub-list for extension type_name
	76, // [76:76] is the sub-list for extension extendee
	0,  // [0:76] is the sub-list for field type_name
}

func init() { file_npool_order_mw_v1_powerrental_powerrental_proto_init() }
func file_npool_order_mw_v1_powerrental_powerrental_proto_init() {
	if File_npool_order_mw_v1_powerrental_powerrental_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentAmount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PowerRentalOrderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PowerRentalOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePowerRentalOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePowerRentalOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePowerRentalOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePowerRentalOrdersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePowerRentalOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePowerRentalOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePowerRentalOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePowerRentalOrdersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPowerRentalOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPowerRentalOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPowerRentalOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPowerRentalOrdersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SumPowerRentalOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SumPowerRentalOrdersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountPowerRentalOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountPowerRentalOrdersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistPowerRentalOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistPowerRentalOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistPowerRentalOrderCondsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistPowerRentalOrderCondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePowerRentalOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePowerRentalOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePowerRentalOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePowerRentalOrdersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes[3].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_order_mw_v1_powerrental_powerrental_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_order_mw_v1_powerrental_powerrental_proto_goTypes,
		DependencyIndexes: file_npool_order_mw_v1_powerrental_powerrental_proto_depIdxs,
		MessageInfos:      file_npool_order_mw_v1_powerrental_powerrental_proto_msgTypes,
	}.Build()
	File_npool_order_mw_v1_powerrental_powerrental_proto = out.File
	file_npool_order_mw_v1_powerrental_powerrental_proto_rawDesc = nil
	file_npool_order_mw_v1_powerrental_powerrental_proto_goTypes = nil
	file_npool_order_mw_v1_powerrental_powerrental_proto_depIdxs = nil
}
