// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/order/mw/v1/powerrental/miningpooluser/miningpooluser.proto

package miningpooluser

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Middleware_CreateMiningPoolUser_FullMethodName     = "/order.middleware.miningpooluser.v1.Middleware/CreateMiningPoolUser"
	Middleware_GetMiningPoolUser_FullMethodName        = "/order.middleware.miningpooluser.v1.Middleware/GetMiningPoolUser"
	Middleware_GetMiningPoolUsers_FullMethodName       = "/order.middleware.miningpooluser.v1.Middleware/GetMiningPoolUsers"
	Middleware_ExistMiningPoolUser_FullMethodName      = "/order.middleware.miningpooluser.v1.Middleware/ExistMiningPoolUser"
	Middleware_ExistMiningPoolUserConds_FullMethodName = "/order.middleware.miningpooluser.v1.Middleware/ExistMiningPoolUserConds"
	Middleware_DeleteMiningPoolUser_FullMethodName     = "/order.middleware.miningpooluser.v1.Middleware/DeleteMiningPoolUser"
)

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
	CreateMiningPoolUser(ctx context.Context, in *CreateMiningPoolUserRequest, opts ...grpc.CallOption) (*CreateMiningPoolUserResponse, error)
	GetMiningPoolUser(ctx context.Context, in *GetMiningPoolUserRequest, opts ...grpc.CallOption) (*GetMiningPoolUserResponse, error)
	GetMiningPoolUsers(ctx context.Context, in *GetMiningPoolUsersRequest, opts ...grpc.CallOption) (*GetMiningPoolUsersResponse, error)
	ExistMiningPoolUser(ctx context.Context, in *ExistMiningPoolUserRequest, opts ...grpc.CallOption) (*ExistMiningPoolUserResponse, error)
	ExistMiningPoolUserConds(ctx context.Context, in *ExistMiningPoolUserCondsRequest, opts ...grpc.CallOption) (*ExistMiningPoolUserCondsResponse, error)
	DeleteMiningPoolUser(ctx context.Context, in *DeleteMiningPoolUserRequest, opts ...grpc.CallOption) (*DeleteMiningPoolUserResponse, error)
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) CreateMiningPoolUser(ctx context.Context, in *CreateMiningPoolUserRequest, opts ...grpc.CallOption) (*CreateMiningPoolUserResponse, error) {
	out := new(CreateMiningPoolUserResponse)
	err := c.cc.Invoke(ctx, Middleware_CreateMiningPoolUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetMiningPoolUser(ctx context.Context, in *GetMiningPoolUserRequest, opts ...grpc.CallOption) (*GetMiningPoolUserResponse, error) {
	out := new(GetMiningPoolUserResponse)
	err := c.cc.Invoke(ctx, Middleware_GetMiningPoolUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetMiningPoolUsers(ctx context.Context, in *GetMiningPoolUsersRequest, opts ...grpc.CallOption) (*GetMiningPoolUsersResponse, error) {
	out := new(GetMiningPoolUsersResponse)
	err := c.cc.Invoke(ctx, Middleware_GetMiningPoolUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ExistMiningPoolUser(ctx context.Context, in *ExistMiningPoolUserRequest, opts ...grpc.CallOption) (*ExistMiningPoolUserResponse, error) {
	out := new(ExistMiningPoolUserResponse)
	err := c.cc.Invoke(ctx, Middleware_ExistMiningPoolUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ExistMiningPoolUserConds(ctx context.Context, in *ExistMiningPoolUserCondsRequest, opts ...grpc.CallOption) (*ExistMiningPoolUserCondsResponse, error) {
	out := new(ExistMiningPoolUserCondsResponse)
	err := c.cc.Invoke(ctx, Middleware_ExistMiningPoolUserConds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) DeleteMiningPoolUser(ctx context.Context, in *DeleteMiningPoolUserRequest, opts ...grpc.CallOption) (*DeleteMiningPoolUserResponse, error) {
	out := new(DeleteMiningPoolUserResponse)
	err := c.cc.Invoke(ctx, Middleware_DeleteMiningPoolUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
	CreateMiningPoolUser(context.Context, *CreateMiningPoolUserRequest) (*CreateMiningPoolUserResponse, error)
	GetMiningPoolUser(context.Context, *GetMiningPoolUserRequest) (*GetMiningPoolUserResponse, error)
	GetMiningPoolUsers(context.Context, *GetMiningPoolUsersRequest) (*GetMiningPoolUsersResponse, error)
	ExistMiningPoolUser(context.Context, *ExistMiningPoolUserRequest) (*ExistMiningPoolUserResponse, error)
	ExistMiningPoolUserConds(context.Context, *ExistMiningPoolUserCondsRequest) (*ExistMiningPoolUserCondsResponse, error)
	DeleteMiningPoolUser(context.Context, *DeleteMiningPoolUserRequest) (*DeleteMiningPoolUserResponse, error)
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) CreateMiningPoolUser(context.Context, *CreateMiningPoolUserRequest) (*CreateMiningPoolUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMiningPoolUser not implemented")
}
func (UnimplementedMiddlewareServer) GetMiningPoolUser(context.Context, *GetMiningPoolUserRequest) (*GetMiningPoolUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMiningPoolUser not implemented")
}
func (UnimplementedMiddlewareServer) GetMiningPoolUsers(context.Context, *GetMiningPoolUsersRequest) (*GetMiningPoolUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMiningPoolUsers not implemented")
}
func (UnimplementedMiddlewareServer) ExistMiningPoolUser(context.Context, *ExistMiningPoolUserRequest) (*ExistMiningPoolUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistMiningPoolUser not implemented")
}
func (UnimplementedMiddlewareServer) ExistMiningPoolUserConds(context.Context, *ExistMiningPoolUserCondsRequest) (*ExistMiningPoolUserCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistMiningPoolUserConds not implemented")
}
func (UnimplementedMiddlewareServer) DeleteMiningPoolUser(context.Context, *DeleteMiningPoolUserRequest) (*DeleteMiningPoolUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMiningPoolUser not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_CreateMiningPoolUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMiningPoolUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateMiningPoolUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_CreateMiningPoolUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateMiningPoolUser(ctx, req.(*CreateMiningPoolUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetMiningPoolUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMiningPoolUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetMiningPoolUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetMiningPoolUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetMiningPoolUser(ctx, req.(*GetMiningPoolUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetMiningPoolUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMiningPoolUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetMiningPoolUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetMiningPoolUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetMiningPoolUsers(ctx, req.(*GetMiningPoolUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ExistMiningPoolUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistMiningPoolUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ExistMiningPoolUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_ExistMiningPoolUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ExistMiningPoolUser(ctx, req.(*ExistMiningPoolUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ExistMiningPoolUserConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistMiningPoolUserCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ExistMiningPoolUserConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_ExistMiningPoolUserConds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ExistMiningPoolUserConds(ctx, req.(*ExistMiningPoolUserCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_DeleteMiningPoolUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMiningPoolUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).DeleteMiningPoolUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_DeleteMiningPoolUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).DeleteMiningPoolUser(ctx, req.(*DeleteMiningPoolUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.middleware.miningpooluser.v1.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMiningPoolUser",
			Handler:    _Middleware_CreateMiningPoolUser_Handler,
		},
		{
			MethodName: "GetMiningPoolUser",
			Handler:    _Middleware_GetMiningPoolUser_Handler,
		},
		{
			MethodName: "GetMiningPoolUsers",
			Handler:    _Middleware_GetMiningPoolUsers_Handler,
		},
		{
			MethodName: "ExistMiningPoolUser",
			Handler:    _Middleware_ExistMiningPoolUser_Handler,
		},
		{
			MethodName: "ExistMiningPoolUserConds",
			Handler:    _Middleware_ExistMiningPoolUserConds_Handler,
		},
		{
			MethodName: "DeleteMiningPoolUser",
			Handler:    _Middleware_DeleteMiningPoolUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/order/mw/v1/powerrental/miningpooluser/miningpooluser.proto",
}
