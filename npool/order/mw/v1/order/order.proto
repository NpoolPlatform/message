syntax = "proto3";

package order.middleware.order1.v1;

option go_package = "github.com/NpoolPlatform/message/npool/order/mw/v1/order";

import "npool/order/mgr/v1/order/state/state.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "npool/npool.proto";

// Service Name
service Middleware {
    rpc CreateOrder (CreateOrderRequest) returns (CreateOrderResponse) {}
}

message OrderReq {
    optional string AppID                     = 10;
    optional string UserID                    = 20;
    optional string GoodID                    = 30;
    optional uint32 Units                     = 40;
    optional string OrderType                 = 50;

    optional string ParentOrderID             = 60;
    optional bool   PayWithParent             = 70;

    optional string PaymentCoinID             = 80;
    optional string PayWithBalanceAmount      = 90;
    optional string PaymentAccountID          = 100;
    optional string PaymentAmount             = 110;
    optional string PaymentAccountStartAmount = 120;
    optional string PaymentCoinUSDCurrency    = 130;
    optional string PaymentLiveUSDCurrency    = 140;
    optional string PaymentLocalUSDCurrency   = 150;

    optional string FixAmountID               = 160;
    optional string DiscountID                = 170;
    optional string SpecialOfferID            = 180;
}

message Order {
    // @inject_tag: sql:"id"
    string ID                     = 10;
    // @inject_tag: sql:"parent_order_id"
    string ParentOrderID          = 20;
    // @inject_tag: sql:"user_id"
    string UserID                 = 30;
    // @inject_tag: sql:"coin_type_id"
    string CoinTypeID             = 40;
    // @inject_tag: sql:"good_id"
    string GoodID                 = 50;
    // @inject_tag: sql:"uints"
    uint32 Units                  = 60;

    // @inject_tag: sql:"payment_coin_type_id"
    string PaymentCoinTypeID      = 70;
    // @inject_tag: sql:"payment_coin_usd_currency"
    string PaymentCoinUSDCurrency = 80;
    // @inject_tag: sql:"payment_id"
    string PaymentID              = 90;
    // @inject_tag: sql:"payment_account_id"
    string PaymentAccountID       = 100;
    // @inject_tag: sql:"payment_amount"
    string PaymentAmount          = 110;
    // @inject_tag: sql:"payment_state"
    string PaymentState           = 120;
    // @inject_tag: sql:"pay_with_balance_amount"
    string PayWithBalanceAmount   = 130;
    // @inject_tag: sql:"pay_with_parent"
    bool   PayWithParent          = 140;

    // @inject_tag: sql:"coupon_id"
    string FixAmountID            = 150;
    // @inject_tag: sql:"discount_id"
    string DiscountID             = 160;
    // @inject_tag: sql:"special_offer_id"
    string SpecialOfferID         = 170;

    order.manager.order.state.v1.EState State = 180;
}

message CreateOrderRequest {
    OrderReq Info = 10;
}

message CreateOrderResponse {
    Order Info = 10;
}
