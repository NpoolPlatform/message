syntax = "proto3";

package order.middleware.order1.v1;

option go_package = "github.com/NpoolPlatform/message/npool/order/mw/v1/order";

import "google/api/annotations.proto";
import "npool/basetypes/order/v1/enums.proto";
import "npool/basetypes/good/v1/enums.proto";
import "npool/basetypes/v1/conds.proto";


// Service Name
service Middleware {
    rpc GetOrders (GetOrdersRequest) returns (GetOrdersResponse) {}
    rpc CountOrders (CountOrdersRequest) returns (CountOrdersResponse) {}
    rpc SumOrdersPaymentUSD (SumOrdersPaymentUSDRequest) returns (SumOrdersPaymentUSDResponse) {}
    rpc SumOrdersValueUSD (SumOrdersValueUSDRequest) returns (SumOrdersValueUSDResponse) {}
    rpc ExistOrderConds (ExistOrderCondsRequest) returns (ExistOrderCondsResponse) {}
}

// For child order
message OrderReq {
    optional string EntID = 10;
    optional string GoodID = 20;
    optional string AppGoodID = 30;
    optional uint32 Duration = 40;
    optional basetypes.good.v1.GoodType GoodType = 50;
}

message Order {
    // order
    // @inject_tag: sql:"id"
    uint32 ID = 10;
    // @inject_tag: sql:"ent_id"
    string EntID = 20;
    // @inject_tag: sql:"app_id"
    string AppID = 30;
    // @inject_tag: sql:"user_id"
    string UserID = 40;
    // @inject_tag: sql:"good_id"
    string GoodID = 50;
    // @inject_tag: sql:"app_good_id"
    string AppGoodID = 60;
    // @inject_tag: sql:"parent_order_id"
    string ParentOrderID = 70;
    // @inject_tag: sql:"order_type"
    string OrderTypeStr = 90;
    basetypes.order.v1.OrderType OrderType = 100;
    // @inject_tag: sql:"payment_type"
    string PaymentTypeStr = 110;
    basetypes.order.v1.PaymentType PaymentType = 120;
    // @inject_tag: sql:"create_method"
    string CreateMethodStr = 130;
    basetypes.order.v1.OrderCreateMethod CreateMethod = 140;
    // @inject_tag: sql:"simulate"
    bool Simulate = 150;

    // @inject_tag: sql:"order_state"
    string OrderStateStr = 160;
    basetypes.order.v1.OrderState OrderState = 170;
    // @inject_tag: sql:"start_mode"
    string StartModeStr = 180;
    basetypes.order.v1.OrderStartMode StartMode = 190;
    // @inject_tag: sql:"start_at"
    uint32 StartAt = 200;
    // @inject_tag: sql:"last_benefit_at"
    uint32 LastBenefitAt = 210;
    // @inject_tag: sql:"benefit_state"
    string BenefitStateStr = 220;
    basetypes.order.v1.BenefitState BenefitState = 230;

    // @inject_tag: sql:"created_at"
    uint32 CreatedAt = 1000;
    // @inject_tag: sql:"updated_at"
    uint32 UpdatedAt = 1010;
}

message Conds {
    // order
    optional basetypes.v1.Uint32Val ID = 10;
    optional basetypes.v1.Uint32SliceVal IDs = 20;
    optional basetypes.v1.StringVal EntID = 30;
    optional basetypes.v1.StringSliceVal EntIDs = 40;
    optional basetypes.v1.StringVal AppID = 50;
    optional basetypes.v1.StringVal UserID = 60;
    optional basetypes.v1.StringVal GoodID = 70;
    optional basetypes.v1.StringSliceVal GoodIDs = 80;
    optional basetypes.v1.StringVal AppGoodID = 90;
    optional basetypes.v1.StringSliceVal AppGoodIDs = 100;
    optional basetypes.v1.StringVal ParentOrderID = 110;
    optional basetypes.v1.StringSliceVal ParentOrderIDs = 120;
    optional basetypes.v1.Uint32Val OrderType = 130;
    optional basetypes.v1.Uint32Val PaymentType = 140;
    optional basetypes.v1.Uint32SliceVal PaymentTypes = 150;
    optional basetypes.v1.BoolVal Simulate = 160;

    // orderstate
    optional basetypes.v1.Uint32Val OrderState = 170;
    optional basetypes.v1.Uint32SliceVal OrderStates = 180;
    optional basetypes.v1.Uint32Val StartMode = 190;
    optional basetypes.v1.Uint32Val LastBenefitAt = 200;
    optional basetypes.v1.Uint32Val BenefitState = 210;

    // other
    optional basetypes.v1.Uint32Val CreatedAt = 220;
    optional basetypes.v1.Uint32Val UpdatedAt = 230;
}

message GetOrdersRequest {
    Conds Conds = 10;
    int32 Offset = 20;
    int32 Limit = 30;
}

message GetOrdersResponse {
    repeated Order Infos = 10;
    uint32 Total = 20;
}

message CountOrdersRequest {
    Conds Conds = 10;
}

message CountOrdersResponse {
    string Info = 10;
}

message SumOrdersPaymentUSDRequest {
    Conds Conds = 10;
}

message SumOrdersPaymentUSDResponse {
    string Info = 10;
}

message SumOrdersValueUSDRequest {
    Conds Conds = 10;
}

message SumOrdersValueUSDResponse {
    string Info = 10;
}

message ExistOrderCondsRequest {
    Conds Conds = 10;
}

message ExistOrderCondsResponse {
    bool Info = 10;
}
