// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.18.1
// source: npool/order/mw/v1/order/order.proto

package order

import (
	v1 "github.com/NpoolPlatform/message/npool/basetypes/order/v1"
	v11 "github.com/NpoolPlatform/message/npool/basetypes/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OrderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// order
	ID                   *uint32            `protobuf:"varint,9,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID                *string            `protobuf:"bytes,10,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	AppID                *string            `protobuf:"bytes,20,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	UserID               *string            `protobuf:"bytes,30,opt,name=UserID,proto3,oneof" json:"UserID,omitempty"`
	GoodID               *string            `protobuf:"bytes,40,opt,name=GoodID,proto3,oneof" json:"GoodID,omitempty"`
	AppGoodID            *string            `protobuf:"bytes,50,opt,name=AppGoodID,proto3,oneof" json:"AppGoodID,omitempty"`
	ParentOrderID        *string            `protobuf:"bytes,60,opt,name=ParentOrderID,proto3,oneof" json:"ParentOrderID,omitempty"`
	Units                *string            `protobuf:"bytes,70,opt,name=Units,proto3,oneof" json:"Units,omitempty"`
	GoodValue            *string            `protobuf:"bytes,80,opt,name=GoodValue,proto3,oneof" json:"GoodValue,omitempty"`
	GoodValueUSD         *string            `protobuf:"bytes,81,opt,name=GoodValueUSD,proto3,oneof" json:"GoodValueUSD,omitempty"`
	PaymentAmount        *string            `protobuf:"bytes,90,opt,name=PaymentAmount,proto3,oneof" json:"PaymentAmount,omitempty"`
	DiscountAmount       *string            `protobuf:"bytes,100,opt,name=DiscountAmount,proto3,oneof" json:"DiscountAmount,omitempty"`
	PromotionID          *string            `protobuf:"bytes,110,opt,name=PromotionID,proto3,oneof" json:"PromotionID,omitempty"`
	Duration             *uint32            `protobuf:"varint,120,opt,name=Duration,proto3,oneof" json:"Duration,omitempty"`
	OrderType            *v1.OrderType      `protobuf:"varint,130,opt,name=OrderType,proto3,enum=basetypes.order.v1.OrderType,oneof" json:"OrderType,omitempty"`
	InvestmentType       *v1.InvestmentType `protobuf:"varint,140,opt,name=InvestmentType,proto3,enum=basetypes.order.v1.InvestmentType,oneof" json:"InvestmentType,omitempty"`
	CouponIDs            []string           `protobuf:"bytes,150,rep,name=CouponIDs,proto3" json:"CouponIDs,omitempty"`
	PaymentType          *v1.PaymentType    `protobuf:"varint,160,opt,name=PaymentType,proto3,enum=basetypes.order.v1.PaymentType,oneof" json:"PaymentType,omitempty"`
	CoinTypeID           *string            `protobuf:"bytes,170,opt,name=CoinTypeID,proto3,oneof" json:"CoinTypeID,omitempty"`
	PaymentCoinTypeID    *string            `protobuf:"bytes,171,opt,name=PaymentCoinTypeID,proto3,oneof" json:"PaymentCoinTypeID,omitempty"`
	TransferAmount       *string            `protobuf:"bytes,180,opt,name=TransferAmount,proto3,oneof" json:"TransferAmount,omitempty"`
	BalanceAmount        *string            `protobuf:"bytes,190,opt,name=BalanceAmount,proto3,oneof" json:"BalanceAmount,omitempty"`
	CoinUSDCurrency      *string            `protobuf:"bytes,200,opt,name=CoinUSDCurrency,proto3,oneof" json:"CoinUSDCurrency,omitempty"`
	LocalCoinUSDCurrency *string            `protobuf:"bytes,210,opt,name=LocalCoinUSDCurrency,proto3,oneof" json:"LocalCoinUSDCurrency,omitempty"`
	LiveCoinUSDCurrency  *string            `protobuf:"bytes,220,opt,name=LiveCoinUSDCurrency,proto3,oneof" json:"LiveCoinUSDCurrency,omitempty"`
	// payment
	PaymentAccountID   *string `protobuf:"bytes,230,opt,name=PaymentAccountID,proto3,oneof" json:"PaymentAccountID,omitempty"`
	PaymentStartAmount *string `protobuf:"bytes,240,opt,name=PaymentStartAmount,proto3,oneof" json:"PaymentStartAmount,omitempty"`
	// Create or Update
	// orderstate
	OrderState           *v1.OrderState      `protobuf:"varint,250,opt,name=OrderState,proto3,enum=basetypes.order.v1.OrderState,oneof" json:"OrderState,omitempty"`
	StartMode            *v1.OrderStartMode  `protobuf:"varint,260,opt,name=StartMode,proto3,enum=basetypes.order.v1.OrderStartMode,oneof" json:"StartMode,omitempty"`
	StartAt              *uint32             `protobuf:"varint,270,opt,name=StartAt,proto3,oneof" json:"StartAt,omitempty"`
	EndAt                *uint32             `protobuf:"varint,280,opt,name=EndAt,proto3,oneof" json:"EndAt,omitempty"`
	LastBenefitAt        *uint32             `protobuf:"varint,290,opt,name=LastBenefitAt,proto3,oneof" json:"LastBenefitAt,omitempty"`
	BenefitState         *v1.BenefitState    `protobuf:"varint,300,opt,name=BenefitState,proto3,enum=basetypes.order.v1.BenefitState,oneof" json:"BenefitState,omitempty"`
	UserSetPaid          *bool               `protobuf:"varint,310,opt,name=UserSetPaid,proto3,oneof" json:"UserSetPaid,omitempty"`
	UserSetCanceled      *bool               `protobuf:"varint,320,opt,name=UserSetCanceled,proto3,oneof" json:"UserSetCanceled,omitempty"`
	AdminSetCanceled     *bool               `protobuf:"varint,321,opt,name=AdminSetCanceled,proto3,oneof" json:"AdminSetCanceled,omitempty"`
	PaymentTransactionID *string             `protobuf:"bytes,330,opt,name=PaymentTransactionID,proto3,oneof" json:"PaymentTransactionID,omitempty"`
	PaymentFinishAmount  *string             `protobuf:"bytes,340,opt,name=PaymentFinishAmount,proto3,oneof" json:"PaymentFinishAmount,omitempty"`
	PaymentState         *v1.PaymentState    `protobuf:"varint,350,opt,name=PaymentState,proto3,enum=basetypes.order.v1.PaymentState,oneof" json:"PaymentState,omitempty"`
	OutOfGasHours        *uint32             `protobuf:"varint,360,opt,name=OutOfGasHours,proto3,oneof" json:"OutOfGasHours,omitempty"`
	CompensateHours      *uint32             `protobuf:"varint,370,opt,name=CompensateHours,proto3,oneof" json:"CompensateHours,omitempty"`
	Rollback             *bool               `protobuf:"varint,380,opt,name=Rollback,proto3,oneof" json:"Rollback,omitempty"`
	AppGoodStockLockID   *string             `protobuf:"bytes,400,opt,name=AppGoodStockLockID,proto3,oneof" json:"AppGoodStockLockID,omitempty"`
	LedgerLockID         *string             `protobuf:"bytes,410,opt,name=LedgerLockID,proto3,oneof" json:"LedgerLockID,omitempty"`
	RenewState           *v1.OrderRenewState `protobuf:"varint,420,opt,name=RenewState,proto3,enum=basetypes.order.v1.OrderRenewState,oneof" json:"RenewState,omitempty"`
	RenewNotifyAt        *uint32             `protobuf:"varint,430,opt,name=RenewNotifyAt,proto3,oneof" json:"RenewNotifyAt,omitempty"`
}

func (x *OrderReq) Reset() {
	*x = OrderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderReq) ProtoMessage() {}

func (x *OrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderReq.ProtoReflect.Descriptor instead.
func (*OrderReq) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_order_order_proto_rawDescGZIP(), []int{0}
}

func (x *OrderReq) GetID() uint32 {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return 0
}

func (x *OrderReq) GetEntID() string {
	if x != nil && x.EntID != nil {
		return *x.EntID
	}
	return ""
}

func (x *OrderReq) GetAppID() string {
	if x != nil && x.AppID != nil {
		return *x.AppID
	}
	return ""
}

func (x *OrderReq) GetUserID() string {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return ""
}

func (x *OrderReq) GetGoodID() string {
	if x != nil && x.GoodID != nil {
		return *x.GoodID
	}
	return ""
}

func (x *OrderReq) GetAppGoodID() string {
	if x != nil && x.AppGoodID != nil {
		return *x.AppGoodID
	}
	return ""
}

func (x *OrderReq) GetParentOrderID() string {
	if x != nil && x.ParentOrderID != nil {
		return *x.ParentOrderID
	}
	return ""
}

func (x *OrderReq) GetUnits() string {
	if x != nil && x.Units != nil {
		return *x.Units
	}
	return ""
}

func (x *OrderReq) GetGoodValue() string {
	if x != nil && x.GoodValue != nil {
		return *x.GoodValue
	}
	return ""
}

func (x *OrderReq) GetGoodValueUSD() string {
	if x != nil && x.GoodValueUSD != nil {
		return *x.GoodValueUSD
	}
	return ""
}

func (x *OrderReq) GetPaymentAmount() string {
	if x != nil && x.PaymentAmount != nil {
		return *x.PaymentAmount
	}
	return ""
}

func (x *OrderReq) GetDiscountAmount() string {
	if x != nil && x.DiscountAmount != nil {
		return *x.DiscountAmount
	}
	return ""
}

func (x *OrderReq) GetPromotionID() string {
	if x != nil && x.PromotionID != nil {
		return *x.PromotionID
	}
	return ""
}

func (x *OrderReq) GetDuration() uint32 {
	if x != nil && x.Duration != nil {
		return *x.Duration
	}
	return 0
}

func (x *OrderReq) GetOrderType() v1.OrderType {
	if x != nil && x.OrderType != nil {
		return *x.OrderType
	}
	return v1.OrderType(0)
}

func (x *OrderReq) GetInvestmentType() v1.InvestmentType {
	if x != nil && x.InvestmentType != nil {
		return *x.InvestmentType
	}
	return v1.InvestmentType(0)
}

func (x *OrderReq) GetCouponIDs() []string {
	if x != nil {
		return x.CouponIDs
	}
	return nil
}

func (x *OrderReq) GetPaymentType() v1.PaymentType {
	if x != nil && x.PaymentType != nil {
		return *x.PaymentType
	}
	return v1.PaymentType(0)
}

func (x *OrderReq) GetCoinTypeID() string {
	if x != nil && x.CoinTypeID != nil {
		return *x.CoinTypeID
	}
	return ""
}

func (x *OrderReq) GetPaymentCoinTypeID() string {
	if x != nil && x.PaymentCoinTypeID != nil {
		return *x.PaymentCoinTypeID
	}
	return ""
}

func (x *OrderReq) GetTransferAmount() string {
	if x != nil && x.TransferAmount != nil {
		return *x.TransferAmount
	}
	return ""
}

func (x *OrderReq) GetBalanceAmount() string {
	if x != nil && x.BalanceAmount != nil {
		return *x.BalanceAmount
	}
	return ""
}

func (x *OrderReq) GetCoinUSDCurrency() string {
	if x != nil && x.CoinUSDCurrency != nil {
		return *x.CoinUSDCurrency
	}
	return ""
}

func (x *OrderReq) GetLocalCoinUSDCurrency() string {
	if x != nil && x.LocalCoinUSDCurrency != nil {
		return *x.LocalCoinUSDCurrency
	}
	return ""
}

func (x *OrderReq) GetLiveCoinUSDCurrency() string {
	if x != nil && x.LiveCoinUSDCurrency != nil {
		return *x.LiveCoinUSDCurrency
	}
	return ""
}

func (x *OrderReq) GetPaymentAccountID() string {
	if x != nil && x.PaymentAccountID != nil {
		return *x.PaymentAccountID
	}
	return ""
}

func (x *OrderReq) GetPaymentStartAmount() string {
	if x != nil && x.PaymentStartAmount != nil {
		return *x.PaymentStartAmount
	}
	return ""
}

func (x *OrderReq) GetOrderState() v1.OrderState {
	if x != nil && x.OrderState != nil {
		return *x.OrderState
	}
	return v1.OrderState(0)
}

func (x *OrderReq) GetStartMode() v1.OrderStartMode {
	if x != nil && x.StartMode != nil {
		return *x.StartMode
	}
	return v1.OrderStartMode(0)
}

func (x *OrderReq) GetStartAt() uint32 {
	if x != nil && x.StartAt != nil {
		return *x.StartAt
	}
	return 0
}

func (x *OrderReq) GetEndAt() uint32 {
	if x != nil && x.EndAt != nil {
		return *x.EndAt
	}
	return 0
}

func (x *OrderReq) GetLastBenefitAt() uint32 {
	if x != nil && x.LastBenefitAt != nil {
		return *x.LastBenefitAt
	}
	return 0
}

func (x *OrderReq) GetBenefitState() v1.BenefitState {
	if x != nil && x.BenefitState != nil {
		return *x.BenefitState
	}
	return v1.BenefitState(0)
}

func (x *OrderReq) GetUserSetPaid() bool {
	if x != nil && x.UserSetPaid != nil {
		return *x.UserSetPaid
	}
	return false
}

func (x *OrderReq) GetUserSetCanceled() bool {
	if x != nil && x.UserSetCanceled != nil {
		return *x.UserSetCanceled
	}
	return false
}

func (x *OrderReq) GetAdminSetCanceled() bool {
	if x != nil && x.AdminSetCanceled != nil {
		return *x.AdminSetCanceled
	}
	return false
}

func (x *OrderReq) GetPaymentTransactionID() string {
	if x != nil && x.PaymentTransactionID != nil {
		return *x.PaymentTransactionID
	}
	return ""
}

func (x *OrderReq) GetPaymentFinishAmount() string {
	if x != nil && x.PaymentFinishAmount != nil {
		return *x.PaymentFinishAmount
	}
	return ""
}

func (x *OrderReq) GetPaymentState() v1.PaymentState {
	if x != nil && x.PaymentState != nil {
		return *x.PaymentState
	}
	return v1.PaymentState(0)
}

func (x *OrderReq) GetOutOfGasHours() uint32 {
	if x != nil && x.OutOfGasHours != nil {
		return *x.OutOfGasHours
	}
	return 0
}

func (x *OrderReq) GetCompensateHours() uint32 {
	if x != nil && x.CompensateHours != nil {
		return *x.CompensateHours
	}
	return 0
}

func (x *OrderReq) GetRollback() bool {
	if x != nil && x.Rollback != nil {
		return *x.Rollback
	}
	return false
}

func (x *OrderReq) GetAppGoodStockLockID() string {
	if x != nil && x.AppGoodStockLockID != nil {
		return *x.AppGoodStockLockID
	}
	return ""
}

func (x *OrderReq) GetLedgerLockID() string {
	if x != nil && x.LedgerLockID != nil {
		return *x.LedgerLockID
	}
	return ""
}

func (x *OrderReq) GetRenewState() v1.OrderRenewState {
	if x != nil && x.RenewState != nil {
		return *x.RenewState
	}
	return v1.OrderRenewState(0)
}

func (x *OrderReq) GetRenewNotifyAt() uint32 {
	if x != nil && x.RenewNotifyAt != nil {
		return *x.RenewNotifyAt
	}
	return 0
}

type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// order
	// @inject_tag: sql:"id"
	ID uint32 `protobuf:"varint,9,opt,name=ID,proto3" json:"ID,omitempty" sql:"id"`
	// @inject_tag: sql:"ent_id"
	EntID string `protobuf:"bytes,10,opt,name=EntID,proto3" json:"EntID,omitempty" sql:"ent_id"`
	// @inject_tag: sql:"app_id"
	AppID string `protobuf:"bytes,20,opt,name=AppID,proto3" json:"AppID,omitempty" sql:"app_id"`
	// @inject_tag: sql:"user_id"
	UserID string `protobuf:"bytes,30,opt,name=UserID,proto3" json:"UserID,omitempty" sql:"user_id"`
	// @inject_tag: sql:"good_id"
	GoodID string `protobuf:"bytes,40,opt,name=GoodID,proto3" json:"GoodID,omitempty" sql:"good_id"`
	// @inject_tag: sql:"app_good_id"
	AppGoodID string `protobuf:"bytes,50,opt,name=AppGoodID,proto3" json:"AppGoodID,omitempty" sql:"app_good_id"`
	// @inject_tag: sql:"payment_id"
	PaymentID string `protobuf:"bytes,60,opt,name=PaymentID,proto3" json:"PaymentID,omitempty" sql:"payment_id"`
	// @inject_tag: sql:"parent_order_id"
	ParentOrderID string `protobuf:"bytes,70,opt,name=ParentOrderID,proto3" json:"ParentOrderID,omitempty" sql:"parent_order_id"`
	// @inject_tag: sql:"units_v1"
	Units string `protobuf:"bytes,80,opt,name=Units,proto3" json:"Units,omitempty" sql:"units_v1"`
	// @inject_tag: sql:"good_value"
	GoodValue string `protobuf:"bytes,90,opt,name=GoodValue,proto3" json:"GoodValue,omitempty" sql:"good_value"`
	// @inject_tag: sql:"good_value_usd"
	GoodValueUSD string `protobuf:"bytes,91,opt,name=GoodValueUSD,proto3" json:"GoodValueUSD,omitempty" sql:"good_value_usd"`
	// @inject_tag: sql:"payment_amount"
	PaymentAmount string `protobuf:"bytes,100,opt,name=PaymentAmount,proto3" json:"PaymentAmount,omitempty" sql:"payment_amount"`
	// @inject_tag: sql:"discount_amount"
	DiscountAmount string `protobuf:"bytes,110,opt,name=DiscountAmount,proto3" json:"DiscountAmount,omitempty" sql:"discount_amount"`
	// @inject_tag: sql:"promotion_id"
	PromotionID string `protobuf:"bytes,120,opt,name=PromotionID,proto3" json:"PromotionID,omitempty" sql:"promotion_id"`
	// @inject_tag: sql:"duration"
	Duration uint32 `protobuf:"varint,130,opt,name=Duration,proto3" json:"Duration,omitempty" sql:"duration"`
	// @inject_tag: sql:"order_type"
	OrderTypeStr string       `protobuf:"bytes,140,opt,name=OrderTypeStr,proto3" json:"OrderTypeStr,omitempty" sql:"order_type"`
	OrderType    v1.OrderType `protobuf:"varint,150,opt,name=OrderType,proto3,enum=basetypes.order.v1.OrderType" json:"OrderType,omitempty"`
	// @inject_tag: sql:"investment_type"
	InvestmentTypeStr string            `protobuf:"bytes,160,opt,name=InvestmentTypeStr,proto3" json:"InvestmentTypeStr,omitempty" sql:"investment_type"`
	InvestmentType    v1.InvestmentType `protobuf:"varint,170,opt,name=InvestmentType,proto3,enum=basetypes.order.v1.InvestmentType" json:"InvestmentType,omitempty"`
	// @inject_tag: sql:"coupon_ids"
	CouponIDsStr string   `protobuf:"bytes,180,opt,name=CouponIDsStr,proto3" json:"CouponIDsStr,omitempty" sql:"coupon_ids"`
	CouponIDs    []string `protobuf:"bytes,190,rep,name=CouponIDs,proto3" json:"CouponIDs,omitempty"`
	// @inject_tag: sql:"payment_type"
	PaymentTypeStr string         `protobuf:"bytes,200,opt,name=PaymentTypeStr,proto3" json:"PaymentTypeStr,omitempty" sql:"payment_type"`
	PaymentType    v1.PaymentType `protobuf:"varint,210,opt,name=PaymentType,proto3,enum=basetypes.order.v1.PaymentType" json:"PaymentType,omitempty"`
	// @inject_tag: sql:"coin_type_id"
	CoinTypeID string `protobuf:"bytes,220,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty" sql:"coin_type_id"`
	// @inject_tag: sql:"payment_coin_type_id"
	PaymentCoinTypeID string `protobuf:"bytes,221,opt,name=PaymentCoinTypeID,proto3" json:"PaymentCoinTypeID,omitempty" sql:"payment_coin_type_id"`
	// @inject_tag: sql:"transfer_amount"
	TransferAmount string `protobuf:"bytes,230,opt,name=TransferAmount,proto3" json:"TransferAmount,omitempty" sql:"transfer_amount"`
	// @inject_tag: sql:"balance_amount"
	BalanceAmount string `protobuf:"bytes,240,opt,name=BalanceAmount,proto3" json:"BalanceAmount,omitempty" sql:"balance_amount"`
	// @inject_tag: sql:"coin_usd_currency"
	CoinUSDCurrency string `protobuf:"bytes,250,opt,name=CoinUSDCurrency,proto3" json:"CoinUSDCurrency,omitempty" sql:"coin_usd_currency"`
	// @inject_tag: sql:"local_coin_usd_currency"
	LocalCoinUSDCurrency string `protobuf:"bytes,260,opt,name=LocalCoinUSDCurrency,proto3" json:"LocalCoinUSDCurrency,omitempty" sql:"local_coin_usd_currency"`
	// @inject_tag: sql:"live_coin_usd_currency"
	LiveCoinUSDCurrency string `protobuf:"bytes,270,opt,name=LiveCoinUSDCurrency,proto3" json:"LiveCoinUSDCurrency,omitempty" sql:"live_coin_usd_currency"`
	// payment
	// @inject_tag: sql:"payment_account_id"
	PaymentAccountID string `protobuf:"bytes,280,opt,name=PaymentAccountID,proto3" json:"PaymentAccountID,omitempty" sql:"payment_account_id"`
	// @inject_tag: sql:"payment_start_amount"
	PaymentStartAmount string `protobuf:"bytes,290,opt,name=PaymentStartAmount,proto3" json:"PaymentStartAmount,omitempty" sql:"payment_start_amount"`
	// Orderstate
	// @inject_tag: sql:"orderstate_id"
	OrderStateID string `protobuf:"bytes,300,opt,name=OrderStateID,proto3" json:"OrderStateID,omitempty" sql:"orderstate_id"`
	// @inject_tag: sql:"order_state"
	OrderStateStr string        `protobuf:"bytes,310,opt,name=OrderStateStr,proto3" json:"OrderStateStr,omitempty" sql:"order_state"`
	OrderState    v1.OrderState `protobuf:"varint,320,opt,name=OrderState,proto3,enum=basetypes.order.v1.OrderState" json:"OrderState,omitempty"`
	// @inject_tag: sql:"start_mode"
	StartModeStr string            `protobuf:"bytes,330,opt,name=StartModeStr,proto3" json:"StartModeStr,omitempty" sql:"start_mode"`
	StartMode    v1.OrderStartMode `protobuf:"varint,340,opt,name=StartMode,proto3,enum=basetypes.order.v1.OrderStartMode" json:"StartMode,omitempty"`
	// @inject_tag: sql:"start_at"
	StartAt uint32 `protobuf:"varint,350,opt,name=StartAt,proto3" json:"StartAt,omitempty" sql:"start_at"`
	// @inject_tag: sql:"end_at"
	EndAt uint32 `protobuf:"varint,360,opt,name=EndAt,proto3" json:"EndAt,omitempty" sql:"end_at"`
	// @inject_tag: sql:"last_benefit_at"
	LastBenefitAt uint32 `protobuf:"varint,370,opt,name=LastBenefitAt,proto3" json:"LastBenefitAt,omitempty" sql:"last_benefit_at"`
	// @inject_tag: sql:"benefit_state"
	BenefitStateStr string          `protobuf:"bytes,380,opt,name=BenefitStateStr,proto3" json:"BenefitStateStr,omitempty" sql:"benefit_state"`
	BenefitState    v1.BenefitState `protobuf:"varint,390,opt,name=BenefitState,proto3,enum=basetypes.order.v1.BenefitState" json:"BenefitState,omitempty"`
	// @inject_tag: sql:"user_set_paid"
	UserSetPaid bool `protobuf:"varint,400,opt,name=UserSetPaid,proto3" json:"UserSetPaid,omitempty" sql:"user_set_paid"`
	// @inject_tag: sql:"user_set_canceled"
	UserSetCanceled bool `protobuf:"varint,410,opt,name=UserSetCanceled,proto3" json:"UserSetCanceled,omitempty" sql:"user_set_canceled"`
	// @inject_tag: sql:"admin_set_canceled"
	AdminSetCanceled bool `protobuf:"varint,411,opt,name=AdminSetCanceled,proto3" json:"AdminSetCanceled,omitempty" sql:"admin_set_canceled"`
	// @inject_tag: sql:"payment_transaction_id"
	PaymentTransactionID string `protobuf:"bytes,420,opt,name=PaymentTransactionID,proto3" json:"PaymentTransactionID,omitempty" sql:"payment_transaction_id"`
	// @inject_tag: sql:"payment_finish_amount"
	PaymentFinishAmount string `protobuf:"bytes,430,opt,name=PaymentFinishAmount,proto3" json:"PaymentFinishAmount,omitempty" sql:"payment_finish_amount"`
	// @inject_tag: sql:"payment_state"
	PaymentStateStr string          `protobuf:"bytes,440,opt,name=PaymentStateStr,proto3" json:"PaymentStateStr,omitempty" sql:"payment_state"`
	PaymentState    v1.PaymentState `protobuf:"varint,450,opt,name=PaymentState,proto3,enum=basetypes.order.v1.PaymentState" json:"PaymentState,omitempty"`
	// @inject_tag: sql:"outofgas_hours"
	OutOfGasHours uint32 `protobuf:"varint,460,opt,name=OutOfGasHours,proto3" json:"OutOfGasHours,omitempty" sql:"outofgas_hours"`
	// @inject_tag: sql:"compensate_hours"
	CompensateHours uint32 `protobuf:"varint,470,opt,name=CompensateHours,proto3" json:"CompensateHours,omitempty" sql:"compensate_hours"`
	// @inject_tag: sql:"cancel_state"
	CancelStateStr string        `protobuf:"bytes,480,opt,name=CancelStateStr,proto3" json:"CancelStateStr,omitempty" sql:"cancel_state"`
	CancelState    v1.OrderState `protobuf:"varint,490,opt,name=CancelState,proto3,enum=basetypes.order.v1.OrderState" json:"CancelState,omitempty"`
	// @inject_tag: sql:"paid_at"
	PaidAt uint32 `protobuf:"varint,500,opt,name=PaidAt,proto3" json:"PaidAt,omitempty" sql:"paid_at"`
	// @inject_tag: sql:"app_good_stock_lock_id"
	AppGoodStockLockID string `protobuf:"bytes,510,opt,name=AppGoodStockLockID,proto3" json:"AppGoodStockLockID,omitempty" sql:"app_good_stock_lock_id"`
	// @inject_tag: sql:"ledger_lock_id"
	LedgerLockID string `protobuf:"bytes,520,opt,name=LedgerLockID,proto3" json:"LedgerLockID,omitempty" sql:"ledger_lock_id"`
	// @inject_tag: sql:"renew_state"
	RenewStateStr string             `protobuf:"bytes,530,opt,name=RenewStateStr,proto3" json:"RenewStateStr,omitempty" sql:"renew_state"`
	RenewState    v1.OrderRenewState `protobuf:"varint,540,opt,name=RenewState,proto3,enum=basetypes.order.v1.OrderRenewState" json:"RenewState,omitempty"`
	// @inject_tag: sql:"renew_notify_at"
	RenewNotifyAt uint32 `protobuf:"varint,550,opt,name=RenewNotifyAt,proto3" json:"RenewNotifyAt,omitempty" sql:"renew_notify_at"`
	// @inject_tag: sql:"created_at"
	CreatedAt uint32 `protobuf:"varint,1000,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
	// @inject_tag: sql:"updated_at"
	UpdatedAt uint32 `protobuf:"varint,1010,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty" sql:"updated_at"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_order_order_proto_rawDescGZIP(), []int{1}
}

func (x *Order) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Order) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *Order) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *Order) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *Order) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *Order) GetAppGoodID() string {
	if x != nil {
		return x.AppGoodID
	}
	return ""
}

func (x *Order) GetPaymentID() string {
	if x != nil {
		return x.PaymentID
	}
	return ""
}

func (x *Order) GetParentOrderID() string {
	if x != nil {
		return x.ParentOrderID
	}
	return ""
}

func (x *Order) GetUnits() string {
	if x != nil {
		return x.Units
	}
	return ""
}

func (x *Order) GetGoodValue() string {
	if x != nil {
		return x.GoodValue
	}
	return ""
}

func (x *Order) GetGoodValueUSD() string {
	if x != nil {
		return x.GoodValueUSD
	}
	return ""
}

func (x *Order) GetPaymentAmount() string {
	if x != nil {
		return x.PaymentAmount
	}
	return ""
}

func (x *Order) GetDiscountAmount() string {
	if x != nil {
		return x.DiscountAmount
	}
	return ""
}

func (x *Order) GetPromotionID() string {
	if x != nil {
		return x.PromotionID
	}
	return ""
}

func (x *Order) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Order) GetOrderTypeStr() string {
	if x != nil {
		return x.OrderTypeStr
	}
	return ""
}

func (x *Order) GetOrderType() v1.OrderType {
	if x != nil {
		return x.OrderType
	}
	return v1.OrderType(0)
}

func (x *Order) GetInvestmentTypeStr() string {
	if x != nil {
		return x.InvestmentTypeStr
	}
	return ""
}

func (x *Order) GetInvestmentType() v1.InvestmentType {
	if x != nil {
		return x.InvestmentType
	}
	return v1.InvestmentType(0)
}

func (x *Order) GetCouponIDsStr() string {
	if x != nil {
		return x.CouponIDsStr
	}
	return ""
}

func (x *Order) GetCouponIDs() []string {
	if x != nil {
		return x.CouponIDs
	}
	return nil
}

func (x *Order) GetPaymentTypeStr() string {
	if x != nil {
		return x.PaymentTypeStr
	}
	return ""
}

func (x *Order) GetPaymentType() v1.PaymentType {
	if x != nil {
		return x.PaymentType
	}
	return v1.PaymentType(0)
}

func (x *Order) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

func (x *Order) GetPaymentCoinTypeID() string {
	if x != nil {
		return x.PaymentCoinTypeID
	}
	return ""
}

func (x *Order) GetTransferAmount() string {
	if x != nil {
		return x.TransferAmount
	}
	return ""
}

func (x *Order) GetBalanceAmount() string {
	if x != nil {
		return x.BalanceAmount
	}
	return ""
}

func (x *Order) GetCoinUSDCurrency() string {
	if x != nil {
		return x.CoinUSDCurrency
	}
	return ""
}

func (x *Order) GetLocalCoinUSDCurrency() string {
	if x != nil {
		return x.LocalCoinUSDCurrency
	}
	return ""
}

func (x *Order) GetLiveCoinUSDCurrency() string {
	if x != nil {
		return x.LiveCoinUSDCurrency
	}
	return ""
}

func (x *Order) GetPaymentAccountID() string {
	if x != nil {
		return x.PaymentAccountID
	}
	return ""
}

func (x *Order) GetPaymentStartAmount() string {
	if x != nil {
		return x.PaymentStartAmount
	}
	return ""
}

func (x *Order) GetOrderStateID() string {
	if x != nil {
		return x.OrderStateID
	}
	return ""
}

func (x *Order) GetOrderStateStr() string {
	if x != nil {
		return x.OrderStateStr
	}
	return ""
}

func (x *Order) GetOrderState() v1.OrderState {
	if x != nil {
		return x.OrderState
	}
	return v1.OrderState(0)
}

func (x *Order) GetStartModeStr() string {
	if x != nil {
		return x.StartModeStr
	}
	return ""
}

func (x *Order) GetStartMode() v1.OrderStartMode {
	if x != nil {
		return x.StartMode
	}
	return v1.OrderStartMode(0)
}

func (x *Order) GetStartAt() uint32 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *Order) GetEndAt() uint32 {
	if x != nil {
		return x.EndAt
	}
	return 0
}

func (x *Order) GetLastBenefitAt() uint32 {
	if x != nil {
		return x.LastBenefitAt
	}
	return 0
}

func (x *Order) GetBenefitStateStr() string {
	if x != nil {
		return x.BenefitStateStr
	}
	return ""
}

func (x *Order) GetBenefitState() v1.BenefitState {
	if x != nil {
		return x.BenefitState
	}
	return v1.BenefitState(0)
}

func (x *Order) GetUserSetPaid() bool {
	if x != nil {
		return x.UserSetPaid
	}
	return false
}

func (x *Order) GetUserSetCanceled() bool {
	if x != nil {
		return x.UserSetCanceled
	}
	return false
}

func (x *Order) GetAdminSetCanceled() bool {
	if x != nil {
		return x.AdminSetCanceled
	}
	return false
}

func (x *Order) GetPaymentTransactionID() string {
	if x != nil {
		return x.PaymentTransactionID
	}
	return ""
}

func (x *Order) GetPaymentFinishAmount() string {
	if x != nil {
		return x.PaymentFinishAmount
	}
	return ""
}

func (x *Order) GetPaymentStateStr() string {
	if x != nil {
		return x.PaymentStateStr
	}
	return ""
}

func (x *Order) GetPaymentState() v1.PaymentState {
	if x != nil {
		return x.PaymentState
	}
	return v1.PaymentState(0)
}

func (x *Order) GetOutOfGasHours() uint32 {
	if x != nil {
		return x.OutOfGasHours
	}
	return 0
}

func (x *Order) GetCompensateHours() uint32 {
	if x != nil {
		return x.CompensateHours
	}
	return 0
}

func (x *Order) GetCancelStateStr() string {
	if x != nil {
		return x.CancelStateStr
	}
	return ""
}

func (x *Order) GetCancelState() v1.OrderState {
	if x != nil {
		return x.CancelState
	}
	return v1.OrderState(0)
}

func (x *Order) GetPaidAt() uint32 {
	if x != nil {
		return x.PaidAt
	}
	return 0
}

func (x *Order) GetAppGoodStockLockID() string {
	if x != nil {
		return x.AppGoodStockLockID
	}
	return ""
}

func (x *Order) GetLedgerLockID() string {
	if x != nil {
		return x.LedgerLockID
	}
	return ""
}

func (x *Order) GetRenewStateStr() string {
	if x != nil {
		return x.RenewStateStr
	}
	return ""
}

func (x *Order) GetRenewState() v1.OrderRenewState {
	if x != nil {
		return x.RenewState
	}
	return v1.OrderRenewState(0)
}

func (x *Order) GetRenewNotifyAt() uint32 {
	if x != nil {
		return x.RenewNotifyAt
	}
	return 0
}

func (x *Order) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Order) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// order
	ID                *v11.Uint32Val      `protobuf:"bytes,9,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID             *v11.StringVal      `protobuf:"bytes,10,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	AppID             *v11.StringVal      `protobuf:"bytes,20,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	UserID            *v11.StringVal      `protobuf:"bytes,30,opt,name=UserID,proto3,oneof" json:"UserID,omitempty"`
	GoodID            *v11.StringVal      `protobuf:"bytes,40,opt,name=GoodID,proto3,oneof" json:"GoodID,omitempty"`
	AppGoodID         *v11.StringVal      `protobuf:"bytes,50,opt,name=AppGoodID,proto3,oneof" json:"AppGoodID,omitempty"`
	ParentOrderID     *v11.StringVal      `protobuf:"bytes,60,opt,name=ParentOrderID,proto3,oneof" json:"ParentOrderID,omitempty"`
	PaymentAmount     *v11.StringVal      `protobuf:"bytes,70,opt,name=PaymentAmount,proto3,oneof" json:"PaymentAmount,omitempty"`
	OrderType         *v11.Uint32Val      `protobuf:"bytes,80,opt,name=OrderType,proto3,oneof" json:"OrderType,omitempty"`
	InvestmentType    *v11.Uint32Val      `protobuf:"bytes,90,opt,name=InvestmentType,proto3,oneof" json:"InvestmentType,omitempty"`
	CouponIDs         *v11.StringSliceVal `protobuf:"bytes,100,opt,name=CouponIDs,proto3,oneof" json:"CouponIDs,omitempty"`
	PaymentType       *v11.Uint32Val      `protobuf:"bytes,110,opt,name=PaymentType,proto3,oneof" json:"PaymentType,omitempty"`
	CoinTypeID        *v11.StringVal      `protobuf:"bytes,120,opt,name=CoinTypeID,proto3,oneof" json:"CoinTypeID,omitempty"`
	PaymentCoinTypeID *v11.StringVal      `protobuf:"bytes,130,opt,name=PaymentCoinTypeID,proto3,oneof" json:"PaymentCoinTypeID,omitempty"`
	// orderstate
	OrderState           *v11.Uint32Val `protobuf:"bytes,140,opt,name=OrderState,proto3,oneof" json:"OrderState,omitempty"`
	StartMode            *v11.Uint32Val `protobuf:"bytes,150,opt,name=StartMode,proto3,oneof" json:"StartMode,omitempty"`
	LastBenefitAt        *v11.Uint32Val `protobuf:"bytes,160,opt,name=LastBenefitAt,proto3,oneof" json:"LastBenefitAt,omitempty"`
	BenefitState         *v11.Uint32Val `protobuf:"bytes,170,opt,name=BenefitState,proto3,oneof" json:"BenefitState,omitempty"`
	PaymentTransactionID *v11.StringVal `protobuf:"bytes,180,opt,name=PaymentTransactionID,proto3,oneof" json:"PaymentTransactionID,omitempty"`
	PaymentState         *v11.Uint32Val `protobuf:"bytes,190,opt,name=PaymentState,proto3,oneof" json:"PaymentState,omitempty"`
	// other
	IDs              *v11.Uint32SliceVal `protobuf:"bytes,199,opt,name=IDs,proto3,oneof" json:"IDs,omitempty"`
	EntIDs           *v11.StringSliceVal `protobuf:"bytes,200,opt,name=EntIDs,proto3,oneof" json:"EntIDs,omitempty"`
	CouponID         *v11.StringVal      `protobuf:"bytes,210,opt,name=CouponID,proto3,oneof" json:"CouponID,omitempty"`
	OrderStates      *v11.Uint32SliceVal `protobuf:"bytes,220,opt,name=OrderStates,proto3,oneof" json:"OrderStates,omitempty"`
	PaymentTypes     *v11.Uint32SliceVal `protobuf:"bytes,230,opt,name=PaymentTypes,proto3,oneof" json:"PaymentTypes,omitempty"`
	CreatedAt        *v11.Uint32Val      `protobuf:"bytes,240,opt,name=CreatedAt,proto3,oneof" json:"CreatedAt,omitempty"`
	UpdatedAt        *v11.Uint32Val      `protobuf:"bytes,250,opt,name=UpdatedAt,proto3,oneof" json:"UpdatedAt,omitempty"`
	AdminSetCanceled *v11.BoolVal        `protobuf:"bytes,260,opt,name=AdminSetCanceled,proto3,oneof" json:"AdminSetCanceled,omitempty"`
	UserSetCanceled  *v11.BoolVal        `protobuf:"bytes,270,opt,name=UserSetCanceled,proto3,oneof" json:"UserSetCanceled,omitempty"`
	ParentOrderIDs   *v11.StringSliceVal `protobuf:"bytes,280,opt,name=ParentOrderIDs,proto3,oneof" json:"ParentOrderIDs,omitempty"`
	RenewState       *v11.Uint32Val      `protobuf:"bytes,290,opt,name=RenewState,proto3,oneof" json:"RenewState,omitempty"`
	GoodIDs          *v11.StringSliceVal `protobuf:"bytes,300,opt,name=GoodIDs,proto3,oneof" json:"GoodIDs,omitempty"`
	AppGoodIDs       *v11.StringSliceVal `protobuf:"bytes,310,opt,name=AppGoodIDs,proto3,oneof" json:"AppGoodIDs,omitempty"`
	RenewNotifyAt    *v11.Uint32Val      `protobuf:"bytes,320,opt,name=RenewNotifyAt,proto3,oneof" json:"RenewNotifyAt,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_order_order_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *v11.Uint32Val {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetEntID() *v11.StringVal {
	if x != nil {
		return x.EntID
	}
	return nil
}

func (x *Conds) GetAppID() *v11.StringVal {
	if x != nil {
		return x.AppID
	}
	return nil
}

func (x *Conds) GetUserID() *v11.StringVal {
	if x != nil {
		return x.UserID
	}
	return nil
}

func (x *Conds) GetGoodID() *v11.StringVal {
	if x != nil {
		return x.GoodID
	}
	return nil
}

func (x *Conds) GetAppGoodID() *v11.StringVal {
	if x != nil {
		return x.AppGoodID
	}
	return nil
}

func (x *Conds) GetParentOrderID() *v11.StringVal {
	if x != nil {
		return x.ParentOrderID
	}
	return nil
}

func (x *Conds) GetPaymentAmount() *v11.StringVal {
	if x != nil {
		return x.PaymentAmount
	}
	return nil
}

func (x *Conds) GetOrderType() *v11.Uint32Val {
	if x != nil {
		return x.OrderType
	}
	return nil
}

func (x *Conds) GetInvestmentType() *v11.Uint32Val {
	if x != nil {
		return x.InvestmentType
	}
	return nil
}

func (x *Conds) GetCouponIDs() *v11.StringSliceVal {
	if x != nil {
		return x.CouponIDs
	}
	return nil
}

func (x *Conds) GetPaymentType() *v11.Uint32Val {
	if x != nil {
		return x.PaymentType
	}
	return nil
}

func (x *Conds) GetCoinTypeID() *v11.StringVal {
	if x != nil {
		return x.CoinTypeID
	}
	return nil
}

func (x *Conds) GetPaymentCoinTypeID() *v11.StringVal {
	if x != nil {
		return x.PaymentCoinTypeID
	}
	return nil
}

func (x *Conds) GetOrderState() *v11.Uint32Val {
	if x != nil {
		return x.OrderState
	}
	return nil
}

func (x *Conds) GetStartMode() *v11.Uint32Val {
	if x != nil {
		return x.StartMode
	}
	return nil
}

func (x *Conds) GetLastBenefitAt() *v11.Uint32Val {
	if x != nil {
		return x.LastBenefitAt
	}
	return nil
}

func (x *Conds) GetBenefitState() *v11.Uint32Val {
	if x != nil {
		return x.BenefitState
	}
	return nil
}

func (x *Conds) GetPaymentTransactionID() *v11.StringVal {
	if x != nil {
		return x.PaymentTransactionID
	}
	return nil
}

func (x *Conds) GetPaymentState() *v11.Uint32Val {
	if x != nil {
		return x.PaymentState
	}
	return nil
}

func (x *Conds) GetIDs() *v11.Uint32SliceVal {
	if x != nil {
		return x.IDs
	}
	return nil
}

func (x *Conds) GetEntIDs() *v11.StringSliceVal {
	if x != nil {
		return x.EntIDs
	}
	return nil
}

func (x *Conds) GetCouponID() *v11.StringVal {
	if x != nil {
		return x.CouponID
	}
	return nil
}

func (x *Conds) GetOrderStates() *v11.Uint32SliceVal {
	if x != nil {
		return x.OrderStates
	}
	return nil
}

func (x *Conds) GetPaymentTypes() *v11.Uint32SliceVal {
	if x != nil {
		return x.PaymentTypes
	}
	return nil
}

func (x *Conds) GetCreatedAt() *v11.Uint32Val {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Conds) GetUpdatedAt() *v11.Uint32Val {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Conds) GetAdminSetCanceled() *v11.BoolVal {
	if x != nil {
		return x.AdminSetCanceled
	}
	return nil
}

func (x *Conds) GetUserSetCanceled() *v11.BoolVal {
	if x != nil {
		return x.UserSetCanceled
	}
	return nil
}

func (x *Conds) GetParentOrderIDs() *v11.StringSliceVal {
	if x != nil {
		return x.ParentOrderIDs
	}
	return nil
}

func (x *Conds) GetRenewState() *v11.Uint32Val {
	if x != nil {
		return x.RenewState
	}
	return nil
}

func (x *Conds) GetGoodIDs() *v11.StringSliceVal {
	if x != nil {
		return x.GoodIDs
	}
	return nil
}

func (x *Conds) GetAppGoodIDs() *v11.StringSliceVal {
	if x != nil {
		return x.AppGoodIDs
	}
	return nil
}

func (x *Conds) GetRenewNotifyAt() *v11.Uint32Val {
	if x != nil {
		return x.RenewNotifyAt
	}
	return nil
}

type CreateOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *OrderReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateOrderRequest) Reset() {
	*x = CreateOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderRequest) ProtoMessage() {}

func (x *CreateOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderRequest.ProtoReflect.Descriptor instead.
func (*CreateOrderRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_order_order_proto_rawDescGZIP(), []int{3}
}

func (x *CreateOrderRequest) GetInfo() *OrderReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Order `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateOrderResponse) Reset() {
	*x = CreateOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderResponse) ProtoMessage() {}

func (x *CreateOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderResponse.ProtoReflect.Descriptor instead.
func (*CreateOrderResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_order_order_proto_rawDescGZIP(), []int{4}
}

func (x *CreateOrderResponse) GetInfo() *Order {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*OrderReq `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateOrdersRequest) Reset() {
	*x = CreateOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrdersRequest) ProtoMessage() {}

func (x *CreateOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrdersRequest.ProtoReflect.Descriptor instead.
func (*CreateOrdersRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_order_order_proto_rawDescGZIP(), []int{5}
}

func (x *CreateOrdersRequest) GetInfos() []*OrderReq {
	if x != nil {
		return x.Infos
	}
	return nil
}

type CreateOrdersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Order `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateOrdersResponse) Reset() {
	*x = CreateOrdersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrdersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrdersResponse) ProtoMessage() {}

func (x *CreateOrdersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrdersResponse.ProtoReflect.Descriptor instead.
func (*CreateOrdersResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_order_order_proto_rawDescGZIP(), []int{6}
}

func (x *CreateOrdersResponse) GetInfos() []*Order {
	if x != nil {
		return x.Infos
	}
	return nil
}

type UpdateOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *OrderReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateOrderRequest) Reset() {
	*x = UpdateOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrderRequest) ProtoMessage() {}

func (x *UpdateOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrderRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrderRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_order_order_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateOrderRequest) GetInfo() *OrderReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Order `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateOrderResponse) Reset() {
	*x = UpdateOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrderResponse) ProtoMessage() {}

func (x *UpdateOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrderResponse.ProtoReflect.Descriptor instead.
func (*UpdateOrderResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_order_order_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateOrderResponse) GetInfo() *Order {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*OrderReq `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *UpdateOrdersRequest) Reset() {
	*x = UpdateOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrdersRequest) ProtoMessage() {}

func (x *UpdateOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrdersRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrdersRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_order_order_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateOrdersRequest) GetInfos() []*OrderReq {
	if x != nil {
		return x.Infos
	}
	return nil
}

type UpdateOrdersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Order `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *UpdateOrdersResponse) Reset() {
	*x = UpdateOrdersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrdersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrdersResponse) ProtoMessage() {}

func (x *UpdateOrdersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrdersResponse.ProtoReflect.Descriptor instead.
func (*UpdateOrdersResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_order_order_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateOrdersResponse) GetInfos() []*Order {
	if x != nil {
		return x.Infos
	}
	return nil
}

type GetOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntID string `protobuf:"bytes,10,opt,name=EntID,proto3" json:"EntID,omitempty"`
}

func (x *GetOrderRequest) Reset() {
	*x = GetOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderRequest) ProtoMessage() {}

func (x *GetOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderRequest.ProtoReflect.Descriptor instead.
func (*GetOrderRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_order_order_proto_rawDescGZIP(), []int{11}
}

func (x *GetOrderRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

type GetOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Order `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetOrderResponse) Reset() {
	*x = GetOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderResponse) ProtoMessage() {}

func (x *GetOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderResponse.ProtoReflect.Descriptor instead.
func (*GetOrderResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_order_order_proto_rawDescGZIP(), []int{12}
}

func (x *GetOrderResponse) GetInfo() *Order {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,30,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,40,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetOrdersRequest) Reset() {
	*x = GetOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrdersRequest) ProtoMessage() {}

func (x *GetOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrdersRequest.ProtoReflect.Descriptor instead.
func (*GetOrdersRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_order_order_proto_rawDescGZIP(), []int{13}
}

func (x *GetOrdersRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetOrdersRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetOrdersRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetOrdersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Order `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32   `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetOrdersResponse) Reset() {
	*x = GetOrdersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrdersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrdersResponse) ProtoMessage() {}

func (x *GetOrdersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrdersResponse.ProtoReflect.Descriptor instead.
func (*GetOrdersResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_order_order_proto_rawDescGZIP(), []int{14}
}

func (x *GetOrdersResponse) GetInfos() []*Order {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetOrdersResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type SumOrderUnitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *SumOrderUnitsRequest) Reset() {
	*x = SumOrderUnitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SumOrderUnitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumOrderUnitsRequest) ProtoMessage() {}

func (x *SumOrderUnitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SumOrderUnitsRequest.ProtoReflect.Descriptor instead.
func (*SumOrderUnitsRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_order_order_proto_rawDescGZIP(), []int{15}
}

func (x *SumOrderUnitsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type SumOrderUnitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info string `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *SumOrderUnitsResponse) Reset() {
	*x = SumOrderUnitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SumOrderUnitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumOrderUnitsResponse) ProtoMessage() {}

func (x *SumOrderUnitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SumOrderUnitsResponse.ProtoReflect.Descriptor instead.
func (*SumOrderUnitsResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_order_order_proto_rawDescGZIP(), []int{16}
}

func (x *SumOrderUnitsResponse) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

type SumOrderPaymentAmountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *SumOrderPaymentAmountsRequest) Reset() {
	*x = SumOrderPaymentAmountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SumOrderPaymentAmountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumOrderPaymentAmountsRequest) ProtoMessage() {}

func (x *SumOrderPaymentAmountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SumOrderPaymentAmountsRequest.ProtoReflect.Descriptor instead.
func (*SumOrderPaymentAmountsRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_order_order_proto_rawDescGZIP(), []int{17}
}

func (x *SumOrderPaymentAmountsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type SumOrderPaymentAmountsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info string `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *SumOrderPaymentAmountsResponse) Reset() {
	*x = SumOrderPaymentAmountsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SumOrderPaymentAmountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SumOrderPaymentAmountsResponse) ProtoMessage() {}

func (x *SumOrderPaymentAmountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SumOrderPaymentAmountsResponse.ProtoReflect.Descriptor instead.
func (*SumOrderPaymentAmountsResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_order_order_proto_rawDescGZIP(), []int{18}
}

func (x *SumOrderPaymentAmountsResponse) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

type CountOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *CountOrdersRequest) Reset() {
	*x = CountOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountOrdersRequest) ProtoMessage() {}

func (x *CountOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountOrdersRequest.ProtoReflect.Descriptor instead.
func (*CountOrdersRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_order_order_proto_rawDescGZIP(), []int{19}
}

func (x *CountOrdersRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type CountOrdersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info uint32 `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CountOrdersResponse) Reset() {
	*x = CountOrdersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountOrdersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountOrdersResponse) ProtoMessage() {}

func (x *CountOrdersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountOrdersResponse.ProtoReflect.Descriptor instead.
func (*CountOrdersResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_order_order_proto_rawDescGZIP(), []int{20}
}

func (x *CountOrdersResponse) GetInfo() uint32 {
	if x != nil {
		return x.Info
	}
	return 0
}

type ExistOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntID string `protobuf:"bytes,10,opt,name=EntID,proto3" json:"EntID,omitempty"`
}

func (x *ExistOrderRequest) Reset() {
	*x = ExistOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistOrderRequest) ProtoMessage() {}

func (x *ExistOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistOrderRequest.ProtoReflect.Descriptor instead.
func (*ExistOrderRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_order_order_proto_rawDescGZIP(), []int{21}
}

func (x *ExistOrderRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

type ExistOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistOrderResponse) Reset() {
	*x = ExistOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistOrderResponse) ProtoMessage() {}

func (x *ExistOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistOrderResponse.ProtoReflect.Descriptor instead.
func (*ExistOrderResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_order_order_proto_rawDescGZIP(), []int{22}
}

func (x *ExistOrderResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type ExistOrderCondsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *ExistOrderCondsRequest) Reset() {
	*x = ExistOrderCondsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistOrderCondsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistOrderCondsRequest) ProtoMessage() {}

func (x *ExistOrderCondsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistOrderCondsRequest.ProtoReflect.Descriptor instead.
func (*ExistOrderCondsRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_order_order_proto_rawDescGZIP(), []int{23}
}

func (x *ExistOrderCondsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type ExistOrderCondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistOrderCondsResponse) Reset() {
	*x = ExistOrderCondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistOrderCondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistOrderCondsResponse) ProtoMessage() {}

func (x *ExistOrderCondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistOrderCondsResponse.ProtoReflect.Descriptor instead.
func (*ExistOrderCondsResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_order_order_proto_rawDescGZIP(), []int{24}
}

func (x *ExistOrderCondsResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type DeleteOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *OrderReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteOrderRequest) Reset() {
	*x = DeleteOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrderRequest) ProtoMessage() {}

func (x *DeleteOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrderRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrderRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_order_order_proto_rawDescGZIP(), []int{25}
}

func (x *DeleteOrderRequest) GetInfo() *OrderReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type DeleteOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Order `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteOrderResponse) Reset() {
	*x = DeleteOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrderResponse) ProtoMessage() {}

func (x *DeleteOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrderResponse.ProtoReflect.Descriptor instead.
func (*DeleteOrderResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_order_order_proto_rawDescGZIP(), []int{26}
}

func (x *DeleteOrderResponse) GetInfo() *Order {
	if x != nil {
		return x.Info
	}
	return nil
}

type DeleteOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*OrderReq `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *DeleteOrdersRequest) Reset() {
	*x = DeleteOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrdersRequest) ProtoMessage() {}

func (x *DeleteOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrdersRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrdersRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_order_order_proto_rawDescGZIP(), []int{27}
}

func (x *DeleteOrdersRequest) GetInfos() []*OrderReq {
	if x != nil {
		return x.Infos
	}
	return nil
}

type DeleteOrdersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Order `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *DeleteOrdersResponse) Reset() {
	*x = DeleteOrdersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrdersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrdersResponse) ProtoMessage() {}

func (x *DeleteOrdersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_order_order_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrdersResponse.ProtoReflect.Descriptor instead.
func (*DeleteOrdersResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_order_order_proto_rawDescGZIP(), []int{28}
}

func (x *DeleteOrdersResponse) GetInfos() []*Order {
	if x != nil {
		return x.Infos
	}
	return nil
}

var File_npool_order_mw_v1_order_order_proto protoreflect.FileDescriptor

var file_npool_order_mw_v1_order_order_proto_rawDesc = []byte{
	0x0a, 0x23, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x6d, 0x77,
	0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x31, 0x2e, 0x76,
	0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x24, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf3, 0x16, 0x0a, 0x08, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00,
	0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x47, 0x6f,
	0x6f, 0x64, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x47, 0x6f,
	0x6f, 0x64, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f,
	0x6f, 0x64, 0x49, 0x44, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x09, 0x41, 0x70,
	0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x06, 0x52, 0x0d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x46,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x05, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x09, 0x47, 0x6f, 0x6f, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x50, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x09, 0x47, 0x6f, 0x6f, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x47, 0x6f, 0x6f, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x55, 0x53, 0x44, 0x18, 0x51, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0c, 0x47, 0x6f, 0x6f,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x53, 0x44, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x5a, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0b, 0x52, 0x0e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0b, 0x50, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0d, 0x52,
	0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x09,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x48,
	0x0e, 0x52, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x50, 0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x0f, 0x52, 0x0e,
	0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x18, 0x96,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x44, 0x73,
	0x12, 0x47, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0xa0, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x10, 0x52, 0x0b, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0a, 0x43, 0x6f, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11,
	0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12,
	0x32, 0x0a, 0x11, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x44, 0x18, 0xab, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x11, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44,
	0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x0e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x0d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x0d, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a,
	0x0f, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x53, 0x44, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x0f, 0x43, 0x6f, 0x69, 0x6e, 0x55,
	0x53, 0x44, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a,
	0x14, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x53, 0x44, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x14,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x53, 0x44, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x13, 0x4c, 0x69, 0x76, 0x65, 0x43,
	0x6f, 0x69, 0x6e, 0x55, 0x53, 0x44, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0xdc,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x13, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x69,
	0x6e, 0x55, 0x53, 0x44, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x30, 0x0a, 0x10, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0xe6, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52, 0x10, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x34, 0x0a, 0x12, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xf0, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19,
	0x52, 0x12, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x1a, 0x52, 0x0a,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a,
	0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x84, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x1b, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74,
	0x18, 0x8e, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x1c, 0x52, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x05, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x98,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x1d, 0x52, 0x05, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74,
	0x41, 0x74, 0x18, 0xa2, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x1e, 0x52, 0x0d, 0x4c, 0x61, 0x73,
	0x74, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a,
	0x0c, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0xac, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x1f, 0x52, 0x0c, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0b, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x50, 0x61, 0x69, 0x64, 0x18, 0xb6, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x20, 0x52, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x50, 0x61, 0x69, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x2e, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x65, 0x64, 0x18, 0xc0, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x21, 0x52, 0x0f, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x30, 0x0a, 0x10, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x65, 0x64, 0x18, 0xc1, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x22, 0x52, 0x10,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x14, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0xca, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x23, 0x52, 0x14, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a,
	0x13, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0xd4, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x24, 0x52, 0x13, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0xde, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x25,
	0x52, 0x0c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x0d, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x47, 0x61, 0x73, 0x48, 0x6f, 0x75,
	0x72, 0x73, 0x18, 0xe8, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x26, 0x52, 0x0d, 0x4f, 0x75, 0x74,
	0x4f, 0x66, 0x47, 0x61, 0x73, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a,
	0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x73,
	0x18, 0xf2, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x27, 0x52, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x65,
	0x6e, 0x73, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x08, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0xfc, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x28, 0x52, 0x08, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12,
	0x34, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c,
	0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x90, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x29, 0x52, 0x12,
	0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x6b,
	0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0c, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x4c,
	0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x9a, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x2a, 0x52, 0x0c,
	0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12,
	0x49, 0x0a, 0x0a, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0xa4, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x2b, 0x52, 0x0a, 0x52, 0x65, 0x6e,
	0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0d, 0x52, 0x65,
	0x6e, 0x65, 0x77, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x41, 0x74, 0x18, 0xae, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x2c, 0x52, 0x0d, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x41, 0x70, 0x70, 0x47,
	0x6f, 0x6f, 0x64, 0x49, 0x44, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x55, 0x6e, 0x69, 0x74,
	0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x53, 0x44,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x44, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x53, 0x44, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x55,
	0x53, 0x44, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x4c,
	0x69, 0x76, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x53, 0x44, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x64, 0x41,
	0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x74, 0x41, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x50, 0x61, 0x69, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x42, 0x17, 0x0a,
	0x15, 0x5f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x47, 0x61, 0x73, 0x48, 0x6f, 0x75, 0x72,
	0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65,
	0x48, 0x6f, 0x75, 0x72, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x4c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x52,
	0x65, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x52, 0x65,
	0x6e, 0x65, 0x77, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x41, 0x74, 0x22, 0xef, 0x13, 0x0a, 0x05,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x6f, 0x6f,
	0x64, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x3c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x24, 0x0a,
	0x0d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x46,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x50, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x6f, 0x6f,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x47, 0x6f,
	0x6f, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x47, 0x6f, 0x6f, 0x64, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x55, 0x53, 0x44, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x47,
	0x6f, 0x6f, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x53, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x08, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x12, 0x3c, 0x0a,
	0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x11, 0x49,
	0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72,
	0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x12, 0x4b, 0x0a, 0x0e, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0xaa, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x43, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x49, 0x44, 0x73, 0x53, 0x74, 0x72, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x53, 0x74, 0x72, 0x12, 0x1d, 0x0a, 0x09,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x18, 0xbe, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x12, 0x27, 0x0a, 0x0e, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x18, 0xc8, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x53, 0x74, 0x72, 0x12, 0x42, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43,
	0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x11, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0xdd,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xe6, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x25, 0x0a, 0x0d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0xf0, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x0f, 0x43, 0x6f, 0x69, 0x6e,
	0x55, 0x53, 0x44, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0xfa, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x53, 0x44, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x33, 0x0a, 0x14, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e,
	0x55, 0x53, 0x44, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x84, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x14, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x53, 0x44,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x31, 0x0a, 0x13, 0x4c, 0x69, 0x76, 0x65,
	0x43, 0x6f, 0x69, 0x6e, 0x55, 0x53, 0x44, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x8e, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x4c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x69, 0x6e,
	0x55, 0x53, 0x44, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2b, 0x0a, 0x10, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x98, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x12, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xa2,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x44, 0x18, 0xac, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x44, 0x12, 0x25,
	0x0a, 0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x18,
	0xb6, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x72, 0x12, 0x3f, 0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x18, 0xc0, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x53, 0x74, 0x72, 0x18, 0xca, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x72, 0x12, 0x41, 0x0a, 0x09, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0xd4, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x19,
	0x0a, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0xde, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x15, 0x0a, 0x05, 0x45, 0x6e, 0x64,
	0x41, 0x74, 0x18, 0xe8, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x45, 0x6e, 0x64, 0x41, 0x74,
	0x12, 0x25, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x41,
	0x74, 0x18, 0xf2, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x74, 0x41, 0x74, 0x12, 0x29, 0x0a, 0x0f, 0x42, 0x65, 0x6e, 0x65, 0x66,
	0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x18, 0xfc, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x72, 0x12, 0x45, 0x0a, 0x0c, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x86, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x42, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x50, 0x61, 0x69, 0x64, 0x18, 0x90, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x50, 0x61, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0f,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x18,
	0x9a, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x10, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x53, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x18, 0x9b, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x14, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0xa4, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x31, 0x0a, 0x13, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0xae, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x0f,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x18,
	0xb8, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x12, 0x45, 0x0a, 0x0c, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0xc2, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x0c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25,
	0x0a, 0x0d, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x47, 0x61, 0x73, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x18,
	0xcc, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x47, 0x61, 0x73,
	0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73,
	0x61, 0x74, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x18, 0xd6, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x73,
	0x12, 0x27, 0x0a, 0x0e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x72, 0x18, 0xe0, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x12, 0x41, 0x0a, 0x0b, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0xea, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x0b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x06,
	0x50, 0x61, 0x69, 0x64, 0x41, 0x74, 0x18, 0xf4, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x50,
	0x61, 0x69, 0x64, 0x41, 0x74, 0x12, 0x2f, 0x0a, 0x12, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0xfe, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x0c, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x88, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x0d, 0x52,
	0x65, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x18, 0x92, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53,
	0x74, 0x72, 0x12, 0x44, 0x0a, 0x0a, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x9c, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x52, 0x65,
	0x6e, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x52, 0x65, 0x6e, 0x65,
	0x77, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x41, 0x74, 0x18, 0xa6, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0d, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x41, 0x74, 0x12,
	0x1d, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xe8, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xf2, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x92, 0x15,
	0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x02,
	0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x01, 0x52,
	0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x48, 0x02, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x04, 0x52, 0x06,
	0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x09, 0x41, 0x70, 0x70,
	0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x05, 0x52, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64,
	0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x06, 0x52, 0x0d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0d, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x07, 0x52, 0x0d, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a,
	0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x08, 0x52, 0x09, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0e, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x5a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x09, 0x52, 0x0e, 0x49, 0x6e,
	0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x3f, 0x0a, 0x09, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c,
	0x48, 0x0a, 0x52, 0x09, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x3e, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x0b,
	0x52, 0x0b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x3c, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x78,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x0c, 0x52,
	0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x4b,
	0x0a, 0x11, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x44, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x48, 0x0d, 0x52, 0x11, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0a, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x0e, 0x52, 0x0a, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x09, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x0f, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x42,
	0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x41, 0x74, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x10, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74,
	0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x0c,
	0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0xaa, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x11, 0x52, 0x0c,
	0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x51, 0x0a, 0x14, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x12, 0x52, 0x14, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x12, 0x41, 0x0a, 0x0c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x48, 0x13, 0x52, 0x0c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x03, 0x49, 0x44, 0x73, 0x18, 0xc7, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61,
	0x6c, 0x48, 0x14, 0x52, 0x03, 0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x06, 0x45,
	0x6e, 0x74, 0x49, 0x44, 0x73, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x15, 0x52, 0x06, 0x45, 0x6e,
	0x74, 0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x08, 0x43, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x48, 0x16, 0x52, 0x08, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x12, 0x44, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x18, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x6c,
	0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x17, 0x52, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0c, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0xe6, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x18, 0x52,
	0x0c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x3b, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xf0, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x19, 0x52,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a,
	0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xfa, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x1a, 0x52, 0x09, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x10, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x18, 0x84,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x48, 0x1b, 0x52, 0x10,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x18, 0x8e, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x48, 0x1c, 0x52, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0e, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x98, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61,
	0x6c, 0x48, 0x1d, 0x52, 0x0e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0a, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0xa2, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x48, 0x1e, 0x52, 0x0a, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x07, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x73,
	0x18, 0xac, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69,
	0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x1f, 0x52, 0x07, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44,
	0x73, 0x18, 0xb6, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c,
	0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x20, 0x52, 0x0a, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f,
	0x64, 0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0d, 0x52, 0x65, 0x6e, 0x65, 0x77,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x41, 0x74, 0x18, 0xc0, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x21, 0x52, 0x0d, 0x52, 0x65, 0x6e, 0x65,
	0x77, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03,
	0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x41, 0x70, 0x70, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x44, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74,
	0x41, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x49, 0x44, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x73,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x44, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x42,
	0x12, 0x0a, 0x10, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x65, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x44, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x52, 0x65, 0x6e, 0x65, 0x77,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44,
	0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x73,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x52, 0x65, 0x6e, 0x65, 0x77, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x41, 0x74, 0x22, 0x4e, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x31,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x4c, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x31, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x51, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x31,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x52, 0x05, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x22, 0x4f, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x22, 0x4e, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4c, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x51, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x05, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x52, 0x05,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x4f, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a,
	0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x27, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x22,
	0x49, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x79, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37,
	0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x62, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x4f, 0x0a, 0x14, 0x53, 0x75, 0x6d,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x37, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x2b, 0x0a, 0x15, 0x53, 0x75,
	0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x58, 0x0a, 0x1d, 0x53, 0x75, 0x6d, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x31, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x22, 0x34, 0x0a, 0x1e, 0x53, 0x75, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4d, 0x0a, 0x12, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a,
	0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52,
	0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x29, 0x0a, 0x13, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x29, 0x0a, 0x11, 0x45, 0x78, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x28, 0x0a, 0x12,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x51, 0x0a, 0x16, 0x45, 0x78, 0x69, 0x73, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x37, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x2d, 0x0a, 0x17, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4e, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4c, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x35, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x51, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a,
	0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x4f, 0x0a, 0x14, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x37, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x32, 0xc3, 0x0c, 0x0a, 0x0a, 0x4d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x12, 0x70, 0x0a, 0x0b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x0c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2f, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x90, 0x01, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x2e, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2f, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x22, 0x15, 0x2f, 0x76,
	0x31, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x73, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x12, 0x2f, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x31, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x31, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x2b, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x31, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x6a, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2c,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x76, 0x0a,
	0x0d, 0x53, 0x75, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x30,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x6d, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75,
	0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x91, 0x01, 0x0a, 0x16, 0x53, 0x75, 0x6d, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x12, 0x39, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75,
	0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x6d, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x0b, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x0a, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2d, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x0f, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x32, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x90, 0x01, 0x0a, 0x0b, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1a, 0x3a, 0x01, 0x2a, 0x22, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x73, 0x0a, 0x0c, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2f, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e,
	0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_order_mw_v1_order_order_proto_rawDescOnce sync.Once
	file_npool_order_mw_v1_order_order_proto_rawDescData = file_npool_order_mw_v1_order_order_proto_rawDesc
)

func file_npool_order_mw_v1_order_order_proto_rawDescGZIP() []byte {
	file_npool_order_mw_v1_order_order_proto_rawDescOnce.Do(func() {
		file_npool_order_mw_v1_order_order_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_order_mw_v1_order_order_proto_rawDescData)
	})
	return file_npool_order_mw_v1_order_order_proto_rawDescData
}

var file_npool_order_mw_v1_order_order_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_npool_order_mw_v1_order_order_proto_goTypes = []interface{}{
	(*OrderReq)(nil),                       // 0: order.middleware.order1.v1.OrderReq
	(*Order)(nil),                          // 1: order.middleware.order1.v1.Order
	(*Conds)(nil),                          // 2: order.middleware.order1.v1.Conds
	(*CreateOrderRequest)(nil),             // 3: order.middleware.order1.v1.CreateOrderRequest
	(*CreateOrderResponse)(nil),            // 4: order.middleware.order1.v1.CreateOrderResponse
	(*CreateOrdersRequest)(nil),            // 5: order.middleware.order1.v1.CreateOrdersRequest
	(*CreateOrdersResponse)(nil),           // 6: order.middleware.order1.v1.CreateOrdersResponse
	(*UpdateOrderRequest)(nil),             // 7: order.middleware.order1.v1.UpdateOrderRequest
	(*UpdateOrderResponse)(nil),            // 8: order.middleware.order1.v1.UpdateOrderResponse
	(*UpdateOrdersRequest)(nil),            // 9: order.middleware.order1.v1.UpdateOrdersRequest
	(*UpdateOrdersResponse)(nil),           // 10: order.middleware.order1.v1.UpdateOrdersResponse
	(*GetOrderRequest)(nil),                // 11: order.middleware.order1.v1.GetOrderRequest
	(*GetOrderResponse)(nil),               // 12: order.middleware.order1.v1.GetOrderResponse
	(*GetOrdersRequest)(nil),               // 13: order.middleware.order1.v1.GetOrdersRequest
	(*GetOrdersResponse)(nil),              // 14: order.middleware.order1.v1.GetOrdersResponse
	(*SumOrderUnitsRequest)(nil),           // 15: order.middleware.order1.v1.SumOrderUnitsRequest
	(*SumOrderUnitsResponse)(nil),          // 16: order.middleware.order1.v1.SumOrderUnitsResponse
	(*SumOrderPaymentAmountsRequest)(nil),  // 17: order.middleware.order1.v1.SumOrderPaymentAmountsRequest
	(*SumOrderPaymentAmountsResponse)(nil), // 18: order.middleware.order1.v1.SumOrderPaymentAmountsResponse
	(*CountOrdersRequest)(nil),             // 19: order.middleware.order1.v1.CountOrdersRequest
	(*CountOrdersResponse)(nil),            // 20: order.middleware.order1.v1.CountOrdersResponse
	(*ExistOrderRequest)(nil),              // 21: order.middleware.order1.v1.ExistOrderRequest
	(*ExistOrderResponse)(nil),             // 22: order.middleware.order1.v1.ExistOrderResponse
	(*ExistOrderCondsRequest)(nil),         // 23: order.middleware.order1.v1.ExistOrderCondsRequest
	(*ExistOrderCondsResponse)(nil),        // 24: order.middleware.order1.v1.ExistOrderCondsResponse
	(*DeleteOrderRequest)(nil),             // 25: order.middleware.order1.v1.DeleteOrderRequest
	(*DeleteOrderResponse)(nil),            // 26: order.middleware.order1.v1.DeleteOrderResponse
	(*DeleteOrdersRequest)(nil),            // 27: order.middleware.order1.v1.DeleteOrdersRequest
	(*DeleteOrdersResponse)(nil),           // 28: order.middleware.order1.v1.DeleteOrdersResponse
	(v1.OrderType)(0),                      // 29: basetypes.order.v1.OrderType
	(v1.InvestmentType)(0),                 // 30: basetypes.order.v1.InvestmentType
	(v1.PaymentType)(0),                    // 31: basetypes.order.v1.PaymentType
	(v1.OrderState)(0),                     // 32: basetypes.order.v1.OrderState
	(v1.OrderStartMode)(0),                 // 33: basetypes.order.v1.OrderStartMode
	(v1.BenefitState)(0),                   // 34: basetypes.order.v1.BenefitState
	(v1.PaymentState)(0),                   // 35: basetypes.order.v1.PaymentState
	(v1.OrderRenewState)(0),                // 36: basetypes.order.v1.OrderRenewState
	(*v11.Uint32Val)(nil),                  // 37: basetypes.v1.Uint32Val
	(*v11.StringVal)(nil),                  // 38: basetypes.v1.StringVal
	(*v11.StringSliceVal)(nil),             // 39: basetypes.v1.StringSliceVal
	(*v11.Uint32SliceVal)(nil),             // 40: basetypes.v1.Uint32SliceVal
	(*v11.BoolVal)(nil),                    // 41: basetypes.v1.BoolVal
}
var file_npool_order_mw_v1_order_order_proto_depIdxs = []int32{
	29, // 0: order.middleware.order1.v1.OrderReq.OrderType:type_name -> basetypes.order.v1.OrderType
	30, // 1: order.middleware.order1.v1.OrderReq.InvestmentType:type_name -> basetypes.order.v1.InvestmentType
	31, // 2: order.middleware.order1.v1.OrderReq.PaymentType:type_name -> basetypes.order.v1.PaymentType
	32, // 3: order.middleware.order1.v1.OrderReq.OrderState:type_name -> basetypes.order.v1.OrderState
	33, // 4: order.middleware.order1.v1.OrderReq.StartMode:type_name -> basetypes.order.v1.OrderStartMode
	34, // 5: order.middleware.order1.v1.OrderReq.BenefitState:type_name -> basetypes.order.v1.BenefitState
	35, // 6: order.middleware.order1.v1.OrderReq.PaymentState:type_name -> basetypes.order.v1.PaymentState
	36, // 7: order.middleware.order1.v1.OrderReq.RenewState:type_name -> basetypes.order.v1.OrderRenewState
	29, // 8: order.middleware.order1.v1.Order.OrderType:type_name -> basetypes.order.v1.OrderType
	30, // 9: order.middleware.order1.v1.Order.InvestmentType:type_name -> basetypes.order.v1.InvestmentType
	31, // 10: order.middleware.order1.v1.Order.PaymentType:type_name -> basetypes.order.v1.PaymentType
	32, // 11: order.middleware.order1.v1.Order.OrderState:type_name -> basetypes.order.v1.OrderState
	33, // 12: order.middleware.order1.v1.Order.StartMode:type_name -> basetypes.order.v1.OrderStartMode
	34, // 13: order.middleware.order1.v1.Order.BenefitState:type_name -> basetypes.order.v1.BenefitState
	35, // 14: order.middleware.order1.v1.Order.PaymentState:type_name -> basetypes.order.v1.PaymentState
	32, // 15: order.middleware.order1.v1.Order.CancelState:type_name -> basetypes.order.v1.OrderState
	36, // 16: order.middleware.order1.v1.Order.RenewState:type_name -> basetypes.order.v1.OrderRenewState
	37, // 17: order.middleware.order1.v1.Conds.ID:type_name -> basetypes.v1.Uint32Val
	38, // 18: order.middleware.order1.v1.Conds.EntID:type_name -> basetypes.v1.StringVal
	38, // 19: order.middleware.order1.v1.Conds.AppID:type_name -> basetypes.v1.StringVal
	38, // 20: order.middleware.order1.v1.Conds.UserID:type_name -> basetypes.v1.StringVal
	38, // 21: order.middleware.order1.v1.Conds.GoodID:type_name -> basetypes.v1.StringVal
	38, // 22: order.middleware.order1.v1.Conds.AppGoodID:type_name -> basetypes.v1.StringVal
	38, // 23: order.middleware.order1.v1.Conds.ParentOrderID:type_name -> basetypes.v1.StringVal
	38, // 24: order.middleware.order1.v1.Conds.PaymentAmount:type_name -> basetypes.v1.StringVal
	37, // 25: order.middleware.order1.v1.Conds.OrderType:type_name -> basetypes.v1.Uint32Val
	37, // 26: order.middleware.order1.v1.Conds.InvestmentType:type_name -> basetypes.v1.Uint32Val
	39, // 27: order.middleware.order1.v1.Conds.CouponIDs:type_name -> basetypes.v1.StringSliceVal
	37, // 28: order.middleware.order1.v1.Conds.PaymentType:type_name -> basetypes.v1.Uint32Val
	38, // 29: order.middleware.order1.v1.Conds.CoinTypeID:type_name -> basetypes.v1.StringVal
	38, // 30: order.middleware.order1.v1.Conds.PaymentCoinTypeID:type_name -> basetypes.v1.StringVal
	37, // 31: order.middleware.order1.v1.Conds.OrderState:type_name -> basetypes.v1.Uint32Val
	37, // 32: order.middleware.order1.v1.Conds.StartMode:type_name -> basetypes.v1.Uint32Val
	37, // 33: order.middleware.order1.v1.Conds.LastBenefitAt:type_name -> basetypes.v1.Uint32Val
	37, // 34: order.middleware.order1.v1.Conds.BenefitState:type_name -> basetypes.v1.Uint32Val
	38, // 35: order.middleware.order1.v1.Conds.PaymentTransactionID:type_name -> basetypes.v1.StringVal
	37, // 36: order.middleware.order1.v1.Conds.PaymentState:type_name -> basetypes.v1.Uint32Val
	40, // 37: order.middleware.order1.v1.Conds.IDs:type_name -> basetypes.v1.Uint32SliceVal
	39, // 38: order.middleware.order1.v1.Conds.EntIDs:type_name -> basetypes.v1.StringSliceVal
	38, // 39: order.middleware.order1.v1.Conds.CouponID:type_name -> basetypes.v1.StringVal
	40, // 40: order.middleware.order1.v1.Conds.OrderStates:type_name -> basetypes.v1.Uint32SliceVal
	40, // 41: order.middleware.order1.v1.Conds.PaymentTypes:type_name -> basetypes.v1.Uint32SliceVal
	37, // 42: order.middleware.order1.v1.Conds.CreatedAt:type_name -> basetypes.v1.Uint32Val
	37, // 43: order.middleware.order1.v1.Conds.UpdatedAt:type_name -> basetypes.v1.Uint32Val
	41, // 44: order.middleware.order1.v1.Conds.AdminSetCanceled:type_name -> basetypes.v1.BoolVal
	41, // 45: order.middleware.order1.v1.Conds.UserSetCanceled:type_name -> basetypes.v1.BoolVal
	39, // 46: order.middleware.order1.v1.Conds.ParentOrderIDs:type_name -> basetypes.v1.StringSliceVal
	37, // 47: order.middleware.order1.v1.Conds.RenewState:type_name -> basetypes.v1.Uint32Val
	39, // 48: order.middleware.order1.v1.Conds.GoodIDs:type_name -> basetypes.v1.StringSliceVal
	39, // 49: order.middleware.order1.v1.Conds.AppGoodIDs:type_name -> basetypes.v1.StringSliceVal
	37, // 50: order.middleware.order1.v1.Conds.RenewNotifyAt:type_name -> basetypes.v1.Uint32Val
	0,  // 51: order.middleware.order1.v1.CreateOrderRequest.Info:type_name -> order.middleware.order1.v1.OrderReq
	1,  // 52: order.middleware.order1.v1.CreateOrderResponse.Info:type_name -> order.middleware.order1.v1.Order
	0,  // 53: order.middleware.order1.v1.CreateOrdersRequest.Infos:type_name -> order.middleware.order1.v1.OrderReq
	1,  // 54: order.middleware.order1.v1.CreateOrdersResponse.Infos:type_name -> order.middleware.order1.v1.Order
	0,  // 55: order.middleware.order1.v1.UpdateOrderRequest.Info:type_name -> order.middleware.order1.v1.OrderReq
	1,  // 56: order.middleware.order1.v1.UpdateOrderResponse.Info:type_name -> order.middleware.order1.v1.Order
	0,  // 57: order.middleware.order1.v1.UpdateOrdersRequest.Infos:type_name -> order.middleware.order1.v1.OrderReq
	1,  // 58: order.middleware.order1.v1.UpdateOrdersResponse.Infos:type_name -> order.middleware.order1.v1.Order
	1,  // 59: order.middleware.order1.v1.GetOrderResponse.Info:type_name -> order.middleware.order1.v1.Order
	2,  // 60: order.middleware.order1.v1.GetOrdersRequest.Conds:type_name -> order.middleware.order1.v1.Conds
	1,  // 61: order.middleware.order1.v1.GetOrdersResponse.Infos:type_name -> order.middleware.order1.v1.Order
	2,  // 62: order.middleware.order1.v1.SumOrderUnitsRequest.Conds:type_name -> order.middleware.order1.v1.Conds
	2,  // 63: order.middleware.order1.v1.SumOrderPaymentAmountsRequest.Conds:type_name -> order.middleware.order1.v1.Conds
	2,  // 64: order.middleware.order1.v1.CountOrdersRequest.Conds:type_name -> order.middleware.order1.v1.Conds
	2,  // 65: order.middleware.order1.v1.ExistOrderCondsRequest.Conds:type_name -> order.middleware.order1.v1.Conds
	0,  // 66: order.middleware.order1.v1.DeleteOrderRequest.Info:type_name -> order.middleware.order1.v1.OrderReq
	1,  // 67: order.middleware.order1.v1.DeleteOrderResponse.Info:type_name -> order.middleware.order1.v1.Order
	0,  // 68: order.middleware.order1.v1.DeleteOrdersRequest.Infos:type_name -> order.middleware.order1.v1.OrderReq
	1,  // 69: order.middleware.order1.v1.DeleteOrdersResponse.Infos:type_name -> order.middleware.order1.v1.Order
	3,  // 70: order.middleware.order1.v1.Middleware.CreateOrder:input_type -> order.middleware.order1.v1.CreateOrderRequest
	5,  // 71: order.middleware.order1.v1.Middleware.CreateOrders:input_type -> order.middleware.order1.v1.CreateOrdersRequest
	7,  // 72: order.middleware.order1.v1.Middleware.UpdateOrder:input_type -> order.middleware.order1.v1.UpdateOrderRequest
	9,  // 73: order.middleware.order1.v1.Middleware.UpdateOrders:input_type -> order.middleware.order1.v1.UpdateOrdersRequest
	11, // 74: order.middleware.order1.v1.Middleware.GetOrder:input_type -> order.middleware.order1.v1.GetOrderRequest
	13, // 75: order.middleware.order1.v1.Middleware.GetOrders:input_type -> order.middleware.order1.v1.GetOrdersRequest
	15, // 76: order.middleware.order1.v1.Middleware.SumOrderUnits:input_type -> order.middleware.order1.v1.SumOrderUnitsRequest
	17, // 77: order.middleware.order1.v1.Middleware.SumOrderPaymentAmounts:input_type -> order.middleware.order1.v1.SumOrderPaymentAmountsRequest
	19, // 78: order.middleware.order1.v1.Middleware.CountOrders:input_type -> order.middleware.order1.v1.CountOrdersRequest
	21, // 79: order.middleware.order1.v1.Middleware.ExistOrder:input_type -> order.middleware.order1.v1.ExistOrderRequest
	23, // 80: order.middleware.order1.v1.Middleware.ExistOrderConds:input_type -> order.middleware.order1.v1.ExistOrderCondsRequest
	25, // 81: order.middleware.order1.v1.Middleware.DeleteOrder:input_type -> order.middleware.order1.v1.DeleteOrderRequest
	27, // 82: order.middleware.order1.v1.Middleware.DeleteOrders:input_type -> order.middleware.order1.v1.DeleteOrdersRequest
	4,  // 83: order.middleware.order1.v1.Middleware.CreateOrder:output_type -> order.middleware.order1.v1.CreateOrderResponse
	6,  // 84: order.middleware.order1.v1.Middleware.CreateOrders:output_type -> order.middleware.order1.v1.CreateOrdersResponse
	8,  // 85: order.middleware.order1.v1.Middleware.UpdateOrder:output_type -> order.middleware.order1.v1.UpdateOrderResponse
	10, // 86: order.middleware.order1.v1.Middleware.UpdateOrders:output_type -> order.middleware.order1.v1.UpdateOrdersResponse
	12, // 87: order.middleware.order1.v1.Middleware.GetOrder:output_type -> order.middleware.order1.v1.GetOrderResponse
	14, // 88: order.middleware.order1.v1.Middleware.GetOrders:output_type -> order.middleware.order1.v1.GetOrdersResponse
	16, // 89: order.middleware.order1.v1.Middleware.SumOrderUnits:output_type -> order.middleware.order1.v1.SumOrderUnitsResponse
	18, // 90: order.middleware.order1.v1.Middleware.SumOrderPaymentAmounts:output_type -> order.middleware.order1.v1.SumOrderPaymentAmountsResponse
	20, // 91: order.middleware.order1.v1.Middleware.CountOrders:output_type -> order.middleware.order1.v1.CountOrdersResponse
	22, // 92: order.middleware.order1.v1.Middleware.ExistOrder:output_type -> order.middleware.order1.v1.ExistOrderResponse
	24, // 93: order.middleware.order1.v1.Middleware.ExistOrderConds:output_type -> order.middleware.order1.v1.ExistOrderCondsResponse
	26, // 94: order.middleware.order1.v1.Middleware.DeleteOrder:output_type -> order.middleware.order1.v1.DeleteOrderResponse
	28, // 95: order.middleware.order1.v1.Middleware.DeleteOrders:output_type -> order.middleware.order1.v1.DeleteOrdersResponse
	83, // [83:96] is the sub-list for method output_type
	70, // [70:83] is the sub-list for method input_type
	70, // [70:70] is the sub-list for extension type_name
	70, // [70:70] is the sub-list for extension extendee
	0,  // [0:70] is the sub-list for field type_name
}

func init() { file_npool_order_mw_v1_order_order_proto_init() }
func file_npool_order_mw_v1_order_order_proto_init() {
	if File_npool_order_mw_v1_order_order_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_order_mw_v1_order_order_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_order_order_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_order_order_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_order_order_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_order_order_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_order_order_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_order_order_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrdersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_order_order_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_order_order_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_order_order_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_order_order_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrdersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_order_order_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_order_order_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_order_order_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_order_order_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrdersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_order_order_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SumOrderUnitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_order_order_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SumOrderUnitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_order_order_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SumOrderPaymentAmountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_order_order_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SumOrderPaymentAmountsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_order_order_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_order_order_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountOrdersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_order_order_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_order_order_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_order_order_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistOrderCondsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_order_order_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistOrderCondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_order_order_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_order_order_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_order_order_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_order_order_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrdersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_order_mw_v1_order_order_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_npool_order_mw_v1_order_order_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_order_mw_v1_order_order_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_order_mw_v1_order_order_proto_goTypes,
		DependencyIndexes: file_npool_order_mw_v1_order_order_proto_depIdxs,
		MessageInfos:      file_npool_order_mw_v1_order_order_proto_msgTypes,
	}.Build()
	File_npool_order_mw_v1_order_order_proto = out.File
	file_npool_order_mw_v1_order_order_proto_rawDesc = nil
	file_npool_order_mw_v1_order_order_proto_goTypes = nil
	file_npool_order_mw_v1_order_order_proto_depIdxs = nil
}
