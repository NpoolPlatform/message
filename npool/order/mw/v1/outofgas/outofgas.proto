syntax = "proto3";

package order.middleware.outofgas.v1;

option go_package = "github.com/NpoolPlatform/message/npool/order/mw/v1/outofgas";

import "npool/basetypes/v1/conds.proto";

// Service Name
service Middleware {
    rpc CreateOutOfGas     (CreateOutOfGasRequest)     returns (CreateOutOfGasResponse)     {}
    rpc CreateOutOfGass    (CreateOutOfGassRequest)    returns (CreateOutOfGassResponse)    {}
    rpc UpdateOutOfGas     (UpdateOutOfGasRequest)     returns (UpdateOutOfGasResponse)     {}
    rpc GetOutOfGas        (GetOutOfGasRequest)        returns (GetOutOfGasResponse)        {}
    rpc GetOutOfGasOnly    (GetOutOfGasOnlyRequest)    returns (GetOutOfGasOnlyResponse)    {}
    rpc GetOutOfGass       (GetOutOfGassRequest)       returns (GetOutOfGassResponse)       {}
    rpc ExistOutOfGas      (ExistOutOfGasRequest)      returns (ExistOutOfGasResponse)      {}
    rpc ExistOutOfGasConds (ExistOutOfGasCondsRequest) returns (ExistOutOfGasCondsResponse) {}
    rpc CountOutOfGass     (CountOutOfGassRequest)     returns (CountOutOfGassResponse)     {}
    rpc DeleteOutOfGas     (DeleteOutOfGasRequest)     returns (DeleteOutOfGasResponse)     {}
}

message OutOfGasReq {
    optional string     ID        = 10;
    optional string     OrderID   = 20;
    optional uint32     Start     = 30;
    optional uint32     End       = 40;
    optional uint32     CreatedAt = 50;
}

message OutOfGas {
    // @inject_tag: sql:"id"
    string     ID        = 10;
    // @inject_tag: sql:"order_id"
    string     OrderID   = 20;
    // @inject_tag: sql:"start"
    uint32     Start     = 30;
    // @inject_tag: sql:"end"
    uint32     End       = 40;
    // @inject_tag: sql:"created_at"
    uint32     CreatedAt = 50;
    // @inject_tag: sql:"updated_at"
    uint32     UpdatedAt = 60;
}

message Conds {
    basetypes.v1.StringVal ID      = 10;
    basetypes.v1.StringVal OrderID = 20;
    basetypes.v1.Uint32Val Start   = 30;
    basetypes.v1.Uint32Val End     = 40;
}


message CreateOutOfGasRequest {
    OutOfGasReq Info = 10;
}

message CreateOutOfGasResponse {
    OutOfGas Info = 10;
}

message CreateOutOfGassRequest {
    repeated OutOfGasReq Infos = 10;
}

message CreateOutOfGassResponse {
    repeated OutOfGas Infos = 10;
}

message UpdateOutOfGasRequest {
    OutOfGasReq Info = 10;
}

message UpdateOutOfGasResponse {
    OutOfGas Info = 10;
}

message GetOutOfGasRequest {
    string ID = 10;
}

message GetOutOfGasResponse {
    OutOfGas Info = 10;
}

message GetOutOfGassRequest {
    Conds Conds   = 10;
    int32 Offset  = 20;
    int32 Limit   = 30;
}

message GetOutOfGassResponse {
    repeated OutOfGas Infos = 10;
    uint32        Total = 20;
}

message GetOutOfGasOnlyRequest {
    Conds Conds = 10;
}

message GetOutOfGasOnlyResponse {
    OutOfGas Info = 10;
}

message ExistOutOfGasRequest {
    string ID = 10;
}

message ExistOutOfGasResponse {
    bool Info = 10;
}

message ExistOutOfGasCondsRequest {
    Conds Conds = 10;
}

message ExistOutOfGasCondsResponse {
    bool Info = 10;
}

message CountOutOfGassRequest {
    Conds Conds = 10;
}

message CountOutOfGassResponse {
    uint32 Info = 10;
}

message DeleteOutOfGasRequest {
    OutOfGasReq Info = 10;
}

message DeleteOutOfGasResponse {
    OutOfGas Info = 10;
}