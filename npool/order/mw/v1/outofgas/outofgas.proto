syntax = "proto3";

package order.middleware.outofgas.v1;

option go_package = "github.com/NpoolPlatform/message/npool/order/mw/v1/outofgas";

import "google/api/annotations.proto";
import "npool/basetypes/v1/conds.proto";
import "npool/basetypes/good/v1/enums.proto";

// Service Name
service Middleware {
    rpc GetOutOfGas (GetOutOfGasRequest) returns (GetOutOfGasResponse) {
        option (google.api.http) = {
            post: "/v1/outofgas_GetOutOfGas"
            body: "*"
        };
    }
    rpc GetOutOfGases (GetOutOfGasesRequest) returns (GetOutOfGasesResponse) {}
    rpc ExistOutOfGas (ExistOutOfGasRequest) returns (ExistOutOfGasResponse) {}
    rpc ExistOutOfGasConds (ExistOutOfGasCondsRequest) returns (ExistOutOfGasCondsResponse) {}
}

message OutOfGas {
    // @inject_tag: sql:"id"
    uint32 ID = 10;
    // @inject_tag: sql:"ent_id"
    string EntID = 20;
    // @inject_tag: sql:"app_id"
    string AppID = 30;
    // @inject_tag: sql:"user_id"
    string UserID = 40;
    // @inject_tag: sql:"good_id"
    string GoodID = 50;
    // @inject_tag: sql:"good_type"
    string GoodTypeStr = 60;
    basetypes.good.v1.GoodType GoodType = 70;
    // @inject_tag: sql:"app_good_id"
    string AppGoodID = 80;
    // @inject_tag: sql:"order_id"
    string OrderID = 90;
    // @inject_tag: sql:"start_at"
    uint32 StartAt = 100;
    // @inject_tag: sql:"end_at"
    uint32 EndAt = 110;

    // @inject_tag: sql:"created_at"
    uint32 CreatedAt = 1000;
    // @inject_tag: sql:"updated_at"
    uint32 UpdatedAt = 1010;
}

message Conds {
    optional basetypes.v1.Uint32Val ID = 10;
    optional basetypes.v1.StringVal EntID = 20;
    optional basetypes.v1.StringVal AppID = 30;
    optional basetypes.v1.StringVal UserID = 40;
    optional basetypes.v1.StringVal GoodID = 50;
    optional basetypes.v1.StringVal AppGoodID = 60;
    optional basetypes.v1.StringVal OrderID = 70;
    optional basetypes.v1.StringSliceVal OrderIDs = 80;
    optional basetypes.v1.Uint32Val StartAt = 90;
    optional basetypes.v1.Uint32Val EndAt = 100;
}

message GetOutOfGasRequest {
    string EntID = 10;
}

message GetOutOfGasResponse { OutOfGas Info = 10; }

message GetOutOfGasesRequest {
    Conds Conds = 10;
    int32 Offset = 20;
    int32 Limit = 30;
}

message GetOutOfGasesResponse {
    repeated OutOfGas Infos = 10;
    uint32 Total = 20;
}

message ExistOutOfGasRequest { string EntID = 10; }

message ExistOutOfGasResponse { bool Info = 10; }

message ExistOutOfGasCondsRequest { Conds Conds = 10; }

message ExistOutOfGasCondsResponse { bool Info = 10; }
