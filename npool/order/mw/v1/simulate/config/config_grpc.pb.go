// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/order/mw/v1/simulate/config/config.proto

package config

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Middleware_CreateSimulateConfig_FullMethodName     = "/order.middleware.simulate.config.v1.Middleware/CreateSimulateConfig"
	Middleware_UpdateSimulateConfig_FullMethodName     = "/order.middleware.simulate.config.v1.Middleware/UpdateSimulateConfig"
	Middleware_GetSimulateConfig_FullMethodName        = "/order.middleware.simulate.config.v1.Middleware/GetSimulateConfig"
	Middleware_GetSimulateConfigs_FullMethodName       = "/order.middleware.simulate.config.v1.Middleware/GetSimulateConfigs"
	Middleware_ExistSimulateConfig_FullMethodName      = "/order.middleware.simulate.config.v1.Middleware/ExistSimulateConfig"
	Middleware_ExistSimulateConfigConds_FullMethodName = "/order.middleware.simulate.config.v1.Middleware/ExistSimulateConfigConds"
	Middleware_DeleteSimulateConfig_FullMethodName     = "/order.middleware.simulate.config.v1.Middleware/DeleteSimulateConfig"
)

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
	CreateSimulateConfig(ctx context.Context, in *CreateSimulateConfigRequest, opts ...grpc.CallOption) (*CreateSimulateConfigResponse, error)
	UpdateSimulateConfig(ctx context.Context, in *UpdateSimulateConfigRequest, opts ...grpc.CallOption) (*UpdateSimulateConfigResponse, error)
	GetSimulateConfig(ctx context.Context, in *GetSimulateConfigRequest, opts ...grpc.CallOption) (*GetSimulateConfigResponse, error)
	GetSimulateConfigs(ctx context.Context, in *GetSimulateConfigsRequest, opts ...grpc.CallOption) (*GetSimulateConfigsResponse, error)
	ExistSimulateConfig(ctx context.Context, in *ExistSimulateConfigRequest, opts ...grpc.CallOption) (*ExistSimulateConfigResponse, error)
	ExistSimulateConfigConds(ctx context.Context, in *ExistSimulateConfigCondsRequest, opts ...grpc.CallOption) (*ExistSimulateConfigCondsResponse, error)
	DeleteSimulateConfig(ctx context.Context, in *DeleteSimulateConfigRequest, opts ...grpc.CallOption) (*DeleteSimulateConfigResponse, error)
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) CreateSimulateConfig(ctx context.Context, in *CreateSimulateConfigRequest, opts ...grpc.CallOption) (*CreateSimulateConfigResponse, error) {
	out := new(CreateSimulateConfigResponse)
	err := c.cc.Invoke(ctx, Middleware_CreateSimulateConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) UpdateSimulateConfig(ctx context.Context, in *UpdateSimulateConfigRequest, opts ...grpc.CallOption) (*UpdateSimulateConfigResponse, error) {
	out := new(UpdateSimulateConfigResponse)
	err := c.cc.Invoke(ctx, Middleware_UpdateSimulateConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetSimulateConfig(ctx context.Context, in *GetSimulateConfigRequest, opts ...grpc.CallOption) (*GetSimulateConfigResponse, error) {
	out := new(GetSimulateConfigResponse)
	err := c.cc.Invoke(ctx, Middleware_GetSimulateConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetSimulateConfigs(ctx context.Context, in *GetSimulateConfigsRequest, opts ...grpc.CallOption) (*GetSimulateConfigsResponse, error) {
	out := new(GetSimulateConfigsResponse)
	err := c.cc.Invoke(ctx, Middleware_GetSimulateConfigs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ExistSimulateConfig(ctx context.Context, in *ExistSimulateConfigRequest, opts ...grpc.CallOption) (*ExistSimulateConfigResponse, error) {
	out := new(ExistSimulateConfigResponse)
	err := c.cc.Invoke(ctx, Middleware_ExistSimulateConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ExistSimulateConfigConds(ctx context.Context, in *ExistSimulateConfigCondsRequest, opts ...grpc.CallOption) (*ExistSimulateConfigCondsResponse, error) {
	out := new(ExistSimulateConfigCondsResponse)
	err := c.cc.Invoke(ctx, Middleware_ExistSimulateConfigConds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) DeleteSimulateConfig(ctx context.Context, in *DeleteSimulateConfigRequest, opts ...grpc.CallOption) (*DeleteSimulateConfigResponse, error) {
	out := new(DeleteSimulateConfigResponse)
	err := c.cc.Invoke(ctx, Middleware_DeleteSimulateConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
	CreateSimulateConfig(context.Context, *CreateSimulateConfigRequest) (*CreateSimulateConfigResponse, error)
	UpdateSimulateConfig(context.Context, *UpdateSimulateConfigRequest) (*UpdateSimulateConfigResponse, error)
	GetSimulateConfig(context.Context, *GetSimulateConfigRequest) (*GetSimulateConfigResponse, error)
	GetSimulateConfigs(context.Context, *GetSimulateConfigsRequest) (*GetSimulateConfigsResponse, error)
	ExistSimulateConfig(context.Context, *ExistSimulateConfigRequest) (*ExistSimulateConfigResponse, error)
	ExistSimulateConfigConds(context.Context, *ExistSimulateConfigCondsRequest) (*ExistSimulateConfigCondsResponse, error)
	DeleteSimulateConfig(context.Context, *DeleteSimulateConfigRequest) (*DeleteSimulateConfigResponse, error)
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) CreateSimulateConfig(context.Context, *CreateSimulateConfigRequest) (*CreateSimulateConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSimulateConfig not implemented")
}
func (UnimplementedMiddlewareServer) UpdateSimulateConfig(context.Context, *UpdateSimulateConfigRequest) (*UpdateSimulateConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSimulateConfig not implemented")
}
func (UnimplementedMiddlewareServer) GetSimulateConfig(context.Context, *GetSimulateConfigRequest) (*GetSimulateConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSimulateConfig not implemented")
}
func (UnimplementedMiddlewareServer) GetSimulateConfigs(context.Context, *GetSimulateConfigsRequest) (*GetSimulateConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSimulateConfigs not implemented")
}
func (UnimplementedMiddlewareServer) ExistSimulateConfig(context.Context, *ExistSimulateConfigRequest) (*ExistSimulateConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistSimulateConfig not implemented")
}
func (UnimplementedMiddlewareServer) ExistSimulateConfigConds(context.Context, *ExistSimulateConfigCondsRequest) (*ExistSimulateConfigCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistSimulateConfigConds not implemented")
}
func (UnimplementedMiddlewareServer) DeleteSimulateConfig(context.Context, *DeleteSimulateConfigRequest) (*DeleteSimulateConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSimulateConfig not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_CreateSimulateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSimulateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateSimulateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_CreateSimulateConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateSimulateConfig(ctx, req.(*CreateSimulateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_UpdateSimulateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSimulateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).UpdateSimulateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_UpdateSimulateConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).UpdateSimulateConfig(ctx, req.(*UpdateSimulateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetSimulateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSimulateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetSimulateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetSimulateConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetSimulateConfig(ctx, req.(*GetSimulateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetSimulateConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSimulateConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetSimulateConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetSimulateConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetSimulateConfigs(ctx, req.(*GetSimulateConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ExistSimulateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistSimulateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ExistSimulateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_ExistSimulateConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ExistSimulateConfig(ctx, req.(*ExistSimulateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ExistSimulateConfigConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistSimulateConfigCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ExistSimulateConfigConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_ExistSimulateConfigConds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ExistSimulateConfigConds(ctx, req.(*ExistSimulateConfigCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_DeleteSimulateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSimulateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).DeleteSimulateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_DeleteSimulateConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).DeleteSimulateConfig(ctx, req.(*DeleteSimulateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.middleware.simulate.config.v1.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSimulateConfig",
			Handler:    _Middleware_CreateSimulateConfig_Handler,
		},
		{
			MethodName: "UpdateSimulateConfig",
			Handler:    _Middleware_UpdateSimulateConfig_Handler,
		},
		{
			MethodName: "GetSimulateConfig",
			Handler:    _Middleware_GetSimulateConfig_Handler,
		},
		{
			MethodName: "GetSimulateConfigs",
			Handler:    _Middleware_GetSimulateConfigs_Handler,
		},
		{
			MethodName: "ExistSimulateConfig",
			Handler:    _Middleware_ExistSimulateConfig_Handler,
		},
		{
			MethodName: "ExistSimulateConfigConds",
			Handler:    _Middleware_ExistSimulateConfigConds_Handler,
		},
		{
			MethodName: "DeleteSimulateConfig",
			Handler:    _Middleware_DeleteSimulateConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/order/mw/v1/simulate/config/config.proto",
}
