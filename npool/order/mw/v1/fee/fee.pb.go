// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.18.1
// source: npool/order/mw/v1/fee/fee.proto

package fee

import (
	v1 "github.com/NpoolPlatform/message/npool/basetypes/good/v1"
	v11 "github.com/NpoolPlatform/message/npool/basetypes/order/v1"
	v12 "github.com/NpoolPlatform/message/npool/basetypes/v1"
	_ "github.com/NpoolPlatform/message/npool/order/mw/v1/order"
	coupon "github.com/NpoolPlatform/message/npool/order/mw/v1/order/coupon"
	payment "github.com/NpoolPlatform/message/npool/order/mw/v1/payment"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FeeOrderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Order base
	ID            *uint32                `protobuf:"varint,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID         *string                `protobuf:"bytes,20,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	AppID         *string                `protobuf:"bytes,30,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	UserID        *string                `protobuf:"bytes,40,opt,name=UserID,proto3,oneof" json:"UserID,omitempty"`
	GoodID        *string                `protobuf:"bytes,50,opt,name=GoodID,proto3,oneof" json:"GoodID,omitempty"`
	GoodType      *v1.GoodType           `protobuf:"varint,60,opt,name=GoodType,proto3,enum=basetypes.good.v1.GoodType,oneof" json:"GoodType,omitempty"`
	AppGoodID     *string                `protobuf:"bytes,70,opt,name=AppGoodID,proto3,oneof" json:"AppGoodID,omitempty"`
	OrderID       *string                `protobuf:"bytes,80,opt,name=OrderID,proto3,oneof" json:"OrderID,omitempty"`
	ParentOrderID *string                `protobuf:"bytes,90,opt,name=ParentOrderID,proto3,oneof" json:"ParentOrderID,omitempty"` // It's must for fee order
	OrderType     *v11.OrderType         `protobuf:"varint,100,opt,name=OrderType,proto3,enum=basetypes.order.v1.OrderType,oneof" json:"OrderType,omitempty"`
	PaymentType   *v11.PaymentType       `protobuf:"varint,110,opt,name=PaymentType,proto3,enum=basetypes.order.v1.PaymentType,oneof" json:"PaymentType,omitempty"`
	CreateMethod  *v11.OrderCreateMethod `protobuf:"varint,120,opt,name=CreateMethod,proto3,enum=basetypes.order.v1.OrderCreateMethod,oneof" json:"CreateMethod,omitempty"`
	// Power rental
	GoodValueUSD      *string `protobuf:"bytes,220,opt,name=GoodValueUSD,proto3,oneof" json:"GoodValueUSD,omitempty"`
	PaymentAmountUSD  *string `protobuf:"bytes,230,opt,name=PaymentAmountUSD,proto3,oneof" json:"PaymentAmountUSD,omitempty"`
	DiscountAmountUSD *string `protobuf:"bytes,240,opt,name=DiscountAmountUSD,proto3,oneof" json:"DiscountAmountUSD,omitempty"`
	PromotionID       *string `protobuf:"bytes,250,opt,name=PromotionID,proto3,oneof" json:"PromotionID,omitempty"`
	DurationSeconds   *uint32 `protobuf:"varint,260,opt,name=DurationSeconds,proto3,oneof" json:"DurationSeconds,omitempty"`
	// Order state base
	OrderState *v11.OrderState `protobuf:"varint,300,opt,name=OrderState,proto3,enum=basetypes.order.v1.OrderState,oneof" json:"OrderState,omitempty"`
	// Power rental state
	UserSetPaid      *bool             `protobuf:"varint,410,opt,name=UserSetPaid,proto3,oneof" json:"UserSetPaid,omitempty"`
	UserSetCanceled  *bool             `protobuf:"varint,420,opt,name=UserSetCanceled,proto3,oneof" json:"UserSetCanceled,omitempty"`
	AdminSetCanceled *bool             `protobuf:"varint,430,opt,name=AdminSetCanceled,proto3,oneof" json:"AdminSetCanceled,omitempty"`
	PaymentState     *v11.PaymentState `protobuf:"varint,440,opt,name=PaymentState,proto3,enum=basetypes.order.v1.PaymentState,oneof" json:"PaymentState,omitempty"`
	// Work flow and lock
	Rollback     *bool   `protobuf:"varint,500,opt,name=Rollback,proto3,oneof" json:"Rollback,omitempty"`
	LedgerLockID *string `protobuf:"bytes,510,opt,name=LedgerLockID,proto3,oneof" json:"LedgerLockID,omitempty"`
	PaymentID    *string `protobuf:"bytes,520,opt,name=PaymentID,proto3,oneof" json:"PaymentID,omitempty"`
	// Coupons
	CouponIDs []string `protobuf:"bytes,600,rep,name=CouponIDs,proto3" json:"CouponIDs,omitempty"`
	// Payment balances
	PaymentBalances []*payment.PaymentBalanceReq `protobuf:"bytes,610,rep,name=PaymentBalances,proto3" json:"PaymentBalances,omitempty"`
	// Payment transfers
	PaymentTransfers []*payment.PaymentTransferReq `protobuf:"bytes,620,rep,name=PaymentTransfers,proto3" json:"PaymentTransfers,omitempty"`
}

func (x *FeeOrderReq) Reset() {
	*x = FeeOrderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_fee_fee_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeOrderReq) ProtoMessage() {}

func (x *FeeOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_fee_fee_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeOrderReq.ProtoReflect.Descriptor instead.
func (*FeeOrderReq) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_fee_fee_proto_rawDescGZIP(), []int{0}
}

func (x *FeeOrderReq) GetID() uint32 {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return 0
}

func (x *FeeOrderReq) GetEntID() string {
	if x != nil && x.EntID != nil {
		return *x.EntID
	}
	return ""
}

func (x *FeeOrderReq) GetAppID() string {
	if x != nil && x.AppID != nil {
		return *x.AppID
	}
	return ""
}

func (x *FeeOrderReq) GetUserID() string {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return ""
}

func (x *FeeOrderReq) GetGoodID() string {
	if x != nil && x.GoodID != nil {
		return *x.GoodID
	}
	return ""
}

func (x *FeeOrderReq) GetGoodType() v1.GoodType {
	if x != nil && x.GoodType != nil {
		return *x.GoodType
	}
	return v1.GoodType(0)
}

func (x *FeeOrderReq) GetAppGoodID() string {
	if x != nil && x.AppGoodID != nil {
		return *x.AppGoodID
	}
	return ""
}

func (x *FeeOrderReq) GetOrderID() string {
	if x != nil && x.OrderID != nil {
		return *x.OrderID
	}
	return ""
}

func (x *FeeOrderReq) GetParentOrderID() string {
	if x != nil && x.ParentOrderID != nil {
		return *x.ParentOrderID
	}
	return ""
}

func (x *FeeOrderReq) GetOrderType() v11.OrderType {
	if x != nil && x.OrderType != nil {
		return *x.OrderType
	}
	return v11.OrderType(0)
}

func (x *FeeOrderReq) GetPaymentType() v11.PaymentType {
	if x != nil && x.PaymentType != nil {
		return *x.PaymentType
	}
	return v11.PaymentType(0)
}

func (x *FeeOrderReq) GetCreateMethod() v11.OrderCreateMethod {
	if x != nil && x.CreateMethod != nil {
		return *x.CreateMethod
	}
	return v11.OrderCreateMethod(0)
}

func (x *FeeOrderReq) GetGoodValueUSD() string {
	if x != nil && x.GoodValueUSD != nil {
		return *x.GoodValueUSD
	}
	return ""
}

func (x *FeeOrderReq) GetPaymentAmountUSD() string {
	if x != nil && x.PaymentAmountUSD != nil {
		return *x.PaymentAmountUSD
	}
	return ""
}

func (x *FeeOrderReq) GetDiscountAmountUSD() string {
	if x != nil && x.DiscountAmountUSD != nil {
		return *x.DiscountAmountUSD
	}
	return ""
}

func (x *FeeOrderReq) GetPromotionID() string {
	if x != nil && x.PromotionID != nil {
		return *x.PromotionID
	}
	return ""
}

func (x *FeeOrderReq) GetDurationSeconds() uint32 {
	if x != nil && x.DurationSeconds != nil {
		return *x.DurationSeconds
	}
	return 0
}

func (x *FeeOrderReq) GetOrderState() v11.OrderState {
	if x != nil && x.OrderState != nil {
		return *x.OrderState
	}
	return v11.OrderState(0)
}

func (x *FeeOrderReq) GetUserSetPaid() bool {
	if x != nil && x.UserSetPaid != nil {
		return *x.UserSetPaid
	}
	return false
}

func (x *FeeOrderReq) GetUserSetCanceled() bool {
	if x != nil && x.UserSetCanceled != nil {
		return *x.UserSetCanceled
	}
	return false
}

func (x *FeeOrderReq) GetAdminSetCanceled() bool {
	if x != nil && x.AdminSetCanceled != nil {
		return *x.AdminSetCanceled
	}
	return false
}

func (x *FeeOrderReq) GetPaymentState() v11.PaymentState {
	if x != nil && x.PaymentState != nil {
		return *x.PaymentState
	}
	return v11.PaymentState(0)
}

func (x *FeeOrderReq) GetRollback() bool {
	if x != nil && x.Rollback != nil {
		return *x.Rollback
	}
	return false
}

func (x *FeeOrderReq) GetLedgerLockID() string {
	if x != nil && x.LedgerLockID != nil {
		return *x.LedgerLockID
	}
	return ""
}

func (x *FeeOrderReq) GetPaymentID() string {
	if x != nil && x.PaymentID != nil {
		return *x.PaymentID
	}
	return ""
}

func (x *FeeOrderReq) GetCouponIDs() []string {
	if x != nil {
		return x.CouponIDs
	}
	return nil
}

func (x *FeeOrderReq) GetPaymentBalances() []*payment.PaymentBalanceReq {
	if x != nil {
		return x.PaymentBalances
	}
	return nil
}

func (x *FeeOrderReq) GetPaymentTransfers() []*payment.PaymentTransferReq {
	if x != nil {
		return x.PaymentTransfers
	}
	return nil
}

type FeeOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Base order information
	// @inject_tag: sql:"id"
	ID uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty" sql:"id"`
	// @inject_tag: sql:"ent_id"
	EntID string `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty" sql:"ent_id"`
	// @inject_tag: sql:"app_id"
	AppID string `protobuf:"bytes,30,opt,name=AppID,proto3" json:"AppID,omitempty" sql:"app_id"`
	// @inject_tag: sql:"user_id"
	UserID string `protobuf:"bytes,40,opt,name=UserID,proto3" json:"UserID,omitempty" sql:"user_id"`
	// @inject_tag: sql:"good_id"
	GoodID string `protobuf:"bytes,50,opt,name=GoodID,proto3" json:"GoodID,omitempty" sql:"good_id"`
	// @inject_tag: sql:"good_type"
	GoodTypeStr string      `protobuf:"bytes,60,opt,name=GoodTypeStr,proto3" json:"GoodTypeStr,omitempty" sql:"good_type"`
	GoodType    v1.GoodType `protobuf:"varint,70,opt,name=GoodType,proto3,enum=basetypes.good.v1.GoodType" json:"GoodType,omitempty"`
	// @inject_tag: sql:"app_good_id"
	AppGoodID string `protobuf:"bytes,80,opt,name=AppGoodID,proto3" json:"AppGoodID,omitempty" sql:"app_good_id"`
	// @inject_tag: sql:"order_id"
	OrderID string `protobuf:"bytes,90,opt,name=OrderID,proto3" json:"OrderID,omitempty" sql:"order_id"`
	// @inject_tag: sql:"parent_order_id"
	ParentOrderID string `protobuf:"bytes,100,opt,name=ParentOrderID,proto3" json:"ParentOrderID,omitempty" sql:"parent_order_id"`
	// @inject_tag: sql:"parent_app_good_id"
	ParentAppGoodID string `protobuf:"bytes,110,opt,name=ParentAppGoodID,proto3" json:"ParentAppGoodID,omitempty" sql:"parent_app_good_id"`
	// @inject_tag: sql:"parent_good_type"
	ParentGoodTypeStr string      `protobuf:"bytes,120,opt,name=ParentGoodTypeStr,proto3" json:"ParentGoodTypeStr,omitempty" sql:"parent_good_type"`
	ParentGoodType    v1.GoodType `protobuf:"varint,130,opt,name=ParentGoodType,proto3,enum=basetypes.good.v1.GoodType" json:"ParentGoodType,omitempty"`
	// @inject_tag: sql:"order_type"
	OrderTypeStr string        `protobuf:"bytes,140,opt,name=OrderTypeStr,proto3" json:"OrderTypeStr,omitempty" sql:"order_type"`
	OrderType    v11.OrderType `protobuf:"varint,150,opt,name=OrderType,proto3,enum=basetypes.order.v1.OrderType" json:"OrderType,omitempty"`
	// @inject_tag: sql:"payment_type"
	PaymentTypeStr string          `protobuf:"bytes,160,opt,name=PaymentTypeStr,proto3" json:"PaymentTypeStr,omitempty" sql:"payment_type"`
	PaymentType    v11.PaymentType `protobuf:"varint,170,opt,name=PaymentType,proto3,enum=basetypes.order.v1.PaymentType" json:"PaymentType,omitempty"`
	// @inject_tag: sql:"create_method"
	CreateMethodStr string                `protobuf:"bytes,180,opt,name=CreateMethodStr,proto3" json:"CreateMethodStr,omitempty" sql:"create_method"`
	CreateMethod    v11.OrderCreateMethod `protobuf:"varint,190,opt,name=CreateMethod,proto3,enum=basetypes.order.v1.OrderCreateMethod" json:"CreateMethod,omitempty"`
	// Base order state information
	// @inject_tag: sql:"order_state"
	OrderStateStr string         `protobuf:"bytes,200,opt,name=OrderStateStr,proto3" json:"OrderStateStr,omitempty" sql:"order_state"`
	OrderState    v11.OrderState `protobuf:"varint,210,opt,name=OrderState,proto3,enum=basetypes.order.v1.OrderState" json:"OrderState,omitempty"`
	// Power rental information
	// @inject_tag: sql:"good_value_usd"
	GoodValueUSD string `protobuf:"bytes,300,opt,name=GoodValueUSD,proto3" json:"GoodValueUSD,omitempty" sql:"good_value_usd"`
	// @inject_tag: sql:"payment_good_value_usd"
	PaymentGoodValueUSD string `protobuf:"bytes,310,opt,name=PaymentGoodValueUSD,proto3" json:"PaymentGoodValueUSD,omitempty" sql:"payment_good_value_usd"`
	// @inject_tag: sql:"payment_amount_usd"
	PaymentAmountUSD string `protobuf:"bytes,320,opt,name=PaymentAmountUSD,proto3" json:"PaymentAmountUSD,omitempty" sql:"payment_amount_usd"`
	// @inject_tag: sql:"discount_amount_usd"
	DiscountAmountUSD string `protobuf:"bytes,330,opt,name=DiscountAmountUSD,proto3" json:"DiscountAmountUSD,omitempty" sql:"discount_amount_usd"`
	// @inject_tag: sql:"promotion_id"
	PromotionID string `protobuf:"bytes,340,opt,name=PromotionID,proto3" json:"PromotionID,omitempty" sql:"promotion_id"`
	// @inject_tag: sql:"duration_seconds"
	DurationSeconds uint32 `protobuf:"varint,350,opt,name=DurationSeconds,proto3" json:"DurationSeconds,omitempty" sql:"duration_seconds"`
	// Power rental state information
	// @inject_tag: sql:"cancel_state"
	CancelStateStr string         `protobuf:"bytes,400,opt,name=CancelStateStr,proto3" json:"CancelStateStr,omitempty" sql:"cancel_state"`
	CancelState    v11.OrderState `protobuf:"varint,410,opt,name=CancelState,proto3,enum=basetypes.order.v1.OrderState" json:"CancelState,omitempty"`
	// @inject_tag: sql:"canceled_at"
	CanceledAt uint32 `protobuf:"varint,420,opt,name=CanceledAt,proto3" json:"CanceledAt,omitempty" sql:"canceled_at"`
	// @inject_tag: sql:"paid_at"
	PaidAt uint32 `protobuf:"varint,430,opt,name=PaidAt,proto3" json:"PaidAt,omitempty" sql:"paid_at"`
	// @inject_tag: sql:"user_set_paid"
	UserSetPaid bool `protobuf:"varint,440,opt,name=UserSetPaid,proto3" json:"UserSetPaid,omitempty" sql:"user_set_paid"`
	// @inject_tag: sql:"user_set_canceled"
	UserSetCanceled bool `protobuf:"varint,450,opt,name=UserSetCanceled,proto3" json:"UserSetCanceled,omitempty" sql:"user_set_canceled"`
	// @inject_tag: sql:"admin_set_canceled"
	AdminSetCanceled bool `protobuf:"varint,460,opt,name=AdminSetCanceled,proto3" json:"AdminSetCanceled,omitempty" sql:"admin_set_canceled"`
	// @inject_tag: sql:"payment_state"
	PaymentStateStr string           `protobuf:"bytes,470,opt,name=PaymentStateStr,proto3" json:"PaymentStateStr,omitempty" sql:"payment_state"`
	PaymentState    v11.PaymentState `protobuf:"varint,480,opt,name=PaymentState,proto3,enum=basetypes.order.v1.PaymentState" json:"PaymentState,omitempty"`
	// @inject_tag: sql:"ledger_lock_id"
	LedgerLockID string `protobuf:"bytes,490,opt,name=LedgerLockID,proto3" json:"LedgerLockID,omitempty" sql:"ledger_lock_id"`
	// @inject_tag: sql:"payment_id"
	PaymentID string `protobuf:"bytes,500,opt,name=PaymentID,proto3" json:"PaymentID,omitempty" sql:"payment_id"`
	// Coupons
	Coupons []*coupon.OrderCouponInfo `protobuf:"bytes,600,rep,name=Coupons,proto3" json:"Coupons,omitempty"`
	// Payment balances
	PaymentBalances []*payment.PaymentBalanceInfo `protobuf:"bytes,610,rep,name=PaymentBalances,proto3" json:"PaymentBalances,omitempty"`
	// Payment transfers
	PaymentTransfers []*payment.PaymentTransferInfo `protobuf:"bytes,620,rep,name=PaymentTransfers,proto3" json:"PaymentTransfers,omitempty"`
	// @inject_tag: sql:"created_at"
	CreatedAt uint32 `protobuf:"varint,1000,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
	// @inject_tag: sql:"updated_at"
	UpdatedAt uint32 `protobuf:"varint,1010,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty" sql:"updated_at"`
}

func (x *FeeOrder) Reset() {
	*x = FeeOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_fee_fee_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeOrder) ProtoMessage() {}

func (x *FeeOrder) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_fee_fee_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeOrder.ProtoReflect.Descriptor instead.
func (*FeeOrder) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_fee_fee_proto_rawDescGZIP(), []int{1}
}

func (x *FeeOrder) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *FeeOrder) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *FeeOrder) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *FeeOrder) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *FeeOrder) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *FeeOrder) GetGoodTypeStr() string {
	if x != nil {
		return x.GoodTypeStr
	}
	return ""
}

func (x *FeeOrder) GetGoodType() v1.GoodType {
	if x != nil {
		return x.GoodType
	}
	return v1.GoodType(0)
}

func (x *FeeOrder) GetAppGoodID() string {
	if x != nil {
		return x.AppGoodID
	}
	return ""
}

func (x *FeeOrder) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

func (x *FeeOrder) GetParentOrderID() string {
	if x != nil {
		return x.ParentOrderID
	}
	return ""
}

func (x *FeeOrder) GetParentAppGoodID() string {
	if x != nil {
		return x.ParentAppGoodID
	}
	return ""
}

func (x *FeeOrder) GetParentGoodTypeStr() string {
	if x != nil {
		return x.ParentGoodTypeStr
	}
	return ""
}

func (x *FeeOrder) GetParentGoodType() v1.GoodType {
	if x != nil {
		return x.ParentGoodType
	}
	return v1.GoodType(0)
}

func (x *FeeOrder) GetOrderTypeStr() string {
	if x != nil {
		return x.OrderTypeStr
	}
	return ""
}

func (x *FeeOrder) GetOrderType() v11.OrderType {
	if x != nil {
		return x.OrderType
	}
	return v11.OrderType(0)
}

func (x *FeeOrder) GetPaymentTypeStr() string {
	if x != nil {
		return x.PaymentTypeStr
	}
	return ""
}

func (x *FeeOrder) GetPaymentType() v11.PaymentType {
	if x != nil {
		return x.PaymentType
	}
	return v11.PaymentType(0)
}

func (x *FeeOrder) GetCreateMethodStr() string {
	if x != nil {
		return x.CreateMethodStr
	}
	return ""
}

func (x *FeeOrder) GetCreateMethod() v11.OrderCreateMethod {
	if x != nil {
		return x.CreateMethod
	}
	return v11.OrderCreateMethod(0)
}

func (x *FeeOrder) GetOrderStateStr() string {
	if x != nil {
		return x.OrderStateStr
	}
	return ""
}

func (x *FeeOrder) GetOrderState() v11.OrderState {
	if x != nil {
		return x.OrderState
	}
	return v11.OrderState(0)
}

func (x *FeeOrder) GetGoodValueUSD() string {
	if x != nil {
		return x.GoodValueUSD
	}
	return ""
}

func (x *FeeOrder) GetPaymentGoodValueUSD() string {
	if x != nil {
		return x.PaymentGoodValueUSD
	}
	return ""
}

func (x *FeeOrder) GetPaymentAmountUSD() string {
	if x != nil {
		return x.PaymentAmountUSD
	}
	return ""
}

func (x *FeeOrder) GetDiscountAmountUSD() string {
	if x != nil {
		return x.DiscountAmountUSD
	}
	return ""
}

func (x *FeeOrder) GetPromotionID() string {
	if x != nil {
		return x.PromotionID
	}
	return ""
}

func (x *FeeOrder) GetDurationSeconds() uint32 {
	if x != nil {
		return x.DurationSeconds
	}
	return 0
}

func (x *FeeOrder) GetCancelStateStr() string {
	if x != nil {
		return x.CancelStateStr
	}
	return ""
}

func (x *FeeOrder) GetCancelState() v11.OrderState {
	if x != nil {
		return x.CancelState
	}
	return v11.OrderState(0)
}

func (x *FeeOrder) GetCanceledAt() uint32 {
	if x != nil {
		return x.CanceledAt
	}
	return 0
}

func (x *FeeOrder) GetPaidAt() uint32 {
	if x != nil {
		return x.PaidAt
	}
	return 0
}

func (x *FeeOrder) GetUserSetPaid() bool {
	if x != nil {
		return x.UserSetPaid
	}
	return false
}

func (x *FeeOrder) GetUserSetCanceled() bool {
	if x != nil {
		return x.UserSetCanceled
	}
	return false
}

func (x *FeeOrder) GetAdminSetCanceled() bool {
	if x != nil {
		return x.AdminSetCanceled
	}
	return false
}

func (x *FeeOrder) GetPaymentStateStr() string {
	if x != nil {
		return x.PaymentStateStr
	}
	return ""
}

func (x *FeeOrder) GetPaymentState() v11.PaymentState {
	if x != nil {
		return x.PaymentState
	}
	return v11.PaymentState(0)
}

func (x *FeeOrder) GetLedgerLockID() string {
	if x != nil {
		return x.LedgerLockID
	}
	return ""
}

func (x *FeeOrder) GetPaymentID() string {
	if x != nil {
		return x.PaymentID
	}
	return ""
}

func (x *FeeOrder) GetCoupons() []*coupon.OrderCouponInfo {
	if x != nil {
		return x.Coupons
	}
	return nil
}

func (x *FeeOrder) GetPaymentBalances() []*payment.PaymentBalanceInfo {
	if x != nil {
		return x.PaymentBalances
	}
	return nil
}

func (x *FeeOrder) GetPaymentTransfers() []*payment.PaymentTransferInfo {
	if x != nil {
		return x.PaymentTransfers
	}
	return nil
}

func (x *FeeOrder) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *FeeOrder) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type FeeDuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: sql:"parent_order_id"
	ParentOrderID string `protobuf:"bytes,10,opt,name=ParentOrderID,proto3" json:"ParentOrderID,omitempty" sql:"parent_order_id"`
	// @inject_tag: sql:"app_good_id"
	AppGoodID string `protobuf:"bytes,20,opt,name=AppGoodID,proto3" json:"AppGoodID,omitempty" sql:"app_good_id"`
	// @inject_tag: sql:"total_duration_seconds"
	TotalDurationSeconds uint32 `protobuf:"varint,30,opt,name=TotalDurationSeconds,proto3" json:"TotalDurationSeconds,omitempty" sql:"total_duration_seconds"`
}

func (x *FeeDuration) Reset() {
	*x = FeeDuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_fee_fee_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeeDuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeeDuration) ProtoMessage() {}

func (x *FeeDuration) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_fee_fee_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeeDuration.ProtoReflect.Descriptor instead.
func (*FeeDuration) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_fee_fee_proto_rawDescGZIP(), []int{2}
}

func (x *FeeDuration) GetParentOrderID() string {
	if x != nil {
		return x.ParentOrderID
	}
	return ""
}

func (x *FeeDuration) GetAppGoodID() string {
	if x != nil {
		return x.AppGoodID
	}
	return ""
}

func (x *FeeDuration) GetTotalDurationSeconds() uint32 {
	if x != nil {
		return x.TotalDurationSeconds
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// order
	ID             *v12.Uint32Val      `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	IDs            *v12.Uint32SliceVal `protobuf:"bytes,20,opt,name=IDs,proto3,oneof" json:"IDs,omitempty"`
	EntID          *v12.StringVal      `protobuf:"bytes,30,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	EntIDs         *v12.StringSliceVal `protobuf:"bytes,40,opt,name=EntIDs,proto3,oneof" json:"EntIDs,omitempty"`
	OrderID        *v12.StringVal      `protobuf:"bytes,50,opt,name=OrderID,proto3,oneof" json:"OrderID,omitempty"`
	OrderIDs       *v12.StringSliceVal `protobuf:"bytes,60,opt,name=OrderIDs,proto3,oneof" json:"OrderIDs,omitempty"`
	AppID          *v12.StringVal      `protobuf:"bytes,70,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	UserID         *v12.StringVal      `protobuf:"bytes,80,opt,name=UserID,proto3,oneof" json:"UserID,omitempty"`
	GoodID         *v12.StringVal      `protobuf:"bytes,90,opt,name=GoodID,proto3,oneof" json:"GoodID,omitempty"`
	GoodIDs        *v12.StringSliceVal `protobuf:"bytes,100,opt,name=GoodIDs,proto3,oneof" json:"GoodIDs,omitempty"`
	AppGoodID      *v12.StringVal      `protobuf:"bytes,110,opt,name=AppGoodID,proto3,oneof" json:"AppGoodID,omitempty"`
	AppGoodIDs     *v12.StringSliceVal `protobuf:"bytes,120,opt,name=AppGoodIDs,proto3,oneof" json:"AppGoodIDs,omitempty"`
	ParentOrderID  *v12.StringVal      `protobuf:"bytes,130,opt,name=ParentOrderID,proto3,oneof" json:"ParentOrderID,omitempty"`
	ParentOrderIDs *v12.StringSliceVal `protobuf:"bytes,140,opt,name=ParentOrderIDs,proto3,oneof" json:"ParentOrderIDs,omitempty"`
	OrderType      *v12.Uint32Val      `protobuf:"bytes,150,opt,name=OrderType,proto3,oneof" json:"OrderType,omitempty"`
	PaymentType    *v12.Uint32Val      `protobuf:"bytes,160,opt,name=PaymentType,proto3,oneof" json:"PaymentType,omitempty"`
	PaymentTypes   *v12.Uint32SliceVal `protobuf:"bytes,170,opt,name=PaymentTypes,proto3,oneof" json:"PaymentTypes,omitempty"`
	// orderstate
	OrderState  *v12.Uint32Val      `protobuf:"bytes,200,opt,name=OrderState,proto3,oneof" json:"OrderState,omitempty"`
	OrderStates *v12.Uint32SliceVal `protobuf:"bytes,210,opt,name=OrderStates,proto3,oneof" json:"OrderStates,omitempty"`
	// power rental
	UserSetCanceled  *v12.BoolVal `protobuf:"bytes,300,opt,name=UserSetCanceled,proto3,oneof" json:"UserSetCanceled,omitempty"`
	AdminSetCanceled *v12.BoolVal `protobuf:"bytes,310,opt,name=AdminSetCanceled,proto3,oneof" json:"AdminSetCanceled,omitempty"`
	// power rental state
	PaymentState  *v12.Uint32Val      `protobuf:"bytes,400,opt,name=PaymentState,proto3,oneof" json:"PaymentState,omitempty"`
	PaymentStates *v12.Uint32SliceVal `protobuf:"bytes,410,opt,name=PaymentStates,proto3,oneof" json:"PaymentStates,omitempty"`
	// coupon
	CouponID  *v12.StringVal      `protobuf:"bytes,500,opt,name=CouponID,proto3,oneof" json:"CouponID,omitempty"`
	CouponIDs *v12.StringSliceVal `protobuf:"bytes,510,opt,name=CouponIDs,proto3,oneof" json:"CouponIDs,omitempty"`
	// other
	CreatedAt *v12.Uint32Val `protobuf:"bytes,600,opt,name=CreatedAt,proto3,oneof" json:"CreatedAt,omitempty"`
	UpdatedAt *v12.Uint32Val `protobuf:"bytes,610,opt,name=UpdatedAt,proto3,oneof" json:"UpdatedAt,omitempty"`
	PaidAt    *v12.Uint32Val `protobuf:"bytes,620,opt,name=PaidAt,proto3,oneof" json:"PaidAt,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_fee_fee_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_fee_fee_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_fee_fee_proto_rawDescGZIP(), []int{3}
}

func (x *Conds) GetID() *v12.Uint32Val {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetIDs() *v12.Uint32SliceVal {
	if x != nil {
		return x.IDs
	}
	return nil
}

func (x *Conds) GetEntID() *v12.StringVal {
	if x != nil {
		return x.EntID
	}
	return nil
}

func (x *Conds) GetEntIDs() *v12.StringSliceVal {
	if x != nil {
		return x.EntIDs
	}
	return nil
}

func (x *Conds) GetOrderID() *v12.StringVal {
	if x != nil {
		return x.OrderID
	}
	return nil
}

func (x *Conds) GetOrderIDs() *v12.StringSliceVal {
	if x != nil {
		return x.OrderIDs
	}
	return nil
}

func (x *Conds) GetAppID() *v12.StringVal {
	if x != nil {
		return x.AppID
	}
	return nil
}

func (x *Conds) GetUserID() *v12.StringVal {
	if x != nil {
		return x.UserID
	}
	return nil
}

func (x *Conds) GetGoodID() *v12.StringVal {
	if x != nil {
		return x.GoodID
	}
	return nil
}

func (x *Conds) GetGoodIDs() *v12.StringSliceVal {
	if x != nil {
		return x.GoodIDs
	}
	return nil
}

func (x *Conds) GetAppGoodID() *v12.StringVal {
	if x != nil {
		return x.AppGoodID
	}
	return nil
}

func (x *Conds) GetAppGoodIDs() *v12.StringSliceVal {
	if x != nil {
		return x.AppGoodIDs
	}
	return nil
}

func (x *Conds) GetParentOrderID() *v12.StringVal {
	if x != nil {
		return x.ParentOrderID
	}
	return nil
}

func (x *Conds) GetParentOrderIDs() *v12.StringSliceVal {
	if x != nil {
		return x.ParentOrderIDs
	}
	return nil
}

func (x *Conds) GetOrderType() *v12.Uint32Val {
	if x != nil {
		return x.OrderType
	}
	return nil
}

func (x *Conds) GetPaymentType() *v12.Uint32Val {
	if x != nil {
		return x.PaymentType
	}
	return nil
}

func (x *Conds) GetPaymentTypes() *v12.Uint32SliceVal {
	if x != nil {
		return x.PaymentTypes
	}
	return nil
}

func (x *Conds) GetOrderState() *v12.Uint32Val {
	if x != nil {
		return x.OrderState
	}
	return nil
}

func (x *Conds) GetOrderStates() *v12.Uint32SliceVal {
	if x != nil {
		return x.OrderStates
	}
	return nil
}

func (x *Conds) GetUserSetCanceled() *v12.BoolVal {
	if x != nil {
		return x.UserSetCanceled
	}
	return nil
}

func (x *Conds) GetAdminSetCanceled() *v12.BoolVal {
	if x != nil {
		return x.AdminSetCanceled
	}
	return nil
}

func (x *Conds) GetPaymentState() *v12.Uint32Val {
	if x != nil {
		return x.PaymentState
	}
	return nil
}

func (x *Conds) GetPaymentStates() *v12.Uint32SliceVal {
	if x != nil {
		return x.PaymentStates
	}
	return nil
}

func (x *Conds) GetCouponID() *v12.StringVal {
	if x != nil {
		return x.CouponID
	}
	return nil
}

func (x *Conds) GetCouponIDs() *v12.StringSliceVal {
	if x != nil {
		return x.CouponIDs
	}
	return nil
}

func (x *Conds) GetCreatedAt() *v12.Uint32Val {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Conds) GetUpdatedAt() *v12.Uint32Val {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Conds) GetPaidAt() *v12.Uint32Val {
	if x != nil {
		return x.PaidAt
	}
	return nil
}

type CreateFeeOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *FeeOrderReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateFeeOrderRequest) Reset() {
	*x = CreateFeeOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_fee_fee_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFeeOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFeeOrderRequest) ProtoMessage() {}

func (x *CreateFeeOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_fee_fee_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFeeOrderRequest.ProtoReflect.Descriptor instead.
func (*CreateFeeOrderRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_fee_fee_proto_rawDescGZIP(), []int{4}
}

func (x *CreateFeeOrderRequest) GetInfo() *FeeOrderReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateFeeOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *FeeOrder `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateFeeOrderResponse) Reset() {
	*x = CreateFeeOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_fee_fee_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFeeOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFeeOrderResponse) ProtoMessage() {}

func (x *CreateFeeOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_fee_fee_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFeeOrderResponse.ProtoReflect.Descriptor instead.
func (*CreateFeeOrderResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_fee_fee_proto_rawDescGZIP(), []int{5}
}

func (x *CreateFeeOrderResponse) GetInfo() *FeeOrder {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateFeeOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*FeeOrderReq `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateFeeOrdersRequest) Reset() {
	*x = CreateFeeOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_fee_fee_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFeeOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFeeOrdersRequest) ProtoMessage() {}

func (x *CreateFeeOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_fee_fee_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFeeOrdersRequest.ProtoReflect.Descriptor instead.
func (*CreateFeeOrdersRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_fee_fee_proto_rawDescGZIP(), []int{6}
}

func (x *CreateFeeOrdersRequest) GetInfos() []*FeeOrderReq {
	if x != nil {
		return x.Infos
	}
	return nil
}

type CreateFeeOrdersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*FeeOrder `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateFeeOrdersResponse) Reset() {
	*x = CreateFeeOrdersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_fee_fee_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFeeOrdersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFeeOrdersResponse) ProtoMessage() {}

func (x *CreateFeeOrdersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_fee_fee_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFeeOrdersResponse.ProtoReflect.Descriptor instead.
func (*CreateFeeOrdersResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_fee_fee_proto_rawDescGZIP(), []int{7}
}

func (x *CreateFeeOrdersResponse) GetInfos() []*FeeOrder {
	if x != nil {
		return x.Infos
	}
	return nil
}

type UpdateFeeOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *FeeOrderReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateFeeOrderRequest) Reset() {
	*x = UpdateFeeOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_fee_fee_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFeeOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFeeOrderRequest) ProtoMessage() {}

func (x *UpdateFeeOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_fee_fee_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFeeOrderRequest.ProtoReflect.Descriptor instead.
func (*UpdateFeeOrderRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_fee_fee_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateFeeOrderRequest) GetInfo() *FeeOrderReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateFeeOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *FeeOrder `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateFeeOrderResponse) Reset() {
	*x = UpdateFeeOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_fee_fee_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFeeOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFeeOrderResponse) ProtoMessage() {}

func (x *UpdateFeeOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_fee_fee_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFeeOrderResponse.ProtoReflect.Descriptor instead.
func (*UpdateFeeOrderResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_fee_fee_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateFeeOrderResponse) GetInfo() *FeeOrder {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetFeeOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderID string `protobuf:"bytes,10,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
}

func (x *GetFeeOrderRequest) Reset() {
	*x = GetFeeOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_fee_fee_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFeeOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeeOrderRequest) ProtoMessage() {}

func (x *GetFeeOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_fee_fee_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeeOrderRequest.ProtoReflect.Descriptor instead.
func (*GetFeeOrderRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_fee_fee_proto_rawDescGZIP(), []int{10}
}

func (x *GetFeeOrderRequest) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

type GetFeeOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *FeeOrder `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetFeeOrderResponse) Reset() {
	*x = GetFeeOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_fee_fee_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFeeOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeeOrderResponse) ProtoMessage() {}

func (x *GetFeeOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_fee_fee_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeeOrderResponse.ProtoReflect.Descriptor instead.
func (*GetFeeOrderResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_fee_fee_proto_rawDescGZIP(), []int{11}
}

func (x *GetFeeOrderResponse) GetInfo() *FeeOrder {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetFeeOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetFeeOrdersRequest) Reset() {
	*x = GetFeeOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_fee_fee_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFeeOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeeOrdersRequest) ProtoMessage() {}

func (x *GetFeeOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_fee_fee_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeeOrdersRequest.ProtoReflect.Descriptor instead.
func (*GetFeeOrdersRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_fee_fee_proto_rawDescGZIP(), []int{12}
}

func (x *GetFeeOrdersRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetFeeOrdersRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetFeeOrdersRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetFeeOrdersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*FeeOrder `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32      `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetFeeOrdersResponse) Reset() {
	*x = GetFeeOrdersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_fee_fee_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFeeOrdersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeeOrdersResponse) ProtoMessage() {}

func (x *GetFeeOrdersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_fee_fee_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeeOrdersResponse.ProtoReflect.Descriptor instead.
func (*GetFeeOrdersResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_fee_fee_proto_rawDescGZIP(), []int{13}
}

func (x *GetFeeOrdersResponse) GetInfos() []*FeeOrder {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetFeeOrdersResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type CountFeeOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *CountFeeOrdersRequest) Reset() {
	*x = CountFeeOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_fee_fee_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountFeeOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountFeeOrdersRequest) ProtoMessage() {}

func (x *CountFeeOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_fee_fee_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountFeeOrdersRequest.ProtoReflect.Descriptor instead.
func (*CountFeeOrdersRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_fee_fee_proto_rawDescGZIP(), []int{14}
}

func (x *CountFeeOrdersRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type CountFeeOrdersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info uint32 `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CountFeeOrdersResponse) Reset() {
	*x = CountFeeOrdersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_fee_fee_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountFeeOrdersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountFeeOrdersResponse) ProtoMessage() {}

func (x *CountFeeOrdersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_fee_fee_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountFeeOrdersResponse.ProtoReflect.Descriptor instead.
func (*CountFeeOrdersResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_fee_fee_proto_rawDescGZIP(), []int{15}
}

func (x *CountFeeOrdersResponse) GetInfo() uint32 {
	if x != nil {
		return x.Info
	}
	return 0
}

type ExistFeeOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderID string `protobuf:"bytes,10,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
}

func (x *ExistFeeOrderRequest) Reset() {
	*x = ExistFeeOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_fee_fee_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistFeeOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistFeeOrderRequest) ProtoMessage() {}

func (x *ExistFeeOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_fee_fee_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistFeeOrderRequest.ProtoReflect.Descriptor instead.
func (*ExistFeeOrderRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_fee_fee_proto_rawDescGZIP(), []int{16}
}

func (x *ExistFeeOrderRequest) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

type ExistFeeOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistFeeOrderResponse) Reset() {
	*x = ExistFeeOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_fee_fee_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistFeeOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistFeeOrderResponse) ProtoMessage() {}

func (x *ExistFeeOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_fee_fee_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistFeeOrderResponse.ProtoReflect.Descriptor instead.
func (*ExistFeeOrderResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_fee_fee_proto_rawDescGZIP(), []int{17}
}

func (x *ExistFeeOrderResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type ExistFeeOrderCondsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *ExistFeeOrderCondsRequest) Reset() {
	*x = ExistFeeOrderCondsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_fee_fee_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistFeeOrderCondsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistFeeOrderCondsRequest) ProtoMessage() {}

func (x *ExistFeeOrderCondsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_fee_fee_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistFeeOrderCondsRequest.ProtoReflect.Descriptor instead.
func (*ExistFeeOrderCondsRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_fee_fee_proto_rawDescGZIP(), []int{18}
}

func (x *ExistFeeOrderCondsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type ExistFeeOrderCondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistFeeOrderCondsResponse) Reset() {
	*x = ExistFeeOrderCondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_fee_fee_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistFeeOrderCondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistFeeOrderCondsResponse) ProtoMessage() {}

func (x *ExistFeeOrderCondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_fee_fee_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistFeeOrderCondsResponse.ProtoReflect.Descriptor instead.
func (*ExistFeeOrderCondsResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_fee_fee_proto_rawDescGZIP(), []int{19}
}

func (x *ExistFeeOrderCondsResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type DeleteFeeOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *FeeOrderReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteFeeOrderRequest) Reset() {
	*x = DeleteFeeOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_fee_fee_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFeeOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFeeOrderRequest) ProtoMessage() {}

func (x *DeleteFeeOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_fee_fee_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFeeOrderRequest.ProtoReflect.Descriptor instead.
func (*DeleteFeeOrderRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_fee_fee_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteFeeOrderRequest) GetInfo() *FeeOrderReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type DeleteFeeOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *FeeOrder `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteFeeOrderResponse) Reset() {
	*x = DeleteFeeOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_fee_fee_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFeeOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFeeOrderResponse) ProtoMessage() {}

func (x *DeleteFeeOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_fee_fee_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFeeOrderResponse.ProtoReflect.Descriptor instead.
func (*DeleteFeeOrderResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_fee_fee_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteFeeOrderResponse) GetInfo() *FeeOrder {
	if x != nil {
		return x.Info
	}
	return nil
}

type DeleteFeeOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*FeeOrderReq `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *DeleteFeeOrdersRequest) Reset() {
	*x = DeleteFeeOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_fee_fee_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFeeOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFeeOrdersRequest) ProtoMessage() {}

func (x *DeleteFeeOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_fee_fee_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFeeOrdersRequest.ProtoReflect.Descriptor instead.
func (*DeleteFeeOrdersRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_fee_fee_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteFeeOrdersRequest) GetInfos() []*FeeOrderReq {
	if x != nil {
		return x.Infos
	}
	return nil
}

type DeleteFeeOrdersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*FeeOrder `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *DeleteFeeOrdersResponse) Reset() {
	*x = DeleteFeeOrdersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_mw_v1_fee_fee_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFeeOrdersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFeeOrdersResponse) ProtoMessage() {}

func (x *DeleteFeeOrdersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_mw_v1_fee_fee_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFeeOrdersResponse.ProtoReflect.Descriptor instead.
func (*DeleteFeeOrdersResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_mw_v1_fee_fee_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteFeeOrdersResponse) GetInfos() []*FeeOrder {
	if x != nil {
		return x.Infos
	}
	return nil
}

var File_npool_order_mw_v1_fee_fee_proto protoreflect.FileDescriptor

var file_npool_order_mw_v1_fee_fee_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x6d, 0x77,
	0x2f, 0x76, 0x31, 0x2f, 0x66, 0x65, 0x65, 0x2f, 0x66, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x17, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f,
	0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23,
	0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f,
	0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x6e, 0x70,
	0x6f, 0x6f, 0x6c, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x6e, 0x70, 0x6f, 0x6f, 0x6c,
	0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe1,
	0x0d, 0x0a, 0x0b, 0x46, 0x65, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x13,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44,
	0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x05, 0x52, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x46,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x50, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44,
	0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0d, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x40,
	0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x09, 0x52, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x46, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x6e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x0a, 0x52, 0x0b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x48, 0x0b, 0x52, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0c, 0x47, 0x6f, 0x6f, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x53, 0x44, 0x18, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0c, 0x52, 0x0c, 0x47, 0x6f, 0x6f, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x53, 0x44, 0x88,
	0x01, 0x01, 0x12, 0x30, 0x0a, 0x10, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x55, 0x53, 0x44, 0x18, 0xe6, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52,
	0x10, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x53,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x53, 0x44, 0x18, 0xf0, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0e, 0x52, 0x11, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x55, 0x53, 0x44, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f,
	0x52, 0x0b, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x88, 0x01, 0x01,
	0x12, 0x2e, 0x0a, 0x0f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x84, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x10, 0x52, 0x0f, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x44, 0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0xac,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x11, 0x52, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x50, 0x61, 0x69, 0x64, 0x18, 0x9a, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x12, 0x52, 0x0b,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x50, 0x61, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2e,
	0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65,
	0x64, 0x18, 0xa4, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x13, 0x52, 0x0f, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x30,
	0x0a, 0x10, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x65, 0x64, 0x18, 0xae, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x14, 0x52, 0x10, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x4a, 0x0a, 0x0c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x18, 0xb8, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x15, 0x52, 0x0c, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x08,
	0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0xf4, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x16, 0x52, 0x08, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0c, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0xfe,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52, 0x0c, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x4c,
	0x6f, 0x63, 0x6b, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x09, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x88, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52, 0x09,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x09,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x18, 0xd8, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x12, 0x59, 0x0a, 0x0f, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0xe2,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x52, 0x0f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x10, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x18, 0xec, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x52, 0x10, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x73, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x45, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x41, 0x70, 0x70, 0x49, 0x44, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x47,
	0x6f, 0x6f, 0x64, 0x49, 0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x53, 0x44, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x55, 0x53, 0x44, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x53, 0x44, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x50, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x50, 0x61, 0x69, 0x64, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x65, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x52, 0x6f, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x4c, 0x6f,
	0x63, 0x6b, 0x49, 0x44, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x22, 0x9d, 0x0f, 0x0a, 0x08, 0x46, 0x65, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x47,
	0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x12, 0x37, 0x0a,
	0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x47, 0x6f,
	0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f,
	0x64, 0x49, 0x44, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f,
	0x6f, 0x64, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x5a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x24,
	0x0a, 0x0d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x70,
	0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x2c,
	0x0a, 0x11, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x53, 0x74, 0x72, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x12, 0x44, 0x0a, 0x0e,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x82,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x53,
	0x74, 0x72, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x12, 0x3c, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x12, 0x42,
	0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0xaa, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x53, 0x74, 0x72, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x74, 0x72, 0x12, 0x4a, 0x0a,
	0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0xbe, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x25, 0x0a, 0x0d, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72,
	0x12, 0x3f, 0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0xd2,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x23, 0x0a, 0x0c, 0x47, 0x6f, 0x6f, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x53,
	0x44, 0x18, 0xac, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x47, 0x6f, 0x6f, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x55, 0x53, 0x44, 0x12, 0x31, 0x0a, 0x13, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x47, 0x6f, 0x6f, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x53, 0x44, 0x18, 0xb6, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x6f, 0x6f,
	0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x53, 0x44, 0x12, 0x2b, 0x0a, 0x10, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x53, 0x44, 0x18, 0xc0, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x55, 0x53, 0x44, 0x12, 0x2d, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x53, 0x44, 0x18, 0xca, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x55, 0x53, 0x44, 0x12, 0x21, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0xd4, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x0f, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0xde, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x0e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x72, 0x18, 0x90, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x12, 0x41, 0x0a, 0x0b,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x9a, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x0b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1f, 0x0a, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x74, 0x18, 0xa4, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x17, 0x0a, 0x06, 0x50, 0x61, 0x69, 0x64, 0x41, 0x74, 0x18, 0xae, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x50, 0x61, 0x69, 0x64, 0x41, 0x74, 0x12, 0x21, 0x0a, 0x0b, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x50, 0x61, 0x69, 0x64, 0x18, 0xb8, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x50, 0x61, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0f,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x18,
	0xc2, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x10, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x53, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x18, 0xcc, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x10, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x0f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x18, 0xd6, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x12,
	0x45, 0x0a, 0x0c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18,
	0xe0, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0xea, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x09, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0xf4, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x4d, 0x0a, 0x07, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x73, 0x18, 0xd8, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x31, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x07, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x12, 0x5a, 0x0a, 0x0f, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0xe2, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x5d, 0x0a, 0x10, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x18, 0xec, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x10, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0xf2, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x85, 0x01, 0x0a, 0x0b, 0x46, 0x65, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x47,
	0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x70, 0x70,
	0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x14, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0xda, 0x10, 0x0a, 0x05, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x12, 0x33, 0x0a, 0x03, 0x49, 0x44, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x01, 0x52,
	0x03, 0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48,
	0x02, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x06, 0x45,
	0x6e, 0x74, 0x49, 0x44, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x06, 0x45, 0x6e, 0x74,
	0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x48, 0x04, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x3d,
	0x0a, 0x08, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x05,
	0x52, 0x08, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a,
	0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x06, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x34, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x50, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x07, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49,
	0x44, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x48, 0x08, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a,
	0x07, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x73, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x09, 0x52, 0x07,
	0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x09, 0x41, 0x70,
	0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x0a, 0x52, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f,
	0x64, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f,
	0x64, 0x49, 0x44, 0x73, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x0b, 0x52, 0x0a, 0x41, 0x70, 0x70, 0x47,
	0x6f, 0x6f, 0x64, 0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0d, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x0c, 0x52, 0x0d, 0x50, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x4a,
	0x0a, 0x0e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x73,
	0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69,
	0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x0d, 0x52, 0x0e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x09, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x0e, 0x52, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x0f, 0x52, 0x0b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0c, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x10, 0x52,
	0x0c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x3d, 0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0xc8,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x11,
	0x52, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x44, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0xd2,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x6c, 0x69, 0x63, 0x65,
	0x56, 0x61, 0x6c, 0x48, 0x12, 0x52, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x18, 0xac, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x48, 0x13, 0x52, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x10,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64,
	0x18, 0xb6, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x48, 0x14,
	0x52, 0x10, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x0c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x90, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x15, 0x52, 0x0c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x0d, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x9a, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x16,
	0x52, 0x0d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x39, 0x0a, 0x08, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0xf4,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x17,
	0x52, 0x08, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a,
	0x09, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x18, 0xfe, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48,
	0x18, 0x52, 0x09, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x3b, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xd8, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x19, 0x52, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x09,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xe2, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x1a, 0x52, 0x09, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x06, 0x50, 0x61, 0x69,
	0x64, 0x41, 0x74, 0x18, 0xec, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x48, 0x1b, 0x52, 0x06, 0x50, 0x61, 0x69, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x49, 0x44, 0x73, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x45, 0x6e,
	0x74, 0x49, 0x44, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x73, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x41, 0x70, 0x70, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x41, 0x70,
	0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x41, 0x70, 0x70, 0x47,
	0x6f, 0x6f, 0x64, 0x49, 0x44, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x50, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x65, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x49, 0x44, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x44, 0x73,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x50, 0x61, 0x69, 0x64, 0x41, 0x74, 0x22, 0x51, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x46, 0x65, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x38, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4f, 0x0a, 0x16, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x54, 0x0a, 0x16, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x65, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x22, 0x52, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x05,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x66,
	0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x51, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46,
	0x65, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x66, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4f, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x46, 0x65, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2e, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x46, 0x65, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x22, 0x4c, 0x0a, 0x13, 0x47, 0x65, 0x74,
	0x46, 0x65, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x35, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x79, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x46, 0x65,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34,
	0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x66, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0x65, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x46, 0x65, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x66, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x4d, 0x0a, 0x15, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x46, 0x65, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x34, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x2c, 0x0a, 0x16, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x46, 0x65, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x30, 0x0a, 0x14, 0x45, 0x78, 0x69, 0x73, 0x74, 0x46,
	0x65, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x22, 0x2b, 0x0a, 0x15, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x46, 0x65, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x51, 0x0a, 0x19, 0x45, 0x78, 0x69, 0x73, 0x74, 0x46, 0x65,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x34, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x30, 0x0a, 0x1a, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x46, 0x65, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x51, 0x0a, 0x15, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x46, 0x65, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4f, 0x0a,
	0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x65, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x65, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x54,
	0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x65, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x65, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x52, 0x05, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x22, 0x52, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x65,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x37, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x32, 0x9e, 0x09, 0x0a, 0x0a, 0x4d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x12, 0x73, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x46, 0x65, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x66, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x66, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x0f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x2f, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x46, 0x65, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x30, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x46, 0x65, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x65,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x46, 0x65, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2b, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x66, 0x65, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x65, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x46, 0x65, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x46, 0x65, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x46, 0x65, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x46, 0x65, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x0e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x65, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x65, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x0d, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x46, 0x65, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2d, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x66, 0x65,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x46, 0x65, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x66, 0x65, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x46, 0x65, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x12, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x46, 0x65, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x12, 0x32, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x46, 0x65, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x46, 0x65, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x0e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x65, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2e,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46,
	0x65, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46,
	0x65, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x76, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x65, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x12, 0x2f, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x65, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x65, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70,
	0x6f, 0x6f, 0x6c, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f,
	0x66, 0x65, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_order_mw_v1_fee_fee_proto_rawDescOnce sync.Once
	file_npool_order_mw_v1_fee_fee_proto_rawDescData = file_npool_order_mw_v1_fee_fee_proto_rawDesc
)

func file_npool_order_mw_v1_fee_fee_proto_rawDescGZIP() []byte {
	file_npool_order_mw_v1_fee_fee_proto_rawDescOnce.Do(func() {
		file_npool_order_mw_v1_fee_fee_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_order_mw_v1_fee_fee_proto_rawDescData)
	})
	return file_npool_order_mw_v1_fee_fee_proto_rawDescData
}

var file_npool_order_mw_v1_fee_fee_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_npool_order_mw_v1_fee_fee_proto_goTypes = []interface{}{
	(*FeeOrderReq)(nil),                 // 0: order.middleware.fee.v1.FeeOrderReq
	(*FeeOrder)(nil),                    // 1: order.middleware.fee.v1.FeeOrder
	(*FeeDuration)(nil),                 // 2: order.middleware.fee.v1.FeeDuration
	(*Conds)(nil),                       // 3: order.middleware.fee.v1.Conds
	(*CreateFeeOrderRequest)(nil),       // 4: order.middleware.fee.v1.CreateFeeOrderRequest
	(*CreateFeeOrderResponse)(nil),      // 5: order.middleware.fee.v1.CreateFeeOrderResponse
	(*CreateFeeOrdersRequest)(nil),      // 6: order.middleware.fee.v1.CreateFeeOrdersRequest
	(*CreateFeeOrdersResponse)(nil),     // 7: order.middleware.fee.v1.CreateFeeOrdersResponse
	(*UpdateFeeOrderRequest)(nil),       // 8: order.middleware.fee.v1.UpdateFeeOrderRequest
	(*UpdateFeeOrderResponse)(nil),      // 9: order.middleware.fee.v1.UpdateFeeOrderResponse
	(*GetFeeOrderRequest)(nil),          // 10: order.middleware.fee.v1.GetFeeOrderRequest
	(*GetFeeOrderResponse)(nil),         // 11: order.middleware.fee.v1.GetFeeOrderResponse
	(*GetFeeOrdersRequest)(nil),         // 12: order.middleware.fee.v1.GetFeeOrdersRequest
	(*GetFeeOrdersResponse)(nil),        // 13: order.middleware.fee.v1.GetFeeOrdersResponse
	(*CountFeeOrdersRequest)(nil),       // 14: order.middleware.fee.v1.CountFeeOrdersRequest
	(*CountFeeOrdersResponse)(nil),      // 15: order.middleware.fee.v1.CountFeeOrdersResponse
	(*ExistFeeOrderRequest)(nil),        // 16: order.middleware.fee.v1.ExistFeeOrderRequest
	(*ExistFeeOrderResponse)(nil),       // 17: order.middleware.fee.v1.ExistFeeOrderResponse
	(*ExistFeeOrderCondsRequest)(nil),   // 18: order.middleware.fee.v1.ExistFeeOrderCondsRequest
	(*ExistFeeOrderCondsResponse)(nil),  // 19: order.middleware.fee.v1.ExistFeeOrderCondsResponse
	(*DeleteFeeOrderRequest)(nil),       // 20: order.middleware.fee.v1.DeleteFeeOrderRequest
	(*DeleteFeeOrderResponse)(nil),      // 21: order.middleware.fee.v1.DeleteFeeOrderResponse
	(*DeleteFeeOrdersRequest)(nil),      // 22: order.middleware.fee.v1.DeleteFeeOrdersRequest
	(*DeleteFeeOrdersResponse)(nil),     // 23: order.middleware.fee.v1.DeleteFeeOrdersResponse
	(v1.GoodType)(0),                    // 24: basetypes.good.v1.GoodType
	(v11.OrderType)(0),                  // 25: basetypes.order.v1.OrderType
	(v11.PaymentType)(0),                // 26: basetypes.order.v1.PaymentType
	(v11.OrderCreateMethod)(0),          // 27: basetypes.order.v1.OrderCreateMethod
	(v11.OrderState)(0),                 // 28: basetypes.order.v1.OrderState
	(v11.PaymentState)(0),               // 29: basetypes.order.v1.PaymentState
	(*payment.PaymentBalanceReq)(nil),   // 30: order.middleware.payment.v1.PaymentBalanceReq
	(*payment.PaymentTransferReq)(nil),  // 31: order.middleware.payment.v1.PaymentTransferReq
	(*coupon.OrderCouponInfo)(nil),      // 32: order.middleware.order1.coupon.v1.OrderCouponInfo
	(*payment.PaymentBalanceInfo)(nil),  // 33: order.middleware.payment.v1.PaymentBalanceInfo
	(*payment.PaymentTransferInfo)(nil), // 34: order.middleware.payment.v1.PaymentTransferInfo
	(*v12.Uint32Val)(nil),               // 35: basetypes.v1.Uint32Val
	(*v12.Uint32SliceVal)(nil),          // 36: basetypes.v1.Uint32SliceVal
	(*v12.StringVal)(nil),               // 37: basetypes.v1.StringVal
	(*v12.StringSliceVal)(nil),          // 38: basetypes.v1.StringSliceVal
	(*v12.BoolVal)(nil),                 // 39: basetypes.v1.BoolVal
}
var file_npool_order_mw_v1_fee_fee_proto_depIdxs = []int32{
	24, // 0: order.middleware.fee.v1.FeeOrderReq.GoodType:type_name -> basetypes.good.v1.GoodType
	25, // 1: order.middleware.fee.v1.FeeOrderReq.OrderType:type_name -> basetypes.order.v1.OrderType
	26, // 2: order.middleware.fee.v1.FeeOrderReq.PaymentType:type_name -> basetypes.order.v1.PaymentType
	27, // 3: order.middleware.fee.v1.FeeOrderReq.CreateMethod:type_name -> basetypes.order.v1.OrderCreateMethod
	28, // 4: order.middleware.fee.v1.FeeOrderReq.OrderState:type_name -> basetypes.order.v1.OrderState
	29, // 5: order.middleware.fee.v1.FeeOrderReq.PaymentState:type_name -> basetypes.order.v1.PaymentState
	30, // 6: order.middleware.fee.v1.FeeOrderReq.PaymentBalances:type_name -> order.middleware.payment.v1.PaymentBalanceReq
	31, // 7: order.middleware.fee.v1.FeeOrderReq.PaymentTransfers:type_name -> order.middleware.payment.v1.PaymentTransferReq
	24, // 8: order.middleware.fee.v1.FeeOrder.GoodType:type_name -> basetypes.good.v1.GoodType
	24, // 9: order.middleware.fee.v1.FeeOrder.ParentGoodType:type_name -> basetypes.good.v1.GoodType
	25, // 10: order.middleware.fee.v1.FeeOrder.OrderType:type_name -> basetypes.order.v1.OrderType
	26, // 11: order.middleware.fee.v1.FeeOrder.PaymentType:type_name -> basetypes.order.v1.PaymentType
	27, // 12: order.middleware.fee.v1.FeeOrder.CreateMethod:type_name -> basetypes.order.v1.OrderCreateMethod
	28, // 13: order.middleware.fee.v1.FeeOrder.OrderState:type_name -> basetypes.order.v1.OrderState
	28, // 14: order.middleware.fee.v1.FeeOrder.CancelState:type_name -> basetypes.order.v1.OrderState
	29, // 15: order.middleware.fee.v1.FeeOrder.PaymentState:type_name -> basetypes.order.v1.PaymentState
	32, // 16: order.middleware.fee.v1.FeeOrder.Coupons:type_name -> order.middleware.order1.coupon.v1.OrderCouponInfo
	33, // 17: order.middleware.fee.v1.FeeOrder.PaymentBalances:type_name -> order.middleware.payment.v1.PaymentBalanceInfo
	34, // 18: order.middleware.fee.v1.FeeOrder.PaymentTransfers:type_name -> order.middleware.payment.v1.PaymentTransferInfo
	35, // 19: order.middleware.fee.v1.Conds.ID:type_name -> basetypes.v1.Uint32Val
	36, // 20: order.middleware.fee.v1.Conds.IDs:type_name -> basetypes.v1.Uint32SliceVal
	37, // 21: order.middleware.fee.v1.Conds.EntID:type_name -> basetypes.v1.StringVal
	38, // 22: order.middleware.fee.v1.Conds.EntIDs:type_name -> basetypes.v1.StringSliceVal
	37, // 23: order.middleware.fee.v1.Conds.OrderID:type_name -> basetypes.v1.StringVal
	38, // 24: order.middleware.fee.v1.Conds.OrderIDs:type_name -> basetypes.v1.StringSliceVal
	37, // 25: order.middleware.fee.v1.Conds.AppID:type_name -> basetypes.v1.StringVal
	37, // 26: order.middleware.fee.v1.Conds.UserID:type_name -> basetypes.v1.StringVal
	37, // 27: order.middleware.fee.v1.Conds.GoodID:type_name -> basetypes.v1.StringVal
	38, // 28: order.middleware.fee.v1.Conds.GoodIDs:type_name -> basetypes.v1.StringSliceVal
	37, // 29: order.middleware.fee.v1.Conds.AppGoodID:type_name -> basetypes.v1.StringVal
	38, // 30: order.middleware.fee.v1.Conds.AppGoodIDs:type_name -> basetypes.v1.StringSliceVal
	37, // 31: order.middleware.fee.v1.Conds.ParentOrderID:type_name -> basetypes.v1.StringVal
	38, // 32: order.middleware.fee.v1.Conds.ParentOrderIDs:type_name -> basetypes.v1.StringSliceVal
	35, // 33: order.middleware.fee.v1.Conds.OrderType:type_name -> basetypes.v1.Uint32Val
	35, // 34: order.middleware.fee.v1.Conds.PaymentType:type_name -> basetypes.v1.Uint32Val
	36, // 35: order.middleware.fee.v1.Conds.PaymentTypes:type_name -> basetypes.v1.Uint32SliceVal
	35, // 36: order.middleware.fee.v1.Conds.OrderState:type_name -> basetypes.v1.Uint32Val
	36, // 37: order.middleware.fee.v1.Conds.OrderStates:type_name -> basetypes.v1.Uint32SliceVal
	39, // 38: order.middleware.fee.v1.Conds.UserSetCanceled:type_name -> basetypes.v1.BoolVal
	39, // 39: order.middleware.fee.v1.Conds.AdminSetCanceled:type_name -> basetypes.v1.BoolVal
	35, // 40: order.middleware.fee.v1.Conds.PaymentState:type_name -> basetypes.v1.Uint32Val
	36, // 41: order.middleware.fee.v1.Conds.PaymentStates:type_name -> basetypes.v1.Uint32SliceVal
	37, // 42: order.middleware.fee.v1.Conds.CouponID:type_name -> basetypes.v1.StringVal
	38, // 43: order.middleware.fee.v1.Conds.CouponIDs:type_name -> basetypes.v1.StringSliceVal
	35, // 44: order.middleware.fee.v1.Conds.CreatedAt:type_name -> basetypes.v1.Uint32Val
	35, // 45: order.middleware.fee.v1.Conds.UpdatedAt:type_name -> basetypes.v1.Uint32Val
	35, // 46: order.middleware.fee.v1.Conds.PaidAt:type_name -> basetypes.v1.Uint32Val
	0,  // 47: order.middleware.fee.v1.CreateFeeOrderRequest.Info:type_name -> order.middleware.fee.v1.FeeOrderReq
	1,  // 48: order.middleware.fee.v1.CreateFeeOrderResponse.Info:type_name -> order.middleware.fee.v1.FeeOrder
	0,  // 49: order.middleware.fee.v1.CreateFeeOrdersRequest.Infos:type_name -> order.middleware.fee.v1.FeeOrderReq
	1,  // 50: order.middleware.fee.v1.CreateFeeOrdersResponse.Infos:type_name -> order.middleware.fee.v1.FeeOrder
	0,  // 51: order.middleware.fee.v1.UpdateFeeOrderRequest.Info:type_name -> order.middleware.fee.v1.FeeOrderReq
	1,  // 52: order.middleware.fee.v1.UpdateFeeOrderResponse.Info:type_name -> order.middleware.fee.v1.FeeOrder
	1,  // 53: order.middleware.fee.v1.GetFeeOrderResponse.Info:type_name -> order.middleware.fee.v1.FeeOrder
	3,  // 54: order.middleware.fee.v1.GetFeeOrdersRequest.Conds:type_name -> order.middleware.fee.v1.Conds
	1,  // 55: order.middleware.fee.v1.GetFeeOrdersResponse.Infos:type_name -> order.middleware.fee.v1.FeeOrder
	3,  // 56: order.middleware.fee.v1.CountFeeOrdersRequest.Conds:type_name -> order.middleware.fee.v1.Conds
	3,  // 57: order.middleware.fee.v1.ExistFeeOrderCondsRequest.Conds:type_name -> order.middleware.fee.v1.Conds
	0,  // 58: order.middleware.fee.v1.DeleteFeeOrderRequest.Info:type_name -> order.middleware.fee.v1.FeeOrderReq
	1,  // 59: order.middleware.fee.v1.DeleteFeeOrderResponse.Info:type_name -> order.middleware.fee.v1.FeeOrder
	0,  // 60: order.middleware.fee.v1.DeleteFeeOrdersRequest.Infos:type_name -> order.middleware.fee.v1.FeeOrderReq
	1,  // 61: order.middleware.fee.v1.DeleteFeeOrdersResponse.Infos:type_name -> order.middleware.fee.v1.FeeOrder
	4,  // 62: order.middleware.fee.v1.Middleware.CreateFeeOrder:input_type -> order.middleware.fee.v1.CreateFeeOrderRequest
	6,  // 63: order.middleware.fee.v1.Middleware.CreateFeeOrders:input_type -> order.middleware.fee.v1.CreateFeeOrdersRequest
	8,  // 64: order.middleware.fee.v1.Middleware.UpdateFeeOrder:input_type -> order.middleware.fee.v1.UpdateFeeOrderRequest
	10, // 65: order.middleware.fee.v1.Middleware.GetFeeOrder:input_type -> order.middleware.fee.v1.GetFeeOrderRequest
	12, // 66: order.middleware.fee.v1.Middleware.GetFeeOrders:input_type -> order.middleware.fee.v1.GetFeeOrdersRequest
	14, // 67: order.middleware.fee.v1.Middleware.CountFeeOrders:input_type -> order.middleware.fee.v1.CountFeeOrdersRequest
	16, // 68: order.middleware.fee.v1.Middleware.ExistFeeOrder:input_type -> order.middleware.fee.v1.ExistFeeOrderRequest
	18, // 69: order.middleware.fee.v1.Middleware.ExistFeeOrderConds:input_type -> order.middleware.fee.v1.ExistFeeOrderCondsRequest
	20, // 70: order.middleware.fee.v1.Middleware.DeleteFeeOrder:input_type -> order.middleware.fee.v1.DeleteFeeOrderRequest
	22, // 71: order.middleware.fee.v1.Middleware.DeleteFeeOrders:input_type -> order.middleware.fee.v1.DeleteFeeOrdersRequest
	5,  // 72: order.middleware.fee.v1.Middleware.CreateFeeOrder:output_type -> order.middleware.fee.v1.CreateFeeOrderResponse
	7,  // 73: order.middleware.fee.v1.Middleware.CreateFeeOrders:output_type -> order.middleware.fee.v1.CreateFeeOrdersResponse
	9,  // 74: order.middleware.fee.v1.Middleware.UpdateFeeOrder:output_type -> order.middleware.fee.v1.UpdateFeeOrderResponse
	11, // 75: order.middleware.fee.v1.Middleware.GetFeeOrder:output_type -> order.middleware.fee.v1.GetFeeOrderResponse
	13, // 76: order.middleware.fee.v1.Middleware.GetFeeOrders:output_type -> order.middleware.fee.v1.GetFeeOrdersResponse
	15, // 77: order.middleware.fee.v1.Middleware.CountFeeOrders:output_type -> order.middleware.fee.v1.CountFeeOrdersResponse
	17, // 78: order.middleware.fee.v1.Middleware.ExistFeeOrder:output_type -> order.middleware.fee.v1.ExistFeeOrderResponse
	19, // 79: order.middleware.fee.v1.Middleware.ExistFeeOrderConds:output_type -> order.middleware.fee.v1.ExistFeeOrderCondsResponse
	21, // 80: order.middleware.fee.v1.Middleware.DeleteFeeOrder:output_type -> order.middleware.fee.v1.DeleteFeeOrderResponse
	23, // 81: order.middleware.fee.v1.Middleware.DeleteFeeOrders:output_type -> order.middleware.fee.v1.DeleteFeeOrdersResponse
	72, // [72:82] is the sub-list for method output_type
	62, // [62:72] is the sub-list for method input_type
	62, // [62:62] is the sub-list for extension type_name
	62, // [62:62] is the sub-list for extension extendee
	0,  // [0:62] is the sub-list for field type_name
}

func init() { file_npool_order_mw_v1_fee_fee_proto_init() }
func file_npool_order_mw_v1_fee_fee_proto_init() {
	if File_npool_order_mw_v1_fee_fee_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_order_mw_v1_fee_fee_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeOrderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_fee_fee_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_fee_fee_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeeDuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_fee_fee_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_fee_fee_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFeeOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_fee_fee_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFeeOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_fee_fee_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFeeOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_fee_fee_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFeeOrdersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_fee_fee_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFeeOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_fee_fee_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFeeOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_fee_fee_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFeeOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_fee_fee_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFeeOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_fee_fee_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFeeOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_fee_fee_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFeeOrdersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_fee_fee_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountFeeOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_fee_fee_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountFeeOrdersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_fee_fee_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistFeeOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_fee_fee_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistFeeOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_fee_fee_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistFeeOrderCondsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_fee_fee_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistFeeOrderCondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_fee_fee_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFeeOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_fee_fee_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFeeOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_fee_fee_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFeeOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_mw_v1_fee_fee_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFeeOrdersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_order_mw_v1_fee_fee_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_npool_order_mw_v1_fee_fee_proto_msgTypes[3].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_order_mw_v1_fee_fee_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_order_mw_v1_fee_fee_proto_goTypes,
		DependencyIndexes: file_npool_order_mw_v1_fee_fee_proto_depIdxs,
		MessageInfos:      file_npool_order_mw_v1_fee_fee_proto_msgTypes,
	}.Build()
	File_npool_order_mw_v1_fee_fee_proto = out.File
	file_npool_order_mw_v1_fee_fee_proto_rawDesc = nil
	file_npool_order_mw_v1_fee_fee_proto_goTypes = nil
	file_npool_order_mw_v1_fee_fee_proto_depIdxs = nil
}
