// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/order/mw/v1/app/config/config.proto

package config

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
	CreateAppConfig(ctx context.Context, in *CreateAppConfigRequest, opts ...grpc.CallOption) (*CreateAppConfigResponse, error)
	UpdateAppConfig(ctx context.Context, in *UpdateAppConfigRequest, opts ...grpc.CallOption) (*UpdateAppConfigResponse, error)
	GetAppConfig(ctx context.Context, in *GetAppConfigRequest, opts ...grpc.CallOption) (*GetAppConfigResponse, error)
	GetAppConfigs(ctx context.Context, in *GetAppConfigsRequest, opts ...grpc.CallOption) (*GetAppConfigsResponse, error)
	ExistAppConfig(ctx context.Context, in *ExistAppConfigRequest, opts ...grpc.CallOption) (*ExistAppConfigResponse, error)
	ExistAppConfigConds(ctx context.Context, in *ExistAppConfigCondsRequest, opts ...grpc.CallOption) (*ExistAppConfigCondsResponse, error)
	DeleteAppConfig(ctx context.Context, in *DeleteAppConfigRequest, opts ...grpc.CallOption) (*DeleteAppConfigResponse, error)
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) CreateAppConfig(ctx context.Context, in *CreateAppConfigRequest, opts ...grpc.CallOption) (*CreateAppConfigResponse, error) {
	out := new(CreateAppConfigResponse)
	err := c.cc.Invoke(ctx, "/order.middleware.app.config.v1.Middleware/CreateAppConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) UpdateAppConfig(ctx context.Context, in *UpdateAppConfigRequest, opts ...grpc.CallOption) (*UpdateAppConfigResponse, error) {
	out := new(UpdateAppConfigResponse)
	err := c.cc.Invoke(ctx, "/order.middleware.app.config.v1.Middleware/UpdateAppConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetAppConfig(ctx context.Context, in *GetAppConfigRequest, opts ...grpc.CallOption) (*GetAppConfigResponse, error) {
	out := new(GetAppConfigResponse)
	err := c.cc.Invoke(ctx, "/order.middleware.app.config.v1.Middleware/GetAppConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetAppConfigs(ctx context.Context, in *GetAppConfigsRequest, opts ...grpc.CallOption) (*GetAppConfigsResponse, error) {
	out := new(GetAppConfigsResponse)
	err := c.cc.Invoke(ctx, "/order.middleware.app.config.v1.Middleware/GetAppConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ExistAppConfig(ctx context.Context, in *ExistAppConfigRequest, opts ...grpc.CallOption) (*ExistAppConfigResponse, error) {
	out := new(ExistAppConfigResponse)
	err := c.cc.Invoke(ctx, "/order.middleware.app.config.v1.Middleware/ExistAppConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ExistAppConfigConds(ctx context.Context, in *ExistAppConfigCondsRequest, opts ...grpc.CallOption) (*ExistAppConfigCondsResponse, error) {
	out := new(ExistAppConfigCondsResponse)
	err := c.cc.Invoke(ctx, "/order.middleware.app.config.v1.Middleware/ExistAppConfigConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) DeleteAppConfig(ctx context.Context, in *DeleteAppConfigRequest, opts ...grpc.CallOption) (*DeleteAppConfigResponse, error) {
	out := new(DeleteAppConfigResponse)
	err := c.cc.Invoke(ctx, "/order.middleware.app.config.v1.Middleware/DeleteAppConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
	CreateAppConfig(context.Context, *CreateAppConfigRequest) (*CreateAppConfigResponse, error)
	UpdateAppConfig(context.Context, *UpdateAppConfigRequest) (*UpdateAppConfigResponse, error)
	GetAppConfig(context.Context, *GetAppConfigRequest) (*GetAppConfigResponse, error)
	GetAppConfigs(context.Context, *GetAppConfigsRequest) (*GetAppConfigsResponse, error)
	ExistAppConfig(context.Context, *ExistAppConfigRequest) (*ExistAppConfigResponse, error)
	ExistAppConfigConds(context.Context, *ExistAppConfigCondsRequest) (*ExistAppConfigCondsResponse, error)
	DeleteAppConfig(context.Context, *DeleteAppConfigRequest) (*DeleteAppConfigResponse, error)
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) CreateAppConfig(context.Context, *CreateAppConfigRequest) (*CreateAppConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppConfig not implemented")
}
func (UnimplementedMiddlewareServer) UpdateAppConfig(context.Context, *UpdateAppConfigRequest) (*UpdateAppConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppConfig not implemented")
}
func (UnimplementedMiddlewareServer) GetAppConfig(context.Context, *GetAppConfigRequest) (*GetAppConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppConfig not implemented")
}
func (UnimplementedMiddlewareServer) GetAppConfigs(context.Context, *GetAppConfigsRequest) (*GetAppConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppConfigs not implemented")
}
func (UnimplementedMiddlewareServer) ExistAppConfig(context.Context, *ExistAppConfigRequest) (*ExistAppConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistAppConfig not implemented")
}
func (UnimplementedMiddlewareServer) ExistAppConfigConds(context.Context, *ExistAppConfigCondsRequest) (*ExistAppConfigCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistAppConfigConds not implemented")
}
func (UnimplementedMiddlewareServer) DeleteAppConfig(context.Context, *DeleteAppConfigRequest) (*DeleteAppConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppConfig not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_CreateAppConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateAppConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.middleware.app.config.v1.Middleware/CreateAppConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateAppConfig(ctx, req.(*CreateAppConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_UpdateAppConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).UpdateAppConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.middleware.app.config.v1.Middleware/UpdateAppConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).UpdateAppConfig(ctx, req.(*UpdateAppConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetAppConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetAppConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.middleware.app.config.v1.Middleware/GetAppConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetAppConfig(ctx, req.(*GetAppConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetAppConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetAppConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.middleware.app.config.v1.Middleware/GetAppConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetAppConfigs(ctx, req.(*GetAppConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ExistAppConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistAppConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ExistAppConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.middleware.app.config.v1.Middleware/ExistAppConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ExistAppConfig(ctx, req.(*ExistAppConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ExistAppConfigConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistAppConfigCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ExistAppConfigConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.middleware.app.config.v1.Middleware/ExistAppConfigConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ExistAppConfigConds(ctx, req.(*ExistAppConfigCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_DeleteAppConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).DeleteAppConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.middleware.app.config.v1.Middleware/DeleteAppConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).DeleteAppConfig(ctx, req.(*DeleteAppConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.middleware.app.config.v1.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAppConfig",
			Handler:    _Middleware_CreateAppConfig_Handler,
		},
		{
			MethodName: "UpdateAppConfig",
			Handler:    _Middleware_UpdateAppConfig_Handler,
		},
		{
			MethodName: "GetAppConfig",
			Handler:    _Middleware_GetAppConfig_Handler,
		},
		{
			MethodName: "GetAppConfigs",
			Handler:    _Middleware_GetAppConfigs_Handler,
		},
		{
			MethodName: "ExistAppConfig",
			Handler:    _Middleware_ExistAppConfig_Handler,
		},
		{
			MethodName: "ExistAppConfigConds",
			Handler:    _Middleware_ExistAppConfigConds_Handler,
		},
		{
			MethodName: "DeleteAppConfig",
			Handler:    _Middleware_DeleteAppConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/order/mw/v1/app/config/config.proto",
}
