syntax = "proto3";

package order.middleware.compensate.v1;

option go_package = "github.com/NpoolPlatform/message/npool/order/mw/v1/compensate";

import "google/api/annotations.proto";
import "npool/basetypes/v1/conds.proto";
import "npool/basetypes/order/v1/enums.proto";

// Service Name
service Middleware {
    rpc CreateCompensate (CreateCompensateRequest) returns (CreateCompensateResponse) {
        option (google.api.http) = {
            post: "/v1/compensate_CreateCompensate"
            body: "*"
        };
    }
    rpc UpdateCompensate (UpdateCompensateRequest) returns (UpdateCompensateResponse) {
        option (google.api.http) = {
            post: "/v1/compensate_UpdateCompensate"
            body: "*"
        };
    }
    rpc GetCompensate (GetCompensateRequest) returns (GetCompensateResponse) {
        option (google.api.http) = {
            post: "/v1/compensate_GetCompensate"
            body: "*"
        };
    }
    rpc GetCompensates (GetCompensatesRequest) returns (GetCompensatesResponse) {}
    rpc ExistCompensate (ExistCompensateRequest) returns (ExistCompensateResponse) {}
    rpc ExistCompensateConds (ExistCompensateCondsRequest) returns (ExistCompensateCondsResponse) {}
    rpc DeleteCompensate (DeleteCompensateRequest) returns (DeleteCompensateResponse) {
        option (google.api.http) = {
            post: "/v1/compensate_DeleteCompensate"
            body: "*"
        };
    }
}

message CompensateReq {
    optional uint32 ID = 10;
    optional string EntID = 20;
    optional string OrderID = 30;
    optional uint32 StartAt = 40;
    optional uint32 EndAt = 50;
    optional basetypes.order.v1.CompensateType CompensateType = 60;
    optional string Title = 70;
    optional string Message = 80;
}

message Compensate {
    // @inject_tag: sql:"id"
    uint32 ID = 10;
    // @inject_tag: sql:"ent_id"
    string EntID = 20;
    // @inject_tag: sql:"order_id"
    string OrderID = 30;
    // @inject_tag: sql:"start_at"
    uint32 StartAt = 40;
    // @inject_tag: sql:"end_at"
    uint32 EndAt = 50;
    // @inject_tag: sql:"compensate_type"
    string CompensateTypeStr = 60;
    basetypes.order.v1.CompensateType CompensateType = 70;
    // @inject_tag: sql:"title"
    string Title = 80;
    // @inject_tag: sql:"message"
    string Message = 90;

    // order
    // @inject_tag: sql:"app_id"
    string AppID = 100;
    // @inject_tag: sql:"user_id"
    string UserID = 110;
    // @inject_tag: sql:"good_id"
    string GoodID = 120;
    // @inject_tag: sql:"app_good_id"
    string AppGoodID = 130;
    // @inject_tag: sql:"units_v1"
    string Units = 140;

    // orderstate
    // @inject_tag: sql:"order_start_at"
    uint32 OrderStartAt = 150;
    // @inject_tag: sql:"order_end_at"
    uint32 OrderEndAt = 160;

    // @inject_tag: sql:"created_at"
    uint32 CreatedAt = 1000;
    // @inject_tag: sql:"updated_at"
    uint32 UpdatedAt = 1010;
}

message Conds {
    basetypes.v1.Uint32Val ID = 10;
    basetypes.v1.StringVal EntID = 20;
    basetypes.v1.StringVal OrderID = 30;
    basetypes.v1.Uint32Val StartAt = 40;
    basetypes.v1.Uint32Val EndAt = 50;
    basetypes.v1.StringVal UserID = 60;
    basetypes.v1.StringVal AppID = 70;
}

message CreateCompensateRequest { CompensateReq Info = 10; }

message CreateCompensateResponse { Compensate Info = 10; }

message UpdateCompensateRequest { CompensateReq Info = 10; }

message UpdateCompensateResponse { Compensate Info = 10; }

message GetCompensateRequest { string EntID = 10; }

message GetCompensateResponse { Compensate Info = 10; }

message GetCompensatesRequest {
    Conds Conds = 10;
    int32 Offset = 20;
    int32 Limit = 30;
}

message GetCompensatesResponse {
    repeated Compensate Infos = 10;
    uint32 Total = 20;
}

message ExistCompensateRequest { string EntID = 10; }

message ExistCompensateResponse { bool Info = 10; }

message ExistCompensateCondsRequest { Conds Conds = 10; }

message ExistCompensateCondsResponse { bool Info = 10; }

message DeleteCompensateRequest { CompensateReq Info = 10; }

message DeleteCompensateResponse { Compensate Info = 10; }
