// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/order/gw/v1/fee/fee.proto

package fee

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gateway_CreateFeeOrder_FullMethodName       = "/order.gateway.fee.v1.Gateway/CreateFeeOrder"
	Gateway_CreateUserFeeOrder_FullMethodName   = "/order.gateway.fee.v1.Gateway/CreateUserFeeOrder"
	Gateway_CreateFeeOrders_FullMethodName      = "/order.gateway.fee.v1.Gateway/CreateFeeOrders"
	Gateway_CreateUserFeeOrders_FullMethodName  = "/order.gateway.fee.v1.Gateway/CreateUserFeeOrders"
	Gateway_UpdateFeeOrder_FullMethodName       = "/order.gateway.fee.v1.Gateway/UpdateFeeOrder"
	Gateway_UpdateUserFeeOrder_FullMethodName   = "/order.gateway.fee.v1.Gateway/UpdateUserFeeOrder"
	Gateway_GetFeeOrder_FullMethodName          = "/order.gateway.fee.v1.Gateway/GetFeeOrder"
	Gateway_GetFeeOrders_FullMethodName         = "/order.gateway.fee.v1.Gateway/GetFeeOrders"
	Gateway_GetMyFeeOrders_FullMethodName       = "/order.gateway.fee.v1.Gateway/GetMyFeeOrders"
	Gateway_AdminCreateFeeOrder_FullMethodName  = "/order.gateway.fee.v1.Gateway/AdminCreateFeeOrder"
	Gateway_AdminCreateFeeOrders_FullMethodName = "/order.gateway.fee.v1.Gateway/AdminCreateFeeOrders"
	Gateway_AdminUpdateFeeOrder_FullMethodName  = "/order.gateway.fee.v1.Gateway/AdminUpdateFeeOrder"
	Gateway_AdminGetFeeOrders_FullMethodName    = "/order.gateway.fee.v1.Gateway/AdminGetFeeOrders"
	Gateway_AdminDeleteFeeOrder_FullMethodName  = "/order.gateway.fee.v1.Gateway/AdminDeleteFeeOrder"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	CreateFeeOrder(ctx context.Context, in *CreateFeeOrderRequest, opts ...grpc.CallOption) (*CreateFeeOrderResponse, error)
	CreateUserFeeOrder(ctx context.Context, in *CreateUserFeeOrderRequest, opts ...grpc.CallOption) (*CreateUserFeeOrderResponse, error)
	CreateFeeOrders(ctx context.Context, in *CreateFeeOrdersRequest, opts ...grpc.CallOption) (*CreateFeeOrdersResponse, error)
	CreateUserFeeOrders(ctx context.Context, in *CreateUserFeeOrdersRequest, opts ...grpc.CallOption) (*CreateUserFeeOrdersResponse, error)
	UpdateFeeOrder(ctx context.Context, in *UpdateFeeOrderRequest, opts ...grpc.CallOption) (*UpdateFeeOrderResponse, error)
	UpdateUserFeeOrder(ctx context.Context, in *UpdateUserFeeOrderRequest, opts ...grpc.CallOption) (*UpdateUserFeeOrderResponse, error)
	GetFeeOrder(ctx context.Context, in *GetFeeOrderRequest, opts ...grpc.CallOption) (*GetFeeOrderResponse, error)
	GetFeeOrders(ctx context.Context, in *GetFeeOrdersRequest, opts ...grpc.CallOption) (*GetFeeOrdersResponse, error)
	GetMyFeeOrders(ctx context.Context, in *GetMyFeeOrdersRequest, opts ...grpc.CallOption) (*GetMyFeeOrdersResponse, error)
	// Admin apis
	AdminCreateFeeOrder(ctx context.Context, in *AdminCreateFeeOrderRequest, opts ...grpc.CallOption) (*AdminCreateFeeOrderResponse, error)
	AdminCreateFeeOrders(ctx context.Context, in *AdminCreateFeeOrdersRequest, opts ...grpc.CallOption) (*AdminCreateFeeOrdersResponse, error)
	AdminUpdateFeeOrder(ctx context.Context, in *AdminUpdateFeeOrderRequest, opts ...grpc.CallOption) (*AdminUpdateFeeOrderResponse, error)
	AdminGetFeeOrders(ctx context.Context, in *AdminGetFeeOrdersRequest, opts ...grpc.CallOption) (*AdminGetFeeOrdersResponse, error)
	AdminDeleteFeeOrder(ctx context.Context, in *AdminDeleteFeeOrderRequest, opts ...grpc.CallOption) (*AdminDeleteFeeOrderResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) CreateFeeOrder(ctx context.Context, in *CreateFeeOrderRequest, opts ...grpc.CallOption) (*CreateFeeOrderResponse, error) {
	out := new(CreateFeeOrderResponse)
	err := c.cc.Invoke(ctx, Gateway_CreateFeeOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) CreateUserFeeOrder(ctx context.Context, in *CreateUserFeeOrderRequest, opts ...grpc.CallOption) (*CreateUserFeeOrderResponse, error) {
	out := new(CreateUserFeeOrderResponse)
	err := c.cc.Invoke(ctx, Gateway_CreateUserFeeOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) CreateFeeOrders(ctx context.Context, in *CreateFeeOrdersRequest, opts ...grpc.CallOption) (*CreateFeeOrdersResponse, error) {
	out := new(CreateFeeOrdersResponse)
	err := c.cc.Invoke(ctx, Gateway_CreateFeeOrders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) CreateUserFeeOrders(ctx context.Context, in *CreateUserFeeOrdersRequest, opts ...grpc.CallOption) (*CreateUserFeeOrdersResponse, error) {
	out := new(CreateUserFeeOrdersResponse)
	err := c.cc.Invoke(ctx, Gateway_CreateUserFeeOrders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdateFeeOrder(ctx context.Context, in *UpdateFeeOrderRequest, opts ...grpc.CallOption) (*UpdateFeeOrderResponse, error) {
	out := new(UpdateFeeOrderResponse)
	err := c.cc.Invoke(ctx, Gateway_UpdateFeeOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdateUserFeeOrder(ctx context.Context, in *UpdateUserFeeOrderRequest, opts ...grpc.CallOption) (*UpdateUserFeeOrderResponse, error) {
	out := new(UpdateUserFeeOrderResponse)
	err := c.cc.Invoke(ctx, Gateway_UpdateUserFeeOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetFeeOrder(ctx context.Context, in *GetFeeOrderRequest, opts ...grpc.CallOption) (*GetFeeOrderResponse, error) {
	out := new(GetFeeOrderResponse)
	err := c.cc.Invoke(ctx, Gateway_GetFeeOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetFeeOrders(ctx context.Context, in *GetFeeOrdersRequest, opts ...grpc.CallOption) (*GetFeeOrdersResponse, error) {
	out := new(GetFeeOrdersResponse)
	err := c.cc.Invoke(ctx, Gateway_GetFeeOrders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetMyFeeOrders(ctx context.Context, in *GetMyFeeOrdersRequest, opts ...grpc.CallOption) (*GetMyFeeOrdersResponse, error) {
	out := new(GetMyFeeOrdersResponse)
	err := c.cc.Invoke(ctx, Gateway_GetMyFeeOrders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminCreateFeeOrder(ctx context.Context, in *AdminCreateFeeOrderRequest, opts ...grpc.CallOption) (*AdminCreateFeeOrderResponse, error) {
	out := new(AdminCreateFeeOrderResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminCreateFeeOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminCreateFeeOrders(ctx context.Context, in *AdminCreateFeeOrdersRequest, opts ...grpc.CallOption) (*AdminCreateFeeOrdersResponse, error) {
	out := new(AdminCreateFeeOrdersResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminCreateFeeOrders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminUpdateFeeOrder(ctx context.Context, in *AdminUpdateFeeOrderRequest, opts ...grpc.CallOption) (*AdminUpdateFeeOrderResponse, error) {
	out := new(AdminUpdateFeeOrderResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminUpdateFeeOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminGetFeeOrders(ctx context.Context, in *AdminGetFeeOrdersRequest, opts ...grpc.CallOption) (*AdminGetFeeOrdersResponse, error) {
	out := new(AdminGetFeeOrdersResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminGetFeeOrders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminDeleteFeeOrder(ctx context.Context, in *AdminDeleteFeeOrderRequest, opts ...grpc.CallOption) (*AdminDeleteFeeOrderResponse, error) {
	out := new(AdminDeleteFeeOrderResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminDeleteFeeOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	CreateFeeOrder(context.Context, *CreateFeeOrderRequest) (*CreateFeeOrderResponse, error)
	CreateUserFeeOrder(context.Context, *CreateUserFeeOrderRequest) (*CreateUserFeeOrderResponse, error)
	CreateFeeOrders(context.Context, *CreateFeeOrdersRequest) (*CreateFeeOrdersResponse, error)
	CreateUserFeeOrders(context.Context, *CreateUserFeeOrdersRequest) (*CreateUserFeeOrdersResponse, error)
	UpdateFeeOrder(context.Context, *UpdateFeeOrderRequest) (*UpdateFeeOrderResponse, error)
	UpdateUserFeeOrder(context.Context, *UpdateUserFeeOrderRequest) (*UpdateUserFeeOrderResponse, error)
	GetFeeOrder(context.Context, *GetFeeOrderRequest) (*GetFeeOrderResponse, error)
	GetFeeOrders(context.Context, *GetFeeOrdersRequest) (*GetFeeOrdersResponse, error)
	GetMyFeeOrders(context.Context, *GetMyFeeOrdersRequest) (*GetMyFeeOrdersResponse, error)
	// Admin apis
	AdminCreateFeeOrder(context.Context, *AdminCreateFeeOrderRequest) (*AdminCreateFeeOrderResponse, error)
	AdminCreateFeeOrders(context.Context, *AdminCreateFeeOrdersRequest) (*AdminCreateFeeOrdersResponse, error)
	AdminUpdateFeeOrder(context.Context, *AdminUpdateFeeOrderRequest) (*AdminUpdateFeeOrderResponse, error)
	AdminGetFeeOrders(context.Context, *AdminGetFeeOrdersRequest) (*AdminGetFeeOrdersResponse, error)
	AdminDeleteFeeOrder(context.Context, *AdminDeleteFeeOrderRequest) (*AdminDeleteFeeOrderResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) CreateFeeOrder(context.Context, *CreateFeeOrderRequest) (*CreateFeeOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeeOrder not implemented")
}
func (UnimplementedGatewayServer) CreateUserFeeOrder(context.Context, *CreateUserFeeOrderRequest) (*CreateUserFeeOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserFeeOrder not implemented")
}
func (UnimplementedGatewayServer) CreateFeeOrders(context.Context, *CreateFeeOrdersRequest) (*CreateFeeOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeeOrders not implemented")
}
func (UnimplementedGatewayServer) CreateUserFeeOrders(context.Context, *CreateUserFeeOrdersRequest) (*CreateUserFeeOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserFeeOrders not implemented")
}
func (UnimplementedGatewayServer) UpdateFeeOrder(context.Context, *UpdateFeeOrderRequest) (*UpdateFeeOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeeOrder not implemented")
}
func (UnimplementedGatewayServer) UpdateUserFeeOrder(context.Context, *UpdateUserFeeOrderRequest) (*UpdateUserFeeOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserFeeOrder not implemented")
}
func (UnimplementedGatewayServer) GetFeeOrder(context.Context, *GetFeeOrderRequest) (*GetFeeOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeeOrder not implemented")
}
func (UnimplementedGatewayServer) GetFeeOrders(context.Context, *GetFeeOrdersRequest) (*GetFeeOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeeOrders not implemented")
}
func (UnimplementedGatewayServer) GetMyFeeOrders(context.Context, *GetMyFeeOrdersRequest) (*GetMyFeeOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyFeeOrders not implemented")
}
func (UnimplementedGatewayServer) AdminCreateFeeOrder(context.Context, *AdminCreateFeeOrderRequest) (*AdminCreateFeeOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCreateFeeOrder not implemented")
}
func (UnimplementedGatewayServer) AdminCreateFeeOrders(context.Context, *AdminCreateFeeOrdersRequest) (*AdminCreateFeeOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCreateFeeOrders not implemented")
}
func (UnimplementedGatewayServer) AdminUpdateFeeOrder(context.Context, *AdminUpdateFeeOrderRequest) (*AdminUpdateFeeOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateFeeOrder not implemented")
}
func (UnimplementedGatewayServer) AdminGetFeeOrders(context.Context, *AdminGetFeeOrdersRequest) (*AdminGetFeeOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetFeeOrders not implemented")
}
func (UnimplementedGatewayServer) AdminDeleteFeeOrder(context.Context, *AdminDeleteFeeOrderRequest) (*AdminDeleteFeeOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDeleteFeeOrder not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_CreateFeeOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFeeOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateFeeOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_CreateFeeOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateFeeOrder(ctx, req.(*CreateFeeOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_CreateUserFeeOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserFeeOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateUserFeeOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_CreateUserFeeOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateUserFeeOrder(ctx, req.(*CreateUserFeeOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_CreateFeeOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFeeOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateFeeOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_CreateFeeOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateFeeOrders(ctx, req.(*CreateFeeOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_CreateUserFeeOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserFeeOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateUserFeeOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_CreateUserFeeOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateUserFeeOrders(ctx, req.(*CreateUserFeeOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdateFeeOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeeOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateFeeOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_UpdateFeeOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateFeeOrder(ctx, req.(*UpdateFeeOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdateUserFeeOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserFeeOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateUserFeeOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_UpdateUserFeeOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateUserFeeOrder(ctx, req.(*UpdateUserFeeOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetFeeOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeeOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetFeeOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetFeeOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetFeeOrder(ctx, req.(*GetFeeOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetFeeOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeeOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetFeeOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetFeeOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetFeeOrders(ctx, req.(*GetFeeOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetMyFeeOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyFeeOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetMyFeeOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetMyFeeOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetMyFeeOrders(ctx, req.(*GetMyFeeOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminCreateFeeOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCreateFeeOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminCreateFeeOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminCreateFeeOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminCreateFeeOrder(ctx, req.(*AdminCreateFeeOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminCreateFeeOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCreateFeeOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminCreateFeeOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminCreateFeeOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminCreateFeeOrders(ctx, req.(*AdminCreateFeeOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminUpdateFeeOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateFeeOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminUpdateFeeOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminUpdateFeeOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminUpdateFeeOrder(ctx, req.(*AdminUpdateFeeOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminGetFeeOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetFeeOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminGetFeeOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminGetFeeOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminGetFeeOrders(ctx, req.(*AdminGetFeeOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminDeleteFeeOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDeleteFeeOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminDeleteFeeOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminDeleteFeeOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminDeleteFeeOrder(ctx, req.(*AdminDeleteFeeOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.gateway.fee.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFeeOrder",
			Handler:    _Gateway_CreateFeeOrder_Handler,
		},
		{
			MethodName: "CreateUserFeeOrder",
			Handler:    _Gateway_CreateUserFeeOrder_Handler,
		},
		{
			MethodName: "CreateFeeOrders",
			Handler:    _Gateway_CreateFeeOrders_Handler,
		},
		{
			MethodName: "CreateUserFeeOrders",
			Handler:    _Gateway_CreateUserFeeOrders_Handler,
		},
		{
			MethodName: "UpdateFeeOrder",
			Handler:    _Gateway_UpdateFeeOrder_Handler,
		},
		{
			MethodName: "UpdateUserFeeOrder",
			Handler:    _Gateway_UpdateUserFeeOrder_Handler,
		},
		{
			MethodName: "GetFeeOrder",
			Handler:    _Gateway_GetFeeOrder_Handler,
		},
		{
			MethodName: "GetFeeOrders",
			Handler:    _Gateway_GetFeeOrders_Handler,
		},
		{
			MethodName: "GetMyFeeOrders",
			Handler:    _Gateway_GetMyFeeOrders_Handler,
		},
		{
			MethodName: "AdminCreateFeeOrder",
			Handler:    _Gateway_AdminCreateFeeOrder_Handler,
		},
		{
			MethodName: "AdminCreateFeeOrders",
			Handler:    _Gateway_AdminCreateFeeOrders_Handler,
		},
		{
			MethodName: "AdminUpdateFeeOrder",
			Handler:    _Gateway_AdminUpdateFeeOrder_Handler,
		},
		{
			MethodName: "AdminGetFeeOrders",
			Handler:    _Gateway_AdminGetFeeOrders_Handler,
		},
		{
			MethodName: "AdminDeleteFeeOrder",
			Handler:    _Gateway_AdminDeleteFeeOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/order/gw/v1/fee/fee.proto",
}
