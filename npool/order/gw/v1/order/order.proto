syntax = "proto3";

package order.gateway.order1.v1;

option go_package = "github.com/NpoolPlatform/message/npool/order/gw/v1/order";

import "npool/order/mgr/v1/order/state/state.proto";
import "npool/order/mgr/v1/order/order/order.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "npool/npool.proto";

// Service Name
service Gateway {
    rpc CreateOrder (CreateOrderRequest) returns (CreateOrderResponse) {
        option (google.api.http) = {
            post: "/v1/create/order"
            body: "*"
        };
    }

    rpc GetOrders (GetOrdersRequest) returns (GetOrdersResponse) {
        option (google.api.http) = {
            post: "/v1/get/orders"
            body: "*"
        };
    }

    // Admin apis

    rpc CreateUserOrder (CreateUserOrderRequest) returns (CreateUserOrderResponse) {
        option (google.api.http) = {
            post: "/v1/create/user/order"
            body: "*"
        };
    }

    rpc CreateAppUserOrder (CreateAppUserOrderRequest) returns (CreateAppUserOrderResponse) {
        option (google.api.http) = {
            post: "/v1/create/app/user/order"
            body: "*"
        };
    }

    rpc GetUserOrders (GetUserOrdersRequest) returns (GetUserOrdersResponse) {
        option (google.api.http) = {
            post: "/v1/get/user/orders"
            body: "*"
        };
    }

    rpc GetAppUserOrders (GetAppUserOrdersRequest) returns (GetAppUserOrdersResponse) {
        option (google.api.http) = {
            post: "/v1/get/app/user/orders"
            body: "*"
        };
    }
}

message Order {
    string ID                     = 10;

    string ParentOrderID          = 20;
    string ParentOrderGoodID      = 30;
    string ParentOrderGoodName    = 40;

    string UserID                 = 50;
    string EmailAddress           = 60;
    string PhoneNO                = 70;

    string CoinTypeID             = 80;
    string CoinName               = 90;
    string CoinLogo               = 100;
    string CoinUnit               = 110;

    string GoodID                 = 120;
    string GoodName               = 130;
    uint32 Units                  = 140;

    string PaymentID              = 150;
    string PaymentCoinTypeID      = 160;
    string PaymentCoinName        = 170;
    string PaymentCoinLogo        = 180;
    string PaymentCoinUnit        = 190;
    string PaymentCoinUSDCurrency = 200;
    string PaymentLiveUSDCurrency = 210;
    string PaymentLocalUSDCurrency = 220;
    string PaymentAddress         = 230;
    string PaymentAmount          = 240;
    string PayWithBalanceAmount   = 250;
    bool   PayWithParent          = 260;

    string FixAmountID            = 270;
    string FixAmountName          = 280;
    string FixAmountAmount        = 290;

    string DiscountID             = 300;
    string DiscountName           = 310;
    uint32 DiscountPercent        = 320;

    string SpecialOfferID         = 330;
    string SpecialOfferAmount     = 340;

    uint32 CreatedAt              = 350;
    uint32 PaidAt                 = 360;

    order.manager.order.state.v1.EState    State     = 370;
    order.manager.order.order.v1.OrderType OrderType = 380;

    uint32 Start                  = 390;
    uint32 End                    = 400;
}

message CreateOrderRequest {
    string          AppID                = 10;
    string          UserID               = 20;
    string          GoodID               = 30;
    uint32          Units                = 40;
    string          PaymentCoinID        = 50;
    optional string ParentOrderID        = 60;
    optional string PayWithBalanceAmount = 70;
    optional string FixAmountID          = 80;
    optional string DiscountID           = 90;
    optional string SpecialOfferID       = 100;
    order.manager.order.order.v1.OrderType OrderType = 110;
}

message CreateOrderResponse {
    Order Info = 10;
}

message GetOrdersRequest {
    string AppID   = 10;
    string UserID  = 20;
    int32  Offset  = 30;
    int32  Limit   = 40;
}

message GetOrdersResponse {
    repeated Order Infos = 10;
}

message GetUserOrdersRequest {
    string AppID   = 10;
    string TargetUserID  = 20;
    int32  Offset  = 30;
    int32  Limit   = 40;
}

message CreateUserOrderRequest {
    string          AppID                = 10;
    string          TargetUserID         = 20;
    string          GoodID               = 30;
    uint32          Units                = 40;
    string          PaymentCoinID        = 50;
    optional string ParentOrderID        = 60;
    optional string PayWithBalanceAmount = 70;
    optional string FixAmountID          = 80;
    optional string DiscountID           = 90;
    optional string SpecialOfferID       = 100;
    order.manager.order.order.v1.OrderType OrderType = 110;
}

message CreateUserOrderResponse {
    Order Info = 10;
}

message CreateAppUserOrderRequest {
    string          TargetAppID          = 10;
    string          TargetUserID         = 20;
    string          GoodID               = 30;
    uint32          Units                = 40;
    string          PaymentCoinID        = 50;
    optional string ParentOrderID        = 60;
    optional string PayWithBalanceAmount = 70;
    optional string FixAmountID          = 80;
    optional string DiscountID           = 90;
    optional string SpecialOfferID       = 100;
    order.manager.order.order.v1.OrderType OrderType = 110;
}

message CreateAppUserOrderResponse {
    Order Info = 10;
}

message GetUserOrdersResponse {
    repeated Order Infos = 10;
}

message GetAppUserOrdersRequest {
    string TargetAppID   = 10;
    string TargetUserID  = 20;
    int32  Offset  = 30;
    int32  Limit   = 40;
}

message GetAppUserOrdersResponse {
    repeated Order Infos = 10;
}
