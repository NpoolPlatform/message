// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.18.1
// source: npool/order/gw/v1/powerrental/powerrental.proto

package powerrental

import (
	v1 "github.com/NpoolPlatform/message/npool/basetypes/good/v1"
	v11 "github.com/NpoolPlatform/message/npool/basetypes/order/v1"
	fee "github.com/NpoolPlatform/message/npool/order/gw/v1/fee"
	coupon "github.com/NpoolPlatform/message/npool/order/gw/v1/order/coupon"
	payment "github.com/NpoolPlatform/message/npool/order/gw/v1/payment"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PowerRentalOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                      uint32                `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID                   string                `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty"`
	AppID                   string                `protobuf:"bytes,30,opt,name=AppID,proto3" json:"AppID,omitempty"`
	AppName                 string                `protobuf:"bytes,40,opt,name=AppName,proto3" json:"AppName,omitempty"`
	UserID                  string                `protobuf:"bytes,50,opt,name=UserID,proto3" json:"UserID,omitempty"`
	EmailAddress            string                `protobuf:"bytes,60,opt,name=EmailAddress,proto3" json:"EmailAddress,omitempty"`
	PhoneNO                 string                `protobuf:"bytes,70,opt,name=PhoneNO,proto3" json:"PhoneNO,omitempty"`
	GoodID                  string                `protobuf:"bytes,80,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
	GoodType                v1.GoodType           `protobuf:"varint,90,opt,name=GoodType,proto3,enum=basetypes.good.v1.GoodType" json:"GoodType,omitempty"`
	BenefitType             v1.BenefitType        `protobuf:"varint,100,opt,name=BenefitType,proto3,enum=basetypes.good.v1.BenefitType" json:"BenefitType,omitempty"`
	GoodName                string                `protobuf:"bytes,110,opt,name=GoodName,proto3" json:"GoodName,omitempty"`
	GoodQuantityUnit        string                `protobuf:"bytes,111,opt,name=GoodQuantityUnit,proto3" json:"GoodQuantityUnit,omitempty"`
	AppGoodID               string                `protobuf:"bytes,120,opt,name=AppGoodID,proto3" json:"AppGoodID,omitempty"`
	AppGoodName             string                `protobuf:"bytes,130,opt,name=AppGoodName,proto3" json:"AppGoodName,omitempty"`
	OrderID                 string                `protobuf:"bytes,140,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
	OrderType               v11.OrderType         `protobuf:"varint,150,opt,name=OrderType,proto3,enum=basetypes.order.v1.OrderType" json:"OrderType,omitempty"`
	PaymentType             v11.PaymentType       `protobuf:"varint,160,opt,name=PaymentType,proto3,enum=basetypes.order.v1.PaymentType" json:"PaymentType,omitempty"`
	CreateMethod            v11.OrderCreateMethod `protobuf:"varint,170,opt,name=CreateMethod,proto3,enum=basetypes.order.v1.OrderCreateMethod" json:"CreateMethod,omitempty"`
	Simulate                bool                  `protobuf:"varint,180,opt,name=Simulate,proto3" json:"Simulate,omitempty"`
	OrderState              v11.OrderState        `protobuf:"varint,200,opt,name=OrderState,proto3,enum=basetypes.order.v1.OrderState" json:"OrderState,omitempty"`
	StartMode               v11.OrderStartMode    `protobuf:"varint,210,opt,name=StartMode,proto3,enum=basetypes.order.v1.OrderStartMode" json:"StartMode,omitempty"`
	StartAt                 uint32                `protobuf:"varint,220,opt,name=StartAt,proto3" json:"StartAt,omitempty"`
	LastBenefitAt           uint32                `protobuf:"varint,230,opt,name=LastBenefitAt,proto3" json:"LastBenefitAt,omitempty"`
	BenefitState            v11.BenefitState      `protobuf:"varint,240,opt,name=BenefitState,proto3,enum=basetypes.order.v1.BenefitState" json:"BenefitState,omitempty"`
	AppGoodStockID          string                `protobuf:"bytes,300,opt,name=AppGoodStockID,proto3" json:"AppGoodStockID,omitempty"`
	MiningPoolName          *string               `protobuf:"bytes,310,opt,name=MiningPoolName,proto3,oneof" json:"MiningPoolName,omitempty"`
	MiningPoolLogo          *string               `protobuf:"bytes,320,opt,name=MiningPoolLogo,proto3,oneof" json:"MiningPoolLogo,omitempty"`
	MiningPoolOrderUserID   *string               `protobuf:"bytes,330,opt,name=MiningPoolOrderUserID,proto3,oneof" json:"MiningPoolOrderUserID,omitempty"` // -> miningpool/orderuser
	MiningPoolOrderUserName *string               `protobuf:"bytes,340,opt,name=MiningPoolOrderUserName,proto3,oneof" json:"MiningPoolOrderUserName,omitempty"`
	MiningPoolReadPageLink  *string               `protobuf:"bytes,350,opt,name=MiningPoolReadPageLink,proto3,oneof" json:"MiningPoolReadPageLink,omitempty"`
	// TODO: benefit mode
	Units               string                         `protobuf:"bytes,400,opt,name=Units,proto3" json:"Units,omitempty"`
	GoodValueUSD        string                         `protobuf:"bytes,410,opt,name=GoodValueUSD,proto3" json:"GoodValueUSD,omitempty"`
	PaymentAmountUSD    string                         `protobuf:"bytes,420,opt,name=PaymentAmountUSD,proto3" json:"PaymentAmountUSD,omitempty"`
	DiscountAmountUSD   string                         `protobuf:"bytes,430,opt,name=DiscountAmountUSD,proto3" json:"DiscountAmountUSD,omitempty"`
	PromotionID         string                         `protobuf:"bytes,440,opt,name=PromotionID,proto3" json:"PromotionID,omitempty"`
	TopMostTitle        string                         `protobuf:"bytes,450,opt,name=TopMostTitle,proto3" json:"TopMostTitle,omitempty"`
	TopMostTargetUrl    string                         `protobuf:"bytes,460,opt,name=TopMostTargetUrl,proto3" json:"TopMostTargetUrl,omitempty"`
	DurationDisplayType v1.GoodDurationType            `protobuf:"varint,470,opt,name=DurationDisplayType,proto3,enum=basetypes.good.v1.GoodDurationType" json:"DurationDisplayType,omitempty"`
	DurationUnit        string                         `protobuf:"bytes,480,opt,name=DurationUnit,proto3" json:"DurationUnit,omitempty"`
	DurationSeconds     uint32                         `protobuf:"varint,490,opt,name=DurationSeconds,proto3" json:"DurationSeconds,omitempty"`
	Durations           uint32                         `protobuf:"varint,500,opt,name=Durations,proto3" json:"Durations,omitempty"`
	InvestmentType      v11.InvestmentType             `protobuf:"varint,510,opt,name=InvestmentType,proto3,enum=basetypes.order.v1.InvestmentType" json:"InvestmentType,omitempty"`
	CancelState         v11.OrderState                 `protobuf:"varint,600,opt,name=CancelState,proto3,enum=basetypes.order.v1.OrderState" json:"CancelState,omitempty"`
	CanceledAt          uint32                         `protobuf:"varint,610,opt,name=CanceledAt,proto3" json:"CanceledAt,omitempty"`
	EndAt               uint32                         `protobuf:"varint,620,opt,name=EndAt,proto3" json:"EndAt,omitempty"`
	PaidAt              uint32                         `protobuf:"varint,630,opt,name=PaidAt,proto3" json:"PaidAt,omitempty"`
	UserSetPaid         bool                           `protobuf:"varint,640,opt,name=UserSetPaid,proto3" json:"UserSetPaid,omitempty"`
	UserSetCanceled     bool                           `protobuf:"varint,650,opt,name=UserSetCanceled,proto3" json:"UserSetCanceled,omitempty"`
	AdminSetCanceled    bool                           `protobuf:"varint,660,opt,name=AdminSetCanceled,proto3" json:"AdminSetCanceled,omitempty"`
	PaymentState        v11.PaymentState               `protobuf:"varint,670,opt,name=PaymentState,proto3,enum=basetypes.order.v1.PaymentState" json:"PaymentState,omitempty"`
	OutOfGasSeconds     uint32                         `protobuf:"varint,680,opt,name=OutOfGasSeconds,proto3" json:"OutOfGasSeconds,omitempty"`
	CompensateSeconds   uint32                         `protobuf:"varint,690,opt,name=CompensateSeconds,proto3" json:"CompensateSeconds,omitempty"`
	Coupons             []*coupon.OrderCouponInfo      `protobuf:"bytes,800,rep,name=Coupons,proto3" json:"Coupons,omitempty"`
	PaymentBalances     []*payment.PaymentBalanceInfo  `protobuf:"bytes,810,rep,name=PaymentBalances,proto3" json:"PaymentBalances,omitempty"`
	PaymentTransfers    []*payment.PaymentTransferInfo `protobuf:"bytes,820,rep,name=PaymentTransfers,proto3" json:"PaymentTransfers,omitempty"`
	FeeDurations        []*fee.FeeDuration             `protobuf:"bytes,830,rep,name=FeeDurations,proto3" json:"FeeDurations,omitempty"`
	// order benefit account
	OrderBenefitAccounts []*OrderBenefitAccount `protobuf:"bytes,900,rep,name=OrderBenefitAccounts,proto3" json:"OrderBenefitAccounts,omitempty"`
	CreatedAt            uint32                 `protobuf:"varint,1000,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt            uint32                 `protobuf:"varint,1010,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (x *PowerRentalOrder) Reset() {
	*x = PowerRentalOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerRentalOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerRentalOrder) ProtoMessage() {}

func (x *PowerRentalOrder) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerRentalOrder.ProtoReflect.Descriptor instead.
func (*PowerRentalOrder) Descriptor() ([]byte, []int) {
	return file_npool_order_gw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{0}
}

func (x *PowerRentalOrder) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *PowerRentalOrder) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *PowerRentalOrder) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *PowerRentalOrder) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *PowerRentalOrder) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *PowerRentalOrder) GetEmailAddress() string {
	if x != nil {
		return x.EmailAddress
	}
	return ""
}

func (x *PowerRentalOrder) GetPhoneNO() string {
	if x != nil {
		return x.PhoneNO
	}
	return ""
}

func (x *PowerRentalOrder) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *PowerRentalOrder) GetGoodType() v1.GoodType {
	if x != nil {
		return x.GoodType
	}
	return v1.GoodType(0)
}

func (x *PowerRentalOrder) GetBenefitType() v1.BenefitType {
	if x != nil {
		return x.BenefitType
	}
	return v1.BenefitType(0)
}

func (x *PowerRentalOrder) GetGoodName() string {
	if x != nil {
		return x.GoodName
	}
	return ""
}

func (x *PowerRentalOrder) GetGoodQuantityUnit() string {
	if x != nil {
		return x.GoodQuantityUnit
	}
	return ""
}

func (x *PowerRentalOrder) GetAppGoodID() string {
	if x != nil {
		return x.AppGoodID
	}
	return ""
}

func (x *PowerRentalOrder) GetAppGoodName() string {
	if x != nil {
		return x.AppGoodName
	}
	return ""
}

func (x *PowerRentalOrder) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

func (x *PowerRentalOrder) GetOrderType() v11.OrderType {
	if x != nil {
		return x.OrderType
	}
	return v11.OrderType(0)
}

func (x *PowerRentalOrder) GetPaymentType() v11.PaymentType {
	if x != nil {
		return x.PaymentType
	}
	return v11.PaymentType(0)
}

func (x *PowerRentalOrder) GetCreateMethod() v11.OrderCreateMethod {
	if x != nil {
		return x.CreateMethod
	}
	return v11.OrderCreateMethod(0)
}

func (x *PowerRentalOrder) GetSimulate() bool {
	if x != nil {
		return x.Simulate
	}
	return false
}

func (x *PowerRentalOrder) GetOrderState() v11.OrderState {
	if x != nil {
		return x.OrderState
	}
	return v11.OrderState(0)
}

func (x *PowerRentalOrder) GetStartMode() v11.OrderStartMode {
	if x != nil {
		return x.StartMode
	}
	return v11.OrderStartMode(0)
}

func (x *PowerRentalOrder) GetStartAt() uint32 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *PowerRentalOrder) GetLastBenefitAt() uint32 {
	if x != nil {
		return x.LastBenefitAt
	}
	return 0
}

func (x *PowerRentalOrder) GetBenefitState() v11.BenefitState {
	if x != nil {
		return x.BenefitState
	}
	return v11.BenefitState(0)
}

func (x *PowerRentalOrder) GetAppGoodStockID() string {
	if x != nil {
		return x.AppGoodStockID
	}
	return ""
}

func (x *PowerRentalOrder) GetMiningPoolName() string {
	if x != nil && x.MiningPoolName != nil {
		return *x.MiningPoolName
	}
	return ""
}

func (x *PowerRentalOrder) GetMiningPoolLogo() string {
	if x != nil && x.MiningPoolLogo != nil {
		return *x.MiningPoolLogo
	}
	return ""
}

func (x *PowerRentalOrder) GetMiningPoolOrderUserID() string {
	if x != nil && x.MiningPoolOrderUserID != nil {
		return *x.MiningPoolOrderUserID
	}
	return ""
}

func (x *PowerRentalOrder) GetMiningPoolOrderUserName() string {
	if x != nil && x.MiningPoolOrderUserName != nil {
		return *x.MiningPoolOrderUserName
	}
	return ""
}

func (x *PowerRentalOrder) GetMiningPoolReadPageLink() string {
	if x != nil && x.MiningPoolReadPageLink != nil {
		return *x.MiningPoolReadPageLink
	}
	return ""
}

func (x *PowerRentalOrder) GetUnits() string {
	if x != nil {
		return x.Units
	}
	return ""
}

func (x *PowerRentalOrder) GetGoodValueUSD() string {
	if x != nil {
		return x.GoodValueUSD
	}
	return ""
}

func (x *PowerRentalOrder) GetPaymentAmountUSD() string {
	if x != nil {
		return x.PaymentAmountUSD
	}
	return ""
}

func (x *PowerRentalOrder) GetDiscountAmountUSD() string {
	if x != nil {
		return x.DiscountAmountUSD
	}
	return ""
}

func (x *PowerRentalOrder) GetPromotionID() string {
	if x != nil {
		return x.PromotionID
	}
	return ""
}

func (x *PowerRentalOrder) GetTopMostTitle() string {
	if x != nil {
		return x.TopMostTitle
	}
	return ""
}

func (x *PowerRentalOrder) GetTopMostTargetUrl() string {
	if x != nil {
		return x.TopMostTargetUrl
	}
	return ""
}

func (x *PowerRentalOrder) GetDurationDisplayType() v1.GoodDurationType {
	if x != nil {
		return x.DurationDisplayType
	}
	return v1.GoodDurationType(0)
}

func (x *PowerRentalOrder) GetDurationUnit() string {
	if x != nil {
		return x.DurationUnit
	}
	return ""
}

func (x *PowerRentalOrder) GetDurationSeconds() uint32 {
	if x != nil {
		return x.DurationSeconds
	}
	return 0
}

func (x *PowerRentalOrder) GetDurations() uint32 {
	if x != nil {
		return x.Durations
	}
	return 0
}

func (x *PowerRentalOrder) GetInvestmentType() v11.InvestmentType {
	if x != nil {
		return x.InvestmentType
	}
	return v11.InvestmentType(0)
}

func (x *PowerRentalOrder) GetCancelState() v11.OrderState {
	if x != nil {
		return x.CancelState
	}
	return v11.OrderState(0)
}

func (x *PowerRentalOrder) GetCanceledAt() uint32 {
	if x != nil {
		return x.CanceledAt
	}
	return 0
}

func (x *PowerRentalOrder) GetEndAt() uint32 {
	if x != nil {
		return x.EndAt
	}
	return 0
}

func (x *PowerRentalOrder) GetPaidAt() uint32 {
	if x != nil {
		return x.PaidAt
	}
	return 0
}

func (x *PowerRentalOrder) GetUserSetPaid() bool {
	if x != nil {
		return x.UserSetPaid
	}
	return false
}

func (x *PowerRentalOrder) GetUserSetCanceled() bool {
	if x != nil {
		return x.UserSetCanceled
	}
	return false
}

func (x *PowerRentalOrder) GetAdminSetCanceled() bool {
	if x != nil {
		return x.AdminSetCanceled
	}
	return false
}

func (x *PowerRentalOrder) GetPaymentState() v11.PaymentState {
	if x != nil {
		return x.PaymentState
	}
	return v11.PaymentState(0)
}

func (x *PowerRentalOrder) GetOutOfGasSeconds() uint32 {
	if x != nil {
		return x.OutOfGasSeconds
	}
	return 0
}

func (x *PowerRentalOrder) GetCompensateSeconds() uint32 {
	if x != nil {
		return x.CompensateSeconds
	}
	return 0
}

func (x *PowerRentalOrder) GetCoupons() []*coupon.OrderCouponInfo {
	if x != nil {
		return x.Coupons
	}
	return nil
}

func (x *PowerRentalOrder) GetPaymentBalances() []*payment.PaymentBalanceInfo {
	if x != nil {
		return x.PaymentBalances
	}
	return nil
}

func (x *PowerRentalOrder) GetPaymentTransfers() []*payment.PaymentTransferInfo {
	if x != nil {
		return x.PaymentTransfers
	}
	return nil
}

func (x *PowerRentalOrder) GetFeeDurations() []*fee.FeeDuration {
	if x != nil {
		return x.FeeDurations
	}
	return nil
}

func (x *PowerRentalOrder) GetOrderBenefitAccounts() []*OrderBenefitAccount {
	if x != nil {
		return x.OrderBenefitAccounts
	}
	return nil
}

func (x *PowerRentalOrder) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *PowerRentalOrder) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type OrderBenefitAccountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// for order benefit account
	AccountID  *string `protobuf:"bytes,10,opt,name=AccountID,proto3,oneof" json:"AccountID,omitempty"`
	CoinTypeID *string `protobuf:"bytes,20,opt,name=CoinTypeID,proto3,oneof" json:"CoinTypeID,omitempty"`
	Address    *string `protobuf:"bytes,30,opt,name=Address,proto3,oneof" json:"Address,omitempty"`
}

func (x *OrderBenefitAccountReq) Reset() {
	*x = OrderBenefitAccountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderBenefitAccountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBenefitAccountReq) ProtoMessage() {}

func (x *OrderBenefitAccountReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBenefitAccountReq.ProtoReflect.Descriptor instead.
func (*OrderBenefitAccountReq) Descriptor() ([]byte, []int) {
	return file_npool_order_gw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{1}
}

func (x *OrderBenefitAccountReq) GetAccountID() string {
	if x != nil && x.AccountID != nil {
		return *x.AccountID
	}
	return ""
}

func (x *OrderBenefitAccountReq) GetCoinTypeID() string {
	if x != nil && x.CoinTypeID != nil {
		return *x.CoinTypeID
	}
	return ""
}

func (x *OrderBenefitAccountReq) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

type OrderBenefitAccount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// for order benefit account
	AccountID  string `protobuf:"bytes,10,opt,name=AccountID,proto3" json:"AccountID,omitempty"`
	CoinTypeID string `protobuf:"bytes,20,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty"`
	Address    string `protobuf:"bytes,30,opt,name=Address,proto3" json:"Address,omitempty"`
}

func (x *OrderBenefitAccount) Reset() {
	*x = OrderBenefitAccount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderBenefitAccount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBenefitAccount) ProtoMessage() {}

func (x *OrderBenefitAccount) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBenefitAccount.ProtoReflect.Descriptor instead.
func (*OrderBenefitAccount) Descriptor() ([]byte, []int) {
	return file_npool_order_gw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{2}
}

func (x *OrderBenefitAccount) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *OrderBenefitAccount) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

func (x *OrderBenefitAccount) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type CreatePowerRentalOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID                     string                    `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	UserID                    string                    `protobuf:"bytes,20,opt,name=UserID,proto3" json:"UserID,omitempty"`
	AppGoodID                 string                    `protobuf:"bytes,30,opt,name=AppGoodID,proto3" json:"AppGoodID,omitempty"`
	DurationSeconds           *uint32                   `protobuf:"varint,40,opt,name=DurationSeconds,proto3,oneof" json:"DurationSeconds,omitempty"`
	Units                     *string                   `protobuf:"bytes,50,opt,name=Units,proto3,oneof" json:"Units,omitempty"`
	Balances                  []*payment.PaymentBalance `protobuf:"bytes,60,rep,name=Balances,proto3" json:"Balances,omitempty"`
	PaymentTransferCoinTypeID *string                   `protobuf:"bytes,70,opt,name=PaymentTransferCoinTypeID,proto3,oneof" json:"PaymentTransferCoinTypeID,omitempty"`
	CouponIDs                 []string                  `protobuf:"bytes,80,rep,name=CouponIDs,proto3" json:"CouponIDs,omitempty"`
	FeeAppGoodIDs             []string                  `protobuf:"bytes,90,rep,name=FeeAppGoodIDs,proto3" json:"FeeAppGoodIDs,omitempty"`
	FeeDurationSeconds        *uint32                   `protobuf:"varint,100,opt,name=FeeDurationSeconds,proto3,oneof" json:"FeeDurationSeconds,omitempty"`
	FeeAutoDeduction          *bool                     `protobuf:"varint,110,opt,name=FeeAutoDeduction,proto3,oneof" json:"FeeAutoDeduction,omitempty"`
	Simulate                  *bool                     `protobuf:"varint,120,opt,name=Simulate,proto3,oneof" json:"Simulate,omitempty"`
	AppGoodStockID            *string                   `protobuf:"bytes,130,opt,name=AppGoodStockID,proto3,oneof" json:"AppGoodStockID,omitempty"`
	InvestmentType            v11.InvestmentType        `protobuf:"varint,140,opt,name=InvestmentType,proto3,enum=basetypes.order.v1.InvestmentType" json:"InvestmentType,omitempty"`
	AppSpotUnits              *string                   `protobuf:"bytes,150,opt,name=AppSpotUnits,proto3,oneof" json:"AppSpotUnits,omitempty"`
	OrderBenefitAccounts      []*OrderBenefitAccountReq `protobuf:"bytes,160,rep,name=OrderBenefitAccounts,proto3" json:"OrderBenefitAccounts,omitempty"`
}

func (x *CreatePowerRentalOrderRequest) Reset() {
	*x = CreatePowerRentalOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePowerRentalOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePowerRentalOrderRequest) ProtoMessage() {}

func (x *CreatePowerRentalOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePowerRentalOrderRequest.ProtoReflect.Descriptor instead.
func (*CreatePowerRentalOrderRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_gw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{3}
}

func (x *CreatePowerRentalOrderRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *CreatePowerRentalOrderRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CreatePowerRentalOrderRequest) GetAppGoodID() string {
	if x != nil {
		return x.AppGoodID
	}
	return ""
}

func (x *CreatePowerRentalOrderRequest) GetDurationSeconds() uint32 {
	if x != nil && x.DurationSeconds != nil {
		return *x.DurationSeconds
	}
	return 0
}

func (x *CreatePowerRentalOrderRequest) GetUnits() string {
	if x != nil && x.Units != nil {
		return *x.Units
	}
	return ""
}

func (x *CreatePowerRentalOrderRequest) GetBalances() []*payment.PaymentBalance {
	if x != nil {
		return x.Balances
	}
	return nil
}

func (x *CreatePowerRentalOrderRequest) GetPaymentTransferCoinTypeID() string {
	if x != nil && x.PaymentTransferCoinTypeID != nil {
		return *x.PaymentTransferCoinTypeID
	}
	return ""
}

func (x *CreatePowerRentalOrderRequest) GetCouponIDs() []string {
	if x != nil {
		return x.CouponIDs
	}
	return nil
}

func (x *CreatePowerRentalOrderRequest) GetFeeAppGoodIDs() []string {
	if x != nil {
		return x.FeeAppGoodIDs
	}
	return nil
}

func (x *CreatePowerRentalOrderRequest) GetFeeDurationSeconds() uint32 {
	if x != nil && x.FeeDurationSeconds != nil {
		return *x.FeeDurationSeconds
	}
	return 0
}

func (x *CreatePowerRentalOrderRequest) GetFeeAutoDeduction() bool {
	if x != nil && x.FeeAutoDeduction != nil {
		return *x.FeeAutoDeduction
	}
	return false
}

func (x *CreatePowerRentalOrderRequest) GetSimulate() bool {
	if x != nil && x.Simulate != nil {
		return *x.Simulate
	}
	return false
}

func (x *CreatePowerRentalOrderRequest) GetAppGoodStockID() string {
	if x != nil && x.AppGoodStockID != nil {
		return *x.AppGoodStockID
	}
	return ""
}

func (x *CreatePowerRentalOrderRequest) GetInvestmentType() v11.InvestmentType {
	if x != nil {
		return x.InvestmentType
	}
	return v11.InvestmentType(0)
}

func (x *CreatePowerRentalOrderRequest) GetAppSpotUnits() string {
	if x != nil && x.AppSpotUnits != nil {
		return *x.AppSpotUnits
	}
	return ""
}

func (x *CreatePowerRentalOrderRequest) GetOrderBenefitAccounts() []*OrderBenefitAccountReq {
	if x != nil {
		return x.OrderBenefitAccounts
	}
	return nil
}

type CreatePowerRentalOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PowerRentalOrder `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreatePowerRentalOrderResponse) Reset() {
	*x = CreatePowerRentalOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePowerRentalOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePowerRentalOrderResponse) ProtoMessage() {}

func (x *CreatePowerRentalOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePowerRentalOrderResponse.ProtoReflect.Descriptor instead.
func (*CreatePowerRentalOrderResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_gw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{4}
}

func (x *CreatePowerRentalOrderResponse) GetInfo() *PowerRentalOrder {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateUserPowerRentalOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID           string             `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	TargetUserID    string             `protobuf:"bytes,20,opt,name=TargetUserID,proto3" json:"TargetUserID,omitempty"`
	AppGoodID       string             `protobuf:"bytes,30,opt,name=AppGoodID,proto3" json:"AppGoodID,omitempty"`
	DurationSeconds *uint32            `protobuf:"varint,40,opt,name=DurationSeconds,proto3,oneof" json:"DurationSeconds,omitempty"`
	Units           *string            `protobuf:"bytes,50,opt,name=Units,proto3,oneof" json:"Units,omitempty"`
	OrderType       v11.OrderType      `protobuf:"varint,60,opt,name=OrderType,proto3,enum=basetypes.order.v1.OrderType" json:"OrderType,omitempty"`
	AppGoodStockID  string             `protobuf:"bytes,70,opt,name=AppGoodStockID,proto3" json:"AppGoodStockID,omitempty"`
	InvestmentType  v11.InvestmentType `protobuf:"varint,80,opt,name=InvestmentType,proto3,enum=basetypes.order.v1.InvestmentType" json:"InvestmentType,omitempty"`
	AppSpotUnits    *string            `protobuf:"bytes,90,opt,name=AppSpotUnits,proto3,oneof" json:"AppSpotUnits,omitempty"`
}

func (x *CreateUserPowerRentalOrderRequest) Reset() {
	*x = CreateUserPowerRentalOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserPowerRentalOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserPowerRentalOrderRequest) ProtoMessage() {}

func (x *CreateUserPowerRentalOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserPowerRentalOrderRequest.ProtoReflect.Descriptor instead.
func (*CreateUserPowerRentalOrderRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_gw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{5}
}

func (x *CreateUserPowerRentalOrderRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *CreateUserPowerRentalOrderRequest) GetTargetUserID() string {
	if x != nil {
		return x.TargetUserID
	}
	return ""
}

func (x *CreateUserPowerRentalOrderRequest) GetAppGoodID() string {
	if x != nil {
		return x.AppGoodID
	}
	return ""
}

func (x *CreateUserPowerRentalOrderRequest) GetDurationSeconds() uint32 {
	if x != nil && x.DurationSeconds != nil {
		return *x.DurationSeconds
	}
	return 0
}

func (x *CreateUserPowerRentalOrderRequest) GetUnits() string {
	if x != nil && x.Units != nil {
		return *x.Units
	}
	return ""
}

func (x *CreateUserPowerRentalOrderRequest) GetOrderType() v11.OrderType {
	if x != nil {
		return x.OrderType
	}
	return v11.OrderType(0)
}

func (x *CreateUserPowerRentalOrderRequest) GetAppGoodStockID() string {
	if x != nil {
		return x.AppGoodStockID
	}
	return ""
}

func (x *CreateUserPowerRentalOrderRequest) GetInvestmentType() v11.InvestmentType {
	if x != nil {
		return x.InvestmentType
	}
	return v11.InvestmentType(0)
}

func (x *CreateUserPowerRentalOrderRequest) GetAppSpotUnits() string {
	if x != nil && x.AppSpotUnits != nil {
		return *x.AppSpotUnits
	}
	return ""
}

type CreateUserPowerRentalOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PowerRentalOrder `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateUserPowerRentalOrderResponse) Reset() {
	*x = CreateUserPowerRentalOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserPowerRentalOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserPowerRentalOrderResponse) ProtoMessage() {}

func (x *CreateUserPowerRentalOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserPowerRentalOrderResponse.ProtoReflect.Descriptor instead.
func (*CreateUserPowerRentalOrderResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_gw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{6}
}

func (x *CreateUserPowerRentalOrderResponse) GetInfo() *PowerRentalOrder {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdatePowerRentalOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                        uint32                    `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID                     string                    `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty"`
	AppID                     string                    `protobuf:"bytes,30,opt,name=AppID,proto3" json:"AppID,omitempty"`
	UserID                    string                    `protobuf:"bytes,40,opt,name=UserID,proto3" json:"UserID,omitempty"`
	OrderID                   string                    `protobuf:"bytes,50,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
	Balances                  []*payment.PaymentBalance `protobuf:"bytes,60,rep,name=Balances,proto3" json:"Balances,omitempty"`
	PaymentTransferCoinTypeID *string                   `protobuf:"bytes,70,opt,name=PaymentTransferCoinTypeID,proto3,oneof" json:"PaymentTransferCoinTypeID,omitempty"`
	Paid                      *bool                     `protobuf:"varint,80,opt,name=Paid,proto3,oneof" json:"Paid,omitempty"`
	Canceled                  *bool                     `protobuf:"varint,90,opt,name=Canceled,proto3,oneof" json:"Canceled,omitempty"`
}

func (x *UpdatePowerRentalOrderRequest) Reset() {
	*x = UpdatePowerRentalOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePowerRentalOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePowerRentalOrderRequest) ProtoMessage() {}

func (x *UpdatePowerRentalOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePowerRentalOrderRequest.ProtoReflect.Descriptor instead.
func (*UpdatePowerRentalOrderRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_gw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{7}
}

func (x *UpdatePowerRentalOrderRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *UpdatePowerRentalOrderRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *UpdatePowerRentalOrderRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *UpdatePowerRentalOrderRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UpdatePowerRentalOrderRequest) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

func (x *UpdatePowerRentalOrderRequest) GetBalances() []*payment.PaymentBalance {
	if x != nil {
		return x.Balances
	}
	return nil
}

func (x *UpdatePowerRentalOrderRequest) GetPaymentTransferCoinTypeID() string {
	if x != nil && x.PaymentTransferCoinTypeID != nil {
		return *x.PaymentTransferCoinTypeID
	}
	return ""
}

func (x *UpdatePowerRentalOrderRequest) GetPaid() bool {
	if x != nil && x.Paid != nil {
		return *x.Paid
	}
	return false
}

func (x *UpdatePowerRentalOrderRequest) GetCanceled() bool {
	if x != nil && x.Canceled != nil {
		return *x.Canceled
	}
	return false
}

type UpdatePowerRentalOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PowerRentalOrder `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdatePowerRentalOrderResponse) Reset() {
	*x = UpdatePowerRentalOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePowerRentalOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePowerRentalOrderResponse) ProtoMessage() {}

func (x *UpdatePowerRentalOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePowerRentalOrderResponse.ProtoReflect.Descriptor instead.
func (*UpdatePowerRentalOrderResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_gw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{8}
}

func (x *UpdatePowerRentalOrderResponse) GetInfo() *PowerRentalOrder {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateUserPowerRentalOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID        string `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty"`
	AppID        string `protobuf:"bytes,30,opt,name=AppID,proto3" json:"AppID,omitempty"`
	TargetUserID string `protobuf:"bytes,40,opt,name=TargetUserID,proto3" json:"TargetUserID,omitempty"`
	OrderID      string `protobuf:"bytes,50,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
	Canceled     *bool  `protobuf:"varint,60,opt,name=Canceled,proto3,oneof" json:"Canceled,omitempty"`
}

func (x *UpdateUserPowerRentalOrderRequest) Reset() {
	*x = UpdateUserPowerRentalOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserPowerRentalOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserPowerRentalOrderRequest) ProtoMessage() {}

func (x *UpdateUserPowerRentalOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserPowerRentalOrderRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserPowerRentalOrderRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_gw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateUserPowerRentalOrderRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *UpdateUserPowerRentalOrderRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *UpdateUserPowerRentalOrderRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *UpdateUserPowerRentalOrderRequest) GetTargetUserID() string {
	if x != nil {
		return x.TargetUserID
	}
	return ""
}

func (x *UpdateUserPowerRentalOrderRequest) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

func (x *UpdateUserPowerRentalOrderRequest) GetCanceled() bool {
	if x != nil && x.Canceled != nil {
		return *x.Canceled
	}
	return false
}

type UpdateUserPowerRentalOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PowerRentalOrder `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateUserPowerRentalOrderResponse) Reset() {
	*x = UpdateUserPowerRentalOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserPowerRentalOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserPowerRentalOrderResponse) ProtoMessage() {}

func (x *UpdateUserPowerRentalOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserPowerRentalOrderResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserPowerRentalOrderResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_gw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateUserPowerRentalOrderResponse) GetInfo() *PowerRentalOrder {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetPowerRentalOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID   string `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	UserID  string `protobuf:"bytes,20,opt,name=UserID,proto3" json:"UserID,omitempty"`
	OrderID string `protobuf:"bytes,30,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
}

func (x *GetPowerRentalOrderRequest) Reset() {
	*x = GetPowerRentalOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPowerRentalOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPowerRentalOrderRequest) ProtoMessage() {}

func (x *GetPowerRentalOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPowerRentalOrderRequest.ProtoReflect.Descriptor instead.
func (*GetPowerRentalOrderRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_gw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{11}
}

func (x *GetPowerRentalOrderRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetPowerRentalOrderRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetPowerRentalOrderRequest) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

type GetPowerRentalOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PowerRentalOrder `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetPowerRentalOrderResponse) Reset() {
	*x = GetPowerRentalOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPowerRentalOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPowerRentalOrderResponse) ProtoMessage() {}

func (x *GetPowerRentalOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPowerRentalOrderResponse.ProtoReflect.Descriptor instead.
func (*GetPowerRentalOrderResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_gw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{12}
}

func (x *GetPowerRentalOrderResponse) GetInfo() *PowerRentalOrder {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetPowerRentalOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID        string  `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	TargetUserID *string `protobuf:"bytes,20,opt,name=TargetUserID,proto3,oneof" json:"TargetUserID,omitempty"`
	AppGoodID    *string `protobuf:"bytes,30,opt,name=AppGoodID,proto3,oneof" json:"AppGoodID,omitempty"`
	Offset       int32   `protobuf:"varint,40,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit        int32   `protobuf:"varint,50,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetPowerRentalOrdersRequest) Reset() {
	*x = GetPowerRentalOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPowerRentalOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPowerRentalOrdersRequest) ProtoMessage() {}

func (x *GetPowerRentalOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPowerRentalOrdersRequest.ProtoReflect.Descriptor instead.
func (*GetPowerRentalOrdersRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_gw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{13}
}

func (x *GetPowerRentalOrdersRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetPowerRentalOrdersRequest) GetTargetUserID() string {
	if x != nil && x.TargetUserID != nil {
		return *x.TargetUserID
	}
	return ""
}

func (x *GetPowerRentalOrdersRequest) GetAppGoodID() string {
	if x != nil && x.AppGoodID != nil {
		return *x.AppGoodID
	}
	return ""
}

func (x *GetPowerRentalOrdersRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetPowerRentalOrdersRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetPowerRentalOrdersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*PowerRentalOrder `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32              `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetPowerRentalOrdersResponse) Reset() {
	*x = GetPowerRentalOrdersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPowerRentalOrdersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPowerRentalOrdersResponse) ProtoMessage() {}

func (x *GetPowerRentalOrdersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPowerRentalOrdersResponse.ProtoReflect.Descriptor instead.
func (*GetPowerRentalOrdersResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_gw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{14}
}

func (x *GetPowerRentalOrdersResponse) GetInfos() []*PowerRentalOrder {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetPowerRentalOrdersResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetMyPowerRentalOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID     string  `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	UserID    string  `protobuf:"bytes,20,opt,name=UserID,proto3" json:"UserID,omitempty"`
	AppGoodID *string `protobuf:"bytes,30,opt,name=AppGoodID,proto3,oneof" json:"AppGoodID,omitempty"`
	Offset    int32   `protobuf:"varint,40,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit     int32   `protobuf:"varint,50,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetMyPowerRentalOrdersRequest) Reset() {
	*x = GetMyPowerRentalOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMyPowerRentalOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMyPowerRentalOrdersRequest) ProtoMessage() {}

func (x *GetMyPowerRentalOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMyPowerRentalOrdersRequest.ProtoReflect.Descriptor instead.
func (*GetMyPowerRentalOrdersRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_gw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{15}
}

func (x *GetMyPowerRentalOrdersRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetMyPowerRentalOrdersRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetMyPowerRentalOrdersRequest) GetAppGoodID() string {
	if x != nil && x.AppGoodID != nil {
		return *x.AppGoodID
	}
	return ""
}

func (x *GetMyPowerRentalOrdersRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetMyPowerRentalOrdersRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetMyPowerRentalOrdersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*PowerRentalOrder `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32              `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetMyPowerRentalOrdersResponse) Reset() {
	*x = GetMyPowerRentalOrdersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMyPowerRentalOrdersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMyPowerRentalOrdersResponse) ProtoMessage() {}

func (x *GetMyPowerRentalOrdersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMyPowerRentalOrdersResponse.ProtoReflect.Descriptor instead.
func (*GetMyPowerRentalOrdersResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_gw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{16}
}

func (x *GetMyPowerRentalOrdersResponse) GetInfos() []*PowerRentalOrder {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetMyPowerRentalOrdersResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type AdminCreatePowerRentalOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetAppID     string             `protobuf:"bytes,10,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
	TargetUserID    string             `protobuf:"bytes,20,opt,name=TargetUserID,proto3" json:"TargetUserID,omitempty"`
	AppGoodID       string             `protobuf:"bytes,30,opt,name=AppGoodID,proto3" json:"AppGoodID,omitempty"`
	DurationSeconds *uint32            `protobuf:"varint,40,opt,name=DurationSeconds,proto3,oneof" json:"DurationSeconds,omitempty"`
	Units           *string            `protobuf:"bytes,50,opt,name=Units,proto3,oneof" json:"Units,omitempty"`
	OrderType       v11.OrderType      `protobuf:"varint,60,opt,name=OrderType,proto3,enum=basetypes.order.v1.OrderType" json:"OrderType,omitempty"`
	AppGoodStockID  string             `protobuf:"bytes,70,opt,name=AppGoodStockID,proto3" json:"AppGoodStockID,omitempty"`
	InvestmentType  v11.InvestmentType `protobuf:"varint,80,opt,name=InvestmentType,proto3,enum=basetypes.order.v1.InvestmentType" json:"InvestmentType,omitempty"`
	AppSpotUnits    *string            `protobuf:"bytes,90,opt,name=AppSpotUnits,proto3,oneof" json:"AppSpotUnits,omitempty"`
}

func (x *AdminCreatePowerRentalOrderRequest) Reset() {
	*x = AdminCreatePowerRentalOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminCreatePowerRentalOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminCreatePowerRentalOrderRequest) ProtoMessage() {}

func (x *AdminCreatePowerRentalOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminCreatePowerRentalOrderRequest.ProtoReflect.Descriptor instead.
func (*AdminCreatePowerRentalOrderRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_gw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{17}
}

func (x *AdminCreatePowerRentalOrderRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

func (x *AdminCreatePowerRentalOrderRequest) GetTargetUserID() string {
	if x != nil {
		return x.TargetUserID
	}
	return ""
}

func (x *AdminCreatePowerRentalOrderRequest) GetAppGoodID() string {
	if x != nil {
		return x.AppGoodID
	}
	return ""
}

func (x *AdminCreatePowerRentalOrderRequest) GetDurationSeconds() uint32 {
	if x != nil && x.DurationSeconds != nil {
		return *x.DurationSeconds
	}
	return 0
}

func (x *AdminCreatePowerRentalOrderRequest) GetUnits() string {
	if x != nil && x.Units != nil {
		return *x.Units
	}
	return ""
}

func (x *AdminCreatePowerRentalOrderRequest) GetOrderType() v11.OrderType {
	if x != nil {
		return x.OrderType
	}
	return v11.OrderType(0)
}

func (x *AdminCreatePowerRentalOrderRequest) GetAppGoodStockID() string {
	if x != nil {
		return x.AppGoodStockID
	}
	return ""
}

func (x *AdminCreatePowerRentalOrderRequest) GetInvestmentType() v11.InvestmentType {
	if x != nil {
		return x.InvestmentType
	}
	return v11.InvestmentType(0)
}

func (x *AdminCreatePowerRentalOrderRequest) GetAppSpotUnits() string {
	if x != nil && x.AppSpotUnits != nil {
		return *x.AppSpotUnits
	}
	return ""
}

type AdminCreatePowerRentalOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PowerRentalOrder `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *AdminCreatePowerRentalOrderResponse) Reset() {
	*x = AdminCreatePowerRentalOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminCreatePowerRentalOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminCreatePowerRentalOrderResponse) ProtoMessage() {}

func (x *AdminCreatePowerRentalOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminCreatePowerRentalOrderResponse.ProtoReflect.Descriptor instead.
func (*AdminCreatePowerRentalOrderResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_gw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{18}
}

func (x *AdminCreatePowerRentalOrderResponse) GetInfo() *PowerRentalOrder {
	if x != nil {
		return x.Info
	}
	return nil
}

type AdminUpdatePowerRentalOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID        string `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty"`
	TargetAppID  string `protobuf:"bytes,30,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
	TargetUserID string `protobuf:"bytes,40,opt,name=TargetUserID,proto3" json:"TargetUserID,omitempty"`
	OrderID      string `protobuf:"bytes,50,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
	Canceled     *bool  `protobuf:"varint,60,opt,name=Canceled,proto3,oneof" json:"Canceled,omitempty"`
}

func (x *AdminUpdatePowerRentalOrderRequest) Reset() {
	*x = AdminUpdatePowerRentalOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminUpdatePowerRentalOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminUpdatePowerRentalOrderRequest) ProtoMessage() {}

func (x *AdminUpdatePowerRentalOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminUpdatePowerRentalOrderRequest.ProtoReflect.Descriptor instead.
func (*AdminUpdatePowerRentalOrderRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_gw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{19}
}

func (x *AdminUpdatePowerRentalOrderRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *AdminUpdatePowerRentalOrderRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *AdminUpdatePowerRentalOrderRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

func (x *AdminUpdatePowerRentalOrderRequest) GetTargetUserID() string {
	if x != nil {
		return x.TargetUserID
	}
	return ""
}

func (x *AdminUpdatePowerRentalOrderRequest) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

func (x *AdminUpdatePowerRentalOrderRequest) GetCanceled() bool {
	if x != nil && x.Canceled != nil {
		return *x.Canceled
	}
	return false
}

type AdminUpdatePowerRentalOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PowerRentalOrder `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *AdminUpdatePowerRentalOrderResponse) Reset() {
	*x = AdminUpdatePowerRentalOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminUpdatePowerRentalOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminUpdatePowerRentalOrderResponse) ProtoMessage() {}

func (x *AdminUpdatePowerRentalOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminUpdatePowerRentalOrderResponse.ProtoReflect.Descriptor instead.
func (*AdminUpdatePowerRentalOrderResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_gw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{20}
}

func (x *AdminUpdatePowerRentalOrderResponse) GetInfo() *PowerRentalOrder {
	if x != nil {
		return x.Info
	}
	return nil
}

type AdminGetPowerRentalOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetAppID *string `protobuf:"bytes,10,opt,name=TargetAppID,proto3,oneof" json:"TargetAppID,omitempty"`
	GoodID      *string `protobuf:"bytes,20,opt,name=GoodID,proto3,oneof" json:"GoodID,omitempty"`
	Offset      int32   `protobuf:"varint,30,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit       int32   `protobuf:"varint,40,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *AdminGetPowerRentalOrdersRequest) Reset() {
	*x = AdminGetPowerRentalOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminGetPowerRentalOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminGetPowerRentalOrdersRequest) ProtoMessage() {}

func (x *AdminGetPowerRentalOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminGetPowerRentalOrdersRequest.ProtoReflect.Descriptor instead.
func (*AdminGetPowerRentalOrdersRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_gw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{21}
}

func (x *AdminGetPowerRentalOrdersRequest) GetTargetAppID() string {
	if x != nil && x.TargetAppID != nil {
		return *x.TargetAppID
	}
	return ""
}

func (x *AdminGetPowerRentalOrdersRequest) GetGoodID() string {
	if x != nil && x.GoodID != nil {
		return *x.GoodID
	}
	return ""
}

func (x *AdminGetPowerRentalOrdersRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *AdminGetPowerRentalOrdersRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type AdminGetPowerRentalOrdersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*PowerRentalOrder `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32              `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *AdminGetPowerRentalOrdersResponse) Reset() {
	*x = AdminGetPowerRentalOrdersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminGetPowerRentalOrdersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminGetPowerRentalOrdersResponse) ProtoMessage() {}

func (x *AdminGetPowerRentalOrdersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminGetPowerRentalOrdersResponse.ProtoReflect.Descriptor instead.
func (*AdminGetPowerRentalOrdersResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_gw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{22}
}

func (x *AdminGetPowerRentalOrdersResponse) GetInfos() []*PowerRentalOrder {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *AdminGetPowerRentalOrdersResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type AdminDeletePowerRentalOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID        string `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty"`
	TargetAppID  string `protobuf:"bytes,30,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
	TargetUserID string `protobuf:"bytes,40,opt,name=TargetUserID,proto3" json:"TargetUserID,omitempty"`
	OrderID      string `protobuf:"bytes,50,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
}

func (x *AdminDeletePowerRentalOrderRequest) Reset() {
	*x = AdminDeletePowerRentalOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminDeletePowerRentalOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminDeletePowerRentalOrderRequest) ProtoMessage() {}

func (x *AdminDeletePowerRentalOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminDeletePowerRentalOrderRequest.ProtoReflect.Descriptor instead.
func (*AdminDeletePowerRentalOrderRequest) Descriptor() ([]byte, []int) {
	return file_npool_order_gw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{23}
}

func (x *AdminDeletePowerRentalOrderRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *AdminDeletePowerRentalOrderRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *AdminDeletePowerRentalOrderRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

func (x *AdminDeletePowerRentalOrderRequest) GetTargetUserID() string {
	if x != nil {
		return x.TargetUserID
	}
	return ""
}

func (x *AdminDeletePowerRentalOrderRequest) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

type AdminDeletePowerRentalOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PowerRentalOrder `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *AdminDeletePowerRentalOrderResponse) Reset() {
	*x = AdminDeletePowerRentalOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminDeletePowerRentalOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminDeletePowerRentalOrderResponse) ProtoMessage() {}

func (x *AdminDeletePowerRentalOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminDeletePowerRentalOrderResponse.ProtoReflect.Descriptor instead.
func (*AdminDeletePowerRentalOrderResponse) Descriptor() ([]byte, []int) {
	return file_npool_order_gw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{24}
}

func (x *AdminDeletePowerRentalOrderResponse) GetInfo() *PowerRentalOrder {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_order_gw_v1_powerrental_powerrental_proto protoreflect.FileDescriptor

var file_npool_order_gw_v1_powerrental_powerrental_proto_rawDesc = []byte{
	0x0a, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x67, 0x77,
	0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2f,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x6e,
	0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x67, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2f, 0x67, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x67, 0x77, 0x2f, 0x76,
	0x31, 0x2f, 0x66, 0x65, 0x65, 0x2f, 0x66, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xe3, 0x16, 0x0a, 0x10, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e,
	0x4f, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x4f,
	0x12, 0x16, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x37, 0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x40, 0x0a, 0x0b, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65, 0x6e, 0x65, 0x66,
	0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x6e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x10, 0x47, 0x6f, 0x6f, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55,
	0x6e, 0x69, 0x74, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x47, 0x6f, 0x6f, 0x64, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x41,
	0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x0b, 0x41, 0x70, 0x70,
	0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x07,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x3c, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x0c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1b, 0x0a, 0x08, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x18, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x74, 0x18, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x74, 0x12, 0x25, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74,
	0x41, 0x74, 0x18, 0xe6, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x42,
	0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x41, 0x74, 0x12, 0x45, 0x0a, 0x0c, 0x42, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0xf0, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x0c, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x27, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49,
	0x44, 0x18, 0xac, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f,
	0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x0e, 0x4d, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0xb6, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0e, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0e, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x6f, 0x6c, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0xc0, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0e, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f, 0x6c, 0x4c, 0x6f, 0x67,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x15, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x6f, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0xca, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x15, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x6f, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01,
	0x12, 0x3e, 0x0a, 0x17, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f, 0x6c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0xd4, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x17, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f, 0x6c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x3c, 0x0a, 0x16, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65,
	0x61, 0x64, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0xde, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x16, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f, 0x6c, 0x52,
	0x65, 0x61, 0x64, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x15,
	0x0a, 0x05, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x90, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0c, 0x47, 0x6f, 0x6f, 0x64, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x55, 0x53, 0x44, 0x18, 0x9a, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x47, 0x6f,
	0x6f, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x53, 0x44, 0x12, 0x2b, 0x0a, 0x10, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x53, 0x44, 0x18, 0xa4,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x55, 0x53, 0x44, 0x12, 0x2d, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x53, 0x44, 0x18, 0xae, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x55, 0x53, 0x44, 0x12, 0x21, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0xb8, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x0c, 0x54, 0x6f, 0x70,
	0x4d, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0xc2, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2b,
	0x0a, 0x10, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55,
	0x72, 0x6c, 0x18, 0xcc, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x54, 0x6f, 0x70, 0x4d, 0x6f,
	0x73, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x56, 0x0a, 0x13, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x18, 0xd6, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x13,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55,
	0x6e, 0x69, 0x74, 0x18, 0xe0, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x29, 0x0a, 0x0f, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0xea, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x09, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0xf4, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x4b, 0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0xfe, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x41, 0x0a, 0x0b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0xd8,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x74,
	0x18, 0xe2, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x15, 0x0a, 0x05, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18, 0xec, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x17, 0x0a, 0x06, 0x50, 0x61,
	0x69, 0x64, 0x41, 0x74, 0x18, 0xf6, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x50, 0x61, 0x69,
	0x64, 0x41, 0x74, 0x12, 0x21, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x50, 0x61,
	0x69, 0x64, 0x18, 0x80, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x65, 0x74, 0x50, 0x61, 0x69, 0x64, 0x12, 0x29, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x18, 0x8a, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65,
	0x64, 0x12, 0x2b, 0x0a, 0x10, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x65, 0x64, 0x18, 0x94, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x12, 0x45,
	0x0a, 0x0c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x9e,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x47, 0x61,
	0x73, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0xa8, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0f, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x47, 0x61, 0x73, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x2d, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0xb2, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x43, 0x6f,
	0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x4a, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x18, 0xa0, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x31, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x07, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x12, 0x57, 0x0a, 0x0f, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0xaa,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x12, 0x5a, 0x0a, 0x10, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73, 0x18, 0xb4, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x73,
	0x12, 0x46, 0x0a, 0x0c, 0x46, 0x65, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0xbe, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x66, 0x65, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x65, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x46, 0x65, 0x65, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x66, 0x0a, 0x14, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x18, 0x84, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x14, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x12, 0x1d, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xe8, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1d, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xf2, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f, 0x6c,
	0x4c, 0x6f, 0x67, 0x6f, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x6f, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x42, 0x1a,
	0x0a, 0x18, 0x5f, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f, 0x6c, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x4d,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x50, 0x61, 0x67,
	0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0xa8, 0x01, 0x0a, 0x16, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x21, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44,
	0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x44, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x22, 0x6d, 0x0a, 0x13, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0xb2, 0x07, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x2d, 0x0a,
	0x0f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x55, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x55,
	0x6e, 0x69, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x08, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x3c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x08, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x41, 0x0a,
	0x19, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x19, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01,
	0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x18, 0x50, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x44, 0x73, 0x12, 0x24,
	0x0a, 0x0d, 0x46, 0x65, 0x65, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x73, 0x18,
	0x5a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x46, 0x65, 0x65, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f,
	0x64, 0x49, 0x44, 0x73, 0x12, 0x33, 0x0a, 0x12, 0x46, 0x65, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x03, 0x52, 0x12, 0x46, 0x65, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x46, 0x65, 0x65,
	0x41, 0x75, 0x74, 0x6f, 0x44, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x6e, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x10, 0x46, 0x65, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x65,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x53, 0x69,
	0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x78, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x08,
	0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0e, 0x41,
	0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x82, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x0e, 0x49, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x8c, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x22, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0c, 0x41, 0x70, 0x70, 0x53, 0x70, 0x6f,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52,
	0x0c, 0x41, 0x70, 0x70, 0x53, 0x70, 0x6f, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x69, 0x0a, 0x14, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0xa0, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x52, 0x14, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x46, 0x65, 0x65, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x46, 0x65, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x65, 0x64, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x49, 0x44, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x41, 0x70, 0x70, 0x53, 0x70, 0x6f, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x73, 0x22, 0x64, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xce, 0x03, 0x0a, 0x21, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x70,
	0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41,
	0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x0f, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x00, 0x52, 0x0f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x55, 0x6e, 0x69, 0x74, 0x73,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x3b, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49,
	0x44, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x4a, 0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x65, 0x73,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0c, 0x41, 0x70, 0x70, 0x53, 0x70, 0x6f, 0x74, 0x55, 0x6e,
	0x69, 0x74, 0x73, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0c, 0x41, 0x70, 0x70,
	0x53, 0x70, 0x6f, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x41,
	0x70, 0x70, 0x53, 0x70, 0x6f, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x22, 0x68, 0x0a, 0x22, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x42, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x84, 0x03, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a,
	0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x44, 0x0a, 0x08, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x18, 0x3c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x08, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x19, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x19, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x50, 0x61, 0x69, 0x64, 0x18, 0x50, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x04,
	0x50, 0x61, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x65, 0x64, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x08, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x1c, 0x0a, 0x1a, 0x5f, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x50, 0x61, 0x69, 0x64, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x22, 0x64, 0x0a, 0x1e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0xcb, 0x01, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x1f, 0x0a, 0x08, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x18, 0x3c,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64,
	0x22, 0x68, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x64, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44,
	0x22, 0x61, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x42, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0xcc, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x27, 0x0a, 0x0c, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64,
	0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64,
	0x49, 0x44, 0x22, 0x7a, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xac,
	0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x21,
	0x0a, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x22, 0x7c, 0x0a,
	0x1e, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x44, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x05,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xdb, 0x03, 0x0a, 0x22,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x47,
	0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x70, 0x70,
	0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x0f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x00, 0x52, 0x0f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x3b, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x3c, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18,
	0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x4a, 0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x27, 0x0a, 0x0c, 0x41, 0x70, 0x70, 0x53, 0x70, 0x6f, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x73, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0c, 0x41, 0x70, 0x70, 0x53, 0x70,
	0x6f, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x41, 0x70, 0x70,
	0x53, 0x70, 0x6f, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x22, 0x69, 0x0a, 0x23, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x42, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0xd8, 0x01, 0x0a, 0x22, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x1f, 0x0a, 0x08, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x18, 0x3c, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x08, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x22,
	0x69, 0x0a, 0x23, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xaf, 0x01, 0x0a, 0x20, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x25, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44,
	0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x22, 0x7f, 0x0a, 0x21,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x44, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xaa, 0x01,
	0x0a, 0x22, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x22, 0x69, 0x0a, 0x23, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x42, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x8e, 0x11, 0x0a, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x12, 0xbb, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3b, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a,
	0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0xcc, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3f,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x40, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0xbb,
	0x01, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3b, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22,
	0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0xcc, 0x01, 0x0a,
	0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3f, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0xaf, 0x01, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x38, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d,
	0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0xb3, 0x01,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x39, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3a, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65,
	0x74, 0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x12, 0xbc, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x3b,
	0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4d, 0x79, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x79,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x21, 0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x6d, 0x79,
	0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x12, 0xd0, 0x01, 0x0a, 0x1b, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x40, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a,
	0x01, 0x2a, 0x22, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0xd0, 0x01, 0x0a, 0x1b, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x40, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x26, 0x3a, 0x01, 0x2a, 0x22, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0xc8, 0x01, 0x0a, 0x19, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x3e, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a,
	0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x67, 0x65,
	0x74, 0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x12, 0xd0, 0x01, 0x0a, 0x1b, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x40, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26,
	0x3a, 0x01, 0x2a, 0x22, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x40, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c,
	0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x67, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_order_gw_v1_powerrental_powerrental_proto_rawDescOnce sync.Once
	file_npool_order_gw_v1_powerrental_powerrental_proto_rawDescData = file_npool_order_gw_v1_powerrental_powerrental_proto_rawDesc
)

func file_npool_order_gw_v1_powerrental_powerrental_proto_rawDescGZIP() []byte {
	file_npool_order_gw_v1_powerrental_powerrental_proto_rawDescOnce.Do(func() {
		file_npool_order_gw_v1_powerrental_powerrental_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_order_gw_v1_powerrental_powerrental_proto_rawDescData)
	})
	return file_npool_order_gw_v1_powerrental_powerrental_proto_rawDescData
}

var file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_npool_order_gw_v1_powerrental_powerrental_proto_goTypes = []interface{}{
	(*PowerRentalOrder)(nil),                    // 0: order.gateway.powerrental.v1.PowerRentalOrder
	(*OrderBenefitAccountReq)(nil),              // 1: order.gateway.powerrental.v1.OrderBenefitAccountReq
	(*OrderBenefitAccount)(nil),                 // 2: order.gateway.powerrental.v1.OrderBenefitAccount
	(*CreatePowerRentalOrderRequest)(nil),       // 3: order.gateway.powerrental.v1.CreatePowerRentalOrderRequest
	(*CreatePowerRentalOrderResponse)(nil),      // 4: order.gateway.powerrental.v1.CreatePowerRentalOrderResponse
	(*CreateUserPowerRentalOrderRequest)(nil),   // 5: order.gateway.powerrental.v1.CreateUserPowerRentalOrderRequest
	(*CreateUserPowerRentalOrderResponse)(nil),  // 6: order.gateway.powerrental.v1.CreateUserPowerRentalOrderResponse
	(*UpdatePowerRentalOrderRequest)(nil),       // 7: order.gateway.powerrental.v1.UpdatePowerRentalOrderRequest
	(*UpdatePowerRentalOrderResponse)(nil),      // 8: order.gateway.powerrental.v1.UpdatePowerRentalOrderResponse
	(*UpdateUserPowerRentalOrderRequest)(nil),   // 9: order.gateway.powerrental.v1.UpdateUserPowerRentalOrderRequest
	(*UpdateUserPowerRentalOrderResponse)(nil),  // 10: order.gateway.powerrental.v1.UpdateUserPowerRentalOrderResponse
	(*GetPowerRentalOrderRequest)(nil),          // 11: order.gateway.powerrental.v1.GetPowerRentalOrderRequest
	(*GetPowerRentalOrderResponse)(nil),         // 12: order.gateway.powerrental.v1.GetPowerRentalOrderResponse
	(*GetPowerRentalOrdersRequest)(nil),         // 13: order.gateway.powerrental.v1.GetPowerRentalOrdersRequest
	(*GetPowerRentalOrdersResponse)(nil),        // 14: order.gateway.powerrental.v1.GetPowerRentalOrdersResponse
	(*GetMyPowerRentalOrdersRequest)(nil),       // 15: order.gateway.powerrental.v1.GetMyPowerRentalOrdersRequest
	(*GetMyPowerRentalOrdersResponse)(nil),      // 16: order.gateway.powerrental.v1.GetMyPowerRentalOrdersResponse
	(*AdminCreatePowerRentalOrderRequest)(nil),  // 17: order.gateway.powerrental.v1.AdminCreatePowerRentalOrderRequest
	(*AdminCreatePowerRentalOrderResponse)(nil), // 18: order.gateway.powerrental.v1.AdminCreatePowerRentalOrderResponse
	(*AdminUpdatePowerRentalOrderRequest)(nil),  // 19: order.gateway.powerrental.v1.AdminUpdatePowerRentalOrderRequest
	(*AdminUpdatePowerRentalOrderResponse)(nil), // 20: order.gateway.powerrental.v1.AdminUpdatePowerRentalOrderResponse
	(*AdminGetPowerRentalOrdersRequest)(nil),    // 21: order.gateway.powerrental.v1.AdminGetPowerRentalOrdersRequest
	(*AdminGetPowerRentalOrdersResponse)(nil),   // 22: order.gateway.powerrental.v1.AdminGetPowerRentalOrdersResponse
	(*AdminDeletePowerRentalOrderRequest)(nil),  // 23: order.gateway.powerrental.v1.AdminDeletePowerRentalOrderRequest
	(*AdminDeletePowerRentalOrderResponse)(nil), // 24: order.gateway.powerrental.v1.AdminDeletePowerRentalOrderResponse
	(v1.GoodType)(0),                            // 25: basetypes.good.v1.GoodType
	(v1.BenefitType)(0),                         // 26: basetypes.good.v1.BenefitType
	(v11.OrderType)(0),                          // 27: basetypes.order.v1.OrderType
	(v11.PaymentType)(0),                        // 28: basetypes.order.v1.PaymentType
	(v11.OrderCreateMethod)(0),                  // 29: basetypes.order.v1.OrderCreateMethod
	(v11.OrderState)(0),                         // 30: basetypes.order.v1.OrderState
	(v11.OrderStartMode)(0),                     // 31: basetypes.order.v1.OrderStartMode
	(v11.BenefitState)(0),                       // 32: basetypes.order.v1.BenefitState
	(v1.GoodDurationType)(0),                    // 33: basetypes.good.v1.GoodDurationType
	(v11.InvestmentType)(0),                     // 34: basetypes.order.v1.InvestmentType
	(v11.PaymentState)(0),                       // 35: basetypes.order.v1.PaymentState
	(*coupon.OrderCouponInfo)(nil),              // 36: order.gateway.order1.coupon.v1.OrderCouponInfo
	(*payment.PaymentBalanceInfo)(nil),          // 37: order.gateway.payment.v1.PaymentBalanceInfo
	(*payment.PaymentTransferInfo)(nil),         // 38: order.gateway.payment.v1.PaymentTransferInfo
	(*fee.FeeDuration)(nil),                     // 39: order.gateway.fee.v1.FeeDuration
	(*payment.PaymentBalance)(nil),              // 40: order.gateway.payment.v1.PaymentBalance
}
var file_npool_order_gw_v1_powerrental_powerrental_proto_depIdxs = []int32{
	25, // 0: order.gateway.powerrental.v1.PowerRentalOrder.GoodType:type_name -> basetypes.good.v1.GoodType
	26, // 1: order.gateway.powerrental.v1.PowerRentalOrder.BenefitType:type_name -> basetypes.good.v1.BenefitType
	27, // 2: order.gateway.powerrental.v1.PowerRentalOrder.OrderType:type_name -> basetypes.order.v1.OrderType
	28, // 3: order.gateway.powerrental.v1.PowerRentalOrder.PaymentType:type_name -> basetypes.order.v1.PaymentType
	29, // 4: order.gateway.powerrental.v1.PowerRentalOrder.CreateMethod:type_name -> basetypes.order.v1.OrderCreateMethod
	30, // 5: order.gateway.powerrental.v1.PowerRentalOrder.OrderState:type_name -> basetypes.order.v1.OrderState
	31, // 6: order.gateway.powerrental.v1.PowerRentalOrder.StartMode:type_name -> basetypes.order.v1.OrderStartMode
	32, // 7: order.gateway.powerrental.v1.PowerRentalOrder.BenefitState:type_name -> basetypes.order.v1.BenefitState
	33, // 8: order.gateway.powerrental.v1.PowerRentalOrder.DurationDisplayType:type_name -> basetypes.good.v1.GoodDurationType
	34, // 9: order.gateway.powerrental.v1.PowerRentalOrder.InvestmentType:type_name -> basetypes.order.v1.InvestmentType
	30, // 10: order.gateway.powerrental.v1.PowerRentalOrder.CancelState:type_name -> basetypes.order.v1.OrderState
	35, // 11: order.gateway.powerrental.v1.PowerRentalOrder.PaymentState:type_name -> basetypes.order.v1.PaymentState
	36, // 12: order.gateway.powerrental.v1.PowerRentalOrder.Coupons:type_name -> order.gateway.order1.coupon.v1.OrderCouponInfo
	37, // 13: order.gateway.powerrental.v1.PowerRentalOrder.PaymentBalances:type_name -> order.gateway.payment.v1.PaymentBalanceInfo
	38, // 14: order.gateway.powerrental.v1.PowerRentalOrder.PaymentTransfers:type_name -> order.gateway.payment.v1.PaymentTransferInfo
	39, // 15: order.gateway.powerrental.v1.PowerRentalOrder.FeeDurations:type_name -> order.gateway.fee.v1.FeeDuration
	2,  // 16: order.gateway.powerrental.v1.PowerRentalOrder.OrderBenefitAccounts:type_name -> order.gateway.powerrental.v1.OrderBenefitAccount
	40, // 17: order.gateway.powerrental.v1.CreatePowerRentalOrderRequest.Balances:type_name -> order.gateway.payment.v1.PaymentBalance
	34, // 18: order.gateway.powerrental.v1.CreatePowerRentalOrderRequest.InvestmentType:type_name -> basetypes.order.v1.InvestmentType
	1,  // 19: order.gateway.powerrental.v1.CreatePowerRentalOrderRequest.OrderBenefitAccounts:type_name -> order.gateway.powerrental.v1.OrderBenefitAccountReq
	0,  // 20: order.gateway.powerrental.v1.CreatePowerRentalOrderResponse.Info:type_name -> order.gateway.powerrental.v1.PowerRentalOrder
	27, // 21: order.gateway.powerrental.v1.CreateUserPowerRentalOrderRequest.OrderType:type_name -> basetypes.order.v1.OrderType
	34, // 22: order.gateway.powerrental.v1.CreateUserPowerRentalOrderRequest.InvestmentType:type_name -> basetypes.order.v1.InvestmentType
	0,  // 23: order.gateway.powerrental.v1.CreateUserPowerRentalOrderResponse.Info:type_name -> order.gateway.powerrental.v1.PowerRentalOrder
	40, // 24: order.gateway.powerrental.v1.UpdatePowerRentalOrderRequest.Balances:type_name -> order.gateway.payment.v1.PaymentBalance
	0,  // 25: order.gateway.powerrental.v1.UpdatePowerRentalOrderResponse.Info:type_name -> order.gateway.powerrental.v1.PowerRentalOrder
	0,  // 26: order.gateway.powerrental.v1.UpdateUserPowerRentalOrderResponse.Info:type_name -> order.gateway.powerrental.v1.PowerRentalOrder
	0,  // 27: order.gateway.powerrental.v1.GetPowerRentalOrderResponse.Info:type_name -> order.gateway.powerrental.v1.PowerRentalOrder
	0,  // 28: order.gateway.powerrental.v1.GetPowerRentalOrdersResponse.Infos:type_name -> order.gateway.powerrental.v1.PowerRentalOrder
	0,  // 29: order.gateway.powerrental.v1.GetMyPowerRentalOrdersResponse.Infos:type_name -> order.gateway.powerrental.v1.PowerRentalOrder
	27, // 30: order.gateway.powerrental.v1.AdminCreatePowerRentalOrderRequest.OrderType:type_name -> basetypes.order.v1.OrderType
	34, // 31: order.gateway.powerrental.v1.AdminCreatePowerRentalOrderRequest.InvestmentType:type_name -> basetypes.order.v1.InvestmentType
	0,  // 32: order.gateway.powerrental.v1.AdminCreatePowerRentalOrderResponse.Info:type_name -> order.gateway.powerrental.v1.PowerRentalOrder
	0,  // 33: order.gateway.powerrental.v1.AdminUpdatePowerRentalOrderResponse.Info:type_name -> order.gateway.powerrental.v1.PowerRentalOrder
	0,  // 34: order.gateway.powerrental.v1.AdminGetPowerRentalOrdersResponse.Infos:type_name -> order.gateway.powerrental.v1.PowerRentalOrder
	0,  // 35: order.gateway.powerrental.v1.AdminDeletePowerRentalOrderResponse.Info:type_name -> order.gateway.powerrental.v1.PowerRentalOrder
	3,  // 36: order.gateway.powerrental.v1.Gateway.CreatePowerRentalOrder:input_type -> order.gateway.powerrental.v1.CreatePowerRentalOrderRequest
	5,  // 37: order.gateway.powerrental.v1.Gateway.CreateUserPowerRentalOrder:input_type -> order.gateway.powerrental.v1.CreateUserPowerRentalOrderRequest
	7,  // 38: order.gateway.powerrental.v1.Gateway.UpdatePowerRentalOrder:input_type -> order.gateway.powerrental.v1.UpdatePowerRentalOrderRequest
	9,  // 39: order.gateway.powerrental.v1.Gateway.UpdateUserPowerRentalOrder:input_type -> order.gateway.powerrental.v1.UpdateUserPowerRentalOrderRequest
	11, // 40: order.gateway.powerrental.v1.Gateway.GetPowerRentalOrder:input_type -> order.gateway.powerrental.v1.GetPowerRentalOrderRequest
	13, // 41: order.gateway.powerrental.v1.Gateway.GetPowerRentalOrders:input_type -> order.gateway.powerrental.v1.GetPowerRentalOrdersRequest
	15, // 42: order.gateway.powerrental.v1.Gateway.GetMyPowerRentalOrders:input_type -> order.gateway.powerrental.v1.GetMyPowerRentalOrdersRequest
	17, // 43: order.gateway.powerrental.v1.Gateway.AdminCreatePowerRentalOrder:input_type -> order.gateway.powerrental.v1.AdminCreatePowerRentalOrderRequest
	19, // 44: order.gateway.powerrental.v1.Gateway.AdminUpdatePowerRentalOrder:input_type -> order.gateway.powerrental.v1.AdminUpdatePowerRentalOrderRequest
	21, // 45: order.gateway.powerrental.v1.Gateway.AdminGetPowerRentalOrders:input_type -> order.gateway.powerrental.v1.AdminGetPowerRentalOrdersRequest
	23, // 46: order.gateway.powerrental.v1.Gateway.AdminDeletePowerRentalOrder:input_type -> order.gateway.powerrental.v1.AdminDeletePowerRentalOrderRequest
	4,  // 47: order.gateway.powerrental.v1.Gateway.CreatePowerRentalOrder:output_type -> order.gateway.powerrental.v1.CreatePowerRentalOrderResponse
	6,  // 48: order.gateway.powerrental.v1.Gateway.CreateUserPowerRentalOrder:output_type -> order.gateway.powerrental.v1.CreateUserPowerRentalOrderResponse
	8,  // 49: order.gateway.powerrental.v1.Gateway.UpdatePowerRentalOrder:output_type -> order.gateway.powerrental.v1.UpdatePowerRentalOrderResponse
	10, // 50: order.gateway.powerrental.v1.Gateway.UpdateUserPowerRentalOrder:output_type -> order.gateway.powerrental.v1.UpdateUserPowerRentalOrderResponse
	12, // 51: order.gateway.powerrental.v1.Gateway.GetPowerRentalOrder:output_type -> order.gateway.powerrental.v1.GetPowerRentalOrderResponse
	14, // 52: order.gateway.powerrental.v1.Gateway.GetPowerRentalOrders:output_type -> order.gateway.powerrental.v1.GetPowerRentalOrdersResponse
	16, // 53: order.gateway.powerrental.v1.Gateway.GetMyPowerRentalOrders:output_type -> order.gateway.powerrental.v1.GetMyPowerRentalOrdersResponse
	18, // 54: order.gateway.powerrental.v1.Gateway.AdminCreatePowerRentalOrder:output_type -> order.gateway.powerrental.v1.AdminCreatePowerRentalOrderResponse
	20, // 55: order.gateway.powerrental.v1.Gateway.AdminUpdatePowerRentalOrder:output_type -> order.gateway.powerrental.v1.AdminUpdatePowerRentalOrderResponse
	22, // 56: order.gateway.powerrental.v1.Gateway.AdminGetPowerRentalOrders:output_type -> order.gateway.powerrental.v1.AdminGetPowerRentalOrdersResponse
	24, // 57: order.gateway.powerrental.v1.Gateway.AdminDeletePowerRentalOrder:output_type -> order.gateway.powerrental.v1.AdminDeletePowerRentalOrderResponse
	47, // [47:58] is the sub-list for method output_type
	36, // [36:47] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_npool_order_gw_v1_powerrental_powerrental_proto_init() }
func file_npool_order_gw_v1_powerrental_powerrental_proto_init() {
	if File_npool_order_gw_v1_powerrental_powerrental_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PowerRentalOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderBenefitAccountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderBenefitAccount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePowerRentalOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePowerRentalOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserPowerRentalOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserPowerRentalOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePowerRentalOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePowerRentalOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserPowerRentalOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserPowerRentalOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPowerRentalOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPowerRentalOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPowerRentalOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPowerRentalOrdersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMyPowerRentalOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMyPowerRentalOrdersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminCreatePowerRentalOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminCreatePowerRentalOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminUpdatePowerRentalOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminUpdatePowerRentalOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminGetPowerRentalOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminGetPowerRentalOrdersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminDeletePowerRentalOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminDeletePowerRentalOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes[21].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_order_gw_v1_powerrental_powerrental_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_order_gw_v1_powerrental_powerrental_proto_goTypes,
		DependencyIndexes: file_npool_order_gw_v1_powerrental_powerrental_proto_depIdxs,
		MessageInfos:      file_npool_order_gw_v1_powerrental_powerrental_proto_msgTypes,
	}.Build()
	File_npool_order_gw_v1_powerrental_powerrental_proto = out.File
	file_npool_order_gw_v1_powerrental_powerrental_proto_rawDesc = nil
	file_npool_order_gw_v1_powerrental_powerrental_proto_goTypes = nil
	file_npool_order_gw_v1_powerrental_powerrental_proto_depIdxs = nil
}
