// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/order/gw/v1/powerrental/powerrental.proto

package powerrental

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gateway_CreatePowerRentalOrder_FullMethodName      = "/order.gateway.powerrental.v1.Gateway/CreatePowerRentalOrder"
	Gateway_CreateUserPowerRentalOrder_FullMethodName  = "/order.gateway.powerrental.v1.Gateway/CreateUserPowerRentalOrder"
	Gateway_UpdatePowerRentalOrder_FullMethodName      = "/order.gateway.powerrental.v1.Gateway/UpdatePowerRentalOrder"
	Gateway_UpdateUserPowerRentalOrder_FullMethodName  = "/order.gateway.powerrental.v1.Gateway/UpdateUserPowerRentalOrder"
	Gateway_GetPowerRentalOrder_FullMethodName         = "/order.gateway.powerrental.v1.Gateway/GetPowerRentalOrder"
	Gateway_GetPowerRentalOrders_FullMethodName        = "/order.gateway.powerrental.v1.Gateway/GetPowerRentalOrders"
	Gateway_GetMyPowerRentalOrders_FullMethodName      = "/order.gateway.powerrental.v1.Gateway/GetMyPowerRentalOrders"
	Gateway_AdminCreatePowerRentalOrder_FullMethodName = "/order.gateway.powerrental.v1.Gateway/AdminCreatePowerRentalOrder"
	Gateway_AdminUpdatePowerRentalOrder_FullMethodName = "/order.gateway.powerrental.v1.Gateway/AdminUpdatePowerRentalOrder"
	Gateway_AdminGetPowerRentalOrders_FullMethodName   = "/order.gateway.powerrental.v1.Gateway/AdminGetPowerRentalOrders"
	Gateway_AdminDeletePowerRentalOrder_FullMethodName = "/order.gateway.powerrental.v1.Gateway/AdminDeletePowerRentalOrder"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	CreatePowerRentalOrder(ctx context.Context, in *CreatePowerRentalOrderRequest, opts ...grpc.CallOption) (*CreatePowerRentalOrderResponse, error)
	CreateUserPowerRentalOrder(ctx context.Context, in *CreateUserPowerRentalOrderRequest, opts ...grpc.CallOption) (*CreateUserPowerRentalOrderResponse, error)
	UpdatePowerRentalOrder(ctx context.Context, in *UpdatePowerRentalOrderRequest, opts ...grpc.CallOption) (*UpdatePowerRentalOrderResponse, error)
	UpdateUserPowerRentalOrder(ctx context.Context, in *UpdateUserPowerRentalOrderRequest, opts ...grpc.CallOption) (*UpdateUserPowerRentalOrderResponse, error)
	GetPowerRentalOrder(ctx context.Context, in *GetPowerRentalOrderRequest, opts ...grpc.CallOption) (*GetPowerRentalOrderResponse, error)
	GetPowerRentalOrders(ctx context.Context, in *GetPowerRentalOrdersRequest, opts ...grpc.CallOption) (*GetPowerRentalOrdersResponse, error)
	GetMyPowerRentalOrders(ctx context.Context, in *GetMyPowerRentalOrdersRequest, opts ...grpc.CallOption) (*GetMyPowerRentalOrdersResponse, error)
	// Admin apis
	AdminCreatePowerRentalOrder(ctx context.Context, in *AdminCreatePowerRentalOrderRequest, opts ...grpc.CallOption) (*AdminCreatePowerRentalOrderResponse, error)
	AdminUpdatePowerRentalOrder(ctx context.Context, in *AdminUpdatePowerRentalOrderRequest, opts ...grpc.CallOption) (*AdminUpdatePowerRentalOrderResponse, error)
	AdminGetPowerRentalOrders(ctx context.Context, in *AdminGetPowerRentalOrdersRequest, opts ...grpc.CallOption) (*AdminGetPowerRentalOrdersResponse, error)
	AdminDeletePowerRentalOrder(ctx context.Context, in *AdminDeletePowerRentalOrderRequest, opts ...grpc.CallOption) (*AdminDeletePowerRentalOrderResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) CreatePowerRentalOrder(ctx context.Context, in *CreatePowerRentalOrderRequest, opts ...grpc.CallOption) (*CreatePowerRentalOrderResponse, error) {
	out := new(CreatePowerRentalOrderResponse)
	err := c.cc.Invoke(ctx, Gateway_CreatePowerRentalOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) CreateUserPowerRentalOrder(ctx context.Context, in *CreateUserPowerRentalOrderRequest, opts ...grpc.CallOption) (*CreateUserPowerRentalOrderResponse, error) {
	out := new(CreateUserPowerRentalOrderResponse)
	err := c.cc.Invoke(ctx, Gateway_CreateUserPowerRentalOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdatePowerRentalOrder(ctx context.Context, in *UpdatePowerRentalOrderRequest, opts ...grpc.CallOption) (*UpdatePowerRentalOrderResponse, error) {
	out := new(UpdatePowerRentalOrderResponse)
	err := c.cc.Invoke(ctx, Gateway_UpdatePowerRentalOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdateUserPowerRentalOrder(ctx context.Context, in *UpdateUserPowerRentalOrderRequest, opts ...grpc.CallOption) (*UpdateUserPowerRentalOrderResponse, error) {
	out := new(UpdateUserPowerRentalOrderResponse)
	err := c.cc.Invoke(ctx, Gateway_UpdateUserPowerRentalOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetPowerRentalOrder(ctx context.Context, in *GetPowerRentalOrderRequest, opts ...grpc.CallOption) (*GetPowerRentalOrderResponse, error) {
	out := new(GetPowerRentalOrderResponse)
	err := c.cc.Invoke(ctx, Gateway_GetPowerRentalOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetPowerRentalOrders(ctx context.Context, in *GetPowerRentalOrdersRequest, opts ...grpc.CallOption) (*GetPowerRentalOrdersResponse, error) {
	out := new(GetPowerRentalOrdersResponse)
	err := c.cc.Invoke(ctx, Gateway_GetPowerRentalOrders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetMyPowerRentalOrders(ctx context.Context, in *GetMyPowerRentalOrdersRequest, opts ...grpc.CallOption) (*GetMyPowerRentalOrdersResponse, error) {
	out := new(GetMyPowerRentalOrdersResponse)
	err := c.cc.Invoke(ctx, Gateway_GetMyPowerRentalOrders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminCreatePowerRentalOrder(ctx context.Context, in *AdminCreatePowerRentalOrderRequest, opts ...grpc.CallOption) (*AdminCreatePowerRentalOrderResponse, error) {
	out := new(AdminCreatePowerRentalOrderResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminCreatePowerRentalOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminUpdatePowerRentalOrder(ctx context.Context, in *AdminUpdatePowerRentalOrderRequest, opts ...grpc.CallOption) (*AdminUpdatePowerRentalOrderResponse, error) {
	out := new(AdminUpdatePowerRentalOrderResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminUpdatePowerRentalOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminGetPowerRentalOrders(ctx context.Context, in *AdminGetPowerRentalOrdersRequest, opts ...grpc.CallOption) (*AdminGetPowerRentalOrdersResponse, error) {
	out := new(AdminGetPowerRentalOrdersResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminGetPowerRentalOrders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminDeletePowerRentalOrder(ctx context.Context, in *AdminDeletePowerRentalOrderRequest, opts ...grpc.CallOption) (*AdminDeletePowerRentalOrderResponse, error) {
	out := new(AdminDeletePowerRentalOrderResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminDeletePowerRentalOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	CreatePowerRentalOrder(context.Context, *CreatePowerRentalOrderRequest) (*CreatePowerRentalOrderResponse, error)
	CreateUserPowerRentalOrder(context.Context, *CreateUserPowerRentalOrderRequest) (*CreateUserPowerRentalOrderResponse, error)
	UpdatePowerRentalOrder(context.Context, *UpdatePowerRentalOrderRequest) (*UpdatePowerRentalOrderResponse, error)
	UpdateUserPowerRentalOrder(context.Context, *UpdateUserPowerRentalOrderRequest) (*UpdateUserPowerRentalOrderResponse, error)
	GetPowerRentalOrder(context.Context, *GetPowerRentalOrderRequest) (*GetPowerRentalOrderResponse, error)
	GetPowerRentalOrders(context.Context, *GetPowerRentalOrdersRequest) (*GetPowerRentalOrdersResponse, error)
	GetMyPowerRentalOrders(context.Context, *GetMyPowerRentalOrdersRequest) (*GetMyPowerRentalOrdersResponse, error)
	// Admin apis
	AdminCreatePowerRentalOrder(context.Context, *AdminCreatePowerRentalOrderRequest) (*AdminCreatePowerRentalOrderResponse, error)
	AdminUpdatePowerRentalOrder(context.Context, *AdminUpdatePowerRentalOrderRequest) (*AdminUpdatePowerRentalOrderResponse, error)
	AdminGetPowerRentalOrders(context.Context, *AdminGetPowerRentalOrdersRequest) (*AdminGetPowerRentalOrdersResponse, error)
	AdminDeletePowerRentalOrder(context.Context, *AdminDeletePowerRentalOrderRequest) (*AdminDeletePowerRentalOrderResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) CreatePowerRentalOrder(context.Context, *CreatePowerRentalOrderRequest) (*CreatePowerRentalOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePowerRentalOrder not implemented")
}
func (UnimplementedGatewayServer) CreateUserPowerRentalOrder(context.Context, *CreateUserPowerRentalOrderRequest) (*CreateUserPowerRentalOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserPowerRentalOrder not implemented")
}
func (UnimplementedGatewayServer) UpdatePowerRentalOrder(context.Context, *UpdatePowerRentalOrderRequest) (*UpdatePowerRentalOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePowerRentalOrder not implemented")
}
func (UnimplementedGatewayServer) UpdateUserPowerRentalOrder(context.Context, *UpdateUserPowerRentalOrderRequest) (*UpdateUserPowerRentalOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPowerRentalOrder not implemented")
}
func (UnimplementedGatewayServer) GetPowerRentalOrder(context.Context, *GetPowerRentalOrderRequest) (*GetPowerRentalOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPowerRentalOrder not implemented")
}
func (UnimplementedGatewayServer) GetPowerRentalOrders(context.Context, *GetPowerRentalOrdersRequest) (*GetPowerRentalOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPowerRentalOrders not implemented")
}
func (UnimplementedGatewayServer) GetMyPowerRentalOrders(context.Context, *GetMyPowerRentalOrdersRequest) (*GetMyPowerRentalOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyPowerRentalOrders not implemented")
}
func (UnimplementedGatewayServer) AdminCreatePowerRentalOrder(context.Context, *AdminCreatePowerRentalOrderRequest) (*AdminCreatePowerRentalOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCreatePowerRentalOrder not implemented")
}
func (UnimplementedGatewayServer) AdminUpdatePowerRentalOrder(context.Context, *AdminUpdatePowerRentalOrderRequest) (*AdminUpdatePowerRentalOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdatePowerRentalOrder not implemented")
}
func (UnimplementedGatewayServer) AdminGetPowerRentalOrders(context.Context, *AdminGetPowerRentalOrdersRequest) (*AdminGetPowerRentalOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetPowerRentalOrders not implemented")
}
func (UnimplementedGatewayServer) AdminDeletePowerRentalOrder(context.Context, *AdminDeletePowerRentalOrderRequest) (*AdminDeletePowerRentalOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDeletePowerRentalOrder not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_CreatePowerRentalOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePowerRentalOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreatePowerRentalOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_CreatePowerRentalOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreatePowerRentalOrder(ctx, req.(*CreatePowerRentalOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_CreateUserPowerRentalOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserPowerRentalOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateUserPowerRentalOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_CreateUserPowerRentalOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateUserPowerRentalOrder(ctx, req.(*CreateUserPowerRentalOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdatePowerRentalOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePowerRentalOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdatePowerRentalOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_UpdatePowerRentalOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdatePowerRentalOrder(ctx, req.(*UpdatePowerRentalOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdateUserPowerRentalOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPowerRentalOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateUserPowerRentalOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_UpdateUserPowerRentalOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateUserPowerRentalOrder(ctx, req.(*UpdateUserPowerRentalOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetPowerRentalOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPowerRentalOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetPowerRentalOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetPowerRentalOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetPowerRentalOrder(ctx, req.(*GetPowerRentalOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetPowerRentalOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPowerRentalOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetPowerRentalOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetPowerRentalOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetPowerRentalOrders(ctx, req.(*GetPowerRentalOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetMyPowerRentalOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyPowerRentalOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetMyPowerRentalOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetMyPowerRentalOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetMyPowerRentalOrders(ctx, req.(*GetMyPowerRentalOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminCreatePowerRentalOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCreatePowerRentalOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminCreatePowerRentalOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminCreatePowerRentalOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminCreatePowerRentalOrder(ctx, req.(*AdminCreatePowerRentalOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminUpdatePowerRentalOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdatePowerRentalOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminUpdatePowerRentalOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminUpdatePowerRentalOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminUpdatePowerRentalOrder(ctx, req.(*AdminUpdatePowerRentalOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminGetPowerRentalOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetPowerRentalOrdersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminGetPowerRentalOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminGetPowerRentalOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminGetPowerRentalOrders(ctx, req.(*AdminGetPowerRentalOrdersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminDeletePowerRentalOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDeletePowerRentalOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminDeletePowerRentalOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminDeletePowerRentalOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminDeletePowerRentalOrder(ctx, req.(*AdminDeletePowerRentalOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.gateway.powerrental.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePowerRentalOrder",
			Handler:    _Gateway_CreatePowerRentalOrder_Handler,
		},
		{
			MethodName: "CreateUserPowerRentalOrder",
			Handler:    _Gateway_CreateUserPowerRentalOrder_Handler,
		},
		{
			MethodName: "UpdatePowerRentalOrder",
			Handler:    _Gateway_UpdatePowerRentalOrder_Handler,
		},
		{
			MethodName: "UpdateUserPowerRentalOrder",
			Handler:    _Gateway_UpdateUserPowerRentalOrder_Handler,
		},
		{
			MethodName: "GetPowerRentalOrder",
			Handler:    _Gateway_GetPowerRentalOrder_Handler,
		},
		{
			MethodName: "GetPowerRentalOrders",
			Handler:    _Gateway_GetPowerRentalOrders_Handler,
		},
		{
			MethodName: "GetMyPowerRentalOrders",
			Handler:    _Gateway_GetMyPowerRentalOrders_Handler,
		},
		{
			MethodName: "AdminCreatePowerRentalOrder",
			Handler:    _Gateway_AdminCreatePowerRentalOrder_Handler,
		},
		{
			MethodName: "AdminUpdatePowerRentalOrder",
			Handler:    _Gateway_AdminUpdatePowerRentalOrder_Handler,
		},
		{
			MethodName: "AdminGetPowerRentalOrders",
			Handler:    _Gateway_AdminGetPowerRentalOrders_Handler,
		},
		{
			MethodName: "AdminDeletePowerRentalOrder",
			Handler:    _Gateway_AdminDeletePowerRentalOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/order/gw/v1/powerrental/powerrental.proto",
}
