// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/order/mgr/v1/outofgas/outofgas.proto

package outofgas

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateOutOfGas(ctx context.Context, in *CreateOutOfGasRequest, opts ...grpc.CallOption) (*CreateOutOfGasResponse, error)
	CreateOutOfGass(ctx context.Context, in *CreateOutOfGassRequest, opts ...grpc.CallOption) (*CreateOutOfGassResponse, error)
	UpdateOutOfGas(ctx context.Context, in *UpdateOutOfGasRequest, opts ...grpc.CallOption) (*UpdateOutOfGasResponse, error)
	GetOutOfGas(ctx context.Context, in *GetOutOfGasRequest, opts ...grpc.CallOption) (*GetOutOfGasResponse, error)
	GetOutOfGasOnly(ctx context.Context, in *GetOutOfGasOnlyRequest, opts ...grpc.CallOption) (*GetOutOfGasOnlyResponse, error)
	GetOutOfGass(ctx context.Context, in *GetOutOfGassRequest, opts ...grpc.CallOption) (*GetOutOfGassResponse, error)
	ExistOutOfGas(ctx context.Context, in *ExistOutOfGasRequest, opts ...grpc.CallOption) (*ExistOutOfGasResponse, error)
	ExistOutOfGasConds(ctx context.Context, in *ExistOutOfGasCondsRequest, opts ...grpc.CallOption) (*ExistOutOfGasCondsResponse, error)
	CountOutOfGass(ctx context.Context, in *CountOutOfGassRequest, opts ...grpc.CallOption) (*CountOutOfGassResponse, error)
	DeleteOutOfGas(ctx context.Context, in *DeleteOutOfGasRequest, opts ...grpc.CallOption) (*DeleteOutOfGasResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateOutOfGas(ctx context.Context, in *CreateOutOfGasRequest, opts ...grpc.CallOption) (*CreateOutOfGasResponse, error) {
	out := new(CreateOutOfGasResponse)
	err := c.cc.Invoke(ctx, "/order.manager.outofgas.v1.Manager/CreateOutOfGas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateOutOfGass(ctx context.Context, in *CreateOutOfGassRequest, opts ...grpc.CallOption) (*CreateOutOfGassResponse, error) {
	out := new(CreateOutOfGassResponse)
	err := c.cc.Invoke(ctx, "/order.manager.outofgas.v1.Manager/CreateOutOfGass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateOutOfGas(ctx context.Context, in *UpdateOutOfGasRequest, opts ...grpc.CallOption) (*UpdateOutOfGasResponse, error) {
	out := new(UpdateOutOfGasResponse)
	err := c.cc.Invoke(ctx, "/order.manager.outofgas.v1.Manager/UpdateOutOfGas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetOutOfGas(ctx context.Context, in *GetOutOfGasRequest, opts ...grpc.CallOption) (*GetOutOfGasResponse, error) {
	out := new(GetOutOfGasResponse)
	err := c.cc.Invoke(ctx, "/order.manager.outofgas.v1.Manager/GetOutOfGas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetOutOfGasOnly(ctx context.Context, in *GetOutOfGasOnlyRequest, opts ...grpc.CallOption) (*GetOutOfGasOnlyResponse, error) {
	out := new(GetOutOfGasOnlyResponse)
	err := c.cc.Invoke(ctx, "/order.manager.outofgas.v1.Manager/GetOutOfGasOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetOutOfGass(ctx context.Context, in *GetOutOfGassRequest, opts ...grpc.CallOption) (*GetOutOfGassResponse, error) {
	out := new(GetOutOfGassResponse)
	err := c.cc.Invoke(ctx, "/order.manager.outofgas.v1.Manager/GetOutOfGass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistOutOfGas(ctx context.Context, in *ExistOutOfGasRequest, opts ...grpc.CallOption) (*ExistOutOfGasResponse, error) {
	out := new(ExistOutOfGasResponse)
	err := c.cc.Invoke(ctx, "/order.manager.outofgas.v1.Manager/ExistOutOfGas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistOutOfGasConds(ctx context.Context, in *ExistOutOfGasCondsRequest, opts ...grpc.CallOption) (*ExistOutOfGasCondsResponse, error) {
	out := new(ExistOutOfGasCondsResponse)
	err := c.cc.Invoke(ctx, "/order.manager.outofgas.v1.Manager/ExistOutOfGasConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountOutOfGass(ctx context.Context, in *CountOutOfGassRequest, opts ...grpc.CallOption) (*CountOutOfGassResponse, error) {
	out := new(CountOutOfGassResponse)
	err := c.cc.Invoke(ctx, "/order.manager.outofgas.v1.Manager/CountOutOfGass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteOutOfGas(ctx context.Context, in *DeleteOutOfGasRequest, opts ...grpc.CallOption) (*DeleteOutOfGasResponse, error) {
	out := new(DeleteOutOfGasResponse)
	err := c.cc.Invoke(ctx, "/order.manager.outofgas.v1.Manager/DeleteOutOfGas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateOutOfGas(context.Context, *CreateOutOfGasRequest) (*CreateOutOfGasResponse, error)
	CreateOutOfGass(context.Context, *CreateOutOfGassRequest) (*CreateOutOfGassResponse, error)
	UpdateOutOfGas(context.Context, *UpdateOutOfGasRequest) (*UpdateOutOfGasResponse, error)
	GetOutOfGas(context.Context, *GetOutOfGasRequest) (*GetOutOfGasResponse, error)
	GetOutOfGasOnly(context.Context, *GetOutOfGasOnlyRequest) (*GetOutOfGasOnlyResponse, error)
	GetOutOfGass(context.Context, *GetOutOfGassRequest) (*GetOutOfGassResponse, error)
	ExistOutOfGas(context.Context, *ExistOutOfGasRequest) (*ExistOutOfGasResponse, error)
	ExistOutOfGasConds(context.Context, *ExistOutOfGasCondsRequest) (*ExistOutOfGasCondsResponse, error)
	CountOutOfGass(context.Context, *CountOutOfGassRequest) (*CountOutOfGassResponse, error)
	DeleteOutOfGas(context.Context, *DeleteOutOfGasRequest) (*DeleteOutOfGasResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateOutOfGas(context.Context, *CreateOutOfGasRequest) (*CreateOutOfGasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOutOfGas not implemented")
}
func (UnimplementedManagerServer) CreateOutOfGass(context.Context, *CreateOutOfGassRequest) (*CreateOutOfGassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOutOfGass not implemented")
}
func (UnimplementedManagerServer) UpdateOutOfGas(context.Context, *UpdateOutOfGasRequest) (*UpdateOutOfGasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOutOfGas not implemented")
}
func (UnimplementedManagerServer) GetOutOfGas(context.Context, *GetOutOfGasRequest) (*GetOutOfGasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOutOfGas not implemented")
}
func (UnimplementedManagerServer) GetOutOfGasOnly(context.Context, *GetOutOfGasOnlyRequest) (*GetOutOfGasOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOutOfGasOnly not implemented")
}
func (UnimplementedManagerServer) GetOutOfGass(context.Context, *GetOutOfGassRequest) (*GetOutOfGassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOutOfGass not implemented")
}
func (UnimplementedManagerServer) ExistOutOfGas(context.Context, *ExistOutOfGasRequest) (*ExistOutOfGasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistOutOfGas not implemented")
}
func (UnimplementedManagerServer) ExistOutOfGasConds(context.Context, *ExistOutOfGasCondsRequest) (*ExistOutOfGasCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistOutOfGasConds not implemented")
}
func (UnimplementedManagerServer) CountOutOfGass(context.Context, *CountOutOfGassRequest) (*CountOutOfGassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountOutOfGass not implemented")
}
func (UnimplementedManagerServer) DeleteOutOfGas(context.Context, *DeleteOutOfGasRequest) (*DeleteOutOfGasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOutOfGas not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateOutOfGas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOutOfGasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateOutOfGas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.manager.outofgas.v1.Manager/CreateOutOfGas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateOutOfGas(ctx, req.(*CreateOutOfGasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateOutOfGass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOutOfGassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateOutOfGass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.manager.outofgas.v1.Manager/CreateOutOfGass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateOutOfGass(ctx, req.(*CreateOutOfGassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateOutOfGas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOutOfGasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateOutOfGas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.manager.outofgas.v1.Manager/UpdateOutOfGas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateOutOfGas(ctx, req.(*UpdateOutOfGasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetOutOfGas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOutOfGasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetOutOfGas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.manager.outofgas.v1.Manager/GetOutOfGas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetOutOfGas(ctx, req.(*GetOutOfGasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetOutOfGasOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOutOfGasOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetOutOfGasOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.manager.outofgas.v1.Manager/GetOutOfGasOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetOutOfGasOnly(ctx, req.(*GetOutOfGasOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetOutOfGass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOutOfGassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetOutOfGass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.manager.outofgas.v1.Manager/GetOutOfGass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetOutOfGass(ctx, req.(*GetOutOfGassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistOutOfGas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistOutOfGasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistOutOfGas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.manager.outofgas.v1.Manager/ExistOutOfGas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistOutOfGas(ctx, req.(*ExistOutOfGasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistOutOfGasConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistOutOfGasCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistOutOfGasConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.manager.outofgas.v1.Manager/ExistOutOfGasConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistOutOfGasConds(ctx, req.(*ExistOutOfGasCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountOutOfGass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountOutOfGassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountOutOfGass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.manager.outofgas.v1.Manager/CountOutOfGass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountOutOfGass(ctx, req.(*CountOutOfGassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteOutOfGas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOutOfGasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteOutOfGas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.manager.outofgas.v1.Manager/DeleteOutOfGas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteOutOfGas(ctx, req.(*DeleteOutOfGasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.manager.outofgas.v1.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOutOfGas",
			Handler:    _Manager_CreateOutOfGas_Handler,
		},
		{
			MethodName: "CreateOutOfGass",
			Handler:    _Manager_CreateOutOfGass_Handler,
		},
		{
			MethodName: "UpdateOutOfGas",
			Handler:    _Manager_UpdateOutOfGas_Handler,
		},
		{
			MethodName: "GetOutOfGas",
			Handler:    _Manager_GetOutOfGas_Handler,
		},
		{
			MethodName: "GetOutOfGasOnly",
			Handler:    _Manager_GetOutOfGasOnly_Handler,
		},
		{
			MethodName: "GetOutOfGass",
			Handler:    _Manager_GetOutOfGass_Handler,
		},
		{
			MethodName: "ExistOutOfGas",
			Handler:    _Manager_ExistOutOfGas_Handler,
		},
		{
			MethodName: "ExistOutOfGasConds",
			Handler:    _Manager_ExistOutOfGasConds_Handler,
		},
		{
			MethodName: "CountOutOfGass",
			Handler:    _Manager_CountOutOfGass_Handler,
		},
		{
			MethodName: "DeleteOutOfGas",
			Handler:    _Manager_DeleteOutOfGas_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/order/mgr/v1/outofgas/outofgas.proto",
}
