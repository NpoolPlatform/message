syntax = "proto3";

package order.manager.compensate.v1;

option go_package = "github.com/NpoolPlatform/message/npool/order/mgr/v1/compensate";

import "google/protobuf/empty.proto";
import "npool/npool.proto";

// Service Name
service Manager {
    rpc CreateCompensate     (CreateCompensateRequest)     returns (CreateCompensateResponse)     {}
    rpc CreateCompensates    (CreateCompensatesRequest)    returns (CreateCompensatesResponse)    {}
    rpc UpdateCompensate     (UpdateCompensateRequest)     returns (UpdateCompensateResponse)     {}
    rpc GetCompensate        (GetCompensateRequest)        returns (GetCompensateResponse)        {}
    rpc GetCompensateOnly    (GetCompensateOnlyRequest)    returns (GetCompensateOnlyResponse)    {}
    rpc GetCompensates       (GetCompensatesRequest)       returns (GetCompensatesResponse)       {}
    rpc ExistCompensate      (ExistCompensateRequest)      returns (ExistCompensateResponse)      {}
    rpc ExistCompensateConds (ExistCompensateCondsRequest) returns (ExistCompensateCondsResponse) {}
    rpc CountCompensates     (CountCompensatesRequest)     returns (CountCompensatesResponse)     {}
    rpc DeleteCompensate     (DeleteCompensateRequest)     returns (DeleteCompensateResponse)     {}
}

message CompensateReq {
    optional string     ID        = 10;
    optional string     OrderID   = 20;
    optional uint32     Start     = 30;
    optional uint32     End       = 40;
    optional string     Message   = 50;
    optional uint32     CreatedAt = 60;
}

message Compensate {
    string     ID        = 10;
    string     OrderID   = 20;
    uint32     Start     = 30;
    uint32     End       = 40;
    string     Message   = 50;
    uint32     CreatedAt = 60;
    uint32     UpdatedAt = 70;
    uint32     DeletedAt = 80;
}

message Conds {
    optional npool.v1.StringVal ID      = 10;
    optional npool.v1.StringVal OrderID = 20;
    optional npool.v1.Uint32Val Start   = 30;
    optional npool.v1.Uint32Val End     = 40;
}


message CreateCompensateRequest {
    CompensateReq Info = 10;
}

message CreateCompensateResponse {
    Compensate Info = 10;
}

message CreateCompensatesRequest {
    repeated CompensateReq Infos = 10;
}

message CreateCompensatesResponse {
    repeated Compensate Infos = 10;
}

message UpdateCompensateRequest {
    CompensateReq Info = 10;
}

message UpdateCompensateResponse {
    Compensate Info = 10;
}

message GetCompensateRequest {
    string ID = 10;
}

message GetCompensateResponse {
    Compensate Info = 10;
}

message GetCompensatesRequest {
    Conds Conds   = 10;
    int32 Offset  = 20;
    int32 Limit   = 30;
}

message GetCompensatesResponse {
    repeated Compensate Infos = 10;
    uint32        Total = 20;
}

message GetCompensateOnlyRequest {
    Conds Conds = 10;
}

message GetCompensateOnlyResponse {
    Compensate Info = 10;
}

message ExistCompensateRequest {
    string ID = 10;
}

message ExistCompensateResponse {
    bool Info = 10;
}

message ExistCompensateCondsRequest {
    Conds Conds = 10;
}

message ExistCompensateCondsResponse {
    bool Info = 10;
}

message CountCompensatesRequest {
    Conds Conds = 10;
}

message CountCompensatesResponse {
    uint32 Info = 10;
}

message DeleteCompensateRequest {
    string ID = 10;
}

message DeleteCompensateResponse {
    Compensate Info = 10;
}
