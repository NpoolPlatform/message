// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package appusermgr

import (
	context "context"
	npool "github.com/NpoolPlatform/message/npool"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppUserManagerClient is the client API for AppUserManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppUserManagerClient interface {
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*npool.VersionResponse, error)
	CreateAdminApps(ctx context.Context, in *CreateAdminAppsRequest, opts ...grpc.CallOption) (*CreateAdminAppsResponse, error)
	GetAdminApps(ctx context.Context, in *GetAdminAppsRequest, opts ...grpc.CallOption) (*GetAdminAppsResponse, error)
	CreateApp(ctx context.Context, in *CreateAppRequest, opts ...grpc.CallOption) (*CreateAppResponse, error)
	GetApp(ctx context.Context, in *GetAppRequest, opts ...grpc.CallOption) (*GetAppResponse, error)
	GetApps(ctx context.Context, in *GetAppsRequest, opts ...grpc.CallOption) (*GetAppsResponse, error)
	GetAppsByCreator(ctx context.Context, in *GetAppsByCreatorRequest, opts ...grpc.CallOption) (*GetAppsByCreatorResponse, error)
	UpdateApp(ctx context.Context, in *UpdateAppRequest, opts ...grpc.CallOption) (*UpdateAppResponse, error)
	CreateAppControl(ctx context.Context, in *CreateAppControlRequest, opts ...grpc.CallOption) (*CreateAppControlResponse, error)
	GetAppControl(ctx context.Context, in *GetAppControlRequest, opts ...grpc.CallOption) (*GetAppControlResponse, error)
	GetAppControlByApp(ctx context.Context, in *GetAppControlByAppRequest, opts ...grpc.CallOption) (*GetAppControlByAppResponse, error)
	UpdateAppControl(ctx context.Context, in *UpdateAppControlRequest, opts ...grpc.CallOption) (*UpdateAppControlResponse, error)
	CreateBanApp(ctx context.Context, in *CreateBanAppRequest, opts ...grpc.CallOption) (*CreateBanAppResponse, error)
	GetBanApp(ctx context.Context, in *GetBanAppRequest, opts ...grpc.CallOption) (*GetBanAppResponse, error)
	GetBanAppByApp(ctx context.Context, in *GetBanAppByAppRequest, opts ...grpc.CallOption) (*GetBanAppByAppResponse, error)
	UpdateBanApp(ctx context.Context, in *UpdateBanAppRequest, opts ...grpc.CallOption) (*UpdateBanAppResponse, error)
	DeleteBanApp(ctx context.Context, in *DeleteBanAppRequest, opts ...grpc.CallOption) (*DeleteBanAppResponse, error)
	GetAppInfo(ctx context.Context, in *GetAppInfoRequest, opts ...grpc.CallOption) (*GetAppInfoResponse, error)
	GetAppInfos(ctx context.Context, in *GetAppInfosRequest, opts ...grpc.CallOption) (*GetAppInfosResponse, error)
	GetAppInfosByCreator(ctx context.Context, in *GetAppInfosByCreatorRequest, opts ...grpc.CallOption) (*GetAppInfosByCreatorResponse, error)
	CreateAppUser(ctx context.Context, in *CreateAppUserRequest, opts ...grpc.CallOption) (*CreateAppUserResponse, error)
	GetAppUser(ctx context.Context, in *GetAppUserRequest, opts ...grpc.CallOption) (*GetAppUserResponse, error)
	GetAppUsersByApp(ctx context.Context, in *GetAppUsersByAppRequest, opts ...grpc.CallOption) (*GetAppUsersByAppResponse, error)
	UpdateAppUser(ctx context.Context, in *UpdateAppUserRequest, opts ...grpc.CallOption) (*UpdateAppUserResponse, error)
	CreateAppUserSecret(ctx context.Context, in *CreateAppUserSecretRequest, opts ...grpc.CallOption) (*CreateAppUserSecretResponse, error)
	GetAppUserSecret(ctx context.Context, in *GetAppUserSecretRequest, opts ...grpc.CallOption) (*GetAppUserSecretResponse, error)
	GetAppUserSecretByAppUser(ctx context.Context, in *GetAppUserSecretByAppUserRequest, opts ...grpc.CallOption) (*GetAppUserSecretByAppUserResponse, error)
	UpdateAppUserSecret(ctx context.Context, in *UpdateAppUserSecretRequest, opts ...grpc.CallOption) (*UpdateAppUserSecretResponse, error)
	CreateAppUserExtra(ctx context.Context, in *CreateAppUserExtraRequest, opts ...grpc.CallOption) (*CreateAppUserExtraResponse, error)
	GetAppUserExtra(ctx context.Context, in *GetAppUserExtraRequest, opts ...grpc.CallOption) (*GetAppUserExtraResponse, error)
	GetAppUserExtraByAppUser(ctx context.Context, in *GetAppUserExtraByAppUserRequest, opts ...grpc.CallOption) (*GetAppUserExtraByAppUserResponse, error)
	UpdateAppUserExtra(ctx context.Context, in *UpdateAppUserExtraRequest, opts ...grpc.CallOption) (*UpdateAppUserExtraResponse, error)
	CreateBanAppUser(ctx context.Context, in *CreateBanAppUserRequest, opts ...grpc.CallOption) (*CreateBanAppUserResponse, error)
	GetBanAppUser(ctx context.Context, in *GetBanAppUserRequest, opts ...grpc.CallOption) (*GetBanAppUserResponse, error)
	GetBanAppUserByAppUser(ctx context.Context, in *GetBanAppUserByAppUserRequest, opts ...grpc.CallOption) (*GetBanAppUserByAppUserResponse, error)
	UpdateBanAppUser(ctx context.Context, in *UpdateBanAppUserRequest, opts ...grpc.CallOption) (*UpdateBanAppUserResponse, error)
	DeleteBanAppUser(ctx context.Context, in *DeleteBanAppUserRequest, opts ...grpc.CallOption) (*DeleteBanAppUserResponse, error)
	CreateAppUserControl(ctx context.Context, in *CreateAppUserControlRequest, opts ...grpc.CallOption) (*CreateAppUserControlResponse, error)
	GetAppUserControl(ctx context.Context, in *GetAppUserControlRequest, opts ...grpc.CallOption) (*GetAppUserControlResponse, error)
	GetAppUserControlByAppUser(ctx context.Context, in *GetAppUserControlByAppUserRequest, opts ...grpc.CallOption) (*GetAppUserControlByAppUserResponse, error)
	UpdateAppUserControl(ctx context.Context, in *UpdateAppUserControlRequest, opts ...grpc.CallOption) (*UpdateAppUserControlResponse, error)
	CreateGenesisRole(ctx context.Context, in *CreateGenesisRoleRequest, opts ...grpc.CallOption) (*CreateGenesisRoleResponse, error)
	GetGenesisRole(ctx context.Context, in *GetGenesisRoleRequest, opts ...grpc.CallOption) (*GetGenesisRoleResponse, error)
	CreateGenesisRoleUser(ctx context.Context, in *CreateGenesisRoleUserRequest, opts ...grpc.CallOption) (*CreateGenesisRoleUserResponse, error)
	CreateAppRole(ctx context.Context, in *CreateAppRoleRequest, opts ...grpc.CallOption) (*CreateAppRoleResponse, error)
	GetAppRole(ctx context.Context, in *GetAppRoleRequest, opts ...grpc.CallOption) (*GetAppRoleResponse, error)
	GetAppRoleByAppRole(ctx context.Context, in *GetAppRoleByAppRoleRequest, opts ...grpc.CallOption) (*GetAppRoleByAppRoleResponse, error)
	GetAppRolesByApp(ctx context.Context, in *GetAppRolesByAppRequest, opts ...grpc.CallOption) (*GetAppRolesByAppResponse, error)
	UpdateAppRole(ctx context.Context, in *UpdateAppRoleRequest, opts ...grpc.CallOption) (*UpdateAppRoleResponse, error)
	CreateAppRoleUser(ctx context.Context, in *CreateAppRoleUserRequest, opts ...grpc.CallOption) (*CreateAppRoleUserResponse, error)
	GetAppRoleUser(ctx context.Context, in *GetAppRoleUserRequest, opts ...grpc.CallOption) (*GetAppRoleUserResponse, error)
	GetAppRoleUsersByAppRole(ctx context.Context, in *GetAppRoleUsersByAppRoleRequest, opts ...grpc.CallOption) (*GetAppRoleUsersByAppRoleResponse, error)
	GetUserRolesByAppUser(ctx context.Context, in *GetUserRolesByAppUserRequest, opts ...grpc.CallOption) (*GetUserRolesByAppUserResponse, error)
	DeleteAppRoleUser(ctx context.Context, in *DeleteAppRoleUserRequest, opts ...grpc.CallOption) (*DeleteAppRoleUserResponse, error)
	GetAppUserInfo(ctx context.Context, in *GetAppUserInfoRequest, opts ...grpc.CallOption) (*GetAppUserInfoResponse, error)
	GetAppUserInfos(ctx context.Context, in *GetAppUserInfosRequest, opts ...grpc.CallOption) (*GetAppUserInfosResponse, error)
	GetAppUserInfosByApp(ctx context.Context, in *GetAppUserInfosByAppRequest, opts ...grpc.CallOption) (*GetAppUserInfosByAppResponse, error)
}

type appUserManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewAppUserManagerClient(cc grpc.ClientConnInterface) AppUserManagerClient {
	return &appUserManagerClient{cc}
}

func (c *appUserManagerClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*npool.VersionResponse, error) {
	out := new(npool.VersionResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) CreateAdminApps(ctx context.Context, in *CreateAdminAppsRequest, opts ...grpc.CallOption) (*CreateAdminAppsResponse, error) {
	out := new(CreateAdminAppsResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/CreateAdminApps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) GetAdminApps(ctx context.Context, in *GetAdminAppsRequest, opts ...grpc.CallOption) (*GetAdminAppsResponse, error) {
	out := new(GetAdminAppsResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/GetAdminApps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) CreateApp(ctx context.Context, in *CreateAppRequest, opts ...grpc.CallOption) (*CreateAppResponse, error) {
	out := new(CreateAppResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/CreateApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) GetApp(ctx context.Context, in *GetAppRequest, opts ...grpc.CallOption) (*GetAppResponse, error) {
	out := new(GetAppResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/GetApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) GetApps(ctx context.Context, in *GetAppsRequest, opts ...grpc.CallOption) (*GetAppsResponse, error) {
	out := new(GetAppsResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/GetApps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) GetAppsByCreator(ctx context.Context, in *GetAppsByCreatorRequest, opts ...grpc.CallOption) (*GetAppsByCreatorResponse, error) {
	out := new(GetAppsByCreatorResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/GetAppsByCreator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) UpdateApp(ctx context.Context, in *UpdateAppRequest, opts ...grpc.CallOption) (*UpdateAppResponse, error) {
	out := new(UpdateAppResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/UpdateApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) CreateAppControl(ctx context.Context, in *CreateAppControlRequest, opts ...grpc.CallOption) (*CreateAppControlResponse, error) {
	out := new(CreateAppControlResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/CreateAppControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) GetAppControl(ctx context.Context, in *GetAppControlRequest, opts ...grpc.CallOption) (*GetAppControlResponse, error) {
	out := new(GetAppControlResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/GetAppControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) GetAppControlByApp(ctx context.Context, in *GetAppControlByAppRequest, opts ...grpc.CallOption) (*GetAppControlByAppResponse, error) {
	out := new(GetAppControlByAppResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/GetAppControlByApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) UpdateAppControl(ctx context.Context, in *UpdateAppControlRequest, opts ...grpc.CallOption) (*UpdateAppControlResponse, error) {
	out := new(UpdateAppControlResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/UpdateAppControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) CreateBanApp(ctx context.Context, in *CreateBanAppRequest, opts ...grpc.CallOption) (*CreateBanAppResponse, error) {
	out := new(CreateBanAppResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/CreateBanApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) GetBanApp(ctx context.Context, in *GetBanAppRequest, opts ...grpc.CallOption) (*GetBanAppResponse, error) {
	out := new(GetBanAppResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/GetBanApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) GetBanAppByApp(ctx context.Context, in *GetBanAppByAppRequest, opts ...grpc.CallOption) (*GetBanAppByAppResponse, error) {
	out := new(GetBanAppByAppResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/GetBanAppByApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) UpdateBanApp(ctx context.Context, in *UpdateBanAppRequest, opts ...grpc.CallOption) (*UpdateBanAppResponse, error) {
	out := new(UpdateBanAppResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/UpdateBanApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) DeleteBanApp(ctx context.Context, in *DeleteBanAppRequest, opts ...grpc.CallOption) (*DeleteBanAppResponse, error) {
	out := new(DeleteBanAppResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/DeleteBanApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) GetAppInfo(ctx context.Context, in *GetAppInfoRequest, opts ...grpc.CallOption) (*GetAppInfoResponse, error) {
	out := new(GetAppInfoResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/GetAppInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) GetAppInfos(ctx context.Context, in *GetAppInfosRequest, opts ...grpc.CallOption) (*GetAppInfosResponse, error) {
	out := new(GetAppInfosResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/GetAppInfos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) GetAppInfosByCreator(ctx context.Context, in *GetAppInfosByCreatorRequest, opts ...grpc.CallOption) (*GetAppInfosByCreatorResponse, error) {
	out := new(GetAppInfosByCreatorResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/GetAppInfosByCreator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) CreateAppUser(ctx context.Context, in *CreateAppUserRequest, opts ...grpc.CallOption) (*CreateAppUserResponse, error) {
	out := new(CreateAppUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/CreateAppUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) GetAppUser(ctx context.Context, in *GetAppUserRequest, opts ...grpc.CallOption) (*GetAppUserResponse, error) {
	out := new(GetAppUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/GetAppUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) GetAppUsersByApp(ctx context.Context, in *GetAppUsersByAppRequest, opts ...grpc.CallOption) (*GetAppUsersByAppResponse, error) {
	out := new(GetAppUsersByAppResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/GetAppUsersByApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) UpdateAppUser(ctx context.Context, in *UpdateAppUserRequest, opts ...grpc.CallOption) (*UpdateAppUserResponse, error) {
	out := new(UpdateAppUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/UpdateAppUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) CreateAppUserSecret(ctx context.Context, in *CreateAppUserSecretRequest, opts ...grpc.CallOption) (*CreateAppUserSecretResponse, error) {
	out := new(CreateAppUserSecretResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/CreateAppUserSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) GetAppUserSecret(ctx context.Context, in *GetAppUserSecretRequest, opts ...grpc.CallOption) (*GetAppUserSecretResponse, error) {
	out := new(GetAppUserSecretResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/GetAppUserSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) GetAppUserSecretByAppUser(ctx context.Context, in *GetAppUserSecretByAppUserRequest, opts ...grpc.CallOption) (*GetAppUserSecretByAppUserResponse, error) {
	out := new(GetAppUserSecretByAppUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/GetAppUserSecretByAppUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) UpdateAppUserSecret(ctx context.Context, in *UpdateAppUserSecretRequest, opts ...grpc.CallOption) (*UpdateAppUserSecretResponse, error) {
	out := new(UpdateAppUserSecretResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/UpdateAppUserSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) CreateAppUserExtra(ctx context.Context, in *CreateAppUserExtraRequest, opts ...grpc.CallOption) (*CreateAppUserExtraResponse, error) {
	out := new(CreateAppUserExtraResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/CreateAppUserExtra", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) GetAppUserExtra(ctx context.Context, in *GetAppUserExtraRequest, opts ...grpc.CallOption) (*GetAppUserExtraResponse, error) {
	out := new(GetAppUserExtraResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/GetAppUserExtra", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) GetAppUserExtraByAppUser(ctx context.Context, in *GetAppUserExtraByAppUserRequest, opts ...grpc.CallOption) (*GetAppUserExtraByAppUserResponse, error) {
	out := new(GetAppUserExtraByAppUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/GetAppUserExtraByAppUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) UpdateAppUserExtra(ctx context.Context, in *UpdateAppUserExtraRequest, opts ...grpc.CallOption) (*UpdateAppUserExtraResponse, error) {
	out := new(UpdateAppUserExtraResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/UpdateAppUserExtra", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) CreateBanAppUser(ctx context.Context, in *CreateBanAppUserRequest, opts ...grpc.CallOption) (*CreateBanAppUserResponse, error) {
	out := new(CreateBanAppUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/CreateBanAppUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) GetBanAppUser(ctx context.Context, in *GetBanAppUserRequest, opts ...grpc.CallOption) (*GetBanAppUserResponse, error) {
	out := new(GetBanAppUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/GetBanAppUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) GetBanAppUserByAppUser(ctx context.Context, in *GetBanAppUserByAppUserRequest, opts ...grpc.CallOption) (*GetBanAppUserByAppUserResponse, error) {
	out := new(GetBanAppUserByAppUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/GetBanAppUserByAppUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) UpdateBanAppUser(ctx context.Context, in *UpdateBanAppUserRequest, opts ...grpc.CallOption) (*UpdateBanAppUserResponse, error) {
	out := new(UpdateBanAppUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/UpdateBanAppUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) DeleteBanAppUser(ctx context.Context, in *DeleteBanAppUserRequest, opts ...grpc.CallOption) (*DeleteBanAppUserResponse, error) {
	out := new(DeleteBanAppUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/DeleteBanAppUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) CreateAppUserControl(ctx context.Context, in *CreateAppUserControlRequest, opts ...grpc.CallOption) (*CreateAppUserControlResponse, error) {
	out := new(CreateAppUserControlResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/CreateAppUserControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) GetAppUserControl(ctx context.Context, in *GetAppUserControlRequest, opts ...grpc.CallOption) (*GetAppUserControlResponse, error) {
	out := new(GetAppUserControlResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/GetAppUserControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) GetAppUserControlByAppUser(ctx context.Context, in *GetAppUserControlByAppUserRequest, opts ...grpc.CallOption) (*GetAppUserControlByAppUserResponse, error) {
	out := new(GetAppUserControlByAppUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/GetAppUserControlByAppUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) UpdateAppUserControl(ctx context.Context, in *UpdateAppUserControlRequest, opts ...grpc.CallOption) (*UpdateAppUserControlResponse, error) {
	out := new(UpdateAppUserControlResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/UpdateAppUserControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) CreateGenesisRole(ctx context.Context, in *CreateGenesisRoleRequest, opts ...grpc.CallOption) (*CreateGenesisRoleResponse, error) {
	out := new(CreateGenesisRoleResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/CreateGenesisRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) GetGenesisRole(ctx context.Context, in *GetGenesisRoleRequest, opts ...grpc.CallOption) (*GetGenesisRoleResponse, error) {
	out := new(GetGenesisRoleResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/GetGenesisRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) CreateGenesisRoleUser(ctx context.Context, in *CreateGenesisRoleUserRequest, opts ...grpc.CallOption) (*CreateGenesisRoleUserResponse, error) {
	out := new(CreateGenesisRoleUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/CreateGenesisRoleUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) CreateAppRole(ctx context.Context, in *CreateAppRoleRequest, opts ...grpc.CallOption) (*CreateAppRoleResponse, error) {
	out := new(CreateAppRoleResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/CreateAppRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) GetAppRole(ctx context.Context, in *GetAppRoleRequest, opts ...grpc.CallOption) (*GetAppRoleResponse, error) {
	out := new(GetAppRoleResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/GetAppRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) GetAppRoleByAppRole(ctx context.Context, in *GetAppRoleByAppRoleRequest, opts ...grpc.CallOption) (*GetAppRoleByAppRoleResponse, error) {
	out := new(GetAppRoleByAppRoleResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/GetAppRoleByAppRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) GetAppRolesByApp(ctx context.Context, in *GetAppRolesByAppRequest, opts ...grpc.CallOption) (*GetAppRolesByAppResponse, error) {
	out := new(GetAppRolesByAppResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/GetAppRolesByApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) UpdateAppRole(ctx context.Context, in *UpdateAppRoleRequest, opts ...grpc.CallOption) (*UpdateAppRoleResponse, error) {
	out := new(UpdateAppRoleResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/UpdateAppRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) CreateAppRoleUser(ctx context.Context, in *CreateAppRoleUserRequest, opts ...grpc.CallOption) (*CreateAppRoleUserResponse, error) {
	out := new(CreateAppRoleUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/CreateAppRoleUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) GetAppRoleUser(ctx context.Context, in *GetAppRoleUserRequest, opts ...grpc.CallOption) (*GetAppRoleUserResponse, error) {
	out := new(GetAppRoleUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/GetAppRoleUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) GetAppRoleUsersByAppRole(ctx context.Context, in *GetAppRoleUsersByAppRoleRequest, opts ...grpc.CallOption) (*GetAppRoleUsersByAppRoleResponse, error) {
	out := new(GetAppRoleUsersByAppRoleResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/GetAppRoleUsersByAppRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) GetUserRolesByAppUser(ctx context.Context, in *GetUserRolesByAppUserRequest, opts ...grpc.CallOption) (*GetUserRolesByAppUserResponse, error) {
	out := new(GetUserRolesByAppUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/GetUserRolesByAppUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) DeleteAppRoleUser(ctx context.Context, in *DeleteAppRoleUserRequest, opts ...grpc.CallOption) (*DeleteAppRoleUserResponse, error) {
	out := new(DeleteAppRoleUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/DeleteAppRoleUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) GetAppUserInfo(ctx context.Context, in *GetAppUserInfoRequest, opts ...grpc.CallOption) (*GetAppUserInfoResponse, error) {
	out := new(GetAppUserInfoResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/GetAppUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) GetAppUserInfos(ctx context.Context, in *GetAppUserInfosRequest, opts ...grpc.CallOption) (*GetAppUserInfosResponse, error) {
	out := new(GetAppUserInfosResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/GetAppUserInfos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) GetAppUserInfosByApp(ctx context.Context, in *GetAppUserInfosByAppRequest, opts ...grpc.CallOption) (*GetAppUserInfosByAppResponse, error) {
	out := new(GetAppUserInfosByAppResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/GetAppUserInfosByApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppUserManagerServer is the server API for AppUserManager service.
// All implementations must embed UnimplementedAppUserManagerServer
// for forward compatibility
type AppUserManagerServer interface {
	Version(context.Context, *emptypb.Empty) (*npool.VersionResponse, error)
	CreateAdminApps(context.Context, *CreateAdminAppsRequest) (*CreateAdminAppsResponse, error)
	GetAdminApps(context.Context, *GetAdminAppsRequest) (*GetAdminAppsResponse, error)
	CreateApp(context.Context, *CreateAppRequest) (*CreateAppResponse, error)
	GetApp(context.Context, *GetAppRequest) (*GetAppResponse, error)
	GetApps(context.Context, *GetAppsRequest) (*GetAppsResponse, error)
	GetAppsByCreator(context.Context, *GetAppsByCreatorRequest) (*GetAppsByCreatorResponse, error)
	UpdateApp(context.Context, *UpdateAppRequest) (*UpdateAppResponse, error)
	CreateAppControl(context.Context, *CreateAppControlRequest) (*CreateAppControlResponse, error)
	GetAppControl(context.Context, *GetAppControlRequest) (*GetAppControlResponse, error)
	GetAppControlByApp(context.Context, *GetAppControlByAppRequest) (*GetAppControlByAppResponse, error)
	UpdateAppControl(context.Context, *UpdateAppControlRequest) (*UpdateAppControlResponse, error)
	CreateBanApp(context.Context, *CreateBanAppRequest) (*CreateBanAppResponse, error)
	GetBanApp(context.Context, *GetBanAppRequest) (*GetBanAppResponse, error)
	GetBanAppByApp(context.Context, *GetBanAppByAppRequest) (*GetBanAppByAppResponse, error)
	UpdateBanApp(context.Context, *UpdateBanAppRequest) (*UpdateBanAppResponse, error)
	DeleteBanApp(context.Context, *DeleteBanAppRequest) (*DeleteBanAppResponse, error)
	GetAppInfo(context.Context, *GetAppInfoRequest) (*GetAppInfoResponse, error)
	GetAppInfos(context.Context, *GetAppInfosRequest) (*GetAppInfosResponse, error)
	GetAppInfosByCreator(context.Context, *GetAppInfosByCreatorRequest) (*GetAppInfosByCreatorResponse, error)
	CreateAppUser(context.Context, *CreateAppUserRequest) (*CreateAppUserResponse, error)
	GetAppUser(context.Context, *GetAppUserRequest) (*GetAppUserResponse, error)
	GetAppUsersByApp(context.Context, *GetAppUsersByAppRequest) (*GetAppUsersByAppResponse, error)
	UpdateAppUser(context.Context, *UpdateAppUserRequest) (*UpdateAppUserResponse, error)
	CreateAppUserSecret(context.Context, *CreateAppUserSecretRequest) (*CreateAppUserSecretResponse, error)
	GetAppUserSecret(context.Context, *GetAppUserSecretRequest) (*GetAppUserSecretResponse, error)
	GetAppUserSecretByAppUser(context.Context, *GetAppUserSecretByAppUserRequest) (*GetAppUserSecretByAppUserResponse, error)
	UpdateAppUserSecret(context.Context, *UpdateAppUserSecretRequest) (*UpdateAppUserSecretResponse, error)
	CreateAppUserExtra(context.Context, *CreateAppUserExtraRequest) (*CreateAppUserExtraResponse, error)
	GetAppUserExtra(context.Context, *GetAppUserExtraRequest) (*GetAppUserExtraResponse, error)
	GetAppUserExtraByAppUser(context.Context, *GetAppUserExtraByAppUserRequest) (*GetAppUserExtraByAppUserResponse, error)
	UpdateAppUserExtra(context.Context, *UpdateAppUserExtraRequest) (*UpdateAppUserExtraResponse, error)
	CreateBanAppUser(context.Context, *CreateBanAppUserRequest) (*CreateBanAppUserResponse, error)
	GetBanAppUser(context.Context, *GetBanAppUserRequest) (*GetBanAppUserResponse, error)
	GetBanAppUserByAppUser(context.Context, *GetBanAppUserByAppUserRequest) (*GetBanAppUserByAppUserResponse, error)
	UpdateBanAppUser(context.Context, *UpdateBanAppUserRequest) (*UpdateBanAppUserResponse, error)
	DeleteBanAppUser(context.Context, *DeleteBanAppUserRequest) (*DeleteBanAppUserResponse, error)
	CreateAppUserControl(context.Context, *CreateAppUserControlRequest) (*CreateAppUserControlResponse, error)
	GetAppUserControl(context.Context, *GetAppUserControlRequest) (*GetAppUserControlResponse, error)
	GetAppUserControlByAppUser(context.Context, *GetAppUserControlByAppUserRequest) (*GetAppUserControlByAppUserResponse, error)
	UpdateAppUserControl(context.Context, *UpdateAppUserControlRequest) (*UpdateAppUserControlResponse, error)
	CreateGenesisRole(context.Context, *CreateGenesisRoleRequest) (*CreateGenesisRoleResponse, error)
	GetGenesisRole(context.Context, *GetGenesisRoleRequest) (*GetGenesisRoleResponse, error)
	CreateGenesisRoleUser(context.Context, *CreateGenesisRoleUserRequest) (*CreateGenesisRoleUserResponse, error)
	CreateAppRole(context.Context, *CreateAppRoleRequest) (*CreateAppRoleResponse, error)
	GetAppRole(context.Context, *GetAppRoleRequest) (*GetAppRoleResponse, error)
	GetAppRoleByAppRole(context.Context, *GetAppRoleByAppRoleRequest) (*GetAppRoleByAppRoleResponse, error)
	GetAppRolesByApp(context.Context, *GetAppRolesByAppRequest) (*GetAppRolesByAppResponse, error)
	UpdateAppRole(context.Context, *UpdateAppRoleRequest) (*UpdateAppRoleResponse, error)
	CreateAppRoleUser(context.Context, *CreateAppRoleUserRequest) (*CreateAppRoleUserResponse, error)
	GetAppRoleUser(context.Context, *GetAppRoleUserRequest) (*GetAppRoleUserResponse, error)
	GetAppRoleUsersByAppRole(context.Context, *GetAppRoleUsersByAppRoleRequest) (*GetAppRoleUsersByAppRoleResponse, error)
	GetUserRolesByAppUser(context.Context, *GetUserRolesByAppUserRequest) (*GetUserRolesByAppUserResponse, error)
	DeleteAppRoleUser(context.Context, *DeleteAppRoleUserRequest) (*DeleteAppRoleUserResponse, error)
	GetAppUserInfo(context.Context, *GetAppUserInfoRequest) (*GetAppUserInfoResponse, error)
	GetAppUserInfos(context.Context, *GetAppUserInfosRequest) (*GetAppUserInfosResponse, error)
	GetAppUserInfosByApp(context.Context, *GetAppUserInfosByAppRequest) (*GetAppUserInfosByAppResponse, error)
	mustEmbedUnimplementedAppUserManagerServer()
}

// UnimplementedAppUserManagerServer must be embedded to have forward compatible implementations.
type UnimplementedAppUserManagerServer struct {
}

func (UnimplementedAppUserManagerServer) Version(context.Context, *emptypb.Empty) (*npool.VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedAppUserManagerServer) CreateAdminApps(context.Context, *CreateAdminAppsRequest) (*CreateAdminAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAdminApps not implemented")
}
func (UnimplementedAppUserManagerServer) GetAdminApps(context.Context, *GetAdminAppsRequest) (*GetAdminAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdminApps not implemented")
}
func (UnimplementedAppUserManagerServer) CreateApp(context.Context, *CreateAppRequest) (*CreateAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApp not implemented")
}
func (UnimplementedAppUserManagerServer) GetApp(context.Context, *GetAppRequest) (*GetAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApp not implemented")
}
func (UnimplementedAppUserManagerServer) GetApps(context.Context, *GetAppsRequest) (*GetAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApps not implemented")
}
func (UnimplementedAppUserManagerServer) GetAppsByCreator(context.Context, *GetAppsByCreatorRequest) (*GetAppsByCreatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppsByCreator not implemented")
}
func (UnimplementedAppUserManagerServer) UpdateApp(context.Context, *UpdateAppRequest) (*UpdateAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApp not implemented")
}
func (UnimplementedAppUserManagerServer) CreateAppControl(context.Context, *CreateAppControlRequest) (*CreateAppControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppControl not implemented")
}
func (UnimplementedAppUserManagerServer) GetAppControl(context.Context, *GetAppControlRequest) (*GetAppControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppControl not implemented")
}
func (UnimplementedAppUserManagerServer) GetAppControlByApp(context.Context, *GetAppControlByAppRequest) (*GetAppControlByAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppControlByApp not implemented")
}
func (UnimplementedAppUserManagerServer) UpdateAppControl(context.Context, *UpdateAppControlRequest) (*UpdateAppControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppControl not implemented")
}
func (UnimplementedAppUserManagerServer) CreateBanApp(context.Context, *CreateBanAppRequest) (*CreateBanAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBanApp not implemented")
}
func (UnimplementedAppUserManagerServer) GetBanApp(context.Context, *GetBanAppRequest) (*GetBanAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBanApp not implemented")
}
func (UnimplementedAppUserManagerServer) GetBanAppByApp(context.Context, *GetBanAppByAppRequest) (*GetBanAppByAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBanAppByApp not implemented")
}
func (UnimplementedAppUserManagerServer) UpdateBanApp(context.Context, *UpdateBanAppRequest) (*UpdateBanAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBanApp not implemented")
}
func (UnimplementedAppUserManagerServer) DeleteBanApp(context.Context, *DeleteBanAppRequest) (*DeleteBanAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBanApp not implemented")
}
func (UnimplementedAppUserManagerServer) GetAppInfo(context.Context, *GetAppInfoRequest) (*GetAppInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppInfo not implemented")
}
func (UnimplementedAppUserManagerServer) GetAppInfos(context.Context, *GetAppInfosRequest) (*GetAppInfosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppInfos not implemented")
}
func (UnimplementedAppUserManagerServer) GetAppInfosByCreator(context.Context, *GetAppInfosByCreatorRequest) (*GetAppInfosByCreatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppInfosByCreator not implemented")
}
func (UnimplementedAppUserManagerServer) CreateAppUser(context.Context, *CreateAppUserRequest) (*CreateAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppUser not implemented")
}
func (UnimplementedAppUserManagerServer) GetAppUser(context.Context, *GetAppUserRequest) (*GetAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppUser not implemented")
}
func (UnimplementedAppUserManagerServer) GetAppUsersByApp(context.Context, *GetAppUsersByAppRequest) (*GetAppUsersByAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppUsersByApp not implemented")
}
func (UnimplementedAppUserManagerServer) UpdateAppUser(context.Context, *UpdateAppUserRequest) (*UpdateAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppUser not implemented")
}
func (UnimplementedAppUserManagerServer) CreateAppUserSecret(context.Context, *CreateAppUserSecretRequest) (*CreateAppUserSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppUserSecret not implemented")
}
func (UnimplementedAppUserManagerServer) GetAppUserSecret(context.Context, *GetAppUserSecretRequest) (*GetAppUserSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppUserSecret not implemented")
}
func (UnimplementedAppUserManagerServer) GetAppUserSecretByAppUser(context.Context, *GetAppUserSecretByAppUserRequest) (*GetAppUserSecretByAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppUserSecretByAppUser not implemented")
}
func (UnimplementedAppUserManagerServer) UpdateAppUserSecret(context.Context, *UpdateAppUserSecretRequest) (*UpdateAppUserSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppUserSecret not implemented")
}
func (UnimplementedAppUserManagerServer) CreateAppUserExtra(context.Context, *CreateAppUserExtraRequest) (*CreateAppUserExtraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppUserExtra not implemented")
}
func (UnimplementedAppUserManagerServer) GetAppUserExtra(context.Context, *GetAppUserExtraRequest) (*GetAppUserExtraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppUserExtra not implemented")
}
func (UnimplementedAppUserManagerServer) GetAppUserExtraByAppUser(context.Context, *GetAppUserExtraByAppUserRequest) (*GetAppUserExtraByAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppUserExtraByAppUser not implemented")
}
func (UnimplementedAppUserManagerServer) UpdateAppUserExtra(context.Context, *UpdateAppUserExtraRequest) (*UpdateAppUserExtraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppUserExtra not implemented")
}
func (UnimplementedAppUserManagerServer) CreateBanAppUser(context.Context, *CreateBanAppUserRequest) (*CreateBanAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBanAppUser not implemented")
}
func (UnimplementedAppUserManagerServer) GetBanAppUser(context.Context, *GetBanAppUserRequest) (*GetBanAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBanAppUser not implemented")
}
func (UnimplementedAppUserManagerServer) GetBanAppUserByAppUser(context.Context, *GetBanAppUserByAppUserRequest) (*GetBanAppUserByAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBanAppUserByAppUser not implemented")
}
func (UnimplementedAppUserManagerServer) UpdateBanAppUser(context.Context, *UpdateBanAppUserRequest) (*UpdateBanAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBanAppUser not implemented")
}
func (UnimplementedAppUserManagerServer) DeleteBanAppUser(context.Context, *DeleteBanAppUserRequest) (*DeleteBanAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBanAppUser not implemented")
}
func (UnimplementedAppUserManagerServer) CreateAppUserControl(context.Context, *CreateAppUserControlRequest) (*CreateAppUserControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppUserControl not implemented")
}
func (UnimplementedAppUserManagerServer) GetAppUserControl(context.Context, *GetAppUserControlRequest) (*GetAppUserControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppUserControl not implemented")
}
func (UnimplementedAppUserManagerServer) GetAppUserControlByAppUser(context.Context, *GetAppUserControlByAppUserRequest) (*GetAppUserControlByAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppUserControlByAppUser not implemented")
}
func (UnimplementedAppUserManagerServer) UpdateAppUserControl(context.Context, *UpdateAppUserControlRequest) (*UpdateAppUserControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppUserControl not implemented")
}
func (UnimplementedAppUserManagerServer) CreateGenesisRole(context.Context, *CreateGenesisRoleRequest) (*CreateGenesisRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGenesisRole not implemented")
}
func (UnimplementedAppUserManagerServer) GetGenesisRole(context.Context, *GetGenesisRoleRequest) (*GetGenesisRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGenesisRole not implemented")
}
func (UnimplementedAppUserManagerServer) CreateGenesisRoleUser(context.Context, *CreateGenesisRoleUserRequest) (*CreateGenesisRoleUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGenesisRoleUser not implemented")
}
func (UnimplementedAppUserManagerServer) CreateAppRole(context.Context, *CreateAppRoleRequest) (*CreateAppRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppRole not implemented")
}
func (UnimplementedAppUserManagerServer) GetAppRole(context.Context, *GetAppRoleRequest) (*GetAppRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppRole not implemented")
}
func (UnimplementedAppUserManagerServer) GetAppRoleByAppRole(context.Context, *GetAppRoleByAppRoleRequest) (*GetAppRoleByAppRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppRoleByAppRole not implemented")
}
func (UnimplementedAppUserManagerServer) GetAppRolesByApp(context.Context, *GetAppRolesByAppRequest) (*GetAppRolesByAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppRolesByApp not implemented")
}
func (UnimplementedAppUserManagerServer) UpdateAppRole(context.Context, *UpdateAppRoleRequest) (*UpdateAppRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppRole not implemented")
}
func (UnimplementedAppUserManagerServer) CreateAppRoleUser(context.Context, *CreateAppRoleUserRequest) (*CreateAppRoleUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppRoleUser not implemented")
}
func (UnimplementedAppUserManagerServer) GetAppRoleUser(context.Context, *GetAppRoleUserRequest) (*GetAppRoleUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppRoleUser not implemented")
}
func (UnimplementedAppUserManagerServer) GetAppRoleUsersByAppRole(context.Context, *GetAppRoleUsersByAppRoleRequest) (*GetAppRoleUsersByAppRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppRoleUsersByAppRole not implemented")
}
func (UnimplementedAppUserManagerServer) GetUserRolesByAppUser(context.Context, *GetUserRolesByAppUserRequest) (*GetUserRolesByAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRolesByAppUser not implemented")
}
func (UnimplementedAppUserManagerServer) DeleteAppRoleUser(context.Context, *DeleteAppRoleUserRequest) (*DeleteAppRoleUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppRoleUser not implemented")
}
func (UnimplementedAppUserManagerServer) GetAppUserInfo(context.Context, *GetAppUserInfoRequest) (*GetAppUserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppUserInfo not implemented")
}
func (UnimplementedAppUserManagerServer) GetAppUserInfos(context.Context, *GetAppUserInfosRequest) (*GetAppUserInfosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppUserInfos not implemented")
}
func (UnimplementedAppUserManagerServer) GetAppUserInfosByApp(context.Context, *GetAppUserInfosByAppRequest) (*GetAppUserInfosByAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppUserInfosByApp not implemented")
}
func (UnimplementedAppUserManagerServer) mustEmbedUnimplementedAppUserManagerServer() {}

// UnsafeAppUserManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppUserManagerServer will
// result in compilation errors.
type UnsafeAppUserManagerServer interface {
	mustEmbedUnimplementedAppUserManagerServer()
}

func RegisterAppUserManagerServer(s grpc.ServiceRegistrar, srv AppUserManagerServer) {
	s.RegisterService(&AppUserManager_ServiceDesc, srv)
}

func _AppUserManager_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_CreateAdminApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAdminAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).CreateAdminApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/CreateAdminApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).CreateAdminApps(ctx, req.(*CreateAdminAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_GetAdminApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdminAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).GetAdminApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/GetAdminApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).GetAdminApps(ctx, req.(*GetAdminAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_CreateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).CreateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/CreateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).CreateApp(ctx, req.(*CreateAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_GetApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).GetApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/GetApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).GetApp(ctx, req.(*GetAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_GetApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).GetApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/GetApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).GetApps(ctx, req.(*GetAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_GetAppsByCreator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppsByCreatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).GetAppsByCreator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/GetAppsByCreator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).GetAppsByCreator(ctx, req.(*GetAppsByCreatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_UpdateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).UpdateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/UpdateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).UpdateApp(ctx, req.(*UpdateAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_CreateAppControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).CreateAppControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/CreateAppControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).CreateAppControl(ctx, req.(*CreateAppControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_GetAppControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).GetAppControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/GetAppControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).GetAppControl(ctx, req.(*GetAppControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_GetAppControlByApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppControlByAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).GetAppControlByApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/GetAppControlByApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).GetAppControlByApp(ctx, req.(*GetAppControlByAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_UpdateAppControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).UpdateAppControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/UpdateAppControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).UpdateAppControl(ctx, req.(*UpdateAppControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_CreateBanApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBanAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).CreateBanApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/CreateBanApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).CreateBanApp(ctx, req.(*CreateBanAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_GetBanApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBanAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).GetBanApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/GetBanApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).GetBanApp(ctx, req.(*GetBanAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_GetBanAppByApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBanAppByAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).GetBanAppByApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/GetBanAppByApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).GetBanAppByApp(ctx, req.(*GetBanAppByAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_UpdateBanApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBanAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).UpdateBanApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/UpdateBanApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).UpdateBanApp(ctx, req.(*UpdateBanAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_DeleteBanApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBanAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).DeleteBanApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/DeleteBanApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).DeleteBanApp(ctx, req.(*DeleteBanAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_GetAppInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).GetAppInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/GetAppInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).GetAppInfo(ctx, req.(*GetAppInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_GetAppInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppInfosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).GetAppInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/GetAppInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).GetAppInfos(ctx, req.(*GetAppInfosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_GetAppInfosByCreator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppInfosByCreatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).GetAppInfosByCreator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/GetAppInfosByCreator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).GetAppInfosByCreator(ctx, req.(*GetAppInfosByCreatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_CreateAppUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).CreateAppUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/CreateAppUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).CreateAppUser(ctx, req.(*CreateAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_GetAppUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).GetAppUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/GetAppUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).GetAppUser(ctx, req.(*GetAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_GetAppUsersByApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppUsersByAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).GetAppUsersByApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/GetAppUsersByApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).GetAppUsersByApp(ctx, req.(*GetAppUsersByAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_UpdateAppUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).UpdateAppUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/UpdateAppUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).UpdateAppUser(ctx, req.(*UpdateAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_CreateAppUserSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppUserSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).CreateAppUserSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/CreateAppUserSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).CreateAppUserSecret(ctx, req.(*CreateAppUserSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_GetAppUserSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppUserSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).GetAppUserSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/GetAppUserSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).GetAppUserSecret(ctx, req.(*GetAppUserSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_GetAppUserSecretByAppUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppUserSecretByAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).GetAppUserSecretByAppUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/GetAppUserSecretByAppUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).GetAppUserSecretByAppUser(ctx, req.(*GetAppUserSecretByAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_UpdateAppUserSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppUserSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).UpdateAppUserSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/UpdateAppUserSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).UpdateAppUserSecret(ctx, req.(*UpdateAppUserSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_CreateAppUserExtra_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppUserExtraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).CreateAppUserExtra(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/CreateAppUserExtra",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).CreateAppUserExtra(ctx, req.(*CreateAppUserExtraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_GetAppUserExtra_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppUserExtraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).GetAppUserExtra(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/GetAppUserExtra",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).GetAppUserExtra(ctx, req.(*GetAppUserExtraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_GetAppUserExtraByAppUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppUserExtraByAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).GetAppUserExtraByAppUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/GetAppUserExtraByAppUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).GetAppUserExtraByAppUser(ctx, req.(*GetAppUserExtraByAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_UpdateAppUserExtra_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppUserExtraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).UpdateAppUserExtra(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/UpdateAppUserExtra",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).UpdateAppUserExtra(ctx, req.(*UpdateAppUserExtraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_CreateBanAppUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBanAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).CreateBanAppUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/CreateBanAppUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).CreateBanAppUser(ctx, req.(*CreateBanAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_GetBanAppUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBanAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).GetBanAppUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/GetBanAppUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).GetBanAppUser(ctx, req.(*GetBanAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_GetBanAppUserByAppUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBanAppUserByAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).GetBanAppUserByAppUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/GetBanAppUserByAppUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).GetBanAppUserByAppUser(ctx, req.(*GetBanAppUserByAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_UpdateBanAppUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBanAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).UpdateBanAppUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/UpdateBanAppUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).UpdateBanAppUser(ctx, req.(*UpdateBanAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_DeleteBanAppUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBanAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).DeleteBanAppUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/DeleteBanAppUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).DeleteBanAppUser(ctx, req.(*DeleteBanAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_CreateAppUserControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppUserControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).CreateAppUserControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/CreateAppUserControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).CreateAppUserControl(ctx, req.(*CreateAppUserControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_GetAppUserControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppUserControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).GetAppUserControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/GetAppUserControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).GetAppUserControl(ctx, req.(*GetAppUserControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_GetAppUserControlByAppUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppUserControlByAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).GetAppUserControlByAppUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/GetAppUserControlByAppUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).GetAppUserControlByAppUser(ctx, req.(*GetAppUserControlByAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_UpdateAppUserControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppUserControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).UpdateAppUserControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/UpdateAppUserControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).UpdateAppUserControl(ctx, req.(*UpdateAppUserControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_CreateGenesisRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGenesisRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).CreateGenesisRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/CreateGenesisRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).CreateGenesisRole(ctx, req.(*CreateGenesisRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_GetGenesisRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGenesisRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).GetGenesisRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/GetGenesisRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).GetGenesisRole(ctx, req.(*GetGenesisRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_CreateGenesisRoleUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGenesisRoleUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).CreateGenesisRoleUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/CreateGenesisRoleUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).CreateGenesisRoleUser(ctx, req.(*CreateGenesisRoleUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_CreateAppRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).CreateAppRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/CreateAppRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).CreateAppRole(ctx, req.(*CreateAppRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_GetAppRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).GetAppRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/GetAppRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).GetAppRole(ctx, req.(*GetAppRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_GetAppRoleByAppRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppRoleByAppRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).GetAppRoleByAppRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/GetAppRoleByAppRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).GetAppRoleByAppRole(ctx, req.(*GetAppRoleByAppRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_GetAppRolesByApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppRolesByAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).GetAppRolesByApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/GetAppRolesByApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).GetAppRolesByApp(ctx, req.(*GetAppRolesByAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_UpdateAppRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).UpdateAppRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/UpdateAppRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).UpdateAppRole(ctx, req.(*UpdateAppRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_CreateAppRoleUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppRoleUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).CreateAppRoleUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/CreateAppRoleUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).CreateAppRoleUser(ctx, req.(*CreateAppRoleUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_GetAppRoleUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppRoleUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).GetAppRoleUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/GetAppRoleUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).GetAppRoleUser(ctx, req.(*GetAppRoleUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_GetAppRoleUsersByAppRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppRoleUsersByAppRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).GetAppRoleUsersByAppRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/GetAppRoleUsersByAppRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).GetAppRoleUsersByAppRole(ctx, req.(*GetAppRoleUsersByAppRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_GetUserRolesByAppUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRolesByAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).GetUserRolesByAppUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/GetUserRolesByAppUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).GetUserRolesByAppUser(ctx, req.(*GetUserRolesByAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_DeleteAppRoleUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppRoleUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).DeleteAppRoleUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/DeleteAppRoleUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).DeleteAppRoleUser(ctx, req.(*DeleteAppRoleUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_GetAppUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).GetAppUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/GetAppUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).GetAppUserInfo(ctx, req.(*GetAppUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_GetAppUserInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppUserInfosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).GetAppUserInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/GetAppUserInfos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).GetAppUserInfos(ctx, req.(*GetAppUserInfosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_GetAppUserInfosByApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppUserInfosByAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).GetAppUserInfosByApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/GetAppUserInfosByApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).GetAppUserInfosByApp(ctx, req.(*GetAppUserInfosByAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppUserManager_ServiceDesc is the grpc.ServiceDesc for AppUserManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppUserManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app.user.manager.v1.AppUserManager",
	HandlerType: (*AppUserManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _AppUserManager_Version_Handler,
		},
		{
			MethodName: "CreateAdminApps",
			Handler:    _AppUserManager_CreateAdminApps_Handler,
		},
		{
			MethodName: "GetAdminApps",
			Handler:    _AppUserManager_GetAdminApps_Handler,
		},
		{
			MethodName: "CreateApp",
			Handler:    _AppUserManager_CreateApp_Handler,
		},
		{
			MethodName: "GetApp",
			Handler:    _AppUserManager_GetApp_Handler,
		},
		{
			MethodName: "GetApps",
			Handler:    _AppUserManager_GetApps_Handler,
		},
		{
			MethodName: "GetAppsByCreator",
			Handler:    _AppUserManager_GetAppsByCreator_Handler,
		},
		{
			MethodName: "UpdateApp",
			Handler:    _AppUserManager_UpdateApp_Handler,
		},
		{
			MethodName: "CreateAppControl",
			Handler:    _AppUserManager_CreateAppControl_Handler,
		},
		{
			MethodName: "GetAppControl",
			Handler:    _AppUserManager_GetAppControl_Handler,
		},
		{
			MethodName: "GetAppControlByApp",
			Handler:    _AppUserManager_GetAppControlByApp_Handler,
		},
		{
			MethodName: "UpdateAppControl",
			Handler:    _AppUserManager_UpdateAppControl_Handler,
		},
		{
			MethodName: "CreateBanApp",
			Handler:    _AppUserManager_CreateBanApp_Handler,
		},
		{
			MethodName: "GetBanApp",
			Handler:    _AppUserManager_GetBanApp_Handler,
		},
		{
			MethodName: "GetBanAppByApp",
			Handler:    _AppUserManager_GetBanAppByApp_Handler,
		},
		{
			MethodName: "UpdateBanApp",
			Handler:    _AppUserManager_UpdateBanApp_Handler,
		},
		{
			MethodName: "DeleteBanApp",
			Handler:    _AppUserManager_DeleteBanApp_Handler,
		},
		{
			MethodName: "GetAppInfo",
			Handler:    _AppUserManager_GetAppInfo_Handler,
		},
		{
			MethodName: "GetAppInfos",
			Handler:    _AppUserManager_GetAppInfos_Handler,
		},
		{
			MethodName: "GetAppInfosByCreator",
			Handler:    _AppUserManager_GetAppInfosByCreator_Handler,
		},
		{
			MethodName: "CreateAppUser",
			Handler:    _AppUserManager_CreateAppUser_Handler,
		},
		{
			MethodName: "GetAppUser",
			Handler:    _AppUserManager_GetAppUser_Handler,
		},
		{
			MethodName: "GetAppUsersByApp",
			Handler:    _AppUserManager_GetAppUsersByApp_Handler,
		},
		{
			MethodName: "UpdateAppUser",
			Handler:    _AppUserManager_UpdateAppUser_Handler,
		},
		{
			MethodName: "CreateAppUserSecret",
			Handler:    _AppUserManager_CreateAppUserSecret_Handler,
		},
		{
			MethodName: "GetAppUserSecret",
			Handler:    _AppUserManager_GetAppUserSecret_Handler,
		},
		{
			MethodName: "GetAppUserSecretByAppUser",
			Handler:    _AppUserManager_GetAppUserSecretByAppUser_Handler,
		},
		{
			MethodName: "UpdateAppUserSecret",
			Handler:    _AppUserManager_UpdateAppUserSecret_Handler,
		},
		{
			MethodName: "CreateAppUserExtra",
			Handler:    _AppUserManager_CreateAppUserExtra_Handler,
		},
		{
			MethodName: "GetAppUserExtra",
			Handler:    _AppUserManager_GetAppUserExtra_Handler,
		},
		{
			MethodName: "GetAppUserExtraByAppUser",
			Handler:    _AppUserManager_GetAppUserExtraByAppUser_Handler,
		},
		{
			MethodName: "UpdateAppUserExtra",
			Handler:    _AppUserManager_UpdateAppUserExtra_Handler,
		},
		{
			MethodName: "CreateBanAppUser",
			Handler:    _AppUserManager_CreateBanAppUser_Handler,
		},
		{
			MethodName: "GetBanAppUser",
			Handler:    _AppUserManager_GetBanAppUser_Handler,
		},
		{
			MethodName: "GetBanAppUserByAppUser",
			Handler:    _AppUserManager_GetBanAppUserByAppUser_Handler,
		},
		{
			MethodName: "UpdateBanAppUser",
			Handler:    _AppUserManager_UpdateBanAppUser_Handler,
		},
		{
			MethodName: "DeleteBanAppUser",
			Handler:    _AppUserManager_DeleteBanAppUser_Handler,
		},
		{
			MethodName: "CreateAppUserControl",
			Handler:    _AppUserManager_CreateAppUserControl_Handler,
		},
		{
			MethodName: "GetAppUserControl",
			Handler:    _AppUserManager_GetAppUserControl_Handler,
		},
		{
			MethodName: "GetAppUserControlByAppUser",
			Handler:    _AppUserManager_GetAppUserControlByAppUser_Handler,
		},
		{
			MethodName: "UpdateAppUserControl",
			Handler:    _AppUserManager_UpdateAppUserControl_Handler,
		},
		{
			MethodName: "CreateGenesisRole",
			Handler:    _AppUserManager_CreateGenesisRole_Handler,
		},
		{
			MethodName: "GetGenesisRole",
			Handler:    _AppUserManager_GetGenesisRole_Handler,
		},
		{
			MethodName: "CreateGenesisRoleUser",
			Handler:    _AppUserManager_CreateGenesisRoleUser_Handler,
		},
		{
			MethodName: "CreateAppRole",
			Handler:    _AppUserManager_CreateAppRole_Handler,
		},
		{
			MethodName: "GetAppRole",
			Handler:    _AppUserManager_GetAppRole_Handler,
		},
		{
			MethodName: "GetAppRoleByAppRole",
			Handler:    _AppUserManager_GetAppRoleByAppRole_Handler,
		},
		{
			MethodName: "GetAppRolesByApp",
			Handler:    _AppUserManager_GetAppRolesByApp_Handler,
		},
		{
			MethodName: "UpdateAppRole",
			Handler:    _AppUserManager_UpdateAppRole_Handler,
		},
		{
			MethodName: "CreateAppRoleUser",
			Handler:    _AppUserManager_CreateAppRoleUser_Handler,
		},
		{
			MethodName: "GetAppRoleUser",
			Handler:    _AppUserManager_GetAppRoleUser_Handler,
		},
		{
			MethodName: "GetAppRoleUsersByAppRole",
			Handler:    _AppUserManager_GetAppRoleUsersByAppRole_Handler,
		},
		{
			MethodName: "GetUserRolesByAppUser",
			Handler:    _AppUserManager_GetUserRolesByAppUser_Handler,
		},
		{
			MethodName: "DeleteAppRoleUser",
			Handler:    _AppUserManager_DeleteAppRoleUser_Handler,
		},
		{
			MethodName: "GetAppUserInfo",
			Handler:    _AppUserManager_GetAppUserInfo_Handler,
		},
		{
			MethodName: "GetAppUserInfos",
			Handler:    _AppUserManager_GetAppUserInfos_Handler,
		},
		{
			MethodName: "GetAppUserInfosByApp",
			Handler:    _AppUserManager_GetAppUserInfosByApp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/appusermgr/appusermgr.proto",
}
