// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: npool/sphinxproxy/sphinxproxy.proto

package sphinxproxy

import (
	sphinxplugin "github.com/NpoolPlatform/message/npool/sphinxplugin"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TransactionType int32

const (
	TransactionType_Invalid        TransactionType = 0
	TransactionType_WalletNew      TransactionType = 1 // proxy -> sign
	TransactionType_TransactionNew TransactionType = 2
	TransactionType_Signature      TransactionType = 3 // proxy -> sign
	TransactionType_Balance        TransactionType = 4 // proxy -> plugin
	TransactionType_PreSign        TransactionType = 5 // proxy -> pluign get nonce
	TransactionType_Broadcast      TransactionType = 6 // proxy -> plugin mpool push
	TransactionType_RegisterCoin   TransactionType = 7 // plugin -> proxy
)

// Enum value maps for TransactionType.
var (
	TransactionType_name = map[int32]string{
		0: "Invalid",
		1: "WalletNew",
		2: "TransactionNew",
		3: "Signature",
		4: "Balance",
		5: "PreSign",
		6: "Broadcast",
		7: "RegisterCoin",
	}
	TransactionType_value = map[string]int32{
		"Invalid":        0,
		"WalletNew":      1,
		"TransactionNew": 2,
		"Signature":      3,
		"Balance":        4,
		"PreSign":        5,
		"Broadcast":      6,
		"RegisterCoin":   7,
	}
)

func (x TransactionType) Enum() *TransactionType {
	p := new(TransactionType)
	*p = x
	return p
}

func (x TransactionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionType) Descriptor() protoreflect.EnumDescriptor {
	return file_npool_sphinxproxy_sphinxproxy_proto_enumTypes[0].Descriptor()
}

func (TransactionType) Type() protoreflect.EnumType {
	return &file_npool_sphinxproxy_sphinxproxy_proto_enumTypes[0]
}

func (x TransactionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionType.Descriptor instead.
func (TransactionType) EnumDescriptor() ([]byte, []int) {
	return file_npool_sphinxproxy_sphinxproxy_proto_rawDescGZIP(), []int{0}
}

type GetBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,100,opt,name=Name,proto3" json:"Name,omitempty"`
	Address string `protobuf:"bytes,110,opt,name=Address,proto3" json:"Address,omitempty"`
}

func (x *GetBalanceRequest) Reset() {
	*x = GetBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalanceRequest) ProtoMessage() {}

func (x *GetBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalanceRequest.ProtoReflect.Descriptor instead.
func (*GetBalanceRequest) Descriptor() ([]byte, []int) {
	return file_npool_sphinxproxy_sphinxproxy_proto_rawDescGZIP(), []int{0}
}

func (x *GetBalanceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetBalanceRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type BalanceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance    float64 `protobuf:"fixed64,100,opt,name=Balance,proto3" json:"Balance,omitempty"`
	BalanceStr string  `protobuf:"bytes,110,opt,name=BalanceStr,proto3" json:"BalanceStr,omitempty"`
}

func (x *BalanceInfo) Reset() {
	*x = BalanceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalanceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceInfo) ProtoMessage() {}

func (x *BalanceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceInfo.ProtoReflect.Descriptor instead.
func (*BalanceInfo) Descriptor() ([]byte, []int) {
	return file_npool_sphinxproxy_sphinxproxy_proto_rawDescGZIP(), []int{1}
}

func (x *BalanceInfo) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *BalanceInfo) GetBalanceStr() string {
	if x != nil {
		return x.BalanceStr
	}
	return ""
}

type GetBalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *BalanceInfo `protobuf:"bytes,100,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetBalanceResponse) Reset() {
	*x = GetBalanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalanceResponse) ProtoMessage() {}

func (x *GetBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalanceResponse.ProtoReflect.Descriptor instead.
func (*GetBalanceResponse) Descriptor() ([]byte, []int) {
	return file_npool_sphinxproxy_sphinxproxy_proto_rawDescGZIP(), []int{2}
}

func (x *GetBalanceResponse) GetInfo() *BalanceInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,100,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *CreateWalletRequest) Reset() {
	*x = CreateWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWalletRequest) ProtoMessage() {}

func (x *CreateWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWalletRequest.ProtoReflect.Descriptor instead.
func (*CreateWalletRequest) Descriptor() ([]byte, []int) {
	return file_npool_sphinxproxy_sphinxproxy_proto_rawDescGZIP(), []int{3}
}

func (x *CreateWalletRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type WalletInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,100,opt,name=Address,proto3" json:"Address,omitempty"` // TODO sign type
}

func (x *WalletInfo) Reset() {
	*x = WalletInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletInfo) ProtoMessage() {}

func (x *WalletInfo) ProtoReflect() protoreflect.Message {
	mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletInfo.ProtoReflect.Descriptor instead.
func (*WalletInfo) Descriptor() ([]byte, []int) {
	return file_npool_sphinxproxy_sphinxproxy_proto_rawDescGZIP(), []int{4}
}

func (x *WalletInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type CreateWalletResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *WalletInfo `protobuf:"bytes,100,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateWalletResponse) Reset() {
	*x = CreateWalletResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWalletResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWalletResponse) ProtoMessage() {}

func (x *CreateWalletResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWalletResponse.ProtoReflect.Descriptor instead.
func (*CreateWalletResponse) Descriptor() ([]byte, []int) {
	return file_npool_sphinxproxy_sphinxproxy_proto_rawDescGZIP(), []int{5}
}

func (x *CreateWalletResponse) GetInfo() *WalletInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string  `protobuf:"bytes,100,opt,name=Name,proto3" json:"Name,omitempty"`
	TransactionID string  `protobuf:"bytes,110,opt,name=TransactionID,proto3" json:"TransactionID,omitempty"`
	From          string  `protobuf:"bytes,130,opt,name=From,proto3" json:"From,omitempty"`
	To            string  `protobuf:"bytes,140,opt,name=To,proto3" json:"To,omitempty"`
	Value         float64 `protobuf:"fixed64,120,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *CreateTransactionRequest) Reset() {
	*x = CreateTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransactionRequest) ProtoMessage() {}

func (x *CreateTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransactionRequest.ProtoReflect.Descriptor instead.
func (*CreateTransactionRequest) Descriptor() ([]byte, []int) {
	return file_npool_sphinxproxy_sphinxproxy_proto_rawDescGZIP(), []int{6}
}

func (x *CreateTransactionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateTransactionRequest) GetTransactionID() string {
	if x != nil {
		return x.TransactionID
	}
	return ""
}

func (x *CreateTransactionRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *CreateTransactionRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *CreateTransactionRequest) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type CreateTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateTransactionResponse) Reset() {
	*x = CreateTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransactionResponse) ProtoMessage() {}

func (x *CreateTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransactionResponse.ProtoReflect.Descriptor instead.
func (*CreateTransactionResponse) Descriptor() ([]byte, []int) {
	return file_npool_sphinxproxy_sphinxproxy_proto_rawDescGZIP(), []int{7}
}

type GetTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionID string `protobuf:"bytes,100,opt,name=TransactionID,proto3" json:"TransactionID,omitempty"`
}

func (x *GetTransactionRequest) Reset() {
	*x = GetTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionRequest) ProtoMessage() {}

func (x *GetTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionRequest) Descriptor() ([]byte, []int) {
	return file_npool_sphinxproxy_sphinxproxy_proto_rawDescGZIP(), []int{8}
}

func (x *GetTransactionRequest) GetTransactionID() string {
	if x != nil {
		return x.TransactionID
	}
	return ""
}

type GetTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetTransactionResponse) Reset() {
	*x = GetTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionResponse) ProtoMessage() {}

func (x *GetTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionResponse.ProtoReflect.Descriptor instead.
func (*GetTransactionResponse) Descriptor() ([]byte, []int) {
	return file_npool_sphinxproxy_sphinxproxy_proto_rawDescGZIP(), []int{9}
}

// RegisterCoin ..
type ProxyPluginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinType        sphinxplugin.CoinType         `protobuf:"varint,100,opt,name=CoinType,proto3,enum=sphinx.plugin.v1.CoinType" json:"CoinType,omitempty"`
	TransactionType TransactionType               `protobuf:"varint,110,opt,name=TransactionType,proto3,enum=sphinx.proxy.v1.TransactionType" json:"TransactionType,omitempty"`
	TransactionID   string                        `protobuf:"bytes,120,opt,name=TransactionID,proto3" json:"TransactionID,omitempty"`
	Nonce           uint64                        `protobuf:"varint,130,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	CID             string                        `protobuf:"bytes,140,opt,name=CID,proto3" json:"CID,omitempty"`
	Balance         float64                       `protobuf:"fixed64,150,opt,name=Balance,proto3" json:"Balance,omitempty"`
	BalanceStr      string                        `protobuf:"bytes,160,opt,name=BalanceStr,proto3" json:"BalanceStr,omitempty"`
	Message         *sphinxplugin.UnsignedMessage `protobuf:"bytes,170,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *ProxyPluginResponse) Reset() {
	*x = ProxyPluginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyPluginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyPluginResponse) ProtoMessage() {}

func (x *ProxyPluginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyPluginResponse.ProtoReflect.Descriptor instead.
func (*ProxyPluginResponse) Descriptor() ([]byte, []int) {
	return file_npool_sphinxproxy_sphinxproxy_proto_rawDescGZIP(), []int{10}
}

func (x *ProxyPluginResponse) GetCoinType() sphinxplugin.CoinType {
	if x != nil {
		return x.CoinType
	}
	return sphinxplugin.CoinType(0)
}

func (x *ProxyPluginResponse) GetTransactionType() TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return TransactionType_Invalid
}

func (x *ProxyPluginResponse) GetTransactionID() string {
	if x != nil {
		return x.TransactionID
	}
	return ""
}

func (x *ProxyPluginResponse) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *ProxyPluginResponse) GetCID() string {
	if x != nil {
		return x.CID
	}
	return ""
}

func (x *ProxyPluginResponse) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *ProxyPluginResponse) GetBalanceStr() string {
	if x != nil {
		return x.BalanceStr
	}
	return ""
}

func (x *ProxyPluginResponse) GetMessage() *sphinxplugin.UnsignedMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

// MpoolGetNonce WalletBalance MpoolPush ..
type ProxyPluginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinType        sphinxplugin.CoinType         `protobuf:"varint,100,opt,name=CoinType,proto3,enum=sphinx.plugin.v1.CoinType" json:"CoinType,omitempty"`
	TransactionType TransactionType               `protobuf:"varint,110,opt,name=TransactionType,proto3,enum=sphinx.proxy.v1.TransactionType" json:"TransactionType,omitempty"`
	TransactionID   string                        `protobuf:"bytes,120,opt,name=TransactionID,proto3" json:"TransactionID,omitempty"`
	Address         string                        `protobuf:"bytes,130,opt,name=Address,proto3" json:"Address,omitempty"`
	Message         *sphinxplugin.UnsignedMessage `protobuf:"bytes,140,opt,name=Message,proto3" json:"Message,omitempty"`
	Signature       *sphinxplugin.Signature       `protobuf:"bytes,150,opt,name=Signature,proto3" json:"Signature,omitempty"`
}

func (x *ProxyPluginRequest) Reset() {
	*x = ProxyPluginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyPluginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyPluginRequest) ProtoMessage() {}

func (x *ProxyPluginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyPluginRequest.ProtoReflect.Descriptor instead.
func (*ProxyPluginRequest) Descriptor() ([]byte, []int) {
	return file_npool_sphinxproxy_sphinxproxy_proto_rawDescGZIP(), []int{11}
}

func (x *ProxyPluginRequest) GetCoinType() sphinxplugin.CoinType {
	if x != nil {
		return x.CoinType
	}
	return sphinxplugin.CoinType(0)
}

func (x *ProxyPluginRequest) GetTransactionType() TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return TransactionType_Invalid
}

func (x *ProxyPluginRequest) GetTransactionID() string {
	if x != nil {
		return x.TransactionID
	}
	return ""
}

func (x *ProxyPluginRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ProxyPluginRequest) GetMessage() *sphinxplugin.UnsignedMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ProxyPluginRequest) GetSignature() *sphinxplugin.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

// Sign WalletNew ..
type ProxySignRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinType        sphinxplugin.CoinType         `protobuf:"varint,100,opt,name=CoinType,proto3,enum=sphinx.plugin.v1.CoinType" json:"CoinType,omitempty"`
	TransactionType TransactionType               `protobuf:"varint,110,opt,name=TransactionType,proto3,enum=sphinx.proxy.v1.TransactionType" json:"TransactionType,omitempty"`
	TransactionID   string                        `protobuf:"bytes,120,opt,name=TransactionID,proto3" json:"TransactionID,omitempty"`
	Message         *sphinxplugin.UnsignedMessage `protobuf:"bytes,130,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *ProxySignRequest) Reset() {
	*x = ProxySignRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxySignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxySignRequest) ProtoMessage() {}

func (x *ProxySignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxySignRequest.ProtoReflect.Descriptor instead.
func (*ProxySignRequest) Descriptor() ([]byte, []int) {
	return file_npool_sphinxproxy_sphinxproxy_proto_rawDescGZIP(), []int{12}
}

func (x *ProxySignRequest) GetCoinType() sphinxplugin.CoinType {
	if x != nil {
		return x.CoinType
	}
	return sphinxplugin.CoinType(0)
}

func (x *ProxySignRequest) GetTransactionType() TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return TransactionType_Invalid
}

func (x *ProxySignRequest) GetTransactionID() string {
	if x != nil {
		return x.TransactionID
	}
	return ""
}

func (x *ProxySignRequest) GetMessage() *sphinxplugin.UnsignedMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type ProxySignResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinType        sphinxplugin.CoinType  `protobuf:"varint,100,opt,name=CoinType,proto3,enum=sphinx.plugin.v1.CoinType" json:"CoinType,omitempty"`
	TransactionType TransactionType        `protobuf:"varint,110,opt,name=TransactionType,proto3,enum=sphinx.proxy.v1.TransactionType" json:"TransactionType,omitempty"`
	TransactionID   string                 `protobuf:"bytes,120,opt,name=TransactionID,proto3" json:"TransactionID,omitempty"`
	Info            *ProxySignResponseInfo `protobuf:"bytes,130,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ProxySignResponse) Reset() {
	*x = ProxySignResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxySignResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxySignResponse) ProtoMessage() {}

func (x *ProxySignResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxySignResponse.ProtoReflect.Descriptor instead.
func (*ProxySignResponse) Descriptor() ([]byte, []int) {
	return file_npool_sphinxproxy_sphinxproxy_proto_rawDescGZIP(), []int{13}
}

func (x *ProxySignResponse) GetCoinType() sphinxplugin.CoinType {
	if x != nil {
		return x.CoinType
	}
	return sphinxplugin.CoinType(0)
}

func (x *ProxySignResponse) GetTransactionType() TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return TransactionType_Invalid
}

func (x *ProxySignResponse) GetTransactionID() string {
	if x != nil {
		return x.TransactionID
	}
	return ""
}

func (x *ProxySignResponse) GetInfo() *ProxySignResponseInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type ProxySignResponseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address   string                        `protobuf:"bytes,100,opt,name=Address,proto3" json:"Address,omitempty"` // create new account address
	Message   *sphinxplugin.UnsignedMessage `protobuf:"bytes,110,opt,name=Message,proto3" json:"Message,omitempty"`
	Signature *sphinxplugin.Signature       `protobuf:"bytes,120,opt,name=Signature,proto3" json:"Signature,omitempty"`
}

func (x *ProxySignResponseInfo) Reset() {
	*x = ProxySignResponseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxySignResponseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxySignResponseInfo) ProtoMessage() {}

func (x *ProxySignResponseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxySignResponseInfo.ProtoReflect.Descriptor instead.
func (*ProxySignResponseInfo) Descriptor() ([]byte, []int) {
	return file_npool_sphinxproxy_sphinxproxy_proto_rawDescGZIP(), []int{14}
}

func (x *ProxySignResponseInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ProxySignResponseInfo) GetMessage() *sphinxplugin.UnsignedMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ProxySignResponseInfo) GetSignature() *sphinxplugin.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

var File_npool_sphinxproxy_sphinxproxy_proto protoreflect.FileDescriptor

var file_npool_sphinxproxy_sphinxproxy_proto_rawDesc = []byte{
	0x0a, 0x23, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2f, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x25, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x73, 0x70,
	0x68, 0x69, 0x6e, 0x78, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x73, 0x70, 0x68, 0x69, 0x6e,
	0x78, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x41, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x22, 0x47, 0x0a, 0x0b, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x18, 0x0a, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x72, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x72, 0x22, 0x46, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x30, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x29, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x26, 0x0a, 0x0a,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x47, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x70, 0x68,
	0x69, 0x6e, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x90, 0x01,
	0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x6e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x13, 0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x82, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x0f, 0x0a, 0x02, 0x54, 0x6f, 0x18,
	0x8c, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x54, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x78, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x1b, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x18, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xe3, 0x02, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36,
	0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1a, 0x2e, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x43, 0x6f,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x15, 0x0a, 0x05, 0x4e, 0x6f, 0x6e, 0x63,
	0x65, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x12,
	0x11, 0x0a, 0x03, 0x43, 0x49, 0x44, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x43,
	0x49, 0x44, 0x12, 0x19, 0x0a, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x96, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a,
	0x0a, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x72, 0x18, 0xa0, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x72, 0x12, 0x3c,
	0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xd3, 0x02, 0x0a,
	0x12, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x0f, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x6e,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x19, 0x0a,
	0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x70, 0x68,
	0x69, 0x6e, 0x78, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x70, 0x68,
	0x69, 0x6e, 0x78, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x22, 0xfa, 0x01, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x69, 0x67, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x70, 0x68, 0x69,
	0x6e, 0x78, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x4a, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x73, 0x70, 0x68, 0x69, 0x6e,
	0x78, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x78, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x3c, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x82, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0xfa, 0x01, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a,
	0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x6e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12,
	0x3b, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xa9, 0x01, 0x0a,
	0x15, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x3b, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x6e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a,
	0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2a, 0x8b, 0x01, 0x0a, 0x0f, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x77, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x53,
	0x69, 0x67, 0x6e, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x69, 0x6e, 0x10, 0x07, 0x32, 0xd2, 0x04, 0x0a, 0x0b, 0x53, 0x70, 0x68, 0x69, 0x6e,
	0x78, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x57, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x22, 0x2e, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x70, 0x68, 0x69, 0x6e,
	0x78, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5d, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12,
	0x24, 0x2e, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c,
	0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26,
	0x2e, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x5e, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x12, 0x24, 0x2e, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x23, 0x2e, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x00, 0x28, 0x01, 0x30,
	0x01, 0x12, 0x58, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x22,
	0x2e, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x1a, 0x21, 0x2e, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x34, 0x5a, 0x32, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f,
	0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_sphinxproxy_sphinxproxy_proto_rawDescOnce sync.Once
	file_npool_sphinxproxy_sphinxproxy_proto_rawDescData = file_npool_sphinxproxy_sphinxproxy_proto_rawDesc
)

func file_npool_sphinxproxy_sphinxproxy_proto_rawDescGZIP() []byte {
	file_npool_sphinxproxy_sphinxproxy_proto_rawDescOnce.Do(func() {
		file_npool_sphinxproxy_sphinxproxy_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_sphinxproxy_sphinxproxy_proto_rawDescData)
	})
	return file_npool_sphinxproxy_sphinxproxy_proto_rawDescData
}

var file_npool_sphinxproxy_sphinxproxy_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_npool_sphinxproxy_sphinxproxy_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_npool_sphinxproxy_sphinxproxy_proto_goTypes = []interface{}{
	(TransactionType)(0),                 // 0: sphinx.proxy.v1.TransactionType
	(*GetBalanceRequest)(nil),            // 1: sphinx.proxy.v1.GetBalanceRequest
	(*BalanceInfo)(nil),                  // 2: sphinx.proxy.v1.BalanceInfo
	(*GetBalanceResponse)(nil),           // 3: sphinx.proxy.v1.GetBalanceResponse
	(*CreateWalletRequest)(nil),          // 4: sphinx.proxy.v1.CreateWalletRequest
	(*WalletInfo)(nil),                   // 5: sphinx.proxy.v1.WalletInfo
	(*CreateWalletResponse)(nil),         // 6: sphinx.proxy.v1.CreateWalletResponse
	(*CreateTransactionRequest)(nil),     // 7: sphinx.proxy.v1.CreateTransactionRequest
	(*CreateTransactionResponse)(nil),    // 8: sphinx.proxy.v1.CreateTransactionResponse
	(*GetTransactionRequest)(nil),        // 9: sphinx.proxy.v1.GetTransactionRequest
	(*GetTransactionResponse)(nil),       // 10: sphinx.proxy.v1.GetTransactionResponse
	(*ProxyPluginResponse)(nil),          // 11: sphinx.proxy.v1.ProxyPluginResponse
	(*ProxyPluginRequest)(nil),           // 12: sphinx.proxy.v1.ProxyPluginRequest
	(*ProxySignRequest)(nil),             // 13: sphinx.proxy.v1.ProxySignRequest
	(*ProxySignResponse)(nil),            // 14: sphinx.proxy.v1.ProxySignResponse
	(*ProxySignResponseInfo)(nil),        // 15: sphinx.proxy.v1.ProxySignResponseInfo
	(sphinxplugin.CoinType)(0),           // 16: sphinx.plugin.v1.CoinType
	(*sphinxplugin.UnsignedMessage)(nil), // 17: sphinx.plugin.v1.UnsignedMessage
	(*sphinxplugin.Signature)(nil),       // 18: sphinx.plugin.v1.Signature
}
var file_npool_sphinxproxy_sphinxproxy_proto_depIdxs = []int32{
	2,  // 0: sphinx.proxy.v1.GetBalanceResponse.Info:type_name -> sphinx.proxy.v1.BalanceInfo
	5,  // 1: sphinx.proxy.v1.CreateWalletResponse.Info:type_name -> sphinx.proxy.v1.WalletInfo
	16, // 2: sphinx.proxy.v1.ProxyPluginResponse.CoinType:type_name -> sphinx.plugin.v1.CoinType
	0,  // 3: sphinx.proxy.v1.ProxyPluginResponse.TransactionType:type_name -> sphinx.proxy.v1.TransactionType
	17, // 4: sphinx.proxy.v1.ProxyPluginResponse.Message:type_name -> sphinx.plugin.v1.UnsignedMessage
	16, // 5: sphinx.proxy.v1.ProxyPluginRequest.CoinType:type_name -> sphinx.plugin.v1.CoinType
	0,  // 6: sphinx.proxy.v1.ProxyPluginRequest.TransactionType:type_name -> sphinx.proxy.v1.TransactionType
	17, // 7: sphinx.proxy.v1.ProxyPluginRequest.Message:type_name -> sphinx.plugin.v1.UnsignedMessage
	18, // 8: sphinx.proxy.v1.ProxyPluginRequest.Signature:type_name -> sphinx.plugin.v1.Signature
	16, // 9: sphinx.proxy.v1.ProxySignRequest.CoinType:type_name -> sphinx.plugin.v1.CoinType
	0,  // 10: sphinx.proxy.v1.ProxySignRequest.TransactionType:type_name -> sphinx.proxy.v1.TransactionType
	17, // 11: sphinx.proxy.v1.ProxySignRequest.Message:type_name -> sphinx.plugin.v1.UnsignedMessage
	16, // 12: sphinx.proxy.v1.ProxySignResponse.CoinType:type_name -> sphinx.plugin.v1.CoinType
	0,  // 13: sphinx.proxy.v1.ProxySignResponse.TransactionType:type_name -> sphinx.proxy.v1.TransactionType
	15, // 14: sphinx.proxy.v1.ProxySignResponse.Info:type_name -> sphinx.proxy.v1.ProxySignResponseInfo
	17, // 15: sphinx.proxy.v1.ProxySignResponseInfo.Message:type_name -> sphinx.plugin.v1.UnsignedMessage
	18, // 16: sphinx.proxy.v1.ProxySignResponseInfo.Signature:type_name -> sphinx.plugin.v1.Signature
	1,  // 17: sphinx.proxy.v1.SphinxProxy.GetBalance:input_type -> sphinx.proxy.v1.GetBalanceRequest
	4,  // 18: sphinx.proxy.v1.SphinxProxy.CreateWallet:input_type -> sphinx.proxy.v1.CreateWalletRequest
	7,  // 19: sphinx.proxy.v1.SphinxProxy.CreateTransaction:input_type -> sphinx.proxy.v1.CreateTransactionRequest
	9,  // 20: sphinx.proxy.v1.SphinxProxy.GetTransaction:input_type -> sphinx.proxy.v1.GetTransactionRequest
	11, // 21: sphinx.proxy.v1.SphinxProxy.ProxyPlugin:input_type -> sphinx.proxy.v1.ProxyPluginResponse
	14, // 22: sphinx.proxy.v1.SphinxProxy.ProxySign:input_type -> sphinx.proxy.v1.ProxySignResponse
	3,  // 23: sphinx.proxy.v1.SphinxProxy.GetBalance:output_type -> sphinx.proxy.v1.GetBalanceResponse
	6,  // 24: sphinx.proxy.v1.SphinxProxy.CreateWallet:output_type -> sphinx.proxy.v1.CreateWalletResponse
	8,  // 25: sphinx.proxy.v1.SphinxProxy.CreateTransaction:output_type -> sphinx.proxy.v1.CreateTransactionResponse
	10, // 26: sphinx.proxy.v1.SphinxProxy.GetTransaction:output_type -> sphinx.proxy.v1.GetTransactionResponse
	12, // 27: sphinx.proxy.v1.SphinxProxy.ProxyPlugin:output_type -> sphinx.proxy.v1.ProxyPluginRequest
	13, // 28: sphinx.proxy.v1.SphinxProxy.ProxySign:output_type -> sphinx.proxy.v1.ProxySignRequest
	23, // [23:29] is the sub-list for method output_type
	17, // [17:23] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_npool_sphinxproxy_sphinxproxy_proto_init() }
func file_npool_sphinxproxy_sphinxproxy_proto_init() {
	if File_npool_sphinxproxy_sphinxproxy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalanceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBalanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWalletResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyPluginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyPluginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxySignRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxySignResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxySignResponseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_sphinxproxy_sphinxproxy_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_sphinxproxy_sphinxproxy_proto_goTypes,
		DependencyIndexes: file_npool_sphinxproxy_sphinxproxy_proto_depIdxs,
		EnumInfos:         file_npool_sphinxproxy_sphinxproxy_proto_enumTypes,
		MessageInfos:      file_npool_sphinxproxy_sphinxproxy_proto_msgTypes,
	}.Build()
	File_npool_sphinxproxy_sphinxproxy_proto = out.File
	file_npool_sphinxproxy_sphinxproxy_proto_rawDesc = nil
	file_npool_sphinxproxy_sphinxproxy_proto_goTypes = nil
	file_npool_sphinxproxy_sphinxproxy_proto_depIdxs = nil
}
