// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: npool/sphinxproxy/sphinxproxy.proto

package sphinxproxy

import (
	sphinxplugin "github.com/NpoolPlatform/message/npool/sphinxplugin"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TransactionState int32

const (
	TransactionState_TransactionStateUnKnow TransactionState = 0
	TransactionState_TransactionStateWait   TransactionState = 1
	TransactionState_TransactionStateSign   TransactionState = 2
	TransactionState_TransactionStateSync   TransactionState = 3
	TransactionState_TransactionStateDone   TransactionState = 4
	TransactionState_TransactionStateFail   TransactionState = 5
)

// Enum value maps for TransactionState.
var (
	TransactionState_name = map[int32]string{
		0: "TransactionStateUnKnow",
		1: "TransactionStateWait",
		2: "TransactionStateSign",
		3: "TransactionStateSync",
		4: "TransactionStateDone",
		5: "TransactionStateFail",
	}
	TransactionState_value = map[string]int32{
		"TransactionStateUnKnow": 0,
		"TransactionStateWait":   1,
		"TransactionStateSign":   2,
		"TransactionStateSync":   3,
		"TransactionStateDone":   4,
		"TransactionStateFail":   5,
	}
)

func (x TransactionState) Enum() *TransactionState {
	p := new(TransactionState)
	*p = x
	return p
}

func (x TransactionState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionState) Descriptor() protoreflect.EnumDescriptor {
	return file_npool_sphinxproxy_sphinxproxy_proto_enumTypes[0].Descriptor()
}

func (TransactionState) Type() protoreflect.EnumType {
	return &file_npool_sphinxproxy_sphinxproxy_proto_enumTypes[0]
}

func (x TransactionState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionState.Descriptor instead.
func (TransactionState) EnumDescriptor() ([]byte, []int) {
	return file_npool_sphinxproxy_sphinxproxy_proto_rawDescGZIP(), []int{0}
}

// ############################# sync
type VersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info string `protobuf:"bytes,100,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *VersionResponse) Reset() {
	*x = VersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionResponse) ProtoMessage() {}

func (x *VersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionResponse.ProtoReflect.Descriptor instead.
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return file_npool_sphinxproxy_sphinxproxy_proto_rawDescGZIP(), []int{0}
}

func (x *VersionResponse) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

type GetBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,100,opt,name=Name,proto3" json:"Name,omitempty"`
	Address string `protobuf:"bytes,110,opt,name=Address,proto3" json:"Address,omitempty"`
}

func (x *GetBalanceRequest) Reset() {
	*x = GetBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalanceRequest) ProtoMessage() {}

func (x *GetBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalanceRequest.ProtoReflect.Descriptor instead.
func (*GetBalanceRequest) Descriptor() ([]byte, []int) {
	return file_npool_sphinxproxy_sphinxproxy_proto_rawDescGZIP(), []int{1}
}

func (x *GetBalanceRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetBalanceRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type BalanceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance    float64 `protobuf:"fixed64,100,opt,name=Balance,proto3" json:"Balance,omitempty"`
	BalanceStr string  `protobuf:"bytes,110,opt,name=BalanceStr,proto3" json:"BalanceStr,omitempty"`
}

func (x *BalanceInfo) Reset() {
	*x = BalanceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalanceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceInfo) ProtoMessage() {}

func (x *BalanceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceInfo.ProtoReflect.Descriptor instead.
func (*BalanceInfo) Descriptor() ([]byte, []int) {
	return file_npool_sphinxproxy_sphinxproxy_proto_rawDescGZIP(), []int{2}
}

func (x *BalanceInfo) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *BalanceInfo) GetBalanceStr() string {
	if x != nil {
		return x.BalanceStr
	}
	return ""
}

type GetBalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *BalanceInfo `protobuf:"bytes,100,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetBalanceResponse) Reset() {
	*x = GetBalanceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBalanceResponse) ProtoMessage() {}

func (x *GetBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBalanceResponse.ProtoReflect.Descriptor instead.
func (*GetBalanceResponse) Descriptor() ([]byte, []int) {
	return file_npool_sphinxproxy_sphinxproxy_proto_rawDescGZIP(), []int{3}
}

func (x *GetBalanceResponse) GetInfo() *BalanceInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateWalletRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,100,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *CreateWalletRequest) Reset() {
	*x = CreateWalletRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWalletRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWalletRequest) ProtoMessage() {}

func (x *CreateWalletRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWalletRequest.ProtoReflect.Descriptor instead.
func (*CreateWalletRequest) Descriptor() ([]byte, []int) {
	return file_npool_sphinxproxy_sphinxproxy_proto_rawDescGZIP(), []int{4}
}

func (x *CreateWalletRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type WalletInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,100,opt,name=Address,proto3" json:"Address,omitempty"`
}

func (x *WalletInfo) Reset() {
	*x = WalletInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletInfo) ProtoMessage() {}

func (x *WalletInfo) ProtoReflect() protoreflect.Message {
	mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletInfo.ProtoReflect.Descriptor instead.
func (*WalletInfo) Descriptor() ([]byte, []int) {
	return file_npool_sphinxproxy_sphinxproxy_proto_rawDescGZIP(), []int{5}
}

func (x *WalletInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type CreateWalletResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *WalletInfo `protobuf:"bytes,100,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateWalletResponse) Reset() {
	*x = CreateWalletResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWalletResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWalletResponse) ProtoMessage() {}

func (x *CreateWalletResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWalletResponse.ProtoReflect.Descriptor instead.
func (*CreateWalletResponse) Descriptor() ([]byte, []int) {
	return file_npool_sphinxproxy_sphinxproxy_proto_rawDescGZIP(), []int{6}
}

func (x *CreateWalletResponse) GetInfo() *WalletInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string  `protobuf:"bytes,100,opt,name=Name,proto3" json:"Name,omitempty"`
	TransactionID string  `protobuf:"bytes,110,opt,name=TransactionID,proto3" json:"TransactionID,omitempty"`
	Amount        float64 `protobuf:"fixed64,120,opt,name=Amount,proto3" json:"Amount,omitempty"`
	From          string  `protobuf:"bytes,130,opt,name=From,proto3" json:"From,omitempty"`
	To            string  `protobuf:"bytes,140,opt,name=To,proto3" json:"To,omitempty"`
}

func (x *CreateTransactionRequest) Reset() {
	*x = CreateTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransactionRequest) ProtoMessage() {}

func (x *CreateTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransactionRequest.ProtoReflect.Descriptor instead.
func (*CreateTransactionRequest) Descriptor() ([]byte, []int) {
	return file_npool_sphinxproxy_sphinxproxy_proto_rawDescGZIP(), []int{7}
}

func (x *CreateTransactionRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateTransactionRequest) GetTransactionID() string {
	if x != nil {
		return x.TransactionID
	}
	return ""
}

func (x *CreateTransactionRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CreateTransactionRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *CreateTransactionRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

type CreateTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateTransactionResponse) Reset() {
	*x = CreateTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTransactionResponse) ProtoMessage() {}

func (x *CreateTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTransactionResponse.ProtoReflect.Descriptor instead.
func (*CreateTransactionResponse) Descriptor() ([]byte, []int) {
	return file_npool_sphinxproxy_sphinxproxy_proto_rawDescGZIP(), []int{8}
}

type UpdateTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionID   string                       `protobuf:"bytes,110,opt,name=TransactionID,proto3" json:"TransactionID,omitempty"`
	TransactionType sphinxplugin.TransactionType `protobuf:"varint,120,opt,name=TransactionType,proto3,enum=sphinx.plugin.v1.TransactionType" json:"TransactionType,omitempty"`
	Payload         []byte                       `protobuf:"bytes,130,opt,name=Payload,proto3" json:"Payload,omitempty"`
}

func (x *UpdateTransactionRequest) Reset() {
	*x = UpdateTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTransactionRequest) ProtoMessage() {}

func (x *UpdateTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTransactionRequest.ProtoReflect.Descriptor instead.
func (*UpdateTransactionRequest) Descriptor() ([]byte, []int) {
	return file_npool_sphinxproxy_sphinxproxy_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateTransactionRequest) GetTransactionID() string {
	if x != nil {
		return x.TransactionID
	}
	return ""
}

func (x *UpdateTransactionRequest) GetTransactionType() sphinxplugin.TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return sphinxplugin.TransactionType(0)
}

func (x *UpdateTransactionRequest) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type UpdateTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateTransactionResponse) Reset() {
	*x = UpdateTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTransactionResponse) ProtoMessage() {}

func (x *UpdateTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTransactionResponse.ProtoReflect.Descriptor instead.
func (*UpdateTransactionResponse) Descriptor() ([]byte, []int) {
	return file_npool_sphinxproxy_sphinxproxy_proto_rawDescGZIP(), []int{10}
}

type GetTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionID string `protobuf:"bytes,100,opt,name=TransactionID,proto3" json:"TransactionID,omitempty"`
}

func (x *GetTransactionRequest) Reset() {
	*x = GetTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionRequest) ProtoMessage() {}

func (x *GetTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionRequest) Descriptor() ([]byte, []int) {
	return file_npool_sphinxproxy_sphinxproxy_proto_rawDescGZIP(), []int{11}
}

func (x *GetTransactionRequest) GetTransactionID() string {
	if x != nil {
		return x.TransactionID
	}
	return ""
}

type TransactionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionID    string           `protobuf:"bytes,100,opt,name=TransactionID,proto3" json:"TransactionID,omitempty"`
	Name             string           `protobuf:"bytes,110,opt,name=Name,proto3" json:"Name,omitempty"`
	Amount           float64          `protobuf:"fixed64,120,opt,name=Amount,proto3" json:"Amount,omitempty"`
	From             string           `protobuf:"bytes,130,opt,name=From,proto3" json:"From,omitempty"`
	To               string           `protobuf:"bytes,140,opt,name=To,proto3" json:"To,omitempty"`
	TransactionState TransactionState `protobuf:"varint,150,opt,name=TransactionState,proto3,enum=sphinx.proxy.v1.TransactionState" json:"TransactionState,omitempty"`
	CID              string           `protobuf:"bytes,160,opt,name=CID,proto3" json:"CID,omitempty"`
	ExitCode         int64            `protobuf:"varint,170,opt,name=ExitCode,proto3" json:"ExitCode,omitempty"`
	CreatedAt        uint32           `protobuf:"varint,180,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt        uint32           `protobuf:"varint,190,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (x *TransactionInfo) Reset() {
	*x = TransactionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionInfo) ProtoMessage() {}

func (x *TransactionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionInfo.ProtoReflect.Descriptor instead.
func (*TransactionInfo) Descriptor() ([]byte, []int) {
	return file_npool_sphinxproxy_sphinxproxy_proto_rawDescGZIP(), []int{12}
}

func (x *TransactionInfo) GetTransactionID() string {
	if x != nil {
		return x.TransactionID
	}
	return ""
}

func (x *TransactionInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TransactionInfo) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TransactionInfo) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *TransactionInfo) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *TransactionInfo) GetTransactionState() TransactionState {
	if x != nil {
		return x.TransactionState
	}
	return TransactionState_TransactionStateUnKnow
}

func (x *TransactionInfo) GetCID() string {
	if x != nil {
		return x.CID
	}
	return ""
}

func (x *TransactionInfo) GetExitCode() int64 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *TransactionInfo) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *TransactionInfo) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type GetTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *TransactionInfo `protobuf:"bytes,100,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetTransactionResponse) Reset() {
	*x = GetTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionResponse) ProtoMessage() {}

func (x *GetTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionResponse.ProtoReflect.Descriptor instead.
func (*GetTransactionResponse) Descriptor() ([]byte, []int) {
	return file_npool_sphinxproxy_sphinxproxy_proto_rawDescGZIP(), []int{13}
}

func (x *GetTransactionResponse) GetInfo() *TransactionInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetTransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinType         sphinxplugin.CoinType        `protobuf:"varint,100,opt,name=CoinType,proto3,enum=sphinx.plugin.v1.CoinType" json:"CoinType,omitempty"`
	TransactionType  sphinxplugin.TransactionType `protobuf:"varint,110,opt,name=TransactionType,proto3,enum=sphinx.plugin.v1.TransactionType" json:"TransactionType,omitempty"`
	TransactionState TransactionState             `protobuf:"varint,120,opt,name=TransactionState,proto3,enum=sphinx.proxy.v1.TransactionState" json:"TransactionState,omitempty"`
	ENV              string                       `protobuf:"bytes,130,opt,name=ENV,proto3" json:"ENV,omitempty"` // main or test
	Offset           uint32                       `protobuf:"varint,140,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit            uint32                       `protobuf:"varint,150,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetTransactionsRequest) Reset() {
	*x = GetTransactionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionsRequest) ProtoMessage() {}

func (x *GetTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionsRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_npool_sphinxproxy_sphinxproxy_proto_rawDescGZIP(), []int{14}
}

func (x *GetTransactionsRequest) GetCoinType() sphinxplugin.CoinType {
	if x != nil {
		return x.CoinType
	}
	return sphinxplugin.CoinType(0)
}

func (x *GetTransactionsRequest) GetTransactionType() sphinxplugin.TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return sphinxplugin.TransactionType(0)
}

func (x *GetTransactionsRequest) GetTransactionState() TransactionState {
	if x != nil {
		return x.TransactionState
	}
	return TransactionState_TransactionStateUnKnow
}

func (x *GetTransactionsRequest) GetENV() string {
	if x != nil {
		return x.ENV
	}
	return ""
}

func (x *GetTransactionsRequest) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetTransactionsRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetTransactionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*TransactionInfo `protobuf:"bytes,100,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32             `protobuf:"varint,110,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetTransactionsResponse) Reset() {
	*x = GetTransactionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionsResponse) ProtoMessage() {}

func (x *GetTransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionsResponse.ProtoReflect.Descriptor instead.
func (*GetTransactionsResponse) Descriptor() ([]byte, []int) {
	return file_npool_sphinxproxy_sphinxproxy_proto_rawDescGZIP(), []int{15}
}

func (x *GetTransactionsResponse) GetInfos() []*TransactionInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetTransactionsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

// ############################# async
type ProxyPluginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinType        sphinxplugin.CoinType         `protobuf:"varint,100,opt,name=CoinType,proto3,enum=sphinx.plugin.v1.CoinType" json:"CoinType,omitempty"`
	TransactionType sphinxplugin.TransactionType  `protobuf:"varint,110,opt,name=TransactionType,proto3,enum=sphinx.plugin.v1.TransactionType" json:"TransactionType,omitempty"`
	ENV             string                        `protobuf:"bytes,111,opt,name=ENV,proto3" json:"ENV,omitempty"` // main or test
	Unit            string                        `protobuf:"bytes,112,opt,name=Unit,proto3" json:"Unit,omitempty"`
	TransactionID   string                        `protobuf:"bytes,120,opt,name=TransactionID,proto3" json:"TransactionID,omitempty"`
	CID             string                        `protobuf:"bytes,140,opt,name=CID,proto3" json:"CID,omitempty"`
	Balance         float64                       `protobuf:"fixed64,150,opt,name=Balance,proto3" json:"Balance,omitempty"`
	BalanceStr      string                        `protobuf:"bytes,160,opt,name=BalanceStr,proto3" json:"BalanceStr,omitempty"`
	Message         *sphinxplugin.UnsignedMessage `protobuf:"bytes,170,opt,name=Message,proto3" json:"Message,omitempty"`
	ExitCode        int64                         `protobuf:"varint,180,opt,name=ExitCode,proto3" json:"ExitCode,omitempty"` // -1 find cid state on chain internal server error
	RPCExitMessage  string                        `protobuf:"bytes,1000,opt,name=RPCExitMessage,proto3" json:"RPCExitMessage,omitempty"`
	Payload         []byte                        `protobuf:"bytes,1100,opt,name=Payload,proto3" json:"Payload,omitempty"`
}

func (x *ProxyPluginResponse) Reset() {
	*x = ProxyPluginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyPluginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyPluginResponse) ProtoMessage() {}

func (x *ProxyPluginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyPluginResponse.ProtoReflect.Descriptor instead.
func (*ProxyPluginResponse) Descriptor() ([]byte, []int) {
	return file_npool_sphinxproxy_sphinxproxy_proto_rawDescGZIP(), []int{16}
}

func (x *ProxyPluginResponse) GetCoinType() sphinxplugin.CoinType {
	if x != nil {
		return x.CoinType
	}
	return sphinxplugin.CoinType(0)
}

func (x *ProxyPluginResponse) GetTransactionType() sphinxplugin.TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return sphinxplugin.TransactionType(0)
}

func (x *ProxyPluginResponse) GetENV() string {
	if x != nil {
		return x.ENV
	}
	return ""
}

func (x *ProxyPluginResponse) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *ProxyPluginResponse) GetTransactionID() string {
	if x != nil {
		return x.TransactionID
	}
	return ""
}

func (x *ProxyPluginResponse) GetCID() string {
	if x != nil {
		return x.CID
	}
	return ""
}

func (x *ProxyPluginResponse) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *ProxyPluginResponse) GetBalanceStr() string {
	if x != nil {
		return x.BalanceStr
	}
	return ""
}

func (x *ProxyPluginResponse) GetMessage() *sphinxplugin.UnsignedMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ProxyPluginResponse) GetExitCode() int64 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *ProxyPluginResponse) GetRPCExitMessage() string {
	if x != nil {
		return x.RPCExitMessage
	}
	return ""
}

func (x *ProxyPluginResponse) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// MpoolGetNonce WalletBalance MpoolPush ..
type ProxyPluginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinType        sphinxplugin.CoinType        `protobuf:"varint,100,opt,name=CoinType,proto3,enum=sphinx.plugin.v1.CoinType" json:"CoinType,omitempty"`
	TransactionType sphinxplugin.TransactionType `protobuf:"varint,110,opt,name=TransactionType,proto3,enum=sphinx.plugin.v1.TransactionType" json:"TransactionType,omitempty"`
	TransactionID   string                       `protobuf:"bytes,120,opt,name=TransactionID,proto3" json:"TransactionID,omitempty"`
	// query wallet account
	Address string                        `protobuf:"bytes,130,opt,name=Address,proto3" json:"Address,omitempty"`
	Message *sphinxplugin.UnsignedMessage `protobuf:"bytes,140,opt,name=Message,proto3" json:"Message,omitempty"`
	// fil
	Signature *sphinxplugin.Signature `protobuf:"bytes,150,opt,name=Signature,proto3" json:"Signature,omitempty"`
	// btc
	MsgTx *sphinxplugin.MsgTx `protobuf:"bytes,151,opt,name=MsgTx,proto3" json:"MsgTx,omitempty"`
	// eth/usdt
	SignedRawTxHex string `protobuf:"bytes,152,opt,name=SignedRawTxHex,proto3" json:"SignedRawTxHex,omitempty"`
	CID            string `protobuf:"bytes,160,opt,name=CID,proto3" json:"CID,omitempty"`
	Payload        []byte `protobuf:"bytes,170,opt,name=Payload,proto3" json:"Payload,omitempty"`
	// gas fee
	Fee float64 `protobuf:"fixed64,180,opt,name=Fee,proto3" json:"Fee,omitempty"`
}

func (x *ProxyPluginRequest) Reset() {
	*x = ProxyPluginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyPluginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyPluginRequest) ProtoMessage() {}

func (x *ProxyPluginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyPluginRequest.ProtoReflect.Descriptor instead.
func (*ProxyPluginRequest) Descriptor() ([]byte, []int) {
	return file_npool_sphinxproxy_sphinxproxy_proto_rawDescGZIP(), []int{17}
}

func (x *ProxyPluginRequest) GetCoinType() sphinxplugin.CoinType {
	if x != nil {
		return x.CoinType
	}
	return sphinxplugin.CoinType(0)
}

func (x *ProxyPluginRequest) GetTransactionType() sphinxplugin.TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return sphinxplugin.TransactionType(0)
}

func (x *ProxyPluginRequest) GetTransactionID() string {
	if x != nil {
		return x.TransactionID
	}
	return ""
}

func (x *ProxyPluginRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ProxyPluginRequest) GetMessage() *sphinxplugin.UnsignedMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ProxyPluginRequest) GetSignature() *sphinxplugin.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *ProxyPluginRequest) GetMsgTx() *sphinxplugin.MsgTx {
	if x != nil {
		return x.MsgTx
	}
	return nil
}

func (x *ProxyPluginRequest) GetSignedRawTxHex() string {
	if x != nil {
		return x.SignedRawTxHex
	}
	return ""
}

func (x *ProxyPluginRequest) GetCID() string {
	if x != nil {
		return x.CID
	}
	return ""
}

func (x *ProxyPluginRequest) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *ProxyPluginRequest) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

type ProxySignRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinType        sphinxplugin.CoinType         `protobuf:"varint,100,opt,name=CoinType,proto3,enum=sphinx.plugin.v1.CoinType" json:"CoinType,omitempty"`
	TransactionType sphinxplugin.TransactionType  `protobuf:"varint,110,opt,name=TransactionType,proto3,enum=sphinx.plugin.v1.TransactionType" json:"TransactionType,omitempty"`
	TransactionID   string                        `protobuf:"bytes,120,opt,name=TransactionID,proto3" json:"TransactionID,omitempty"`
	Message         *sphinxplugin.UnsignedMessage `protobuf:"bytes,130,opt,name=Message,proto3" json:"Message,omitempty"`
	Payload         []byte                        `protobuf:"bytes,140,opt,name=Payload,proto3" json:"Payload,omitempty"`
}

func (x *ProxySignRequest) Reset() {
	*x = ProxySignRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxySignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxySignRequest) ProtoMessage() {}

func (x *ProxySignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxySignRequest.ProtoReflect.Descriptor instead.
func (*ProxySignRequest) Descriptor() ([]byte, []int) {
	return file_npool_sphinxproxy_sphinxproxy_proto_rawDescGZIP(), []int{18}
}

func (x *ProxySignRequest) GetCoinType() sphinxplugin.CoinType {
	if x != nil {
		return x.CoinType
	}
	return sphinxplugin.CoinType(0)
}

func (x *ProxySignRequest) GetTransactionType() sphinxplugin.TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return sphinxplugin.TransactionType(0)
}

func (x *ProxySignRequest) GetTransactionID() string {
	if x != nil {
		return x.TransactionID
	}
	return ""
}

func (x *ProxySignRequest) GetMessage() *sphinxplugin.UnsignedMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ProxySignRequest) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type ProxySignResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinType        sphinxplugin.CoinType        `protobuf:"varint,100,opt,name=CoinType,proto3,enum=sphinx.plugin.v1.CoinType" json:"CoinType,omitempty"`
	TransactionType sphinxplugin.TransactionType `protobuf:"varint,110,opt,name=TransactionType,proto3,enum=sphinx.plugin.v1.TransactionType" json:"TransactionType,omitempty"`
	TransactionID   string                       `protobuf:"bytes,120,opt,name=TransactionID,proto3" json:"TransactionID,omitempty"`
	// fil
	Info *ProxySignResponseInfo `protobuf:"bytes,130,opt,name=Info,proto3" json:"Info,omitempty"`
	// btc
	MsgTx *sphinxplugin.MsgTx `protobuf:"bytes,140,opt,name=MsgTx,proto3" json:"MsgTx,omitempty"`
	// eth/usdt
	SignedRawTxHex string `protobuf:"bytes,150,opt,name=SignedRawTxHex,proto3" json:"SignedRawTxHex,omitempty"`
	RPCExitMessage string `protobuf:"bytes,1000,opt,name=RPCExitMessage,proto3" json:"RPCExitMessage,omitempty"`
	Payload        []byte `protobuf:"bytes,1100,opt,name=Payload,proto3" json:"Payload,omitempty"`
}

func (x *ProxySignResponse) Reset() {
	*x = ProxySignResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxySignResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxySignResponse) ProtoMessage() {}

func (x *ProxySignResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxySignResponse.ProtoReflect.Descriptor instead.
func (*ProxySignResponse) Descriptor() ([]byte, []int) {
	return file_npool_sphinxproxy_sphinxproxy_proto_rawDescGZIP(), []int{19}
}

func (x *ProxySignResponse) GetCoinType() sphinxplugin.CoinType {
	if x != nil {
		return x.CoinType
	}
	return sphinxplugin.CoinType(0)
}

func (x *ProxySignResponse) GetTransactionType() sphinxplugin.TransactionType {
	if x != nil {
		return x.TransactionType
	}
	return sphinxplugin.TransactionType(0)
}

func (x *ProxySignResponse) GetTransactionID() string {
	if x != nil {
		return x.TransactionID
	}
	return ""
}

func (x *ProxySignResponse) GetInfo() *ProxySignResponseInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *ProxySignResponse) GetMsgTx() *sphinxplugin.MsgTx {
	if x != nil {
		return x.MsgTx
	}
	return nil
}

func (x *ProxySignResponse) GetSignedRawTxHex() string {
	if x != nil {
		return x.SignedRawTxHex
	}
	return ""
}

func (x *ProxySignResponse) GetRPCExitMessage() string {
	if x != nil {
		return x.RPCExitMessage
	}
	return ""
}

func (x *ProxySignResponse) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type ProxySignResponseInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address   string                        `protobuf:"bytes,100,opt,name=Address,proto3" json:"Address,omitempty"` // create new account address
	Message   *sphinxplugin.UnsignedMessage `protobuf:"bytes,110,opt,name=Message,proto3" json:"Message,omitempty"`
	Signature *sphinxplugin.Signature       `protobuf:"bytes,120,opt,name=Signature,proto3" json:"Signature,omitempty"`
}

func (x *ProxySignResponseInfo) Reset() {
	*x = ProxySignResponseInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxySignResponseInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxySignResponseInfo) ProtoMessage() {}

func (x *ProxySignResponseInfo) ProtoReflect() protoreflect.Message {
	mi := &file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxySignResponseInfo.ProtoReflect.Descriptor instead.
func (*ProxySignResponseInfo) Descriptor() ([]byte, []int) {
	return file_npool_sphinxproxy_sphinxproxy_proto_rawDescGZIP(), []int{20}
}

func (x *ProxySignResponseInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ProxySignResponseInfo) GetMessage() *sphinxplugin.UnsignedMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ProxySignResponseInfo) GetSignature() *sphinxplugin.Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

var File_npool_sphinxproxy_sphinxproxy_proto protoreflect.FileDescriptor

var file_npool_sphinxproxy_sphinxproxy_proto_rawDesc = []byte{
	0x0a, 0x23, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2f, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x25, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2f, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x25, 0x0a, 0x0f, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x41, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x47, 0x0a, 0x0b, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x72, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x72, 0x22, 0x46, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x30, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x29, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x26,
	0x0a, 0x0a, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x47, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73,
	0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x92, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x78, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x13,
	0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x46,
	0x72, 0x6f, 0x6d, 0x12, 0x0f, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x54, 0x6f, 0x22, 0x1b, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0xa8, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x6e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x4b, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x19, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x82, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x1b, 0x0a, 0x19,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3d, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0xc7, 0x02, 0x0a, 0x0f, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x78, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x13,
	0x0a, 0x04, 0x46, 0x72, 0x6f, 0x6d, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x46,
	0x72, 0x6f, 0x6d, 0x12, 0x0f, 0x0a, 0x02, 0x54, 0x6f, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x54, 0x6f, 0x12, 0x4e, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x11, 0x0a, 0x03, 0x43, 0x49, 0x44, 0x18, 0xa0, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x43, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x08, 0x45, 0x78, 0x69, 0x74, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x45, 0x78, 0x69, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x4e, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x70, 0x68,
	0x69, 0x6e, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0xaf, 0x02, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a,
	0x08, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x43, 0x6f, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21,
	0x2e, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x4d, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73,
	0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x11, 0x0a, 0x03, 0x45, 0x4e, 0x56, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x45, 0x4e, 0x56, 0x12, 0x17, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x8c,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x15, 0x0a,
	0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x22, 0x67, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x36, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x6e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xd4, 0x03,
	0x0a, 0x13, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a,
	0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x6e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x4e,
	0x56, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x45, 0x4e, 0x56, 0x12, 0x12, 0x0a, 0x04,
	0x55, 0x6e, 0x69, 0x74, 0x18, 0x70, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x6e, 0x69, 0x74,
	0x12, 0x24, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x11, 0x0a, 0x03, 0x43, 0x49, 0x44, 0x18, 0x8c, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x43, 0x49, 0x44, 0x12, 0x19, 0x0a, 0x07, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x74, 0x72, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x74, 0x72, 0x12, 0x3c, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x45, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0xb4, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x45, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x27, 0x0a, 0x0e, 0x52, 0x50, 0x43, 0x45, 0x78, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x52, 0x50, 0x43, 0x45, 0x78,
	0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x07, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0xcc, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x22, 0xee, 0x03, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x43,
	0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73,
	0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x19, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x3c, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x8c, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x3a, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x96, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x4d,
	0x73, 0x67, 0x54, 0x78, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x70,
	0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x73, 0x67, 0x54, 0x78, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x54, 0x78, 0x12, 0x27, 0x0a, 0x0e, 0x53,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x61, 0x77, 0x54, 0x78, 0x48, 0x65, 0x78, 0x18, 0x98, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x61, 0x77, 0x54,
	0x78, 0x48, 0x65, 0x78, 0x12, 0x11, 0x0a, 0x03, 0x43, 0x49, 0x44, 0x18, 0xa0, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x43, 0x49, 0x44, 0x12, 0x19, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x11, 0x0a, 0x03, 0x46, 0x65, 0x65, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x03, 0x46, 0x65, 0x65, 0x22, 0x96, 0x02, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53,
	0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x08, 0x43, 0x6f,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x73,
	0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x4b, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x70,
	0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x3c, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x8c,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x98,
	0x03, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a, 0x0f,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x6e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12,
	0x3b, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2e, 0x0a, 0x05,
	0x4d, 0x73, 0x67, 0x54, 0x78, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73,
	0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x73, 0x67, 0x54, 0x78, 0x52, 0x05, 0x4d, 0x73, 0x67, 0x54, 0x78, 0x12, 0x27, 0x0a, 0x0e,
	0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x61, 0x77, 0x54, 0x78, 0x48, 0x65, 0x78, 0x18, 0x96,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x61, 0x77,
	0x54, 0x78, 0x48, 0x65, 0x78, 0x12, 0x27, 0x0a, 0x0e, 0x52, 0x50, 0x43, 0x45, 0x78, 0x69, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x52, 0x50, 0x43, 0x45, 0x78, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x19,
	0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0xcc, 0x08, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xa9, 0x01, 0x0a, 0x15, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3b, 0x0a,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x2a, 0xb0, 0x01, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x6e,
	0x4b, 0x6e, 0x6f, 0x77, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x57, 0x61, 0x69, 0x74, 0x10, 0x01,
	0x12, 0x18, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x79,
	0x6e, 0x63, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x6f, 0x6e, 0x65, 0x10, 0x04, 0x12, 0x18,
	0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x05, 0x32, 0xbb, 0x08, 0x0a, 0x0b, 0x53, 0x70, 0x68,
	0x69, 0x6e, 0x78, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x58, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x73, 0x70,
	0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x22, 0x08, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a,
	0x01, 0x2a, 0x12, 0x71, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x22, 0x2e, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x14, 0x22, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x79, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x24, 0x2e, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x73, 0x70,
	0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x3a, 0x01, 0x2a,
	0x12, 0x8d, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a,
	0x12, 0x8d, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a,
	0x12, 0x81, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x73, 0x70,
	0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x76,
	0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x85, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x2e, 0x73, 0x70, 0x68, 0x69, 0x6e,
	0x78, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x19, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x5e, 0x0a, 0x0b,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x24, 0x2e, 0x73, 0x70,
	0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x1a, 0x23, 0x2e, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x58, 0x0a, 0x09,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x22, 0x2e, 0x73, 0x70, 0x68, 0x69,
	0x6e, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x21, 0x2e,
	0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x34, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c,
	0x2f, 0x73, 0x70, 0x68, 0x69, 0x6e, 0x78, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_sphinxproxy_sphinxproxy_proto_rawDescOnce sync.Once
	file_npool_sphinxproxy_sphinxproxy_proto_rawDescData = file_npool_sphinxproxy_sphinxproxy_proto_rawDesc
)

func file_npool_sphinxproxy_sphinxproxy_proto_rawDescGZIP() []byte {
	file_npool_sphinxproxy_sphinxproxy_proto_rawDescOnce.Do(func() {
		file_npool_sphinxproxy_sphinxproxy_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_sphinxproxy_sphinxproxy_proto_rawDescData)
	})
	return file_npool_sphinxproxy_sphinxproxy_proto_rawDescData
}

var file_npool_sphinxproxy_sphinxproxy_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_npool_sphinxproxy_sphinxproxy_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_npool_sphinxproxy_sphinxproxy_proto_goTypes = []interface{}{
	(TransactionState)(0),                // 0: sphinx.proxy.v1.TransactionState
	(*VersionResponse)(nil),              // 1: sphinx.proxy.v1.VersionResponse
	(*GetBalanceRequest)(nil),            // 2: sphinx.proxy.v1.GetBalanceRequest
	(*BalanceInfo)(nil),                  // 3: sphinx.proxy.v1.BalanceInfo
	(*GetBalanceResponse)(nil),           // 4: sphinx.proxy.v1.GetBalanceResponse
	(*CreateWalletRequest)(nil),          // 5: sphinx.proxy.v1.CreateWalletRequest
	(*WalletInfo)(nil),                   // 6: sphinx.proxy.v1.WalletInfo
	(*CreateWalletResponse)(nil),         // 7: sphinx.proxy.v1.CreateWalletResponse
	(*CreateTransactionRequest)(nil),     // 8: sphinx.proxy.v1.CreateTransactionRequest
	(*CreateTransactionResponse)(nil),    // 9: sphinx.proxy.v1.CreateTransactionResponse
	(*UpdateTransactionRequest)(nil),     // 10: sphinx.proxy.v1.UpdateTransactionRequest
	(*UpdateTransactionResponse)(nil),    // 11: sphinx.proxy.v1.UpdateTransactionResponse
	(*GetTransactionRequest)(nil),        // 12: sphinx.proxy.v1.GetTransactionRequest
	(*TransactionInfo)(nil),              // 13: sphinx.proxy.v1.TransactionInfo
	(*GetTransactionResponse)(nil),       // 14: sphinx.proxy.v1.GetTransactionResponse
	(*GetTransactionsRequest)(nil),       // 15: sphinx.proxy.v1.GetTransactionsRequest
	(*GetTransactionsResponse)(nil),      // 16: sphinx.proxy.v1.GetTransactionsResponse
	(*ProxyPluginResponse)(nil),          // 17: sphinx.proxy.v1.ProxyPluginResponse
	(*ProxyPluginRequest)(nil),           // 18: sphinx.proxy.v1.ProxyPluginRequest
	(*ProxySignRequest)(nil),             // 19: sphinx.proxy.v1.ProxySignRequest
	(*ProxySignResponse)(nil),            // 20: sphinx.proxy.v1.ProxySignResponse
	(*ProxySignResponseInfo)(nil),        // 21: sphinx.proxy.v1.ProxySignResponseInfo
	(sphinxplugin.TransactionType)(0),    // 22: sphinx.plugin.v1.TransactionType
	(sphinxplugin.CoinType)(0),           // 23: sphinx.plugin.v1.CoinType
	(*sphinxplugin.UnsignedMessage)(nil), // 24: sphinx.plugin.v1.UnsignedMessage
	(*sphinxplugin.Signature)(nil),       // 25: sphinx.plugin.v1.Signature
	(*sphinxplugin.MsgTx)(nil),           // 26: sphinx.plugin.v1.MsgTx
	(*emptypb.Empty)(nil),                // 27: google.protobuf.Empty
}
var file_npool_sphinxproxy_sphinxproxy_proto_depIdxs = []int32{
	3,  // 0: sphinx.proxy.v1.GetBalanceResponse.Info:type_name -> sphinx.proxy.v1.BalanceInfo
	6,  // 1: sphinx.proxy.v1.CreateWalletResponse.Info:type_name -> sphinx.proxy.v1.WalletInfo
	22, // 2: sphinx.proxy.v1.UpdateTransactionRequest.TransactionType:type_name -> sphinx.plugin.v1.TransactionType
	0,  // 3: sphinx.proxy.v1.TransactionInfo.TransactionState:type_name -> sphinx.proxy.v1.TransactionState
	13, // 4: sphinx.proxy.v1.GetTransactionResponse.Info:type_name -> sphinx.proxy.v1.TransactionInfo
	23, // 5: sphinx.proxy.v1.GetTransactionsRequest.CoinType:type_name -> sphinx.plugin.v1.CoinType
	22, // 6: sphinx.proxy.v1.GetTransactionsRequest.TransactionType:type_name -> sphinx.plugin.v1.TransactionType
	0,  // 7: sphinx.proxy.v1.GetTransactionsRequest.TransactionState:type_name -> sphinx.proxy.v1.TransactionState
	13, // 8: sphinx.proxy.v1.GetTransactionsResponse.Infos:type_name -> sphinx.proxy.v1.TransactionInfo
	23, // 9: sphinx.proxy.v1.ProxyPluginResponse.CoinType:type_name -> sphinx.plugin.v1.CoinType
	22, // 10: sphinx.proxy.v1.ProxyPluginResponse.TransactionType:type_name -> sphinx.plugin.v1.TransactionType
	24, // 11: sphinx.proxy.v1.ProxyPluginResponse.Message:type_name -> sphinx.plugin.v1.UnsignedMessage
	23, // 12: sphinx.proxy.v1.ProxyPluginRequest.CoinType:type_name -> sphinx.plugin.v1.CoinType
	22, // 13: sphinx.proxy.v1.ProxyPluginRequest.TransactionType:type_name -> sphinx.plugin.v1.TransactionType
	24, // 14: sphinx.proxy.v1.ProxyPluginRequest.Message:type_name -> sphinx.plugin.v1.UnsignedMessage
	25, // 15: sphinx.proxy.v1.ProxyPluginRequest.Signature:type_name -> sphinx.plugin.v1.Signature
	26, // 16: sphinx.proxy.v1.ProxyPluginRequest.MsgTx:type_name -> sphinx.plugin.v1.MsgTx
	23, // 17: sphinx.proxy.v1.ProxySignRequest.CoinType:type_name -> sphinx.plugin.v1.CoinType
	22, // 18: sphinx.proxy.v1.ProxySignRequest.TransactionType:type_name -> sphinx.plugin.v1.TransactionType
	24, // 19: sphinx.proxy.v1.ProxySignRequest.Message:type_name -> sphinx.plugin.v1.UnsignedMessage
	23, // 20: sphinx.proxy.v1.ProxySignResponse.CoinType:type_name -> sphinx.plugin.v1.CoinType
	22, // 21: sphinx.proxy.v1.ProxySignResponse.TransactionType:type_name -> sphinx.plugin.v1.TransactionType
	21, // 22: sphinx.proxy.v1.ProxySignResponse.Info:type_name -> sphinx.proxy.v1.ProxySignResponseInfo
	26, // 23: sphinx.proxy.v1.ProxySignResponse.MsgTx:type_name -> sphinx.plugin.v1.MsgTx
	24, // 24: sphinx.proxy.v1.ProxySignResponseInfo.Message:type_name -> sphinx.plugin.v1.UnsignedMessage
	25, // 25: sphinx.proxy.v1.ProxySignResponseInfo.Signature:type_name -> sphinx.plugin.v1.Signature
	27, // 26: sphinx.proxy.v1.SphinxProxy.Version:input_type -> google.protobuf.Empty
	2,  // 27: sphinx.proxy.v1.SphinxProxy.GetBalance:input_type -> sphinx.proxy.v1.GetBalanceRequest
	5,  // 28: sphinx.proxy.v1.SphinxProxy.CreateWallet:input_type -> sphinx.proxy.v1.CreateWalletRequest
	8,  // 29: sphinx.proxy.v1.SphinxProxy.CreateTransaction:input_type -> sphinx.proxy.v1.CreateTransactionRequest
	10, // 30: sphinx.proxy.v1.SphinxProxy.UpdateTransaction:input_type -> sphinx.proxy.v1.UpdateTransactionRequest
	12, // 31: sphinx.proxy.v1.SphinxProxy.GetTransaction:input_type -> sphinx.proxy.v1.GetTransactionRequest
	15, // 32: sphinx.proxy.v1.SphinxProxy.GetTransactions:input_type -> sphinx.proxy.v1.GetTransactionsRequest
	17, // 33: sphinx.proxy.v1.SphinxProxy.ProxyPlugin:input_type -> sphinx.proxy.v1.ProxyPluginResponse
	20, // 34: sphinx.proxy.v1.SphinxProxy.ProxySign:input_type -> sphinx.proxy.v1.ProxySignResponse
	1,  // 35: sphinx.proxy.v1.SphinxProxy.Version:output_type -> sphinx.proxy.v1.VersionResponse
	4,  // 36: sphinx.proxy.v1.SphinxProxy.GetBalance:output_type -> sphinx.proxy.v1.GetBalanceResponse
	7,  // 37: sphinx.proxy.v1.SphinxProxy.CreateWallet:output_type -> sphinx.proxy.v1.CreateWalletResponse
	9,  // 38: sphinx.proxy.v1.SphinxProxy.CreateTransaction:output_type -> sphinx.proxy.v1.CreateTransactionResponse
	11, // 39: sphinx.proxy.v1.SphinxProxy.UpdateTransaction:output_type -> sphinx.proxy.v1.UpdateTransactionResponse
	14, // 40: sphinx.proxy.v1.SphinxProxy.GetTransaction:output_type -> sphinx.proxy.v1.GetTransactionResponse
	16, // 41: sphinx.proxy.v1.SphinxProxy.GetTransactions:output_type -> sphinx.proxy.v1.GetTransactionsResponse
	18, // 42: sphinx.proxy.v1.SphinxProxy.ProxyPlugin:output_type -> sphinx.proxy.v1.ProxyPluginRequest
	19, // 43: sphinx.proxy.v1.SphinxProxy.ProxySign:output_type -> sphinx.proxy.v1.ProxySignRequest
	35, // [35:44] is the sub-list for method output_type
	26, // [26:35] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_npool_sphinxproxy_sphinxproxy_proto_init() }
func file_npool_sphinxproxy_sphinxproxy_proto_init() {
	if File_npool_sphinxproxy_sphinxproxy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalanceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBalanceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWalletRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWalletResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyPluginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyPluginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxySignRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxySignResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_sphinxproxy_sphinxproxy_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxySignResponseInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_sphinxproxy_sphinxproxy_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_sphinxproxy_sphinxproxy_proto_goTypes,
		DependencyIndexes: file_npool_sphinxproxy_sphinxproxy_proto_depIdxs,
		EnumInfos:         file_npool_sphinxproxy_sphinxproxy_proto_enumTypes,
		MessageInfos:      file_npool_sphinxproxy_sphinxproxy_proto_msgTypes,
	}.Build()
	File_npool_sphinxproxy_sphinxproxy_proto = out.File
	file_npool_sphinxproxy_sphinxproxy_proto_rawDesc = nil
	file_npool_sphinxproxy_sphinxproxy_proto_goTypes = nil
	file_npool_sphinxproxy_sphinxproxy_proto_depIdxs = nil
}
