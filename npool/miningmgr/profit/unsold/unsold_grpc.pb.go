// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/miningmgr/profit/unsold/unsold.proto

package unsold

import (
	context "context"
	npool "github.com/NpoolPlatform/message/npool"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProfitUnsoldClient is the client API for ProfitUnsold service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProfitUnsoldClient interface {
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*npool.VersionResponse, error)
	CreateDetail(ctx context.Context, in *CreateDetailRequest, opts ...grpc.CallOption) (*CreateDetailResponse, error)
	CreateDetails(ctx context.Context, in *CreateDetailsRequest, opts ...grpc.CallOption) (*CreateDetailsResponse, error)
	GetDetail(ctx context.Context, in *GetDetailRequest, opts ...grpc.CallOption) (*GetDetailResponse, error)
	GetDetailOnly(ctx context.Context, in *GetDetailOnlyRequest, opts ...grpc.CallOption) (*GetDetailOnlyResponse, error)
	GetDetails(ctx context.Context, in *GetDetailsRequest, opts ...grpc.CallOption) (*GetDetailsResponse, error)
	ExistDetail(ctx context.Context, in *ExistDetailRequest, opts ...grpc.CallOption) (*ExistDetailResponse, error)
	ExistDetailConds(ctx context.Context, in *ExistDetailCondsRequest, opts ...grpc.CallOption) (*ExistDetailCondsResponse, error)
	CountDetails(ctx context.Context, in *CountDetailsRequest, opts ...grpc.CallOption) (*CountDetailsResponse, error)
}

type profitUnsoldClient struct {
	cc grpc.ClientConnInterface
}

func NewProfitUnsoldClient(cc grpc.ClientConnInterface) ProfitUnsoldClient {
	return &profitUnsoldClient{cc}
}

func (c *profitUnsoldClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*npool.VersionResponse, error) {
	out := new(npool.VersionResponse)
	err := c.cc.Invoke(ctx, "/mining.manager.profit.unsold.v1.ProfitUnsold/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profitUnsoldClient) CreateDetail(ctx context.Context, in *CreateDetailRequest, opts ...grpc.CallOption) (*CreateDetailResponse, error) {
	out := new(CreateDetailResponse)
	err := c.cc.Invoke(ctx, "/mining.manager.profit.unsold.v1.ProfitUnsold/CreateDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profitUnsoldClient) CreateDetails(ctx context.Context, in *CreateDetailsRequest, opts ...grpc.CallOption) (*CreateDetailsResponse, error) {
	out := new(CreateDetailsResponse)
	err := c.cc.Invoke(ctx, "/mining.manager.profit.unsold.v1.ProfitUnsold/CreateDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profitUnsoldClient) GetDetail(ctx context.Context, in *GetDetailRequest, opts ...grpc.CallOption) (*GetDetailResponse, error) {
	out := new(GetDetailResponse)
	err := c.cc.Invoke(ctx, "/mining.manager.profit.unsold.v1.ProfitUnsold/GetDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profitUnsoldClient) GetDetailOnly(ctx context.Context, in *GetDetailOnlyRequest, opts ...grpc.CallOption) (*GetDetailOnlyResponse, error) {
	out := new(GetDetailOnlyResponse)
	err := c.cc.Invoke(ctx, "/mining.manager.profit.unsold.v1.ProfitUnsold/GetDetailOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profitUnsoldClient) GetDetails(ctx context.Context, in *GetDetailsRequest, opts ...grpc.CallOption) (*GetDetailsResponse, error) {
	out := new(GetDetailsResponse)
	err := c.cc.Invoke(ctx, "/mining.manager.profit.unsold.v1.ProfitUnsold/GetDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profitUnsoldClient) ExistDetail(ctx context.Context, in *ExistDetailRequest, opts ...grpc.CallOption) (*ExistDetailResponse, error) {
	out := new(ExistDetailResponse)
	err := c.cc.Invoke(ctx, "/mining.manager.profit.unsold.v1.ProfitUnsold/ExistDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profitUnsoldClient) ExistDetailConds(ctx context.Context, in *ExistDetailCondsRequest, opts ...grpc.CallOption) (*ExistDetailCondsResponse, error) {
	out := new(ExistDetailCondsResponse)
	err := c.cc.Invoke(ctx, "/mining.manager.profit.unsold.v1.ProfitUnsold/ExistDetailConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profitUnsoldClient) CountDetails(ctx context.Context, in *CountDetailsRequest, opts ...grpc.CallOption) (*CountDetailsResponse, error) {
	out := new(CountDetailsResponse)
	err := c.cc.Invoke(ctx, "/mining.manager.profit.unsold.v1.ProfitUnsold/CountDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfitUnsoldServer is the server API for ProfitUnsold service.
// All implementations must embed UnimplementedProfitUnsoldServer
// for forward compatibility
type ProfitUnsoldServer interface {
	Version(context.Context, *emptypb.Empty) (*npool.VersionResponse, error)
	CreateDetail(context.Context, *CreateDetailRequest) (*CreateDetailResponse, error)
	CreateDetails(context.Context, *CreateDetailsRequest) (*CreateDetailsResponse, error)
	GetDetail(context.Context, *GetDetailRequest) (*GetDetailResponse, error)
	GetDetailOnly(context.Context, *GetDetailOnlyRequest) (*GetDetailOnlyResponse, error)
	GetDetails(context.Context, *GetDetailsRequest) (*GetDetailsResponse, error)
	ExistDetail(context.Context, *ExistDetailRequest) (*ExistDetailResponse, error)
	ExistDetailConds(context.Context, *ExistDetailCondsRequest) (*ExistDetailCondsResponse, error)
	CountDetails(context.Context, *CountDetailsRequest) (*CountDetailsResponse, error)
	mustEmbedUnimplementedProfitUnsoldServer()
}

// UnimplementedProfitUnsoldServer must be embedded to have forward compatible implementations.
type UnimplementedProfitUnsoldServer struct {
}

func (UnimplementedProfitUnsoldServer) Version(context.Context, *emptypb.Empty) (*npool.VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedProfitUnsoldServer) CreateDetail(context.Context, *CreateDetailRequest) (*CreateDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDetail not implemented")
}
func (UnimplementedProfitUnsoldServer) CreateDetails(context.Context, *CreateDetailsRequest) (*CreateDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDetails not implemented")
}
func (UnimplementedProfitUnsoldServer) GetDetail(context.Context, *GetDetailRequest) (*GetDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetail not implemented")
}
func (UnimplementedProfitUnsoldServer) GetDetailOnly(context.Context, *GetDetailOnlyRequest) (*GetDetailOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetailOnly not implemented")
}
func (UnimplementedProfitUnsoldServer) GetDetails(context.Context, *GetDetailsRequest) (*GetDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetails not implemented")
}
func (UnimplementedProfitUnsoldServer) ExistDetail(context.Context, *ExistDetailRequest) (*ExistDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistDetail not implemented")
}
func (UnimplementedProfitUnsoldServer) ExistDetailConds(context.Context, *ExistDetailCondsRequest) (*ExistDetailCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistDetailConds not implemented")
}
func (UnimplementedProfitUnsoldServer) CountDetails(context.Context, *CountDetailsRequest) (*CountDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountDetails not implemented")
}
func (UnimplementedProfitUnsoldServer) mustEmbedUnimplementedProfitUnsoldServer() {}

// UnsafeProfitUnsoldServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProfitUnsoldServer will
// result in compilation errors.
type UnsafeProfitUnsoldServer interface {
	mustEmbedUnimplementedProfitUnsoldServer()
}

func RegisterProfitUnsoldServer(s grpc.ServiceRegistrar, srv ProfitUnsoldServer) {
	s.RegisterService(&ProfitUnsold_ServiceDesc, srv)
}

func _ProfitUnsold_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfitUnsoldServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mining.manager.profit.unsold.v1.ProfitUnsold/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfitUnsoldServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfitUnsold_CreateDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfitUnsoldServer).CreateDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mining.manager.profit.unsold.v1.ProfitUnsold/CreateDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfitUnsoldServer).CreateDetail(ctx, req.(*CreateDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfitUnsold_CreateDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfitUnsoldServer).CreateDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mining.manager.profit.unsold.v1.ProfitUnsold/CreateDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfitUnsoldServer).CreateDetails(ctx, req.(*CreateDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfitUnsold_GetDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfitUnsoldServer).GetDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mining.manager.profit.unsold.v1.ProfitUnsold/GetDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfitUnsoldServer).GetDetail(ctx, req.(*GetDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfitUnsold_GetDetailOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfitUnsoldServer).GetDetailOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mining.manager.profit.unsold.v1.ProfitUnsold/GetDetailOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfitUnsoldServer).GetDetailOnly(ctx, req.(*GetDetailOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfitUnsold_GetDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfitUnsoldServer).GetDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mining.manager.profit.unsold.v1.ProfitUnsold/GetDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfitUnsoldServer).GetDetails(ctx, req.(*GetDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfitUnsold_ExistDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfitUnsoldServer).ExistDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mining.manager.profit.unsold.v1.ProfitUnsold/ExistDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfitUnsoldServer).ExistDetail(ctx, req.(*ExistDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfitUnsold_ExistDetailConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistDetailCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfitUnsoldServer).ExistDetailConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mining.manager.profit.unsold.v1.ProfitUnsold/ExistDetailConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfitUnsoldServer).ExistDetailConds(ctx, req.(*ExistDetailCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfitUnsold_CountDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfitUnsoldServer).CountDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mining.manager.profit.unsold.v1.ProfitUnsold/CountDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfitUnsoldServer).CountDetails(ctx, req.(*CountDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProfitUnsold_ServiceDesc is the grpc.ServiceDesc for ProfitUnsold service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProfitUnsold_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mining.manager.profit.unsold.v1.ProfitUnsold",
	HandlerType: (*ProfitUnsoldServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _ProfitUnsold_Version_Handler,
		},
		{
			MethodName: "CreateDetail",
			Handler:    _ProfitUnsold_CreateDetail_Handler,
		},
		{
			MethodName: "CreateDetails",
			Handler:    _ProfitUnsold_CreateDetails_Handler,
		},
		{
			MethodName: "GetDetail",
			Handler:    _ProfitUnsold_GetDetail_Handler,
		},
		{
			MethodName: "GetDetailOnly",
			Handler:    _ProfitUnsold_GetDetailOnly_Handler,
		},
		{
			MethodName: "GetDetails",
			Handler:    _ProfitUnsold_GetDetails_Handler,
		},
		{
			MethodName: "ExistDetail",
			Handler:    _ProfitUnsold_ExistDetail_Handler,
		},
		{
			MethodName: "ExistDetailConds",
			Handler:    _ProfitUnsold_ExistDetailConds_Handler,
		},
		{
			MethodName: "CountDetails",
			Handler:    _ProfitUnsold_CountDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/miningmgr/profit/unsold/unsold.proto",
}
