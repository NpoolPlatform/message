// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/miningmgr/profit/detail/detail.proto

package detail

import (
	context "context"
	npool "github.com/NpoolPlatform/message/npool"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProfitDetailClient is the client API for ProfitDetail service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProfitDetailClient interface {
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*npool.VersionResponse, error)
	CreateDetail(ctx context.Context, in *CreateDetailRequest, opts ...grpc.CallOption) (*CreateDetailResponse, error)
	CreateDetails(ctx context.Context, in *CreateDetailsRequest, opts ...grpc.CallOption) (*CreateDetailsResponse, error)
	GetDetail(ctx context.Context, in *GetDetailRequest, opts ...grpc.CallOption) (*GetDetailResponse, error)
	GetDetailOnly(ctx context.Context, in *GetDetailOnlyRequest, opts ...grpc.CallOption) (*GetDetailOnlyResponse, error)
	GetDetails(ctx context.Context, in *GetDetailsRequest, opts ...grpc.CallOption) (*GetDetailsResponse, error)
	ExistDetail(ctx context.Context, in *ExistDetailRequest, opts ...grpc.CallOption) (*ExistDetailResponse, error)
	ExistDetailConds(ctx context.Context, in *ExistDetailCondsRequest, opts ...grpc.CallOption) (*ExistDetailCondsResponse, error)
	CountDetails(ctx context.Context, in *CountDetailsRequest, opts ...grpc.CallOption) (*CountDetailsResponse, error)
}

type profitDetailClient struct {
	cc grpc.ClientConnInterface
}

func NewProfitDetailClient(cc grpc.ClientConnInterface) ProfitDetailClient {
	return &profitDetailClient{cc}
}

func (c *profitDetailClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*npool.VersionResponse, error) {
	out := new(npool.VersionResponse)
	err := c.cc.Invoke(ctx, "/mining.manager.profit.detail.v1.ProfitDetail/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profitDetailClient) CreateDetail(ctx context.Context, in *CreateDetailRequest, opts ...grpc.CallOption) (*CreateDetailResponse, error) {
	out := new(CreateDetailResponse)
	err := c.cc.Invoke(ctx, "/mining.manager.profit.detail.v1.ProfitDetail/CreateDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profitDetailClient) CreateDetails(ctx context.Context, in *CreateDetailsRequest, opts ...grpc.CallOption) (*CreateDetailsResponse, error) {
	out := new(CreateDetailsResponse)
	err := c.cc.Invoke(ctx, "/mining.manager.profit.detail.v1.ProfitDetail/CreateDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profitDetailClient) GetDetail(ctx context.Context, in *GetDetailRequest, opts ...grpc.CallOption) (*GetDetailResponse, error) {
	out := new(GetDetailResponse)
	err := c.cc.Invoke(ctx, "/mining.manager.profit.detail.v1.ProfitDetail/GetDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profitDetailClient) GetDetailOnly(ctx context.Context, in *GetDetailOnlyRequest, opts ...grpc.CallOption) (*GetDetailOnlyResponse, error) {
	out := new(GetDetailOnlyResponse)
	err := c.cc.Invoke(ctx, "/mining.manager.profit.detail.v1.ProfitDetail/GetDetailOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profitDetailClient) GetDetails(ctx context.Context, in *GetDetailsRequest, opts ...grpc.CallOption) (*GetDetailsResponse, error) {
	out := new(GetDetailsResponse)
	err := c.cc.Invoke(ctx, "/mining.manager.profit.detail.v1.ProfitDetail/GetDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profitDetailClient) ExistDetail(ctx context.Context, in *ExistDetailRequest, opts ...grpc.CallOption) (*ExistDetailResponse, error) {
	out := new(ExistDetailResponse)
	err := c.cc.Invoke(ctx, "/mining.manager.profit.detail.v1.ProfitDetail/ExistDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profitDetailClient) ExistDetailConds(ctx context.Context, in *ExistDetailCondsRequest, opts ...grpc.CallOption) (*ExistDetailCondsResponse, error) {
	out := new(ExistDetailCondsResponse)
	err := c.cc.Invoke(ctx, "/mining.manager.profit.detail.v1.ProfitDetail/ExistDetailConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profitDetailClient) CountDetails(ctx context.Context, in *CountDetailsRequest, opts ...grpc.CallOption) (*CountDetailsResponse, error) {
	out := new(CountDetailsResponse)
	err := c.cc.Invoke(ctx, "/mining.manager.profit.detail.v1.ProfitDetail/CountDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfitDetailServer is the server API for ProfitDetail service.
// All implementations must embed UnimplementedProfitDetailServer
// for forward compatibility
type ProfitDetailServer interface {
	Version(context.Context, *emptypb.Empty) (*npool.VersionResponse, error)
	CreateDetail(context.Context, *CreateDetailRequest) (*CreateDetailResponse, error)
	CreateDetails(context.Context, *CreateDetailsRequest) (*CreateDetailsResponse, error)
	GetDetail(context.Context, *GetDetailRequest) (*GetDetailResponse, error)
	GetDetailOnly(context.Context, *GetDetailOnlyRequest) (*GetDetailOnlyResponse, error)
	GetDetails(context.Context, *GetDetailsRequest) (*GetDetailsResponse, error)
	ExistDetail(context.Context, *ExistDetailRequest) (*ExistDetailResponse, error)
	ExistDetailConds(context.Context, *ExistDetailCondsRequest) (*ExistDetailCondsResponse, error)
	CountDetails(context.Context, *CountDetailsRequest) (*CountDetailsResponse, error)
	mustEmbedUnimplementedProfitDetailServer()
}

// UnimplementedProfitDetailServer must be embedded to have forward compatible implementations.
type UnimplementedProfitDetailServer struct {
}

func (UnimplementedProfitDetailServer) Version(context.Context, *emptypb.Empty) (*npool.VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedProfitDetailServer) CreateDetail(context.Context, *CreateDetailRequest) (*CreateDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDetail not implemented")
}
func (UnimplementedProfitDetailServer) CreateDetails(context.Context, *CreateDetailsRequest) (*CreateDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDetails not implemented")
}
func (UnimplementedProfitDetailServer) GetDetail(context.Context, *GetDetailRequest) (*GetDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetail not implemented")
}
func (UnimplementedProfitDetailServer) GetDetailOnly(context.Context, *GetDetailOnlyRequest) (*GetDetailOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetailOnly not implemented")
}
func (UnimplementedProfitDetailServer) GetDetails(context.Context, *GetDetailsRequest) (*GetDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetails not implemented")
}
func (UnimplementedProfitDetailServer) ExistDetail(context.Context, *ExistDetailRequest) (*ExistDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistDetail not implemented")
}
func (UnimplementedProfitDetailServer) ExistDetailConds(context.Context, *ExistDetailCondsRequest) (*ExistDetailCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistDetailConds not implemented")
}
func (UnimplementedProfitDetailServer) CountDetails(context.Context, *CountDetailsRequest) (*CountDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountDetails not implemented")
}
func (UnimplementedProfitDetailServer) mustEmbedUnimplementedProfitDetailServer() {}

// UnsafeProfitDetailServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProfitDetailServer will
// result in compilation errors.
type UnsafeProfitDetailServer interface {
	mustEmbedUnimplementedProfitDetailServer()
}

func RegisterProfitDetailServer(s grpc.ServiceRegistrar, srv ProfitDetailServer) {
	s.RegisterService(&ProfitDetail_ServiceDesc, srv)
}

func _ProfitDetail_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfitDetailServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mining.manager.profit.detail.v1.ProfitDetail/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfitDetailServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfitDetail_CreateDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfitDetailServer).CreateDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mining.manager.profit.detail.v1.ProfitDetail/CreateDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfitDetailServer).CreateDetail(ctx, req.(*CreateDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfitDetail_CreateDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfitDetailServer).CreateDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mining.manager.profit.detail.v1.ProfitDetail/CreateDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfitDetailServer).CreateDetails(ctx, req.(*CreateDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfitDetail_GetDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfitDetailServer).GetDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mining.manager.profit.detail.v1.ProfitDetail/GetDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfitDetailServer).GetDetail(ctx, req.(*GetDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfitDetail_GetDetailOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfitDetailServer).GetDetailOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mining.manager.profit.detail.v1.ProfitDetail/GetDetailOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfitDetailServer).GetDetailOnly(ctx, req.(*GetDetailOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfitDetail_GetDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfitDetailServer).GetDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mining.manager.profit.detail.v1.ProfitDetail/GetDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfitDetailServer).GetDetails(ctx, req.(*GetDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfitDetail_ExistDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfitDetailServer).ExistDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mining.manager.profit.detail.v1.ProfitDetail/ExistDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfitDetailServer).ExistDetail(ctx, req.(*ExistDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfitDetail_ExistDetailConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistDetailCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfitDetailServer).ExistDetailConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mining.manager.profit.detail.v1.ProfitDetail/ExistDetailConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfitDetailServer).ExistDetailConds(ctx, req.(*ExistDetailCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfitDetail_CountDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfitDetailServer).CountDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mining.manager.profit.detail.v1.ProfitDetail/CountDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfitDetailServer).CountDetails(ctx, req.(*CountDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProfitDetail_ServiceDesc is the grpc.ServiceDesc for ProfitDetail service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProfitDetail_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mining.manager.profit.detail.v1.ProfitDetail",
	HandlerType: (*ProfitDetailServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _ProfitDetail_Version_Handler,
		},
		{
			MethodName: "CreateDetail",
			Handler:    _ProfitDetail_CreateDetail_Handler,
		},
		{
			MethodName: "CreateDetails",
			Handler:    _ProfitDetail_CreateDetails_Handler,
		},
		{
			MethodName: "GetDetail",
			Handler:    _ProfitDetail_GetDetail_Handler,
		},
		{
			MethodName: "GetDetailOnly",
			Handler:    _ProfitDetail_GetDetailOnly_Handler,
		},
		{
			MethodName: "GetDetails",
			Handler:    _ProfitDetail_GetDetails_Handler,
		},
		{
			MethodName: "ExistDetail",
			Handler:    _ProfitDetail_ExistDetail_Handler,
		},
		{
			MethodName: "ExistDetailConds",
			Handler:    _ProfitDetail_ExistDetailConds_Handler,
		},
		{
			MethodName: "CountDetails",
			Handler:    _ProfitDetail_CountDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/miningmgr/profit/detail/detail.proto",
}
