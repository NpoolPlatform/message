// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/cloud-hashing-apis/cloud-hashing-apis.proto

package cloud_hashing_apis

import (
	context "context"
	npool "github.com/NpoolPlatform/message/npool"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CloudHashingApisClient is the client API for CloudHashingApis service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudHashingApisClient interface {
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*npool.VersionResponse, error)
	GetGoods(ctx context.Context, in *GetGoodsRequest, opts ...grpc.CallOption) (*GetGoodsResponse, error)
	GetGoodsByApp(ctx context.Context, in *GetGoodsByAppRequest, opts ...grpc.CallOption) (*GetGoodsByAppResponse, error)
	CreateGood(ctx context.Context, in *CreateGoodRequest, opts ...grpc.CallOption) (*CreateGoodResponse, error)
	GetGood(ctx context.Context, in *GetGoodRequest, opts ...grpc.CallOption) (*GetGoodResponse, error)
	GetRecommendGoodsByApp(ctx context.Context, in *GetRecommendGoodsByAppRequest, opts ...grpc.CallOption) (*GetRecommendGoodsByAppResponse, error)
	SubmitOrder(ctx context.Context, in *SubmitOrderRequest, opts ...grpc.CallOption) (*SubmitOrderResponse, error)
	CreateOrderPayment(ctx context.Context, in *CreateOrderPaymentRequest, opts ...grpc.CallOption) (*CreateOrderPaymentResponse, error)
	GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error)
	GetOrdersByAppUser(ctx context.Context, in *GetOrdersByAppUserRequest, opts ...grpc.CallOption) (*GetOrdersByAppUserResponse, error)
	GetOrdersByApp(ctx context.Context, in *GetOrdersByAppRequest, opts ...grpc.CallOption) (*GetOrdersByAppResponse, error)
	GetOrdersByGood(ctx context.Context, in *GetOrdersByGoodRequest, opts ...grpc.CallOption) (*GetOrdersByGoodResponse, error)
	Signup(ctx context.Context, in *SignupRequest, opts ...grpc.CallOption) (*SignupResponse, error)
	UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, opts ...grpc.CallOption) (*UpdatePasswordResponse, error)
	UpdatePasswordByAppUser(ctx context.Context, in *UpdatePasswordByAppUserRequest, opts ...grpc.CallOption) (*UpdatePasswordByAppUserResponse, error)
	UpdateEmailAddress(ctx context.Context, in *UpdateEmailAddressRequest, opts ...grpc.CallOption) (*UpdateEmailAddressResponse, error)
	UpdatePhoneNO(ctx context.Context, in *UpdatePhoneNORequest, opts ...grpc.CallOption) (*UpdatePhoneNOResponse, error)
	UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*UpdateAccountResponse, error)
	CreateAppUserExtra(ctx context.Context, in *CreateAppUserExtraRequest, opts ...grpc.CallOption) (*CreateAppUserExtraResponse, error)
	UpdateAppUserExtra(ctx context.Context, in *UpdateAppUserExtraRequest, opts ...grpc.CallOption) (*UpdateAppUserExtraResponse, error)
	GetReferrals(ctx context.Context, in *GetReferralsRequest, opts ...grpc.CallOption) (*GetReferralsResponse, error)
	GetLayeredReferrals(ctx context.Context, in *GetLayeredReferralsRequest, opts ...grpc.CallOption) (*GetLayeredReferralsResponse, error)
	GetKycReviews(ctx context.Context, in *GetKycReviewsRequest, opts ...grpc.CallOption) (*GetKycReviewsResponse, error)
	GetKycReviewsByApp(ctx context.Context, in *GetKycReviewsByAppRequest, opts ...grpc.CallOption) (*GetKycReviewsByAppResponse, error)
	GetKycReviewsByOtherApp(ctx context.Context, in *GetKycReviewsByOtherAppRequest, opts ...grpc.CallOption) (*GetKycReviewsByOtherAppResponse, error)
	GetGoodReviews(ctx context.Context, in *GetGoodReviewsRequest, opts ...grpc.CallOption) (*GetGoodReviewsResponse, error)
	GetWithdrawReviews(ctx context.Context, in *GetWithdrawReviewsRequest, opts ...grpc.CallOption) (*GetWithdrawReviewsResponse, error)
	GetWithdrawReviewsByApp(ctx context.Context, in *GetWithdrawReviewsByAppRequest, opts ...grpc.CallOption) (*GetWithdrawReviewsByAppResponse, error)
	GetWithdrawReviewsByOtherApp(ctx context.Context, in *GetWithdrawReviewsByOtherAppRequest, opts ...grpc.CallOption) (*GetWithdrawReviewsByOtherAppResponse, error)
	GetWithdrawAddressReviews(ctx context.Context, in *GetWithdrawAddressReviewsRequest, opts ...grpc.CallOption) (*GetWithdrawAddressReviewsResponse, error)
	GetWithdrawAddressReviewsByApp(ctx context.Context, in *GetWithdrawAddressReviewsByAppRequest, opts ...grpc.CallOption) (*GetWithdrawAddressReviewsByAppResponse, error)
	GetWithdrawAddressReviewsByOtherApp(ctx context.Context, in *GetWithdrawAddressReviewsByOtherAppRequest, opts ...grpc.CallOption) (*GetWithdrawAddressReviewsByOtherAppResponse, error)
	CreateKyc(ctx context.Context, in *CreateKycRequest, opts ...grpc.CallOption) (*CreateKycResponse, error)
	UpdateKyc(ctx context.Context, in *UpdateKycRequest, opts ...grpc.CallOption) (*UpdateKycResponse, error)
	GetKycByAppUser(ctx context.Context, in *GetKycByAppUserRequest, opts ...grpc.CallOption) (*GetKycByAppUserResponse, error)
	CreatePlatformCoinAccount(ctx context.Context, in *CreatePlatformCoinAccountRequest, opts ...grpc.CallOption) (*CreatePlatformCoinAccountResponse, error)
	CreateUserCoinAccount(ctx context.Context, in *CreateUserCoinAccountRequest, opts ...grpc.CallOption) (*CreateUserCoinAccountResponse, error)
	SubmitUserWithdraw(ctx context.Context, in *SubmitUserWithdrawRequest, opts ...grpc.CallOption) (*SubmitUserWithdrawResponse, error)
	UpdateUserWithdrawReview(ctx context.Context, in *UpdateUserWithdrawReviewRequest, opts ...grpc.CallOption) (*UpdateUserWithdrawReviewResponse, error)
	UpdateUserWithdrawReviewForOtherAppUser(ctx context.Context, in *UpdateUserWithdrawReviewForOtherAppUserRequest, opts ...grpc.CallOption) (*UpdateUserWithdrawReviewForOtherAppUserResponse, error)
	GetUserWithdrawsByAppUser(ctx context.Context, in *GetUserWithdrawsByAppUserRequest, opts ...grpc.CallOption) (*GetUserWithdrawsByAppUserResponse, error)
	SetWithdrawAddress(ctx context.Context, in *SetWithdrawAddressRequest, opts ...grpc.CallOption) (*SetWithdrawAddressResponse, error)
	DeleteWithdrawAddress(ctx context.Context, in *DeleteWithdrawAddressRequest, opts ...grpc.CallOption) (*DeleteWithdrawAddressResponse, error)
	GetWithdrawAddressesByAppUser(ctx context.Context, in *GetWithdrawAddressesByAppUserRequest, opts ...grpc.CallOption) (*GetWithdrawAddressesByAppUserResponse, error)
	GetCouponsByAppUser(ctx context.Context, in *GetCouponsByAppUserRequest, opts ...grpc.CallOption) (*GetCouponsByAppUserResponse, error)
	GetCommissionByAppUser(ctx context.Context, in *GetCommissionByAppUserRequest, opts ...grpc.CallOption) (*GetCommissionByAppUserResponse, error)
	UpdateKycReview(ctx context.Context, in *UpdateKycReviewRequest, opts ...grpc.CallOption) (*UpdateKycReviewResponse, error)
	UpdateWithdrawReview(ctx context.Context, in *UpdateWithdrawReviewRequest, opts ...grpc.CallOption) (*UpdateWithdrawReviewResponse, error)
	UpdateWithdrawAddressReview(ctx context.Context, in *UpdateWithdrawAddressReviewRequest, opts ...grpc.CallOption) (*UpdateWithdrawAddressReviewResponse, error)
}

type cloudHashingApisClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudHashingApisClient(cc grpc.ClientConnInterface) CloudHashingApisClient {
	return &cloudHashingApisClient{cc}
}

func (c *cloudHashingApisClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*npool.VersionResponse, error) {
	out := new(npool.VersionResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.apis.v1.CloudHashingApis/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingApisClient) GetGoods(ctx context.Context, in *GetGoodsRequest, opts ...grpc.CallOption) (*GetGoodsResponse, error) {
	out := new(GetGoodsResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.apis.v1.CloudHashingApis/GetGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingApisClient) GetGoodsByApp(ctx context.Context, in *GetGoodsByAppRequest, opts ...grpc.CallOption) (*GetGoodsByAppResponse, error) {
	out := new(GetGoodsByAppResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.apis.v1.CloudHashingApis/GetGoodsByApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingApisClient) CreateGood(ctx context.Context, in *CreateGoodRequest, opts ...grpc.CallOption) (*CreateGoodResponse, error) {
	out := new(CreateGoodResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.apis.v1.CloudHashingApis/CreateGood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingApisClient) GetGood(ctx context.Context, in *GetGoodRequest, opts ...grpc.CallOption) (*GetGoodResponse, error) {
	out := new(GetGoodResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.apis.v1.CloudHashingApis/GetGood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingApisClient) GetRecommendGoodsByApp(ctx context.Context, in *GetRecommendGoodsByAppRequest, opts ...grpc.CallOption) (*GetRecommendGoodsByAppResponse, error) {
	out := new(GetRecommendGoodsByAppResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.apis.v1.CloudHashingApis/GetRecommendGoodsByApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingApisClient) SubmitOrder(ctx context.Context, in *SubmitOrderRequest, opts ...grpc.CallOption) (*SubmitOrderResponse, error) {
	out := new(SubmitOrderResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.apis.v1.CloudHashingApis/SubmitOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingApisClient) CreateOrderPayment(ctx context.Context, in *CreateOrderPaymentRequest, opts ...grpc.CallOption) (*CreateOrderPaymentResponse, error) {
	out := new(CreateOrderPaymentResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.apis.v1.CloudHashingApis/CreateOrderPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingApisClient) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error) {
	out := new(GetOrderResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.apis.v1.CloudHashingApis/GetOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingApisClient) GetOrdersByAppUser(ctx context.Context, in *GetOrdersByAppUserRequest, opts ...grpc.CallOption) (*GetOrdersByAppUserResponse, error) {
	out := new(GetOrdersByAppUserResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.apis.v1.CloudHashingApis/GetOrdersByAppUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingApisClient) GetOrdersByApp(ctx context.Context, in *GetOrdersByAppRequest, opts ...grpc.CallOption) (*GetOrdersByAppResponse, error) {
	out := new(GetOrdersByAppResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.apis.v1.CloudHashingApis/GetOrdersByApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingApisClient) GetOrdersByGood(ctx context.Context, in *GetOrdersByGoodRequest, opts ...grpc.CallOption) (*GetOrdersByGoodResponse, error) {
	out := new(GetOrdersByGoodResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.apis.v1.CloudHashingApis/GetOrdersByGood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingApisClient) Signup(ctx context.Context, in *SignupRequest, opts ...grpc.CallOption) (*SignupResponse, error) {
	out := new(SignupResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.apis.v1.CloudHashingApis/Signup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingApisClient) UpdatePassword(ctx context.Context, in *UpdatePasswordRequest, opts ...grpc.CallOption) (*UpdatePasswordResponse, error) {
	out := new(UpdatePasswordResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.apis.v1.CloudHashingApis/UpdatePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingApisClient) UpdatePasswordByAppUser(ctx context.Context, in *UpdatePasswordByAppUserRequest, opts ...grpc.CallOption) (*UpdatePasswordByAppUserResponse, error) {
	out := new(UpdatePasswordByAppUserResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.apis.v1.CloudHashingApis/UpdatePasswordByAppUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingApisClient) UpdateEmailAddress(ctx context.Context, in *UpdateEmailAddressRequest, opts ...grpc.CallOption) (*UpdateEmailAddressResponse, error) {
	out := new(UpdateEmailAddressResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.apis.v1.CloudHashingApis/UpdateEmailAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingApisClient) UpdatePhoneNO(ctx context.Context, in *UpdatePhoneNORequest, opts ...grpc.CallOption) (*UpdatePhoneNOResponse, error) {
	out := new(UpdatePhoneNOResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.apis.v1.CloudHashingApis/UpdatePhoneNO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingApisClient) UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*UpdateAccountResponse, error) {
	out := new(UpdateAccountResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.apis.v1.CloudHashingApis/UpdateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingApisClient) CreateAppUserExtra(ctx context.Context, in *CreateAppUserExtraRequest, opts ...grpc.CallOption) (*CreateAppUserExtraResponse, error) {
	out := new(CreateAppUserExtraResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.apis.v1.CloudHashingApis/CreateAppUserExtra", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingApisClient) UpdateAppUserExtra(ctx context.Context, in *UpdateAppUserExtraRequest, opts ...grpc.CallOption) (*UpdateAppUserExtraResponse, error) {
	out := new(UpdateAppUserExtraResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.apis.v1.CloudHashingApis/UpdateAppUserExtra", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingApisClient) GetReferrals(ctx context.Context, in *GetReferralsRequest, opts ...grpc.CallOption) (*GetReferralsResponse, error) {
	out := new(GetReferralsResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.apis.v1.CloudHashingApis/GetReferrals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingApisClient) GetLayeredReferrals(ctx context.Context, in *GetLayeredReferralsRequest, opts ...grpc.CallOption) (*GetLayeredReferralsResponse, error) {
	out := new(GetLayeredReferralsResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.apis.v1.CloudHashingApis/GetLayeredReferrals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingApisClient) GetKycReviews(ctx context.Context, in *GetKycReviewsRequest, opts ...grpc.CallOption) (*GetKycReviewsResponse, error) {
	out := new(GetKycReviewsResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.apis.v1.CloudHashingApis/GetKycReviews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingApisClient) GetKycReviewsByApp(ctx context.Context, in *GetKycReviewsByAppRequest, opts ...grpc.CallOption) (*GetKycReviewsByAppResponse, error) {
	out := new(GetKycReviewsByAppResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.apis.v1.CloudHashingApis/GetKycReviewsByApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingApisClient) GetKycReviewsByOtherApp(ctx context.Context, in *GetKycReviewsByOtherAppRequest, opts ...grpc.CallOption) (*GetKycReviewsByOtherAppResponse, error) {
	out := new(GetKycReviewsByOtherAppResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.apis.v1.CloudHashingApis/GetKycReviewsByOtherApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingApisClient) GetGoodReviews(ctx context.Context, in *GetGoodReviewsRequest, opts ...grpc.CallOption) (*GetGoodReviewsResponse, error) {
	out := new(GetGoodReviewsResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.apis.v1.CloudHashingApis/GetGoodReviews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingApisClient) GetWithdrawReviews(ctx context.Context, in *GetWithdrawReviewsRequest, opts ...grpc.CallOption) (*GetWithdrawReviewsResponse, error) {
	out := new(GetWithdrawReviewsResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.apis.v1.CloudHashingApis/GetWithdrawReviews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingApisClient) GetWithdrawReviewsByApp(ctx context.Context, in *GetWithdrawReviewsByAppRequest, opts ...grpc.CallOption) (*GetWithdrawReviewsByAppResponse, error) {
	out := new(GetWithdrawReviewsByAppResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.apis.v1.CloudHashingApis/GetWithdrawReviewsByApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingApisClient) GetWithdrawReviewsByOtherApp(ctx context.Context, in *GetWithdrawReviewsByOtherAppRequest, opts ...grpc.CallOption) (*GetWithdrawReviewsByOtherAppResponse, error) {
	out := new(GetWithdrawReviewsByOtherAppResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.apis.v1.CloudHashingApis/GetWithdrawReviewsByOtherApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingApisClient) GetWithdrawAddressReviews(ctx context.Context, in *GetWithdrawAddressReviewsRequest, opts ...grpc.CallOption) (*GetWithdrawAddressReviewsResponse, error) {
	out := new(GetWithdrawAddressReviewsResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.apis.v1.CloudHashingApis/GetWithdrawAddressReviews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingApisClient) GetWithdrawAddressReviewsByApp(ctx context.Context, in *GetWithdrawAddressReviewsByAppRequest, opts ...grpc.CallOption) (*GetWithdrawAddressReviewsByAppResponse, error) {
	out := new(GetWithdrawAddressReviewsByAppResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.apis.v1.CloudHashingApis/GetWithdrawAddressReviewsByApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingApisClient) GetWithdrawAddressReviewsByOtherApp(ctx context.Context, in *GetWithdrawAddressReviewsByOtherAppRequest, opts ...grpc.CallOption) (*GetWithdrawAddressReviewsByOtherAppResponse, error) {
	out := new(GetWithdrawAddressReviewsByOtherAppResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.apis.v1.CloudHashingApis/GetWithdrawAddressReviewsByOtherApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingApisClient) CreateKyc(ctx context.Context, in *CreateKycRequest, opts ...grpc.CallOption) (*CreateKycResponse, error) {
	out := new(CreateKycResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.apis.v1.CloudHashingApis/CreateKyc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingApisClient) UpdateKyc(ctx context.Context, in *UpdateKycRequest, opts ...grpc.CallOption) (*UpdateKycResponse, error) {
	out := new(UpdateKycResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.apis.v1.CloudHashingApis/UpdateKyc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingApisClient) GetKycByAppUser(ctx context.Context, in *GetKycByAppUserRequest, opts ...grpc.CallOption) (*GetKycByAppUserResponse, error) {
	out := new(GetKycByAppUserResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.apis.v1.CloudHashingApis/GetKycByAppUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingApisClient) CreatePlatformCoinAccount(ctx context.Context, in *CreatePlatformCoinAccountRequest, opts ...grpc.CallOption) (*CreatePlatformCoinAccountResponse, error) {
	out := new(CreatePlatformCoinAccountResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.apis.v1.CloudHashingApis/CreatePlatformCoinAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingApisClient) CreateUserCoinAccount(ctx context.Context, in *CreateUserCoinAccountRequest, opts ...grpc.CallOption) (*CreateUserCoinAccountResponse, error) {
	out := new(CreateUserCoinAccountResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.apis.v1.CloudHashingApis/CreateUserCoinAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingApisClient) SubmitUserWithdraw(ctx context.Context, in *SubmitUserWithdrawRequest, opts ...grpc.CallOption) (*SubmitUserWithdrawResponse, error) {
	out := new(SubmitUserWithdrawResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.apis.v1.CloudHashingApis/SubmitUserWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingApisClient) UpdateUserWithdrawReview(ctx context.Context, in *UpdateUserWithdrawReviewRequest, opts ...grpc.CallOption) (*UpdateUserWithdrawReviewResponse, error) {
	out := new(UpdateUserWithdrawReviewResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.apis.v1.CloudHashingApis/UpdateUserWithdrawReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingApisClient) UpdateUserWithdrawReviewForOtherAppUser(ctx context.Context, in *UpdateUserWithdrawReviewForOtherAppUserRequest, opts ...grpc.CallOption) (*UpdateUserWithdrawReviewForOtherAppUserResponse, error) {
	out := new(UpdateUserWithdrawReviewForOtherAppUserResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.apis.v1.CloudHashingApis/UpdateUserWithdrawReviewForOtherAppUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingApisClient) GetUserWithdrawsByAppUser(ctx context.Context, in *GetUserWithdrawsByAppUserRequest, opts ...grpc.CallOption) (*GetUserWithdrawsByAppUserResponse, error) {
	out := new(GetUserWithdrawsByAppUserResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.apis.v1.CloudHashingApis/GetUserWithdrawsByAppUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingApisClient) SetWithdrawAddress(ctx context.Context, in *SetWithdrawAddressRequest, opts ...grpc.CallOption) (*SetWithdrawAddressResponse, error) {
	out := new(SetWithdrawAddressResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.apis.v1.CloudHashingApis/SetWithdrawAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingApisClient) DeleteWithdrawAddress(ctx context.Context, in *DeleteWithdrawAddressRequest, opts ...grpc.CallOption) (*DeleteWithdrawAddressResponse, error) {
	out := new(DeleteWithdrawAddressResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.apis.v1.CloudHashingApis/DeleteWithdrawAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingApisClient) GetWithdrawAddressesByAppUser(ctx context.Context, in *GetWithdrawAddressesByAppUserRequest, opts ...grpc.CallOption) (*GetWithdrawAddressesByAppUserResponse, error) {
	out := new(GetWithdrawAddressesByAppUserResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.apis.v1.CloudHashingApis/GetWithdrawAddressesByAppUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingApisClient) GetCouponsByAppUser(ctx context.Context, in *GetCouponsByAppUserRequest, opts ...grpc.CallOption) (*GetCouponsByAppUserResponse, error) {
	out := new(GetCouponsByAppUserResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.apis.v1.CloudHashingApis/GetCouponsByAppUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingApisClient) GetCommissionByAppUser(ctx context.Context, in *GetCommissionByAppUserRequest, opts ...grpc.CallOption) (*GetCommissionByAppUserResponse, error) {
	out := new(GetCommissionByAppUserResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.apis.v1.CloudHashingApis/GetCommissionByAppUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingApisClient) UpdateKycReview(ctx context.Context, in *UpdateKycReviewRequest, opts ...grpc.CallOption) (*UpdateKycReviewResponse, error) {
	out := new(UpdateKycReviewResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.apis.v1.CloudHashingApis/UpdateKycReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingApisClient) UpdateWithdrawReview(ctx context.Context, in *UpdateWithdrawReviewRequest, opts ...grpc.CallOption) (*UpdateWithdrawReviewResponse, error) {
	out := new(UpdateWithdrawReviewResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.apis.v1.CloudHashingApis/UpdateWithdrawReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingApisClient) UpdateWithdrawAddressReview(ctx context.Context, in *UpdateWithdrawAddressReviewRequest, opts ...grpc.CallOption) (*UpdateWithdrawAddressReviewResponse, error) {
	out := new(UpdateWithdrawAddressReviewResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.apis.v1.CloudHashingApis/UpdateWithdrawAddressReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudHashingApisServer is the server API for CloudHashingApis service.
// All implementations must embed UnimplementedCloudHashingApisServer
// for forward compatibility
type CloudHashingApisServer interface {
	Version(context.Context, *emptypb.Empty) (*npool.VersionResponse, error)
	GetGoods(context.Context, *GetGoodsRequest) (*GetGoodsResponse, error)
	GetGoodsByApp(context.Context, *GetGoodsByAppRequest) (*GetGoodsByAppResponse, error)
	CreateGood(context.Context, *CreateGoodRequest) (*CreateGoodResponse, error)
	GetGood(context.Context, *GetGoodRequest) (*GetGoodResponse, error)
	GetRecommendGoodsByApp(context.Context, *GetRecommendGoodsByAppRequest) (*GetRecommendGoodsByAppResponse, error)
	SubmitOrder(context.Context, *SubmitOrderRequest) (*SubmitOrderResponse, error)
	CreateOrderPayment(context.Context, *CreateOrderPaymentRequest) (*CreateOrderPaymentResponse, error)
	GetOrder(context.Context, *GetOrderRequest) (*GetOrderResponse, error)
	GetOrdersByAppUser(context.Context, *GetOrdersByAppUserRequest) (*GetOrdersByAppUserResponse, error)
	GetOrdersByApp(context.Context, *GetOrdersByAppRequest) (*GetOrdersByAppResponse, error)
	GetOrdersByGood(context.Context, *GetOrdersByGoodRequest) (*GetOrdersByGoodResponse, error)
	Signup(context.Context, *SignupRequest) (*SignupResponse, error)
	UpdatePassword(context.Context, *UpdatePasswordRequest) (*UpdatePasswordResponse, error)
	UpdatePasswordByAppUser(context.Context, *UpdatePasswordByAppUserRequest) (*UpdatePasswordByAppUserResponse, error)
	UpdateEmailAddress(context.Context, *UpdateEmailAddressRequest) (*UpdateEmailAddressResponse, error)
	UpdatePhoneNO(context.Context, *UpdatePhoneNORequest) (*UpdatePhoneNOResponse, error)
	UpdateAccount(context.Context, *UpdateAccountRequest) (*UpdateAccountResponse, error)
	CreateAppUserExtra(context.Context, *CreateAppUserExtraRequest) (*CreateAppUserExtraResponse, error)
	UpdateAppUserExtra(context.Context, *UpdateAppUserExtraRequest) (*UpdateAppUserExtraResponse, error)
	GetReferrals(context.Context, *GetReferralsRequest) (*GetReferralsResponse, error)
	GetLayeredReferrals(context.Context, *GetLayeredReferralsRequest) (*GetLayeredReferralsResponse, error)
	GetKycReviews(context.Context, *GetKycReviewsRequest) (*GetKycReviewsResponse, error)
	GetKycReviewsByApp(context.Context, *GetKycReviewsByAppRequest) (*GetKycReviewsByAppResponse, error)
	GetKycReviewsByOtherApp(context.Context, *GetKycReviewsByOtherAppRequest) (*GetKycReviewsByOtherAppResponse, error)
	GetGoodReviews(context.Context, *GetGoodReviewsRequest) (*GetGoodReviewsResponse, error)
	GetWithdrawReviews(context.Context, *GetWithdrawReviewsRequest) (*GetWithdrawReviewsResponse, error)
	GetWithdrawReviewsByApp(context.Context, *GetWithdrawReviewsByAppRequest) (*GetWithdrawReviewsByAppResponse, error)
	GetWithdrawReviewsByOtherApp(context.Context, *GetWithdrawReviewsByOtherAppRequest) (*GetWithdrawReviewsByOtherAppResponse, error)
	GetWithdrawAddressReviews(context.Context, *GetWithdrawAddressReviewsRequest) (*GetWithdrawAddressReviewsResponse, error)
	GetWithdrawAddressReviewsByApp(context.Context, *GetWithdrawAddressReviewsByAppRequest) (*GetWithdrawAddressReviewsByAppResponse, error)
	GetWithdrawAddressReviewsByOtherApp(context.Context, *GetWithdrawAddressReviewsByOtherAppRequest) (*GetWithdrawAddressReviewsByOtherAppResponse, error)
	CreateKyc(context.Context, *CreateKycRequest) (*CreateKycResponse, error)
	UpdateKyc(context.Context, *UpdateKycRequest) (*UpdateKycResponse, error)
	GetKycByAppUser(context.Context, *GetKycByAppUserRequest) (*GetKycByAppUserResponse, error)
	CreatePlatformCoinAccount(context.Context, *CreatePlatformCoinAccountRequest) (*CreatePlatformCoinAccountResponse, error)
	CreateUserCoinAccount(context.Context, *CreateUserCoinAccountRequest) (*CreateUserCoinAccountResponse, error)
	SubmitUserWithdraw(context.Context, *SubmitUserWithdrawRequest) (*SubmitUserWithdrawResponse, error)
	UpdateUserWithdrawReview(context.Context, *UpdateUserWithdrawReviewRequest) (*UpdateUserWithdrawReviewResponse, error)
	UpdateUserWithdrawReviewForOtherAppUser(context.Context, *UpdateUserWithdrawReviewForOtherAppUserRequest) (*UpdateUserWithdrawReviewForOtherAppUserResponse, error)
	GetUserWithdrawsByAppUser(context.Context, *GetUserWithdrawsByAppUserRequest) (*GetUserWithdrawsByAppUserResponse, error)
	SetWithdrawAddress(context.Context, *SetWithdrawAddressRequest) (*SetWithdrawAddressResponse, error)
	DeleteWithdrawAddress(context.Context, *DeleteWithdrawAddressRequest) (*DeleteWithdrawAddressResponse, error)
	GetWithdrawAddressesByAppUser(context.Context, *GetWithdrawAddressesByAppUserRequest) (*GetWithdrawAddressesByAppUserResponse, error)
	GetCouponsByAppUser(context.Context, *GetCouponsByAppUserRequest) (*GetCouponsByAppUserResponse, error)
	GetCommissionByAppUser(context.Context, *GetCommissionByAppUserRequest) (*GetCommissionByAppUserResponse, error)
	UpdateKycReview(context.Context, *UpdateKycReviewRequest) (*UpdateKycReviewResponse, error)
	UpdateWithdrawReview(context.Context, *UpdateWithdrawReviewRequest) (*UpdateWithdrawReviewResponse, error)
	UpdateWithdrawAddressReview(context.Context, *UpdateWithdrawAddressReviewRequest) (*UpdateWithdrawAddressReviewResponse, error)
	mustEmbedUnimplementedCloudHashingApisServer()
}

// UnimplementedCloudHashingApisServer must be embedded to have forward compatible implementations.
type UnimplementedCloudHashingApisServer struct {
}

func (UnimplementedCloudHashingApisServer) Version(context.Context, *emptypb.Empty) (*npool.VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedCloudHashingApisServer) GetGoods(context.Context, *GetGoodsRequest) (*GetGoodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoods not implemented")
}
func (UnimplementedCloudHashingApisServer) GetGoodsByApp(context.Context, *GetGoodsByAppRequest) (*GetGoodsByAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodsByApp not implemented")
}
func (UnimplementedCloudHashingApisServer) CreateGood(context.Context, *CreateGoodRequest) (*CreateGoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGood not implemented")
}
func (UnimplementedCloudHashingApisServer) GetGood(context.Context, *GetGoodRequest) (*GetGoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGood not implemented")
}
func (UnimplementedCloudHashingApisServer) GetRecommendGoodsByApp(context.Context, *GetRecommendGoodsByAppRequest) (*GetRecommendGoodsByAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendGoodsByApp not implemented")
}
func (UnimplementedCloudHashingApisServer) SubmitOrder(context.Context, *SubmitOrderRequest) (*SubmitOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitOrder not implemented")
}
func (UnimplementedCloudHashingApisServer) CreateOrderPayment(context.Context, *CreateOrderPaymentRequest) (*CreateOrderPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrderPayment not implemented")
}
func (UnimplementedCloudHashingApisServer) GetOrder(context.Context, *GetOrderRequest) (*GetOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedCloudHashingApisServer) GetOrdersByAppUser(context.Context, *GetOrdersByAppUserRequest) (*GetOrdersByAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrdersByAppUser not implemented")
}
func (UnimplementedCloudHashingApisServer) GetOrdersByApp(context.Context, *GetOrdersByAppRequest) (*GetOrdersByAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrdersByApp not implemented")
}
func (UnimplementedCloudHashingApisServer) GetOrdersByGood(context.Context, *GetOrdersByGoodRequest) (*GetOrdersByGoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrdersByGood not implemented")
}
func (UnimplementedCloudHashingApisServer) Signup(context.Context, *SignupRequest) (*SignupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Signup not implemented")
}
func (UnimplementedCloudHashingApisServer) UpdatePassword(context.Context, *UpdatePasswordRequest) (*UpdatePasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassword not implemented")
}
func (UnimplementedCloudHashingApisServer) UpdatePasswordByAppUser(context.Context, *UpdatePasswordByAppUserRequest) (*UpdatePasswordByAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePasswordByAppUser not implemented")
}
func (UnimplementedCloudHashingApisServer) UpdateEmailAddress(context.Context, *UpdateEmailAddressRequest) (*UpdateEmailAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmailAddress not implemented")
}
func (UnimplementedCloudHashingApisServer) UpdatePhoneNO(context.Context, *UpdatePhoneNORequest) (*UpdatePhoneNOResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePhoneNO not implemented")
}
func (UnimplementedCloudHashingApisServer) UpdateAccount(context.Context, *UpdateAccountRequest) (*UpdateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (UnimplementedCloudHashingApisServer) CreateAppUserExtra(context.Context, *CreateAppUserExtraRequest) (*CreateAppUserExtraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppUserExtra not implemented")
}
func (UnimplementedCloudHashingApisServer) UpdateAppUserExtra(context.Context, *UpdateAppUserExtraRequest) (*UpdateAppUserExtraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppUserExtra not implemented")
}
func (UnimplementedCloudHashingApisServer) GetReferrals(context.Context, *GetReferralsRequest) (*GetReferralsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReferrals not implemented")
}
func (UnimplementedCloudHashingApisServer) GetLayeredReferrals(context.Context, *GetLayeredReferralsRequest) (*GetLayeredReferralsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLayeredReferrals not implemented")
}
func (UnimplementedCloudHashingApisServer) GetKycReviews(context.Context, *GetKycReviewsRequest) (*GetKycReviewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKycReviews not implemented")
}
func (UnimplementedCloudHashingApisServer) GetKycReviewsByApp(context.Context, *GetKycReviewsByAppRequest) (*GetKycReviewsByAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKycReviewsByApp not implemented")
}
func (UnimplementedCloudHashingApisServer) GetKycReviewsByOtherApp(context.Context, *GetKycReviewsByOtherAppRequest) (*GetKycReviewsByOtherAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKycReviewsByOtherApp not implemented")
}
func (UnimplementedCloudHashingApisServer) GetGoodReviews(context.Context, *GetGoodReviewsRequest) (*GetGoodReviewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodReviews not implemented")
}
func (UnimplementedCloudHashingApisServer) GetWithdrawReviews(context.Context, *GetWithdrawReviewsRequest) (*GetWithdrawReviewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawReviews not implemented")
}
func (UnimplementedCloudHashingApisServer) GetWithdrawReviewsByApp(context.Context, *GetWithdrawReviewsByAppRequest) (*GetWithdrawReviewsByAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawReviewsByApp not implemented")
}
func (UnimplementedCloudHashingApisServer) GetWithdrawReviewsByOtherApp(context.Context, *GetWithdrawReviewsByOtherAppRequest) (*GetWithdrawReviewsByOtherAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawReviewsByOtherApp not implemented")
}
func (UnimplementedCloudHashingApisServer) GetWithdrawAddressReviews(context.Context, *GetWithdrawAddressReviewsRequest) (*GetWithdrawAddressReviewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawAddressReviews not implemented")
}
func (UnimplementedCloudHashingApisServer) GetWithdrawAddressReviewsByApp(context.Context, *GetWithdrawAddressReviewsByAppRequest) (*GetWithdrawAddressReviewsByAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawAddressReviewsByApp not implemented")
}
func (UnimplementedCloudHashingApisServer) GetWithdrawAddressReviewsByOtherApp(context.Context, *GetWithdrawAddressReviewsByOtherAppRequest) (*GetWithdrawAddressReviewsByOtherAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawAddressReviewsByOtherApp not implemented")
}
func (UnimplementedCloudHashingApisServer) CreateKyc(context.Context, *CreateKycRequest) (*CreateKycResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKyc not implemented")
}
func (UnimplementedCloudHashingApisServer) UpdateKyc(context.Context, *UpdateKycRequest) (*UpdateKycResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKyc not implemented")
}
func (UnimplementedCloudHashingApisServer) GetKycByAppUser(context.Context, *GetKycByAppUserRequest) (*GetKycByAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKycByAppUser not implemented")
}
func (UnimplementedCloudHashingApisServer) CreatePlatformCoinAccount(context.Context, *CreatePlatformCoinAccountRequest) (*CreatePlatformCoinAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlatformCoinAccount not implemented")
}
func (UnimplementedCloudHashingApisServer) CreateUserCoinAccount(context.Context, *CreateUserCoinAccountRequest) (*CreateUserCoinAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserCoinAccount not implemented")
}
func (UnimplementedCloudHashingApisServer) SubmitUserWithdraw(context.Context, *SubmitUserWithdrawRequest) (*SubmitUserWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitUserWithdraw not implemented")
}
func (UnimplementedCloudHashingApisServer) UpdateUserWithdrawReview(context.Context, *UpdateUserWithdrawReviewRequest) (*UpdateUserWithdrawReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserWithdrawReview not implemented")
}
func (UnimplementedCloudHashingApisServer) UpdateUserWithdrawReviewForOtherAppUser(context.Context, *UpdateUserWithdrawReviewForOtherAppUserRequest) (*UpdateUserWithdrawReviewForOtherAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserWithdrawReviewForOtherAppUser not implemented")
}
func (UnimplementedCloudHashingApisServer) GetUserWithdrawsByAppUser(context.Context, *GetUserWithdrawsByAppUserRequest) (*GetUserWithdrawsByAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserWithdrawsByAppUser not implemented")
}
func (UnimplementedCloudHashingApisServer) SetWithdrawAddress(context.Context, *SetWithdrawAddressRequest) (*SetWithdrawAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetWithdrawAddress not implemented")
}
func (UnimplementedCloudHashingApisServer) DeleteWithdrawAddress(context.Context, *DeleteWithdrawAddressRequest) (*DeleteWithdrawAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWithdrawAddress not implemented")
}
func (UnimplementedCloudHashingApisServer) GetWithdrawAddressesByAppUser(context.Context, *GetWithdrawAddressesByAppUserRequest) (*GetWithdrawAddressesByAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawAddressesByAppUser not implemented")
}
func (UnimplementedCloudHashingApisServer) GetCouponsByAppUser(context.Context, *GetCouponsByAppUserRequest) (*GetCouponsByAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCouponsByAppUser not implemented")
}
func (UnimplementedCloudHashingApisServer) GetCommissionByAppUser(context.Context, *GetCommissionByAppUserRequest) (*GetCommissionByAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommissionByAppUser not implemented")
}
func (UnimplementedCloudHashingApisServer) UpdateKycReview(context.Context, *UpdateKycReviewRequest) (*UpdateKycReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKycReview not implemented")
}
func (UnimplementedCloudHashingApisServer) UpdateWithdrawReview(context.Context, *UpdateWithdrawReviewRequest) (*UpdateWithdrawReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWithdrawReview not implemented")
}
func (UnimplementedCloudHashingApisServer) UpdateWithdrawAddressReview(context.Context, *UpdateWithdrawAddressReviewRequest) (*UpdateWithdrawAddressReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWithdrawAddressReview not implemented")
}
func (UnimplementedCloudHashingApisServer) mustEmbedUnimplementedCloudHashingApisServer() {}

// UnsafeCloudHashingApisServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudHashingApisServer will
// result in compilation errors.
type UnsafeCloudHashingApisServer interface {
	mustEmbedUnimplementedCloudHashingApisServer()
}

func RegisterCloudHashingApisServer(s grpc.ServiceRegistrar, srv CloudHashingApisServer) {
	s.RegisterService(&CloudHashingApis_ServiceDesc, srv)
}

func _CloudHashingApis_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingApisServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.apis.v1.CloudHashingApis/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingApisServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingApis_GetGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingApisServer).GetGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.apis.v1.CloudHashingApis/GetGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingApisServer).GetGoods(ctx, req.(*GetGoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingApis_GetGoodsByApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoodsByAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingApisServer).GetGoodsByApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.apis.v1.CloudHashingApis/GetGoodsByApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingApisServer).GetGoodsByApp(ctx, req.(*GetGoodsByAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingApis_CreateGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingApisServer).CreateGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.apis.v1.CloudHashingApis/CreateGood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingApisServer).CreateGood(ctx, req.(*CreateGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingApis_GetGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingApisServer).GetGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.apis.v1.CloudHashingApis/GetGood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingApisServer).GetGood(ctx, req.(*GetGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingApis_GetRecommendGoodsByApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendGoodsByAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingApisServer).GetRecommendGoodsByApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.apis.v1.CloudHashingApis/GetRecommendGoodsByApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingApisServer).GetRecommendGoodsByApp(ctx, req.(*GetRecommendGoodsByAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingApis_SubmitOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingApisServer).SubmitOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.apis.v1.CloudHashingApis/SubmitOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingApisServer).SubmitOrder(ctx, req.(*SubmitOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingApis_CreateOrderPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingApisServer).CreateOrderPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.apis.v1.CloudHashingApis/CreateOrderPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingApisServer).CreateOrderPayment(ctx, req.(*CreateOrderPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingApis_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingApisServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.apis.v1.CloudHashingApis/GetOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingApisServer).GetOrder(ctx, req.(*GetOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingApis_GetOrdersByAppUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrdersByAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingApisServer).GetOrdersByAppUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.apis.v1.CloudHashingApis/GetOrdersByAppUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingApisServer).GetOrdersByAppUser(ctx, req.(*GetOrdersByAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingApis_GetOrdersByApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrdersByAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingApisServer).GetOrdersByApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.apis.v1.CloudHashingApis/GetOrdersByApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingApisServer).GetOrdersByApp(ctx, req.(*GetOrdersByAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingApis_GetOrdersByGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrdersByGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingApisServer).GetOrdersByGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.apis.v1.CloudHashingApis/GetOrdersByGood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingApisServer).GetOrdersByGood(ctx, req.(*GetOrdersByGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingApis_Signup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingApisServer).Signup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.apis.v1.CloudHashingApis/Signup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingApisServer).Signup(ctx, req.(*SignupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingApis_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingApisServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.apis.v1.CloudHashingApis/UpdatePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingApisServer).UpdatePassword(ctx, req.(*UpdatePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingApis_UpdatePasswordByAppUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePasswordByAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingApisServer).UpdatePasswordByAppUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.apis.v1.CloudHashingApis/UpdatePasswordByAppUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingApisServer).UpdatePasswordByAppUser(ctx, req.(*UpdatePasswordByAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingApis_UpdateEmailAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmailAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingApisServer).UpdateEmailAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.apis.v1.CloudHashingApis/UpdateEmailAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingApisServer).UpdateEmailAddress(ctx, req.(*UpdateEmailAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingApis_UpdatePhoneNO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePhoneNORequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingApisServer).UpdatePhoneNO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.apis.v1.CloudHashingApis/UpdatePhoneNO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingApisServer).UpdatePhoneNO(ctx, req.(*UpdatePhoneNORequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingApis_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingApisServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.apis.v1.CloudHashingApis/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingApisServer).UpdateAccount(ctx, req.(*UpdateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingApis_CreateAppUserExtra_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppUserExtraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingApisServer).CreateAppUserExtra(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.apis.v1.CloudHashingApis/CreateAppUserExtra",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingApisServer).CreateAppUserExtra(ctx, req.(*CreateAppUserExtraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingApis_UpdateAppUserExtra_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppUserExtraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingApisServer).UpdateAppUserExtra(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.apis.v1.CloudHashingApis/UpdateAppUserExtra",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingApisServer).UpdateAppUserExtra(ctx, req.(*UpdateAppUserExtraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingApis_GetReferrals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReferralsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingApisServer).GetReferrals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.apis.v1.CloudHashingApis/GetReferrals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingApisServer).GetReferrals(ctx, req.(*GetReferralsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingApis_GetLayeredReferrals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLayeredReferralsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingApisServer).GetLayeredReferrals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.apis.v1.CloudHashingApis/GetLayeredReferrals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingApisServer).GetLayeredReferrals(ctx, req.(*GetLayeredReferralsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingApis_GetKycReviews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKycReviewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingApisServer).GetKycReviews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.apis.v1.CloudHashingApis/GetKycReviews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingApisServer).GetKycReviews(ctx, req.(*GetKycReviewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingApis_GetKycReviewsByApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKycReviewsByAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingApisServer).GetKycReviewsByApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.apis.v1.CloudHashingApis/GetKycReviewsByApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingApisServer).GetKycReviewsByApp(ctx, req.(*GetKycReviewsByAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingApis_GetKycReviewsByOtherApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKycReviewsByOtherAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingApisServer).GetKycReviewsByOtherApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.apis.v1.CloudHashingApis/GetKycReviewsByOtherApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingApisServer).GetKycReviewsByOtherApp(ctx, req.(*GetKycReviewsByOtherAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingApis_GetGoodReviews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoodReviewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingApisServer).GetGoodReviews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.apis.v1.CloudHashingApis/GetGoodReviews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingApisServer).GetGoodReviews(ctx, req.(*GetGoodReviewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingApis_GetWithdrawReviews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithdrawReviewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingApisServer).GetWithdrawReviews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.apis.v1.CloudHashingApis/GetWithdrawReviews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingApisServer).GetWithdrawReviews(ctx, req.(*GetWithdrawReviewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingApis_GetWithdrawReviewsByApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithdrawReviewsByAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingApisServer).GetWithdrawReviewsByApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.apis.v1.CloudHashingApis/GetWithdrawReviewsByApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingApisServer).GetWithdrawReviewsByApp(ctx, req.(*GetWithdrawReviewsByAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingApis_GetWithdrawReviewsByOtherApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithdrawReviewsByOtherAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingApisServer).GetWithdrawReviewsByOtherApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.apis.v1.CloudHashingApis/GetWithdrawReviewsByOtherApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingApisServer).GetWithdrawReviewsByOtherApp(ctx, req.(*GetWithdrawReviewsByOtherAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingApis_GetWithdrawAddressReviews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithdrawAddressReviewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingApisServer).GetWithdrawAddressReviews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.apis.v1.CloudHashingApis/GetWithdrawAddressReviews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingApisServer).GetWithdrawAddressReviews(ctx, req.(*GetWithdrawAddressReviewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingApis_GetWithdrawAddressReviewsByApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithdrawAddressReviewsByAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingApisServer).GetWithdrawAddressReviewsByApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.apis.v1.CloudHashingApis/GetWithdrawAddressReviewsByApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingApisServer).GetWithdrawAddressReviewsByApp(ctx, req.(*GetWithdrawAddressReviewsByAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingApis_GetWithdrawAddressReviewsByOtherApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithdrawAddressReviewsByOtherAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingApisServer).GetWithdrawAddressReviewsByOtherApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.apis.v1.CloudHashingApis/GetWithdrawAddressReviewsByOtherApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingApisServer).GetWithdrawAddressReviewsByOtherApp(ctx, req.(*GetWithdrawAddressReviewsByOtherAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingApis_CreateKyc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKycRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingApisServer).CreateKyc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.apis.v1.CloudHashingApis/CreateKyc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingApisServer).CreateKyc(ctx, req.(*CreateKycRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingApis_UpdateKyc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKycRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingApisServer).UpdateKyc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.apis.v1.CloudHashingApis/UpdateKyc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingApisServer).UpdateKyc(ctx, req.(*UpdateKycRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingApis_GetKycByAppUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKycByAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingApisServer).GetKycByAppUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.apis.v1.CloudHashingApis/GetKycByAppUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingApisServer).GetKycByAppUser(ctx, req.(*GetKycByAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingApis_CreatePlatformCoinAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlatformCoinAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingApisServer).CreatePlatformCoinAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.apis.v1.CloudHashingApis/CreatePlatformCoinAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingApisServer).CreatePlatformCoinAccount(ctx, req.(*CreatePlatformCoinAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingApis_CreateUserCoinAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserCoinAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingApisServer).CreateUserCoinAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.apis.v1.CloudHashingApis/CreateUserCoinAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingApisServer).CreateUserCoinAccount(ctx, req.(*CreateUserCoinAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingApis_SubmitUserWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitUserWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingApisServer).SubmitUserWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.apis.v1.CloudHashingApis/SubmitUserWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingApisServer).SubmitUserWithdraw(ctx, req.(*SubmitUserWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingApis_UpdateUserWithdrawReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserWithdrawReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingApisServer).UpdateUserWithdrawReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.apis.v1.CloudHashingApis/UpdateUserWithdrawReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingApisServer).UpdateUserWithdrawReview(ctx, req.(*UpdateUserWithdrawReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingApis_UpdateUserWithdrawReviewForOtherAppUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserWithdrawReviewForOtherAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingApisServer).UpdateUserWithdrawReviewForOtherAppUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.apis.v1.CloudHashingApis/UpdateUserWithdrawReviewForOtherAppUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingApisServer).UpdateUserWithdrawReviewForOtherAppUser(ctx, req.(*UpdateUserWithdrawReviewForOtherAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingApis_GetUserWithdrawsByAppUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserWithdrawsByAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingApisServer).GetUserWithdrawsByAppUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.apis.v1.CloudHashingApis/GetUserWithdrawsByAppUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingApisServer).GetUserWithdrawsByAppUser(ctx, req.(*GetUserWithdrawsByAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingApis_SetWithdrawAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetWithdrawAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingApisServer).SetWithdrawAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.apis.v1.CloudHashingApis/SetWithdrawAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingApisServer).SetWithdrawAddress(ctx, req.(*SetWithdrawAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingApis_DeleteWithdrawAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWithdrawAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingApisServer).DeleteWithdrawAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.apis.v1.CloudHashingApis/DeleteWithdrawAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingApisServer).DeleteWithdrawAddress(ctx, req.(*DeleteWithdrawAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingApis_GetWithdrawAddressesByAppUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithdrawAddressesByAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingApisServer).GetWithdrawAddressesByAppUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.apis.v1.CloudHashingApis/GetWithdrawAddressesByAppUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingApisServer).GetWithdrawAddressesByAppUser(ctx, req.(*GetWithdrawAddressesByAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingApis_GetCouponsByAppUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCouponsByAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingApisServer).GetCouponsByAppUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.apis.v1.CloudHashingApis/GetCouponsByAppUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingApisServer).GetCouponsByAppUser(ctx, req.(*GetCouponsByAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingApis_GetCommissionByAppUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommissionByAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingApisServer).GetCommissionByAppUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.apis.v1.CloudHashingApis/GetCommissionByAppUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingApisServer).GetCommissionByAppUser(ctx, req.(*GetCommissionByAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingApis_UpdateKycReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKycReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingApisServer).UpdateKycReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.apis.v1.CloudHashingApis/UpdateKycReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingApisServer).UpdateKycReview(ctx, req.(*UpdateKycReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingApis_UpdateWithdrawReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWithdrawReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingApisServer).UpdateWithdrawReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.apis.v1.CloudHashingApis/UpdateWithdrawReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingApisServer).UpdateWithdrawReview(ctx, req.(*UpdateWithdrawReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingApis_UpdateWithdrawAddressReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWithdrawAddressReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingApisServer).UpdateWithdrawAddressReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.apis.v1.CloudHashingApis/UpdateWithdrawAddressReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingApisServer).UpdateWithdrawAddressReview(ctx, req.(*UpdateWithdrawAddressReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudHashingApis_ServiceDesc is the grpc.ServiceDesc for CloudHashingApis service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudHashingApis_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.hashing.apis.v1.CloudHashingApis",
	HandlerType: (*CloudHashingApisServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _CloudHashingApis_Version_Handler,
		},
		{
			MethodName: "GetGoods",
			Handler:    _CloudHashingApis_GetGoods_Handler,
		},
		{
			MethodName: "GetGoodsByApp",
			Handler:    _CloudHashingApis_GetGoodsByApp_Handler,
		},
		{
			MethodName: "CreateGood",
			Handler:    _CloudHashingApis_CreateGood_Handler,
		},
		{
			MethodName: "GetGood",
			Handler:    _CloudHashingApis_GetGood_Handler,
		},
		{
			MethodName: "GetRecommendGoodsByApp",
			Handler:    _CloudHashingApis_GetRecommendGoodsByApp_Handler,
		},
		{
			MethodName: "SubmitOrder",
			Handler:    _CloudHashingApis_SubmitOrder_Handler,
		},
		{
			MethodName: "CreateOrderPayment",
			Handler:    _CloudHashingApis_CreateOrderPayment_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _CloudHashingApis_GetOrder_Handler,
		},
		{
			MethodName: "GetOrdersByAppUser",
			Handler:    _CloudHashingApis_GetOrdersByAppUser_Handler,
		},
		{
			MethodName: "GetOrdersByApp",
			Handler:    _CloudHashingApis_GetOrdersByApp_Handler,
		},
		{
			MethodName: "GetOrdersByGood",
			Handler:    _CloudHashingApis_GetOrdersByGood_Handler,
		},
		{
			MethodName: "Signup",
			Handler:    _CloudHashingApis_Signup_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _CloudHashingApis_UpdatePassword_Handler,
		},
		{
			MethodName: "UpdatePasswordByAppUser",
			Handler:    _CloudHashingApis_UpdatePasswordByAppUser_Handler,
		},
		{
			MethodName: "UpdateEmailAddress",
			Handler:    _CloudHashingApis_UpdateEmailAddress_Handler,
		},
		{
			MethodName: "UpdatePhoneNO",
			Handler:    _CloudHashingApis_UpdatePhoneNO_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _CloudHashingApis_UpdateAccount_Handler,
		},
		{
			MethodName: "CreateAppUserExtra",
			Handler:    _CloudHashingApis_CreateAppUserExtra_Handler,
		},
		{
			MethodName: "UpdateAppUserExtra",
			Handler:    _CloudHashingApis_UpdateAppUserExtra_Handler,
		},
		{
			MethodName: "GetReferrals",
			Handler:    _CloudHashingApis_GetReferrals_Handler,
		},
		{
			MethodName: "GetLayeredReferrals",
			Handler:    _CloudHashingApis_GetLayeredReferrals_Handler,
		},
		{
			MethodName: "GetKycReviews",
			Handler:    _CloudHashingApis_GetKycReviews_Handler,
		},
		{
			MethodName: "GetKycReviewsByApp",
			Handler:    _CloudHashingApis_GetKycReviewsByApp_Handler,
		},
		{
			MethodName: "GetKycReviewsByOtherApp",
			Handler:    _CloudHashingApis_GetKycReviewsByOtherApp_Handler,
		},
		{
			MethodName: "GetGoodReviews",
			Handler:    _CloudHashingApis_GetGoodReviews_Handler,
		},
		{
			MethodName: "GetWithdrawReviews",
			Handler:    _CloudHashingApis_GetWithdrawReviews_Handler,
		},
		{
			MethodName: "GetWithdrawReviewsByApp",
			Handler:    _CloudHashingApis_GetWithdrawReviewsByApp_Handler,
		},
		{
			MethodName: "GetWithdrawReviewsByOtherApp",
			Handler:    _CloudHashingApis_GetWithdrawReviewsByOtherApp_Handler,
		},
		{
			MethodName: "GetWithdrawAddressReviews",
			Handler:    _CloudHashingApis_GetWithdrawAddressReviews_Handler,
		},
		{
			MethodName: "GetWithdrawAddressReviewsByApp",
			Handler:    _CloudHashingApis_GetWithdrawAddressReviewsByApp_Handler,
		},
		{
			MethodName: "GetWithdrawAddressReviewsByOtherApp",
			Handler:    _CloudHashingApis_GetWithdrawAddressReviewsByOtherApp_Handler,
		},
		{
			MethodName: "CreateKyc",
			Handler:    _CloudHashingApis_CreateKyc_Handler,
		},
		{
			MethodName: "UpdateKyc",
			Handler:    _CloudHashingApis_UpdateKyc_Handler,
		},
		{
			MethodName: "GetKycByAppUser",
			Handler:    _CloudHashingApis_GetKycByAppUser_Handler,
		},
		{
			MethodName: "CreatePlatformCoinAccount",
			Handler:    _CloudHashingApis_CreatePlatformCoinAccount_Handler,
		},
		{
			MethodName: "CreateUserCoinAccount",
			Handler:    _CloudHashingApis_CreateUserCoinAccount_Handler,
		},
		{
			MethodName: "SubmitUserWithdraw",
			Handler:    _CloudHashingApis_SubmitUserWithdraw_Handler,
		},
		{
			MethodName: "UpdateUserWithdrawReview",
			Handler:    _CloudHashingApis_UpdateUserWithdrawReview_Handler,
		},
		{
			MethodName: "UpdateUserWithdrawReviewForOtherAppUser",
			Handler:    _CloudHashingApis_UpdateUserWithdrawReviewForOtherAppUser_Handler,
		},
		{
			MethodName: "GetUserWithdrawsByAppUser",
			Handler:    _CloudHashingApis_GetUserWithdrawsByAppUser_Handler,
		},
		{
			MethodName: "SetWithdrawAddress",
			Handler:    _CloudHashingApis_SetWithdrawAddress_Handler,
		},
		{
			MethodName: "DeleteWithdrawAddress",
			Handler:    _CloudHashingApis_DeleteWithdrawAddress_Handler,
		},
		{
			MethodName: "GetWithdrawAddressesByAppUser",
			Handler:    _CloudHashingApis_GetWithdrawAddressesByAppUser_Handler,
		},
		{
			MethodName: "GetCouponsByAppUser",
			Handler:    _CloudHashingApis_GetCouponsByAppUser_Handler,
		},
		{
			MethodName: "GetCommissionByAppUser",
			Handler:    _CloudHashingApis_GetCommissionByAppUser_Handler,
		},
		{
			MethodName: "UpdateKycReview",
			Handler:    _CloudHashingApis_UpdateKycReview_Handler,
		},
		{
			MethodName: "UpdateWithdrawReview",
			Handler:    _CloudHashingApis_UpdateWithdrawReview_Handler,
		},
		{
			MethodName: "UpdateWithdrawAddressReview",
			Handler:    _CloudHashingApis_UpdateWithdrawAddressReview_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/cloud-hashing-apis/cloud-hashing-apis.proto",
}
