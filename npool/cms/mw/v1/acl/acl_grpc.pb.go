// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/cms/mw/v1/acl/acl.proto

package acl

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Middleware_CreateACL_FullMethodName     = "/cms.middleware.acl.v1.Middleware/CreateACL"
	Middleware_GetACL_FullMethodName        = "/cms.middleware.acl.v1.Middleware/GetACL"
	Middleware_GetACLs_FullMethodName       = "/cms.middleware.acl.v1.Middleware/GetACLs"
	Middleware_ExistACL_FullMethodName      = "/cms.middleware.acl.v1.Middleware/ExistACL"
	Middleware_ExistACLConds_FullMethodName = "/cms.middleware.acl.v1.Middleware/ExistACLConds"
	Middleware_DeleteACL_FullMethodName     = "/cms.middleware.acl.v1.Middleware/DeleteACL"
)

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
	CreateACL(ctx context.Context, in *CreateACLRequest, opts ...grpc.CallOption) (*CreateACLResponse, error)
	GetACL(ctx context.Context, in *GetACLRequest, opts ...grpc.CallOption) (*GetACLResponse, error)
	GetACLs(ctx context.Context, in *GetACLsRequest, opts ...grpc.CallOption) (*GetACLsResponse, error)
	ExistACL(ctx context.Context, in *ExistACLRequest, opts ...grpc.CallOption) (*ExistACLResponse, error)
	ExistACLConds(ctx context.Context, in *ExistACLCondsRequest, opts ...grpc.CallOption) (*ExistACLCondsResponse, error)
	DeleteACL(ctx context.Context, in *DeleteACLRequest, opts ...grpc.CallOption) (*DeleteACLResponse, error)
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) CreateACL(ctx context.Context, in *CreateACLRequest, opts ...grpc.CallOption) (*CreateACLResponse, error) {
	out := new(CreateACLResponse)
	err := c.cc.Invoke(ctx, Middleware_CreateACL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetACL(ctx context.Context, in *GetACLRequest, opts ...grpc.CallOption) (*GetACLResponse, error) {
	out := new(GetACLResponse)
	err := c.cc.Invoke(ctx, Middleware_GetACL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetACLs(ctx context.Context, in *GetACLsRequest, opts ...grpc.CallOption) (*GetACLsResponse, error) {
	out := new(GetACLsResponse)
	err := c.cc.Invoke(ctx, Middleware_GetACLs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ExistACL(ctx context.Context, in *ExistACLRequest, opts ...grpc.CallOption) (*ExistACLResponse, error) {
	out := new(ExistACLResponse)
	err := c.cc.Invoke(ctx, Middleware_ExistACL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ExistACLConds(ctx context.Context, in *ExistACLCondsRequest, opts ...grpc.CallOption) (*ExistACLCondsResponse, error) {
	out := new(ExistACLCondsResponse)
	err := c.cc.Invoke(ctx, Middleware_ExistACLConds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) DeleteACL(ctx context.Context, in *DeleteACLRequest, opts ...grpc.CallOption) (*DeleteACLResponse, error) {
	out := new(DeleteACLResponse)
	err := c.cc.Invoke(ctx, Middleware_DeleteACL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
	CreateACL(context.Context, *CreateACLRequest) (*CreateACLResponse, error)
	GetACL(context.Context, *GetACLRequest) (*GetACLResponse, error)
	GetACLs(context.Context, *GetACLsRequest) (*GetACLsResponse, error)
	ExistACL(context.Context, *ExistACLRequest) (*ExistACLResponse, error)
	ExistACLConds(context.Context, *ExistACLCondsRequest) (*ExistACLCondsResponse, error)
	DeleteACL(context.Context, *DeleteACLRequest) (*DeleteACLResponse, error)
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) CreateACL(context.Context, *CreateACLRequest) (*CreateACLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateACL not implemented")
}
func (UnimplementedMiddlewareServer) GetACL(context.Context, *GetACLRequest) (*GetACLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetACL not implemented")
}
func (UnimplementedMiddlewareServer) GetACLs(context.Context, *GetACLsRequest) (*GetACLsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetACLs not implemented")
}
func (UnimplementedMiddlewareServer) ExistACL(context.Context, *ExistACLRequest) (*ExistACLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistACL not implemented")
}
func (UnimplementedMiddlewareServer) ExistACLConds(context.Context, *ExistACLCondsRequest) (*ExistACLCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistACLConds not implemented")
}
func (UnimplementedMiddlewareServer) DeleteACL(context.Context, *DeleteACLRequest) (*DeleteACLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteACL not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_CreateACL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateACLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateACL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_CreateACL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateACL(ctx, req.(*CreateACLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetACL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetACLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetACL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetACL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetACL(ctx, req.(*GetACLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetACLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetACLsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetACLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetACLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetACLs(ctx, req.(*GetACLsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ExistACL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistACLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ExistACL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_ExistACL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ExistACL(ctx, req.(*ExistACLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ExistACLConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistACLCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ExistACLConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_ExistACLConds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ExistACLConds(ctx, req.(*ExistACLCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_DeleteACL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteACLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).DeleteACL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_DeleteACL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).DeleteACL(ctx, req.(*DeleteACLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cms.middleware.acl.v1.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateACL",
			Handler:    _Middleware_CreateACL_Handler,
		},
		{
			MethodName: "GetACL",
			Handler:    _Middleware_GetACL_Handler,
		},
		{
			MethodName: "GetACLs",
			Handler:    _Middleware_GetACLs_Handler,
		},
		{
			MethodName: "ExistACL",
			Handler:    _Middleware_ExistACL_Handler,
		},
		{
			MethodName: "ExistACLConds",
			Handler:    _Middleware_ExistACLConds_Handler,
		},
		{
			MethodName: "DeleteACL",
			Handler:    _Middleware_DeleteACL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/cms/mw/v1/acl/acl.proto",
}
