// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: npool/cms/mw/v1/acl/acl.proto

package acl

import (
	v1 "github.com/NpoolPlatform/message/npool/basetypes/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ACLReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         *uint32 `protobuf:"varint,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID      *string `protobuf:"bytes,20,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	AppID      *string `protobuf:"bytes,30,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	RoleID     *string `protobuf:"bytes,40,opt,name=RoleID,proto3,oneof" json:"RoleID,omitempty"`
	ArticleKey *string `protobuf:"bytes,50,opt,name=ArticleKey,proto3,oneof" json:"ArticleKey,omitempty"`
}

func (x *ACLReq) Reset() {
	*x = ACLReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cms_mw_v1_acl_acl_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACLReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACLReq) ProtoMessage() {}

func (x *ACLReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cms_mw_v1_acl_acl_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACLReq.ProtoReflect.Descriptor instead.
func (*ACLReq) Descriptor() ([]byte, []int) {
	return file_npool_cms_mw_v1_acl_acl_proto_rawDescGZIP(), []int{0}
}

func (x *ACLReq) GetID() uint32 {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return 0
}

func (x *ACLReq) GetEntID() string {
	if x != nil && x.EntID != nil {
		return *x.EntID
	}
	return ""
}

func (x *ACLReq) GetAppID() string {
	if x != nil && x.AppID != nil {
		return *x.AppID
	}
	return ""
}

func (x *ACLReq) GetRoleID() string {
	if x != nil && x.RoleID != nil {
		return *x.RoleID
	}
	return ""
}

func (x *ACLReq) GetArticleKey() string {
	if x != nil && x.ArticleKey != nil {
		return *x.ArticleKey
	}
	return ""
}

type ACL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: sql:"id"
	ID uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty" sql:"id"`
	// @inject_tag: sql:"ent_id"
	EntID string `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty" sql:"ent_id"`
	// @inject_tag: sql:"app_id"
	AppID string `protobuf:"bytes,30,opt,name=AppID,proto3" json:"AppID,omitempty" sql:"app_id"`
	// @inject_tag: sql:"role_id"
	RoleID string `protobuf:"bytes,40,opt,name=RoleID,proto3" json:"RoleID,omitempty" sql:"role_id"`
	// @inject_tag: sql:"article_key"
	ArticleKey string `protobuf:"bytes,50,opt,name=ArticleKey,proto3" json:"ArticleKey,omitempty" sql:"article_key"`
	// @inject_tag: sql:"created_at"
	CreatedAt uint32 `protobuf:"varint,1000,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
	// @inject_tag: sql:"updated_at"
	UpdatedAt uint32 `protobuf:"varint,1010,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty" sql:"updated_at"`
}

func (x *ACL) Reset() {
	*x = ACL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cms_mw_v1_acl_acl_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACL) ProtoMessage() {}

func (x *ACL) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cms_mw_v1_acl_acl_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACL.ProtoReflect.Descriptor instead.
func (*ACL) Descriptor() ([]byte, []int) {
	return file_npool_cms_mw_v1_acl_acl_proto_rawDescGZIP(), []int{1}
}

func (x *ACL) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ACL) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *ACL) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *ACL) GetRoleID() string {
	if x != nil {
		return x.RoleID
	}
	return ""
}

func (x *ACL) GetArticleKey() string {
	if x != nil {
		return x.ArticleKey
	}
	return ""
}

func (x *ACL) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *ACL) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         *v1.Uint32Val      `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID      *v1.StringVal      `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty"`
	AppID      *v1.StringVal      `protobuf:"bytes,30,opt,name=AppID,proto3" json:"AppID,omitempty"`
	RoleID     *v1.StringVal      `protobuf:"bytes,40,opt,name=RoleID,proto3" json:"RoleID,omitempty"`
	ArticleKey *v1.StringVal      `protobuf:"bytes,50,opt,name=ArticleKey,proto3" json:"ArticleKey,omitempty"`
	IDs        *v1.Uint32SliceVal `protobuf:"bytes,80,opt,name=IDs,proto3" json:"IDs,omitempty"`
	EntIDs     *v1.StringSliceVal `protobuf:"bytes,90,opt,name=EntIDs,proto3" json:"EntIDs,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cms_mw_v1_acl_acl_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cms_mw_v1_acl_acl_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_cms_mw_v1_acl_acl_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *v1.Uint32Val {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetEntID() *v1.StringVal {
	if x != nil {
		return x.EntID
	}
	return nil
}

func (x *Conds) GetAppID() *v1.StringVal {
	if x != nil {
		return x.AppID
	}
	return nil
}

func (x *Conds) GetRoleID() *v1.StringVal {
	if x != nil {
		return x.RoleID
	}
	return nil
}

func (x *Conds) GetArticleKey() *v1.StringVal {
	if x != nil {
		return x.ArticleKey
	}
	return nil
}

func (x *Conds) GetIDs() *v1.Uint32SliceVal {
	if x != nil {
		return x.IDs
	}
	return nil
}

func (x *Conds) GetEntIDs() *v1.StringSliceVal {
	if x != nil {
		return x.EntIDs
	}
	return nil
}

type CreateACLRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *ACLReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateACLRequest) Reset() {
	*x = CreateACLRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cms_mw_v1_acl_acl_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateACLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateACLRequest) ProtoMessage() {}

func (x *CreateACLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cms_mw_v1_acl_acl_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateACLRequest.ProtoReflect.Descriptor instead.
func (*CreateACLRequest) Descriptor() ([]byte, []int) {
	return file_npool_cms_mw_v1_acl_acl_proto_rawDescGZIP(), []int{3}
}

func (x *CreateACLRequest) GetInfo() *ACLReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateACLResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *ACL `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateACLResponse) Reset() {
	*x = CreateACLResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cms_mw_v1_acl_acl_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateACLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateACLResponse) ProtoMessage() {}

func (x *CreateACLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cms_mw_v1_acl_acl_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateACLResponse.ProtoReflect.Descriptor instead.
func (*CreateACLResponse) Descriptor() ([]byte, []int) {
	return file_npool_cms_mw_v1_acl_acl_proto_rawDescGZIP(), []int{4}
}

func (x *CreateACLResponse) GetInfo() *ACL {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetACLRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntID string `protobuf:"bytes,10,opt,name=EntID,proto3" json:"EntID,omitempty"`
}

func (x *GetACLRequest) Reset() {
	*x = GetACLRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cms_mw_v1_acl_acl_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetACLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetACLRequest) ProtoMessage() {}

func (x *GetACLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cms_mw_v1_acl_acl_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetACLRequest.ProtoReflect.Descriptor instead.
func (*GetACLRequest) Descriptor() ([]byte, []int) {
	return file_npool_cms_mw_v1_acl_acl_proto_rawDescGZIP(), []int{5}
}

func (x *GetACLRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

type GetACLResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *ACL `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetACLResponse) Reset() {
	*x = GetACLResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cms_mw_v1_acl_acl_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetACLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetACLResponse) ProtoMessage() {}

func (x *GetACLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cms_mw_v1_acl_acl_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetACLResponse.ProtoReflect.Descriptor instead.
func (*GetACLResponse) Descriptor() ([]byte, []int) {
	return file_npool_cms_mw_v1_acl_acl_proto_rawDescGZIP(), []int{6}
}

func (x *GetACLResponse) GetInfo() *ACL {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetACLsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetACLsRequest) Reset() {
	*x = GetACLsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cms_mw_v1_acl_acl_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetACLsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetACLsRequest) ProtoMessage() {}

func (x *GetACLsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cms_mw_v1_acl_acl_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetACLsRequest.ProtoReflect.Descriptor instead.
func (*GetACLsRequest) Descriptor() ([]byte, []int) {
	return file_npool_cms_mw_v1_acl_acl_proto_rawDescGZIP(), []int{7}
}

func (x *GetACLsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetACLsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetACLsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetACLsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*ACL `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32 `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetACLsResponse) Reset() {
	*x = GetACLsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cms_mw_v1_acl_acl_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetACLsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetACLsResponse) ProtoMessage() {}

func (x *GetACLsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cms_mw_v1_acl_acl_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetACLsResponse.ProtoReflect.Descriptor instead.
func (*GetACLsResponse) Descriptor() ([]byte, []int) {
	return file_npool_cms_mw_v1_acl_acl_proto_rawDescGZIP(), []int{8}
}

func (x *GetACLsResponse) GetInfos() []*ACL {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetACLsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ExistACLRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntID string `protobuf:"bytes,10,opt,name=EntID,proto3" json:"EntID,omitempty"`
}

func (x *ExistACLRequest) Reset() {
	*x = ExistACLRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cms_mw_v1_acl_acl_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistACLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistACLRequest) ProtoMessage() {}

func (x *ExistACLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cms_mw_v1_acl_acl_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistACLRequest.ProtoReflect.Descriptor instead.
func (*ExistACLRequest) Descriptor() ([]byte, []int) {
	return file_npool_cms_mw_v1_acl_acl_proto_rawDescGZIP(), []int{9}
}

func (x *ExistACLRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

type ExistACLResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistACLResponse) Reset() {
	*x = ExistACLResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cms_mw_v1_acl_acl_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistACLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistACLResponse) ProtoMessage() {}

func (x *ExistACLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cms_mw_v1_acl_acl_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistACLResponse.ProtoReflect.Descriptor instead.
func (*ExistACLResponse) Descriptor() ([]byte, []int) {
	return file_npool_cms_mw_v1_acl_acl_proto_rawDescGZIP(), []int{10}
}

func (x *ExistACLResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type ExistACLCondsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *ExistACLCondsRequest) Reset() {
	*x = ExistACLCondsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cms_mw_v1_acl_acl_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistACLCondsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistACLCondsRequest) ProtoMessage() {}

func (x *ExistACLCondsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cms_mw_v1_acl_acl_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistACLCondsRequest.ProtoReflect.Descriptor instead.
func (*ExistACLCondsRequest) Descriptor() ([]byte, []int) {
	return file_npool_cms_mw_v1_acl_acl_proto_rawDescGZIP(), []int{11}
}

func (x *ExistACLCondsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type ExistACLCondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistACLCondsResponse) Reset() {
	*x = ExistACLCondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cms_mw_v1_acl_acl_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistACLCondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistACLCondsResponse) ProtoMessage() {}

func (x *ExistACLCondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cms_mw_v1_acl_acl_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistACLCondsResponse.ProtoReflect.Descriptor instead.
func (*ExistACLCondsResponse) Descriptor() ([]byte, []int) {
	return file_npool_cms_mw_v1_acl_acl_proto_rawDescGZIP(), []int{12}
}

func (x *ExistACLCondsResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type DeleteACLRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *ACLReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteACLRequest) Reset() {
	*x = DeleteACLRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cms_mw_v1_acl_acl_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteACLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteACLRequest) ProtoMessage() {}

func (x *DeleteACLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cms_mw_v1_acl_acl_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteACLRequest.ProtoReflect.Descriptor instead.
func (*DeleteACLRequest) Descriptor() ([]byte, []int) {
	return file_npool_cms_mw_v1_acl_acl_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteACLRequest) GetInfo() *ACLReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type DeleteACLResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *ACL `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteACLResponse) Reset() {
	*x = DeleteACLResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cms_mw_v1_acl_acl_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteACLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteACLResponse) ProtoMessage() {}

func (x *DeleteACLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cms_mw_v1_acl_acl_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteACLResponse.ProtoReflect.Descriptor instead.
func (*DeleteACLResponse) Descriptor() ([]byte, []int) {
	return file_npool_cms_mw_v1_acl_acl_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteACLResponse) GetInfo() *ACL {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_cms_mw_v1_acl_acl_proto protoreflect.FileDescriptor

var file_npool_cms_mw_v1_acl_acl_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x63, 0x6d, 0x73, 0x2f, 0x6d, 0x77, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x63, 0x6c, 0x2f, 0x61, 0x63, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x15, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x61, 0x63, 0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xca, 0x01, 0x0a, 0x06, 0x41, 0x43, 0x4c, 0x52, 0x65,
	0x71, 0x12, 0x13, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52,
	0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x52, 0x6f, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06,
	0x52, 0x6f, 0x6c, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52,
	0x0a, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x42, 0x05,
	0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x41, 0x70, 0x70, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x52, 0x6f,
	0x6c, 0x65, 0x49, 0x44, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x4b, 0x65, 0x79, 0x22, 0xb7, 0x01, 0x0a, 0x03, 0x41, 0x43, 0x4c, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x6f, 0x6c, 0x65, 0x49,
	0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x1d, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xe8, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xf2, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xde, 0x02,
	0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x2d, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x2d, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x2f,
	0x0a, 0x06, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x52, 0x06, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x44, 0x12,
	0x37, 0x0a, 0x0a, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x52, 0x0a, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x03, 0x49, 0x44, 0x73, 0x18,
	0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x6c, 0x69, 0x63, 0x65,
	0x56, 0x61, 0x6c, 0x52, 0x03, 0x49, 0x44, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x45, 0x6e, 0x74, 0x49,
	0x44, 0x73, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c,
	0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x52, 0x06, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x22, 0x45,
	0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x43, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x61, 0x63, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x43, 0x4c, 0x52, 0x65, 0x71, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x43, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x43, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x63, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x43, 0x4c, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x25, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x41, 0x43, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x45,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49,
	0x44, 0x22, 0x40, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x43, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x61, 0x63, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x43, 0x4c, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x72, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x43, 0x4c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x63, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x59, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x43,
	0x4c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6d, 0x73, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x63, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x43, 0x4c, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0x27, 0x0a, 0x0f, 0x45, 0x78, 0x69, 0x73, 0x74, 0x41, 0x43, 0x4c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x26, 0x0a, 0x10, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x41, 0x43, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x4a, 0x0a, 0x14, 0x45, 0x78, 0x69, 0x73, 0x74, 0x41, 0x43, 0x4c, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6d, 0x73,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x63, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22,
	0x2b, 0x0a, 0x15, 0x45, 0x78, 0x69, 0x73, 0x74, 0x41, 0x43, 0x4c, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x45, 0x0a, 0x10,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x43, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x31, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x61, 0x63, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x43, 0x4c, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x43, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x43, 0x4c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x63, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x43, 0x4c, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0xd2, 0x04, 0x0a, 0x0a, 0x4d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x12, 0x60, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x43, 0x4c, 0x12, 0x27, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x63, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x43, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61,
	0x63, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x43, 0x4c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x06, 0x47, 0x65, 0x74,
	0x41, 0x43, 0x4c, 0x12, 0x24, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x63, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x43, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x6d, 0x73, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x63, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x43, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5a, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x41, 0x43, 0x4c, 0x73, 0x12, 0x25, 0x2e,
	0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61,
	0x63, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x43, 0x4c, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x63, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x43, 0x4c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d,
	0x0a, 0x08, 0x45, 0x78, 0x69, 0x73, 0x74, 0x41, 0x43, 0x4c, 0x12, 0x26, 0x2e, 0x63, 0x6d, 0x73,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x63, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x41, 0x43, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x61, 0x63, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x41, 0x43, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a,
	0x0d, 0x45, 0x78, 0x69, 0x73, 0x74, 0x41, 0x43, 0x4c, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2b,
	0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x61, 0x63, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x41, 0x43, 0x4c, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x6d,
	0x73, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x63, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x41, 0x43, 0x4c, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x09, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x43, 0x4c, 0x12, 0x27, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x63, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x43, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x61, 0x63, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x43, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x36, 0x5a,
	0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f,
	0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x63, 0x6d, 0x73, 0x2f, 0x6d, 0x77, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x63, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_cms_mw_v1_acl_acl_proto_rawDescOnce sync.Once
	file_npool_cms_mw_v1_acl_acl_proto_rawDescData = file_npool_cms_mw_v1_acl_acl_proto_rawDesc
)

func file_npool_cms_mw_v1_acl_acl_proto_rawDescGZIP() []byte {
	file_npool_cms_mw_v1_acl_acl_proto_rawDescOnce.Do(func() {
		file_npool_cms_mw_v1_acl_acl_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_cms_mw_v1_acl_acl_proto_rawDescData)
	})
	return file_npool_cms_mw_v1_acl_acl_proto_rawDescData
}

var file_npool_cms_mw_v1_acl_acl_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_npool_cms_mw_v1_acl_acl_proto_goTypes = []interface{}{
	(*ACLReq)(nil),                // 0: cms.middleware.acl.v1.ACLReq
	(*ACL)(nil),                   // 1: cms.middleware.acl.v1.ACL
	(*Conds)(nil),                 // 2: cms.middleware.acl.v1.Conds
	(*CreateACLRequest)(nil),      // 3: cms.middleware.acl.v1.CreateACLRequest
	(*CreateACLResponse)(nil),     // 4: cms.middleware.acl.v1.CreateACLResponse
	(*GetACLRequest)(nil),         // 5: cms.middleware.acl.v1.GetACLRequest
	(*GetACLResponse)(nil),        // 6: cms.middleware.acl.v1.GetACLResponse
	(*GetACLsRequest)(nil),        // 7: cms.middleware.acl.v1.GetACLsRequest
	(*GetACLsResponse)(nil),       // 8: cms.middleware.acl.v1.GetACLsResponse
	(*ExistACLRequest)(nil),       // 9: cms.middleware.acl.v1.ExistACLRequest
	(*ExistACLResponse)(nil),      // 10: cms.middleware.acl.v1.ExistACLResponse
	(*ExistACLCondsRequest)(nil),  // 11: cms.middleware.acl.v1.ExistACLCondsRequest
	(*ExistACLCondsResponse)(nil), // 12: cms.middleware.acl.v1.ExistACLCondsResponse
	(*DeleteACLRequest)(nil),      // 13: cms.middleware.acl.v1.DeleteACLRequest
	(*DeleteACLResponse)(nil),     // 14: cms.middleware.acl.v1.DeleteACLResponse
	(*v1.Uint32Val)(nil),          // 15: basetypes.v1.Uint32Val
	(*v1.StringVal)(nil),          // 16: basetypes.v1.StringVal
	(*v1.Uint32SliceVal)(nil),     // 17: basetypes.v1.Uint32SliceVal
	(*v1.StringSliceVal)(nil),     // 18: basetypes.v1.StringSliceVal
}
var file_npool_cms_mw_v1_acl_acl_proto_depIdxs = []int32{
	15, // 0: cms.middleware.acl.v1.Conds.ID:type_name -> basetypes.v1.Uint32Val
	16, // 1: cms.middleware.acl.v1.Conds.EntID:type_name -> basetypes.v1.StringVal
	16, // 2: cms.middleware.acl.v1.Conds.AppID:type_name -> basetypes.v1.StringVal
	16, // 3: cms.middleware.acl.v1.Conds.RoleID:type_name -> basetypes.v1.StringVal
	16, // 4: cms.middleware.acl.v1.Conds.ArticleKey:type_name -> basetypes.v1.StringVal
	17, // 5: cms.middleware.acl.v1.Conds.IDs:type_name -> basetypes.v1.Uint32SliceVal
	18, // 6: cms.middleware.acl.v1.Conds.EntIDs:type_name -> basetypes.v1.StringSliceVal
	0,  // 7: cms.middleware.acl.v1.CreateACLRequest.Info:type_name -> cms.middleware.acl.v1.ACLReq
	1,  // 8: cms.middleware.acl.v1.CreateACLResponse.Info:type_name -> cms.middleware.acl.v1.ACL
	1,  // 9: cms.middleware.acl.v1.GetACLResponse.Info:type_name -> cms.middleware.acl.v1.ACL
	2,  // 10: cms.middleware.acl.v1.GetACLsRequest.Conds:type_name -> cms.middleware.acl.v1.Conds
	1,  // 11: cms.middleware.acl.v1.GetACLsResponse.Infos:type_name -> cms.middleware.acl.v1.ACL
	2,  // 12: cms.middleware.acl.v1.ExistACLCondsRequest.Conds:type_name -> cms.middleware.acl.v1.Conds
	0,  // 13: cms.middleware.acl.v1.DeleteACLRequest.Info:type_name -> cms.middleware.acl.v1.ACLReq
	1,  // 14: cms.middleware.acl.v1.DeleteACLResponse.Info:type_name -> cms.middleware.acl.v1.ACL
	3,  // 15: cms.middleware.acl.v1.Middleware.CreateACL:input_type -> cms.middleware.acl.v1.CreateACLRequest
	5,  // 16: cms.middleware.acl.v1.Middleware.GetACL:input_type -> cms.middleware.acl.v1.GetACLRequest
	7,  // 17: cms.middleware.acl.v1.Middleware.GetACLs:input_type -> cms.middleware.acl.v1.GetACLsRequest
	9,  // 18: cms.middleware.acl.v1.Middleware.ExistACL:input_type -> cms.middleware.acl.v1.ExistACLRequest
	11, // 19: cms.middleware.acl.v1.Middleware.ExistACLConds:input_type -> cms.middleware.acl.v1.ExistACLCondsRequest
	13, // 20: cms.middleware.acl.v1.Middleware.DeleteACL:input_type -> cms.middleware.acl.v1.DeleteACLRequest
	4,  // 21: cms.middleware.acl.v1.Middleware.CreateACL:output_type -> cms.middleware.acl.v1.CreateACLResponse
	6,  // 22: cms.middleware.acl.v1.Middleware.GetACL:output_type -> cms.middleware.acl.v1.GetACLResponse
	8,  // 23: cms.middleware.acl.v1.Middleware.GetACLs:output_type -> cms.middleware.acl.v1.GetACLsResponse
	10, // 24: cms.middleware.acl.v1.Middleware.ExistACL:output_type -> cms.middleware.acl.v1.ExistACLResponse
	12, // 25: cms.middleware.acl.v1.Middleware.ExistACLConds:output_type -> cms.middleware.acl.v1.ExistACLCondsResponse
	14, // 26: cms.middleware.acl.v1.Middleware.DeleteACL:output_type -> cms.middleware.acl.v1.DeleteACLResponse
	21, // [21:27] is the sub-list for method output_type
	15, // [15:21] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_npool_cms_mw_v1_acl_acl_proto_init() }
func file_npool_cms_mw_v1_acl_acl_proto_init() {
	if File_npool_cms_mw_v1_acl_acl_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_cms_mw_v1_acl_acl_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACLReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cms_mw_v1_acl_acl_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cms_mw_v1_acl_acl_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cms_mw_v1_acl_acl_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateACLRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cms_mw_v1_acl_acl_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateACLResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cms_mw_v1_acl_acl_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetACLRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cms_mw_v1_acl_acl_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetACLResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cms_mw_v1_acl_acl_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetACLsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cms_mw_v1_acl_acl_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetACLsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cms_mw_v1_acl_acl_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistACLRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cms_mw_v1_acl_acl_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistACLResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cms_mw_v1_acl_acl_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistACLCondsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cms_mw_v1_acl_acl_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistACLCondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cms_mw_v1_acl_acl_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteACLRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cms_mw_v1_acl_acl_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteACLResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_cms_mw_v1_acl_acl_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_cms_mw_v1_acl_acl_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_cms_mw_v1_acl_acl_proto_goTypes,
		DependencyIndexes: file_npool_cms_mw_v1_acl_acl_proto_depIdxs,
		MessageInfos:      file_npool_cms_mw_v1_acl_acl_proto_msgTypes,
	}.Build()
	File_npool_cms_mw_v1_acl_acl_proto = out.File
	file_npool_cms_mw_v1_acl_acl_proto_rawDesc = nil
	file_npool_cms_mw_v1_acl_acl_proto_goTypes = nil
	file_npool_cms_mw_v1_acl_acl_proto_depIdxs = nil
}
