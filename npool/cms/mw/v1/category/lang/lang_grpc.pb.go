// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/cms/mw/v1/category/lang/lang.proto

package lang

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Middleware_CreateCategoryLang_FullMethodName     = "/cms.middleware.category.lang.v1.Middleware/CreateCategoryLang"
	Middleware_UpdateCategoryLang_FullMethodName     = "/cms.middleware.category.lang.v1.Middleware/UpdateCategoryLang"
	Middleware_GetCategoryLang_FullMethodName        = "/cms.middleware.category.lang.v1.Middleware/GetCategoryLang"
	Middleware_GetCategoryLangs_FullMethodName       = "/cms.middleware.category.lang.v1.Middleware/GetCategoryLangs"
	Middleware_ExistCategoryLang_FullMethodName      = "/cms.middleware.category.lang.v1.Middleware/ExistCategoryLang"
	Middleware_ExistCategoryLangConds_FullMethodName = "/cms.middleware.category.lang.v1.Middleware/ExistCategoryLangConds"
	Middleware_DeleteCategoryLang_FullMethodName     = "/cms.middleware.category.lang.v1.Middleware/DeleteCategoryLang"
)

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
	CreateCategoryLang(ctx context.Context, in *CreateCategoryLangRequest, opts ...grpc.CallOption) (*CreateCategoryLangResponse, error)
	UpdateCategoryLang(ctx context.Context, in *UpdateCategoryLangRequest, opts ...grpc.CallOption) (*UpdateCategoryLangResponse, error)
	GetCategoryLang(ctx context.Context, in *GetCategoryLangRequest, opts ...grpc.CallOption) (*GetCategoryLangResponse, error)
	GetCategoryLangs(ctx context.Context, in *GetCategoryLangsRequest, opts ...grpc.CallOption) (*GetCategoryLangsResponse, error)
	ExistCategoryLang(ctx context.Context, in *ExistCategoryLangRequest, opts ...grpc.CallOption) (*ExistCategoryLangResponse, error)
	ExistCategoryLangConds(ctx context.Context, in *ExistCategoryLangCondsRequest, opts ...grpc.CallOption) (*ExistCategoryLangCondsResponse, error)
	DeleteCategoryLang(ctx context.Context, in *DeleteCategoryLangRequest, opts ...grpc.CallOption) (*DeleteCategoryLangResponse, error)
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) CreateCategoryLang(ctx context.Context, in *CreateCategoryLangRequest, opts ...grpc.CallOption) (*CreateCategoryLangResponse, error) {
	out := new(CreateCategoryLangResponse)
	err := c.cc.Invoke(ctx, Middleware_CreateCategoryLang_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) UpdateCategoryLang(ctx context.Context, in *UpdateCategoryLangRequest, opts ...grpc.CallOption) (*UpdateCategoryLangResponse, error) {
	out := new(UpdateCategoryLangResponse)
	err := c.cc.Invoke(ctx, Middleware_UpdateCategoryLang_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetCategoryLang(ctx context.Context, in *GetCategoryLangRequest, opts ...grpc.CallOption) (*GetCategoryLangResponse, error) {
	out := new(GetCategoryLangResponse)
	err := c.cc.Invoke(ctx, Middleware_GetCategoryLang_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetCategoryLangs(ctx context.Context, in *GetCategoryLangsRequest, opts ...grpc.CallOption) (*GetCategoryLangsResponse, error) {
	out := new(GetCategoryLangsResponse)
	err := c.cc.Invoke(ctx, Middleware_GetCategoryLangs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ExistCategoryLang(ctx context.Context, in *ExistCategoryLangRequest, opts ...grpc.CallOption) (*ExistCategoryLangResponse, error) {
	out := new(ExistCategoryLangResponse)
	err := c.cc.Invoke(ctx, Middleware_ExistCategoryLang_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ExistCategoryLangConds(ctx context.Context, in *ExistCategoryLangCondsRequest, opts ...grpc.CallOption) (*ExistCategoryLangCondsResponse, error) {
	out := new(ExistCategoryLangCondsResponse)
	err := c.cc.Invoke(ctx, Middleware_ExistCategoryLangConds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) DeleteCategoryLang(ctx context.Context, in *DeleteCategoryLangRequest, opts ...grpc.CallOption) (*DeleteCategoryLangResponse, error) {
	out := new(DeleteCategoryLangResponse)
	err := c.cc.Invoke(ctx, Middleware_DeleteCategoryLang_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
	CreateCategoryLang(context.Context, *CreateCategoryLangRequest) (*CreateCategoryLangResponse, error)
	UpdateCategoryLang(context.Context, *UpdateCategoryLangRequest) (*UpdateCategoryLangResponse, error)
	GetCategoryLang(context.Context, *GetCategoryLangRequest) (*GetCategoryLangResponse, error)
	GetCategoryLangs(context.Context, *GetCategoryLangsRequest) (*GetCategoryLangsResponse, error)
	ExistCategoryLang(context.Context, *ExistCategoryLangRequest) (*ExistCategoryLangResponse, error)
	ExistCategoryLangConds(context.Context, *ExistCategoryLangCondsRequest) (*ExistCategoryLangCondsResponse, error)
	DeleteCategoryLang(context.Context, *DeleteCategoryLangRequest) (*DeleteCategoryLangResponse, error)
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) CreateCategoryLang(context.Context, *CreateCategoryLangRequest) (*CreateCategoryLangResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategoryLang not implemented")
}
func (UnimplementedMiddlewareServer) UpdateCategoryLang(context.Context, *UpdateCategoryLangRequest) (*UpdateCategoryLangResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategoryLang not implemented")
}
func (UnimplementedMiddlewareServer) GetCategoryLang(context.Context, *GetCategoryLangRequest) (*GetCategoryLangResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryLang not implemented")
}
func (UnimplementedMiddlewareServer) GetCategoryLangs(context.Context, *GetCategoryLangsRequest) (*GetCategoryLangsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryLangs not implemented")
}
func (UnimplementedMiddlewareServer) ExistCategoryLang(context.Context, *ExistCategoryLangRequest) (*ExistCategoryLangResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistCategoryLang not implemented")
}
func (UnimplementedMiddlewareServer) ExistCategoryLangConds(context.Context, *ExistCategoryLangCondsRequest) (*ExistCategoryLangCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistCategoryLangConds not implemented")
}
func (UnimplementedMiddlewareServer) DeleteCategoryLang(context.Context, *DeleteCategoryLangRequest) (*DeleteCategoryLangResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategoryLang not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_CreateCategoryLang_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCategoryLangRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateCategoryLang(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_CreateCategoryLang_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateCategoryLang(ctx, req.(*CreateCategoryLangRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_UpdateCategoryLang_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCategoryLangRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).UpdateCategoryLang(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_UpdateCategoryLang_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).UpdateCategoryLang(ctx, req.(*UpdateCategoryLangRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetCategoryLang_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryLangRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetCategoryLang(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetCategoryLang_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetCategoryLang(ctx, req.(*GetCategoryLangRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetCategoryLangs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryLangsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetCategoryLangs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetCategoryLangs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetCategoryLangs(ctx, req.(*GetCategoryLangsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ExistCategoryLang_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistCategoryLangRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ExistCategoryLang(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_ExistCategoryLang_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ExistCategoryLang(ctx, req.(*ExistCategoryLangRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ExistCategoryLangConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistCategoryLangCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ExistCategoryLangConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_ExistCategoryLangConds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ExistCategoryLangConds(ctx, req.(*ExistCategoryLangCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_DeleteCategoryLang_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCategoryLangRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).DeleteCategoryLang(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_DeleteCategoryLang_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).DeleteCategoryLang(ctx, req.(*DeleteCategoryLangRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cms.middleware.category.lang.v1.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCategoryLang",
			Handler:    _Middleware_CreateCategoryLang_Handler,
		},
		{
			MethodName: "UpdateCategoryLang",
			Handler:    _Middleware_UpdateCategoryLang_Handler,
		},
		{
			MethodName: "GetCategoryLang",
			Handler:    _Middleware_GetCategoryLang_Handler,
		},
		{
			MethodName: "GetCategoryLangs",
			Handler:    _Middleware_GetCategoryLangs_Handler,
		},
		{
			MethodName: "ExistCategoryLang",
			Handler:    _Middleware_ExistCategoryLang_Handler,
		},
		{
			MethodName: "ExistCategoryLangConds",
			Handler:    _Middleware_ExistCategoryLangConds_Handler,
		},
		{
			MethodName: "DeleteCategoryLang",
			Handler:    _Middleware_DeleteCategoryLang_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/cms/mw/v1/category/lang/lang.proto",
}
