// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: npool/cms/mw/v1/category/lang/lang.proto

package lang

import (
	v1 "github.com/NpoolPlatform/message/npool/basetypes/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CategoryLangReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         *uint32 `protobuf:"varint,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID      *string `protobuf:"bytes,20,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	AppID      *string `protobuf:"bytes,30,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	LangID     *string `protobuf:"bytes,40,opt,name=LangID,proto3,oneof" json:"LangID,omitempty"`
	CategoryID *string `protobuf:"bytes,50,opt,name=CategoryID,proto3,oneof" json:"CategoryID,omitempty"`
	Display    *string `protobuf:"bytes,60,opt,name=Display,proto3,oneof" json:"Display,omitempty"`
}

func (x *CategoryLangReq) Reset() {
	*x = CategoryLangReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryLangReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryLangReq) ProtoMessage() {}

func (x *CategoryLangReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryLangReq.ProtoReflect.Descriptor instead.
func (*CategoryLangReq) Descriptor() ([]byte, []int) {
	return file_npool_cms_mw_v1_category_lang_lang_proto_rawDescGZIP(), []int{0}
}

func (x *CategoryLangReq) GetID() uint32 {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return 0
}

func (x *CategoryLangReq) GetEntID() string {
	if x != nil && x.EntID != nil {
		return *x.EntID
	}
	return ""
}

func (x *CategoryLangReq) GetAppID() string {
	if x != nil && x.AppID != nil {
		return *x.AppID
	}
	return ""
}

func (x *CategoryLangReq) GetLangID() string {
	if x != nil && x.LangID != nil {
		return *x.LangID
	}
	return ""
}

func (x *CategoryLangReq) GetCategoryID() string {
	if x != nil && x.CategoryID != nil {
		return *x.CategoryID
	}
	return ""
}

func (x *CategoryLangReq) GetDisplay() string {
	if x != nil && x.Display != nil {
		return *x.Display
	}
	return ""
}

type CategoryLang struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: sql:"id"
	ID uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty" sql:"id"`
	// @inject_tag: sql:"ent_id"
	EntID string `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty" sql:"ent_id"`
	// @inject_tag: sql:"app_id"
	AppID string `protobuf:"bytes,30,opt,name=AppID,proto3" json:"AppID,omitempty" sql:"app_id"`
	// @inject_tag: sql:"lang_id"
	LangID string `protobuf:"bytes,40,opt,name=LangID,proto3" json:"LangID,omitempty" sql:"lang_id"`
	// @inject_tag: sql:"category_id"
	CategoryID string `protobuf:"bytes,50,opt,name=CategoryID,proto3" json:"CategoryID,omitempty" sql:"category_id"`
	// @inject_tag: sql:"name"
	Name string `protobuf:"bytes,60,opt,name=Name,proto3" json:"Name,omitempty" sql:"name"`
	// @inject_tag: sql:"slug"
	Slug string `protobuf:"bytes,70,opt,name=Slug,proto3" json:"Slug,omitempty" sql:"slug"`
	// @inject_tag: sql:"enabled"
	Enabled bool `protobuf:"varint,80,opt,name=Enabled,proto3" json:"Enabled,omitempty" sql:"enabled"`
	// @inject_tag: sql:"display"
	Display string `protobuf:"bytes,90,opt,name=Display,proto3" json:"Display,omitempty" sql:"display"`
	// @inject_tag: sql:"created_at"
	CreatedAt uint32 `protobuf:"varint,1000,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
	// @inject_tag: sql:"updated_at"
	UpdatedAt uint32 `protobuf:"varint,1010,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty" sql:"updated_at"`
}

func (x *CategoryLang) Reset() {
	*x = CategoryLang{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryLang) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryLang) ProtoMessage() {}

func (x *CategoryLang) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryLang.ProtoReflect.Descriptor instead.
func (*CategoryLang) Descriptor() ([]byte, []int) {
	return file_npool_cms_mw_v1_category_lang_lang_proto_rawDescGZIP(), []int{1}
}

func (x *CategoryLang) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *CategoryLang) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *CategoryLang) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *CategoryLang) GetLangID() string {
	if x != nil {
		return x.LangID
	}
	return ""
}

func (x *CategoryLang) GetCategoryID() string {
	if x != nil {
		return x.CategoryID
	}
	return ""
}

func (x *CategoryLang) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CategoryLang) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *CategoryLang) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *CategoryLang) GetDisplay() string {
	if x != nil {
		return x.Display
	}
	return ""
}

func (x *CategoryLang) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *CategoryLang) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         *v1.Uint32Val      `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID      *v1.StringVal      `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty"`
	AppID      *v1.StringVal      `protobuf:"bytes,30,opt,name=AppID,proto3" json:"AppID,omitempty"`
	LangID     *v1.StringVal      `protobuf:"bytes,40,opt,name=LangID,proto3" json:"LangID,omitempty"`
	CategoryID *v1.StringVal      `protobuf:"bytes,50,opt,name=CategoryID,proto3" json:"CategoryID,omitempty"`
	Name       *v1.StringVal      `protobuf:"bytes,60,opt,name=Name,proto3" json:"Name,omitempty"`
	Enabled    *v1.BoolVal        `protobuf:"bytes,70,opt,name=Enabled,proto3" json:"Enabled,omitempty"`
	IDs        *v1.Uint32SliceVal `protobuf:"bytes,80,opt,name=IDs,proto3" json:"IDs,omitempty"`
	EntIDs     *v1.StringSliceVal `protobuf:"bytes,90,opt,name=EntIDs,proto3" json:"EntIDs,omitempty"`
	Display    *v1.StringVal      `protobuf:"bytes,100,opt,name=Display,proto3" json:"Display,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_cms_mw_v1_category_lang_lang_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *v1.Uint32Val {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetEntID() *v1.StringVal {
	if x != nil {
		return x.EntID
	}
	return nil
}

func (x *Conds) GetAppID() *v1.StringVal {
	if x != nil {
		return x.AppID
	}
	return nil
}

func (x *Conds) GetLangID() *v1.StringVal {
	if x != nil {
		return x.LangID
	}
	return nil
}

func (x *Conds) GetCategoryID() *v1.StringVal {
	if x != nil {
		return x.CategoryID
	}
	return nil
}

func (x *Conds) GetName() *v1.StringVal {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Conds) GetEnabled() *v1.BoolVal {
	if x != nil {
		return x.Enabled
	}
	return nil
}

func (x *Conds) GetIDs() *v1.Uint32SliceVal {
	if x != nil {
		return x.IDs
	}
	return nil
}

func (x *Conds) GetEntIDs() *v1.StringSliceVal {
	if x != nil {
		return x.EntIDs
	}
	return nil
}

func (x *Conds) GetDisplay() *v1.StringVal {
	if x != nil {
		return x.Display
	}
	return nil
}

type CreateCategoryLangRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CategoryLangReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateCategoryLangRequest) Reset() {
	*x = CreateCategoryLangRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCategoryLangRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCategoryLangRequest) ProtoMessage() {}

func (x *CreateCategoryLangRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCategoryLangRequest.ProtoReflect.Descriptor instead.
func (*CreateCategoryLangRequest) Descriptor() ([]byte, []int) {
	return file_npool_cms_mw_v1_category_lang_lang_proto_rawDescGZIP(), []int{3}
}

func (x *CreateCategoryLangRequest) GetInfo() *CategoryLangReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateCategoryLangResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CategoryLang `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateCategoryLangResponse) Reset() {
	*x = CreateCategoryLangResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCategoryLangResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCategoryLangResponse) ProtoMessage() {}

func (x *CreateCategoryLangResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCategoryLangResponse.ProtoReflect.Descriptor instead.
func (*CreateCategoryLangResponse) Descriptor() ([]byte, []int) {
	return file_npool_cms_mw_v1_category_lang_lang_proto_rawDescGZIP(), []int{4}
}

func (x *CreateCategoryLangResponse) GetInfo() *CategoryLang {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateCategoryLangRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CategoryLangReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateCategoryLangRequest) Reset() {
	*x = UpdateCategoryLangRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCategoryLangRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCategoryLangRequest) ProtoMessage() {}

func (x *UpdateCategoryLangRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCategoryLangRequest.ProtoReflect.Descriptor instead.
func (*UpdateCategoryLangRequest) Descriptor() ([]byte, []int) {
	return file_npool_cms_mw_v1_category_lang_lang_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateCategoryLangRequest) GetInfo() *CategoryLangReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateCategoryLangResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CategoryLang `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateCategoryLangResponse) Reset() {
	*x = UpdateCategoryLangResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCategoryLangResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCategoryLangResponse) ProtoMessage() {}

func (x *UpdateCategoryLangResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCategoryLangResponse.ProtoReflect.Descriptor instead.
func (*UpdateCategoryLangResponse) Descriptor() ([]byte, []int) {
	return file_npool_cms_mw_v1_category_lang_lang_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateCategoryLangResponse) GetInfo() *CategoryLang {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetCategoryLangRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntID string `protobuf:"bytes,10,opt,name=EntID,proto3" json:"EntID,omitempty"`
}

func (x *GetCategoryLangRequest) Reset() {
	*x = GetCategoryLangRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCategoryLangRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoryLangRequest) ProtoMessage() {}

func (x *GetCategoryLangRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoryLangRequest.ProtoReflect.Descriptor instead.
func (*GetCategoryLangRequest) Descriptor() ([]byte, []int) {
	return file_npool_cms_mw_v1_category_lang_lang_proto_rawDescGZIP(), []int{7}
}

func (x *GetCategoryLangRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

type GetCategoryLangResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CategoryLang `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetCategoryLangResponse) Reset() {
	*x = GetCategoryLangResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCategoryLangResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoryLangResponse) ProtoMessage() {}

func (x *GetCategoryLangResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoryLangResponse.ProtoReflect.Descriptor instead.
func (*GetCategoryLangResponse) Descriptor() ([]byte, []int) {
	return file_npool_cms_mw_v1_category_lang_lang_proto_rawDescGZIP(), []int{8}
}

func (x *GetCategoryLangResponse) GetInfo() *CategoryLang {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetCategoryLangsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetCategoryLangsRequest) Reset() {
	*x = GetCategoryLangsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCategoryLangsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoryLangsRequest) ProtoMessage() {}

func (x *GetCategoryLangsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoryLangsRequest.ProtoReflect.Descriptor instead.
func (*GetCategoryLangsRequest) Descriptor() ([]byte, []int) {
	return file_npool_cms_mw_v1_category_lang_lang_proto_rawDescGZIP(), []int{9}
}

func (x *GetCategoryLangsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetCategoryLangsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetCategoryLangsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetCategoryLangsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*CategoryLang `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32          `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetCategoryLangsResponse) Reset() {
	*x = GetCategoryLangsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCategoryLangsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoryLangsResponse) ProtoMessage() {}

func (x *GetCategoryLangsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoryLangsResponse.ProtoReflect.Descriptor instead.
func (*GetCategoryLangsResponse) Descriptor() ([]byte, []int) {
	return file_npool_cms_mw_v1_category_lang_lang_proto_rawDescGZIP(), []int{10}
}

func (x *GetCategoryLangsResponse) GetInfos() []*CategoryLang {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetCategoryLangsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ExistCategoryLangRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntID string `protobuf:"bytes,10,opt,name=EntID,proto3" json:"EntID,omitempty"`
}

func (x *ExistCategoryLangRequest) Reset() {
	*x = ExistCategoryLangRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistCategoryLangRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistCategoryLangRequest) ProtoMessage() {}

func (x *ExistCategoryLangRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistCategoryLangRequest.ProtoReflect.Descriptor instead.
func (*ExistCategoryLangRequest) Descriptor() ([]byte, []int) {
	return file_npool_cms_mw_v1_category_lang_lang_proto_rawDescGZIP(), []int{11}
}

func (x *ExistCategoryLangRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

type ExistCategoryLangResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistCategoryLangResponse) Reset() {
	*x = ExistCategoryLangResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistCategoryLangResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistCategoryLangResponse) ProtoMessage() {}

func (x *ExistCategoryLangResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistCategoryLangResponse.ProtoReflect.Descriptor instead.
func (*ExistCategoryLangResponse) Descriptor() ([]byte, []int) {
	return file_npool_cms_mw_v1_category_lang_lang_proto_rawDescGZIP(), []int{12}
}

func (x *ExistCategoryLangResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type ExistCategoryLangCondsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *ExistCategoryLangCondsRequest) Reset() {
	*x = ExistCategoryLangCondsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistCategoryLangCondsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistCategoryLangCondsRequest) ProtoMessage() {}

func (x *ExistCategoryLangCondsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistCategoryLangCondsRequest.ProtoReflect.Descriptor instead.
func (*ExistCategoryLangCondsRequest) Descriptor() ([]byte, []int) {
	return file_npool_cms_mw_v1_category_lang_lang_proto_rawDescGZIP(), []int{13}
}

func (x *ExistCategoryLangCondsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type ExistCategoryLangCondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistCategoryLangCondsResponse) Reset() {
	*x = ExistCategoryLangCondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistCategoryLangCondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistCategoryLangCondsResponse) ProtoMessage() {}

func (x *ExistCategoryLangCondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistCategoryLangCondsResponse.ProtoReflect.Descriptor instead.
func (*ExistCategoryLangCondsResponse) Descriptor() ([]byte, []int) {
	return file_npool_cms_mw_v1_category_lang_lang_proto_rawDescGZIP(), []int{14}
}

func (x *ExistCategoryLangCondsResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type DeleteCategoryLangRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CategoryLangReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteCategoryLangRequest) Reset() {
	*x = DeleteCategoryLangRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCategoryLangRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCategoryLangRequest) ProtoMessage() {}

func (x *DeleteCategoryLangRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCategoryLangRequest.ProtoReflect.Descriptor instead.
func (*DeleteCategoryLangRequest) Descriptor() ([]byte, []int) {
	return file_npool_cms_mw_v1_category_lang_lang_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteCategoryLangRequest) GetInfo() *CategoryLangReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type DeleteCategoryLangResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CategoryLang `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteCategoryLangResponse) Reset() {
	*x = DeleteCategoryLangResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCategoryLangResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCategoryLangResponse) ProtoMessage() {}

func (x *DeleteCategoryLangResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCategoryLangResponse.ProtoReflect.Descriptor instead.
func (*DeleteCategoryLangResponse) Descriptor() ([]byte, []int) {
	return file_npool_cms_mw_v1_category_lang_lang_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteCategoryLangResponse) GetInfo() *CategoryLang {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_cms_mw_v1_category_lang_lang_proto protoreflect.FileDescriptor

var file_npool_cms_mw_v1_category_lang_lang_proto_rawDesc = []byte{
	0x0a, 0x28, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x63, 0x6d, 0x73, 0x2f, 0x6d, 0x77, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x63, 0x6d, 0x73, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x6e, 0x70, 0x6f,
	0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfe, 0x01, 0x0a, 0x0f,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x12,
	0x13, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x02, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x4c, 0x61,
	0x6e, 0x67, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x4c, 0x61,
	0x6e, 0x67, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x49, 0x44, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0a, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52,
	0x07, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x41, 0x70, 0x70, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x4c, 0x61, 0x6e, 0x67, 0x49,
	0x44, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x22, 0x9c, 0x02, 0x0a,
	0x0c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x61, 0x6e, 0x67, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a,
	0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x61, 0x6e,
	0x67, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4c, 0x61, 0x6e, 0x67, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x18, 0x46, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x50, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x5a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x1d, 0x0a,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x09,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xf2, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xef, 0x03, 0x0a, 0x05,
	0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x52, 0x02, 0x49, 0x44, 0x12, 0x2d,
	0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x2d, 0x0a,
	0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x2f, 0x0a, 0x06,
	0x4c, 0x61, 0x6e, 0x67, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x52, 0x06, 0x4c, 0x61, 0x6e, 0x67, 0x49, 0x44, 0x12, 0x37, 0x0a,
	0x0a, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x52, 0x0a, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x3c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x46,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x52, 0x07, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x49, 0x44, 0x73, 0x18, 0x50, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x52,
	0x03, 0x49, 0x44, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x18, 0x5a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56,
	0x61, 0x6c, 0x52, 0x06, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x52, 0x07, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x22, 0x61, 0x0a,
	0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c,
	0x61, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x5f, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63,
	0x6d, 0x73, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x61, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63,
	0x6d, 0x73, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5f, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x61, 0x6e, 0x67, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2e, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x45, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x5c, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x41, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x85, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x4c, 0x61, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3c, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x75, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x61, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0x30, 0x0a, 0x18, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45,
	0x6e, 0x74, 0x49, 0x44, 0x22, 0x2f, 0x0a, 0x19, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5d, 0x0a, 0x1d, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x61, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x22, 0x34, 0x0a, 0x1e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x61, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x61, 0x0a, 0x19, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x61, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x4c, 0x61, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5f, 0x0a,
	0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c,
	0x61, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x6d, 0x73, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x84,
	0x08, 0x0a, 0x0a, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x12, 0x8f, 0x01,
	0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x4c, 0x61, 0x6e, 0x67, 0x12, 0x3a, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x6c,
	0x61, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3b, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x8f, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x4c, 0x61, 0x6e, 0x67, 0x12, 0x3a, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x6c, 0x61, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x86, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x4c, 0x61, 0x6e, 0x67, 0x12, 0x37, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e,
	0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38,
	0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x61, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x89, 0x01, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x61, 0x6e, 0x67, 0x73, 0x12,
	0x38, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x61, 0x6e,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x63, 0x6d, 0x73, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x61, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8c, 0x01, 0x0a, 0x11, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x61, 0x6e, 0x67, 0x12, 0x39, 0x2e, 0x63,
	0x6d, 0x73, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x61, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9b, 0x01, 0x0a, 0x16, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x61, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x3e, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x4c, 0x61, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3f, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x4c, 0x61, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x8f, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x61, 0x6e, 0x67, 0x12, 0x3a, 0x2e, 0x63, 0x6d, 0x73,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x61, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x63, 0x6d, 0x73, 0x2e, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x2e, 0x6c, 0x61, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4c, 0x61, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x40, 0x5a, 0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f,
	0x63, 0x6d, 0x73, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_cms_mw_v1_category_lang_lang_proto_rawDescOnce sync.Once
	file_npool_cms_mw_v1_category_lang_lang_proto_rawDescData = file_npool_cms_mw_v1_category_lang_lang_proto_rawDesc
)

func file_npool_cms_mw_v1_category_lang_lang_proto_rawDescGZIP() []byte {
	file_npool_cms_mw_v1_category_lang_lang_proto_rawDescOnce.Do(func() {
		file_npool_cms_mw_v1_category_lang_lang_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_cms_mw_v1_category_lang_lang_proto_rawDescData)
	})
	return file_npool_cms_mw_v1_category_lang_lang_proto_rawDescData
}

var file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_npool_cms_mw_v1_category_lang_lang_proto_goTypes = []interface{}{
	(*CategoryLangReq)(nil),                // 0: cms.middleware.category.lang.v1.CategoryLangReq
	(*CategoryLang)(nil),                   // 1: cms.middleware.category.lang.v1.CategoryLang
	(*Conds)(nil),                          // 2: cms.middleware.category.lang.v1.Conds
	(*CreateCategoryLangRequest)(nil),      // 3: cms.middleware.category.lang.v1.CreateCategoryLangRequest
	(*CreateCategoryLangResponse)(nil),     // 4: cms.middleware.category.lang.v1.CreateCategoryLangResponse
	(*UpdateCategoryLangRequest)(nil),      // 5: cms.middleware.category.lang.v1.UpdateCategoryLangRequest
	(*UpdateCategoryLangResponse)(nil),     // 6: cms.middleware.category.lang.v1.UpdateCategoryLangResponse
	(*GetCategoryLangRequest)(nil),         // 7: cms.middleware.category.lang.v1.GetCategoryLangRequest
	(*GetCategoryLangResponse)(nil),        // 8: cms.middleware.category.lang.v1.GetCategoryLangResponse
	(*GetCategoryLangsRequest)(nil),        // 9: cms.middleware.category.lang.v1.GetCategoryLangsRequest
	(*GetCategoryLangsResponse)(nil),       // 10: cms.middleware.category.lang.v1.GetCategoryLangsResponse
	(*ExistCategoryLangRequest)(nil),       // 11: cms.middleware.category.lang.v1.ExistCategoryLangRequest
	(*ExistCategoryLangResponse)(nil),      // 12: cms.middleware.category.lang.v1.ExistCategoryLangResponse
	(*ExistCategoryLangCondsRequest)(nil),  // 13: cms.middleware.category.lang.v1.ExistCategoryLangCondsRequest
	(*ExistCategoryLangCondsResponse)(nil), // 14: cms.middleware.category.lang.v1.ExistCategoryLangCondsResponse
	(*DeleteCategoryLangRequest)(nil),      // 15: cms.middleware.category.lang.v1.DeleteCategoryLangRequest
	(*DeleteCategoryLangResponse)(nil),     // 16: cms.middleware.category.lang.v1.DeleteCategoryLangResponse
	(*v1.Uint32Val)(nil),                   // 17: basetypes.v1.Uint32Val
	(*v1.StringVal)(nil),                   // 18: basetypes.v1.StringVal
	(*v1.BoolVal)(nil),                     // 19: basetypes.v1.BoolVal
	(*v1.Uint32SliceVal)(nil),              // 20: basetypes.v1.Uint32SliceVal
	(*v1.StringSliceVal)(nil),              // 21: basetypes.v1.StringSliceVal
}
var file_npool_cms_mw_v1_category_lang_lang_proto_depIdxs = []int32{
	17, // 0: cms.middleware.category.lang.v1.Conds.ID:type_name -> basetypes.v1.Uint32Val
	18, // 1: cms.middleware.category.lang.v1.Conds.EntID:type_name -> basetypes.v1.StringVal
	18, // 2: cms.middleware.category.lang.v1.Conds.AppID:type_name -> basetypes.v1.StringVal
	18, // 3: cms.middleware.category.lang.v1.Conds.LangID:type_name -> basetypes.v1.StringVal
	18, // 4: cms.middleware.category.lang.v1.Conds.CategoryID:type_name -> basetypes.v1.StringVal
	18, // 5: cms.middleware.category.lang.v1.Conds.Name:type_name -> basetypes.v1.StringVal
	19, // 6: cms.middleware.category.lang.v1.Conds.Enabled:type_name -> basetypes.v1.BoolVal
	20, // 7: cms.middleware.category.lang.v1.Conds.IDs:type_name -> basetypes.v1.Uint32SliceVal
	21, // 8: cms.middleware.category.lang.v1.Conds.EntIDs:type_name -> basetypes.v1.StringSliceVal
	18, // 9: cms.middleware.category.lang.v1.Conds.Display:type_name -> basetypes.v1.StringVal
	0,  // 10: cms.middleware.category.lang.v1.CreateCategoryLangRequest.Info:type_name -> cms.middleware.category.lang.v1.CategoryLangReq
	1,  // 11: cms.middleware.category.lang.v1.CreateCategoryLangResponse.Info:type_name -> cms.middleware.category.lang.v1.CategoryLang
	0,  // 12: cms.middleware.category.lang.v1.UpdateCategoryLangRequest.Info:type_name -> cms.middleware.category.lang.v1.CategoryLangReq
	1,  // 13: cms.middleware.category.lang.v1.UpdateCategoryLangResponse.Info:type_name -> cms.middleware.category.lang.v1.CategoryLang
	1,  // 14: cms.middleware.category.lang.v1.GetCategoryLangResponse.Info:type_name -> cms.middleware.category.lang.v1.CategoryLang
	2,  // 15: cms.middleware.category.lang.v1.GetCategoryLangsRequest.Conds:type_name -> cms.middleware.category.lang.v1.Conds
	1,  // 16: cms.middleware.category.lang.v1.GetCategoryLangsResponse.Infos:type_name -> cms.middleware.category.lang.v1.CategoryLang
	2,  // 17: cms.middleware.category.lang.v1.ExistCategoryLangCondsRequest.Conds:type_name -> cms.middleware.category.lang.v1.Conds
	0,  // 18: cms.middleware.category.lang.v1.DeleteCategoryLangRequest.Info:type_name -> cms.middleware.category.lang.v1.CategoryLangReq
	1,  // 19: cms.middleware.category.lang.v1.DeleteCategoryLangResponse.Info:type_name -> cms.middleware.category.lang.v1.CategoryLang
	3,  // 20: cms.middleware.category.lang.v1.Middleware.CreateCategoryLang:input_type -> cms.middleware.category.lang.v1.CreateCategoryLangRequest
	5,  // 21: cms.middleware.category.lang.v1.Middleware.UpdateCategoryLang:input_type -> cms.middleware.category.lang.v1.UpdateCategoryLangRequest
	7,  // 22: cms.middleware.category.lang.v1.Middleware.GetCategoryLang:input_type -> cms.middleware.category.lang.v1.GetCategoryLangRequest
	9,  // 23: cms.middleware.category.lang.v1.Middleware.GetCategoryLangs:input_type -> cms.middleware.category.lang.v1.GetCategoryLangsRequest
	11, // 24: cms.middleware.category.lang.v1.Middleware.ExistCategoryLang:input_type -> cms.middleware.category.lang.v1.ExistCategoryLangRequest
	13, // 25: cms.middleware.category.lang.v1.Middleware.ExistCategoryLangConds:input_type -> cms.middleware.category.lang.v1.ExistCategoryLangCondsRequest
	15, // 26: cms.middleware.category.lang.v1.Middleware.DeleteCategoryLang:input_type -> cms.middleware.category.lang.v1.DeleteCategoryLangRequest
	4,  // 27: cms.middleware.category.lang.v1.Middleware.CreateCategoryLang:output_type -> cms.middleware.category.lang.v1.CreateCategoryLangResponse
	6,  // 28: cms.middleware.category.lang.v1.Middleware.UpdateCategoryLang:output_type -> cms.middleware.category.lang.v1.UpdateCategoryLangResponse
	8,  // 29: cms.middleware.category.lang.v1.Middleware.GetCategoryLang:output_type -> cms.middleware.category.lang.v1.GetCategoryLangResponse
	10, // 30: cms.middleware.category.lang.v1.Middleware.GetCategoryLangs:output_type -> cms.middleware.category.lang.v1.GetCategoryLangsResponse
	12, // 31: cms.middleware.category.lang.v1.Middleware.ExistCategoryLang:output_type -> cms.middleware.category.lang.v1.ExistCategoryLangResponse
	14, // 32: cms.middleware.category.lang.v1.Middleware.ExistCategoryLangConds:output_type -> cms.middleware.category.lang.v1.ExistCategoryLangCondsResponse
	16, // 33: cms.middleware.category.lang.v1.Middleware.DeleteCategoryLang:output_type -> cms.middleware.category.lang.v1.DeleteCategoryLangResponse
	27, // [27:34] is the sub-list for method output_type
	20, // [20:27] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_npool_cms_mw_v1_category_lang_lang_proto_init() }
func file_npool_cms_mw_v1_category_lang_lang_proto_init() {
	if File_npool_cms_mw_v1_category_lang_lang_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryLangReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryLang); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCategoryLangRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCategoryLangResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCategoryLangRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCategoryLangResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCategoryLangRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCategoryLangResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCategoryLangsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCategoryLangsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistCategoryLangRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistCategoryLangResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistCategoryLangCondsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistCategoryLangCondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCategoryLangRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCategoryLangResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_cms_mw_v1_category_lang_lang_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_cms_mw_v1_category_lang_lang_proto_goTypes,
		DependencyIndexes: file_npool_cms_mw_v1_category_lang_lang_proto_depIdxs,
		MessageInfos:      file_npool_cms_mw_v1_category_lang_lang_proto_msgTypes,
	}.Build()
	File_npool_cms_mw_v1_category_lang_lang_proto = out.File
	file_npool_cms_mw_v1_category_lang_lang_proto_rawDesc = nil
	file_npool_cms_mw_v1_category_lang_lang_proto_goTypes = nil
	file_npool_cms_mw_v1_category_lang_lang_proto_depIdxs = nil
}
