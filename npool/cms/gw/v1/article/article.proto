syntax = "proto3";

package cms.gateway.article.v1;

option go_package = "github.com/NpoolPlatform/message/npool/cms/gw/v1/article";

import "npool/cms/mw/v1/article/article.proto";
import "google/api/annotations.proto";
import "npool/basetypes/cms/v1/enums.proto";

// Service Name
service Gateway {
    // URL: https://{Host}/api/cms/v1/c/{ContentURL}
    // Host ex: api.site.top
    // ContentURL: {Category1.Slug}/{Category2.Slug}/.../{ISO}/{PageName}
    // ex: news/markets/en-US/test-page.html
    // ISO: {LANG}
    // ex: en-US
    // PageName: {Title}.html -> ToLower({Title}) -> ReplaceAll({Title}, " ", "-")
    // ex: test-page.html
    rpc GetContent(GetContentRequest) returns (GetContentResponse) {
        option (google.api.http) = {
            get: "/v1/c/{ContentURL=**}"
        };
    }

    rpc GetContentList(GetContentListRequest) returns (GetContentListResponse) {
        option (google.api.http) = {
            post: "/v1/get/contentlist"
            body: "*"
        };
    }

    rpc CreateArticle(CreateArticleRequest) returns (CreateArticleResponse) {
        option (google.api.http) = {
            post: "/v1/create/article"
            body: "*"
        };
    }
    rpc UpdateArticle(UpdateArticleRequest) returns (UpdateArticleResponse) {
        option (google.api.http) = {
            post: "/v1/update/article"
            body: "*"
        };
    }
    rpc DeleteArticle(DeleteArticleRequest) returns (DeleteArticleResponse) {
        option (google.api.http) = {
            post: "/v1/delete/article"
            body: "*"
        };
    }
    rpc GetArticles(GetArticlesRequest) returns (GetArticlesResponse) {
        option (google.api.http) = {
            post: "/v1/get/articles"
            body: "*"
        };
    }
    rpc GetArticleContent(GetArticleContentRequest) returns (GetArticleContentResponse) {
        option (google.api.http) = {
            post: "/v1/get/articlecontent"
            body: "*"
        };
    }
}

message GetContentListRequest {
    string AppID               = 10;
    optional string CategoryID = 20;
    int32  Offset              = 30;
    int32  Limit               = 40;
}

message GetContentListResponse {
    repeated middleware.article.v1.Article Infos = 10;
    uint32                                 Total = 20;
}

message GetContentRequest {
    string ContentURL = 10;
}

message GetContentResponse {
    string Info = 10;
}

message CreateArticleRequest {
    string AppID              = 10;
    string TargetLangID       = 20;
    string CategoryID         = 30;
    string UserID             = 40;
    string Title              = 50;
    string Subtitle           = 60;
    string Digest             = 70;
    string Content            = 80;
    optional bool ACLEnabled  = 90;
}

message CreateArticleResponse {
    middleware.article.v1.Article Info = 10;
}

message UpdateArticleRequest {
    uint32          ID            = 10;
    string          EntID         = 20;
    string          AppID         = 30;
    optional string CategoryID    = 40;
    optional string UserID        = 50;
    optional string Title         = 60;
    optional string Subtitle      = 70;
    optional string Digest        = 80;
    optional string Content       = 90;
    optional bool   UpdateContent = 100;
    optional bool   ACLEnabled    = 110;
    optional basetypes.cms.v1.ArticleStatus Status = 120;
}

message UpdateArticleResponse {
    middleware.article.v1.Article Info = 10;
}

message GetArticlesRequest {
    string AppID        = 10;
    int32  Offset       = 20;
    int32  Limit        = 30;
}

message GetArticlesResponse {
    repeated middleware.article.v1.Article Infos = 10;
    uint32                                 Total = 20;
}

message GetArticleContentRequest {
    uint32 ID    = 10;
    string EntID = 20;
    string AppID = 30;
}

message GetArticleContentResponse {
    string Info = 10;
}

message DeleteArticleRequest {
    uint32 ID    = 10;
    string EntID = 20;
    string AppID = 30;
}

message DeleteArticleResponse {
    middleware.article.v1.Article Info = 10;
}
