// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/cms/gw/v1/category/lang/lang.proto

package lang

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gateway_GetCategoryLangs_FullMethodName    = "/cms.gateway.category.lang.v1.Gateway/GetCategoryLangs"
	Gateway_CreateCategoryLang_FullMethodName  = "/cms.gateway.category.lang.v1.Gateway/CreateCategoryLang"
	Gateway_UpdateCategoryLang_FullMethodName  = "/cms.gateway.category.lang.v1.Gateway/UpdateCategoryLang"
	Gateway_GetAppCategoryLangs_FullMethodName = "/cms.gateway.category.lang.v1.Gateway/GetAppCategoryLangs"
	Gateway_DeleteCategoryLang_FullMethodName  = "/cms.gateway.category.lang.v1.Gateway/DeleteCategoryLang"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	GetCategoryLangs(ctx context.Context, in *GetCategoryLangsRequest, opts ...grpc.CallOption) (*GetCategoryLangsResponse, error)
	CreateCategoryLang(ctx context.Context, in *CreateCategoryLangRequest, opts ...grpc.CallOption) (*CreateCategoryLangResponse, error)
	UpdateCategoryLang(ctx context.Context, in *UpdateCategoryLangRequest, opts ...grpc.CallOption) (*UpdateCategoryLangResponse, error)
	GetAppCategoryLangs(ctx context.Context, in *GetAppCategoryLangsRequest, opts ...grpc.CallOption) (*GetAppCategoryLangsResponse, error)
	DeleteCategoryLang(ctx context.Context, in *DeleteCategoryLangRequest, opts ...grpc.CallOption) (*DeleteCategoryLangResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) GetCategoryLangs(ctx context.Context, in *GetCategoryLangsRequest, opts ...grpc.CallOption) (*GetCategoryLangsResponse, error) {
	out := new(GetCategoryLangsResponse)
	err := c.cc.Invoke(ctx, Gateway_GetCategoryLangs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) CreateCategoryLang(ctx context.Context, in *CreateCategoryLangRequest, opts ...grpc.CallOption) (*CreateCategoryLangResponse, error) {
	out := new(CreateCategoryLangResponse)
	err := c.cc.Invoke(ctx, Gateway_CreateCategoryLang_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdateCategoryLang(ctx context.Context, in *UpdateCategoryLangRequest, opts ...grpc.CallOption) (*UpdateCategoryLangResponse, error) {
	out := new(UpdateCategoryLangResponse)
	err := c.cc.Invoke(ctx, Gateway_UpdateCategoryLang_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetAppCategoryLangs(ctx context.Context, in *GetAppCategoryLangsRequest, opts ...grpc.CallOption) (*GetAppCategoryLangsResponse, error) {
	out := new(GetAppCategoryLangsResponse)
	err := c.cc.Invoke(ctx, Gateway_GetAppCategoryLangs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) DeleteCategoryLang(ctx context.Context, in *DeleteCategoryLangRequest, opts ...grpc.CallOption) (*DeleteCategoryLangResponse, error) {
	out := new(DeleteCategoryLangResponse)
	err := c.cc.Invoke(ctx, Gateway_DeleteCategoryLang_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	GetCategoryLangs(context.Context, *GetCategoryLangsRequest) (*GetCategoryLangsResponse, error)
	CreateCategoryLang(context.Context, *CreateCategoryLangRequest) (*CreateCategoryLangResponse, error)
	UpdateCategoryLang(context.Context, *UpdateCategoryLangRequest) (*UpdateCategoryLangResponse, error)
	GetAppCategoryLangs(context.Context, *GetAppCategoryLangsRequest) (*GetAppCategoryLangsResponse, error)
	DeleteCategoryLang(context.Context, *DeleteCategoryLangRequest) (*DeleteCategoryLangResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) GetCategoryLangs(context.Context, *GetCategoryLangsRequest) (*GetCategoryLangsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCategoryLangs not implemented")
}
func (UnimplementedGatewayServer) CreateCategoryLang(context.Context, *CreateCategoryLangRequest) (*CreateCategoryLangResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategoryLang not implemented")
}
func (UnimplementedGatewayServer) UpdateCategoryLang(context.Context, *UpdateCategoryLangRequest) (*UpdateCategoryLangResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCategoryLang not implemented")
}
func (UnimplementedGatewayServer) GetAppCategoryLangs(context.Context, *GetAppCategoryLangsRequest) (*GetAppCategoryLangsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppCategoryLangs not implemented")
}
func (UnimplementedGatewayServer) DeleteCategoryLang(context.Context, *DeleteCategoryLangRequest) (*DeleteCategoryLangResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCategoryLang not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_GetCategoryLangs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCategoryLangsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetCategoryLangs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetCategoryLangs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetCategoryLangs(ctx, req.(*GetCategoryLangsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_CreateCategoryLang_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCategoryLangRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateCategoryLang(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_CreateCategoryLang_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateCategoryLang(ctx, req.(*CreateCategoryLangRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdateCategoryLang_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCategoryLangRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateCategoryLang(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_UpdateCategoryLang_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateCategoryLang(ctx, req.(*UpdateCategoryLangRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetAppCategoryLangs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppCategoryLangsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetAppCategoryLangs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetAppCategoryLangs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetAppCategoryLangs(ctx, req.(*GetAppCategoryLangsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_DeleteCategoryLang_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCategoryLangRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).DeleteCategoryLang(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_DeleteCategoryLang_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).DeleteCategoryLang(ctx, req.(*DeleteCategoryLangRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cms.gateway.category.lang.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCategoryLangs",
			Handler:    _Gateway_GetCategoryLangs_Handler,
		},
		{
			MethodName: "CreateCategoryLang",
			Handler:    _Gateway_CreateCategoryLang_Handler,
		},
		{
			MethodName: "UpdateCategoryLang",
			Handler:    _Gateway_UpdateCategoryLang_Handler,
		},
		{
			MethodName: "GetAppCategoryLangs",
			Handler:    _Gateway_GetAppCategoryLangs_Handler,
		},
		{
			MethodName: "DeleteCategoryLang",
			Handler:    _Gateway_DeleteCategoryLang_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/cms/gw/v1/category/lang/lang.proto",
}
