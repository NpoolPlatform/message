// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/chain/mw/v1/coin/fiatcurrency/fiatcurrency.proto

package fiatcurrency

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
	CreateFiatCurrency(ctx context.Context, in *CreateFiatCurrencyRequest, opts ...grpc.CallOption) (*CreateFiatCurrencyResponse, error)
	CreateFiatCurrencies(ctx context.Context, in *CreateFiatCurrenciesRequest, opts ...grpc.CallOption) (*CreateFiatCurrenciesResponse, error)
	GetFiatCurrency(ctx context.Context, in *GetFiatCurrencyRequest, opts ...grpc.CallOption) (*GetFiatCurrencyResponse, error)
	GetFiatCurrencies(ctx context.Context, in *GetFiatCurrenciesRequest, opts ...grpc.CallOption) (*GetFiatCurrenciesResponse, error)
	GetCoinFiatCurrencies(ctx context.Context, in *GetCoinFiatCurrenciesRequest, opts ...grpc.CallOption) (*GetCoinFiatCurrenciesResponse, error)
	GetHistories(ctx context.Context, in *GetHistoriesRequest, opts ...grpc.CallOption) (*GetHistoriesResponse, error)
	RefreshFiatCurrencies(ctx context.Context, in *RefreshFiatCurrenciesRequest, opts ...grpc.CallOption) (*RefreshFiatCurrenciesResponse, error)
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) CreateFiatCurrency(ctx context.Context, in *CreateFiatCurrencyRequest, opts ...grpc.CallOption) (*CreateFiatCurrencyResponse, error) {
	out := new(CreateFiatCurrencyResponse)
	err := c.cc.Invoke(ctx, "/chain.middleware.coin.fiatcurrency.v1.Middleware/CreateFiatCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) CreateFiatCurrencies(ctx context.Context, in *CreateFiatCurrenciesRequest, opts ...grpc.CallOption) (*CreateFiatCurrenciesResponse, error) {
	out := new(CreateFiatCurrenciesResponse)
	err := c.cc.Invoke(ctx, "/chain.middleware.coin.fiatcurrency.v1.Middleware/CreateFiatCurrencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetFiatCurrency(ctx context.Context, in *GetFiatCurrencyRequest, opts ...grpc.CallOption) (*GetFiatCurrencyResponse, error) {
	out := new(GetFiatCurrencyResponse)
	err := c.cc.Invoke(ctx, "/chain.middleware.coin.fiatcurrency.v1.Middleware/GetFiatCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetFiatCurrencies(ctx context.Context, in *GetFiatCurrenciesRequest, opts ...grpc.CallOption) (*GetFiatCurrenciesResponse, error) {
	out := new(GetFiatCurrenciesResponse)
	err := c.cc.Invoke(ctx, "/chain.middleware.coin.fiatcurrency.v1.Middleware/GetFiatCurrencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetCoinFiatCurrencies(ctx context.Context, in *GetCoinFiatCurrenciesRequest, opts ...grpc.CallOption) (*GetCoinFiatCurrenciesResponse, error) {
	out := new(GetCoinFiatCurrenciesResponse)
	err := c.cc.Invoke(ctx, "/chain.middleware.coin.fiatcurrency.v1.Middleware/GetCoinFiatCurrencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetHistories(ctx context.Context, in *GetHistoriesRequest, opts ...grpc.CallOption) (*GetHistoriesResponse, error) {
	out := new(GetHistoriesResponse)
	err := c.cc.Invoke(ctx, "/chain.middleware.coin.fiatcurrency.v1.Middleware/GetHistories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) RefreshFiatCurrencies(ctx context.Context, in *RefreshFiatCurrenciesRequest, opts ...grpc.CallOption) (*RefreshFiatCurrenciesResponse, error) {
	out := new(RefreshFiatCurrenciesResponse)
	err := c.cc.Invoke(ctx, "/chain.middleware.coin.fiatcurrency.v1.Middleware/RefreshFiatCurrencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
	CreateFiatCurrency(context.Context, *CreateFiatCurrencyRequest) (*CreateFiatCurrencyResponse, error)
	CreateFiatCurrencies(context.Context, *CreateFiatCurrenciesRequest) (*CreateFiatCurrenciesResponse, error)
	GetFiatCurrency(context.Context, *GetFiatCurrencyRequest) (*GetFiatCurrencyResponse, error)
	GetFiatCurrencies(context.Context, *GetFiatCurrenciesRequest) (*GetFiatCurrenciesResponse, error)
	GetCoinFiatCurrencies(context.Context, *GetCoinFiatCurrenciesRequest) (*GetCoinFiatCurrenciesResponse, error)
	GetHistories(context.Context, *GetHistoriesRequest) (*GetHistoriesResponse, error)
	RefreshFiatCurrencies(context.Context, *RefreshFiatCurrenciesRequest) (*RefreshFiatCurrenciesResponse, error)
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) CreateFiatCurrency(context.Context, *CreateFiatCurrencyRequest) (*CreateFiatCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFiatCurrency not implemented")
}
func (UnimplementedMiddlewareServer) CreateFiatCurrencies(context.Context, *CreateFiatCurrenciesRequest) (*CreateFiatCurrenciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFiatCurrencies not implemented")
}
func (UnimplementedMiddlewareServer) GetFiatCurrency(context.Context, *GetFiatCurrencyRequest) (*GetFiatCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFiatCurrency not implemented")
}
func (UnimplementedMiddlewareServer) GetFiatCurrencies(context.Context, *GetFiatCurrenciesRequest) (*GetFiatCurrenciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFiatCurrencies not implemented")
}
func (UnimplementedMiddlewareServer) GetCoinFiatCurrencies(context.Context, *GetCoinFiatCurrenciesRequest) (*GetCoinFiatCurrenciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinFiatCurrencies not implemented")
}
func (UnimplementedMiddlewareServer) GetHistories(context.Context, *GetHistoriesRequest) (*GetHistoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistories not implemented")
}
func (UnimplementedMiddlewareServer) RefreshFiatCurrencies(context.Context, *RefreshFiatCurrenciesRequest) (*RefreshFiatCurrenciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshFiatCurrencies not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_CreateFiatCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFiatCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateFiatCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.middleware.coin.fiatcurrency.v1.Middleware/CreateFiatCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateFiatCurrency(ctx, req.(*CreateFiatCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_CreateFiatCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFiatCurrenciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateFiatCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.middleware.coin.fiatcurrency.v1.Middleware/CreateFiatCurrencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateFiatCurrencies(ctx, req.(*CreateFiatCurrenciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetFiatCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFiatCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetFiatCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.middleware.coin.fiatcurrency.v1.Middleware/GetFiatCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetFiatCurrency(ctx, req.(*GetFiatCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetFiatCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFiatCurrenciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetFiatCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.middleware.coin.fiatcurrency.v1.Middleware/GetFiatCurrencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetFiatCurrencies(ctx, req.(*GetFiatCurrenciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetCoinFiatCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinFiatCurrenciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetCoinFiatCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.middleware.coin.fiatcurrency.v1.Middleware/GetCoinFiatCurrencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetCoinFiatCurrencies(ctx, req.(*GetCoinFiatCurrenciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetHistories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHistoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetHistories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.middleware.coin.fiatcurrency.v1.Middleware/GetHistories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetHistories(ctx, req.(*GetHistoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_RefreshFiatCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshFiatCurrenciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).RefreshFiatCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.middleware.coin.fiatcurrency.v1.Middleware/RefreshFiatCurrencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).RefreshFiatCurrencies(ctx, req.(*RefreshFiatCurrenciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chain.middleware.coin.fiatcurrency.v1.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFiatCurrency",
			Handler:    _Middleware_CreateFiatCurrency_Handler,
		},
		{
			MethodName: "CreateFiatCurrencies",
			Handler:    _Middleware_CreateFiatCurrencies_Handler,
		},
		{
			MethodName: "GetFiatCurrency",
			Handler:    _Middleware_GetFiatCurrency_Handler,
		},
		{
			MethodName: "GetFiatCurrencies",
			Handler:    _Middleware_GetFiatCurrencies_Handler,
		},
		{
			MethodName: "GetCoinFiatCurrencies",
			Handler:    _Middleware_GetCoinFiatCurrencies_Handler,
		},
		{
			MethodName: "GetHistories",
			Handler:    _Middleware_GetHistories_Handler,
		},
		{
			MethodName: "RefreshFiatCurrencies",
			Handler:    _Middleware_RefreshFiatCurrencies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/chain/mw/v1/coin/fiatcurrency/fiatcurrency.proto",
}
