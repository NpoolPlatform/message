// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
// 	protoc-gen-go v1.30.0
=======
// 	protoc-gen-go v1.31.0
>>>>>>> 2283e696c (Add auto increment id)
=======
// 	protoc-gen-go v1.31.0
>>>>>>> 8eb981ff1 (Add auto increment id)
=======
// 	protoc-gen-go v1.31.0
>>>>>>> 2283e696c (Add auto increment id)
=======
// 	protoc-gen-go v1.31.0
>>>>>>> 8eb981ff1 (Add auto increment id)
=======
// 	protoc-gen-go v1.27.1
>>>>>>> 53161d938 (generate rebase proto)
// 	protoc        v3.18.1
// source: npool/chain/mw/v1/coin/coin.proto

package coin

import (
	v1 "github.com/NpoolPlatform/message/npool/basetypes/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CoinReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                          *uint32     `protobuf:"varint,9,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID                       *string     `protobuf:"bytes,10,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	Name                        *string     `protobuf:"bytes,20,opt,name=Name,proto3,oneof" json:"Name,omitempty"`
	Logo                        *string     `protobuf:"bytes,30,opt,name=Logo,proto3,oneof" json:"Logo,omitempty"`
	Presale                     *bool       `protobuf:"varint,40,opt,name=Presale,proto3,oneof" json:"Presale,omitempty"`
	Unit                        *string     `protobuf:"bytes,50,opt,name=Unit,proto3,oneof" json:"Unit,omitempty"`
	ENV                         *string     `protobuf:"bytes,60,opt,name=ENV,proto3,oneof" json:"ENV,omitempty"`
	ReservedAmount              *string     `protobuf:"bytes,70,opt,name=ReservedAmount,proto3,oneof" json:"ReservedAmount,omitempty"`
	ForPay                      *bool       `protobuf:"varint,80,opt,name=ForPay,proto3,oneof" json:"ForPay,omitempty"`
	HomePage                    *string     `protobuf:"bytes,90,opt,name=HomePage,proto3,oneof" json:"HomePage,omitempty"`
	Specs                       *string     `protobuf:"bytes,100,opt,name=Specs,proto3,oneof" json:"Specs,omitempty"`
	FeeCoinTypeID               *string     `protobuf:"bytes,110,opt,name=FeeCoinTypeID,proto3,oneof" json:"FeeCoinTypeID,omitempty"`
	WithdrawFeeByStableUSD      *bool       `protobuf:"varint,120,opt,name=WithdrawFeeByStableUSD,proto3,oneof" json:"WithdrawFeeByStableUSD,omitempty"`
	WithdrawFeeAmount           *string     `protobuf:"bytes,130,opt,name=WithdrawFeeAmount,proto3,oneof" json:"WithdrawFeeAmount,omitempty"`
	CollectFeeAmount            *string     `protobuf:"bytes,140,opt,name=CollectFeeAmount,proto3,oneof" json:"CollectFeeAmount,omitempty"`
	HotWalletFeeAmount          *string     `protobuf:"bytes,150,opt,name=HotWalletFeeAmount,proto3,oneof" json:"HotWalletFeeAmount,omitempty"`
	LowFeeAmount                *string     `protobuf:"bytes,160,opt,name=LowFeeAmount,proto3,oneof" json:"LowFeeAmount,omitempty"`
	HotLowFeeAmount             *string     `protobuf:"bytes,161,opt,name=HotLowFeeAmount,proto3,oneof" json:"HotLowFeeAmount,omitempty"`
	HotWalletAccountAmount      *string     `protobuf:"bytes,170,opt,name=HotWalletAccountAmount,proto3,oneof" json:"HotWalletAccountAmount,omitempty"`
	PaymentAccountCollectAmount *string     `protobuf:"bytes,180,opt,name=PaymentAccountCollectAmount,proto3,oneof" json:"PaymentAccountCollectAmount,omitempty"`
	Disabled                    *bool       `protobuf:"varint,190,opt,name=Disabled,proto3,oneof" json:"Disabled,omitempty"`
	StableUSD                   *bool       `protobuf:"varint,200,opt,name=StableUSD,proto3,oneof" json:"StableUSD,omitempty"`
	LeastTransferAmount         *string     `protobuf:"bytes,210,opt,name=LeastTransferAmount,proto3,oneof" json:"LeastTransferAmount,omitempty"`
	NeedMemo                    *bool       `protobuf:"varint,220,opt,name=NeedMemo,proto3,oneof" json:"NeedMemo,omitempty"`
	RefreshCurrency             *bool       `protobuf:"varint,230,opt,name=RefreshCurrency,proto3,oneof" json:"RefreshCurrency,omitempty"`
	ChainType                   *string     `protobuf:"bytes,240,opt,name=ChainType,proto3,oneof" json:"ChainType,omitempty"`
	ChainNativeUnit             *string     `protobuf:"bytes,250,opt,name=ChainNativeUnit,proto3,oneof" json:"ChainNativeUnit,omitempty"`
	ChainAtomicUnit             *string     `protobuf:"bytes,260,opt,name=ChainAtomicUnit,proto3,oneof" json:"ChainAtomicUnit,omitempty"`
	ChainUnitExp                *uint32     `protobuf:"varint,270,opt,name=ChainUnitExp,proto3,oneof" json:"ChainUnitExp,omitempty"`
	GasType                     *v1.GasType `protobuf:"varint,280,opt,name=GasType,proto3,enum=basetypes.v1.GasType,oneof" json:"GasType,omitempty"`
	ChainID                     *string     `protobuf:"bytes,290,opt,name=ChainID,proto3,oneof" json:"ChainID,omitempty"`
	ChainNickname               *string     `protobuf:"bytes,300,opt,name=ChainNickname,proto3,oneof" json:"ChainNickname,omitempty"`
	ChainNativeCoinName         *string     `protobuf:"bytes,310,opt,name=ChainNativeCoinName,proto3,oneof" json:"ChainNativeCoinName,omitempty"`
	CheckNewAddressBalance      *bool       `protobuf:"varint,320,opt,name=CheckNewAddressBalance,proto3,oneof" json:"CheckNewAddressBalance,omitempty"`
}

func (x *CoinReq) Reset() {
	*x = CoinReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinReq) ProtoMessage() {}

func (x *CoinReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinReq.ProtoReflect.Descriptor instead.
func (*CoinReq) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_coin_proto_rawDescGZIP(), []int{0}
}

func (x *CoinReq) GetID() uint32 {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return 0
}

func (x *CoinReq) GetEntID() string {
	if x != nil && x.EntID != nil {
		return *x.EntID
	}
	return ""
}

func (x *CoinReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CoinReq) GetLogo() string {
	if x != nil && x.Logo != nil {
		return *x.Logo
	}
	return ""
}

func (x *CoinReq) GetPresale() bool {
	if x != nil && x.Presale != nil {
		return *x.Presale
	}
	return false
}

func (x *CoinReq) GetUnit() string {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return ""
}

func (x *CoinReq) GetENV() string {
	if x != nil && x.ENV != nil {
		return *x.ENV
	}
	return ""
}

func (x *CoinReq) GetReservedAmount() string {
	if x != nil && x.ReservedAmount != nil {
		return *x.ReservedAmount
	}
	return ""
}

func (x *CoinReq) GetForPay() bool {
	if x != nil && x.ForPay != nil {
		return *x.ForPay
	}
	return false
}

func (x *CoinReq) GetHomePage() string {
	if x != nil && x.HomePage != nil {
		return *x.HomePage
	}
	return ""
}

func (x *CoinReq) GetSpecs() string {
	if x != nil && x.Specs != nil {
		return *x.Specs
	}
	return ""
}

func (x *CoinReq) GetFeeCoinTypeID() string {
	if x != nil && x.FeeCoinTypeID != nil {
		return *x.FeeCoinTypeID
	}
	return ""
}

func (x *CoinReq) GetWithdrawFeeByStableUSD() bool {
	if x != nil && x.WithdrawFeeByStableUSD != nil {
		return *x.WithdrawFeeByStableUSD
	}
	return false
}

func (x *CoinReq) GetWithdrawFeeAmount() string {
	if x != nil && x.WithdrawFeeAmount != nil {
		return *x.WithdrawFeeAmount
	}
	return ""
}

func (x *CoinReq) GetCollectFeeAmount() string {
	if x != nil && x.CollectFeeAmount != nil {
		return *x.CollectFeeAmount
	}
	return ""
}

func (x *CoinReq) GetHotWalletFeeAmount() string {
	if x != nil && x.HotWalletFeeAmount != nil {
		return *x.HotWalletFeeAmount
	}
	return ""
}

func (x *CoinReq) GetLowFeeAmount() string {
	if x != nil && x.LowFeeAmount != nil {
		return *x.LowFeeAmount
	}
	return ""
}

func (x *CoinReq) GetHotLowFeeAmount() string {
	if x != nil && x.HotLowFeeAmount != nil {
		return *x.HotLowFeeAmount
	}
	return ""
}

func (x *CoinReq) GetHotWalletAccountAmount() string {
	if x != nil && x.HotWalletAccountAmount != nil {
		return *x.HotWalletAccountAmount
	}
	return ""
}

func (x *CoinReq) GetPaymentAccountCollectAmount() string {
	if x != nil && x.PaymentAccountCollectAmount != nil {
		return *x.PaymentAccountCollectAmount
	}
	return ""
}

func (x *CoinReq) GetDisabled() bool {
	if x != nil && x.Disabled != nil {
		return *x.Disabled
	}
	return false
}

func (x *CoinReq) GetStableUSD() bool {
	if x != nil && x.StableUSD != nil {
		return *x.StableUSD
	}
	return false
}

func (x *CoinReq) GetLeastTransferAmount() string {
	if x != nil && x.LeastTransferAmount != nil {
		return *x.LeastTransferAmount
	}
	return ""
}

func (x *CoinReq) GetNeedMemo() bool {
	if x != nil && x.NeedMemo != nil {
		return *x.NeedMemo
	}
	return false
}

func (x *CoinReq) GetRefreshCurrency() bool {
	if x != nil && x.RefreshCurrency != nil {
		return *x.RefreshCurrency
	}
	return false
}

func (x *CoinReq) GetChainType() string {
	if x != nil && x.ChainType != nil {
		return *x.ChainType
	}
	return ""
}

func (x *CoinReq) GetChainNativeUnit() string {
	if x != nil && x.ChainNativeUnit != nil {
		return *x.ChainNativeUnit
	}
	return ""
}

func (x *CoinReq) GetChainAtomicUnit() string {
	if x != nil && x.ChainAtomicUnit != nil {
		return *x.ChainAtomicUnit
	}
	return ""
}

func (x *CoinReq) GetChainUnitExp() uint32 {
	if x != nil && x.ChainUnitExp != nil {
		return *x.ChainUnitExp
	}
	return 0
}

func (x *CoinReq) GetGasType() v1.GasType {
	if x != nil && x.GasType != nil {
		return *x.GasType
	}
	return v1.GasType(0)
}

func (x *CoinReq) GetChainID() string {
	if x != nil && x.ChainID != nil {
		return *x.ChainID
	}
	return ""
}

func (x *CoinReq) GetChainNickname() string {
	if x != nil && x.ChainNickname != nil {
		return *x.ChainNickname
	}
	return ""
}

func (x *CoinReq) GetChainNativeCoinName() string {
	if x != nil && x.ChainNativeCoinName != nil {
		return *x.ChainNativeCoinName
	}
	return ""
}

func (x *CoinReq) GetCheckNewAddressBalance() bool {
	if x != nil && x.CheckNewAddressBalance != nil {
		return *x.CheckNewAddressBalance
	}
	return false
}

type Coin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: sql:"id"
	ID uint32 `protobuf:"varint,9,opt,name=ID,proto3" json:"ID,omitempty" sql:"id"`
	// @inject_tag: sql:"ent_id"
	EntID string `protobuf:"bytes,10,opt,name=EntID,proto3" json:"EntID,omitempty" sql:"ent_id"`
	// @inject_tag: sql:"name"
	Name string `protobuf:"bytes,20,opt,name=Name,proto3" json:"Name,omitempty" sql:"name"`
	// @inject_tag: sql:"logo"
	Logo string `protobuf:"bytes,30,opt,name=Logo,proto3" json:"Logo,omitempty" sql:"logo"`
	// @inject_tag: sql:"presale"
	Presale bool `protobuf:"varint,40,opt,name=Presale,proto3" json:"Presale,omitempty" sql:"presale"`
	// @inject_tag: sql:"reserved_amount"
	ReservedAmount string `protobuf:"bytes,50,opt,name=ReservedAmount,proto3" json:"ReservedAmount,omitempty" sql:"reserved_amount"`
	// @inject_tag: sql:"unit"
	Unit string `protobuf:"bytes,60,opt,name=Unit,proto3" json:"Unit,omitempty" sql:"unit"`
	// @inject_tag: sql:"env"
	ENV string `protobuf:"bytes,70,opt,name=ENV,proto3" json:"ENV,omitempty" sql:"env"`
	// @inject_tag: sql:"for_pay"
	ForPay bool `protobuf:"varint,80,opt,name=ForPay,proto3" json:"ForPay,omitempty" sql:"for_pay"`
	// @inject_tag: sql:"home_page"
	HomePage string `protobuf:"bytes,90,opt,name=HomePage,proto3" json:"HomePage,omitempty" sql:"home_page"`
	// @inject_tag: sql:"specs"
	Specs string `protobuf:"bytes,100,opt,name=Specs,proto3" json:"Specs,omitempty" sql:"specs"`
	// @inject_tag: sql:"stable_usd"
	StableUSD bool `protobuf:"varint,101,opt,name=StableUSD,proto3" json:"StableUSD,omitempty" sql:"stable_usd"`
	// @inject_tag: sql:"fee_coin_type_id"
	FeeCoinTypeID string `protobuf:"bytes,110,opt,name=FeeCoinTypeID,proto3" json:"FeeCoinTypeID,omitempty" sql:"fee_coin_type_id"`
	// @inject_tag: sql:"fee_coin_name"
	FeeCoinName string `protobuf:"bytes,120,opt,name=FeeCoinName,proto3" json:"FeeCoinName,omitempty" sql:"fee_coin_name"`
	// @inject_tag: sql:"fee_coin_logo"
	FeeCoinLogo string `protobuf:"bytes,130,opt,name=FeeCoinLogo,proto3" json:"FeeCoinLogo,omitempty" sql:"fee_coin_logo"`
	// @inject_tag: sql:"fee_coin_unit"
	FeeCoinUnit string `protobuf:"bytes,140,opt,name=FeeCoinUnit,proto3" json:"FeeCoinUnit,omitempty" sql:"fee_coin_unit"`
	// @inject_tag: sql:"fee_coin_env"
	FeeCoinENV string `protobuf:"bytes,150,opt,name=FeeCoinENV,proto3" json:"FeeCoinENV,omitempty" sql:"fee_coin_env"`
	// @inject_tag: sql:"withdraw_fee_by_stable_usd"
	WithdrawFeeByStableUSD bool `protobuf:"varint,160,opt,name=WithdrawFeeByStableUSD,proto3" json:"WithdrawFeeByStableUSD,omitempty" sql:"withdraw_fee_by_stable_usd"`
	// @inject_tag: sql:"withdraw_fee_amount"
	WithdrawFeeAmount string `protobuf:"bytes,170,opt,name=WithdrawFeeAmount,proto3" json:"WithdrawFeeAmount,omitempty" sql:"withdraw_fee_amount"`
	// @inject_tag: sql:"collect_fee_amount"
	CollectFeeAmount string `protobuf:"bytes,180,opt,name=CollectFeeAmount,proto3" json:"CollectFeeAmount,omitempty" sql:"collect_fee_amount"`
	// @inject_tag: sql:"hot_wallet_fee_amount"
	HotWalletFeeAmount string `protobuf:"bytes,190,opt,name=HotWalletFeeAmount,proto3" json:"HotWalletFeeAmount,omitempty" sql:"hot_wallet_fee_amount"`
	// @inject_tag: sql:"low_fee_amount"
	LowFeeAmount string `protobuf:"bytes,200,opt,name=LowFeeAmount,proto3" json:"LowFeeAmount,omitempty" sql:"low_fee_amount"`
	// @inject_tag: sql:"hot_low_fee_amount"
	HotLowFeeAmount string `protobuf:"bytes,201,opt,name=HotLowFeeAmount,proto3" json:"HotLowFeeAmount,omitempty" sql:"hot_low_fee_amount"`
	// @inject_tag: sql:"hot_wallet_account_amount"
	HotWalletAccountAmount string `protobuf:"bytes,210,opt,name=HotWalletAccountAmount,proto3" json:"HotWalletAccountAmount,omitempty" sql:"hot_wallet_account_amount"`
	// @inject_tag: sql:"payment_account_collect_amount"
	PaymentAccountCollectAmount string `protobuf:"bytes,220,opt,name=PaymentAccountCollectAmount,proto3" json:"PaymentAccountCollectAmount,omitempty" sql:"payment_account_collect_amount"`
	// @inject_tag: sql:"least_transfer_amount"
	LeastTransferAmount string `protobuf:"bytes,221,opt,name=LeastTransferAmount,proto3" json:"LeastTransferAmount,omitempty" sql:"least_transfer_amount"`
	// @inject_tag: sql:"disabled"
	Disabled bool `protobuf:"varint,230,opt,name=Disabled,proto3" json:"Disabled,omitempty" sql:"disabled"`
	// @inject_tag: sql:"created_at"
	CreatedAt uint32 `protobuf:"varint,240,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
	// @inject_tag: sql:"updated_at"
	UpdatedAt uint32 `protobuf:"varint,250,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty" sql:"updated_at"`
	// @inject_tag: sql:"need_memo"
	NeedMemo bool `protobuf:"varint,260,opt,name=NeedMemo,proto3" json:"NeedMemo,omitempty" sql:"need_memo"`
	// @inject_tag: sql:"refresh_currency"
	RefreshCurrency bool `protobuf:"varint,270,opt,name=RefreshCurrency,proto3" json:"RefreshCurrency,omitempty" sql:"refresh_currency"`
	// @inject_tag: sql:"check_new_address_balance"
	CheckNewAddressBalance bool `protobuf:"varint,280,opt,name=CheckNewAddressBalance,proto3" json:"CheckNewAddressBalance,omitempty" sql:"check_new_address_balance"`
	// @inject_tag: sql:"chain_name"
	ChainType string `protobuf:"bytes,290,opt,name=ChainType,proto3" json:"ChainType,omitempty" sql:"chain_name"`
	// @inject_tag: sql:"native_unit"
	ChainNativeUnit string `protobuf:"bytes,300,opt,name=ChainNativeUnit,proto3" json:"ChainNativeUnit,omitempty" sql:"native_unit"`
	// @inject_tag: sql:"atomic_unit"
	ChainAtomicUnit string `protobuf:"bytes,310,opt,name=ChainAtomicUnit,proto3" json:"ChainAtomicUnit,omitempty" sql:"atomic_unit"`
	// @inject_tag: sql:"unit_dec_exp"
	ChainUnitExp uint32 `protobuf:"varint,320,opt,name=ChainUnitExp,proto3" json:"ChainUnitExp,omitempty" sql:"unit_dec_exp"`
	// @inject_tag: sql:"chain_id"
	ChainID string `protobuf:"bytes,330,opt,name=ChainID,proto3" json:"ChainID,omitempty" sql:"chain_id"`
	// @inject_tag: sql:"nickname"
	ChainNickname string `protobuf:"bytes,340,opt,name=ChainNickname,proto3" json:"ChainNickname,omitempty" sql:"nickname"`
	// @inject_tag: sql:"gas_type"
	GasTypeStr string     `protobuf:"bytes,350,opt,name=GasTypeStr,proto3" json:"GasTypeStr,omitempty" sql:"gas_type"`
	GasType    v1.GasType `protobuf:"varint,360,opt,name=GasType,proto3,enum=basetypes.v1.GasType" json:"GasType,omitempty"`
}

func (x *Coin) Reset() {
	*x = Coin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coin) ProtoMessage() {}

func (x *Coin) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coin.ProtoReflect.Descriptor instead.
func (*Coin) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_coin_proto_rawDescGZIP(), []int{1}
}

func (x *Coin) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Coin) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *Coin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Coin) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *Coin) GetPresale() bool {
	if x != nil {
		return x.Presale
	}
	return false
}

func (x *Coin) GetReservedAmount() string {
	if x != nil {
		return x.ReservedAmount
	}
	return ""
}

func (x *Coin) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *Coin) GetENV() string {
	if x != nil {
		return x.ENV
	}
	return ""
}

func (x *Coin) GetForPay() bool {
	if x != nil {
		return x.ForPay
	}
	return false
}

func (x *Coin) GetHomePage() string {
	if x != nil {
		return x.HomePage
	}
	return ""
}

func (x *Coin) GetSpecs() string {
	if x != nil {
		return x.Specs
	}
	return ""
}

func (x *Coin) GetStableUSD() bool {
	if x != nil {
		return x.StableUSD
	}
	return false
}

func (x *Coin) GetFeeCoinTypeID() string {
	if x != nil {
		return x.FeeCoinTypeID
	}
	return ""
}

func (x *Coin) GetFeeCoinName() string {
	if x != nil {
		return x.FeeCoinName
	}
	return ""
}

func (x *Coin) GetFeeCoinLogo() string {
	if x != nil {
		return x.FeeCoinLogo
	}
	return ""
}

func (x *Coin) GetFeeCoinUnit() string {
	if x != nil {
		return x.FeeCoinUnit
	}
	return ""
}

func (x *Coin) GetFeeCoinENV() string {
	if x != nil {
		return x.FeeCoinENV
	}
	return ""
}

func (x *Coin) GetWithdrawFeeByStableUSD() bool {
	if x != nil {
		return x.WithdrawFeeByStableUSD
	}
	return false
}

func (x *Coin) GetWithdrawFeeAmount() string {
	if x != nil {
		return x.WithdrawFeeAmount
	}
	return ""
}

func (x *Coin) GetCollectFeeAmount() string {
	if x != nil {
		return x.CollectFeeAmount
	}
	return ""
}

func (x *Coin) GetHotWalletFeeAmount() string {
	if x != nil {
		return x.HotWalletFeeAmount
	}
	return ""
}

func (x *Coin) GetLowFeeAmount() string {
	if x != nil {
		return x.LowFeeAmount
	}
	return ""
}

func (x *Coin) GetHotLowFeeAmount() string {
	if x != nil {
		return x.HotLowFeeAmount
	}
	return ""
}

func (x *Coin) GetHotWalletAccountAmount() string {
	if x != nil {
		return x.HotWalletAccountAmount
	}
	return ""
}

func (x *Coin) GetPaymentAccountCollectAmount() string {
	if x != nil {
		return x.PaymentAccountCollectAmount
	}
	return ""
}

func (x *Coin) GetLeastTransferAmount() string {
	if x != nil {
		return x.LeastTransferAmount
	}
	return ""
}

func (x *Coin) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *Coin) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Coin) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Coin) GetNeedMemo() bool {
	if x != nil {
		return x.NeedMemo
	}
	return false
}

func (x *Coin) GetRefreshCurrency() bool {
	if x != nil {
		return x.RefreshCurrency
	}
	return false
}

func (x *Coin) GetCheckNewAddressBalance() bool {
	if x != nil {
		return x.CheckNewAddressBalance
	}
	return false
}

func (x *Coin) GetChainType() string {
	if x != nil {
		return x.ChainType
	}
	return ""
}

func (x *Coin) GetChainNativeUnit() string {
	if x != nil {
		return x.ChainNativeUnit
	}
	return ""
}

func (x *Coin) GetChainAtomicUnit() string {
	if x != nil {
		return x.ChainAtomicUnit
	}
	return ""
}

func (x *Coin) GetChainUnitExp() uint32 {
	if x != nil {
		return x.ChainUnitExp
	}
	return 0
}

func (x *Coin) GetChainID() string {
	if x != nil {
		return x.ChainID
	}
	return ""
}

func (x *Coin) GetChainNickname() string {
	if x != nil {
		return x.ChainNickname
	}
	return ""
}

func (x *Coin) GetGasTypeStr() string {
	if x != nil {
		return x.GasTypeStr
	}
	return ""
}

func (x *Coin) GetGasType() v1.GasType {
	if x != nil {
		return x.GasType
	}
	return v1.GasType(0)
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntID    *v1.StringVal      `protobuf:"bytes,10,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	Presale  *v1.BoolVal        `protobuf:"bytes,20,opt,name=Presale,proto3,oneof" json:"Presale,omitempty"`
	ENV      *v1.StringVal      `protobuf:"bytes,30,opt,name=ENV,proto3,oneof" json:"ENV,omitempty"`
	ForPay   *v1.BoolVal        `protobuf:"bytes,40,opt,name=ForPay,proto3,oneof" json:"ForPay,omitempty"`
	EntIDs   *v1.StringSliceVal `protobuf:"bytes,50,opt,name=EntIDs,proto3,oneof" json:"EntIDs,omitempty"`
	Disabled *v1.BoolVal        `protobuf:"bytes,60,opt,name=Disabled,proto3,oneof" json:"Disabled,omitempty"`
	Name     *v1.StringVal      `protobuf:"bytes,70,opt,name=Name,proto3,oneof" json:"Name,omitempty"`
	Names    *v1.StringSliceVal `protobuf:"bytes,80,opt,name=Names,proto3,oneof" json:"Names,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_coin_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetEntID() *v1.StringVal {
	if x != nil {
		return x.EntID
	}
	return nil
}

func (x *Conds) GetPresale() *v1.BoolVal {
	if x != nil {
		return x.Presale
	}
	return nil
}

func (x *Conds) GetENV() *v1.StringVal {
	if x != nil {
		return x.ENV
	}
	return nil
}

func (x *Conds) GetForPay() *v1.BoolVal {
	if x != nil {
		return x.ForPay
	}
	return nil
}

func (x *Conds) GetEntIDs() *v1.StringSliceVal {
	if x != nil {
		return x.EntIDs
	}
	return nil
}

func (x *Conds) GetDisabled() *v1.BoolVal {
	if x != nil {
		return x.Disabled
	}
	return nil
}

func (x *Conds) GetName() *v1.StringVal {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Conds) GetNames() *v1.StringSliceVal {
	if x != nil {
		return x.Names
	}
	return nil
}

type CreateCoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CoinReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateCoinRequest) Reset() {
	*x = CreateCoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCoinRequest) ProtoMessage() {}

func (x *CreateCoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCoinRequest.ProtoReflect.Descriptor instead.
func (*CreateCoinRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_coin_proto_rawDescGZIP(), []int{3}
}

func (x *CreateCoinRequest) GetInfo() *CoinReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateCoinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Coin `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateCoinResponse) Reset() {
	*x = CreateCoinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCoinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCoinResponse) ProtoMessage() {}

func (x *CreateCoinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCoinResponse.ProtoReflect.Descriptor instead.
func (*CreateCoinResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_coin_proto_rawDescGZIP(), []int{4}
}

func (x *CreateCoinResponse) GetInfo() *Coin {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetCoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntID string `protobuf:"bytes,10,opt,name=EntID,proto3" json:"EntID,omitempty"`
}

func (x *GetCoinRequest) Reset() {
	*x = GetCoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinRequest) ProtoMessage() {}

func (x *GetCoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinRequest.ProtoReflect.Descriptor instead.
func (*GetCoinRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_coin_proto_rawDescGZIP(), []int{5}
}

func (x *GetCoinRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

type GetCoinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Coin `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetCoinResponse) Reset() {
	*x = GetCoinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinResponse) ProtoMessage() {}

func (x *GetCoinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinResponse.ProtoReflect.Descriptor instead.
func (*GetCoinResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_coin_proto_rawDescGZIP(), []int{6}
}

func (x *GetCoinResponse) GetInfo() *Coin {
	if x != nil {
		return x.Info
	}
	return nil
}

type ExistCoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntID string `protobuf:"bytes,10,opt,name=EntID,proto3" json:"EntID,omitempty"`
}

func (x *ExistCoinRequest) Reset() {
	*x = ExistCoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistCoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistCoinRequest) ProtoMessage() {}

func (x *ExistCoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistCoinRequest.ProtoReflect.Descriptor instead.
func (*ExistCoinRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_coin_proto_rawDescGZIP(), []int{7}
}

func (x *ExistCoinRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

type ExistCoinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistCoinResponse) Reset() {
	*x = ExistCoinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistCoinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistCoinResponse) ProtoMessage() {}

func (x *ExistCoinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistCoinResponse.ProtoReflect.Descriptor instead.
func (*ExistCoinResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_coin_proto_rawDescGZIP(), []int{8}
}

func (x *ExistCoinResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type GetCoinsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetCoinsRequest) Reset() {
	*x = GetCoinsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinsRequest) ProtoMessage() {}

func (x *GetCoinsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinsRequest.ProtoReflect.Descriptor instead.
func (*GetCoinsRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_coin_proto_rawDescGZIP(), []int{9}
}

func (x *GetCoinsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetCoinsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetCoinsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetCoinsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Coin `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32  `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetCoinsResponse) Reset() {
	*x = GetCoinsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinsResponse) ProtoMessage() {}

func (x *GetCoinsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinsResponse.ProtoReflect.Descriptor instead.
func (*GetCoinsResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_coin_proto_rawDescGZIP(), []int{10}
}

func (x *GetCoinsResponse) GetInfos() []*Coin {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetCoinsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ExistCoinCondsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *ExistCoinCondsRequest) Reset() {
	*x = ExistCoinCondsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistCoinCondsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistCoinCondsRequest) ProtoMessage() {}

func (x *ExistCoinCondsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistCoinCondsRequest.ProtoReflect.Descriptor instead.
func (*ExistCoinCondsRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_coin_proto_rawDescGZIP(), []int{11}
}

func (x *ExistCoinCondsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type ExistCoinCondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistCoinCondsResponse) Reset() {
	*x = ExistCoinCondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistCoinCondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistCoinCondsResponse) ProtoMessage() {}

func (x *ExistCoinCondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistCoinCondsResponse.ProtoReflect.Descriptor instead.
func (*ExistCoinCondsResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_coin_proto_rawDescGZIP(), []int{12}
}

func (x *ExistCoinCondsResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type UpdateCoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CoinReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateCoinRequest) Reset() {
	*x = UpdateCoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCoinRequest) ProtoMessage() {}

func (x *UpdateCoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCoinRequest.ProtoReflect.Descriptor instead.
func (*UpdateCoinRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_coin_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateCoinRequest) GetInfo() *CoinReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateCoinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Coin `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateCoinResponse) Reset() {
	*x = UpdateCoinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCoinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCoinResponse) ProtoMessage() {}

func (x *UpdateCoinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCoinResponse.ProtoReflect.Descriptor instead.
func (*UpdateCoinResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_coin_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateCoinResponse) GetInfo() *Coin {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_chain_mw_v1_coin_coin_proto protoreflect.FileDescriptor

var file_npool_chain_mw_v1_coin_coin_proto_rawDesc = []byte{
	0x0a, 0x21, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x77,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x18, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x20, 0x6e,
	0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x67, 0x61, 0x73, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xd7, 0x0f, 0x0a, 0x07, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x04, 0x4c, 0x6f, 0x67, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x07, 0x50, 0x72, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04,
	0x52, 0x07, 0x50, 0x72, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x55, 0x6e, 0x69, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x04, 0x55, 0x6e,
	0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x45, 0x4e, 0x56, 0x18, 0x3c, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x06, 0x52, 0x03, 0x45, 0x4e, 0x56, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x46,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x46, 0x6f, 0x72,
	0x50, 0x61, 0x79, 0x18, 0x50, 0x20, 0x01, 0x28, 0x08, 0x48, 0x08, 0x52, 0x06, 0x46, 0x6f, 0x72,
	0x50, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61,
	0x67, 0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x6d, 0x65,
	0x50, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x53, 0x70, 0x65, 0x63, 0x73,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x05, 0x53, 0x70, 0x65, 0x63, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x46, 0x65, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x44, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x0d, 0x46, 0x65, 0x65,
	0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a,
	0x16, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x65, 0x65, 0x42, 0x79, 0x53, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x55, 0x53, 0x44, 0x18, 0x78, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0c, 0x52,
	0x16, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x65, 0x65, 0x42, 0x79, 0x53, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x55, 0x53, 0x44, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x11, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x82, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x11, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x30,
	0x0a, 0x10, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x10, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x34, 0x0a, 0x12, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x46, 0x65, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52,
	0x12, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0c, 0x4c, 0x6f, 0x77, 0x46, 0x65, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52,
	0x0c, 0x4c, 0x6f, 0x77, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x2e, 0x0a, 0x0f, 0x48, 0x6f, 0x74, 0x4c, 0x6f, 0x77, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0xa1, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x0f, 0x48, 0x6f,
	0x74, 0x4c, 0x6f, 0x77, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x3c, 0x0a, 0x16, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x12, 0x52, 0x16, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x46,
	0x0a, 0x1b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xb4, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x1b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x14, 0x52, 0x08, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x55, 0x53, 0x44, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x15, 0x52, 0x09,
	0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x53, 0x44, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x13,
	0x4c, 0x65, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x13, 0x4c, 0x65,
	0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x08, 0x4e, 0x65, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f,
	0x18, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x17, 0x52, 0x08, 0x4e, 0x65, 0x65, 0x64, 0x4d,
	0x65, 0x6d, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0xe6, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x18, 0x52, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x18, 0xf0, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x19, 0x52, 0x09, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0f, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x18, 0xfa, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x1a, 0x52, 0x0f, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0f, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x84, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x1b, 0x52, 0x0f, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x74, 0x6f,
	0x6d, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0c, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x45, 0x78, 0x70, 0x18, 0x8e, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x1c, 0x52, 0x0c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x45, 0x78,
	0x70, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x07, 0x47, 0x61, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x98, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x73, 0x54, 0x79, 0x70, 0x65, 0x48, 0x1d, 0x52,
	0x07, 0x47, 0x61, 0x73, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x07, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x18, 0xa2, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1e, 0x52,
	0x07, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0d, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xac, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x1f, 0x52, 0x0d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x69, 0x63, 0x6b,
	0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0xb6,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x20, 0x52, 0x13, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x3c, 0x0a, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x65, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0xc0, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x21, 0x52, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x65, 0x77, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x4c, 0x6f, 0x67, 0x6f,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x50, 0x72, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x45, 0x4e, 0x56, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x53, 0x70, 0x65,
	0x63, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x65, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x44, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x46, 0x65, 0x65, 0x42, 0x79, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x53, 0x44, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x65, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x48,
	0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x4c, 0x6f, 0x77, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x48, 0x6f, 0x74, 0x4c, 0x6f, 0x77, 0x46, 0x65, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x48, 0x6f, 0x74, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x53, 0x44, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x4c, 0x65, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x4e, 0x65, 0x65, 0x64, 0x4d, 0x65, 0x6d,
	0x6f, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x45, 0x78, 0x70, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x47, 0x61, 0x73, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x49, 0x44, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x19,
	0x0a, 0x17, 0x5f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4e, 0x65, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xa3, 0x0b, 0x0a, 0x04, 0x43, 0x6f,
	0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4c, 0x6f, 0x67, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x50, 0x72, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x4e, 0x56, 0x18, 0x46, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x45, 0x4e, 0x56, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x50,
	0x61, 0x79, 0x18, 0x50, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x79,
	0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x18, 0x5a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x53, 0x70, 0x65, 0x63, 0x73, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x70, 0x65,
	0x63, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x53, 0x44, 0x18,
	0x65, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x53, 0x44,
	0x12, 0x24, 0x0a, 0x0d, 0x46, 0x65, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x44, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x46, 0x65, 0x65, 0x43, 0x6f, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x65, 0x65, 0x43, 0x6f, 0x69,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x65, 0x65,
	0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x46, 0x65, 0x65, 0x43,
	0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x46, 0x65, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x21, 0x0a, 0x0b, 0x46,
	0x65, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x46, 0x65, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1f,
	0x0a, 0x0a, 0x46, 0x65, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x45, 0x4e, 0x56, 0x18, 0x96, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x65, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x45, 0x4e, 0x56, 0x12,
	0x37, 0x0a, 0x16, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x65, 0x65, 0x42, 0x79,
	0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x53, 0x44, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x16, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x65, 0x65, 0x42, 0x79, 0x53,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x53, 0x44, 0x12, 0x2d, 0x0a, 0x11, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xaa, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x65,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x10, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xb4, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x46, 0x65, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x12, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x46, 0x65, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x4c, 0x6f, 0x77, 0x46, 0x65, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4c, 0x6f,
	0x77, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x0f, 0x48, 0x6f,
	0x74, 0x4c, 0x6f, 0x77, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xc9, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x48, 0x6f, 0x74, 0x4c, 0x6f, 0x77, 0x46, 0x65, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x16, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0xd2, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41,
	0x0a, 0x1b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xdc, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x31, 0x0a, 0x13, 0x4c, 0x65, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xdd, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x4c, 0x65, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0xe6, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xf0,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xfa, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1b, 0x0a, 0x08, 0x4e, 0x65, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x18, 0x84, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x4e, 0x65, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x12, 0x29, 0x0a, 0x0f,
	0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x8e, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x37, 0x0a, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x4e, 0x65, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x98, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4e,
	0x65, 0x77, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x1d, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0xa2, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x29, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x18, 0xac, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x29, 0x0a, 0x0f, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x41, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x55, 0x6e, 0x69, 0x74, 0x18, 0xb6, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x41, 0x74, 0x6f, 0x6d, 0x69,
	0x63, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x55, 0x6e,
	0x69, 0x74, 0x45, 0x78, 0x70, 0x18, 0xc0, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x45, 0x78, 0x70, 0x12, 0x19, 0x0a, 0x07, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x49, 0x44, 0x18, 0xca, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xd4, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0a,
	0x47, 0x61, 0x73, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x18, 0xde, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x47, 0x61, 0x73, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x12, 0x30, 0x0a,
	0x07, 0x47, 0x61, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0xe8, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x61, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x47, 0x61, 0x73, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x87, 0x04, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x45, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x48, 0x00, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a,
	0x07, 0x50, 0x72, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x07, 0x50, 0x72, 0x65, 0x73, 0x61, 0x6c, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x03, 0x45, 0x4e, 0x56, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x02, 0x52, 0x03, 0x45, 0x4e, 0x56,
	0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x79, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x06, 0x46, 0x6f,
	0x72, 0x50, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x06, 0x45, 0x6e, 0x74, 0x49, 0x44,
	0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69,
	0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x04, 0x52, 0x06, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x36, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x3c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x48, 0x05, 0x52, 0x08, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x48, 0x06, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x05,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x07, 0x52, 0x05, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x50, 0x72, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x45, 0x4e, 0x56, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x79, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x4a, 0x0a, 0x11, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x48, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x26, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x45, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x28,
	0x0a, 0x10, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x27, 0x0a, 0x11, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x76, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x5e, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a,
	0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x05, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x4e, 0x0a, 0x15, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x2c, 0x0a, 0x16, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4a, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x48, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x88, 0x05,
	0x0a, 0x0a, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x12, 0x69, 0x0a, 0x0a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x2b, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x69, 0x6e, 0x12, 0x28, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x09, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x2a, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x63, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x29, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x0e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2f, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a,
	0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x2b, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x39, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f,
	0x6f, 0x6c, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x69, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_chain_mw_v1_coin_coin_proto_rawDescOnce sync.Once
	file_npool_chain_mw_v1_coin_coin_proto_rawDescData = file_npool_chain_mw_v1_coin_coin_proto_rawDesc
)

func file_npool_chain_mw_v1_coin_coin_proto_rawDescGZIP() []byte {
	file_npool_chain_mw_v1_coin_coin_proto_rawDescOnce.Do(func() {
		file_npool_chain_mw_v1_coin_coin_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_chain_mw_v1_coin_coin_proto_rawDescData)
	})
	return file_npool_chain_mw_v1_coin_coin_proto_rawDescData
}

var file_npool_chain_mw_v1_coin_coin_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_npool_chain_mw_v1_coin_coin_proto_goTypes = []interface{}{
	(*CoinReq)(nil),                // 0: chain.middleware.coin.v1.CoinReq
	(*Coin)(nil),                   // 1: chain.middleware.coin.v1.Coin
	(*Conds)(nil),                  // 2: chain.middleware.coin.v1.Conds
	(*CreateCoinRequest)(nil),      // 3: chain.middleware.coin.v1.CreateCoinRequest
	(*CreateCoinResponse)(nil),     // 4: chain.middleware.coin.v1.CreateCoinResponse
	(*GetCoinRequest)(nil),         // 5: chain.middleware.coin.v1.GetCoinRequest
	(*GetCoinResponse)(nil),        // 6: chain.middleware.coin.v1.GetCoinResponse
	(*ExistCoinRequest)(nil),       // 7: chain.middleware.coin.v1.ExistCoinRequest
	(*ExistCoinResponse)(nil),      // 8: chain.middleware.coin.v1.ExistCoinResponse
	(*GetCoinsRequest)(nil),        // 9: chain.middleware.coin.v1.GetCoinsRequest
	(*GetCoinsResponse)(nil),       // 10: chain.middleware.coin.v1.GetCoinsResponse
	(*ExistCoinCondsRequest)(nil),  // 11: chain.middleware.coin.v1.ExistCoinCondsRequest
	(*ExistCoinCondsResponse)(nil), // 12: chain.middleware.coin.v1.ExistCoinCondsResponse
	(*UpdateCoinRequest)(nil),      // 13: chain.middleware.coin.v1.UpdateCoinRequest
	(*UpdateCoinResponse)(nil),     // 14: chain.middleware.coin.v1.UpdateCoinResponse
	(v1.GasType)(0),                // 15: basetypes.v1.GasType
	(*v1.StringVal)(nil),           // 16: basetypes.v1.StringVal
	(*v1.BoolVal)(nil),             // 17: basetypes.v1.BoolVal
	(*v1.StringSliceVal)(nil),      // 18: basetypes.v1.StringSliceVal
}
var file_npool_chain_mw_v1_coin_coin_proto_depIdxs = []int32{
	15, // 0: chain.middleware.coin.v1.CoinReq.GasType:type_name -> basetypes.v1.GasType
	15, // 1: chain.middleware.coin.v1.Coin.GasType:type_name -> basetypes.v1.GasType
	16, // 2: chain.middleware.coin.v1.Conds.EntID:type_name -> basetypes.v1.StringVal
	17, // 3: chain.middleware.coin.v1.Conds.Presale:type_name -> basetypes.v1.BoolVal
	16, // 4: chain.middleware.coin.v1.Conds.ENV:type_name -> basetypes.v1.StringVal
	17, // 5: chain.middleware.coin.v1.Conds.ForPay:type_name -> basetypes.v1.BoolVal
	18, // 6: chain.middleware.coin.v1.Conds.EntIDs:type_name -> basetypes.v1.StringSliceVal
	17, // 7: chain.middleware.coin.v1.Conds.Disabled:type_name -> basetypes.v1.BoolVal
	16, // 8: chain.middleware.coin.v1.Conds.Name:type_name -> basetypes.v1.StringVal
	18, // 9: chain.middleware.coin.v1.Conds.Names:type_name -> basetypes.v1.StringSliceVal
	0,  // 10: chain.middleware.coin.v1.CreateCoinRequest.Info:type_name -> chain.middleware.coin.v1.CoinReq
	1,  // 11: chain.middleware.coin.v1.CreateCoinResponse.Info:type_name -> chain.middleware.coin.v1.Coin
	1,  // 12: chain.middleware.coin.v1.GetCoinResponse.Info:type_name -> chain.middleware.coin.v1.Coin
	2,  // 13: chain.middleware.coin.v1.GetCoinsRequest.Conds:type_name -> chain.middleware.coin.v1.Conds
	1,  // 14: chain.middleware.coin.v1.GetCoinsResponse.Infos:type_name -> chain.middleware.coin.v1.Coin
	2,  // 15: chain.middleware.coin.v1.ExistCoinCondsRequest.Conds:type_name -> chain.middleware.coin.v1.Conds
	0,  // 16: chain.middleware.coin.v1.UpdateCoinRequest.Info:type_name -> chain.middleware.coin.v1.CoinReq
	1,  // 17: chain.middleware.coin.v1.UpdateCoinResponse.Info:type_name -> chain.middleware.coin.v1.Coin
	3,  // 18: chain.middleware.coin.v1.Middleware.CreateCoin:input_type -> chain.middleware.coin.v1.CreateCoinRequest
	5,  // 19: chain.middleware.coin.v1.Middleware.GetCoin:input_type -> chain.middleware.coin.v1.GetCoinRequest
	7,  // 20: chain.middleware.coin.v1.Middleware.ExistCoin:input_type -> chain.middleware.coin.v1.ExistCoinRequest
	9,  // 21: chain.middleware.coin.v1.Middleware.GetCoins:input_type -> chain.middleware.coin.v1.GetCoinsRequest
	11, // 22: chain.middleware.coin.v1.Middleware.ExistCoinConds:input_type -> chain.middleware.coin.v1.ExistCoinCondsRequest
	13, // 23: chain.middleware.coin.v1.Middleware.UpdateCoin:input_type -> chain.middleware.coin.v1.UpdateCoinRequest
	4,  // 24: chain.middleware.coin.v1.Middleware.CreateCoin:output_type -> chain.middleware.coin.v1.CreateCoinResponse
	6,  // 25: chain.middleware.coin.v1.Middleware.GetCoin:output_type -> chain.middleware.coin.v1.GetCoinResponse
	8,  // 26: chain.middleware.coin.v1.Middleware.ExistCoin:output_type -> chain.middleware.coin.v1.ExistCoinResponse
	10, // 27: chain.middleware.coin.v1.Middleware.GetCoins:output_type -> chain.middleware.coin.v1.GetCoinsResponse
	12, // 28: chain.middleware.coin.v1.Middleware.ExistCoinConds:output_type -> chain.middleware.coin.v1.ExistCoinCondsResponse
	14, // 29: chain.middleware.coin.v1.Middleware.UpdateCoin:output_type -> chain.middleware.coin.v1.UpdateCoinResponse
	24, // [24:30] is the sub-list for method output_type
	18, // [18:24] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_npool_chain_mw_v1_coin_coin_proto_init() }
func file_npool_chain_mw_v1_coin_coin_proto_init() {
	if File_npool_chain_mw_v1_coin_coin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_chain_mw_v1_coin_coin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_coin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Coin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_coin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_coin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_coin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCoinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_coin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_coin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_coin_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistCoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_coin_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistCoinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_coin_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_coin_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_coin_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistCoinCondsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_coin_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistCoinCondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_coin_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_coin_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCoinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_chain_mw_v1_coin_coin_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_npool_chain_mw_v1_coin_coin_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_chain_mw_v1_coin_coin_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_chain_mw_v1_coin_coin_proto_goTypes,
		DependencyIndexes: file_npool_chain_mw_v1_coin_coin_proto_depIdxs,
		MessageInfos:      file_npool_chain_mw_v1_coin_coin_proto_msgTypes,
	}.Build()
	File_npool_chain_mw_v1_coin_coin_proto = out.File
	file_npool_chain_mw_v1_coin_coin_proto_rawDesc = nil
	file_npool_chain_mw_v1_coin_coin_proto_goTypes = nil
	file_npool_chain_mw_v1_coin_coin_proto_depIdxs = nil
}
