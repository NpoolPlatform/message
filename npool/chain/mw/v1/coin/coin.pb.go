// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: npool/chain/mw/v1/coin/coin.proto

package coin

import (
	npool "github.com/NpoolPlatform/message/npool"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CoinReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                          *string `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	Name                        *string `protobuf:"bytes,20,opt,name=Name,proto3,oneof" json:"Name,omitempty"`
	Logo                        *string `protobuf:"bytes,30,opt,name=Logo,proto3,oneof" json:"Logo,omitempty"`
	Presale                     *bool   `protobuf:"varint,40,opt,name=Presale,proto3,oneof" json:"Presale,omitempty"`
	Unit                        *string `protobuf:"bytes,50,opt,name=Unit,proto3,oneof" json:"Unit,omitempty"`
	ENV                         *string `protobuf:"bytes,60,opt,name=ENV,proto3,oneof" json:"ENV,omitempty"`
	ReservedAmount              *string `protobuf:"bytes,70,opt,name=ReservedAmount,proto3,oneof" json:"ReservedAmount,omitempty"`
	ForPay                      *bool   `protobuf:"varint,80,opt,name=ForPay,proto3,oneof" json:"ForPay,omitempty"`
	HomePage                    *string `protobuf:"bytes,90,opt,name=HomePage,proto3,oneof" json:"HomePage,omitempty"`
	Specs                       *string `protobuf:"bytes,100,opt,name=Specs,proto3,oneof" json:"Specs,omitempty"`
	FeeCoinTypeID               *string `protobuf:"bytes,110,opt,name=FeeCoinTypeID,proto3,oneof" json:"FeeCoinTypeID,omitempty"`
	WithdrawFeeByStableUSD      *bool   `protobuf:"varint,120,opt,name=WithdrawFeeByStableUSD,proto3,oneof" json:"WithdrawFeeByStableUSD,omitempty"`
	WithdrawFeeAmount           *string `protobuf:"bytes,130,opt,name=WithdrawFeeAmount,proto3,oneof" json:"WithdrawFeeAmount,omitempty"`
	CollectFeeAmount            *string `protobuf:"bytes,140,opt,name=CollectFeeAmount,proto3,oneof" json:"CollectFeeAmount,omitempty"`
	HotWalletFeeAmount          *string `protobuf:"bytes,150,opt,name=HotWalletFeeAmount,proto3,oneof" json:"HotWalletFeeAmount,omitempty"`
	LowFeeAmount                *string `protobuf:"bytes,160,opt,name=LowFeeAmount,proto3,oneof" json:"LowFeeAmount,omitempty"`
	HotWalletAccountAmount      *string `protobuf:"bytes,170,opt,name=HotWalletAccountAmount,proto3,oneof" json:"HotWalletAccountAmount,omitempty"`
	PaymentAccountCollectAmount *string `protobuf:"bytes,180,opt,name=PaymentAccountCollectAmount,proto3,oneof" json:"PaymentAccountCollectAmount,omitempty"`
	Disabled                    *bool   `protobuf:"varint,190,opt,name=Disabled,proto3,oneof" json:"Disabled,omitempty"`
	StableUSD                   *bool   `protobuf:"varint,200,opt,name=StableUSD,proto3,oneof" json:"StableUSD,omitempty"`
	LeastTransferAmount         *string `protobuf:"bytes,210,opt,name=LeastTransferAmount,proto3,oneof" json:"LeastTransferAmount,omitempty"`
}

func (x *CoinReq) Reset() {
	*x = CoinReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinReq) ProtoMessage() {}

func (x *CoinReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinReq.ProtoReflect.Descriptor instead.
func (*CoinReq) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_coin_proto_rawDescGZIP(), []int{0}
}

func (x *CoinReq) GetID() string {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return ""
}

func (x *CoinReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CoinReq) GetLogo() string {
	if x != nil && x.Logo != nil {
		return *x.Logo
	}
	return ""
}

func (x *CoinReq) GetPresale() bool {
	if x != nil && x.Presale != nil {
		return *x.Presale
	}
	return false
}

func (x *CoinReq) GetUnit() string {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return ""
}

func (x *CoinReq) GetENV() string {
	if x != nil && x.ENV != nil {
		return *x.ENV
	}
	return ""
}

func (x *CoinReq) GetReservedAmount() string {
	if x != nil && x.ReservedAmount != nil {
		return *x.ReservedAmount
	}
	return ""
}

func (x *CoinReq) GetForPay() bool {
	if x != nil && x.ForPay != nil {
		return *x.ForPay
	}
	return false
}

func (x *CoinReq) GetHomePage() string {
	if x != nil && x.HomePage != nil {
		return *x.HomePage
	}
	return ""
}

func (x *CoinReq) GetSpecs() string {
	if x != nil && x.Specs != nil {
		return *x.Specs
	}
	return ""
}

func (x *CoinReq) GetFeeCoinTypeID() string {
	if x != nil && x.FeeCoinTypeID != nil {
		return *x.FeeCoinTypeID
	}
	return ""
}

func (x *CoinReq) GetWithdrawFeeByStableUSD() bool {
	if x != nil && x.WithdrawFeeByStableUSD != nil {
		return *x.WithdrawFeeByStableUSD
	}
	return false
}

func (x *CoinReq) GetWithdrawFeeAmount() string {
	if x != nil && x.WithdrawFeeAmount != nil {
		return *x.WithdrawFeeAmount
	}
	return ""
}

func (x *CoinReq) GetCollectFeeAmount() string {
	if x != nil && x.CollectFeeAmount != nil {
		return *x.CollectFeeAmount
	}
	return ""
}

func (x *CoinReq) GetHotWalletFeeAmount() string {
	if x != nil && x.HotWalletFeeAmount != nil {
		return *x.HotWalletFeeAmount
	}
	return ""
}

func (x *CoinReq) GetLowFeeAmount() string {
	if x != nil && x.LowFeeAmount != nil {
		return *x.LowFeeAmount
	}
	return ""
}

func (x *CoinReq) GetHotWalletAccountAmount() string {
	if x != nil && x.HotWalletAccountAmount != nil {
		return *x.HotWalletAccountAmount
	}
	return ""
}

func (x *CoinReq) GetPaymentAccountCollectAmount() string {
	if x != nil && x.PaymentAccountCollectAmount != nil {
		return *x.PaymentAccountCollectAmount
	}
	return ""
}

func (x *CoinReq) GetDisabled() bool {
	if x != nil && x.Disabled != nil {
		return *x.Disabled
	}
	return false
}

func (x *CoinReq) GetStableUSD() bool {
	if x != nil && x.StableUSD != nil {
		return *x.StableUSD
	}
	return false
}

func (x *CoinReq) GetLeastTransferAmount() string {
	if x != nil && x.LeastTransferAmount != nil {
		return *x.LeastTransferAmount
	}
	return ""
}

type Coin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: sql:"id"
	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty" sql:"id"`
	// @inject_tag: sql:"name"
	Name string `protobuf:"bytes,20,opt,name=Name,proto3" json:"Name,omitempty" sql:"name"`
	// @inject_tag: sql:"logo"
	Logo string `protobuf:"bytes,30,opt,name=Logo,proto3" json:"Logo,omitempty" sql:"logo"`
	// @inject_tag: sql:"presale"
	Presale bool `protobuf:"varint,40,opt,name=Presale,proto3" json:"Presale,omitempty" sql:"presale"`
	// @inject_tag: sql:"reserved_amount"
	ReservedAmount string `protobuf:"bytes,50,opt,name=ReservedAmount,proto3" json:"ReservedAmount,omitempty" sql:"reserved_amount"`
	// @inject_tag: sql:"unit"
	Unit string `protobuf:"bytes,60,opt,name=Unit,proto3" json:"Unit,omitempty" sql:"unit"`
	// @inject_tag: sql:"env"
	ENV string `protobuf:"bytes,70,opt,name=ENV,proto3" json:"ENV,omitempty" sql:"env"`
	// @inject_tag: sql:"for_pay"
	ForPay bool `protobuf:"varint,80,opt,name=ForPay,proto3" json:"ForPay,omitempty" sql:"for_pay"`
	// @inject_tag: sql:"home_page"
	HomePage string `protobuf:"bytes,90,opt,name=HomePage,proto3" json:"HomePage,omitempty" sql:"home_page"`
	// @inject_tag: sql:"specs"
	Specs string `protobuf:"bytes,100,opt,name=Specs,proto3" json:"Specs,omitempty" sql:"specs"`
	// @inject_tag: sql:"stable_usd"
	StableUSD bool `protobuf:"varint,101,opt,name=StableUSD,proto3" json:"StableUSD,omitempty" sql:"stable_usd"`
	// @inject_tag: sql:"fee_coin_type_id"
	FeeCoinTypeID string `protobuf:"bytes,110,opt,name=FeeCoinTypeID,proto3" json:"FeeCoinTypeID,omitempty" sql:"fee_coin_type_id"`
	// @inject_tag: sql:"fee_coin_name"
	FeeCoinName string `protobuf:"bytes,120,opt,name=FeeCoinName,proto3" json:"FeeCoinName,omitempty" sql:"fee_coin_name"`
	// @inject_tag: sql:"fee_coin_logo"
	FeeCoinLogo string `protobuf:"bytes,130,opt,name=FeeCoinLogo,proto3" json:"FeeCoinLogo,omitempty" sql:"fee_coin_logo"`
	// @inject_tag: sql:"fee_coin_unit"
	FeeCoinUnit string `protobuf:"bytes,140,opt,name=FeeCoinUnit,proto3" json:"FeeCoinUnit,omitempty" sql:"fee_coin_unit"`
	// @inject_tag: sql:"fee_coin_env"
	FeeCoinENV string `protobuf:"bytes,150,opt,name=FeeCoinENV,proto3" json:"FeeCoinENV,omitempty" sql:"fee_coin_env"`
	// @inject_tag: sql:"withdraw_fee_by_stable_usd"
	WithdrawFeeByStableUSD bool `protobuf:"varint,160,opt,name=WithdrawFeeByStableUSD,proto3" json:"WithdrawFeeByStableUSD,omitempty" sql:"withdraw_fee_by_stable_usd"`
	// @inject_tag: sql:"withdraw_fee_amount"
	WithdrawFeeAmount string `protobuf:"bytes,170,opt,name=WithdrawFeeAmount,proto3" json:"WithdrawFeeAmount,omitempty" sql:"withdraw_fee_amount"`
	// @inject_tag: sql:"collect_fee_amount"
	CollectFeeAmount string `protobuf:"bytes,180,opt,name=CollectFeeAmount,proto3" json:"CollectFeeAmount,omitempty" sql:"collect_fee_amount"`
	// @inject_tag: sql:"hot_wallet_fee_amount"
	HotWalletFeeAmount string `protobuf:"bytes,190,opt,name=HotWalletFeeAmount,proto3" json:"HotWalletFeeAmount,omitempty" sql:"hot_wallet_fee_amount"`
	// @inject_tag: sql:"low_fee_amount"
	LowFeeAmount string `protobuf:"bytes,200,opt,name=LowFeeAmount,proto3" json:"LowFeeAmount,omitempty" sql:"low_fee_amount"`
	// @inject_tag: sql:"hot_wallet_account_amount"
	HotWalletAccountAmount string `protobuf:"bytes,210,opt,name=HotWalletAccountAmount,proto3" json:"HotWalletAccountAmount,omitempty" sql:"hot_wallet_account_amount"`
	// @inject_tag: sql:"payment_account_collect_amount"
	PaymentAccountCollectAmount string `protobuf:"bytes,220,opt,name=PaymentAccountCollectAmount,proto3" json:"PaymentAccountCollectAmount,omitempty" sql:"payment_account_collect_amount"`
	// @inject_tag: sql:"least_transfer_amount"
	LeastTransferAmount string `protobuf:"bytes,221,opt,name=LeastTransferAmount,proto3" json:"LeastTransferAmount,omitempty" sql:"least_transfer_amount"`
	// @inject_tag: sql:"disabled"
	Disabled bool `protobuf:"varint,230,opt,name=Disabled,proto3" json:"Disabled,omitempty" sql:"disabled"`
	// @inject_tag: sql:"created_at"
	CreatedAt uint32 `protobuf:"varint,240,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
	// @inject_tag: sql:"updated_at"
	UpdatedAt uint32 `protobuf:"varint,250,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty" sql:"updated_at"`
}

func (x *Coin) Reset() {
	*x = Coin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coin) ProtoMessage() {}

func (x *Coin) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coin.ProtoReflect.Descriptor instead.
func (*Coin) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_coin_proto_rawDescGZIP(), []int{1}
}

func (x *Coin) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Coin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Coin) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *Coin) GetPresale() bool {
	if x != nil {
		return x.Presale
	}
	return false
}

func (x *Coin) GetReservedAmount() string {
	if x != nil {
		return x.ReservedAmount
	}
	return ""
}

func (x *Coin) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *Coin) GetENV() string {
	if x != nil {
		return x.ENV
	}
	return ""
}

func (x *Coin) GetForPay() bool {
	if x != nil {
		return x.ForPay
	}
	return false
}

func (x *Coin) GetHomePage() string {
	if x != nil {
		return x.HomePage
	}
	return ""
}

func (x *Coin) GetSpecs() string {
	if x != nil {
		return x.Specs
	}
	return ""
}

func (x *Coin) GetStableUSD() bool {
	if x != nil {
		return x.StableUSD
	}
	return false
}

func (x *Coin) GetFeeCoinTypeID() string {
	if x != nil {
		return x.FeeCoinTypeID
	}
	return ""
}

func (x *Coin) GetFeeCoinName() string {
	if x != nil {
		return x.FeeCoinName
	}
	return ""
}

func (x *Coin) GetFeeCoinLogo() string {
	if x != nil {
		return x.FeeCoinLogo
	}
	return ""
}

func (x *Coin) GetFeeCoinUnit() string {
	if x != nil {
		return x.FeeCoinUnit
	}
	return ""
}

func (x *Coin) GetFeeCoinENV() string {
	if x != nil {
		return x.FeeCoinENV
	}
	return ""
}

func (x *Coin) GetWithdrawFeeByStableUSD() bool {
	if x != nil {
		return x.WithdrawFeeByStableUSD
	}
	return false
}

func (x *Coin) GetWithdrawFeeAmount() string {
	if x != nil {
		return x.WithdrawFeeAmount
	}
	return ""
}

func (x *Coin) GetCollectFeeAmount() string {
	if x != nil {
		return x.CollectFeeAmount
	}
	return ""
}

func (x *Coin) GetHotWalletFeeAmount() string {
	if x != nil {
		return x.HotWalletFeeAmount
	}
	return ""
}

func (x *Coin) GetLowFeeAmount() string {
	if x != nil {
		return x.LowFeeAmount
	}
	return ""
}

func (x *Coin) GetHotWalletAccountAmount() string {
	if x != nil {
		return x.HotWalletAccountAmount
	}
	return ""
}

func (x *Coin) GetPaymentAccountCollectAmount() string {
	if x != nil {
		return x.PaymentAccountCollectAmount
	}
	return ""
}

func (x *Coin) GetLeastTransferAmount() string {
	if x != nil {
		return x.LeastTransferAmount
	}
	return ""
}

func (x *Coin) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *Coin) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Coin) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       *npool.StringVal      `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	Presale  *npool.BoolVal        `protobuf:"bytes,20,opt,name=Presale,proto3,oneof" json:"Presale,omitempty"`
	ENV      *npool.StringVal      `protobuf:"bytes,30,opt,name=ENV,proto3,oneof" json:"ENV,omitempty"`
	ForPay   *npool.BoolVal        `protobuf:"bytes,40,opt,name=ForPay,proto3,oneof" json:"ForPay,omitempty"`
	IDs      *npool.StringSliceVal `protobuf:"bytes,50,opt,name=IDs,proto3,oneof" json:"IDs,omitempty"`
	Disabled *npool.BoolVal        `protobuf:"bytes,60,opt,name=Disabled,proto3,oneof" json:"Disabled,omitempty"`
	Name     *npool.StringVal      `protobuf:"bytes,70,opt,name=Name,proto3,oneof" json:"Name,omitempty"`
	Names    *npool.StringSliceVal `protobuf:"bytes,80,opt,name=Names,proto3,oneof" json:"Names,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_coin_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *npool.StringVal {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetPresale() *npool.BoolVal {
	if x != nil {
		return x.Presale
	}
	return nil
}

func (x *Conds) GetENV() *npool.StringVal {
	if x != nil {
		return x.ENV
	}
	return nil
}

func (x *Conds) GetForPay() *npool.BoolVal {
	if x != nil {
		return x.ForPay
	}
	return nil
}

func (x *Conds) GetIDs() *npool.StringSliceVal {
	if x != nil {
		return x.IDs
	}
	return nil
}

func (x *Conds) GetDisabled() *npool.BoolVal {
	if x != nil {
		return x.Disabled
	}
	return nil
}

func (x *Conds) GetName() *npool.StringVal {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Conds) GetNames() *npool.StringSliceVal {
	if x != nil {
		return x.Names
	}
	return nil
}

type CreateCoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CoinReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateCoinRequest) Reset() {
	*x = CreateCoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCoinRequest) ProtoMessage() {}

func (x *CreateCoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCoinRequest.ProtoReflect.Descriptor instead.
func (*CreateCoinRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_coin_proto_rawDescGZIP(), []int{3}
}

func (x *CreateCoinRequest) GetInfo() *CoinReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateCoinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Coin `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateCoinResponse) Reset() {
	*x = CreateCoinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCoinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCoinResponse) ProtoMessage() {}

func (x *CreateCoinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCoinResponse.ProtoReflect.Descriptor instead.
func (*CreateCoinResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_coin_proto_rawDescGZIP(), []int{4}
}

func (x *CreateCoinResponse) GetInfo() *Coin {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetCoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetCoinRequest) Reset() {
	*x = GetCoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinRequest) ProtoMessage() {}

func (x *GetCoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinRequest.ProtoReflect.Descriptor instead.
func (*GetCoinRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_coin_proto_rawDescGZIP(), []int{5}
}

func (x *GetCoinRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetCoinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Coin `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetCoinResponse) Reset() {
	*x = GetCoinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinResponse) ProtoMessage() {}

func (x *GetCoinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinResponse.ProtoReflect.Descriptor instead.
func (*GetCoinResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_coin_proto_rawDescGZIP(), []int{6}
}

func (x *GetCoinResponse) GetInfo() *Coin {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetCoinsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetCoinsRequest) Reset() {
	*x = GetCoinsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinsRequest) ProtoMessage() {}

func (x *GetCoinsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinsRequest.ProtoReflect.Descriptor instead.
func (*GetCoinsRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_coin_proto_rawDescGZIP(), []int{7}
}

func (x *GetCoinsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetCoinsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetCoinsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetCoinsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Coin `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32  `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetCoinsResponse) Reset() {
	*x = GetCoinsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinsResponse) ProtoMessage() {}

func (x *GetCoinsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinsResponse.ProtoReflect.Descriptor instead.
func (*GetCoinsResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_coin_proto_rawDescGZIP(), []int{8}
}

func (x *GetCoinsResponse) GetInfos() []*Coin {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetCoinsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetCoinOnlyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *GetCoinOnlyRequest) Reset() {
	*x = GetCoinOnlyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinOnlyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinOnlyRequest) ProtoMessage() {}

func (x *GetCoinOnlyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinOnlyRequest.ProtoReflect.Descriptor instead.
func (*GetCoinOnlyRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_coin_proto_rawDescGZIP(), []int{9}
}

func (x *GetCoinOnlyRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type GetCoinOnlyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Coin `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetCoinOnlyResponse) Reset() {
	*x = GetCoinOnlyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinOnlyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinOnlyResponse) ProtoMessage() {}

func (x *GetCoinOnlyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinOnlyResponse.ProtoReflect.Descriptor instead.
func (*GetCoinOnlyResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_coin_proto_rawDescGZIP(), []int{10}
}

func (x *GetCoinOnlyResponse) GetInfo() *Coin {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateCoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CoinReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateCoinRequest) Reset() {
	*x = UpdateCoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCoinRequest) ProtoMessage() {}

func (x *UpdateCoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCoinRequest.ProtoReflect.Descriptor instead.
func (*UpdateCoinRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_coin_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateCoinRequest) GetInfo() *CoinReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateCoinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Coin `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateCoinResponse) Reset() {
	*x = UpdateCoinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCoinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCoinResponse) ProtoMessage() {}

func (x *UpdateCoinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_coin_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCoinResponse.ProtoReflect.Descriptor instead.
func (*UpdateCoinResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_coin_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateCoinResponse) GetInfo() *Coin {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_chain_mw_v1_coin_coin_proto protoreflect.FileDescriptor

var file_npool_chain_mw_v1_coin_coin_proto_rawDesc = []byte{
	0x0a, 0x21, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x77,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x18, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x6e, 0x70, 0x6f,
	0x6f, 0x6c, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb0,
	0x09, 0x0a, 0x07, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x4c, 0x6f, 0x67, 0x6f,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x4c, 0x6f, 0x67, 0x6f, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x03, 0x52, 0x07, 0x50, 0x72, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x45, 0x4e, 0x56,
	0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x03, 0x45, 0x4e, 0x56, 0x88, 0x01, 0x01,
	0x12, 0x2b, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0e, 0x52, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x79, 0x18, 0x50, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52,
	0x06, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x48, 0x6f,
	0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x08,
	0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x53,
	0x70, 0x65, 0x63, 0x73, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x05, 0x53, 0x70,
	0x65, 0x63, 0x73, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x46, 0x65, 0x65, 0x43, 0x6f, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52,
	0x0d, 0x46, 0x65, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x3b, 0x0a, 0x16, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x65, 0x65,
	0x42, 0x79, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x53, 0x44, 0x18, 0x78, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x0b, 0x52, 0x16, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x65, 0x65,
	0x42, 0x79, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x53, 0x44, 0x88, 0x01, 0x01, 0x12, 0x32,
	0x0a, 0x11, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x11, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x30, 0x0a, 0x10, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x46, 0x65, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52,
	0x10, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x12, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0e, 0x52, 0x12, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x46, 0x65,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0c, 0x4c, 0x6f,
	0x77, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0f, 0x52, 0x0c, 0x4c, 0x6f, 0x77, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x16, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xaa,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x16, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x46, 0x0a, 0x1b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x1b, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x08, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x12, 0x52,
	0x08, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x09,
	0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x53, 0x44, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x13, 0x52, 0x09, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x53, 0x44, 0x88, 0x01, 0x01,
	0x12, 0x36, 0x0a, 0x13, 0x4c, 0x65, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14,
	0x52, 0x13, 0x4c, 0x65, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x4c, 0x6f, 0x67,
	0x6f, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x50, 0x72, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x45, 0x4e, 0x56, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x79, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x53, 0x70,
	0x65, 0x63, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x65, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x44, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x46, 0x65, 0x65, 0x42, 0x79, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x53, 0x44,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x65, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f,
	0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x4c, 0x6f, 0x77, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x1e,
	0x0a, 0x1c, 0x5f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x53, 0x44, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x4c, 0x65,
	0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xb2, 0x07, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4c, 0x6f,
	0x67, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x50, 0x72, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x3c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x4e, 0x56, 0x18,
	0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x45, 0x4e, 0x56, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x6f,
	0x72, 0x50, 0x61, 0x79, 0x18, 0x50, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x46, 0x6f, 0x72, 0x50,
	0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x18, 0x5a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x53, 0x70, 0x65, 0x63, 0x73, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53,
	0x70, 0x65, 0x63, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x53,
	0x44, 0x18, 0x65, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55,
	0x53, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x65, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x44, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x46, 0x65, 0x65, 0x43, 0x6f,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x65, 0x65, 0x43,
	0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46,
	0x65, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x46, 0x65,
	0x65, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x46, 0x65, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x21, 0x0a,
	0x0b, 0x46, 0x65, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x8c, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x65, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x6e, 0x69, 0x74,
	0x12, 0x1f, 0x0a, 0x0a, 0x46, 0x65, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x45, 0x4e, 0x56, 0x18, 0x96,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x46, 0x65, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x45, 0x4e,
	0x56, 0x12, 0x37, 0x0a, 0x16, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x65, 0x65,
	0x42, 0x79, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x53, 0x44, 0x18, 0xa0, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x16, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x65, 0x65, 0x42,
	0x79, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x53, 0x44, 0x12, 0x2d, 0x0a, 0x11, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0xaa, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x10, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xb4, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x46, 0x65, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x12, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xbe, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x46, 0x65,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x4c, 0x6f, 0x77, 0x46, 0x65,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x4c, 0x6f, 0x77, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x16,
	0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x48,
	0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x1b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x13, 0x4c, 0x65, 0x61, 0x73,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0xdd, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x4c, 0x65, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x08, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xe6, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xf0, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xd5, 0x03, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x28, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x07, 0x50, 0x72,
	0x65, 0x73, 0x61, 0x6c, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x48, 0x01,
	0x52, 0x07, 0x50, 0x72, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x03,
	0x45, 0x4e, 0x56, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x02,
	0x52, 0x03, 0x45, 0x4e, 0x56, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x50,
	0x61, 0x79, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x06, 0x46,
	0x6f, 0x72, 0x50, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x03, 0x49, 0x44, 0x73, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48,
	0x04, 0x52, 0x03, 0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x08, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x48, 0x05,
	0x52, 0x08, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x48, 0x06, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x05, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63,
	0x65, 0x56, 0x61, 0x6c, 0x48, 0x07, 0x52, 0x05, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x88, 0x01, 0x01,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x50, 0x72, 0x65, 0x73,
	0x61, 0x6c, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x45, 0x4e, 0x56, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x46, 0x6f, 0x72, 0x50, 0x61, 0x79, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x49, 0x44, 0x73, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x4e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x4a,
	0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x48, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x32, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x20, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x45, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x76, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x35, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x5e, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x4b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e,
	0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x22, 0x49, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x4f, 0x6e, 0x6c,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4a, 0x0a,
	0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x48, 0x0a, 0x12, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x32, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x32, 0x97, 0x04, 0x0a, 0x0a, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x12, 0x69, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e,
	0x12, 0x2b, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a,
	0x07, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x28, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x63, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x29, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x4f,
	0x6e, 0x6c, 0x79, 0x12, 0x2c, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x69, 0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x69, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e,
	0x12, 0x2b, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x39, 0x5a,
	0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f,
	0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x77,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_chain_mw_v1_coin_coin_proto_rawDescOnce sync.Once
	file_npool_chain_mw_v1_coin_coin_proto_rawDescData = file_npool_chain_mw_v1_coin_coin_proto_rawDesc
)

func file_npool_chain_mw_v1_coin_coin_proto_rawDescGZIP() []byte {
	file_npool_chain_mw_v1_coin_coin_proto_rawDescOnce.Do(func() {
		file_npool_chain_mw_v1_coin_coin_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_chain_mw_v1_coin_coin_proto_rawDescData)
	})
	return file_npool_chain_mw_v1_coin_coin_proto_rawDescData
}

var file_npool_chain_mw_v1_coin_coin_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_npool_chain_mw_v1_coin_coin_proto_goTypes = []interface{}{
	(*CoinReq)(nil),              // 0: chain.middleware.coin.v1.CoinReq
	(*Coin)(nil),                 // 1: chain.middleware.coin.v1.Coin
	(*Conds)(nil),                // 2: chain.middleware.coin.v1.Conds
	(*CreateCoinRequest)(nil),    // 3: chain.middleware.coin.v1.CreateCoinRequest
	(*CreateCoinResponse)(nil),   // 4: chain.middleware.coin.v1.CreateCoinResponse
	(*GetCoinRequest)(nil),       // 5: chain.middleware.coin.v1.GetCoinRequest
	(*GetCoinResponse)(nil),      // 6: chain.middleware.coin.v1.GetCoinResponse
	(*GetCoinsRequest)(nil),      // 7: chain.middleware.coin.v1.GetCoinsRequest
	(*GetCoinsResponse)(nil),     // 8: chain.middleware.coin.v1.GetCoinsResponse
	(*GetCoinOnlyRequest)(nil),   // 9: chain.middleware.coin.v1.GetCoinOnlyRequest
	(*GetCoinOnlyResponse)(nil),  // 10: chain.middleware.coin.v1.GetCoinOnlyResponse
	(*UpdateCoinRequest)(nil),    // 11: chain.middleware.coin.v1.UpdateCoinRequest
	(*UpdateCoinResponse)(nil),   // 12: chain.middleware.coin.v1.UpdateCoinResponse
	(*npool.StringVal)(nil),      // 13: npool.v1.StringVal
	(*npool.BoolVal)(nil),        // 14: npool.v1.BoolVal
	(*npool.StringSliceVal)(nil), // 15: npool.v1.StringSliceVal
}
var file_npool_chain_mw_v1_coin_coin_proto_depIdxs = []int32{
	13, // 0: chain.middleware.coin.v1.Conds.ID:type_name -> npool.v1.StringVal
	14, // 1: chain.middleware.coin.v1.Conds.Presale:type_name -> npool.v1.BoolVal
	13, // 2: chain.middleware.coin.v1.Conds.ENV:type_name -> npool.v1.StringVal
	14, // 3: chain.middleware.coin.v1.Conds.ForPay:type_name -> npool.v1.BoolVal
	15, // 4: chain.middleware.coin.v1.Conds.IDs:type_name -> npool.v1.StringSliceVal
	14, // 5: chain.middleware.coin.v1.Conds.Disabled:type_name -> npool.v1.BoolVal
	13, // 6: chain.middleware.coin.v1.Conds.Name:type_name -> npool.v1.StringVal
	15, // 7: chain.middleware.coin.v1.Conds.Names:type_name -> npool.v1.StringSliceVal
	0,  // 8: chain.middleware.coin.v1.CreateCoinRequest.Info:type_name -> chain.middleware.coin.v1.CoinReq
	1,  // 9: chain.middleware.coin.v1.CreateCoinResponse.Info:type_name -> chain.middleware.coin.v1.Coin
	1,  // 10: chain.middleware.coin.v1.GetCoinResponse.Info:type_name -> chain.middleware.coin.v1.Coin
	2,  // 11: chain.middleware.coin.v1.GetCoinsRequest.Conds:type_name -> chain.middleware.coin.v1.Conds
	1,  // 12: chain.middleware.coin.v1.GetCoinsResponse.Infos:type_name -> chain.middleware.coin.v1.Coin
	2,  // 13: chain.middleware.coin.v1.GetCoinOnlyRequest.Conds:type_name -> chain.middleware.coin.v1.Conds
	1,  // 14: chain.middleware.coin.v1.GetCoinOnlyResponse.Info:type_name -> chain.middleware.coin.v1.Coin
	0,  // 15: chain.middleware.coin.v1.UpdateCoinRequest.Info:type_name -> chain.middleware.coin.v1.CoinReq
	1,  // 16: chain.middleware.coin.v1.UpdateCoinResponse.Info:type_name -> chain.middleware.coin.v1.Coin
	3,  // 17: chain.middleware.coin.v1.Middleware.CreateCoin:input_type -> chain.middleware.coin.v1.CreateCoinRequest
	5,  // 18: chain.middleware.coin.v1.Middleware.GetCoin:input_type -> chain.middleware.coin.v1.GetCoinRequest
	7,  // 19: chain.middleware.coin.v1.Middleware.GetCoins:input_type -> chain.middleware.coin.v1.GetCoinsRequest
	9,  // 20: chain.middleware.coin.v1.Middleware.GetCoinOnly:input_type -> chain.middleware.coin.v1.GetCoinOnlyRequest
	11, // 21: chain.middleware.coin.v1.Middleware.UpdateCoin:input_type -> chain.middleware.coin.v1.UpdateCoinRequest
	4,  // 22: chain.middleware.coin.v1.Middleware.CreateCoin:output_type -> chain.middleware.coin.v1.CreateCoinResponse
	6,  // 23: chain.middleware.coin.v1.Middleware.GetCoin:output_type -> chain.middleware.coin.v1.GetCoinResponse
	8,  // 24: chain.middleware.coin.v1.Middleware.GetCoins:output_type -> chain.middleware.coin.v1.GetCoinsResponse
	10, // 25: chain.middleware.coin.v1.Middleware.GetCoinOnly:output_type -> chain.middleware.coin.v1.GetCoinOnlyResponse
	12, // 26: chain.middleware.coin.v1.Middleware.UpdateCoin:output_type -> chain.middleware.coin.v1.UpdateCoinResponse
	22, // [22:27] is the sub-list for method output_type
	17, // [17:22] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_npool_chain_mw_v1_coin_coin_proto_init() }
func file_npool_chain_mw_v1_coin_coin_proto_init() {
	if File_npool_chain_mw_v1_coin_coin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_chain_mw_v1_coin_coin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_coin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Coin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_coin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_coin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_coin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCoinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_coin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_coin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_coin_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_coin_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_coin_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinOnlyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_coin_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinOnlyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_coin_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_coin_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCoinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_chain_mw_v1_coin_coin_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_npool_chain_mw_v1_coin_coin_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_chain_mw_v1_coin_coin_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_chain_mw_v1_coin_coin_proto_goTypes,
		DependencyIndexes: file_npool_chain_mw_v1_coin_coin_proto_depIdxs,
		MessageInfos:      file_npool_chain_mw_v1_coin_coin_proto_msgTypes,
	}.Build()
	File_npool_chain_mw_v1_coin_coin_proto = out.File
	file_npool_chain_mw_v1_coin_coin_proto_rawDesc = nil
	file_npool_chain_mw_v1_coin_coin_proto_goTypes = nil
	file_npool_chain_mw_v1_coin_coin_proto_depIdxs = nil
}
