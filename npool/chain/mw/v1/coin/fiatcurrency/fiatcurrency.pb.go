// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: npool/chain/mw/v1/coin/fiatcurrency/fiatcurrency.proto

package fiatcurrency

import (
	npool "github.com/NpoolPlatform/message/npool"
	currency "github.com/NpoolPlatform/message/npool/chain/mgr/v1/coin/currency"
	fiatcurrency "github.com/NpoolPlatform/message/npool/chain/mgr/v1/coin/fiatcurrency"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FiatCurrency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: sql:"id"
	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty" sql:"id"`
	// @inject_tag: sql:"fiat_currency_type_id"
	FiatCurrencyTypeID string `protobuf:"bytes,20,opt,name=FiatCurrencyTypeID,proto3" json:"FiatCurrencyTypeID,omitempty" sql:"fiat_currency_type_id"`
	// @inject_tag: sql:"feed_type"
	FeedTypeStr string            `protobuf:"bytes,30,opt,name=FeedTypeStr,proto3" json:"FeedTypeStr,omitempty" sql:"feed_type"`
	FeedType    currency.FeedType `protobuf:"varint,40,opt,name=FeedType,proto3,enum=chain.manager.coin.currency.v1.FeedType" json:"FeedType,omitempty"`
	// @inject_tag: sql:"fiat_currency_name"
	FiatCurrencyName string `protobuf:"bytes,50,opt,name=FiatCurrencyName,proto3" json:"FiatCurrencyName,omitempty" sql:"fiat_currency_name"`
	// @inject_tag: sql:"fiat_currency_name"
	FiatCurrencyLogo string `protobuf:"bytes,60,opt,name=FiatCurrencyLogo,proto3" json:"FiatCurrencyLogo,omitempty" sql:"fiat_currency_name"`
	// @inject_tag: sql:"market_value_high"
	MarketValueHigh string `protobuf:"bytes,70,opt,name=MarketValueHigh,proto3" json:"MarketValueHigh,omitempty" sql:"market_value_high"`
	// @inject_tag: sql:"market_value_low"
	MarketValueLow string `protobuf:"bytes,80,opt,name=MarketValueLow,proto3" json:"MarketValueLow,omitempty" sql:"market_value_low"`
	// @inject_tag: sql:"created_at"
	CreatedAt uint32 `protobuf:"varint,90,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
	// @inject_tag: sql:"updated_at"
	UpdatedAt uint32 `protobuf:"varint,100,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty" sql:"updated_at"`
	// @inject_tag: sql:"coin_type_id"
	CoinTypeID string `protobuf:"bytes,110,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty" sql:"coin_type_id"`
	// @inject_tag: sql:"coin_name"
	CoinName string `protobuf:"bytes,120,opt,name=CoinName,proto3" json:"CoinName,omitempty" sql:"coin_name"`
	// @inject_tag: sql:"coin_logo"
	CoinLogo string `protobuf:"bytes,130,opt,name=CoinLogo,proto3" json:"CoinLogo,omitempty" sql:"coin_logo"`
	// @inject_tag: sql:"coin_unit"
	CoinUnit string `protobuf:"bytes,140,opt,name=CoinUnit,proto3" json:"CoinUnit,omitempty" sql:"coin_unit"`
	// @inject_tag: sql:"coin_env"
	CoinENV string `protobuf:"bytes,150,opt,name=CoinENV,proto3" json:"CoinENV,omitempty" sql:"coin_env"`
}

func (x *FiatCurrency) Reset() {
	*x = FiatCurrency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FiatCurrency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FiatCurrency) ProtoMessage() {}

func (x *FiatCurrency) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FiatCurrency.ProtoReflect.Descriptor instead.
func (*FiatCurrency) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescGZIP(), []int{0}
}

func (x *FiatCurrency) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *FiatCurrency) GetFiatCurrencyTypeID() string {
	if x != nil {
		return x.FiatCurrencyTypeID
	}
	return ""
}

func (x *FiatCurrency) GetFeedTypeStr() string {
	if x != nil {
		return x.FeedTypeStr
	}
	return ""
}

func (x *FiatCurrency) GetFeedType() currency.FeedType {
	if x != nil {
		return x.FeedType
	}
	return currency.FeedType(0)
}

func (x *FiatCurrency) GetFiatCurrencyName() string {
	if x != nil {
		return x.FiatCurrencyName
	}
	return ""
}

func (x *FiatCurrency) GetFiatCurrencyLogo() string {
	if x != nil {
		return x.FiatCurrencyLogo
	}
	return ""
}

func (x *FiatCurrency) GetMarketValueHigh() string {
	if x != nil {
		return x.MarketValueHigh
	}
	return ""
}

func (x *FiatCurrency) GetMarketValueLow() string {
	if x != nil {
		return x.MarketValueLow
	}
	return ""
}

func (x *FiatCurrency) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *FiatCurrency) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *FiatCurrency) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

func (x *FiatCurrency) GetCoinName() string {
	if x != nil {
		return x.CoinName
	}
	return ""
}

func (x *FiatCurrency) GetCoinLogo() string {
	if x != nil {
		return x.CoinLogo
	}
	return ""
}

func (x *FiatCurrency) GetCoinUnit() string {
	if x != nil {
		return x.CoinUnit
	}
	return ""
}

func (x *FiatCurrency) GetCoinENV() string {
	if x != nil {
		return x.CoinENV
	}
	return ""
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                  *npool.StringVal      `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	FiatCurrencyTypeID  *npool.StringVal      `protobuf:"bytes,20,opt,name=FiatCurrencyTypeID,proto3,oneof" json:"FiatCurrencyTypeID,omitempty"`
	FiatCurrencyTypeIDs *npool.StringSliceVal `protobuf:"bytes,30,opt,name=FiatCurrencyTypeIDs,proto3,oneof" json:"FiatCurrencyTypeIDs,omitempty"`
	StartAt             *npool.Uint32Val      `protobuf:"bytes,40,opt,name=StartAt,proto3,oneof" json:"StartAt,omitempty"`
	EndAt               *npool.Uint32Val      `protobuf:"bytes,50,opt,name=EndAt,proto3,oneof" json:"EndAt,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescGZIP(), []int{1}
}

func (x *Conds) GetID() *npool.StringVal {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetFiatCurrencyTypeID() *npool.StringVal {
	if x != nil {
		return x.FiatCurrencyTypeID
	}
	return nil
}

func (x *Conds) GetFiatCurrencyTypeIDs() *npool.StringSliceVal {
	if x != nil {
		return x.FiatCurrencyTypeIDs
	}
	return nil
}

func (x *Conds) GetStartAt() *npool.Uint32Val {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *Conds) GetEndAt() *npool.Uint32Val {
	if x != nil {
		return x.EndAt
	}
	return nil
}

type CreateFiatCurrencyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *fiatcurrency.FiatCurrencyReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateFiatCurrencyRequest) Reset() {
	*x = CreateFiatCurrencyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFiatCurrencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFiatCurrencyRequest) ProtoMessage() {}

func (x *CreateFiatCurrencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFiatCurrencyRequest.ProtoReflect.Descriptor instead.
func (*CreateFiatCurrencyRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescGZIP(), []int{2}
}

func (x *CreateFiatCurrencyRequest) GetInfo() *fiatcurrency.FiatCurrencyReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateFiatCurrencyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateFiatCurrencyResponse) Reset() {
	*x = CreateFiatCurrencyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFiatCurrencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFiatCurrencyResponse) ProtoMessage() {}

func (x *CreateFiatCurrencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFiatCurrencyResponse.ProtoReflect.Descriptor instead.
func (*CreateFiatCurrencyResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescGZIP(), []int{3}
}

type CreateFiatCurrenciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*fiatcurrency.FiatCurrencyReq `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateFiatCurrenciesRequest) Reset() {
	*x = CreateFiatCurrenciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFiatCurrenciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFiatCurrenciesRequest) ProtoMessage() {}

func (x *CreateFiatCurrenciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFiatCurrenciesRequest.ProtoReflect.Descriptor instead.
func (*CreateFiatCurrenciesRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescGZIP(), []int{4}
}

func (x *CreateFiatCurrenciesRequest) GetInfos() []*fiatcurrency.FiatCurrencyReq {
	if x != nil {
		return x.Infos
	}
	return nil
}

type CreateFiatCurrenciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateFiatCurrenciesResponse) Reset() {
	*x = CreateFiatCurrenciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFiatCurrenciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFiatCurrenciesResponse) ProtoMessage() {}

func (x *CreateFiatCurrenciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFiatCurrenciesResponse.ProtoReflect.Descriptor instead.
func (*CreateFiatCurrenciesResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescGZIP(), []int{5}
}

type RefreshFiatCurrenciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RefreshFiatCurrenciesRequest) Reset() {
	*x = RefreshFiatCurrenciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshFiatCurrenciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshFiatCurrenciesRequest) ProtoMessage() {}

func (x *RefreshFiatCurrenciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshFiatCurrenciesRequest.ProtoReflect.Descriptor instead.
func (*RefreshFiatCurrenciesRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescGZIP(), []int{6}
}

type RefreshFiatCurrenciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RefreshFiatCurrenciesResponse) Reset() {
	*x = RefreshFiatCurrenciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RefreshFiatCurrenciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshFiatCurrenciesResponse) ProtoMessage() {}

func (x *RefreshFiatCurrenciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshFiatCurrenciesResponse.ProtoReflect.Descriptor instead.
func (*RefreshFiatCurrenciesResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescGZIP(), []int{7}
}

type GetFiatCurrencyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FiatCurrencyTypeID string `protobuf:"bytes,10,opt,name=FiatCurrencyTypeID,proto3" json:"FiatCurrencyTypeID,omitempty"`
}

func (x *GetFiatCurrencyRequest) Reset() {
	*x = GetFiatCurrencyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFiatCurrencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFiatCurrencyRequest) ProtoMessage() {}

func (x *GetFiatCurrencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFiatCurrencyRequest.ProtoReflect.Descriptor instead.
func (*GetFiatCurrencyRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescGZIP(), []int{8}
}

func (x *GetFiatCurrencyRequest) GetFiatCurrencyTypeID() string {
	if x != nil {
		return x.FiatCurrencyTypeID
	}
	return ""
}

type GetFiatCurrencyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *FiatCurrency `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetFiatCurrencyResponse) Reset() {
	*x = GetFiatCurrencyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFiatCurrencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFiatCurrencyResponse) ProtoMessage() {}

func (x *GetFiatCurrencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFiatCurrencyResponse.ProtoReflect.Descriptor instead.
func (*GetFiatCurrencyResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescGZIP(), []int{9}
}

func (x *GetFiatCurrencyResponse) GetInfo() *FiatCurrency {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetFiatCurrenciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *GetFiatCurrenciesRequest) Reset() {
	*x = GetFiatCurrenciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFiatCurrenciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFiatCurrenciesRequest) ProtoMessage() {}

func (x *GetFiatCurrenciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFiatCurrenciesRequest.ProtoReflect.Descriptor instead.
func (*GetFiatCurrenciesRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescGZIP(), []int{10}
}

func (x *GetFiatCurrenciesRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type GetFiatCurrenciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*FiatCurrency `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *GetFiatCurrenciesResponse) Reset() {
	*x = GetFiatCurrenciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFiatCurrenciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFiatCurrenciesResponse) ProtoMessage() {}

func (x *GetFiatCurrenciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFiatCurrenciesResponse.ProtoReflect.Descriptor instead.
func (*GetFiatCurrenciesResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescGZIP(), []int{11}
}

func (x *GetFiatCurrenciesResponse) GetInfos() []*FiatCurrency {
	if x != nil {
		return x.Infos
	}
	return nil
}

type GetCoinFiatCurrenciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FiatCurrencyTypeIDs []string `protobuf:"bytes,10,rep,name=FiatCurrencyTypeIDs,proto3" json:"FiatCurrencyTypeIDs,omitempty"`
	CoinTypeIDs         []string `protobuf:"bytes,20,rep,name=CoinTypeIDs,proto3" json:"CoinTypeIDs,omitempty"`
}

func (x *GetCoinFiatCurrenciesRequest) Reset() {
	*x = GetCoinFiatCurrenciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinFiatCurrenciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinFiatCurrenciesRequest) ProtoMessage() {}

func (x *GetCoinFiatCurrenciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinFiatCurrenciesRequest.ProtoReflect.Descriptor instead.
func (*GetCoinFiatCurrenciesRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescGZIP(), []int{12}
}

func (x *GetCoinFiatCurrenciesRequest) GetFiatCurrencyTypeIDs() []string {
	if x != nil {
		return x.FiatCurrencyTypeIDs
	}
	return nil
}

func (x *GetCoinFiatCurrenciesRequest) GetCoinTypeIDs() []string {
	if x != nil {
		return x.CoinTypeIDs
	}
	return nil
}

type GetCoinFiatCurrenciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*FiatCurrency `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *GetCoinFiatCurrenciesResponse) Reset() {
	*x = GetCoinFiatCurrenciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinFiatCurrenciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinFiatCurrenciesResponse) ProtoMessage() {}

func (x *GetCoinFiatCurrenciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinFiatCurrenciesResponse.ProtoReflect.Descriptor instead.
func (*GetCoinFiatCurrenciesResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescGZIP(), []int{13}
}

func (x *GetCoinFiatCurrenciesResponse) GetInfos() []*FiatCurrency {
	if x != nil {
		return x.Infos
	}
	return nil
}

type GetHistoriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetHistoriesRequest) Reset() {
	*x = GetHistoriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHistoriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHistoriesRequest) ProtoMessage() {}

func (x *GetHistoriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHistoriesRequest.ProtoReflect.Descriptor instead.
func (*GetHistoriesRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescGZIP(), []int{14}
}

func (x *GetHistoriesRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetHistoriesRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetHistoriesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetHistoriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*FiatCurrency `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32          `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetHistoriesResponse) Reset() {
	*x = GetHistoriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetHistoriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetHistoriesResponse) ProtoMessage() {}

func (x *GetHistoriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetHistoriesResponse.ProtoReflect.Descriptor instead.
func (*GetHistoriesResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescGZIP(), []int{15}
}

func (x *GetHistoriesResponse) GetInfos() []*FiatCurrency {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetHistoriesResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

var File_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto protoreflect.FileDescriptor

var file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_rawDesc = []byte{
	0x0a, 0x36, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x77,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x25, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e,
	0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x6e,
	0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x67,
	0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x37, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d,
	0x67, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x66, 0x69, 0x61, 0x74, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xad, 0x04, 0x0a, 0x0c, 0x46,
	0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x46,
	0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x46,
	0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x46, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x12, 0x44, 0x0a,
	0x08, 0x46, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x28, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x46, 0x65, 0x65, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x46,
	0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x10, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c,
	0x6f, 0x67, 0x6f, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x46, 0x69, 0x61, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x69, 0x67, 0x68, 0x18, 0x46,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x69, 0x67, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x4c, 0x6f, 0x77, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x6f, 0x77, 0x12, 0x1c, 0x0a,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43,
	0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x69,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x69,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x67,
	0x6f, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x6f,
	0x67, 0x6f, 0x12, 0x1b, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x8c,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x12,
	0x19, 0x0a, 0x07, 0x43, 0x6f, 0x69, 0x6e, 0x45, 0x4e, 0x56, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x43, 0x6f, 0x69, 0x6e, 0x45, 0x4e, 0x56, 0x22, 0xfc, 0x02, 0x0a, 0x05, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x48,
	0x0a, 0x12, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48,
	0x01, 0x52, 0x12, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x13, 0x46, 0x69, 0x61, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x73, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48,
	0x02, 0x52, 0x13, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x07, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x41, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48,
	0x03, 0x52, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a,
	0x05, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x48, 0x04, 0x52, 0x05, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x49, 0x44, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x42, 0x16, 0x0a, 0x14, 0x5f,
	0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x44, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x22, 0x64, 0x0a, 0x19, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x1c, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x68, 0x0a,
	0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x05,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71,
	0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x1e, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x0a, 0x1c, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1f, 0x0a, 0x1d, 0x52, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x48, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x46,
	0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x44, 0x22, 0x62, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5e, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x46, 0x69, 0x61,
	0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x42, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52,
	0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x66, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x46, 0x69, 0x61,
	0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x61, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x72,
	0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30,
	0x0a, 0x13, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x44, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x46, 0x69, 0x61,
	0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x73, 0x18,
	0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x44, 0x73, 0x22, 0x6a, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x46, 0x69, 0x61,
	0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x61, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x87,
	0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69,
	0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x77, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x49, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x32, 0xd8, 0x08, 0x0a, 0x0a, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x12, 0x9b, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x61, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x40, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e,
	0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa1,
	0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x42, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e,
	0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x92, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3d, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66,
	0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69,
	0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x98, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x46,
	0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x3f, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0xa4, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x46, 0x69,
	0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x43, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x46, 0x69, 0x61, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x44, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69,
	0x6e, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x89, 0x01, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3a, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66,
	0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa4, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12,
	0x43, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x46,
	0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61,
	0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x46, 0x5a, 0x44,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x77, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescOnce sync.Once
	file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescData = file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_rawDesc
)

func file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescGZIP() []byte {
	file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescOnce.Do(func() {
		file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescData)
	})
	return file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescData
}

var file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_goTypes = []interface{}{
	(*FiatCurrency)(nil),                  // 0: chain.middleware.coin.fiatcurrency.v1.FiatCurrency
	(*Conds)(nil),                         // 1: chain.middleware.coin.fiatcurrency.v1.Conds
	(*CreateFiatCurrencyRequest)(nil),     // 2: chain.middleware.coin.fiatcurrency.v1.CreateFiatCurrencyRequest
	(*CreateFiatCurrencyResponse)(nil),    // 3: chain.middleware.coin.fiatcurrency.v1.CreateFiatCurrencyResponse
	(*CreateFiatCurrenciesRequest)(nil),   // 4: chain.middleware.coin.fiatcurrency.v1.CreateFiatCurrenciesRequest
	(*CreateFiatCurrenciesResponse)(nil),  // 5: chain.middleware.coin.fiatcurrency.v1.CreateFiatCurrenciesResponse
	(*RefreshFiatCurrenciesRequest)(nil),  // 6: chain.middleware.coin.fiatcurrency.v1.RefreshFiatCurrenciesRequest
	(*RefreshFiatCurrenciesResponse)(nil), // 7: chain.middleware.coin.fiatcurrency.v1.RefreshFiatCurrenciesResponse
	(*GetFiatCurrencyRequest)(nil),        // 8: chain.middleware.coin.fiatcurrency.v1.GetFiatCurrencyRequest
	(*GetFiatCurrencyResponse)(nil),       // 9: chain.middleware.coin.fiatcurrency.v1.GetFiatCurrencyResponse
	(*GetFiatCurrenciesRequest)(nil),      // 10: chain.middleware.coin.fiatcurrency.v1.GetFiatCurrenciesRequest
	(*GetFiatCurrenciesResponse)(nil),     // 11: chain.middleware.coin.fiatcurrency.v1.GetFiatCurrenciesResponse
	(*GetCoinFiatCurrenciesRequest)(nil),  // 12: chain.middleware.coin.fiatcurrency.v1.GetCoinFiatCurrenciesRequest
	(*GetCoinFiatCurrenciesResponse)(nil), // 13: chain.middleware.coin.fiatcurrency.v1.GetCoinFiatCurrenciesResponse
	(*GetHistoriesRequest)(nil),           // 14: chain.middleware.coin.fiatcurrency.v1.GetHistoriesRequest
	(*GetHistoriesResponse)(nil),          // 15: chain.middleware.coin.fiatcurrency.v1.GetHistoriesResponse
	(currency.FeedType)(0),                // 16: chain.manager.coin.currency.v1.FeedType
	(*npool.StringVal)(nil),               // 17: npool.v1.StringVal
	(*npool.StringSliceVal)(nil),          // 18: npool.v1.StringSliceVal
	(*npool.Uint32Val)(nil),               // 19: npool.v1.Uint32Val
	(*fiatcurrency.FiatCurrencyReq)(nil),  // 20: chain.manager.coin.fiatcurrency.v1.FiatCurrencyReq
}
var file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_depIdxs = []int32{
	16, // 0: chain.middleware.coin.fiatcurrency.v1.FiatCurrency.FeedType:type_name -> chain.manager.coin.currency.v1.FeedType
	17, // 1: chain.middleware.coin.fiatcurrency.v1.Conds.ID:type_name -> npool.v1.StringVal
	17, // 2: chain.middleware.coin.fiatcurrency.v1.Conds.FiatCurrencyTypeID:type_name -> npool.v1.StringVal
	18, // 3: chain.middleware.coin.fiatcurrency.v1.Conds.FiatCurrencyTypeIDs:type_name -> npool.v1.StringSliceVal
	19, // 4: chain.middleware.coin.fiatcurrency.v1.Conds.StartAt:type_name -> npool.v1.Uint32Val
	19, // 5: chain.middleware.coin.fiatcurrency.v1.Conds.EndAt:type_name -> npool.v1.Uint32Val
	20, // 6: chain.middleware.coin.fiatcurrency.v1.CreateFiatCurrencyRequest.Info:type_name -> chain.manager.coin.fiatcurrency.v1.FiatCurrencyReq
	20, // 7: chain.middleware.coin.fiatcurrency.v1.CreateFiatCurrenciesRequest.Infos:type_name -> chain.manager.coin.fiatcurrency.v1.FiatCurrencyReq
	0,  // 8: chain.middleware.coin.fiatcurrency.v1.GetFiatCurrencyResponse.Info:type_name -> chain.middleware.coin.fiatcurrency.v1.FiatCurrency
	1,  // 9: chain.middleware.coin.fiatcurrency.v1.GetFiatCurrenciesRequest.Conds:type_name -> chain.middleware.coin.fiatcurrency.v1.Conds
	0,  // 10: chain.middleware.coin.fiatcurrency.v1.GetFiatCurrenciesResponse.Infos:type_name -> chain.middleware.coin.fiatcurrency.v1.FiatCurrency
	0,  // 11: chain.middleware.coin.fiatcurrency.v1.GetCoinFiatCurrenciesResponse.Infos:type_name -> chain.middleware.coin.fiatcurrency.v1.FiatCurrency
	1,  // 12: chain.middleware.coin.fiatcurrency.v1.GetHistoriesRequest.Conds:type_name -> chain.middleware.coin.fiatcurrency.v1.Conds
	0,  // 13: chain.middleware.coin.fiatcurrency.v1.GetHistoriesResponse.Infos:type_name -> chain.middleware.coin.fiatcurrency.v1.FiatCurrency
	2,  // 14: chain.middleware.coin.fiatcurrency.v1.Middleware.CreateFiatCurrency:input_type -> chain.middleware.coin.fiatcurrency.v1.CreateFiatCurrencyRequest
	4,  // 15: chain.middleware.coin.fiatcurrency.v1.Middleware.CreateFiatCurrencies:input_type -> chain.middleware.coin.fiatcurrency.v1.CreateFiatCurrenciesRequest
	8,  // 16: chain.middleware.coin.fiatcurrency.v1.Middleware.GetFiatCurrency:input_type -> chain.middleware.coin.fiatcurrency.v1.GetFiatCurrencyRequest
	10, // 17: chain.middleware.coin.fiatcurrency.v1.Middleware.GetFiatCurrencies:input_type -> chain.middleware.coin.fiatcurrency.v1.GetFiatCurrenciesRequest
	12, // 18: chain.middleware.coin.fiatcurrency.v1.Middleware.GetCoinFiatCurrencies:input_type -> chain.middleware.coin.fiatcurrency.v1.GetCoinFiatCurrenciesRequest
	14, // 19: chain.middleware.coin.fiatcurrency.v1.Middleware.GetHistories:input_type -> chain.middleware.coin.fiatcurrency.v1.GetHistoriesRequest
	6,  // 20: chain.middleware.coin.fiatcurrency.v1.Middleware.RefreshFiatCurrencies:input_type -> chain.middleware.coin.fiatcurrency.v1.RefreshFiatCurrenciesRequest
	3,  // 21: chain.middleware.coin.fiatcurrency.v1.Middleware.CreateFiatCurrency:output_type -> chain.middleware.coin.fiatcurrency.v1.CreateFiatCurrencyResponse
	5,  // 22: chain.middleware.coin.fiatcurrency.v1.Middleware.CreateFiatCurrencies:output_type -> chain.middleware.coin.fiatcurrency.v1.CreateFiatCurrenciesResponse
	9,  // 23: chain.middleware.coin.fiatcurrency.v1.Middleware.GetFiatCurrency:output_type -> chain.middleware.coin.fiatcurrency.v1.GetFiatCurrencyResponse
	11, // 24: chain.middleware.coin.fiatcurrency.v1.Middleware.GetFiatCurrencies:output_type -> chain.middleware.coin.fiatcurrency.v1.GetFiatCurrenciesResponse
	13, // 25: chain.middleware.coin.fiatcurrency.v1.Middleware.GetCoinFiatCurrencies:output_type -> chain.middleware.coin.fiatcurrency.v1.GetCoinFiatCurrenciesResponse
	15, // 26: chain.middleware.coin.fiatcurrency.v1.Middleware.GetHistories:output_type -> chain.middleware.coin.fiatcurrency.v1.GetHistoriesResponse
	7,  // 27: chain.middleware.coin.fiatcurrency.v1.Middleware.RefreshFiatCurrencies:output_type -> chain.middleware.coin.fiatcurrency.v1.RefreshFiatCurrenciesResponse
	21, // [21:28] is the sub-list for method output_type
	14, // [14:21] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_init() }
func file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_init() {
	if File_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FiatCurrency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFiatCurrencyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFiatCurrencyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFiatCurrenciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFiatCurrenciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshFiatCurrenciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RefreshFiatCurrenciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFiatCurrencyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFiatCurrencyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFiatCurrenciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFiatCurrenciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinFiatCurrenciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinFiatCurrenciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHistoriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetHistoriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_goTypes,
		DependencyIndexes: file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_depIdxs,
		MessageInfos:      file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes,
	}.Build()
	File_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto = out.File
	file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_rawDesc = nil
	file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_goTypes = nil
	file_npool_chain_mw_v1_coin_fiatcurrency_fiatcurrency_proto_depIdxs = nil
}
