// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.18.1
// source: npool/chain/mw/v1/coin/currency/currency.proto

package currency

import (
	v1 "github.com/NpoolPlatform/message/npool/basetypes/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CurrencyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              *string              `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	CoinTypeID      *string              `protobuf:"bytes,20,opt,name=CoinTypeID,proto3,oneof" json:"CoinTypeID,omitempty"`
	FeedType        *v1.CurrencyFeedType `protobuf:"varint,30,opt,name=FeedType,proto3,enum=basetypes.v1.CurrencyFeedType,oneof" json:"FeedType,omitempty"`
	MarketValueHigh *string              `protobuf:"bytes,40,opt,name=MarketValueHigh,proto3,oneof" json:"MarketValueHigh,omitempty"`
	MarketValueLow  *string              `protobuf:"bytes,50,opt,name=MarketValueLow,proto3,oneof" json:"MarketValueLow,omitempty"`
}

func (x *CurrencyReq) Reset() {
	*x = CurrencyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyReq) ProtoMessage() {}

func (x *CurrencyReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyReq.ProtoReflect.Descriptor instead.
func (*CurrencyReq) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_currency_currency_proto_rawDescGZIP(), []int{0}
}

func (x *CurrencyReq) GetID() string {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return ""
}

func (x *CurrencyReq) GetCoinTypeID() string {
	if x != nil && x.CoinTypeID != nil {
		return *x.CoinTypeID
	}
	return ""
}

func (x *CurrencyReq) GetFeedType() v1.CurrencyFeedType {
	if x != nil && x.FeedType != nil {
		return *x.FeedType
	}
	return v1.CurrencyFeedType(0)
}

func (x *CurrencyReq) GetMarketValueHigh() string {
	if x != nil && x.MarketValueHigh != nil {
		return *x.MarketValueHigh
	}
	return ""
}

func (x *CurrencyReq) GetMarketValueLow() string {
	if x != nil && x.MarketValueLow != nil {
		return *x.MarketValueLow
	}
	return ""
}

type Currency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: sql:"id"
	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty" sql:"id"`
	// @inject_tag: sql:"coin_type_id"
	CoinTypeID string `protobuf:"bytes,20,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty" sql:"coin_type_id"`
	// @inject_tag: sql:"coin_name"
	CoinName string `protobuf:"bytes,30,opt,name=CoinName,proto3" json:"CoinName,omitempty" sql:"coin_name"`
	// @inject_tag: sql:"coin_logo"
	CoinLogo string `protobuf:"bytes,40,opt,name=CoinLogo,proto3" json:"CoinLogo,omitempty" sql:"coin_logo"`
	// @inject_tag: sql:"coin_unit"
	CoinUnit string `protobuf:"bytes,50,opt,name=CoinUnit,proto3" json:"CoinUnit,omitempty" sql:"coin_unit"`
	// @inject_tag: sql:"coin_env"
	CoinENV string `protobuf:"bytes,60,opt,name=CoinENV,proto3" json:"CoinENV,omitempty" sql:"coin_env"`
	// @inject_tag: sql:"created_at"
	CreatedAt uint32 `protobuf:"varint,70,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
	// @inject_tag: sql:"updated_at"
	UpdatedAt uint32 `protobuf:"varint,80,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty" sql:"updated_at"`
	// @inject_tag: sql:"market_value_high"
	MarketValueHigh string `protobuf:"bytes,90,opt,name=MarketValueHigh,proto3" json:"MarketValueHigh,omitempty" sql:"market_value_high"`
	// @inject_tag: sql:"market_value_low"
	MarketValueLow string `protobuf:"bytes,100,opt,name=MarketValueLow,proto3" json:"MarketValueLow,omitempty" sql:"market_value_low"`
	// @inject_tag: sql:"feed_type"
	FeedTypeStr string              `protobuf:"bytes,110,opt,name=FeedTypeStr,proto3" json:"FeedTypeStr,omitempty" sql:"feed_type"`
	FeedType    v1.CurrencyFeedType `protobuf:"varint,120,opt,name=FeedType,proto3,enum=basetypes.v1.CurrencyFeedType" json:"FeedType,omitempty"`
}

func (x *Currency) Reset() {
	*x = Currency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Currency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Currency) ProtoMessage() {}

func (x *Currency) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Currency.ProtoReflect.Descriptor instead.
func (*Currency) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_currency_currency_proto_rawDescGZIP(), []int{1}
}

func (x *Currency) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Currency) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

func (x *Currency) GetCoinName() string {
	if x != nil {
		return x.CoinName
	}
	return ""
}

func (x *Currency) GetCoinLogo() string {
	if x != nil {
		return x.CoinLogo
	}
	return ""
}

func (x *Currency) GetCoinUnit() string {
	if x != nil {
		return x.CoinUnit
	}
	return ""
}

func (x *Currency) GetCoinENV() string {
	if x != nil {
		return x.CoinENV
	}
	return ""
}

func (x *Currency) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Currency) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Currency) GetMarketValueHigh() string {
	if x != nil {
		return x.MarketValueHigh
	}
	return ""
}

func (x *Currency) GetMarketValueLow() string {
	if x != nil {
		return x.MarketValueLow
	}
	return ""
}

func (x *Currency) GetFeedTypeStr() string {
	if x != nil {
		return x.FeedTypeStr
	}
	return ""
}

func (x *Currency) GetFeedType() v1.CurrencyFeedType {
	if x != nil {
		return x.FeedType
	}
	return v1.CurrencyFeedType(0)
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

<<<<<<< HEAD
	ID          *v1.StringVal      `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	CoinTypeID  *v1.StringVal      `protobuf:"bytes,20,opt,name=CoinTypeID,proto3,oneof" json:"CoinTypeID,omitempty"`
	FeedType    *v1.Uint32Val      `protobuf:"bytes,30,opt,name=FeedType,proto3,oneof" json:"FeedType,omitempty"`
	CoinTypeIDs *v1.StringSliceVal `protobuf:"bytes,40,opt,name=CoinTypeIDs,proto3,oneof" json:"CoinTypeIDs,omitempty"`
=======
	ID         *v1.StringVal `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	CoinTypeID *v1.StringVal `protobuf:"bytes,20,opt,name=CoinTypeID,proto3,oneof" json:"CoinTypeID,omitempty"`
	FeedType   *v1.Uint32Val `protobuf:"bytes,30,opt,name=FeedType,proto3,oneof" json:"FeedType,omitempty"`
>>>>>>> Add currency history
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_currency_currency_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *v1.StringVal {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetCoinTypeID() *v1.StringVal {
	if x != nil {
		return x.CoinTypeID
	}
	return nil
}

func (x *Conds) GetFeedType() *v1.Uint32Val {
	if x != nil {
		return x.FeedType
	}
	return nil
}

<<<<<<< HEAD
<<<<<<< HEAD
func (x *Conds) GetCoinTypeIDs() *v1.StringSliceVal {
=======
type CreateCurrencyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CurrencyReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateCurrencyRequest) Reset() {
	*x = CreateCurrencyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCurrencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCurrencyRequest) ProtoMessage() {}

func (x *CreateCurrencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCurrencyRequest.ProtoReflect.Descriptor instead.
func (*CreateCurrencyRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_currency_currency_proto_rawDescGZIP(), []int{3}
}

func (x *CreateCurrencyRequest) GetInfo() *CurrencyReq {
>>>>>>> Add currency history
	if x != nil {
		return x.CoinTypeIDs
	}
	return nil
}

type GetCurrencyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetCurrencyRequest) Reset() {
	*x = GetCurrencyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrencyRequest) ProtoMessage() {}

<<<<<<< HEAD
func (x *GetCurrencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[3]
=======
func (x *CreateCurrencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[4]
>>>>>>> Add currency history
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

<<<<<<< HEAD
// Deprecated: Use GetCurrencyRequest.ProtoReflect.Descriptor instead.
func (*GetCurrencyRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_currency_currency_proto_rawDescGZIP(), []int{3}
=======
// Deprecated: Use CreateCurrencyResponse.ProtoReflect.Descriptor instead.
func (*CreateCurrencyResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_currency_currency_proto_rawDescGZIP(), []int{4}
>>>>>>> Add currency history
}

func (x *GetCurrencyRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

<<<<<<< HEAD
type GetCurrencyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Currency `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetCurrencyResponse) Reset() {
	*x = GetCurrencyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrencyResponse) ProtoMessage() {}

func (x *GetCurrencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrencyResponse.ProtoReflect.Descriptor instead.
func (*GetCurrencyResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_currency_currency_proto_rawDescGZIP(), []int{4}
}

func (x *GetCurrencyResponse) GetInfo() *Currency {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetCurrenciesRequest struct {
=======
type UpdateCurrencyRequest struct {
>>>>>>> Add currency history
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

<<<<<<< HEAD
	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetCurrenciesRequest) Reset() {
	*x = GetCurrenciesRequest{}
=======
	Info *CurrencyReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateCurrencyRequest) Reset() {
	*x = UpdateCurrencyRequest{}
>>>>>>> Add currency history
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

<<<<<<< HEAD
func (x *GetCurrenciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrenciesRequest) ProtoMessage() {}

func (x *GetCurrenciesRequest) ProtoReflect() protoreflect.Message {
=======
func (x *UpdateCurrencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCurrencyRequest) ProtoMessage() {}

func (x *UpdateCurrencyRequest) ProtoReflect() protoreflect.Message {
>>>>>>> Add currency history
	mi := &file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

<<<<<<< HEAD
// Deprecated: Use GetCurrenciesRequest.ProtoReflect.Descriptor instead.
func (*GetCurrenciesRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_currency_currency_proto_rawDescGZIP(), []int{5}
}

func (x *GetCurrenciesRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
=======
// Deprecated: Use UpdateCurrencyRequest.ProtoReflect.Descriptor instead.
func (*UpdateCurrencyRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_currency_currency_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateCurrencyRequest) GetInfo() *CurrencyReq {
	if x != nil {
		return x.Info
>>>>>>> Add currency history
	}
	return nil
}

<<<<<<< HEAD
func (x *GetCurrenciesRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
=======
type UpdateCurrencyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Currency `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateCurrencyResponse) Reset() {
	*x = UpdateCurrencyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
>>>>>>> Add currency history
	}
	return 0
}

<<<<<<< HEAD
func (x *GetCurrenciesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetCurrenciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Currency `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32      `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetCurrenciesResponse) Reset() {
	*x = GetCurrenciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrenciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrenciesResponse) ProtoMessage() {}

func (x *GetCurrenciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrenciesResponse.ProtoReflect.Descriptor instead.
func (*GetCurrenciesResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_currency_currency_proto_rawDescGZIP(), []int{6}
=======
func (x *UpdateCurrencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCurrencyResponse) ProtoMessage() {}

func (x *UpdateCurrencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCurrencyResponse.ProtoReflect.Descriptor instead.
func (*UpdateCurrencyResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_currency_currency_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateCurrencyResponse) GetInfo() *Currency {
	if x != nil {
		return x.Info
	}
	return nil
>>>>>>> Add currency history
}

func (x *GetCurrenciesResponse) GetInfos() []*Currency {
	if x != nil {
		return x.Infos
	}
	return nil
}

<<<<<<< HEAD
func (x *GetCurrenciesResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
=======
func (x *GetCurrencyRequest) Reset() {
	*x = GetCurrencyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
>>>>>>> Add currency history
	}
	return 0
}

var File_npool_chain_mw_v1_coin_currency_currency_proto protoreflect.FileDescriptor

var file_npool_chain_mw_v1_coin_currency_currency_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x77,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x21, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x66, 0x65, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xae,
	0x02, 0x0a, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x12, 0x13,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44,
	0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x08, 0x46, 0x65, 0x65, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x46, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x48, 0x02, 0x52, 0x08, 0x46, 0x65,
	0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x69, 0x67, 0x68, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x0f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x69, 0x67, 0x68, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x6f, 0x77, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x04, 0x52, 0x0e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c,
	0x6f, 0x77, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x46, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x69, 0x67, 0x68, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x6f, 0x77, 0x22,
	0x94, 0x03, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e,
	0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e,
	0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x6e, 0x69, 0x74,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x6e, 0x69, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x69, 0x6e, 0x45, 0x4e, 0x56, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x43, 0x6f, 0x69, 0x6e, 0x45, 0x4e, 0x56, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x69, 0x67, 0x68, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x69, 0x67, 0x68,
	0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c,
	0x6f, 0x77, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x6f, 0x77, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x65, 0x65, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46,
	0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x12, 0x3a, 0x0a, 0x08, 0x46, 0x65,
	0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x46, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x46, 0x65,
	0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0xa5, 0x02, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x2c, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x3c,
	0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x0a, 0x43,
	0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x08,
	0x46, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x02, 0x52, 0x08, 0x46, 0x65, 0x65, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0b, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x44, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x0b, 0x43, 0x6f, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x49, 0x44, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x73, 0x22, 0x24,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x44, 0x22, 0x56, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x84, 0x01, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05,
	0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x22, 0x70, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x05,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x32, 0x93, 0x02, 0x0a, 0x0a, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x12, 0x7e, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x35, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x84, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x37, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x38, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x42, 0x5a, 0x40, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f,
	0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x77, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_chain_mw_v1_coin_currency_currency_proto_rawDescOnce sync.Once
	file_npool_chain_mw_v1_coin_currency_currency_proto_rawDescData = file_npool_chain_mw_v1_coin_currency_currency_proto_rawDesc
)

<<<<<<< HEAD
func file_npool_chain_mw_v1_coin_currency_currency_proto_rawDescGZIP() []byte {
	file_npool_chain_mw_v1_coin_currency_currency_proto_rawDescOnce.Do(func() {
		file_npool_chain_mw_v1_coin_currency_currency_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_chain_mw_v1_coin_currency_currency_proto_rawDescData)
	})
	return file_npool_chain_mw_v1_coin_currency_currency_proto_rawDescData
}

var file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_npool_chain_mw_v1_coin_currency_currency_proto_goTypes = []interface{}{
	(*CurrencyReq)(nil),           // 0: chain.middleware.coin.currency.v1.CurrencyReq
	(*Currency)(nil),              // 1: chain.middleware.coin.currency.v1.Currency
	(*Conds)(nil),                 // 2: chain.middleware.coin.currency.v1.Conds
	(*GetCurrencyRequest)(nil),    // 3: chain.middleware.coin.currency.v1.GetCurrencyRequest
	(*GetCurrencyResponse)(nil),   // 4: chain.middleware.coin.currency.v1.GetCurrencyResponse
	(*GetCurrenciesRequest)(nil),  // 5: chain.middleware.coin.currency.v1.GetCurrenciesRequest
	(*GetCurrenciesResponse)(nil), // 6: chain.middleware.coin.currency.v1.GetCurrenciesResponse
	(v1.CurrencyFeedType)(0),      // 7: basetypes.v1.CurrencyFeedType
	(*v1.StringVal)(nil),          // 8: basetypes.v1.StringVal
	(*v1.Uint32Val)(nil),          // 9: basetypes.v1.Uint32Val
	(*v1.StringSliceVal)(nil),     // 10: basetypes.v1.StringSliceVal
}
var file_npool_chain_mw_v1_coin_currency_currency_proto_depIdxs = []int32{
	7,  // 0: chain.middleware.coin.currency.v1.CurrencyReq.FeedType:type_name -> basetypes.v1.CurrencyFeedType
	7,  // 1: chain.middleware.coin.currency.v1.Currency.FeedType:type_name -> basetypes.v1.CurrencyFeedType
	8,  // 2: chain.middleware.coin.currency.v1.Conds.ID:type_name -> basetypes.v1.StringVal
	8,  // 3: chain.middleware.coin.currency.v1.Conds.CoinTypeID:type_name -> basetypes.v1.StringVal
	9,  // 4: chain.middleware.coin.currency.v1.Conds.FeedType:type_name -> basetypes.v1.Uint32Val
	10, // 5: chain.middleware.coin.currency.v1.Conds.CoinTypeIDs:type_name -> basetypes.v1.StringSliceVal
	1,  // 6: chain.middleware.coin.currency.v1.GetCurrencyResponse.Info:type_name -> chain.middleware.coin.currency.v1.Currency
	2,  // 7: chain.middleware.coin.currency.v1.GetCurrenciesRequest.Conds:type_name -> chain.middleware.coin.currency.v1.Conds
	1,  // 8: chain.middleware.coin.currency.v1.GetCurrenciesResponse.Infos:type_name -> chain.middleware.coin.currency.v1.Currency
	3,  // 9: chain.middleware.coin.currency.v1.Middleware.GetCurrency:input_type -> chain.middleware.coin.currency.v1.GetCurrencyRequest
	5,  // 10: chain.middleware.coin.currency.v1.Middleware.GetCurrencies:input_type -> chain.middleware.coin.currency.v1.GetCurrenciesRequest
	4,  // 11: chain.middleware.coin.currency.v1.Middleware.GetCurrency:output_type -> chain.middleware.coin.currency.v1.GetCurrencyResponse
	6,  // 12: chain.middleware.coin.currency.v1.Middleware.GetCurrencies:output_type -> chain.middleware.coin.currency.v1.GetCurrenciesResponse
	11, // [11:13] is the sub-list for method output_type
	9,  // [9:11] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
=======
func (x *GetCurrencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrencyRequest.ProtoReflect.Descriptor instead.
func (*GetCurrencyRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_currency_currency_proto_rawDescGZIP(), []int{7}
}

func (x *GetCurrencyRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetCurrencyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Currency `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetCurrencyResponse) Reset() {
	*x = GetCurrencyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrencyResponse) ProtoMessage() {}

func (x *GetCurrencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrencyResponse.ProtoReflect.Descriptor instead.
func (*GetCurrencyResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_currency_currency_proto_rawDescGZIP(), []int{8}
}

func (x *GetCurrencyResponse) GetInfo() *Currency {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetCurrenciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetCurrenciesRequest) Reset() {
	*x = GetCurrenciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrenciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrenciesRequest) ProtoMessage() {}

func (x *GetCurrenciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrenciesRequest.ProtoReflect.Descriptor instead.
func (*GetCurrenciesRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_currency_currency_proto_rawDescGZIP(), []int{9}
}

func (x *GetCurrenciesRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetCurrenciesRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetCurrenciesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetCurrenciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Currency `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32      `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetCurrenciesResponse) Reset() {
	*x = GetCurrenciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrenciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrenciesResponse) ProtoMessage() {}

func (x *GetCurrenciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrenciesResponse.ProtoReflect.Descriptor instead.
func (*GetCurrenciesResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_currency_currency_proto_rawDescGZIP(), []int{10}
}

func (x *GetCurrenciesResponse) GetInfos() []*Currency {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetCurrenciesResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetCurrencyOnlyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *GetCurrencyOnlyRequest) Reset() {
	*x = GetCurrencyOnlyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrencyOnlyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrencyOnlyRequest) ProtoMessage() {}

func (x *GetCurrencyOnlyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrencyOnlyRequest.ProtoReflect.Descriptor instead.
func (*GetCurrencyOnlyRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_currency_currency_proto_rawDescGZIP(), []int{11}
}

func (x *GetCurrencyOnlyRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type GetCurrencyOnlyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Currency `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetCurrencyOnlyResponse) Reset() {
	*x = GetCurrencyOnlyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrencyOnlyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrencyOnlyResponse) ProtoMessage() {}

func (x *GetCurrencyOnlyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrencyOnlyResponse.ProtoReflect.Descriptor instead.
func (*GetCurrencyOnlyResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_currency_currency_proto_rawDescGZIP(), []int{12}
}

func (x *GetCurrencyOnlyResponse) GetInfo() *Currency {
	if x != nil {
		return x.Info
	}
	return nil
}

type ExistCurrencyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ExistCurrencyRequest) Reset() {
	*x = ExistCurrencyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistCurrencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistCurrencyRequest) ProtoMessage() {}

func (x *ExistCurrencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistCurrencyRequest.ProtoReflect.Descriptor instead.
func (*ExistCurrencyRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_currency_currency_proto_rawDescGZIP(), []int{13}
}

func (x *ExistCurrencyRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ExistCurrencyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistCurrencyResponse) Reset() {
	*x = ExistCurrencyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistCurrencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistCurrencyResponse) ProtoMessage() {}

func (x *ExistCurrencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistCurrencyResponse.ProtoReflect.Descriptor instead.
func (*ExistCurrencyResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_currency_currency_proto_rawDescGZIP(), []int{14}
}

func (x *ExistCurrencyResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type ExistCurrencyCondsRequest struct {
=======
type GetCurrencyRequest struct {
>>>>>>> Remove unused currency apis
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetCurrencyRequest) Reset() {
	*x = GetCurrencyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrencyRequest) ProtoMessage() {}

func (x *GetCurrencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrencyRequest.ProtoReflect.Descriptor instead.
func (*GetCurrencyRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_currency_currency_proto_rawDescGZIP(), []int{3}
}

func (x *GetCurrencyRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetCurrencyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Currency `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetCurrencyResponse) Reset() {
	*x = GetCurrencyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrencyResponse) ProtoMessage() {}

func (x *GetCurrencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrencyResponse.ProtoReflect.Descriptor instead.
func (*GetCurrencyResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_currency_currency_proto_rawDescGZIP(), []int{4}
}

func (x *GetCurrencyResponse) GetInfo() *Currency {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetCurrenciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetCurrenciesRequest) Reset() {
	*x = GetCurrenciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrenciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrenciesRequest) ProtoMessage() {}

func (x *GetCurrenciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrenciesRequest.ProtoReflect.Descriptor instead.
func (*GetCurrenciesRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_currency_currency_proto_rawDescGZIP(), []int{5}
}

func (x *GetCurrenciesRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetCurrenciesRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetCurrenciesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetCurrenciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Currency `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32      `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetCurrenciesResponse) Reset() {
	*x = GetCurrenciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrenciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrenciesResponse) ProtoMessage() {}

func (x *GetCurrenciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrenciesResponse.ProtoReflect.Descriptor instead.
func (*GetCurrenciesResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_coin_currency_currency_proto_rawDescGZIP(), []int{6}
}

func (x *GetCurrenciesResponse) GetInfos() []*Currency {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetCurrenciesResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

var File_npool_chain_mw_v1_coin_currency_currency_proto protoreflect.FileDescriptor

var file_npool_chain_mw_v1_coin_currency_currency_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x77,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x21, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x66, 0x65, 0x65, 0x64, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xae,
	0x02, 0x0a, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x12, 0x13,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44,
	0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x08, 0x46, 0x65, 0x65, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x46, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x48, 0x02, 0x52, 0x08, 0x46, 0x65,
	0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x69, 0x67, 0x68, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x0f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x69, 0x67, 0x68, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x6f, 0x77, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x04, 0x52, 0x0e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c,
	0x6f, 0x77, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x46, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x69, 0x67, 0x68, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x6f, 0x77, 0x22,
	0x94, 0x03, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e,
	0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e,
	0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x6e, 0x69, 0x74,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x6e, 0x69, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x69, 0x6e, 0x45, 0x4e, 0x56, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x43, 0x6f, 0x69, 0x6e, 0x45, 0x4e, 0x56, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x69, 0x67, 0x68, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x69, 0x67, 0x68,
	0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c,
	0x6f, 0x77, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x6f, 0x77, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x65, 0x65, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46,
	0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x12, 0x3a, 0x0a, 0x08, 0x46, 0x65,
	0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x46, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x46, 0x65,
	0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0xd0, 0x01, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x2c, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x3c,
	0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x0a, 0x43,
	0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x08,
	0x46, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x02, 0x52, 0x08, 0x46, 0x65, 0x65, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x46, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0x24, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22,
	0x56, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x84, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3e, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x70,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x32, 0x93, 0x02, 0x0a, 0x0a, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x61, 0x77, 0x72, 0x65, 0x12,
	0x7e, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x35,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x84, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x12, 0x37, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x42, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c,
	0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x69,
	0x6e, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_npool_chain_mw_v1_coin_currency_currency_proto_rawDescOnce sync.Once
	file_npool_chain_mw_v1_coin_currency_currency_proto_rawDescData = file_npool_chain_mw_v1_coin_currency_currency_proto_rawDesc
)

func file_npool_chain_mw_v1_coin_currency_currency_proto_rawDescGZIP() []byte {
	file_npool_chain_mw_v1_coin_currency_currency_proto_rawDescOnce.Do(func() {
		file_npool_chain_mw_v1_coin_currency_currency_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_chain_mw_v1_coin_currency_currency_proto_rawDescData)
	})
	return file_npool_chain_mw_v1_coin_currency_currency_proto_rawDescData
}

var file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_npool_chain_mw_v1_coin_currency_currency_proto_goTypes = []interface{}{
	(*CurrencyReq)(nil),           // 0: chain.middleware.coin.currency.v1.CurrencyReq
	(*Currency)(nil),              // 1: chain.middleware.coin.currency.v1.Currency
	(*Conds)(nil),                 // 2: chain.middleware.coin.currency.v1.Conds
	(*GetCurrencyRequest)(nil),    // 3: chain.middleware.coin.currency.v1.GetCurrencyRequest
	(*GetCurrencyResponse)(nil),   // 4: chain.middleware.coin.currency.v1.GetCurrencyResponse
	(*GetCurrenciesRequest)(nil),  // 5: chain.middleware.coin.currency.v1.GetCurrenciesRequest
	(*GetCurrenciesResponse)(nil), // 6: chain.middleware.coin.currency.v1.GetCurrenciesResponse
	(v1.CurrencyFeedType)(0),      // 7: basetypes.v1.CurrencyFeedType
	(*v1.StringVal)(nil),          // 8: basetypes.v1.StringVal
	(*v1.Uint32Val)(nil),          // 9: basetypes.v1.Uint32Val
}
var file_npool_chain_mw_v1_coin_currency_currency_proto_depIdxs = []int32{
<<<<<<< HEAD
<<<<<<< HEAD
	21, // 0: chain.middleware.coin.currency.v1.CurrencyReq.FeedType:type_name -> basetypes.v1.CurrencyFeedType
	21, // 1: chain.middleware.coin.currency.v1.Currency.FeedType:type_name -> basetypes.v1.CurrencyFeedType
	22, // 2: chain.middleware.coin.currency.v1.Conds.ID:type_name -> basetypes.v1.StringVal
	22, // 3: chain.middleware.coin.currency.v1.Conds.CoinTypeID:type_name -> basetypes.v1.StringVal
	23, // 4: chain.middleware.coin.currency.v1.Conds.FeedType:type_name -> basetypes.v1.Uint32Val
	0,  // 5: chain.middleware.coin.currency.v1.CreateCurrencyRequest.Info:type_name -> chain.middleware.coin.currency.v1.CurrencyReq
	1,  // 6: chain.middleware.coin.currency.v1.CreateCurrencyResponse.Info:type_name -> chain.middleware.coin.currency.v1.Currency
	0,  // 7: chain.middleware.coin.currency.v1.UpdateCurrencyRequest.Info:type_name -> chain.middleware.coin.currency.v1.CurrencyReq
	1,  // 8: chain.middleware.coin.currency.v1.UpdateCurrencyResponse.Info:type_name -> chain.middleware.coin.currency.v1.Currency
	1,  // 9: chain.middleware.coin.currency.v1.GetCurrencyResponse.Info:type_name -> chain.middleware.coin.currency.v1.Currency
	2,  // 10: chain.middleware.coin.currency.v1.GetCurrenciesRequest.Conds:type_name -> chain.middleware.coin.currency.v1.Conds
	1,  // 11: chain.middleware.coin.currency.v1.GetCurrenciesResponse.Infos:type_name -> chain.middleware.coin.currency.v1.Currency
	2,  // 12: chain.middleware.coin.currency.v1.GetCurrencyOnlyRequest.Conds:type_name -> chain.middleware.coin.currency.v1.Conds
	1,  // 13: chain.middleware.coin.currency.v1.GetCurrencyOnlyResponse.Info:type_name -> chain.middleware.coin.currency.v1.Currency
<<<<<<< HEAD
	1,  // 14: chain.middleware.coin.currency.v1.GetCoinCurrencyResponse.Info:type_name -> chain.middleware.coin.currency.v1.Currency
	2,  // 15: chain.middleware.coin.currency.v1.ExistCurrencyCondsRequest.Conds:type_name -> chain.middleware.coin.currency.v1.Conds
	2,  // 16: chain.middleware.coin.currency.v1.CountCurrenciesRequest.Conds:type_name -> chain.middleware.coin.currency.v1.Conds
	0,  // 17: chain.middleware.coin.currency.v1.DeleteCurrencyRequest.Info:type_name -> chain.middleware.coin.currency.v1.CurrencyReq
	1,  // 18: chain.middleware.coin.currency.v1.DeleteCurrencyResponse.Info:type_name -> chain.middleware.coin.currency.v1.Currency
	3,  // 19: chain.middleware.coin.currency.v1.Manager.CreateCurrency:input_type -> chain.middleware.coin.currency.v1.CreateCurrencyRequest
	5,  // 20: chain.middleware.coin.currency.v1.Manager.UpdateCurrency:input_type -> chain.middleware.coin.currency.v1.UpdateCurrencyRequest
	7,  // 21: chain.middleware.coin.currency.v1.Manager.GetCurrency:input_type -> chain.middleware.coin.currency.v1.GetCurrencyRequest
	11, // 22: chain.middleware.coin.currency.v1.Manager.GetCurrencyOnly:input_type -> chain.middleware.coin.currency.v1.GetCurrencyOnlyRequest
	13, // 23: chain.middleware.coin.currency.v1.Manager.GetCoinCurrency:input_type -> chain.middleware.coin.currency.v1.GetCoinCurrencyRequest
	9,  // 24: chain.middleware.coin.currency.v1.Manager.GetCurrencies:input_type -> chain.middleware.coin.currency.v1.GetCurrenciesRequest
	15, // 25: chain.middleware.coin.currency.v1.Manager.ExistCurrency:input_type -> chain.middleware.coin.currency.v1.ExistCurrencyRequest
	17, // 26: chain.middleware.coin.currency.v1.Manager.ExistCurrencyConds:input_type -> chain.middleware.coin.currency.v1.ExistCurrencyCondsRequest
	19, // 27: chain.middleware.coin.currency.v1.Manager.CountCurrencies:input_type -> chain.middleware.coin.currency.v1.CountCurrenciesRequest
	21, // 28: chain.middleware.coin.currency.v1.Manager.RefreshCurrencies:input_type -> chain.middleware.coin.currency.v1.RefreshCurrenciesRequest
	23, // 29: chain.middleware.coin.currency.v1.Manager.DeleteCurrency:input_type -> chain.middleware.coin.currency.v1.DeleteCurrencyRequest
	4,  // 30: chain.middleware.coin.currency.v1.Manager.CreateCurrency:output_type -> chain.middleware.coin.currency.v1.CreateCurrencyResponse
	6,  // 31: chain.middleware.coin.currency.v1.Manager.UpdateCurrency:output_type -> chain.middleware.coin.currency.v1.UpdateCurrencyResponse
	8,  // 32: chain.middleware.coin.currency.v1.Manager.GetCurrency:output_type -> chain.middleware.coin.currency.v1.GetCurrencyResponse
	12, // 33: chain.middleware.coin.currency.v1.Manager.GetCurrencyOnly:output_type -> chain.middleware.coin.currency.v1.GetCurrencyOnlyResponse
	14, // 34: chain.middleware.coin.currency.v1.Manager.GetCoinCurrency:output_type -> chain.middleware.coin.currency.v1.GetCoinCurrencyResponse
	10, // 35: chain.middleware.coin.currency.v1.Manager.GetCurrencies:output_type -> chain.middleware.coin.currency.v1.GetCurrenciesResponse
	16, // 36: chain.middleware.coin.currency.v1.Manager.ExistCurrency:output_type -> chain.middleware.coin.currency.v1.ExistCurrencyResponse
	18, // 37: chain.middleware.coin.currency.v1.Manager.ExistCurrencyConds:output_type -> chain.middleware.coin.currency.v1.ExistCurrencyCondsResponse
	20, // 38: chain.middleware.coin.currency.v1.Manager.CountCurrencies:output_type -> chain.middleware.coin.currency.v1.CountCurrenciesResponse
	22, // 39: chain.middleware.coin.currency.v1.Manager.RefreshCurrencies:output_type -> chain.middleware.coin.currency.v1.RefreshCurrenciesResponse
	24, // 40: chain.middleware.coin.currency.v1.Manager.DeleteCurrency:output_type -> chain.middleware.coin.currency.v1.DeleteCurrencyResponse
	30, // [30:41] is the sub-list for method output_type
	19, // [19:30] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
>>>>>>> Add currency history
=======
	2,  // 14: chain.middleware.coin.currency.v1.ExistCurrencyCondsRequest.Conds:type_name -> chain.middleware.coin.currency.v1.Conds
	2,  // 15: chain.middleware.coin.currency.v1.CountCurrenciesRequest.Conds:type_name -> chain.middleware.coin.currency.v1.Conds
	0,  // 16: chain.middleware.coin.currency.v1.DeleteCurrencyRequest.Info:type_name -> chain.middleware.coin.currency.v1.CurrencyReq
	1,  // 17: chain.middleware.coin.currency.v1.DeleteCurrencyResponse.Info:type_name -> chain.middleware.coin.currency.v1.Currency
	3,  // 18: chain.middleware.coin.currency.v1.Manager.CreateCurrency:input_type -> chain.middleware.coin.currency.v1.CreateCurrencyRequest
	5,  // 19: chain.middleware.coin.currency.v1.Manager.UpdateCurrency:input_type -> chain.middleware.coin.currency.v1.UpdateCurrencyRequest
	7,  // 20: chain.middleware.coin.currency.v1.Manager.GetCurrency:input_type -> chain.middleware.coin.currency.v1.GetCurrencyRequest
	11, // 21: chain.middleware.coin.currency.v1.Manager.GetCurrencyOnly:input_type -> chain.middleware.coin.currency.v1.GetCurrencyOnlyRequest
	9,  // 22: chain.middleware.coin.currency.v1.Manager.GetCurrencies:input_type -> chain.middleware.coin.currency.v1.GetCurrenciesRequest
	13, // 23: chain.middleware.coin.currency.v1.Manager.ExistCurrency:input_type -> chain.middleware.coin.currency.v1.ExistCurrencyRequest
	15, // 24: chain.middleware.coin.currency.v1.Manager.ExistCurrencyConds:input_type -> chain.middleware.coin.currency.v1.ExistCurrencyCondsRequest
	17, // 25: chain.middleware.coin.currency.v1.Manager.CountCurrencies:input_type -> chain.middleware.coin.currency.v1.CountCurrenciesRequest
	19, // 26: chain.middleware.coin.currency.v1.Manager.DeleteCurrency:input_type -> chain.middleware.coin.currency.v1.DeleteCurrencyRequest
	4,  // 27: chain.middleware.coin.currency.v1.Manager.CreateCurrency:output_type -> chain.middleware.coin.currency.v1.CreateCurrencyResponse
	6,  // 28: chain.middleware.coin.currency.v1.Manager.UpdateCurrency:output_type -> chain.middleware.coin.currency.v1.UpdateCurrencyResponse
	8,  // 29: chain.middleware.coin.currency.v1.Manager.GetCurrency:output_type -> chain.middleware.coin.currency.v1.GetCurrencyResponse
	12, // 30: chain.middleware.coin.currency.v1.Manager.GetCurrencyOnly:output_type -> chain.middleware.coin.currency.v1.GetCurrencyOnlyResponse
	10, // 31: chain.middleware.coin.currency.v1.Manager.GetCurrencies:output_type -> chain.middleware.coin.currency.v1.GetCurrenciesResponse
	14, // 32: chain.middleware.coin.currency.v1.Manager.ExistCurrency:output_type -> chain.middleware.coin.currency.v1.ExistCurrencyResponse
	16, // 33: chain.middleware.coin.currency.v1.Manager.ExistCurrencyConds:output_type -> chain.middleware.coin.currency.v1.ExistCurrencyCondsResponse
	18, // 34: chain.middleware.coin.currency.v1.Manager.CountCurrencies:output_type -> chain.middleware.coin.currency.v1.CountCurrenciesResponse
	20, // 35: chain.middleware.coin.currency.v1.Manager.DeleteCurrency:output_type -> chain.middleware.coin.currency.v1.DeleteCurrencyResponse
	27, // [27:36] is the sub-list for method output_type
	18, // [18:27] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
>>>>>>> Remove unused api
=======
	9,  // 0: chain.middleware.coin.currency.v1.CurrencyReq.FeedType:type_name -> basetypes.v1.CurrencyFeedType
	9,  // 1: chain.middleware.coin.currency.v1.Currency.FeedType:type_name -> basetypes.v1.CurrencyFeedType
	10, // 2: chain.middleware.coin.currency.v1.Conds.ID:type_name -> basetypes.v1.StringVal
	10, // 3: chain.middleware.coin.currency.v1.Conds.CoinTypeID:type_name -> basetypes.v1.StringVal
	11, // 4: chain.middleware.coin.currency.v1.Conds.FeedType:type_name -> basetypes.v1.Uint32Val
	1,  // 5: chain.middleware.coin.currency.v1.GetCurrencyResponse.Info:type_name -> chain.middleware.coin.currency.v1.Currency
	2,  // 6: chain.middleware.coin.currency.v1.GetCurrenciesRequest.Conds:type_name -> chain.middleware.coin.currency.v1.Conds
	1,  // 7: chain.middleware.coin.currency.v1.GetCurrenciesResponse.Infos:type_name -> chain.middleware.coin.currency.v1.Currency
	2,  // 8: chain.middleware.coin.currency.v1.GetCurrencyOnlyRequest.Conds:type_name -> chain.middleware.coin.currency.v1.Conds
	1,  // 9: chain.middleware.coin.currency.v1.GetCurrencyOnlyResponse.Info:type_name -> chain.middleware.coin.currency.v1.Currency
	3,  // 10: chain.middleware.coin.currency.v1.Middleawre.GetCurrency:input_type -> chain.middleware.coin.currency.v1.GetCurrencyRequest
	7,  // 11: chain.middleware.coin.currency.v1.Middleawre.GetCurrencyOnly:input_type -> chain.middleware.coin.currency.v1.GetCurrencyOnlyRequest
	5,  // 12: chain.middleware.coin.currency.v1.Middleawre.GetCurrencies:input_type -> chain.middleware.coin.currency.v1.GetCurrenciesRequest
	4,  // 13: chain.middleware.coin.currency.v1.Middleawre.GetCurrency:output_type -> chain.middleware.coin.currency.v1.GetCurrencyResponse
	8,  // 14: chain.middleware.coin.currency.v1.Middleawre.GetCurrencyOnly:output_type -> chain.middleware.coin.currency.v1.GetCurrencyOnlyResponse
	6,  // 15: chain.middleware.coin.currency.v1.Middleawre.GetCurrencies:output_type -> chain.middleware.coin.currency.v1.GetCurrenciesResponse
	13, // [13:16] is the sub-list for method output_type
	10, // [10:13] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
>>>>>>> Remove unused currency apis
=======
	7,  // 0: chain.middleware.coin.currency.v1.CurrencyReq.FeedType:type_name -> basetypes.v1.CurrencyFeedType
	7,  // 1: chain.middleware.coin.currency.v1.Currency.FeedType:type_name -> basetypes.v1.CurrencyFeedType
	8,  // 2: chain.middleware.coin.currency.v1.Conds.ID:type_name -> basetypes.v1.StringVal
	8,  // 3: chain.middleware.coin.currency.v1.Conds.CoinTypeID:type_name -> basetypes.v1.StringVal
	9,  // 4: chain.middleware.coin.currency.v1.Conds.FeedType:type_name -> basetypes.v1.Uint32Val
	1,  // 5: chain.middleware.coin.currency.v1.GetCurrencyResponse.Info:type_name -> chain.middleware.coin.currency.v1.Currency
	2,  // 6: chain.middleware.coin.currency.v1.GetCurrenciesRequest.Conds:type_name -> chain.middleware.coin.currency.v1.Conds
	1,  // 7: chain.middleware.coin.currency.v1.GetCurrenciesResponse.Infos:type_name -> chain.middleware.coin.currency.v1.Currency
	3,  // 8: chain.middleware.coin.currency.v1.Middleawre.GetCurrency:input_type -> chain.middleware.coin.currency.v1.GetCurrencyRequest
	5,  // 9: chain.middleware.coin.currency.v1.Middleawre.GetCurrencies:input_type -> chain.middleware.coin.currency.v1.GetCurrenciesRequest
	4,  // 10: chain.middleware.coin.currency.v1.Middleawre.GetCurrency:output_type -> chain.middleware.coin.currency.v1.GetCurrencyResponse
	6,  // 11: chain.middleware.coin.currency.v1.Middleawre.GetCurrencies:output_type -> chain.middleware.coin.currency.v1.GetCurrenciesResponse
	10, // [10:12] is the sub-list for method output_type
	8,  // [8:10] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
>>>>>>> Remove only
}

func init() { file_npool_chain_mw_v1_coin_currency_currency_proto_init() }
func file_npool_chain_mw_v1_coin_currency_currency_proto_init() {
	if File_npool_chain_mw_v1_coin_currency_currency_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Currency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
<<<<<<< HEAD
<<<<<<< HEAD
			switch v := v.(*GetCurrencyRequest); i {
=======
			switch v := v.(*CreateCurrencyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCurrencyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCurrencyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCurrencyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
=======
>>>>>>> Remove unused currency apis
			switch v := v.(*GetCurrencyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrencyResponse); i {
>>>>>>> Add currency history
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
<<<<<<< HEAD
<<<<<<< HEAD
		file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrencyResponse); i {
=======
		file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
=======
		file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
>>>>>>> Remove unused currency apis
			switch v := v.(*GetCurrenciesRequest); i {
>>>>>>> Add currency history
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
<<<<<<< HEAD
<<<<<<< HEAD
		file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrenciesRequest); i {
=======
		file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
=======
		file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
>>>>>>> Remove unused currency apis
			switch v := v.(*GetCurrenciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
<<<<<<< HEAD
		file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrencyOnlyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrencyOnlyResponse); i {
>>>>>>> Add currency history
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
<<<<<<< HEAD
<<<<<<< HEAD
		file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrenciesResponse); i {
=======
		file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
<<<<<<< HEAD
			switch v := v.(*GetCoinCurrencyRequest); i {
>>>>>>> Add currency history
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
<<<<<<< HEAD
=======
		file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinCurrencyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
=======
>>>>>>> Remove unused api
			switch v := v.(*ExistCurrencyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistCurrencyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistCurrencyCondsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistCurrencyCondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountCurrenciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountCurrenciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCurrencyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCurrencyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
>>>>>>> Add currency history
=======
>>>>>>> Remove unused currency apis
=======
>>>>>>> Remove only
	}
	file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_chain_mw_v1_coin_currency_currency_proto_rawDesc,
			NumEnums:      0,
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
			NumMessages:   7,
=======
			NumMessages:   25,
>>>>>>> Add currency history
=======
			NumMessages:   21,
>>>>>>> Remove unused api
=======
			NumMessages:   9,
>>>>>>> Remove unused currency apis
=======
			NumMessages:   7,
>>>>>>> Remove only
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_chain_mw_v1_coin_currency_currency_proto_goTypes,
		DependencyIndexes: file_npool_chain_mw_v1_coin_currency_currency_proto_depIdxs,
		MessageInfos:      file_npool_chain_mw_v1_coin_currency_currency_proto_msgTypes,
	}.Build()
	File_npool_chain_mw_v1_coin_currency_currency_proto = out.File
	file_npool_chain_mw_v1_coin_currency_currency_proto_rawDesc = nil
	file_npool_chain_mw_v1_coin_currency_currency_proto_goTypes = nil
	file_npool_chain_mw_v1_coin_currency_currency_proto_depIdxs = nil
}
