// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/chain/mw/v1/coin/currency/currency.proto

package currency

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Middleawre_GetCurrency_FullMethodName   = "/chain.middleware.coin.currency.v1.Middleawre/GetCurrency"
	Middleawre_GetCurrencies_FullMethodName = "/chain.middleware.coin.currency.v1.Middleawre/GetCurrencies"
)

// MiddleawreClient is the client API for Middleawre service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddleawreClient interface {
	GetCurrency(ctx context.Context, in *GetCurrencyRequest, opts ...grpc.CallOption) (*GetCurrencyResponse, error)
	GetCurrencies(ctx context.Context, in *GetCurrenciesRequest, opts ...grpc.CallOption) (*GetCurrenciesResponse, error)
}

type middleawreClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddleawreClient(cc grpc.ClientConnInterface) MiddleawreClient {
	return &middleawreClient{cc}
}

func (c *middleawreClient) GetCurrency(ctx context.Context, in *GetCurrencyRequest, opts ...grpc.CallOption) (*GetCurrencyResponse, error) {
	out := new(GetCurrencyResponse)
	err := c.cc.Invoke(ctx, Middleawre_GetCurrency_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleawreClient) GetCurrencies(ctx context.Context, in *GetCurrenciesRequest, opts ...grpc.CallOption) (*GetCurrenciesResponse, error) {
	out := new(GetCurrenciesResponse)
	err := c.cc.Invoke(ctx, Middleawre_GetCurrencies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddleawreServer is the server API for Middleawre service.
// All implementations must embed UnimplementedMiddleawreServer
// for forward compatibility
type MiddleawreServer interface {
	GetCurrency(context.Context, *GetCurrencyRequest) (*GetCurrencyResponse, error)
	GetCurrencies(context.Context, *GetCurrenciesRequest) (*GetCurrenciesResponse, error)
	mustEmbedUnimplementedMiddleawreServer()
}

// UnimplementedMiddleawreServer must be embedded to have forward compatible implementations.
type UnimplementedMiddleawreServer struct {
}

func (UnimplementedMiddleawreServer) GetCurrency(context.Context, *GetCurrencyRequest) (*GetCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrency not implemented")
}
func (UnimplementedMiddleawreServer) GetCurrencies(context.Context, *GetCurrenciesRequest) (*GetCurrenciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrencies not implemented")
}
func (UnimplementedMiddleawreServer) mustEmbedUnimplementedMiddleawreServer() {}

// UnsafeMiddleawreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddleawreServer will
// result in compilation errors.
type UnsafeMiddleawreServer interface {
	mustEmbedUnimplementedMiddleawreServer()
}

func RegisterMiddleawreServer(s grpc.ServiceRegistrar, srv MiddleawreServer) {
	s.RegisterService(&Middleawre_ServiceDesc, srv)
}

func _Middleawre_GetCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleawreServer).GetCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleawre_GetCurrency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleawreServer).GetCurrency(ctx, req.(*GetCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleawre_GetCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrenciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleawreServer).GetCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleawre_GetCurrencies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleawreServer).GetCurrencies(ctx, req.(*GetCurrenciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleawre_ServiceDesc is the grpc.ServiceDesc for Middleawre service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleawre_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chain.middleware.coin.currency.v1.Middleawre",
	HandlerType: (*MiddleawreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCurrency",
			Handler:    _Middleawre_GetCurrency_Handler,
		},
		{
			MethodName: "GetCurrencies",
			Handler:    _Middleawre_GetCurrencies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/chain/mw/v1/coin/currency/currency.proto",
}
