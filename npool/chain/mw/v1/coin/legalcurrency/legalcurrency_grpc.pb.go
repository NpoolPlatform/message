// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/chain/mw/v1/coin/legalcurrency/legalcurrency.proto

package legalcurrency

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
	CreateLegalCurrency(ctx context.Context, in *CreateLegalCurrencyRequest, opts ...grpc.CallOption) (*CreateLegalCurrencyResponse, error)
	CreateLegalCurrencies(ctx context.Context, in *CreateLegalCurrenciesRequest, opts ...grpc.CallOption) (*CreateLegalCurrenciesResponse, error)
	RefreshLegalCurrencies(ctx context.Context, in *RefreshLegalCurrenciesRequest, opts ...grpc.CallOption) (*RefreshLegalCurrenciesResponse, error)
	GetLegalCurrency(ctx context.Context, in *GetLegalCurrencyRequest, opts ...grpc.CallOption) (*GetLegalCurrencyResponse, error)
	GetCoinLegalCurrency(ctx context.Context, in *GetCoinLegalCurrencyRequest, opts ...grpc.CallOption) (*GetCoinLegalCurrencyResponse, error)
	GetLegalCurrencies(ctx context.Context, in *GetLegalCurrenciesRequest, opts ...grpc.CallOption) (*GetLegalCurrenciesResponse, error)
	GetHistories(ctx context.Context, in *GetHistoriesRequest, opts ...grpc.CallOption) (*GetHistoriesResponse, error)
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) CreateLegalCurrency(ctx context.Context, in *CreateLegalCurrencyRequest, opts ...grpc.CallOption) (*CreateLegalCurrencyResponse, error) {
	out := new(CreateLegalCurrencyResponse)
	err := c.cc.Invoke(ctx, "/chain.middleware.coin.legalcurrency.v1.Middleware/CreateLegalCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) CreateLegalCurrencies(ctx context.Context, in *CreateLegalCurrenciesRequest, opts ...grpc.CallOption) (*CreateLegalCurrenciesResponse, error) {
	out := new(CreateLegalCurrenciesResponse)
	err := c.cc.Invoke(ctx, "/chain.middleware.coin.legalcurrency.v1.Middleware/CreateLegalCurrencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) RefreshLegalCurrencies(ctx context.Context, in *RefreshLegalCurrenciesRequest, opts ...grpc.CallOption) (*RefreshLegalCurrenciesResponse, error) {
	out := new(RefreshLegalCurrenciesResponse)
	err := c.cc.Invoke(ctx, "/chain.middleware.coin.legalcurrency.v1.Middleware/RefreshLegalCurrencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetLegalCurrency(ctx context.Context, in *GetLegalCurrencyRequest, opts ...grpc.CallOption) (*GetLegalCurrencyResponse, error) {
	out := new(GetLegalCurrencyResponse)
	err := c.cc.Invoke(ctx, "/chain.middleware.coin.legalcurrency.v1.Middleware/GetLegalCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetCoinLegalCurrency(ctx context.Context, in *GetCoinLegalCurrencyRequest, opts ...grpc.CallOption) (*GetCoinLegalCurrencyResponse, error) {
	out := new(GetCoinLegalCurrencyResponse)
	err := c.cc.Invoke(ctx, "/chain.middleware.coin.legalcurrency.v1.Middleware/GetCoinLegalCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetLegalCurrencies(ctx context.Context, in *GetLegalCurrenciesRequest, opts ...grpc.CallOption) (*GetLegalCurrenciesResponse, error) {
	out := new(GetLegalCurrenciesResponse)
	err := c.cc.Invoke(ctx, "/chain.middleware.coin.legalcurrency.v1.Middleware/GetLegalCurrencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetHistories(ctx context.Context, in *GetHistoriesRequest, opts ...grpc.CallOption) (*GetHistoriesResponse, error) {
	out := new(GetHistoriesResponse)
	err := c.cc.Invoke(ctx, "/chain.middleware.coin.legalcurrency.v1.Middleware/GetHistories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
	CreateLegalCurrency(context.Context, *CreateLegalCurrencyRequest) (*CreateLegalCurrencyResponse, error)
	CreateLegalCurrencies(context.Context, *CreateLegalCurrenciesRequest) (*CreateLegalCurrenciesResponse, error)
	RefreshLegalCurrencies(context.Context, *RefreshLegalCurrenciesRequest) (*RefreshLegalCurrenciesResponse, error)
	GetLegalCurrency(context.Context, *GetLegalCurrencyRequest) (*GetLegalCurrencyResponse, error)
	GetCoinLegalCurrency(context.Context, *GetCoinLegalCurrencyRequest) (*GetCoinLegalCurrencyResponse, error)
	GetLegalCurrencies(context.Context, *GetLegalCurrenciesRequest) (*GetLegalCurrenciesResponse, error)
	GetHistories(context.Context, *GetHistoriesRequest) (*GetHistoriesResponse, error)
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) CreateLegalCurrency(context.Context, *CreateLegalCurrencyRequest) (*CreateLegalCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLegalCurrency not implemented")
}
func (UnimplementedMiddlewareServer) CreateLegalCurrencies(context.Context, *CreateLegalCurrenciesRequest) (*CreateLegalCurrenciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLegalCurrencies not implemented")
}
func (UnimplementedMiddlewareServer) RefreshLegalCurrencies(context.Context, *RefreshLegalCurrenciesRequest) (*RefreshLegalCurrenciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshLegalCurrencies not implemented")
}
func (UnimplementedMiddlewareServer) GetLegalCurrency(context.Context, *GetLegalCurrencyRequest) (*GetLegalCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLegalCurrency not implemented")
}
func (UnimplementedMiddlewareServer) GetCoinLegalCurrency(context.Context, *GetCoinLegalCurrencyRequest) (*GetCoinLegalCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinLegalCurrency not implemented")
}
func (UnimplementedMiddlewareServer) GetLegalCurrencies(context.Context, *GetLegalCurrenciesRequest) (*GetLegalCurrenciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLegalCurrencies not implemented")
}
func (UnimplementedMiddlewareServer) GetHistories(context.Context, *GetHistoriesRequest) (*GetHistoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistories not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_CreateLegalCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLegalCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateLegalCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.middleware.coin.legalcurrency.v1.Middleware/CreateLegalCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateLegalCurrency(ctx, req.(*CreateLegalCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_CreateLegalCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLegalCurrenciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateLegalCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.middleware.coin.legalcurrency.v1.Middleware/CreateLegalCurrencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateLegalCurrencies(ctx, req.(*CreateLegalCurrenciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_RefreshLegalCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshLegalCurrenciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).RefreshLegalCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.middleware.coin.legalcurrency.v1.Middleware/RefreshLegalCurrencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).RefreshLegalCurrencies(ctx, req.(*RefreshLegalCurrenciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetLegalCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLegalCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetLegalCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.middleware.coin.legalcurrency.v1.Middleware/GetLegalCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetLegalCurrency(ctx, req.(*GetLegalCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetCoinLegalCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinLegalCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetCoinLegalCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.middleware.coin.legalcurrency.v1.Middleware/GetCoinLegalCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetCoinLegalCurrency(ctx, req.(*GetCoinLegalCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetLegalCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLegalCurrenciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetLegalCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.middleware.coin.legalcurrency.v1.Middleware/GetLegalCurrencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetLegalCurrencies(ctx, req.(*GetLegalCurrenciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetHistories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHistoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetHistories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.middleware.coin.legalcurrency.v1.Middleware/GetHistories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetHistories(ctx, req.(*GetHistoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chain.middleware.coin.legalcurrency.v1.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLegalCurrency",
			Handler:    _Middleware_CreateLegalCurrency_Handler,
		},
		{
			MethodName: "CreateLegalCurrencies",
			Handler:    _Middleware_CreateLegalCurrencies_Handler,
		},
		{
			MethodName: "RefreshLegalCurrencies",
			Handler:    _Middleware_RefreshLegalCurrencies_Handler,
		},
		{
			MethodName: "GetLegalCurrency",
			Handler:    _Middleware_GetLegalCurrency_Handler,
		},
		{
			MethodName: "GetCoinLegalCurrency",
			Handler:    _Middleware_GetCoinLegalCurrency_Handler,
		},
		{
			MethodName: "GetLegalCurrencies",
			Handler:    _Middleware_GetLegalCurrencies_Handler,
		},
		{
			MethodName: "GetHistories",
			Handler:    _Middleware_GetHistories_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/chain/mw/v1/coin/legalcurrency/legalcurrency.proto",
}
