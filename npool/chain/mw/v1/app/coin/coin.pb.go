// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.18.1
// source: npool/chain/mw/v1/app/coin/coin.proto

package coin

import (
	v1 "github.com/NpoolPlatform/message/npool/basetypes/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CoinReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                       *string  `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	AppID                    *string  `protobuf:"bytes,20,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	CoinTypeID               *string  `protobuf:"bytes,30,opt,name=CoinTypeID,proto3,oneof" json:"CoinTypeID,omitempty"`
	Name                     *string  `protobuf:"bytes,40,opt,name=Name,proto3,oneof" json:"Name,omitempty"`
	DisplayNames             []string `protobuf:"bytes,41,rep,name=DisplayNames,proto3" json:"DisplayNames,omitempty"`
	Logo                     *string  `protobuf:"bytes,50,opt,name=Logo,proto3,oneof" json:"Logo,omitempty"`
	ForPay                   *bool    `protobuf:"varint,60,opt,name=ForPay,proto3,oneof" json:"ForPay,omitempty"`
	WithdrawAutoReviewAmount *string  `protobuf:"bytes,70,opt,name=WithdrawAutoReviewAmount,proto3,oneof" json:"WithdrawAutoReviewAmount,omitempty"`
	MarketValue              *string  `protobuf:"bytes,80,opt,name=MarketValue,proto3,oneof" json:"MarketValue,omitempty"`
	SettlePercent            *uint32  `protobuf:"varint,90,opt,name=SettlePercent,proto3,oneof" json:"SettlePercent,omitempty"`
	SettleTips               []string `protobuf:"bytes,91,rep,name=SettleTips,proto3" json:"SettleTips,omitempty"`
	Setter                   *string  `protobuf:"bytes,100,opt,name=Setter,proto3,oneof" json:"Setter,omitempty"`
	ProductPage              *string  `protobuf:"bytes,110,opt,name=ProductPage,proto3,oneof" json:"ProductPage,omitempty"`
	Disabled                 *bool    `protobuf:"varint,120,opt,name=Disabled,proto3,oneof" json:"Disabled,omitempty"`
	DailyRewardAmount        *string  `protobuf:"bytes,130,opt,name=DailyRewardAmount,proto3,oneof" json:"DailyRewardAmount,omitempty"`
	Display                  *bool    `protobuf:"varint,140,opt,name=Display,proto3,oneof" json:"Display,omitempty"`
	DisplayIndex             *uint32  `protobuf:"varint,150,opt,name=DisplayIndex,proto3,oneof" json:"DisplayIndex,omitempty"`
	MaxAmountPerWithdraw     *string  `protobuf:"bytes,160,opt,name=MaxAmountPerWithdraw,proto3,oneof" json:"MaxAmountPerWithdraw,omitempty"`
}

func (x *CoinReq) Reset() {
	*x = CoinReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinReq) ProtoMessage() {}

func (x *CoinReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinReq.ProtoReflect.Descriptor instead.
func (*CoinReq) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_app_coin_coin_proto_rawDescGZIP(), []int{0}
}

func (x *CoinReq) GetID() string {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return ""
}

func (x *CoinReq) GetAppID() string {
	if x != nil && x.AppID != nil {
		return *x.AppID
	}
	return ""
}

func (x *CoinReq) GetCoinTypeID() string {
	if x != nil && x.CoinTypeID != nil {
		return *x.CoinTypeID
	}
	return ""
}

func (x *CoinReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *CoinReq) GetDisplayNames() []string {
	if x != nil {
		return x.DisplayNames
	}
	return nil
}

func (x *CoinReq) GetLogo() string {
	if x != nil && x.Logo != nil {
		return *x.Logo
	}
	return ""
}

func (x *CoinReq) GetForPay() bool {
	if x != nil && x.ForPay != nil {
		return *x.ForPay
	}
	return false
}

func (x *CoinReq) GetWithdrawAutoReviewAmount() string {
	if x != nil && x.WithdrawAutoReviewAmount != nil {
		return *x.WithdrawAutoReviewAmount
	}
	return ""
}

func (x *CoinReq) GetMarketValue() string {
	if x != nil && x.MarketValue != nil {
		return *x.MarketValue
	}
	return ""
}

func (x *CoinReq) GetSettlePercent() uint32 {
	if x != nil && x.SettlePercent != nil {
		return *x.SettlePercent
	}
	return 0
}

func (x *CoinReq) GetSettleTips() []string {
	if x != nil {
		return x.SettleTips
	}
	return nil
}

func (x *CoinReq) GetSetter() string {
	if x != nil && x.Setter != nil {
		return *x.Setter
	}
	return ""
}

func (x *CoinReq) GetProductPage() string {
	if x != nil && x.ProductPage != nil {
		return *x.ProductPage
	}
	return ""
}

func (x *CoinReq) GetDisabled() bool {
	if x != nil && x.Disabled != nil {
		return *x.Disabled
	}
	return false
}

func (x *CoinReq) GetDailyRewardAmount() string {
	if x != nil && x.DailyRewardAmount != nil {
		return *x.DailyRewardAmount
	}
	return ""
}

func (x *CoinReq) GetDisplay() bool {
	if x != nil && x.Display != nil {
		return *x.Display
	}
	return false
}

func (x *CoinReq) GetDisplayIndex() uint32 {
	if x != nil && x.DisplayIndex != nil {
		return *x.DisplayIndex
	}
	return 0
}

func (x *CoinReq) GetMaxAmountPerWithdraw() string {
	if x != nil && x.MaxAmountPerWithdraw != nil {
		return *x.MaxAmountPerWithdraw
	}
	return ""
}

type Coin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: sql:"id"
	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty" sql:"id"`
	// @inject_tag: sql:"app_id"
	AppID string `protobuf:"bytes,20,opt,name=AppID,proto3" json:"AppID,omitempty" sql:"app_id"`
	// @inject_tag: sql:"coin_type_id"
	CoinTypeID string `protobuf:"bytes,30,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty" sql:"coin_type_id"`
	// @inject_tag: sql:"name"
	Name string `protobuf:"bytes,40,opt,name=Name,proto3" json:"Name,omitempty" sql:"name"`
	// @inject_tag: sql:"coin_name"
	CoinName string `protobuf:"bytes,41,opt,name=CoinName,proto3" json:"CoinName,omitempty" sql:"coin_name"`
	// @inject_tag: sql:"display_names"
	DisplayNamesStr string   `protobuf:"bytes,42,opt,name=DisplayNamesStr,proto3" json:"DisplayNamesStr,omitempty" sql:"display_names"`
	DisplayNames    []string `protobuf:"bytes,43,rep,name=DisplayNames,proto3" json:"DisplayNames,omitempty"`
	// @inject_tag: sql:"logo"
	Logo string `protobuf:"bytes,50,opt,name=Logo,proto3" json:"Logo,omitempty" sql:"logo"`
	// @inject_tag: sql:"unit"
	Unit string `protobuf:"bytes,60,opt,name=Unit,proto3" json:"Unit,omitempty" sql:"unit"`
	// @inject_tag: sql:"presale"
	Presale bool `protobuf:"varint,70,opt,name=Presale,proto3" json:"Presale,omitempty" sql:"presale"`
	// @inject_tag: sql:"reserved_amount"
	ReservedAmount string `protobuf:"bytes,80,opt,name=ReservedAmount,proto3" json:"ReservedAmount,omitempty" sql:"reserved_amount"`
	// @inject_tag: sql:"for_pay"
	ForPay bool `protobuf:"varint,90,opt,name=ForPay,proto3" json:"ForPay,omitempty" sql:"for_pay"`
	// @inject_tag: sql:"product_page"
	ProductPage string `protobuf:"bytes,91,opt,name=ProductPage,proto3" json:"ProductPage,omitempty" sql:"product_page"`
	// @inject_tag: sql:"coin_for_pay"
	CoinForPay bool `protobuf:"varint,92,opt,name=CoinForPay,proto3" json:"CoinForPay,omitempty" sql:"coin_for_pay"`
	// @inject_tag: sql:"env"
	ENV string `protobuf:"bytes,100,opt,name=ENV,proto3" json:"ENV,omitempty" sql:"env"`
	// @inject_tag: sql:"home_page"
	HomePage string `protobuf:"bytes,110,opt,name=HomePage,proto3" json:"HomePage,omitempty" sql:"home_page"`
	// @inject_tag: sql:"specs"
	Specs string `protobuf:"bytes,120,opt,name=Specs,proto3" json:"Specs,omitempty" sql:"specs"`
	// @inject_tag: sql:"stable_usd"
	StableUSD bool `protobuf:"varint,101,opt,name=StableUSD,proto3" json:"StableUSD,omitempty" sql:"stable_usd"`
	// @inject_tag: sql:"fee_coin_type_id"
	FeeCoinTypeID string `protobuf:"bytes,130,opt,name=FeeCoinTypeID,proto3" json:"FeeCoinTypeID,omitempty" sql:"fee_coin_type_id"`
	// @inject_tag: sql:"fee_coin_name"
	FeeCoinName string `protobuf:"bytes,140,opt,name=FeeCoinName,proto3" json:"FeeCoinName,omitempty" sql:"fee_coin_name"`
	// @inject_tag: sql:"fee_coin_logo"
	FeeCoinLogo string `protobuf:"bytes,150,opt,name=FeeCoinLogo,proto3" json:"FeeCoinLogo,omitempty" sql:"fee_coin_logo"`
	// @inject_tag: sql:"fee_coin_unit"
	FeeCoinUnit string `protobuf:"bytes,160,opt,name=FeeCoinUnit,proto3" json:"FeeCoinUnit,omitempty" sql:"fee_coin_unit"`
	// @inject_tag: sql:"fee_coin_env"
	FeeCoinENV string `protobuf:"bytes,170,opt,name=FeeCoinENV,proto3" json:"FeeCoinENV,omitempty" sql:"fee_coin_env"`
	// @inject_tag: sql:"withdraw_fee_by_stable_usd"
	WithdrawFeeByStableUSD bool `protobuf:"varint,180,opt,name=WithdrawFeeByStableUSD,proto3" json:"WithdrawFeeByStableUSD,omitempty" sql:"withdraw_fee_by_stable_usd"`
	// @inject_tag: sql:"withdraw_fee_amount"
	WithdrawFeeAmount string `protobuf:"bytes,190,opt,name=WithdrawFeeAmount,proto3" json:"WithdrawFeeAmount,omitempty" sql:"withdraw_fee_amount"`
	// @inject_tag: sql:"collect_fee_amount"
	CollectFeeAmount string `protobuf:"bytes,200,opt,name=CollectFeeAmount,proto3" json:"CollectFeeAmount,omitempty" sql:"collect_fee_amount"`
	// @inject_tag: sql:"hot_wallet_fee_amount"
	HotWalletFeeAmount string `protobuf:"bytes,210,opt,name=HotWalletFeeAmount,proto3" json:"HotWalletFeeAmount,omitempty" sql:"hot_wallet_fee_amount"`
	// @inject_tag: sql:"low_fee_amount"
	LowFeeAmount string `protobuf:"bytes,220,opt,name=LowFeeAmount,proto3" json:"LowFeeAmount,omitempty" sql:"low_fee_amount"`
	// @inject_tag: sql:"hot_low_fee_amount"
	HotLowFeeAmount string `protobuf:"bytes,221,opt,name=HotLowFeeAmount,proto3" json:"HotLowFeeAmount,omitempty" sql:"hot_low_fee_amount"`
	// @inject_tag: sql:"hot_wallet_account_amount"
	HotWalletAccountAmount string `protobuf:"bytes,230,opt,name=HotWalletAccountAmount,proto3" json:"HotWalletAccountAmount,omitempty" sql:"hot_wallet_account_amount"`
	// @inject_tag: sql:"payment_account_collect_amount"
	PaymentAccountCollectAmount string `protobuf:"bytes,240,opt,name=PaymentAccountCollectAmount,proto3" json:"PaymentAccountCollectAmount,omitempty" sql:"payment_account_collect_amount"`
	// @inject_tag: sql:"withdraw_auto_review_amount"
	WithdrawAutoReviewAmount string `protobuf:"bytes,250,opt,name=WithdrawAutoReviewAmount,proto3" json:"WithdrawAutoReviewAmount,omitempty" sql:"withdraw_auto_review_amount"`
	// @inject_tag: sql:"market_value"
	MarketValue string `protobuf:"bytes,260,opt,name=MarketValue,proto3" json:"MarketValue,omitempty" sql:"market_value"`
	// @inject_tag: sql:"settle_value"
	SettleValue string `protobuf:"bytes,270,opt,name=SettleValue,proto3" json:"SettleValue,omitempty" sql:"settle_value"`
	// @inject_tag: sql:"settle_percent"
	SettlePercent uint32 `protobuf:"varint,280,opt,name=SettlePercent,proto3" json:"SettlePercent,omitempty" sql:"settle_percent"`
	// @inject_tag: sql:"settle_tips"
	SettleTipsStr string   `protobuf:"bytes,281,opt,name=SettleTipsStr,proto3" json:"SettleTipsStr,omitempty" sql:"settle_tips"`
	SettleTips    []string `protobuf:"bytes,282,rep,name=SettleTips,proto3" json:"SettleTips,omitempty"`
	// @inject_tag: sql:"setter"
	Setter string `protobuf:"bytes,290,opt,name=Setter,proto3" json:"Setter,omitempty" sql:"setter"`
	// @inject_tag: sql:"disabled"
	Disabled bool `protobuf:"varint,300,opt,name=Disabled,proto3" json:"Disabled,omitempty" sql:"disabled"`
	// @inject_tag: sql:"coin_disabled"
	CoinDisabled bool `protobuf:"varint,310,opt,name=CoinDisabled,proto3" json:"CoinDisabled,omitempty" sql:"coin_disabled"`
	// @inject_tag: sql:"created_at"
	CreatedAt uint32 `protobuf:"varint,320,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
	// @inject_tag: sql:"updated_at"
	UpdatedAt uint32 `protobuf:"varint,330,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty" sql:"updated_at"`
	// @inject_tag: sql:"daily_reward_amount"
	DailyRewardAmount string `protobuf:"bytes,340,opt,name=DailyRewardAmount,proto3" json:"DailyRewardAmount,omitempty" sql:"daily_reward_amount"`
	// @inject_tag: sql:"display"
	Display bool `protobuf:"varint,350,opt,name=Display,proto3" json:"Display,omitempty" sql:"display"`
	// @inject_tag: sql:"display_index"
	DisplayIndex uint32 `protobuf:"varint,360,opt,name=DisplayIndex,proto3" json:"DisplayIndex,omitempty" sql:"display_index"`
	// @inject_tag: sql:"max_amount_per_withdraw"
	MaxAmountPerWithdraw string `protobuf:"bytes,370,opt,name=MaxAmountPerWithdraw,proto3" json:"MaxAmountPerWithdraw,omitempty" sql:"max_amount_per_withdraw"`
	// @inject_tag: sql:"least_transfer_amount"
	LeastTransferAmount string `protobuf:"bytes,380,opt,name=LeastTransferAmount,proto3" json:"LeastTransferAmount,omitempty" sql:"least_transfer_amount"`
	// @inject_tag: sql:"need_memo"
	NeedMemo bool `protobuf:"varint,390,opt,name=NeedMemo,proto3" json:"NeedMemo,omitempty" sql:"need_memo"`
}

func (x *Coin) Reset() {
	*x = Coin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coin) ProtoMessage() {}

func (x *Coin) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coin.ProtoReflect.Descriptor instead.
func (*Coin) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_app_coin_coin_proto_rawDescGZIP(), []int{1}
}

func (x *Coin) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Coin) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *Coin) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

func (x *Coin) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Coin) GetCoinName() string {
	if x != nil {
		return x.CoinName
	}
	return ""
}

func (x *Coin) GetDisplayNamesStr() string {
	if x != nil {
		return x.DisplayNamesStr
	}
	return ""
}

func (x *Coin) GetDisplayNames() []string {
	if x != nil {
		return x.DisplayNames
	}
	return nil
}

func (x *Coin) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *Coin) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *Coin) GetPresale() bool {
	if x != nil {
		return x.Presale
	}
	return false
}

func (x *Coin) GetReservedAmount() string {
	if x != nil {
		return x.ReservedAmount
	}
	return ""
}

func (x *Coin) GetForPay() bool {
	if x != nil {
		return x.ForPay
	}
	return false
}

func (x *Coin) GetProductPage() string {
	if x != nil {
		return x.ProductPage
	}
	return ""
}

func (x *Coin) GetCoinForPay() bool {
	if x != nil {
		return x.CoinForPay
	}
	return false
}

func (x *Coin) GetENV() string {
	if x != nil {
		return x.ENV
	}
	return ""
}

func (x *Coin) GetHomePage() string {
	if x != nil {
		return x.HomePage
	}
	return ""
}

func (x *Coin) GetSpecs() string {
	if x != nil {
		return x.Specs
	}
	return ""
}

func (x *Coin) GetStableUSD() bool {
	if x != nil {
		return x.StableUSD
	}
	return false
}

func (x *Coin) GetFeeCoinTypeID() string {
	if x != nil {
		return x.FeeCoinTypeID
	}
	return ""
}

func (x *Coin) GetFeeCoinName() string {
	if x != nil {
		return x.FeeCoinName
	}
	return ""
}

func (x *Coin) GetFeeCoinLogo() string {
	if x != nil {
		return x.FeeCoinLogo
	}
	return ""
}

func (x *Coin) GetFeeCoinUnit() string {
	if x != nil {
		return x.FeeCoinUnit
	}
	return ""
}

func (x *Coin) GetFeeCoinENV() string {
	if x != nil {
		return x.FeeCoinENV
	}
	return ""
}

func (x *Coin) GetWithdrawFeeByStableUSD() bool {
	if x != nil {
		return x.WithdrawFeeByStableUSD
	}
	return false
}

func (x *Coin) GetWithdrawFeeAmount() string {
	if x != nil {
		return x.WithdrawFeeAmount
	}
	return ""
}

func (x *Coin) GetCollectFeeAmount() string {
	if x != nil {
		return x.CollectFeeAmount
	}
	return ""
}

func (x *Coin) GetHotWalletFeeAmount() string {
	if x != nil {
		return x.HotWalletFeeAmount
	}
	return ""
}

func (x *Coin) GetLowFeeAmount() string {
	if x != nil {
		return x.LowFeeAmount
	}
	return ""
}

func (x *Coin) GetHotLowFeeAmount() string {
	if x != nil {
		return x.HotLowFeeAmount
	}
	return ""
}

func (x *Coin) GetHotWalletAccountAmount() string {
	if x != nil {
		return x.HotWalletAccountAmount
	}
	return ""
}

func (x *Coin) GetPaymentAccountCollectAmount() string {
	if x != nil {
		return x.PaymentAccountCollectAmount
	}
	return ""
}

func (x *Coin) GetWithdrawAutoReviewAmount() string {
	if x != nil {
		return x.WithdrawAutoReviewAmount
	}
	return ""
}

func (x *Coin) GetMarketValue() string {
	if x != nil {
		return x.MarketValue
	}
	return ""
}

func (x *Coin) GetSettleValue() string {
	if x != nil {
		return x.SettleValue
	}
	return ""
}

func (x *Coin) GetSettlePercent() uint32 {
	if x != nil {
		return x.SettlePercent
	}
	return 0
}

func (x *Coin) GetSettleTipsStr() string {
	if x != nil {
		return x.SettleTipsStr
	}
	return ""
}

func (x *Coin) GetSettleTips() []string {
	if x != nil {
		return x.SettleTips
	}
	return nil
}

func (x *Coin) GetSetter() string {
	if x != nil {
		return x.Setter
	}
	return ""
}

func (x *Coin) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *Coin) GetCoinDisabled() bool {
	if x != nil {
		return x.CoinDisabled
	}
	return false
}

func (x *Coin) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Coin) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Coin) GetDailyRewardAmount() string {
	if x != nil {
		return x.DailyRewardAmount
	}
	return ""
}

func (x *Coin) GetDisplay() bool {
	if x != nil {
		return x.Display
	}
	return false
}

func (x *Coin) GetDisplayIndex() uint32 {
	if x != nil {
		return x.DisplayIndex
	}
	return 0
}

func (x *Coin) GetMaxAmountPerWithdraw() string {
	if x != nil {
		return x.MaxAmountPerWithdraw
	}
	return ""
}

func (x *Coin) GetLeastTransferAmount() string {
	if x != nil {
		return x.LeastTransferAmount
	}
	return ""
}

func (x *Coin) GetNeedMemo() bool {
	if x != nil {
		return x.NeedMemo
	}
	return false
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          *v1.StringVal      `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	AppID       *v1.StringVal      `protobuf:"bytes,20,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	CoinTypeID  *v1.StringVal      `protobuf:"bytes,30,opt,name=CoinTypeID,proto3,oneof" json:"CoinTypeID,omitempty"`
	ForPay      *v1.BoolVal        `protobuf:"bytes,40,opt,name=ForPay,proto3,oneof" json:"ForPay,omitempty"`
	Disabled    *v1.BoolVal        `protobuf:"bytes,50,opt,name=Disabled,proto3,oneof" json:"Disabled,omitempty"`
	IDs         *v1.StringSliceVal `protobuf:"bytes,60,opt,name=IDs,proto3,oneof" json:"IDs,omitempty"`
	CoinTypeIDs *v1.StringSliceVal `protobuf:"bytes,70,opt,name=CoinTypeIDs,proto3,oneof" json:"CoinTypeIDs,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_app_coin_coin_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *v1.StringVal {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetAppID() *v1.StringVal {
	if x != nil {
		return x.AppID
	}
	return nil
}

func (x *Conds) GetCoinTypeID() *v1.StringVal {
	if x != nil {
		return x.CoinTypeID
	}
	return nil
}

func (x *Conds) GetForPay() *v1.BoolVal {
	if x != nil {
		return x.ForPay
	}
	return nil
}

func (x *Conds) GetDisabled() *v1.BoolVal {
	if x != nil {
		return x.Disabled
	}
	return nil
}

func (x *Conds) GetIDs() *v1.StringSliceVal {
	if x != nil {
		return x.IDs
	}
	return nil
}

func (x *Conds) GetCoinTypeIDs() *v1.StringSliceVal {
	if x != nil {
		return x.CoinTypeIDs
	}
	return nil
}

type CreateCoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CoinReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateCoinRequest) Reset() {
	*x = CreateCoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCoinRequest) ProtoMessage() {}

func (x *CreateCoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCoinRequest.ProtoReflect.Descriptor instead.
func (*CreateCoinRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_app_coin_coin_proto_rawDescGZIP(), []int{3}
}

func (x *CreateCoinRequest) GetInfo() *CoinReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateCoinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Coin `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateCoinResponse) Reset() {
	*x = CreateCoinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCoinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCoinResponse) ProtoMessage() {}

func (x *CreateCoinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCoinResponse.ProtoReflect.Descriptor instead.
func (*CreateCoinResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_app_coin_coin_proto_rawDescGZIP(), []int{4}
}

func (x *CreateCoinResponse) GetInfo() *Coin {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetCoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetCoinRequest) Reset() {
	*x = GetCoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinRequest) ProtoMessage() {}

func (x *GetCoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinRequest.ProtoReflect.Descriptor instead.
func (*GetCoinRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_app_coin_coin_proto_rawDescGZIP(), []int{5}
}

func (x *GetCoinRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetCoinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Coin `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetCoinResponse) Reset() {
	*x = GetCoinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinResponse) ProtoMessage() {}

func (x *GetCoinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinResponse.ProtoReflect.Descriptor instead.
func (*GetCoinResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_app_coin_coin_proto_rawDescGZIP(), []int{6}
}

func (x *GetCoinResponse) GetInfo() *Coin {
	if x != nil {
		return x.Info
	}
	return nil
}

<<<<<<< HEAD
<<<<<<< HEAD
=======
type GetCoinOnlyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *GetCoinOnlyRequest) Reset() {
	*x = GetCoinOnlyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinOnlyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinOnlyRequest) ProtoMessage() {}

func (x *GetCoinOnlyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinOnlyRequest.ProtoReflect.Descriptor instead.
func (*GetCoinOnlyRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_app_coin_coin_proto_rawDescGZIP(), []int{7}
}

func (x *GetCoinOnlyRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type GetCoinOnlyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Coin `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetCoinOnlyResponse) Reset() {
	*x = GetCoinOnlyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinOnlyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinOnlyResponse) ProtoMessage() {}

func (x *GetCoinOnlyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinOnlyResponse.ProtoReflect.Descriptor instead.
func (*GetCoinOnlyResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_app_coin_coin_proto_rawDescGZIP(), []int{8}
}

func (x *GetCoinOnlyResponse) GetInfo() *Coin {
	if x != nil {
		return x.Info
	}
	return nil
}

>>>>>>> Add app coin exrate
=======
>>>>>>> Remove only api of appcoin
type GetCoinsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetCoinsRequest) Reset() {
	*x = GetCoinsRequest{}
	if protoimpl.UnsafeEnabled {
<<<<<<< HEAD
<<<<<<< HEAD
		mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[7]
=======
		mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[9]
>>>>>>> Add app coin exrate
=======
		mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[7]
>>>>>>> Remove only api of appcoin
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinsRequest) ProtoMessage() {}

func (x *GetCoinsRequest) ProtoReflect() protoreflect.Message {
<<<<<<< HEAD
<<<<<<< HEAD
	mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[7]
=======
	mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[9]
>>>>>>> Add app coin exrate
=======
	mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[7]
>>>>>>> Remove only api of appcoin
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinsRequest.ProtoReflect.Descriptor instead.
func (*GetCoinsRequest) Descriptor() ([]byte, []int) {
<<<<<<< HEAD
<<<<<<< HEAD
	return file_npool_chain_mw_v1_app_coin_coin_proto_rawDescGZIP(), []int{7}
=======
	return file_npool_chain_mw_v1_app_coin_coin_proto_rawDescGZIP(), []int{9}
>>>>>>> Add app coin exrate
=======
	return file_npool_chain_mw_v1_app_coin_coin_proto_rawDescGZIP(), []int{7}
>>>>>>> Remove only api of appcoin
}

func (x *GetCoinsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetCoinsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetCoinsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetCoinsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Coin `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32  `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetCoinsResponse) Reset() {
	*x = GetCoinsResponse{}
	if protoimpl.UnsafeEnabled {
<<<<<<< HEAD
<<<<<<< HEAD
		mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[8]
=======
		mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[10]
>>>>>>> Add app coin exrate
=======
		mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[8]
>>>>>>> Remove only api of appcoin
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinsResponse) ProtoMessage() {}

func (x *GetCoinsResponse) ProtoReflect() protoreflect.Message {
<<<<<<< HEAD
<<<<<<< HEAD
	mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[8]
=======
	mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[10]
>>>>>>> Add app coin exrate
=======
	mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[8]
>>>>>>> Remove only api of appcoin
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinsResponse.ProtoReflect.Descriptor instead.
func (*GetCoinsResponse) Descriptor() ([]byte, []int) {
<<<<<<< HEAD
<<<<<<< HEAD
	return file_npool_chain_mw_v1_app_coin_coin_proto_rawDescGZIP(), []int{8}
=======
	return file_npool_chain_mw_v1_app_coin_coin_proto_rawDescGZIP(), []int{10}
>>>>>>> Add app coin exrate
=======
	return file_npool_chain_mw_v1_app_coin_coin_proto_rawDescGZIP(), []int{8}
>>>>>>> Remove only api of appcoin
}

func (x *GetCoinsResponse) GetInfos() []*Coin {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetCoinsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ExistCoinCondsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *ExistCoinCondsRequest) Reset() {
	*x = ExistCoinCondsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistCoinCondsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistCoinCondsRequest) ProtoMessage() {}

func (x *ExistCoinCondsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistCoinCondsRequest.ProtoReflect.Descriptor instead.
func (*ExistCoinCondsRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_app_coin_coin_proto_rawDescGZIP(), []int{9}
}

func (x *ExistCoinCondsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type ExistCoinCondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistCoinCondsResponse) Reset() {
	*x = ExistCoinCondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistCoinCondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistCoinCondsResponse) ProtoMessage() {}

func (x *ExistCoinCondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistCoinCondsResponse.ProtoReflect.Descriptor instead.
func (*ExistCoinCondsResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mw_v1_app_coin_coin_proto_rawDescGZIP(), []int{10}
}

func (x *ExistCoinCondsResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type UpdateCoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CoinReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateCoinRequest) Reset() {
	*x = UpdateCoinRequest{}
	if protoimpl.UnsafeEnabled {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
		mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[9]
=======
		mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[11]
>>>>>>> Add app coin exrate
=======
		mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[9]
>>>>>>> Remove only api of appcoin
=======
		mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[11]
>>>>>>> Add exist api
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCoinRequest) ProtoMessage() {}

func (x *UpdateCoinRequest) ProtoReflect() protoreflect.Message {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
	mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[9]
=======
	mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[11]
>>>>>>> Add app coin exrate
=======
	mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[9]
>>>>>>> Remove only api of appcoin
=======
	mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[11]
>>>>>>> Add exist api
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCoinRequest.ProtoReflect.Descriptor instead.
func (*UpdateCoinRequest) Descriptor() ([]byte, []int) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
	return file_npool_chain_mw_v1_app_coin_coin_proto_rawDescGZIP(), []int{9}
=======
	return file_npool_chain_mw_v1_app_coin_coin_proto_rawDescGZIP(), []int{11}
>>>>>>> Add app coin exrate
=======
	return file_npool_chain_mw_v1_app_coin_coin_proto_rawDescGZIP(), []int{9}
>>>>>>> Remove only api of appcoin
=======
	return file_npool_chain_mw_v1_app_coin_coin_proto_rawDescGZIP(), []int{11}
>>>>>>> Add exist api
}

func (x *UpdateCoinRequest) GetInfo() *CoinReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateCoinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Coin `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateCoinResponse) Reset() {
	*x = UpdateCoinResponse{}
	if protoimpl.UnsafeEnabled {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
		mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[10]
=======
		mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[12]
>>>>>>> Add app coin exrate
=======
		mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[10]
>>>>>>> Remove only api of appcoin
=======
		mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[12]
>>>>>>> Add exist api
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCoinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCoinResponse) ProtoMessage() {}

func (x *UpdateCoinResponse) ProtoReflect() protoreflect.Message {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
	mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[10]
=======
	mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[12]
>>>>>>> Add app coin exrate
=======
	mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[10]
>>>>>>> Remove only api of appcoin
=======
	mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[12]
>>>>>>> Add exist api
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCoinResponse.ProtoReflect.Descriptor instead.
func (*UpdateCoinResponse) Descriptor() ([]byte, []int) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
	return file_npool_chain_mw_v1_app_coin_coin_proto_rawDescGZIP(), []int{10}
=======
	return file_npool_chain_mw_v1_app_coin_coin_proto_rawDescGZIP(), []int{12}
>>>>>>> Add app coin exrate
=======
	return file_npool_chain_mw_v1_app_coin_coin_proto_rawDescGZIP(), []int{10}
>>>>>>> Remove only api of appcoin
=======
	return file_npool_chain_mw_v1_app_coin_coin_proto_rawDescGZIP(), []int{12}
>>>>>>> Add exist api
}

func (x *UpdateCoinResponse) GetInfo() *Coin {
	if x != nil {
		return x.Info
	}
	return nil
}

type DeleteCoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

<<<<<<< HEAD
<<<<<<< HEAD
	Info *CoinReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
=======
	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
>>>>>>> Add app coin exrate
=======
	Info *CoinReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
>>>>>>> Add delete coin api
}

func (x *DeleteCoinRequest) Reset() {
	*x = DeleteCoinRequest{}
	if protoimpl.UnsafeEnabled {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
		mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[11]
=======
		mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[13]
>>>>>>> Add app coin exrate
=======
		mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[11]
>>>>>>> Remove only api of appcoin
=======
		mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[13]
>>>>>>> Add exist api
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCoinRequest) ProtoMessage() {}

func (x *DeleteCoinRequest) ProtoReflect() protoreflect.Message {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
	mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[11]
=======
	mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[13]
>>>>>>> Add app coin exrate
=======
	mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[11]
>>>>>>> Remove only api of appcoin
=======
	mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[13]
>>>>>>> Add exist api
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCoinRequest.ProtoReflect.Descriptor instead.
func (*DeleteCoinRequest) Descriptor() ([]byte, []int) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
	return file_npool_chain_mw_v1_app_coin_coin_proto_rawDescGZIP(), []int{11}
=======
	return file_npool_chain_mw_v1_app_coin_coin_proto_rawDescGZIP(), []int{13}
>>>>>>> Add exist api
}

func (x *DeleteCoinRequest) GetInfo() *CoinReq {
<<<<<<< HEAD
	if x != nil {
		return x.Info
	}
	return nil
=======
	return file_npool_chain_mw_v1_app_coin_coin_proto_rawDescGZIP(), []int{13}
=======
	return file_npool_chain_mw_v1_app_coin_coin_proto_rawDescGZIP(), []int{11}
>>>>>>> Remove only api of appcoin
}

func (x *DeleteCoinRequest) GetID() string {
=======
>>>>>>> Add delete coin api
	if x != nil {
		return x.Info
	}
<<<<<<< HEAD
	return ""
>>>>>>> Add app coin exrate
=======
	return nil
>>>>>>> Add delete coin api
}

type DeleteCoinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Coin `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteCoinResponse) Reset() {
	*x = DeleteCoinResponse{}
	if protoimpl.UnsafeEnabled {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
		mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[12]
=======
		mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[14]
>>>>>>> Add app coin exrate
=======
		mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[12]
>>>>>>> Remove only api of appcoin
=======
		mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[14]
>>>>>>> Add exist api
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCoinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCoinResponse) ProtoMessage() {}

func (x *DeleteCoinResponse) ProtoReflect() protoreflect.Message {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
	mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[12]
=======
	mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[14]
>>>>>>> Add app coin exrate
=======
	mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[12]
>>>>>>> Remove only api of appcoin
=======
	mi := &file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[14]
>>>>>>> Add exist api
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCoinResponse.ProtoReflect.Descriptor instead.
func (*DeleteCoinResponse) Descriptor() ([]byte, []int) {
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
	return file_npool_chain_mw_v1_app_coin_coin_proto_rawDescGZIP(), []int{12}
=======
	return file_npool_chain_mw_v1_app_coin_coin_proto_rawDescGZIP(), []int{14}
>>>>>>> Add app coin exrate
=======
	return file_npool_chain_mw_v1_app_coin_coin_proto_rawDescGZIP(), []int{12}
>>>>>>> Remove only api of appcoin
=======
	return file_npool_chain_mw_v1_app_coin_coin_proto_rawDescGZIP(), []int{14}
>>>>>>> Add exist api
}

func (x *DeleteCoinResponse) GetInfo() *Coin {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_chain_mw_v1_app_coin_coin_proto protoreflect.FileDescriptor

var file_npool_chain_mw_v1_app_coin_coin_proto_rawDesc = []byte{
	0x0a, 0x25, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x77,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x63, 0x6f, 0x69,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x91, 0x07, 0x0a, 0x07, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12,
	0x13, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12,
	0x23, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a,
	0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x29, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x17, 0x0a, 0x04, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x04, 0x4c, 0x6f, 0x67, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x46, 0x6f,
	0x72, 0x50, 0x61, 0x79, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x06, 0x46, 0x6f,
	0x72, 0x50, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x18, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x18, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52,
	0x0b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x29, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x18, 0x5a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x08, 0x52, 0x0d, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x70, 0x73, 0x18, 0x5b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x70, 0x73, 0x12, 0x1b, 0x0a, 0x06, 0x53, 0x65,
	0x74, 0x74, 0x65, 0x72, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x06, 0x53, 0x65,
	0x74, 0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0b,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f,
	0x0a, 0x08, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x78, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x0b, 0x52, 0x08, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x32, 0x0a, 0x11, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x11, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x07, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x8c,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0d, 0x52, 0x07, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0e, 0x52, 0x0c, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a,
	0x14, 0x4d, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x14,
	0x4d, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x41, 0x70, 0x70, 0x49, 0x44, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x43, 0x6f, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x4e, 0x61, 0x6d, 0x65,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x4c, 0x6f, 0x67, 0x6f, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x46, 0x6f,
	0x72, 0x50, 0x61, 0x79, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x53, 0x65, 0x74, 0x74, 0x65, 0x72, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x17,
	0x0a, 0x15, 0x5f, 0x4d, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x22, 0xb2, 0x0d, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f,
	0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f,
	0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x53, 0x74, 0x72, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x53, 0x74, 0x72,
	0x12, 0x22, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x2b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74,
	0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x50, 0x72, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x50,
	0x72, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x79, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x46, 0x6f, 0x72, 0x50, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e,
	0x46, 0x6f, 0x72, 0x50, 0x61, 0x79, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x43, 0x6f,
	0x69, 0x6e, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x45, 0x4e, 0x56, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x45, 0x4e, 0x56, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f,
	0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f,
	0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x70, 0x65, 0x63, 0x73, 0x18,
	0x78, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x70, 0x65, 0x63, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x53, 0x44, 0x18, 0x65, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x53, 0x44, 0x12, 0x25, 0x0a, 0x0d, 0x46, 0x65,
	0x65, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x82, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x46, 0x65, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x44, 0x12, 0x21, 0x0a, 0x0b, 0x46, 0x65, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x65, 0x65, 0x43, 0x6f, 0x69, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x46, 0x65, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x4c,
	0x6f, 0x67, 0x6f, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46, 0x65, 0x65, 0x43,
	0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x21, 0x0a, 0x0b, 0x46, 0x65, 0x65, 0x43, 0x6f,
	0x69, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x46,
	0x65, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0a, 0x46, 0x65,
	0x65, 0x43, 0x6f, 0x69, 0x6e, 0x45, 0x4e, 0x56, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x46, 0x65, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x45, 0x4e, 0x56, 0x12, 0x37, 0x0a, 0x16, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x65, 0x65, 0x42, 0x79, 0x53, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x55, 0x53, 0x44, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x65, 0x65, 0x42, 0x79, 0x53, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x55, 0x53, 0x44, 0x12, 0x2d, 0x0a, 0x11, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x10, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x46, 0x65,
	0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x2f, 0x0a, 0x12, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x46, 0x65, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x48,
	0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x23, 0x0a, 0x0c, 0x4c, 0x6f, 0x77, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4c, 0x6f, 0x77, 0x46, 0x65, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x0f, 0x48, 0x6f, 0x74, 0x4c, 0x6f, 0x77,
	0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xdd, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x48, 0x6f, 0x74, 0x4c, 0x6f, 0x77, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x37, 0x0a, 0x16, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xe6, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x1b, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xf0, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x1b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a,
	0x18, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x18, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0b, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x84, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a,
	0x0b, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x8e, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x25, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x18, 0x98, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x54, 0x69, 0x70, 0x73, 0x53, 0x74, 0x72, 0x18, 0x99, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x70, 0x73, 0x53, 0x74, 0x72, 0x12, 0x1f,
	0x0a, 0x0a, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x70, 0x73, 0x18, 0x9a, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x69, 0x70, 0x73, 0x12,
	0x17, 0x0a, 0x06, 0x53, 0x65, 0x74, 0x74, 0x65, 0x72, 0x18, 0xa2, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x53, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0xac, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0c, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0xb6, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x43, 0x6f,
	0x69, 0x6e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xc0, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xca, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2d, 0x0a, 0x11, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xd4, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x07, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x18, 0xde, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x12, 0x23, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0xe8, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x33, 0x0a, 0x14, 0x4d, 0x61, 0x78, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18,
	0xf2, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x4d, 0x61, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x31, 0x0a, 0x13,
	0x4c, 0x65, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0xfc, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x4c, 0x65, 0x61, 0x73,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1b, 0x0a, 0x08, 0x4e, 0x65, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x18, 0x86, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x4e, 0x65, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x22, 0xdd, 0x03, 0x0a,
	0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x02, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x05,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x02, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x79,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x48, 0x03, 0x52,
	0x06, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x08, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x48, 0x04, 0x52, 0x08, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x33, 0x0a, 0x03, 0x49, 0x44, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x05, 0x52,
	0x03, 0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0b, 0x43, 0x6f, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x44, 0x73, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x06, 0x52, 0x0b, 0x43, 0x6f,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03,
	0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x41, 0x70, 0x70, 0x49, 0x44, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x46, 0x6f, 0x72, 0x50, 0x61, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x49, 0x44, 0x73, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x73, 0x22, 0x4e, 0x0a, 0x11,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x39, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4c, 0x0a, 0x12,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x20, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x49, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x36, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69,
<<<<<<< HEAD
<<<<<<< HEAD
=======
	0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4f, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x69, 0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a,
	0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x4d, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x69, 0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x36, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69,
>>>>>>> Add app coin exrate
=======
>>>>>>> Remove only api of appcoin
	0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x7a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x05, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05,
	0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x22, 0x62, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x52, 0x0a, 0x15, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x39, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x2c, 0x0a, 0x16, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4e, 0x0a, 0x11, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4c, 0x0a, 0x12, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x36, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69,
	0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4e, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4c, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52,
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> Add delete coin api
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4e, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4c, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x32, 0xbc, 0x04, 0x0a, 0x0a, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x12, 0x71, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e,
	0x12, 0x2f, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
<<<<<<< HEAD
	0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x30, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e,
	0x12, 0x2c, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x6b, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x2d, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x0a,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x2f, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x71, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x2f, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x63, 0x6f, 0x69,
	0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
=======
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x23, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x4c, 0x0a, 0x12, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x36, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x69, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0xbc, 0x04, 0x0a, 0x0a, 0x4d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x12, 0x71, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x2f, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x07, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x2c, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73,
	0x12, 0x2d, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
=======
>>>>>>> Add delete coin api
=======
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0xbb, 0x05, 0x0a, 0x0a, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x12, 0x71, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x69, 0x6e, 0x12, 0x2f, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x69, 0x6e, 0x12, 0x2c, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2d, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
>>>>>>> Add exist api
	0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x6b, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x2d, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7d,
	0x0a, 0x0e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x33, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
<<<<<<< HEAD
<<<<<<< HEAD
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x69, 0x6e, 0x12, 0x2f, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e,
<<<<<<< HEAD
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x4f, 0x6e, 0x6c, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x08, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x2d, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x2f, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x0a, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x2f, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3d, 0x5a,
	0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f,
	0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x77,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
>>>>>>> Add app coin exrate
=======
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f,
	0x6c, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70,
	0x70, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
>>>>>>> Remove only api of appcoin
=======
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x6b, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x2d, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x0a,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x2f, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x68,
=======
	0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a,
	0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x2f, 0x2e, 0x63, 0x68,
>>>>>>> Add exist api
	0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x71, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x2f,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
<<<<<<< HEAD
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x63, 0x6f, 0x69,
	0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
>>>>>>> Add delete coin api
=======
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x30, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x63, 0x6f,
	0x69, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
>>>>>>> Add exist api
}

var (
	file_npool_chain_mw_v1_app_coin_coin_proto_rawDescOnce sync.Once
	file_npool_chain_mw_v1_app_coin_coin_proto_rawDescData = file_npool_chain_mw_v1_app_coin_coin_proto_rawDesc
)

func file_npool_chain_mw_v1_app_coin_coin_proto_rawDescGZIP() []byte {
	file_npool_chain_mw_v1_app_coin_coin_proto_rawDescOnce.Do(func() {
		file_npool_chain_mw_v1_app_coin_coin_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_chain_mw_v1_app_coin_coin_proto_rawDescData)
	})
	return file_npool_chain_mw_v1_app_coin_coin_proto_rawDescData
}

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
var file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_npool_chain_mw_v1_app_coin_coin_proto_goTypes = []interface{}{
	(*CoinReq)(nil),            // 0: chain.middleware.app.coin.v1.CoinReq
	(*Coin)(nil),               // 1: chain.middleware.app.coin.v1.Coin
	(*Conds)(nil),              // 2: chain.middleware.app.coin.v1.Conds
	(*CreateCoinRequest)(nil),  // 3: chain.middleware.app.coin.v1.CreateCoinRequest
	(*CreateCoinResponse)(nil), // 4: chain.middleware.app.coin.v1.CreateCoinResponse
	(*GetCoinRequest)(nil),     // 5: chain.middleware.app.coin.v1.GetCoinRequest
	(*GetCoinResponse)(nil),    // 6: chain.middleware.app.coin.v1.GetCoinResponse
	(*GetCoinsRequest)(nil),    // 7: chain.middleware.app.coin.v1.GetCoinsRequest
	(*GetCoinsResponse)(nil),   // 8: chain.middleware.app.coin.v1.GetCoinsResponse
	(*UpdateCoinRequest)(nil),  // 9: chain.middleware.app.coin.v1.UpdateCoinRequest
	(*UpdateCoinResponse)(nil), // 10: chain.middleware.app.coin.v1.UpdateCoinResponse
	(*DeleteCoinRequest)(nil),  // 11: chain.middleware.app.coin.v1.DeleteCoinRequest
	(*DeleteCoinResponse)(nil), // 12: chain.middleware.app.coin.v1.DeleteCoinResponse
	(*v1.StringVal)(nil),       // 13: basetypes.v1.StringVal
	(*v1.BoolVal)(nil),         // 14: basetypes.v1.BoolVal
	(*v1.StringSliceVal)(nil),  // 15: basetypes.v1.StringSliceVal
}
var file_npool_chain_mw_v1_app_coin_coin_proto_depIdxs = []int32{
	13, // 0: chain.middleware.app.coin.v1.Conds.ID:type_name -> basetypes.v1.StringVal
	13, // 1: chain.middleware.app.coin.v1.Conds.AppID:type_name -> basetypes.v1.StringVal
	13, // 2: chain.middleware.app.coin.v1.Conds.CoinTypeID:type_name -> basetypes.v1.StringVal
	14, // 3: chain.middleware.app.coin.v1.Conds.ForPay:type_name -> basetypes.v1.BoolVal
	14, // 4: chain.middleware.app.coin.v1.Conds.Disabled:type_name -> basetypes.v1.BoolVal
	15, // 5: chain.middleware.app.coin.v1.Conds.IDs:type_name -> basetypes.v1.StringSliceVal
	15, // 6: chain.middleware.app.coin.v1.Conds.CoinTypeIDs:type_name -> basetypes.v1.StringSliceVal
	0,  // 7: chain.middleware.app.coin.v1.CreateCoinRequest.Info:type_name -> chain.middleware.app.coin.v1.CoinReq
	1,  // 8: chain.middleware.app.coin.v1.CreateCoinResponse.Info:type_name -> chain.middleware.app.coin.v1.Coin
	1,  // 9: chain.middleware.app.coin.v1.GetCoinResponse.Info:type_name -> chain.middleware.app.coin.v1.Coin
	2,  // 10: chain.middleware.app.coin.v1.GetCoinsRequest.Conds:type_name -> chain.middleware.app.coin.v1.Conds
	1,  // 11: chain.middleware.app.coin.v1.GetCoinsResponse.Infos:type_name -> chain.middleware.app.coin.v1.Coin
	0,  // 12: chain.middleware.app.coin.v1.UpdateCoinRequest.Info:type_name -> chain.middleware.app.coin.v1.CoinReq
	1,  // 13: chain.middleware.app.coin.v1.UpdateCoinResponse.Info:type_name -> chain.middleware.app.coin.v1.Coin
	0,  // 14: chain.middleware.app.coin.v1.DeleteCoinRequest.Info:type_name -> chain.middleware.app.coin.v1.CoinReq
	1,  // 15: chain.middleware.app.coin.v1.DeleteCoinResponse.Info:type_name -> chain.middleware.app.coin.v1.Coin
	3,  // 16: chain.middleware.app.coin.v1.Middleware.CreateCoin:input_type -> chain.middleware.app.coin.v1.CreateCoinRequest
	5,  // 17: chain.middleware.app.coin.v1.Middleware.GetCoin:input_type -> chain.middleware.app.coin.v1.GetCoinRequest
	7,  // 18: chain.middleware.app.coin.v1.Middleware.GetCoins:input_type -> chain.middleware.app.coin.v1.GetCoinsRequest
	9,  // 19: chain.middleware.app.coin.v1.Middleware.UpdateCoin:input_type -> chain.middleware.app.coin.v1.UpdateCoinRequest
	11, // 20: chain.middleware.app.coin.v1.Middleware.DeleteCoin:input_type -> chain.middleware.app.coin.v1.DeleteCoinRequest
	4,  // 21: chain.middleware.app.coin.v1.Middleware.CreateCoin:output_type -> chain.middleware.app.coin.v1.CreateCoinResponse
	6,  // 22: chain.middleware.app.coin.v1.Middleware.GetCoin:output_type -> chain.middleware.app.coin.v1.GetCoinResponse
	8,  // 23: chain.middleware.app.coin.v1.Middleware.GetCoins:output_type -> chain.middleware.app.coin.v1.GetCoinsResponse
	10, // 24: chain.middleware.app.coin.v1.Middleware.UpdateCoin:output_type -> chain.middleware.app.coin.v1.UpdateCoinResponse
	12, // 25: chain.middleware.app.coin.v1.Middleware.DeleteCoin:output_type -> chain.middleware.app.coin.v1.DeleteCoinResponse
	21, // [21:26] is the sub-list for method output_type
	16, // [16:21] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
=======
var file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
=======
var file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
>>>>>>> Remove only api of appcoin
=======
var file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
>>>>>>> Add exist api
var file_npool_chain_mw_v1_app_coin_coin_proto_goTypes = []interface{}{
	(*CoinReq)(nil),                // 0: chain.middleware.app.coin.v1.CoinReq
	(*Coin)(nil),                   // 1: chain.middleware.app.coin.v1.Coin
	(*Conds)(nil),                  // 2: chain.middleware.app.coin.v1.Conds
	(*CreateCoinRequest)(nil),      // 3: chain.middleware.app.coin.v1.CreateCoinRequest
	(*CreateCoinResponse)(nil),     // 4: chain.middleware.app.coin.v1.CreateCoinResponse
	(*GetCoinRequest)(nil),         // 5: chain.middleware.app.coin.v1.GetCoinRequest
	(*GetCoinResponse)(nil),        // 6: chain.middleware.app.coin.v1.GetCoinResponse
	(*GetCoinsRequest)(nil),        // 7: chain.middleware.app.coin.v1.GetCoinsRequest
	(*GetCoinsResponse)(nil),       // 8: chain.middleware.app.coin.v1.GetCoinsResponse
	(*ExistCoinCondsRequest)(nil),  // 9: chain.middleware.app.coin.v1.ExistCoinCondsRequest
	(*ExistCoinCondsResponse)(nil), // 10: chain.middleware.app.coin.v1.ExistCoinCondsResponse
	(*UpdateCoinRequest)(nil),      // 11: chain.middleware.app.coin.v1.UpdateCoinRequest
	(*UpdateCoinResponse)(nil),     // 12: chain.middleware.app.coin.v1.UpdateCoinResponse
	(*DeleteCoinRequest)(nil),      // 13: chain.middleware.app.coin.v1.DeleteCoinRequest
	(*DeleteCoinResponse)(nil),     // 14: chain.middleware.app.coin.v1.DeleteCoinResponse
	(*v1.StringVal)(nil),           // 15: basetypes.v1.StringVal
	(*v1.BoolVal)(nil),             // 16: basetypes.v1.BoolVal
	(*v1.StringSliceVal)(nil),      // 17: basetypes.v1.StringSliceVal
}
var file_npool_chain_mw_v1_app_coin_coin_proto_depIdxs = []int32{
	15, // 0: chain.middleware.app.coin.v1.Conds.ID:type_name -> basetypes.v1.StringVal
	15, // 1: chain.middleware.app.coin.v1.Conds.AppID:type_name -> basetypes.v1.StringVal
	15, // 2: chain.middleware.app.coin.v1.Conds.CoinTypeID:type_name -> basetypes.v1.StringVal
	16, // 3: chain.middleware.app.coin.v1.Conds.ForPay:type_name -> basetypes.v1.BoolVal
	16, // 4: chain.middleware.app.coin.v1.Conds.Disabled:type_name -> basetypes.v1.BoolVal
	17, // 5: chain.middleware.app.coin.v1.Conds.IDs:type_name -> basetypes.v1.StringSliceVal
	17, // 6: chain.middleware.app.coin.v1.Conds.CoinTypeIDs:type_name -> basetypes.v1.StringSliceVal
	0,  // 7: chain.middleware.app.coin.v1.CreateCoinRequest.Info:type_name -> chain.middleware.app.coin.v1.CoinReq
	1,  // 8: chain.middleware.app.coin.v1.CreateCoinResponse.Info:type_name -> chain.middleware.app.coin.v1.Coin
	1,  // 9: chain.middleware.app.coin.v1.GetCoinResponse.Info:type_name -> chain.middleware.app.coin.v1.Coin
<<<<<<< HEAD
	2,  // 10: chain.middleware.app.coin.v1.GetCoinOnlyRequest.Conds:type_name -> chain.middleware.app.coin.v1.Conds
	1,  // 11: chain.middleware.app.coin.v1.GetCoinOnlyResponse.Info:type_name -> chain.middleware.app.coin.v1.Coin
	2,  // 12: chain.middleware.app.coin.v1.GetCoinsRequest.Conds:type_name -> chain.middleware.app.coin.v1.Conds
	1,  // 13: chain.middleware.app.coin.v1.GetCoinsResponse.Infos:type_name -> chain.middleware.app.coin.v1.Coin
	0,  // 14: chain.middleware.app.coin.v1.UpdateCoinRequest.Info:type_name -> chain.middleware.app.coin.v1.CoinReq
	1,  // 15: chain.middleware.app.coin.v1.UpdateCoinResponse.Info:type_name -> chain.middleware.app.coin.v1.Coin
	1,  // 16: chain.middleware.app.coin.v1.DeleteCoinResponse.Info:type_name -> chain.middleware.app.coin.v1.Coin
	3,  // 17: chain.middleware.app.coin.v1.Middleware.CreateCoin:input_type -> chain.middleware.app.coin.v1.CreateCoinRequest
	5,  // 18: chain.middleware.app.coin.v1.Middleware.GetCoin:input_type -> chain.middleware.app.coin.v1.GetCoinRequest
	7,  // 19: chain.middleware.app.coin.v1.Middleware.GetCoinOnly:input_type -> chain.middleware.app.coin.v1.GetCoinOnlyRequest
	9,  // 20: chain.middleware.app.coin.v1.Middleware.GetCoins:input_type -> chain.middleware.app.coin.v1.GetCoinsRequest
	11, // 21: chain.middleware.app.coin.v1.Middleware.UpdateCoin:input_type -> chain.middleware.app.coin.v1.UpdateCoinRequest
	13, // 22: chain.middleware.app.coin.v1.Middleware.DeleteCoin:input_type -> chain.middleware.app.coin.v1.DeleteCoinRequest
	4,  // 23: chain.middleware.app.coin.v1.Middleware.CreateCoin:output_type -> chain.middleware.app.coin.v1.CreateCoinResponse
	6,  // 24: chain.middleware.app.coin.v1.Middleware.GetCoin:output_type -> chain.middleware.app.coin.v1.GetCoinResponse
	8,  // 25: chain.middleware.app.coin.v1.Middleware.GetCoinOnly:output_type -> chain.middleware.app.coin.v1.GetCoinOnlyResponse
	10, // 26: chain.middleware.app.coin.v1.Middleware.GetCoins:output_type -> chain.middleware.app.coin.v1.GetCoinsResponse
	12, // 27: chain.middleware.app.coin.v1.Middleware.UpdateCoin:output_type -> chain.middleware.app.coin.v1.UpdateCoinResponse
	14, // 28: chain.middleware.app.coin.v1.Middleware.DeleteCoin:output_type -> chain.middleware.app.coin.v1.DeleteCoinResponse
	23, // [23:29] is the sub-list for method output_type
	17, // [17:23] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
>>>>>>> Add app coin exrate
=======
	2,  // 10: chain.middleware.app.coin.v1.GetCoinsRequest.Conds:type_name -> chain.middleware.app.coin.v1.Conds
	1,  // 11: chain.middleware.app.coin.v1.GetCoinsResponse.Infos:type_name -> chain.middleware.app.coin.v1.Coin
<<<<<<< HEAD
	0,  // 12: chain.middleware.app.coin.v1.UpdateCoinRequest.Info:type_name -> chain.middleware.app.coin.v1.CoinReq
	1,  // 13: chain.middleware.app.coin.v1.UpdateCoinResponse.Info:type_name -> chain.middleware.app.coin.v1.Coin
<<<<<<< HEAD
	1,  // 14: chain.middleware.app.coin.v1.DeleteCoinResponse.Info:type_name -> chain.middleware.app.coin.v1.Coin
	3,  // 15: chain.middleware.app.coin.v1.Middleware.CreateCoin:input_type -> chain.middleware.app.coin.v1.CreateCoinRequest
	5,  // 16: chain.middleware.app.coin.v1.Middleware.GetCoin:input_type -> chain.middleware.app.coin.v1.GetCoinRequest
	7,  // 17: chain.middleware.app.coin.v1.Middleware.GetCoins:input_type -> chain.middleware.app.coin.v1.GetCoinsRequest
	9,  // 18: chain.middleware.app.coin.v1.Middleware.UpdateCoin:input_type -> chain.middleware.app.coin.v1.UpdateCoinRequest
	11, // 19: chain.middleware.app.coin.v1.Middleware.DeleteCoin:input_type -> chain.middleware.app.coin.v1.DeleteCoinRequest
	4,  // 20: chain.middleware.app.coin.v1.Middleware.CreateCoin:output_type -> chain.middleware.app.coin.v1.CreateCoinResponse
	6,  // 21: chain.middleware.app.coin.v1.Middleware.GetCoin:output_type -> chain.middleware.app.coin.v1.GetCoinResponse
	8,  // 22: chain.middleware.app.coin.v1.Middleware.GetCoins:output_type -> chain.middleware.app.coin.v1.GetCoinsResponse
	10, // 23: chain.middleware.app.coin.v1.Middleware.UpdateCoin:output_type -> chain.middleware.app.coin.v1.UpdateCoinResponse
	12, // 24: chain.middleware.app.coin.v1.Middleware.DeleteCoin:output_type -> chain.middleware.app.coin.v1.DeleteCoinResponse
	20, // [20:25] is the sub-list for method output_type
	15, // [15:20] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
>>>>>>> Remove only api of appcoin
=======
	0,  // 14: chain.middleware.app.coin.v1.DeleteCoinRequest.Info:type_name -> chain.middleware.app.coin.v1.CoinReq
	1,  // 15: chain.middleware.app.coin.v1.DeleteCoinResponse.Info:type_name -> chain.middleware.app.coin.v1.Coin
	3,  // 16: chain.middleware.app.coin.v1.Middleware.CreateCoin:input_type -> chain.middleware.app.coin.v1.CreateCoinRequest
	5,  // 17: chain.middleware.app.coin.v1.Middleware.GetCoin:input_type -> chain.middleware.app.coin.v1.GetCoinRequest
	7,  // 18: chain.middleware.app.coin.v1.Middleware.GetCoins:input_type -> chain.middleware.app.coin.v1.GetCoinsRequest
	9,  // 19: chain.middleware.app.coin.v1.Middleware.UpdateCoin:input_type -> chain.middleware.app.coin.v1.UpdateCoinRequest
	11, // 20: chain.middleware.app.coin.v1.Middleware.DeleteCoin:input_type -> chain.middleware.app.coin.v1.DeleteCoinRequest
	4,  // 21: chain.middleware.app.coin.v1.Middleware.CreateCoin:output_type -> chain.middleware.app.coin.v1.CreateCoinResponse
	6,  // 22: chain.middleware.app.coin.v1.Middleware.GetCoin:output_type -> chain.middleware.app.coin.v1.GetCoinResponse
	8,  // 23: chain.middleware.app.coin.v1.Middleware.GetCoins:output_type -> chain.middleware.app.coin.v1.GetCoinsResponse
	10, // 24: chain.middleware.app.coin.v1.Middleware.UpdateCoin:output_type -> chain.middleware.app.coin.v1.UpdateCoinResponse
	12, // 25: chain.middleware.app.coin.v1.Middleware.DeleteCoin:output_type -> chain.middleware.app.coin.v1.DeleteCoinResponse
	21, // [21:26] is the sub-list for method output_type
	16, // [16:21] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
>>>>>>> Add delete coin api
=======
	2,  // 12: chain.middleware.app.coin.v1.ExistCoinCondsRequest.Conds:type_name -> chain.middleware.app.coin.v1.Conds
	0,  // 13: chain.middleware.app.coin.v1.UpdateCoinRequest.Info:type_name -> chain.middleware.app.coin.v1.CoinReq
	1,  // 14: chain.middleware.app.coin.v1.UpdateCoinResponse.Info:type_name -> chain.middleware.app.coin.v1.Coin
	0,  // 15: chain.middleware.app.coin.v1.DeleteCoinRequest.Info:type_name -> chain.middleware.app.coin.v1.CoinReq
	1,  // 16: chain.middleware.app.coin.v1.DeleteCoinResponse.Info:type_name -> chain.middleware.app.coin.v1.Coin
	3,  // 17: chain.middleware.app.coin.v1.Middleware.CreateCoin:input_type -> chain.middleware.app.coin.v1.CreateCoinRequest
	5,  // 18: chain.middleware.app.coin.v1.Middleware.GetCoin:input_type -> chain.middleware.app.coin.v1.GetCoinRequest
	7,  // 19: chain.middleware.app.coin.v1.Middleware.GetCoins:input_type -> chain.middleware.app.coin.v1.GetCoinsRequest
	9,  // 20: chain.middleware.app.coin.v1.Middleware.ExistCoinConds:input_type -> chain.middleware.app.coin.v1.ExistCoinCondsRequest
	11, // 21: chain.middleware.app.coin.v1.Middleware.UpdateCoin:input_type -> chain.middleware.app.coin.v1.UpdateCoinRequest
	13, // 22: chain.middleware.app.coin.v1.Middleware.DeleteCoin:input_type -> chain.middleware.app.coin.v1.DeleteCoinRequest
	4,  // 23: chain.middleware.app.coin.v1.Middleware.CreateCoin:output_type -> chain.middleware.app.coin.v1.CreateCoinResponse
	6,  // 24: chain.middleware.app.coin.v1.Middleware.GetCoin:output_type -> chain.middleware.app.coin.v1.GetCoinResponse
	8,  // 25: chain.middleware.app.coin.v1.Middleware.GetCoins:output_type -> chain.middleware.app.coin.v1.GetCoinsResponse
	10, // 26: chain.middleware.app.coin.v1.Middleware.ExistCoinConds:output_type -> chain.middleware.app.coin.v1.ExistCoinCondsResponse
	12, // 27: chain.middleware.app.coin.v1.Middleware.UpdateCoin:output_type -> chain.middleware.app.coin.v1.UpdateCoinResponse
	14, // 28: chain.middleware.app.coin.v1.Middleware.DeleteCoin:output_type -> chain.middleware.app.coin.v1.DeleteCoinResponse
	23, // [23:29] is the sub-list for method output_type
	17, // [17:23] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
>>>>>>> Add exist api
}

func init() { file_npool_chain_mw_v1_app_coin_coin_proto_init() }
func file_npool_chain_mw_v1_app_coin_coin_proto_init() {
	if File_npool_chain_mw_v1_app_coin_coin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Coin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCoinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
<<<<<<< HEAD
<<<<<<< HEAD
			switch v := v.(*GetCoinsRequest); i {
=======
			switch v := v.(*GetCoinOnlyRequest); i {
>>>>>>> Add app coin exrate
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
<<<<<<< HEAD
			switch v := v.(*GetCoinsResponse); i {
=======
			switch v := v.(*GetCoinOnlyResponse); i {
>>>>>>> Add app coin exrate
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
<<<<<<< HEAD
<<<<<<< HEAD
			switch v := v.(*UpdateCoinRequest); i {
=======
=======
>>>>>>> Remove only api of appcoin
			switch v := v.(*GetCoinsRequest); i {
>>>>>>> Add app coin exrate
=======
			switch v := v.(*ExistCoinCondsRequest); i {
>>>>>>> Add exist api
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
<<<<<<< HEAD
		file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
<<<<<<< HEAD
<<<<<<< HEAD
			switch v := v.(*UpdateCoinResponse); i {
=======
=======
		file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
>>>>>>> Remove only api of appcoin
			switch v := v.(*GetCoinsResponse); i {
>>>>>>> Add app coin exrate
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
<<<<<<< HEAD
		file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
<<<<<<< HEAD
			switch v := v.(*DeleteCoinRequest); i {
=======
=======
		file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
>>>>>>> Remove only api of appcoin
			switch v := v.(*UpdateCoinRequest); i {
>>>>>>> Add app coin exrate
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
<<<<<<< HEAD
		file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
<<<<<<< HEAD
=======
=======
		file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
>>>>>>> Remove only api of appcoin
			switch v := v.(*UpdateCoinResponse); i {
=======
			switch v := v.(*ExistCoinCondsResponse); i {
>>>>>>> Add exist api
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
<<<<<<< HEAD
		file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
>>>>>>> Add app coin exrate
=======
		file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
<<<<<<< HEAD
>>>>>>> Remove only api of appcoin
=======
			switch v := v.(*UpdateCoinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
>>>>>>> Add exist api
			switch v := v.(*DeleteCoinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_chain_mw_v1_app_coin_coin_proto_rawDesc,
			NumEnums:      0,
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
			NumMessages:   13,
=======
			NumMessages:   15,
>>>>>>> Add app coin exrate
=======
			NumMessages:   13,
>>>>>>> Remove only api of appcoin
=======
			NumMessages:   15,
>>>>>>> Add exist api
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_chain_mw_v1_app_coin_coin_proto_goTypes,
		DependencyIndexes: file_npool_chain_mw_v1_app_coin_coin_proto_depIdxs,
		MessageInfos:      file_npool_chain_mw_v1_app_coin_coin_proto_msgTypes,
	}.Build()
	File_npool_chain_mw_v1_app_coin_coin_proto = out.File
	file_npool_chain_mw_v1_app_coin_coin_proto_rawDesc = nil
	file_npool_chain_mw_v1_app_coin_coin_proto_goTypes = nil
	file_npool_chain_mw_v1_app_coin_coin_proto_depIdxs = nil
}
