// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/chain/mgr/v1/appcoin/description/description.proto

package description

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Manager_CreateCoinDescription_FullMethodName     = "/chain.manager.appcoin.description.v1.Manager/CreateCoinDescription"
	Manager_CreateCoinDescriptions_FullMethodName    = "/chain.manager.appcoin.description.v1.Manager/CreateCoinDescriptions"
	Manager_UpdateCoinDescription_FullMethodName     = "/chain.manager.appcoin.description.v1.Manager/UpdateCoinDescription"
	Manager_GetCoinDescription_FullMethodName        = "/chain.manager.appcoin.description.v1.Manager/GetCoinDescription"
	Manager_GetCoinDescriptionOnly_FullMethodName    = "/chain.manager.appcoin.description.v1.Manager/GetCoinDescriptionOnly"
	Manager_GetCoinDescriptions_FullMethodName       = "/chain.manager.appcoin.description.v1.Manager/GetCoinDescriptions"
	Manager_ExistCoinDescription_FullMethodName      = "/chain.manager.appcoin.description.v1.Manager/ExistCoinDescription"
	Manager_ExistCoinDescriptionConds_FullMethodName = "/chain.manager.appcoin.description.v1.Manager/ExistCoinDescriptionConds"
	Manager_CountCoinDescriptions_FullMethodName     = "/chain.manager.appcoin.description.v1.Manager/CountCoinDescriptions"
	Manager_DeleteCoinDescription_FullMethodName     = "/chain.manager.appcoin.description.v1.Manager/DeleteCoinDescription"
)

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateCoinDescription(ctx context.Context, in *CreateCoinDescriptionRequest, opts ...grpc.CallOption) (*CreateCoinDescriptionResponse, error)
	CreateCoinDescriptions(ctx context.Context, in *CreateCoinDescriptionsRequest, opts ...grpc.CallOption) (*CreateCoinDescriptionsResponse, error)
	UpdateCoinDescription(ctx context.Context, in *UpdateCoinDescriptionRequest, opts ...grpc.CallOption) (*UpdateCoinDescriptionResponse, error)
	GetCoinDescription(ctx context.Context, in *GetCoinDescriptionRequest, opts ...grpc.CallOption) (*GetCoinDescriptionResponse, error)
	GetCoinDescriptionOnly(ctx context.Context, in *GetCoinDescriptionOnlyRequest, opts ...grpc.CallOption) (*GetCoinDescriptionOnlyResponse, error)
	GetCoinDescriptions(ctx context.Context, in *GetCoinDescriptionsRequest, opts ...grpc.CallOption) (*GetCoinDescriptionsResponse, error)
	ExistCoinDescription(ctx context.Context, in *ExistCoinDescriptionRequest, opts ...grpc.CallOption) (*ExistCoinDescriptionResponse, error)
	ExistCoinDescriptionConds(ctx context.Context, in *ExistCoinDescriptionCondsRequest, opts ...grpc.CallOption) (*ExistCoinDescriptionCondsResponse, error)
	CountCoinDescriptions(ctx context.Context, in *CountCoinDescriptionsRequest, opts ...grpc.CallOption) (*CountCoinDescriptionsResponse, error)
	DeleteCoinDescription(ctx context.Context, in *DeleteCoinDescriptionRequest, opts ...grpc.CallOption) (*DeleteCoinDescriptionResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateCoinDescription(ctx context.Context, in *CreateCoinDescriptionRequest, opts ...grpc.CallOption) (*CreateCoinDescriptionResponse, error) {
	out := new(CreateCoinDescriptionResponse)
	err := c.cc.Invoke(ctx, Manager_CreateCoinDescription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateCoinDescriptions(ctx context.Context, in *CreateCoinDescriptionsRequest, opts ...grpc.CallOption) (*CreateCoinDescriptionsResponse, error) {
	out := new(CreateCoinDescriptionsResponse)
	err := c.cc.Invoke(ctx, Manager_CreateCoinDescriptions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateCoinDescription(ctx context.Context, in *UpdateCoinDescriptionRequest, opts ...grpc.CallOption) (*UpdateCoinDescriptionResponse, error) {
	out := new(UpdateCoinDescriptionResponse)
	err := c.cc.Invoke(ctx, Manager_UpdateCoinDescription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetCoinDescription(ctx context.Context, in *GetCoinDescriptionRequest, opts ...grpc.CallOption) (*GetCoinDescriptionResponse, error) {
	out := new(GetCoinDescriptionResponse)
	err := c.cc.Invoke(ctx, Manager_GetCoinDescription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetCoinDescriptionOnly(ctx context.Context, in *GetCoinDescriptionOnlyRequest, opts ...grpc.CallOption) (*GetCoinDescriptionOnlyResponse, error) {
	out := new(GetCoinDescriptionOnlyResponse)
	err := c.cc.Invoke(ctx, Manager_GetCoinDescriptionOnly_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetCoinDescriptions(ctx context.Context, in *GetCoinDescriptionsRequest, opts ...grpc.CallOption) (*GetCoinDescriptionsResponse, error) {
	out := new(GetCoinDescriptionsResponse)
	err := c.cc.Invoke(ctx, Manager_GetCoinDescriptions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistCoinDescription(ctx context.Context, in *ExistCoinDescriptionRequest, opts ...grpc.CallOption) (*ExistCoinDescriptionResponse, error) {
	out := new(ExistCoinDescriptionResponse)
	err := c.cc.Invoke(ctx, Manager_ExistCoinDescription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistCoinDescriptionConds(ctx context.Context, in *ExistCoinDescriptionCondsRequest, opts ...grpc.CallOption) (*ExistCoinDescriptionCondsResponse, error) {
	out := new(ExistCoinDescriptionCondsResponse)
	err := c.cc.Invoke(ctx, Manager_ExistCoinDescriptionConds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountCoinDescriptions(ctx context.Context, in *CountCoinDescriptionsRequest, opts ...grpc.CallOption) (*CountCoinDescriptionsResponse, error) {
	out := new(CountCoinDescriptionsResponse)
	err := c.cc.Invoke(ctx, Manager_CountCoinDescriptions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteCoinDescription(ctx context.Context, in *DeleteCoinDescriptionRequest, opts ...grpc.CallOption) (*DeleteCoinDescriptionResponse, error) {
	out := new(DeleteCoinDescriptionResponse)
	err := c.cc.Invoke(ctx, Manager_DeleteCoinDescription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateCoinDescription(context.Context, *CreateCoinDescriptionRequest) (*CreateCoinDescriptionResponse, error)
	CreateCoinDescriptions(context.Context, *CreateCoinDescriptionsRequest) (*CreateCoinDescriptionsResponse, error)
	UpdateCoinDescription(context.Context, *UpdateCoinDescriptionRequest) (*UpdateCoinDescriptionResponse, error)
	GetCoinDescription(context.Context, *GetCoinDescriptionRequest) (*GetCoinDescriptionResponse, error)
	GetCoinDescriptionOnly(context.Context, *GetCoinDescriptionOnlyRequest) (*GetCoinDescriptionOnlyResponse, error)
	GetCoinDescriptions(context.Context, *GetCoinDescriptionsRequest) (*GetCoinDescriptionsResponse, error)
	ExistCoinDescription(context.Context, *ExistCoinDescriptionRequest) (*ExistCoinDescriptionResponse, error)
	ExistCoinDescriptionConds(context.Context, *ExistCoinDescriptionCondsRequest) (*ExistCoinDescriptionCondsResponse, error)
	CountCoinDescriptions(context.Context, *CountCoinDescriptionsRequest) (*CountCoinDescriptionsResponse, error)
	DeleteCoinDescription(context.Context, *DeleteCoinDescriptionRequest) (*DeleteCoinDescriptionResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateCoinDescription(context.Context, *CreateCoinDescriptionRequest) (*CreateCoinDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCoinDescription not implemented")
}
func (UnimplementedManagerServer) CreateCoinDescriptions(context.Context, *CreateCoinDescriptionsRequest) (*CreateCoinDescriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCoinDescriptions not implemented")
}
func (UnimplementedManagerServer) UpdateCoinDescription(context.Context, *UpdateCoinDescriptionRequest) (*UpdateCoinDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCoinDescription not implemented")
}
func (UnimplementedManagerServer) GetCoinDescription(context.Context, *GetCoinDescriptionRequest) (*GetCoinDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinDescription not implemented")
}
func (UnimplementedManagerServer) GetCoinDescriptionOnly(context.Context, *GetCoinDescriptionOnlyRequest) (*GetCoinDescriptionOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinDescriptionOnly not implemented")
}
func (UnimplementedManagerServer) GetCoinDescriptions(context.Context, *GetCoinDescriptionsRequest) (*GetCoinDescriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinDescriptions not implemented")
}
func (UnimplementedManagerServer) ExistCoinDescription(context.Context, *ExistCoinDescriptionRequest) (*ExistCoinDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistCoinDescription not implemented")
}
func (UnimplementedManagerServer) ExistCoinDescriptionConds(context.Context, *ExistCoinDescriptionCondsRequest) (*ExistCoinDescriptionCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistCoinDescriptionConds not implemented")
}
func (UnimplementedManagerServer) CountCoinDescriptions(context.Context, *CountCoinDescriptionsRequest) (*CountCoinDescriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountCoinDescriptions not implemented")
}
func (UnimplementedManagerServer) DeleteCoinDescription(context.Context, *DeleteCoinDescriptionRequest) (*DeleteCoinDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCoinDescription not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateCoinDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCoinDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateCoinDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_CreateCoinDescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateCoinDescription(ctx, req.(*CreateCoinDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateCoinDescriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCoinDescriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateCoinDescriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_CreateCoinDescriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateCoinDescriptions(ctx, req.(*CreateCoinDescriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateCoinDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCoinDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateCoinDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_UpdateCoinDescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateCoinDescription(ctx, req.(*UpdateCoinDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetCoinDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetCoinDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetCoinDescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetCoinDescription(ctx, req.(*GetCoinDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetCoinDescriptionOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinDescriptionOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetCoinDescriptionOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetCoinDescriptionOnly_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetCoinDescriptionOnly(ctx, req.(*GetCoinDescriptionOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetCoinDescriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinDescriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetCoinDescriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetCoinDescriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetCoinDescriptions(ctx, req.(*GetCoinDescriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistCoinDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistCoinDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistCoinDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_ExistCoinDescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistCoinDescription(ctx, req.(*ExistCoinDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistCoinDescriptionConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistCoinDescriptionCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistCoinDescriptionConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_ExistCoinDescriptionConds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistCoinDescriptionConds(ctx, req.(*ExistCoinDescriptionCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountCoinDescriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountCoinDescriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountCoinDescriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_CountCoinDescriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountCoinDescriptions(ctx, req.(*CountCoinDescriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteCoinDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCoinDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteCoinDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_DeleteCoinDescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteCoinDescription(ctx, req.(*DeleteCoinDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chain.manager.appcoin.description.v1.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCoinDescription",
			Handler:    _Manager_CreateCoinDescription_Handler,
		},
		{
			MethodName: "CreateCoinDescriptions",
			Handler:    _Manager_CreateCoinDescriptions_Handler,
		},
		{
			MethodName: "UpdateCoinDescription",
			Handler:    _Manager_UpdateCoinDescription_Handler,
		},
		{
			MethodName: "GetCoinDescription",
			Handler:    _Manager_GetCoinDescription_Handler,
		},
		{
			MethodName: "GetCoinDescriptionOnly",
			Handler:    _Manager_GetCoinDescriptionOnly_Handler,
		},
		{
			MethodName: "GetCoinDescriptions",
			Handler:    _Manager_GetCoinDescriptions_Handler,
		},
		{
			MethodName: "ExistCoinDescription",
			Handler:    _Manager_ExistCoinDescription_Handler,
		},
		{
			MethodName: "ExistCoinDescriptionConds",
			Handler:    _Manager_ExistCoinDescriptionConds_Handler,
		},
		{
			MethodName: "CountCoinDescriptions",
			Handler:    _Manager_CountCoinDescriptions_Handler,
		},
		{
			MethodName: "DeleteCoinDescription",
			Handler:    _Manager_DeleteCoinDescription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/chain/mgr/v1/appcoin/description/description.proto",
}
