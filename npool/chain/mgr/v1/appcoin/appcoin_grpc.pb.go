// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/chain/mgr/v1/appcoin/appcoin.proto

package appcoin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Manager_CreateAppCoin_FullMethodName     = "/chain.manager.appcoin.v1.Manager/CreateAppCoin"
	Manager_CreateAppCoins_FullMethodName    = "/chain.manager.appcoin.v1.Manager/CreateAppCoins"
	Manager_UpdateAppCoin_FullMethodName     = "/chain.manager.appcoin.v1.Manager/UpdateAppCoin"
	Manager_GetAppCoin_FullMethodName        = "/chain.manager.appcoin.v1.Manager/GetAppCoin"
	Manager_GetAppCoinOnly_FullMethodName    = "/chain.manager.appcoin.v1.Manager/GetAppCoinOnly"
	Manager_GetAppCoins_FullMethodName       = "/chain.manager.appcoin.v1.Manager/GetAppCoins"
	Manager_ExistAppCoin_FullMethodName      = "/chain.manager.appcoin.v1.Manager/ExistAppCoin"
	Manager_ExistAppCoinConds_FullMethodName = "/chain.manager.appcoin.v1.Manager/ExistAppCoinConds"
	Manager_CountAppCoins_FullMethodName     = "/chain.manager.appcoin.v1.Manager/CountAppCoins"
	Manager_DeleteAppCoin_FullMethodName     = "/chain.manager.appcoin.v1.Manager/DeleteAppCoin"
)

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateAppCoin(ctx context.Context, in *CreateAppCoinRequest, opts ...grpc.CallOption) (*CreateAppCoinResponse, error)
	CreateAppCoins(ctx context.Context, in *CreateAppCoinsRequest, opts ...grpc.CallOption) (*CreateAppCoinsResponse, error)
	UpdateAppCoin(ctx context.Context, in *UpdateAppCoinRequest, opts ...grpc.CallOption) (*UpdateAppCoinResponse, error)
	GetAppCoin(ctx context.Context, in *GetAppCoinRequest, opts ...grpc.CallOption) (*GetAppCoinResponse, error)
	GetAppCoinOnly(ctx context.Context, in *GetAppCoinOnlyRequest, opts ...grpc.CallOption) (*GetAppCoinOnlyResponse, error)
	GetAppCoins(ctx context.Context, in *GetAppCoinsRequest, opts ...grpc.CallOption) (*GetAppCoinsResponse, error)
	ExistAppCoin(ctx context.Context, in *ExistAppCoinRequest, opts ...grpc.CallOption) (*ExistAppCoinResponse, error)
	ExistAppCoinConds(ctx context.Context, in *ExistAppCoinCondsRequest, opts ...grpc.CallOption) (*ExistAppCoinCondsResponse, error)
	CountAppCoins(ctx context.Context, in *CountAppCoinsRequest, opts ...grpc.CallOption) (*CountAppCoinsResponse, error)
	DeleteAppCoin(ctx context.Context, in *DeleteAppCoinRequest, opts ...grpc.CallOption) (*DeleteAppCoinResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateAppCoin(ctx context.Context, in *CreateAppCoinRequest, opts ...grpc.CallOption) (*CreateAppCoinResponse, error) {
	out := new(CreateAppCoinResponse)
	err := c.cc.Invoke(ctx, Manager_CreateAppCoin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateAppCoins(ctx context.Context, in *CreateAppCoinsRequest, opts ...grpc.CallOption) (*CreateAppCoinsResponse, error) {
	out := new(CreateAppCoinsResponse)
	err := c.cc.Invoke(ctx, Manager_CreateAppCoins_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateAppCoin(ctx context.Context, in *UpdateAppCoinRequest, opts ...grpc.CallOption) (*UpdateAppCoinResponse, error) {
	out := new(UpdateAppCoinResponse)
	err := c.cc.Invoke(ctx, Manager_UpdateAppCoin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetAppCoin(ctx context.Context, in *GetAppCoinRequest, opts ...grpc.CallOption) (*GetAppCoinResponse, error) {
	out := new(GetAppCoinResponse)
	err := c.cc.Invoke(ctx, Manager_GetAppCoin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetAppCoinOnly(ctx context.Context, in *GetAppCoinOnlyRequest, opts ...grpc.CallOption) (*GetAppCoinOnlyResponse, error) {
	out := new(GetAppCoinOnlyResponse)
	err := c.cc.Invoke(ctx, Manager_GetAppCoinOnly_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetAppCoins(ctx context.Context, in *GetAppCoinsRequest, opts ...grpc.CallOption) (*GetAppCoinsResponse, error) {
	out := new(GetAppCoinsResponse)
	err := c.cc.Invoke(ctx, Manager_GetAppCoins_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistAppCoin(ctx context.Context, in *ExistAppCoinRequest, opts ...grpc.CallOption) (*ExistAppCoinResponse, error) {
	out := new(ExistAppCoinResponse)
	err := c.cc.Invoke(ctx, Manager_ExistAppCoin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistAppCoinConds(ctx context.Context, in *ExistAppCoinCondsRequest, opts ...grpc.CallOption) (*ExistAppCoinCondsResponse, error) {
	out := new(ExistAppCoinCondsResponse)
	err := c.cc.Invoke(ctx, Manager_ExistAppCoinConds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountAppCoins(ctx context.Context, in *CountAppCoinsRequest, opts ...grpc.CallOption) (*CountAppCoinsResponse, error) {
	out := new(CountAppCoinsResponse)
	err := c.cc.Invoke(ctx, Manager_CountAppCoins_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteAppCoin(ctx context.Context, in *DeleteAppCoinRequest, opts ...grpc.CallOption) (*DeleteAppCoinResponse, error) {
	out := new(DeleteAppCoinResponse)
	err := c.cc.Invoke(ctx, Manager_DeleteAppCoin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateAppCoin(context.Context, *CreateAppCoinRequest) (*CreateAppCoinResponse, error)
	CreateAppCoins(context.Context, *CreateAppCoinsRequest) (*CreateAppCoinsResponse, error)
	UpdateAppCoin(context.Context, *UpdateAppCoinRequest) (*UpdateAppCoinResponse, error)
	GetAppCoin(context.Context, *GetAppCoinRequest) (*GetAppCoinResponse, error)
	GetAppCoinOnly(context.Context, *GetAppCoinOnlyRequest) (*GetAppCoinOnlyResponse, error)
	GetAppCoins(context.Context, *GetAppCoinsRequest) (*GetAppCoinsResponse, error)
	ExistAppCoin(context.Context, *ExistAppCoinRequest) (*ExistAppCoinResponse, error)
	ExistAppCoinConds(context.Context, *ExistAppCoinCondsRequest) (*ExistAppCoinCondsResponse, error)
	CountAppCoins(context.Context, *CountAppCoinsRequest) (*CountAppCoinsResponse, error)
	DeleteAppCoin(context.Context, *DeleteAppCoinRequest) (*DeleteAppCoinResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateAppCoin(context.Context, *CreateAppCoinRequest) (*CreateAppCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppCoin not implemented")
}
func (UnimplementedManagerServer) CreateAppCoins(context.Context, *CreateAppCoinsRequest) (*CreateAppCoinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppCoins not implemented")
}
func (UnimplementedManagerServer) UpdateAppCoin(context.Context, *UpdateAppCoinRequest) (*UpdateAppCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppCoin not implemented")
}
func (UnimplementedManagerServer) GetAppCoin(context.Context, *GetAppCoinRequest) (*GetAppCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppCoin not implemented")
}
func (UnimplementedManagerServer) GetAppCoinOnly(context.Context, *GetAppCoinOnlyRequest) (*GetAppCoinOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppCoinOnly not implemented")
}
func (UnimplementedManagerServer) GetAppCoins(context.Context, *GetAppCoinsRequest) (*GetAppCoinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppCoins not implemented")
}
func (UnimplementedManagerServer) ExistAppCoin(context.Context, *ExistAppCoinRequest) (*ExistAppCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistAppCoin not implemented")
}
func (UnimplementedManagerServer) ExistAppCoinConds(context.Context, *ExistAppCoinCondsRequest) (*ExistAppCoinCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistAppCoinConds not implemented")
}
func (UnimplementedManagerServer) CountAppCoins(context.Context, *CountAppCoinsRequest) (*CountAppCoinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAppCoins not implemented")
}
func (UnimplementedManagerServer) DeleteAppCoin(context.Context, *DeleteAppCoinRequest) (*DeleteAppCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppCoin not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateAppCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateAppCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_CreateAppCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateAppCoin(ctx, req.(*CreateAppCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateAppCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppCoinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateAppCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_CreateAppCoins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateAppCoins(ctx, req.(*CreateAppCoinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateAppCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateAppCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_UpdateAppCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateAppCoin(ctx, req.(*UpdateAppCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetAppCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetAppCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetAppCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetAppCoin(ctx, req.(*GetAppCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetAppCoinOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppCoinOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetAppCoinOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetAppCoinOnly_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetAppCoinOnly(ctx, req.(*GetAppCoinOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetAppCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppCoinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetAppCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetAppCoins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetAppCoins(ctx, req.(*GetAppCoinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistAppCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistAppCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistAppCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_ExistAppCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistAppCoin(ctx, req.(*ExistAppCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistAppCoinConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistAppCoinCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistAppCoinConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_ExistAppCoinConds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistAppCoinConds(ctx, req.(*ExistAppCoinCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountAppCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAppCoinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountAppCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_CountAppCoins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountAppCoins(ctx, req.(*CountAppCoinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteAppCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteAppCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_DeleteAppCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteAppCoin(ctx, req.(*DeleteAppCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chain.manager.appcoin.v1.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAppCoin",
			Handler:    _Manager_CreateAppCoin_Handler,
		},
		{
			MethodName: "CreateAppCoins",
			Handler:    _Manager_CreateAppCoins_Handler,
		},
		{
			MethodName: "UpdateAppCoin",
			Handler:    _Manager_UpdateAppCoin_Handler,
		},
		{
			MethodName: "GetAppCoin",
			Handler:    _Manager_GetAppCoin_Handler,
		},
		{
			MethodName: "GetAppCoinOnly",
			Handler:    _Manager_GetAppCoinOnly_Handler,
		},
		{
			MethodName: "GetAppCoins",
			Handler:    _Manager_GetAppCoins_Handler,
		},
		{
			MethodName: "ExistAppCoin",
			Handler:    _Manager_ExistAppCoin_Handler,
		},
		{
			MethodName: "ExistAppCoinConds",
			Handler:    _Manager_ExistAppCoinConds_Handler,
		},
		{
			MethodName: "CountAppCoins",
			Handler:    _Manager_CountAppCoins_Handler,
		},
		{
			MethodName: "DeleteAppCoin",
			Handler:    _Manager_DeleteAppCoin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/chain/mgr/v1/appcoin/appcoin.proto",
}
