// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/chain/mgr/v1/tx/tx.proto

package tx

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateTx(ctx context.Context, in *CreateTxRequest, opts ...grpc.CallOption) (*CreateTxResponse, error)
	CreateTxs(ctx context.Context, in *CreateTxsRequest, opts ...grpc.CallOption) (*CreateTxsResponse, error)
	AddTx(ctx context.Context, in *AddTxRequest, opts ...grpc.CallOption) (*AddTxResponse, error)
	GetTx(ctx context.Context, in *GetTxRequest, opts ...grpc.CallOption) (*GetTxResponse, error)
	GetTxOnly(ctx context.Context, in *GetTxOnlyRequest, opts ...grpc.CallOption) (*GetTxOnlyResponse, error)
	GetTxs(ctx context.Context, in *GetTxsRequest, opts ...grpc.CallOption) (*GetTxsResponse, error)
	ExistTx(ctx context.Context, in *ExistTxRequest, opts ...grpc.CallOption) (*ExistTxResponse, error)
	ExistTxConds(ctx context.Context, in *ExistTxCondsRequest, opts ...grpc.CallOption) (*ExistTxCondsResponse, error)
	CountTxs(ctx context.Context, in *CountTxsRequest, opts ...grpc.CallOption) (*CountTxsResponse, error)
	DeleteTx(ctx context.Context, in *DeleteTxRequest, opts ...grpc.CallOption) (*DeleteTxResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateTx(ctx context.Context, in *CreateTxRequest, opts ...grpc.CallOption) (*CreateTxResponse, error) {
	out := new(CreateTxResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.tx.v1.Manager/CreateTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateTxs(ctx context.Context, in *CreateTxsRequest, opts ...grpc.CallOption) (*CreateTxsResponse, error) {
	out := new(CreateTxsResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.tx.v1.Manager/CreateTxs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) AddTx(ctx context.Context, in *AddTxRequest, opts ...grpc.CallOption) (*AddTxResponse, error) {
	out := new(AddTxResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.tx.v1.Manager/AddTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetTx(ctx context.Context, in *GetTxRequest, opts ...grpc.CallOption) (*GetTxResponse, error) {
	out := new(GetTxResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.tx.v1.Manager/GetTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetTxOnly(ctx context.Context, in *GetTxOnlyRequest, opts ...grpc.CallOption) (*GetTxOnlyResponse, error) {
	out := new(GetTxOnlyResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.tx.v1.Manager/GetTxOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetTxs(ctx context.Context, in *GetTxsRequest, opts ...grpc.CallOption) (*GetTxsResponse, error) {
	out := new(GetTxsResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.tx.v1.Manager/GetTxs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistTx(ctx context.Context, in *ExistTxRequest, opts ...grpc.CallOption) (*ExistTxResponse, error) {
	out := new(ExistTxResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.tx.v1.Manager/ExistTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistTxConds(ctx context.Context, in *ExistTxCondsRequest, opts ...grpc.CallOption) (*ExistTxCondsResponse, error) {
	out := new(ExistTxCondsResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.tx.v1.Manager/ExistTxConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountTxs(ctx context.Context, in *CountTxsRequest, opts ...grpc.CallOption) (*CountTxsResponse, error) {
	out := new(CountTxsResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.tx.v1.Manager/CountTxs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteTx(ctx context.Context, in *DeleteTxRequest, opts ...grpc.CallOption) (*DeleteTxResponse, error) {
	out := new(DeleteTxResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.tx.v1.Manager/DeleteTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateTx(context.Context, *CreateTxRequest) (*CreateTxResponse, error)
	CreateTxs(context.Context, *CreateTxsRequest) (*CreateTxsResponse, error)
	AddTx(context.Context, *AddTxRequest) (*AddTxResponse, error)
	GetTx(context.Context, *GetTxRequest) (*GetTxResponse, error)
	GetTxOnly(context.Context, *GetTxOnlyRequest) (*GetTxOnlyResponse, error)
	GetTxs(context.Context, *GetTxsRequest) (*GetTxsResponse, error)
	ExistTx(context.Context, *ExistTxRequest) (*ExistTxResponse, error)
	ExistTxConds(context.Context, *ExistTxCondsRequest) (*ExistTxCondsResponse, error)
	CountTxs(context.Context, *CountTxsRequest) (*CountTxsResponse, error)
	DeleteTx(context.Context, *DeleteTxRequest) (*DeleteTxResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateTx(context.Context, *CreateTxRequest) (*CreateTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTx not implemented")
}
func (UnimplementedManagerServer) CreateTxs(context.Context, *CreateTxsRequest) (*CreateTxsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTxs not implemented")
}
func (UnimplementedManagerServer) AddTx(context.Context, *AddTxRequest) (*AddTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTx not implemented")
}
func (UnimplementedManagerServer) GetTx(context.Context, *GetTxRequest) (*GetTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTx not implemented")
}
func (UnimplementedManagerServer) GetTxOnly(context.Context, *GetTxOnlyRequest) (*GetTxOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxOnly not implemented")
}
func (UnimplementedManagerServer) GetTxs(context.Context, *GetTxsRequest) (*GetTxsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxs not implemented")
}
func (UnimplementedManagerServer) ExistTx(context.Context, *ExistTxRequest) (*ExistTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistTx not implemented")
}
func (UnimplementedManagerServer) ExistTxConds(context.Context, *ExistTxCondsRequest) (*ExistTxCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistTxConds not implemented")
}
func (UnimplementedManagerServer) CountTxs(context.Context, *CountTxsRequest) (*CountTxsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountTxs not implemented")
}
func (UnimplementedManagerServer) DeleteTx(context.Context, *DeleteTxRequest) (*DeleteTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTx not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.tx.v1.Manager/CreateTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateTx(ctx, req.(*CreateTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateTxs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTxsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateTxs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.tx.v1.Manager/CreateTxs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateTxs(ctx, req.(*CreateTxsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_AddTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).AddTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.tx.v1.Manager/AddTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).AddTx(ctx, req.(*AddTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.tx.v1.Manager/GetTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetTx(ctx, req.(*GetTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetTxOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTxOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetTxOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.tx.v1.Manager/GetTxOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetTxOnly(ctx, req.(*GetTxOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetTxs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTxsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetTxs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.tx.v1.Manager/GetTxs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetTxs(ctx, req.(*GetTxsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.tx.v1.Manager/ExistTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistTx(ctx, req.(*ExistTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistTxConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistTxCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistTxConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.tx.v1.Manager/ExistTxConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistTxConds(ctx, req.(*ExistTxCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountTxs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountTxsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountTxs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.tx.v1.Manager/CountTxs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountTxs(ctx, req.(*CountTxsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.tx.v1.Manager/DeleteTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteTx(ctx, req.(*DeleteTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chain.manager.tx.v1.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTx",
			Handler:    _Manager_CreateTx_Handler,
		},
		{
			MethodName: "CreateTxs",
			Handler:    _Manager_CreateTxs_Handler,
		},
		{
			MethodName: "AddTx",
			Handler:    _Manager_AddTx_Handler,
		},
		{
			MethodName: "GetTx",
			Handler:    _Manager_GetTx_Handler,
		},
		{
			MethodName: "GetTxOnly",
			Handler:    _Manager_GetTxOnly_Handler,
		},
		{
			MethodName: "GetTxs",
			Handler:    _Manager_GetTxs_Handler,
		},
		{
			MethodName: "ExistTx",
			Handler:    _Manager_ExistTx_Handler,
		},
		{
			MethodName: "ExistTxConds",
			Handler:    _Manager_ExistTxConds_Handler,
		},
		{
			MethodName: "CountTxs",
			Handler:    _Manager_CountTxs_Handler,
		},
		{
			MethodName: "DeleteTx",
			Handler:    _Manager_DeleteTx_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/chain/mgr/v1/tx/tx.proto",
}
