// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/chain/mgr/v1/fiat/currency/currency.proto

package currency

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Manager_CreateFiatCurrency_FullMethodName     = "/chain.manager.fiat.currency.v1.Manager/CreateFiatCurrency"
	Manager_CreateFiatCurrencies_FullMethodName   = "/chain.manager.fiat.currency.v1.Manager/CreateFiatCurrencies"
	Manager_UpdateFiatCurrency_FullMethodName     = "/chain.manager.fiat.currency.v1.Manager/UpdateFiatCurrency"
	Manager_GetFiatCurrency_FullMethodName        = "/chain.manager.fiat.currency.v1.Manager/GetFiatCurrency"
	Manager_GetFiatCurrencyOnly_FullMethodName    = "/chain.manager.fiat.currency.v1.Manager/GetFiatCurrencyOnly"
	Manager_GetFiatCurrencies_FullMethodName      = "/chain.manager.fiat.currency.v1.Manager/GetFiatCurrencies"
	Manager_ExistFiatCurrency_FullMethodName      = "/chain.manager.fiat.currency.v1.Manager/ExistFiatCurrency"
	Manager_ExistFiatCurrencyConds_FullMethodName = "/chain.manager.fiat.currency.v1.Manager/ExistFiatCurrencyConds"
	Manager_CountFiatCurrencies_FullMethodName    = "/chain.manager.fiat.currency.v1.Manager/CountFiatCurrencies"
	Manager_DeleteFiatCurrency_FullMethodName     = "/chain.manager.fiat.currency.v1.Manager/DeleteFiatCurrency"
)

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateFiatCurrency(ctx context.Context, in *CreateFiatCurrencyRequest, opts ...grpc.CallOption) (*CreateFiatCurrencyResponse, error)
	CreateFiatCurrencies(ctx context.Context, in *CreateFiatCurrenciesRequest, opts ...grpc.CallOption) (*CreateFiatCurrenciesResponse, error)
	UpdateFiatCurrency(ctx context.Context, in *UpdateFiatCurrencyRequest, opts ...grpc.CallOption) (*UpdateFiatCurrencyResponse, error)
	GetFiatCurrency(ctx context.Context, in *GetFiatCurrencyRequest, opts ...grpc.CallOption) (*GetFiatCurrencyResponse, error)
	GetFiatCurrencyOnly(ctx context.Context, in *GetFiatCurrencyOnlyRequest, opts ...grpc.CallOption) (*GetFiatCurrencyOnlyResponse, error)
	GetFiatCurrencies(ctx context.Context, in *GetFiatCurrenciesRequest, opts ...grpc.CallOption) (*GetFiatCurrenciesResponse, error)
	ExistFiatCurrency(ctx context.Context, in *ExistFiatCurrencyRequest, opts ...grpc.CallOption) (*ExistFiatCurrencyResponse, error)
	ExistFiatCurrencyConds(ctx context.Context, in *ExistFiatCurrencyCondsRequest, opts ...grpc.CallOption) (*ExistFiatCurrencyCondsResponse, error)
	CountFiatCurrencies(ctx context.Context, in *CountFiatCurrenciesRequest, opts ...grpc.CallOption) (*CountFiatCurrenciesResponse, error)
	DeleteFiatCurrency(ctx context.Context, in *DeleteFiatCurrencyRequest, opts ...grpc.CallOption) (*DeleteFiatCurrencyResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateFiatCurrency(ctx context.Context, in *CreateFiatCurrencyRequest, opts ...grpc.CallOption) (*CreateFiatCurrencyResponse, error) {
	out := new(CreateFiatCurrencyResponse)
	err := c.cc.Invoke(ctx, Manager_CreateFiatCurrency_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateFiatCurrencies(ctx context.Context, in *CreateFiatCurrenciesRequest, opts ...grpc.CallOption) (*CreateFiatCurrenciesResponse, error) {
	out := new(CreateFiatCurrenciesResponse)
	err := c.cc.Invoke(ctx, Manager_CreateFiatCurrencies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateFiatCurrency(ctx context.Context, in *UpdateFiatCurrencyRequest, opts ...grpc.CallOption) (*UpdateFiatCurrencyResponse, error) {
	out := new(UpdateFiatCurrencyResponse)
	err := c.cc.Invoke(ctx, Manager_UpdateFiatCurrency_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetFiatCurrency(ctx context.Context, in *GetFiatCurrencyRequest, opts ...grpc.CallOption) (*GetFiatCurrencyResponse, error) {
	out := new(GetFiatCurrencyResponse)
	err := c.cc.Invoke(ctx, Manager_GetFiatCurrency_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetFiatCurrencyOnly(ctx context.Context, in *GetFiatCurrencyOnlyRequest, opts ...grpc.CallOption) (*GetFiatCurrencyOnlyResponse, error) {
	out := new(GetFiatCurrencyOnlyResponse)
	err := c.cc.Invoke(ctx, Manager_GetFiatCurrencyOnly_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetFiatCurrencies(ctx context.Context, in *GetFiatCurrenciesRequest, opts ...grpc.CallOption) (*GetFiatCurrenciesResponse, error) {
	out := new(GetFiatCurrenciesResponse)
	err := c.cc.Invoke(ctx, Manager_GetFiatCurrencies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistFiatCurrency(ctx context.Context, in *ExistFiatCurrencyRequest, opts ...grpc.CallOption) (*ExistFiatCurrencyResponse, error) {
	out := new(ExistFiatCurrencyResponse)
	err := c.cc.Invoke(ctx, Manager_ExistFiatCurrency_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistFiatCurrencyConds(ctx context.Context, in *ExistFiatCurrencyCondsRequest, opts ...grpc.CallOption) (*ExistFiatCurrencyCondsResponse, error) {
	out := new(ExistFiatCurrencyCondsResponse)
	err := c.cc.Invoke(ctx, Manager_ExistFiatCurrencyConds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountFiatCurrencies(ctx context.Context, in *CountFiatCurrenciesRequest, opts ...grpc.CallOption) (*CountFiatCurrenciesResponse, error) {
	out := new(CountFiatCurrenciesResponse)
	err := c.cc.Invoke(ctx, Manager_CountFiatCurrencies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteFiatCurrency(ctx context.Context, in *DeleteFiatCurrencyRequest, opts ...grpc.CallOption) (*DeleteFiatCurrencyResponse, error) {
	out := new(DeleteFiatCurrencyResponse)
	err := c.cc.Invoke(ctx, Manager_DeleteFiatCurrency_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateFiatCurrency(context.Context, *CreateFiatCurrencyRequest) (*CreateFiatCurrencyResponse, error)
	CreateFiatCurrencies(context.Context, *CreateFiatCurrenciesRequest) (*CreateFiatCurrenciesResponse, error)
	UpdateFiatCurrency(context.Context, *UpdateFiatCurrencyRequest) (*UpdateFiatCurrencyResponse, error)
	GetFiatCurrency(context.Context, *GetFiatCurrencyRequest) (*GetFiatCurrencyResponse, error)
	GetFiatCurrencyOnly(context.Context, *GetFiatCurrencyOnlyRequest) (*GetFiatCurrencyOnlyResponse, error)
	GetFiatCurrencies(context.Context, *GetFiatCurrenciesRequest) (*GetFiatCurrenciesResponse, error)
	ExistFiatCurrency(context.Context, *ExistFiatCurrencyRequest) (*ExistFiatCurrencyResponse, error)
	ExistFiatCurrencyConds(context.Context, *ExistFiatCurrencyCondsRequest) (*ExistFiatCurrencyCondsResponse, error)
	CountFiatCurrencies(context.Context, *CountFiatCurrenciesRequest) (*CountFiatCurrenciesResponse, error)
	DeleteFiatCurrency(context.Context, *DeleteFiatCurrencyRequest) (*DeleteFiatCurrencyResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateFiatCurrency(context.Context, *CreateFiatCurrencyRequest) (*CreateFiatCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFiatCurrency not implemented")
}
func (UnimplementedManagerServer) CreateFiatCurrencies(context.Context, *CreateFiatCurrenciesRequest) (*CreateFiatCurrenciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFiatCurrencies not implemented")
}
func (UnimplementedManagerServer) UpdateFiatCurrency(context.Context, *UpdateFiatCurrencyRequest) (*UpdateFiatCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFiatCurrency not implemented")
}
func (UnimplementedManagerServer) GetFiatCurrency(context.Context, *GetFiatCurrencyRequest) (*GetFiatCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFiatCurrency not implemented")
}
func (UnimplementedManagerServer) GetFiatCurrencyOnly(context.Context, *GetFiatCurrencyOnlyRequest) (*GetFiatCurrencyOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFiatCurrencyOnly not implemented")
}
func (UnimplementedManagerServer) GetFiatCurrencies(context.Context, *GetFiatCurrenciesRequest) (*GetFiatCurrenciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFiatCurrencies not implemented")
}
func (UnimplementedManagerServer) ExistFiatCurrency(context.Context, *ExistFiatCurrencyRequest) (*ExistFiatCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistFiatCurrency not implemented")
}
func (UnimplementedManagerServer) ExistFiatCurrencyConds(context.Context, *ExistFiatCurrencyCondsRequest) (*ExistFiatCurrencyCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistFiatCurrencyConds not implemented")
}
func (UnimplementedManagerServer) CountFiatCurrencies(context.Context, *CountFiatCurrenciesRequest) (*CountFiatCurrenciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountFiatCurrencies not implemented")
}
func (UnimplementedManagerServer) DeleteFiatCurrency(context.Context, *DeleteFiatCurrencyRequest) (*DeleteFiatCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFiatCurrency not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateFiatCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFiatCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateFiatCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_CreateFiatCurrency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateFiatCurrency(ctx, req.(*CreateFiatCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateFiatCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFiatCurrenciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateFiatCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_CreateFiatCurrencies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateFiatCurrencies(ctx, req.(*CreateFiatCurrenciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateFiatCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFiatCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateFiatCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_UpdateFiatCurrency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateFiatCurrency(ctx, req.(*UpdateFiatCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetFiatCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFiatCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetFiatCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetFiatCurrency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetFiatCurrency(ctx, req.(*GetFiatCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetFiatCurrencyOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFiatCurrencyOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetFiatCurrencyOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetFiatCurrencyOnly_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetFiatCurrencyOnly(ctx, req.(*GetFiatCurrencyOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetFiatCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFiatCurrenciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetFiatCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetFiatCurrencies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetFiatCurrencies(ctx, req.(*GetFiatCurrenciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistFiatCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistFiatCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistFiatCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_ExistFiatCurrency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistFiatCurrency(ctx, req.(*ExistFiatCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistFiatCurrencyConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistFiatCurrencyCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistFiatCurrencyConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_ExistFiatCurrencyConds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistFiatCurrencyConds(ctx, req.(*ExistFiatCurrencyCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountFiatCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountFiatCurrenciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountFiatCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_CountFiatCurrencies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountFiatCurrencies(ctx, req.(*CountFiatCurrenciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteFiatCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFiatCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteFiatCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_DeleteFiatCurrency_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteFiatCurrency(ctx, req.(*DeleteFiatCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chain.manager.fiat.currency.v1.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFiatCurrency",
			Handler:    _Manager_CreateFiatCurrency_Handler,
		},
		{
			MethodName: "CreateFiatCurrencies",
			Handler:    _Manager_CreateFiatCurrencies_Handler,
		},
		{
			MethodName: "UpdateFiatCurrency",
			Handler:    _Manager_UpdateFiatCurrency_Handler,
		},
		{
			MethodName: "GetFiatCurrency",
			Handler:    _Manager_GetFiatCurrency_Handler,
		},
		{
			MethodName: "GetFiatCurrencyOnly",
			Handler:    _Manager_GetFiatCurrencyOnly_Handler,
		},
		{
			MethodName: "GetFiatCurrencies",
			Handler:    _Manager_GetFiatCurrencies_Handler,
		},
		{
			MethodName: "ExistFiatCurrency",
			Handler:    _Manager_ExistFiatCurrency_Handler,
		},
		{
			MethodName: "ExistFiatCurrencyConds",
			Handler:    _Manager_ExistFiatCurrencyConds_Handler,
		},
		{
			MethodName: "CountFiatCurrencies",
			Handler:    _Manager_CountFiatCurrencies_Handler,
		},
		{
			MethodName: "DeleteFiatCurrency",
			Handler:    _Manager_DeleteFiatCurrency_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/chain/mgr/v1/fiat/currency/currency.proto",
}
