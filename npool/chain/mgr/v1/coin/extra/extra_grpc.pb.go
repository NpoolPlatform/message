// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/chain/mgr/v1/coin/extra/extra.proto

package extra

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateCoinExtra(ctx context.Context, in *CreateCoinExtraRequest, opts ...grpc.CallOption) (*CreateCoinExtraResponse, error)
	CreateCoinExtras(ctx context.Context, in *CreateCoinExtrasRequest, opts ...grpc.CallOption) (*CreateCoinExtrasResponse, error)
	AddCoinExtra(ctx context.Context, in *AddCoinExtraRequest, opts ...grpc.CallOption) (*AddCoinExtraResponse, error)
	GetCoinExtra(ctx context.Context, in *GetCoinExtraRequest, opts ...grpc.CallOption) (*GetCoinExtraResponse, error)
	GetCoinExtraOnly(ctx context.Context, in *GetCoinExtraOnlyRequest, opts ...grpc.CallOption) (*GetCoinExtraOnlyResponse, error)
	GetCoinExtras(ctx context.Context, in *GetCoinExtrasRequest, opts ...grpc.CallOption) (*GetCoinExtrasResponse, error)
	ExistCoinExtra(ctx context.Context, in *ExistCoinExtraRequest, opts ...grpc.CallOption) (*ExistCoinExtraResponse, error)
	ExistCoinExtraConds(ctx context.Context, in *ExistCoinExtraCondsRequest, opts ...grpc.CallOption) (*ExistCoinExtraCondsResponse, error)
	CountCoinExtras(ctx context.Context, in *CountCoinExtrasRequest, opts ...grpc.CallOption) (*CountCoinExtrasResponse, error)
	DeleteCoinExtra(ctx context.Context, in *DeleteCoinExtraRequest, opts ...grpc.CallOption) (*DeleteCoinExtraResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateCoinExtra(ctx context.Context, in *CreateCoinExtraRequest, opts ...grpc.CallOption) (*CreateCoinExtraResponse, error) {
	out := new(CreateCoinExtraResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.extra.v1.Manager/CreateCoinExtra", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateCoinExtras(ctx context.Context, in *CreateCoinExtrasRequest, opts ...grpc.CallOption) (*CreateCoinExtrasResponse, error) {
	out := new(CreateCoinExtrasResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.extra.v1.Manager/CreateCoinExtras", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) AddCoinExtra(ctx context.Context, in *AddCoinExtraRequest, opts ...grpc.CallOption) (*AddCoinExtraResponse, error) {
	out := new(AddCoinExtraResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.extra.v1.Manager/AddCoinExtra", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetCoinExtra(ctx context.Context, in *GetCoinExtraRequest, opts ...grpc.CallOption) (*GetCoinExtraResponse, error) {
	out := new(GetCoinExtraResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.extra.v1.Manager/GetCoinExtra", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetCoinExtraOnly(ctx context.Context, in *GetCoinExtraOnlyRequest, opts ...grpc.CallOption) (*GetCoinExtraOnlyResponse, error) {
	out := new(GetCoinExtraOnlyResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.extra.v1.Manager/GetCoinExtraOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetCoinExtras(ctx context.Context, in *GetCoinExtrasRequest, opts ...grpc.CallOption) (*GetCoinExtrasResponse, error) {
	out := new(GetCoinExtrasResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.extra.v1.Manager/GetCoinExtras", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistCoinExtra(ctx context.Context, in *ExistCoinExtraRequest, opts ...grpc.CallOption) (*ExistCoinExtraResponse, error) {
	out := new(ExistCoinExtraResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.extra.v1.Manager/ExistCoinExtra", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistCoinExtraConds(ctx context.Context, in *ExistCoinExtraCondsRequest, opts ...grpc.CallOption) (*ExistCoinExtraCondsResponse, error) {
	out := new(ExistCoinExtraCondsResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.extra.v1.Manager/ExistCoinExtraConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountCoinExtras(ctx context.Context, in *CountCoinExtrasRequest, opts ...grpc.CallOption) (*CountCoinExtrasResponse, error) {
	out := new(CountCoinExtrasResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.extra.v1.Manager/CountCoinExtras", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteCoinExtra(ctx context.Context, in *DeleteCoinExtraRequest, opts ...grpc.CallOption) (*DeleteCoinExtraResponse, error) {
	out := new(DeleteCoinExtraResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.extra.v1.Manager/DeleteCoinExtra", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateCoinExtra(context.Context, *CreateCoinExtraRequest) (*CreateCoinExtraResponse, error)
	CreateCoinExtras(context.Context, *CreateCoinExtrasRequest) (*CreateCoinExtrasResponse, error)
	AddCoinExtra(context.Context, *AddCoinExtraRequest) (*AddCoinExtraResponse, error)
	GetCoinExtra(context.Context, *GetCoinExtraRequest) (*GetCoinExtraResponse, error)
	GetCoinExtraOnly(context.Context, *GetCoinExtraOnlyRequest) (*GetCoinExtraOnlyResponse, error)
	GetCoinExtras(context.Context, *GetCoinExtrasRequest) (*GetCoinExtrasResponse, error)
	ExistCoinExtra(context.Context, *ExistCoinExtraRequest) (*ExistCoinExtraResponse, error)
	ExistCoinExtraConds(context.Context, *ExistCoinExtraCondsRequest) (*ExistCoinExtraCondsResponse, error)
	CountCoinExtras(context.Context, *CountCoinExtrasRequest) (*CountCoinExtrasResponse, error)
	DeleteCoinExtra(context.Context, *DeleteCoinExtraRequest) (*DeleteCoinExtraResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateCoinExtra(context.Context, *CreateCoinExtraRequest) (*CreateCoinExtraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCoinExtra not implemented")
}
func (UnimplementedManagerServer) CreateCoinExtras(context.Context, *CreateCoinExtrasRequest) (*CreateCoinExtrasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCoinExtras not implemented")
}
func (UnimplementedManagerServer) AddCoinExtra(context.Context, *AddCoinExtraRequest) (*AddCoinExtraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCoinExtra not implemented")
}
func (UnimplementedManagerServer) GetCoinExtra(context.Context, *GetCoinExtraRequest) (*GetCoinExtraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinExtra not implemented")
}
func (UnimplementedManagerServer) GetCoinExtraOnly(context.Context, *GetCoinExtraOnlyRequest) (*GetCoinExtraOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinExtraOnly not implemented")
}
func (UnimplementedManagerServer) GetCoinExtras(context.Context, *GetCoinExtrasRequest) (*GetCoinExtrasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinExtras not implemented")
}
func (UnimplementedManagerServer) ExistCoinExtra(context.Context, *ExistCoinExtraRequest) (*ExistCoinExtraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistCoinExtra not implemented")
}
func (UnimplementedManagerServer) ExistCoinExtraConds(context.Context, *ExistCoinExtraCondsRequest) (*ExistCoinExtraCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistCoinExtraConds not implemented")
}
func (UnimplementedManagerServer) CountCoinExtras(context.Context, *CountCoinExtrasRequest) (*CountCoinExtrasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountCoinExtras not implemented")
}
func (UnimplementedManagerServer) DeleteCoinExtra(context.Context, *DeleteCoinExtraRequest) (*DeleteCoinExtraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCoinExtra not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateCoinExtra_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCoinExtraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateCoinExtra(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.extra.v1.Manager/CreateCoinExtra",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateCoinExtra(ctx, req.(*CreateCoinExtraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateCoinExtras_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCoinExtrasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateCoinExtras(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.extra.v1.Manager/CreateCoinExtras",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateCoinExtras(ctx, req.(*CreateCoinExtrasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_AddCoinExtra_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCoinExtraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).AddCoinExtra(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.extra.v1.Manager/AddCoinExtra",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).AddCoinExtra(ctx, req.(*AddCoinExtraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetCoinExtra_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinExtraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetCoinExtra(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.extra.v1.Manager/GetCoinExtra",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetCoinExtra(ctx, req.(*GetCoinExtraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetCoinExtraOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinExtraOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetCoinExtraOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.extra.v1.Manager/GetCoinExtraOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetCoinExtraOnly(ctx, req.(*GetCoinExtraOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetCoinExtras_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinExtrasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetCoinExtras(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.extra.v1.Manager/GetCoinExtras",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetCoinExtras(ctx, req.(*GetCoinExtrasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistCoinExtra_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistCoinExtraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistCoinExtra(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.extra.v1.Manager/ExistCoinExtra",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistCoinExtra(ctx, req.(*ExistCoinExtraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistCoinExtraConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistCoinExtraCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistCoinExtraConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.extra.v1.Manager/ExistCoinExtraConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistCoinExtraConds(ctx, req.(*ExistCoinExtraCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountCoinExtras_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountCoinExtrasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountCoinExtras(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.extra.v1.Manager/CountCoinExtras",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountCoinExtras(ctx, req.(*CountCoinExtrasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteCoinExtra_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCoinExtraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteCoinExtra(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.extra.v1.Manager/DeleteCoinExtra",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteCoinExtra(ctx, req.(*DeleteCoinExtraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chain.manager.coin.extra.v1.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCoinExtra",
			Handler:    _Manager_CreateCoinExtra_Handler,
		},
		{
			MethodName: "CreateCoinExtras",
			Handler:    _Manager_CreateCoinExtras_Handler,
		},
		{
			MethodName: "AddCoinExtra",
			Handler:    _Manager_AddCoinExtra_Handler,
		},
		{
			MethodName: "GetCoinExtra",
			Handler:    _Manager_GetCoinExtra_Handler,
		},
		{
			MethodName: "GetCoinExtraOnly",
			Handler:    _Manager_GetCoinExtraOnly_Handler,
		},
		{
			MethodName: "GetCoinExtras",
			Handler:    _Manager_GetCoinExtras_Handler,
		},
		{
			MethodName: "ExistCoinExtra",
			Handler:    _Manager_ExistCoinExtra_Handler,
		},
		{
			MethodName: "ExistCoinExtraConds",
			Handler:    _Manager_ExistCoinExtraConds_Handler,
		},
		{
			MethodName: "CountCoinExtras",
			Handler:    _Manager_CountCoinExtras_Handler,
		},
		{
			MethodName: "DeleteCoinExtra",
			Handler:    _Manager_DeleteCoinExtra_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/chain/mgr/v1/coin/extra/extra.proto",
}
