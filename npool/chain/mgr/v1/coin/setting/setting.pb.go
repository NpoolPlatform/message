// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: npool/chain/mgr/v1/coin/setting/setting.proto

package setting

import (
	npool "github.com/NpoolPlatform/message/npool"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SettingReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                          *string `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	CoinTypeID                  *string `protobuf:"bytes,20,opt,name=CoinTypeID,proto3,oneof" json:"CoinTypeID,omitempty"`
	FeeCoinTypeID               *string `protobuf:"bytes,30,opt,name=FeeCoinTypeID,proto3,oneof" json:"FeeCoinTypeID,omitempty"`
	WithdrawFeeByStableUSD      *bool   `protobuf:"varint,40,opt,name=WithdrawFeeByStableUSD,proto3,oneof" json:"WithdrawFeeByStableUSD,omitempty"`
	WithdrawFeeAmount           *string `protobuf:"bytes,50,opt,name=WithdrawFeeAmount,proto3,oneof" json:"WithdrawFeeAmount,omitempty"`
	CollectFeeAmount            *string `protobuf:"bytes,60,opt,name=CollectFeeAmount,proto3,oneof" json:"CollectFeeAmount,omitempty"`
	HotWalletFeeAmount          *string `protobuf:"bytes,70,opt,name=HotWalletFeeAmount,proto3,oneof" json:"HotWalletFeeAmount,omitempty"`
	LowFeeAmount                *string `protobuf:"bytes,80,opt,name=LowFeeAmount,proto3,oneof" json:"LowFeeAmount,omitempty"`
	WarmAccountAmount           *string `protobuf:"bytes,90,opt,name=WarmAccountAmount,proto3,oneof" json:"WarmAccountAmount,omitempty"`
	PaymentAccountCollectAmount *string `protobuf:"bytes,100,opt,name=PaymentAccountCollectAmount,proto3,oneof" json:"PaymentAccountCollectAmount,omitempty"`
}

func (x *SettingReq) Reset() {
	*x = SettingReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettingReq) ProtoMessage() {}

func (x *SettingReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettingReq.ProtoReflect.Descriptor instead.
func (*SettingReq) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_setting_setting_proto_rawDescGZIP(), []int{0}
}

func (x *SettingReq) GetID() string {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return ""
}

func (x *SettingReq) GetCoinTypeID() string {
	if x != nil && x.CoinTypeID != nil {
		return *x.CoinTypeID
	}
	return ""
}

func (x *SettingReq) GetFeeCoinTypeID() string {
	if x != nil && x.FeeCoinTypeID != nil {
		return *x.FeeCoinTypeID
	}
	return ""
}

func (x *SettingReq) GetWithdrawFeeByStableUSD() bool {
	if x != nil && x.WithdrawFeeByStableUSD != nil {
		return *x.WithdrawFeeByStableUSD
	}
	return false
}

func (x *SettingReq) GetWithdrawFeeAmount() string {
	if x != nil && x.WithdrawFeeAmount != nil {
		return *x.WithdrawFeeAmount
	}
	return ""
}

func (x *SettingReq) GetCollectFeeAmount() string {
	if x != nil && x.CollectFeeAmount != nil {
		return *x.CollectFeeAmount
	}
	return ""
}

func (x *SettingReq) GetHotWalletFeeAmount() string {
	if x != nil && x.HotWalletFeeAmount != nil {
		return *x.HotWalletFeeAmount
	}
	return ""
}

func (x *SettingReq) GetLowFeeAmount() string {
	if x != nil && x.LowFeeAmount != nil {
		return *x.LowFeeAmount
	}
	return ""
}

func (x *SettingReq) GetWarmAccountAmount() string {
	if x != nil && x.WarmAccountAmount != nil {
		return *x.WarmAccountAmount
	}
	return ""
}

func (x *SettingReq) GetPaymentAccountCollectAmount() string {
	if x != nil && x.PaymentAccountCollectAmount != nil {
		return *x.PaymentAccountCollectAmount
	}
	return ""
}

type Setting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                     string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	CoinTypeID             string `protobuf:"bytes,20,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty"`
	FeeCoinTypeID          string `protobuf:"bytes,30,opt,name=FeeCoinTypeID,proto3" json:"FeeCoinTypeID,omitempty"`
	WithdrawFeeByStableUSD bool   `protobuf:"varint,40,opt,name=WithdrawFeeByStableUSD,proto3" json:"WithdrawFeeByStableUSD,omitempty"`
	WithdrawFeeAmount      string `protobuf:"bytes,50,opt,name=WithdrawFeeAmount,proto3" json:"WithdrawFeeAmount,omitempty"`
	CollectFeeAmount       string `protobuf:"bytes,60,opt,name=CollectFeeAmount,proto3" json:"CollectFeeAmount,omitempty"`
	HotWalletFeeAmount     string `protobuf:"bytes,70,opt,name=HotWalletFeeAmount,proto3" json:"HotWalletFeeAmount,omitempty"`
	// Low than this value, we need to deposit gas
	LowFeeAmount                string `protobuf:"bytes,80,opt,name=LowFeeAmount,proto3" json:"LowFeeAmount,omitempty"`
	WarmAccountAmount           string `protobuf:"bytes,90,opt,name=WarmAccountAmount,proto3" json:"WarmAccountAmount,omitempty"`
	PaymentAccountCollectAmount string `protobuf:"bytes,100,opt,name=PaymentAccountCollectAmount,proto3" json:"PaymentAccountCollectAmount,omitempty"`
	CreatedAt                   uint32 `protobuf:"varint,110,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt                   uint32 `protobuf:"varint,120,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (x *Setting) Reset() {
	*x = Setting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Setting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Setting) ProtoMessage() {}

func (x *Setting) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Setting.ProtoReflect.Descriptor instead.
func (*Setting) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_setting_setting_proto_rawDescGZIP(), []int{1}
}

func (x *Setting) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Setting) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

func (x *Setting) GetFeeCoinTypeID() string {
	if x != nil {
		return x.FeeCoinTypeID
	}
	return ""
}

func (x *Setting) GetWithdrawFeeByStableUSD() bool {
	if x != nil {
		return x.WithdrawFeeByStableUSD
	}
	return false
}

func (x *Setting) GetWithdrawFeeAmount() string {
	if x != nil {
		return x.WithdrawFeeAmount
	}
	return ""
}

func (x *Setting) GetCollectFeeAmount() string {
	if x != nil {
		return x.CollectFeeAmount
	}
	return ""
}

func (x *Setting) GetHotWalletFeeAmount() string {
	if x != nil {
		return x.HotWalletFeeAmount
	}
	return ""
}

func (x *Setting) GetLowFeeAmount() string {
	if x != nil {
		return x.LowFeeAmount
	}
	return ""
}

func (x *Setting) GetWarmAccountAmount() string {
	if x != nil {
		return x.WarmAccountAmount
	}
	return ""
}

func (x *Setting) GetPaymentAccountCollectAmount() string {
	if x != nil {
		return x.PaymentAccountCollectAmount
	}
	return ""
}

func (x *Setting) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Setting) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            *npool.StringVal `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	CoinTypeID    *npool.StringVal `protobuf:"bytes,20,opt,name=CoinTypeID,proto3,oneof" json:"CoinTypeID,omitempty"`
	FeeCoinTypeID *npool.StringVal `protobuf:"bytes,30,opt,name=FeeCoinTypeID,proto3,oneof" json:"FeeCoinTypeID,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_setting_setting_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *npool.StringVal {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetCoinTypeID() *npool.StringVal {
	if x != nil {
		return x.CoinTypeID
	}
	return nil
}

func (x *Conds) GetFeeCoinTypeID() *npool.StringVal {
	if x != nil {
		return x.FeeCoinTypeID
	}
	return nil
}

type CreateSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *SettingReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateSettingRequest) Reset() {
	*x = CreateSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSettingRequest) ProtoMessage() {}

func (x *CreateSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSettingRequest.ProtoReflect.Descriptor instead.
func (*CreateSettingRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_setting_setting_proto_rawDescGZIP(), []int{3}
}

func (x *CreateSettingRequest) GetInfo() *SettingReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Setting `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateSettingResponse) Reset() {
	*x = CreateSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSettingResponse) ProtoMessage() {}

func (x *CreateSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSettingResponse.ProtoReflect.Descriptor instead.
func (*CreateSettingResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_setting_setting_proto_rawDescGZIP(), []int{4}
}

func (x *CreateSettingResponse) GetInfo() *Setting {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*SettingReq `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateSettingsRequest) Reset() {
	*x = CreateSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSettingsRequest) ProtoMessage() {}

func (x *CreateSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSettingsRequest.ProtoReflect.Descriptor instead.
func (*CreateSettingsRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_setting_setting_proto_rawDescGZIP(), []int{5}
}

func (x *CreateSettingsRequest) GetInfos() []*SettingReq {
	if x != nil {
		return x.Infos
	}
	return nil
}

type CreateSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Setting `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateSettingsResponse) Reset() {
	*x = CreateSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSettingsResponse) ProtoMessage() {}

func (x *CreateSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSettingsResponse.ProtoReflect.Descriptor instead.
func (*CreateSettingsResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_setting_setting_proto_rawDescGZIP(), []int{6}
}

func (x *CreateSettingsResponse) GetInfos() []*Setting {
	if x != nil {
		return x.Infos
	}
	return nil
}

type UpdateSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *SettingReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateSettingRequest) Reset() {
	*x = UpdateSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSettingRequest) ProtoMessage() {}

func (x *UpdateSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSettingRequest.ProtoReflect.Descriptor instead.
func (*UpdateSettingRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_setting_setting_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateSettingRequest) GetInfo() *SettingReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Setting `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateSettingResponse) Reset() {
	*x = UpdateSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSettingResponse) ProtoMessage() {}

func (x *UpdateSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSettingResponse.ProtoReflect.Descriptor instead.
func (*UpdateSettingResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_setting_setting_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateSettingResponse) GetInfo() *Setting {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetSettingRequest) Reset() {
	*x = GetSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSettingRequest) ProtoMessage() {}

func (x *GetSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSettingRequest.ProtoReflect.Descriptor instead.
func (*GetSettingRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_setting_setting_proto_rawDescGZIP(), []int{9}
}

func (x *GetSettingRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Setting `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetSettingResponse) Reset() {
	*x = GetSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSettingResponse) ProtoMessage() {}

func (x *GetSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSettingResponse.ProtoReflect.Descriptor instead.
func (*GetSettingResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_setting_setting_proto_rawDescGZIP(), []int{10}
}

func (x *GetSettingResponse) GetInfo() *Setting {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetSettingsRequest) Reset() {
	*x = GetSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSettingsRequest) ProtoMessage() {}

func (x *GetSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSettingsRequest.ProtoReflect.Descriptor instead.
func (*GetSettingsRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_setting_setting_proto_rawDescGZIP(), []int{11}
}

func (x *GetSettingsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetSettingsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetSettingsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Setting `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32     `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetSettingsResponse) Reset() {
	*x = GetSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSettingsResponse) ProtoMessage() {}

func (x *GetSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSettingsResponse.ProtoReflect.Descriptor instead.
func (*GetSettingsResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_setting_setting_proto_rawDescGZIP(), []int{12}
}

func (x *GetSettingsResponse) GetInfos() []*Setting {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetSettingsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetSettingOnlyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *GetSettingOnlyRequest) Reset() {
	*x = GetSettingOnlyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSettingOnlyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSettingOnlyRequest) ProtoMessage() {}

func (x *GetSettingOnlyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSettingOnlyRequest.ProtoReflect.Descriptor instead.
func (*GetSettingOnlyRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_setting_setting_proto_rawDescGZIP(), []int{13}
}

func (x *GetSettingOnlyRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type GetSettingOnlyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Setting `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetSettingOnlyResponse) Reset() {
	*x = GetSettingOnlyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSettingOnlyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSettingOnlyResponse) ProtoMessage() {}

func (x *GetSettingOnlyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSettingOnlyResponse.ProtoReflect.Descriptor instead.
func (*GetSettingOnlyResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_setting_setting_proto_rawDescGZIP(), []int{14}
}

func (x *GetSettingOnlyResponse) GetInfo() *Setting {
	if x != nil {
		return x.Info
	}
	return nil
}

type ExistSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ExistSettingRequest) Reset() {
	*x = ExistSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistSettingRequest) ProtoMessage() {}

func (x *ExistSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistSettingRequest.ProtoReflect.Descriptor instead.
func (*ExistSettingRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_setting_setting_proto_rawDescGZIP(), []int{15}
}

func (x *ExistSettingRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ExistSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistSettingResponse) Reset() {
	*x = ExistSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistSettingResponse) ProtoMessage() {}

func (x *ExistSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistSettingResponse.ProtoReflect.Descriptor instead.
func (*ExistSettingResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_setting_setting_proto_rawDescGZIP(), []int{16}
}

func (x *ExistSettingResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type ExistSettingCondsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *ExistSettingCondsRequest) Reset() {
	*x = ExistSettingCondsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistSettingCondsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistSettingCondsRequest) ProtoMessage() {}

func (x *ExistSettingCondsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistSettingCondsRequest.ProtoReflect.Descriptor instead.
func (*ExistSettingCondsRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_setting_setting_proto_rawDescGZIP(), []int{17}
}

func (x *ExistSettingCondsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type ExistSettingCondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistSettingCondsResponse) Reset() {
	*x = ExistSettingCondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistSettingCondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistSettingCondsResponse) ProtoMessage() {}

func (x *ExistSettingCondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistSettingCondsResponse.ProtoReflect.Descriptor instead.
func (*ExistSettingCondsResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_setting_setting_proto_rawDescGZIP(), []int{18}
}

func (x *ExistSettingCondsResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type CountSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *CountSettingsRequest) Reset() {
	*x = CountSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountSettingsRequest) ProtoMessage() {}

func (x *CountSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountSettingsRequest.ProtoReflect.Descriptor instead.
func (*CountSettingsRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_setting_setting_proto_rawDescGZIP(), []int{19}
}

func (x *CountSettingsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type CountSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info uint32 `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CountSettingsResponse) Reset() {
	*x = CountSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountSettingsResponse) ProtoMessage() {}

func (x *CountSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountSettingsResponse.ProtoReflect.Descriptor instead.
func (*CountSettingsResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_setting_setting_proto_rawDescGZIP(), []int{20}
}

func (x *CountSettingsResponse) GetInfo() uint32 {
	if x != nil {
		return x.Info
	}
	return 0
}

type DeleteSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *DeleteSettingRequest) Reset() {
	*x = DeleteSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSettingRequest) ProtoMessage() {}

func (x *DeleteSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSettingRequest.ProtoReflect.Descriptor instead.
func (*DeleteSettingRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_setting_setting_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteSettingRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type DeleteSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Setting `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteSettingResponse) Reset() {
	*x = DeleteSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSettingResponse) ProtoMessage() {}

func (x *DeleteSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSettingResponse.ProtoReflect.Descriptor instead.
func (*DeleteSettingResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_setting_setting_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteSettingResponse) GetInfo() *Setting {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_chain_mgr_v1_coin_setting_setting_proto protoreflect.FileDescriptor

var file_npool_chain_mgr_v1_coin_setting_setting_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x67,
	0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1d, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x6e, 0x70, 0x6f,
	0x6f, 0x6c, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb6,
	0x05, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x46, 0x65, 0x65, 0x43, 0x6f,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x0d, 0x46, 0x65, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x12, 0x3b, 0x0a, 0x16, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x65,
	0x65, 0x42, 0x79, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x53, 0x44, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x03, 0x52, 0x16, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x65,
	0x65, 0x42, 0x79, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x53, 0x44, 0x88, 0x01, 0x01, 0x12,
	0x31, 0x0a, 0x11, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x65, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x11, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x46, 0x65, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x10,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x06, 0x52, 0x12, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x46, 0x65, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x4c, 0x6f, 0x77, 0x46,
	0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07,
	0x52, 0x0c, 0x4c, 0x6f, 0x77, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x31, 0x0a, 0x11, 0x57, 0x61, 0x72, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x11,
	0x57, 0x61, 0x72, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x1b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x1b, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x49, 0x44, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x44, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x65, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x44, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x46, 0x65, 0x65, 0x42, 0x79, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x53, 0x44, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x65, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x48, 0x6f,
	0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x4c, 0x6f, 0x77, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x57, 0x61, 0x72, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf1, 0x03, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x65, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x46, 0x65, 0x65, 0x43,
	0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x16, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x65, 0x65, 0x42, 0x79, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x55, 0x53, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x46, 0x65, 0x65, 0x42, 0x79, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x53,
	0x44, 0x12, 0x2c, 0x0a, 0x11, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x65, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2a, 0x0a, 0x10, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x48,
	0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x48, 0x6f, 0x74, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x4c,
	0x6f, 0x77, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x50, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x4c, 0x6f, 0x77, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2c, 0x0a, 0x11, 0x57, 0x61, 0x72, 0x6d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x57, 0x61, 0x72, 0x6d,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a,
	0x1b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x1b, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x6e, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xd3, 0x01, 0x0a, 0x05,
	0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12,
	0x38, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0d, 0x46, 0x65, 0x65,
	0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x02, 0x52, 0x0d, 0x46, 0x65, 0x65, 0x43, 0x6f, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x65, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x44, 0x22, 0x55, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x53, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3a, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x58, 0x0a,
	0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x56, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3c, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22,
	0x55, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x53, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3a, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x23, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x22, 0x50, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x7e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0x69, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x53, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x6e, 0x6c, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x22, 0x54, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x25, 0x0a, 0x13, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22,
	0x2a, 0x0a, 0x14, 0x45, 0x78, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x56, 0x0a, 0x18, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x22, 0x2f, 0x0a, 0x19, 0x45, 0x78, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x52, 0x0a, 0x14, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x05,
	0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x2b, 0x0a, 0x15, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x26, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x53, 0x0a,
	0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x32, 0xf6, 0x09, 0x0a, 0x07, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x7c,
	0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x33, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x0e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x34,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a,
	0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x33,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x30, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x7f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x6e,
	0x6c, 0x79, 0x12, 0x34, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x4f, 0x6e, 0x6c,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x76, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x31, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x0c, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x88, 0x01, 0x0a, 0x11, 0x45, 0x78, 0x69, 0x73, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x37, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x7c, 0x0a, 0x0d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x33, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a,
	0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x33,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x42, 0x5a, 0x40, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f,
	0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x67, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_chain_mgr_v1_coin_setting_setting_proto_rawDescOnce sync.Once
	file_npool_chain_mgr_v1_coin_setting_setting_proto_rawDescData = file_npool_chain_mgr_v1_coin_setting_setting_proto_rawDesc
)

func file_npool_chain_mgr_v1_coin_setting_setting_proto_rawDescGZIP() []byte {
	file_npool_chain_mgr_v1_coin_setting_setting_proto_rawDescOnce.Do(func() {
		file_npool_chain_mgr_v1_coin_setting_setting_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_chain_mgr_v1_coin_setting_setting_proto_rawDescData)
	})
	return file_npool_chain_mgr_v1_coin_setting_setting_proto_rawDescData
}

var file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_npool_chain_mgr_v1_coin_setting_setting_proto_goTypes = []interface{}{
	(*SettingReq)(nil),                // 0: chain.manager.coin.setting.v1.SettingReq
	(*Setting)(nil),                   // 1: chain.manager.coin.setting.v1.Setting
	(*Conds)(nil),                     // 2: chain.manager.coin.setting.v1.Conds
	(*CreateSettingRequest)(nil),      // 3: chain.manager.coin.setting.v1.CreateSettingRequest
	(*CreateSettingResponse)(nil),     // 4: chain.manager.coin.setting.v1.CreateSettingResponse
	(*CreateSettingsRequest)(nil),     // 5: chain.manager.coin.setting.v1.CreateSettingsRequest
	(*CreateSettingsResponse)(nil),    // 6: chain.manager.coin.setting.v1.CreateSettingsResponse
	(*UpdateSettingRequest)(nil),      // 7: chain.manager.coin.setting.v1.UpdateSettingRequest
	(*UpdateSettingResponse)(nil),     // 8: chain.manager.coin.setting.v1.UpdateSettingResponse
	(*GetSettingRequest)(nil),         // 9: chain.manager.coin.setting.v1.GetSettingRequest
	(*GetSettingResponse)(nil),        // 10: chain.manager.coin.setting.v1.GetSettingResponse
	(*GetSettingsRequest)(nil),        // 11: chain.manager.coin.setting.v1.GetSettingsRequest
	(*GetSettingsResponse)(nil),       // 12: chain.manager.coin.setting.v1.GetSettingsResponse
	(*GetSettingOnlyRequest)(nil),     // 13: chain.manager.coin.setting.v1.GetSettingOnlyRequest
	(*GetSettingOnlyResponse)(nil),    // 14: chain.manager.coin.setting.v1.GetSettingOnlyResponse
	(*ExistSettingRequest)(nil),       // 15: chain.manager.coin.setting.v1.ExistSettingRequest
	(*ExistSettingResponse)(nil),      // 16: chain.manager.coin.setting.v1.ExistSettingResponse
	(*ExistSettingCondsRequest)(nil),  // 17: chain.manager.coin.setting.v1.ExistSettingCondsRequest
	(*ExistSettingCondsResponse)(nil), // 18: chain.manager.coin.setting.v1.ExistSettingCondsResponse
	(*CountSettingsRequest)(nil),      // 19: chain.manager.coin.setting.v1.CountSettingsRequest
	(*CountSettingsResponse)(nil),     // 20: chain.manager.coin.setting.v1.CountSettingsResponse
	(*DeleteSettingRequest)(nil),      // 21: chain.manager.coin.setting.v1.DeleteSettingRequest
	(*DeleteSettingResponse)(nil),     // 22: chain.manager.coin.setting.v1.DeleteSettingResponse
	(*npool.StringVal)(nil),           // 23: npool.v1.StringVal
}
var file_npool_chain_mgr_v1_coin_setting_setting_proto_depIdxs = []int32{
	23, // 0: chain.manager.coin.setting.v1.Conds.ID:type_name -> npool.v1.StringVal
	23, // 1: chain.manager.coin.setting.v1.Conds.CoinTypeID:type_name -> npool.v1.StringVal
	23, // 2: chain.manager.coin.setting.v1.Conds.FeeCoinTypeID:type_name -> npool.v1.StringVal
	0,  // 3: chain.manager.coin.setting.v1.CreateSettingRequest.Info:type_name -> chain.manager.coin.setting.v1.SettingReq
	1,  // 4: chain.manager.coin.setting.v1.CreateSettingResponse.Info:type_name -> chain.manager.coin.setting.v1.Setting
	0,  // 5: chain.manager.coin.setting.v1.CreateSettingsRequest.Infos:type_name -> chain.manager.coin.setting.v1.SettingReq
	1,  // 6: chain.manager.coin.setting.v1.CreateSettingsResponse.Infos:type_name -> chain.manager.coin.setting.v1.Setting
	0,  // 7: chain.manager.coin.setting.v1.UpdateSettingRequest.Info:type_name -> chain.manager.coin.setting.v1.SettingReq
	1,  // 8: chain.manager.coin.setting.v1.UpdateSettingResponse.Info:type_name -> chain.manager.coin.setting.v1.Setting
	1,  // 9: chain.manager.coin.setting.v1.GetSettingResponse.Info:type_name -> chain.manager.coin.setting.v1.Setting
	2,  // 10: chain.manager.coin.setting.v1.GetSettingsRequest.Conds:type_name -> chain.manager.coin.setting.v1.Conds
	1,  // 11: chain.manager.coin.setting.v1.GetSettingsResponse.Infos:type_name -> chain.manager.coin.setting.v1.Setting
	2,  // 12: chain.manager.coin.setting.v1.GetSettingOnlyRequest.Conds:type_name -> chain.manager.coin.setting.v1.Conds
	1,  // 13: chain.manager.coin.setting.v1.GetSettingOnlyResponse.Info:type_name -> chain.manager.coin.setting.v1.Setting
	2,  // 14: chain.manager.coin.setting.v1.ExistSettingCondsRequest.Conds:type_name -> chain.manager.coin.setting.v1.Conds
	2,  // 15: chain.manager.coin.setting.v1.CountSettingsRequest.Conds:type_name -> chain.manager.coin.setting.v1.Conds
	1,  // 16: chain.manager.coin.setting.v1.DeleteSettingResponse.Info:type_name -> chain.manager.coin.setting.v1.Setting
	3,  // 17: chain.manager.coin.setting.v1.Manager.CreateSetting:input_type -> chain.manager.coin.setting.v1.CreateSettingRequest
	5,  // 18: chain.manager.coin.setting.v1.Manager.CreateSettings:input_type -> chain.manager.coin.setting.v1.CreateSettingsRequest
	7,  // 19: chain.manager.coin.setting.v1.Manager.UpdateSetting:input_type -> chain.manager.coin.setting.v1.UpdateSettingRequest
	9,  // 20: chain.manager.coin.setting.v1.Manager.GetSetting:input_type -> chain.manager.coin.setting.v1.GetSettingRequest
	13, // 21: chain.manager.coin.setting.v1.Manager.GetSettingOnly:input_type -> chain.manager.coin.setting.v1.GetSettingOnlyRequest
	11, // 22: chain.manager.coin.setting.v1.Manager.GetSettings:input_type -> chain.manager.coin.setting.v1.GetSettingsRequest
	15, // 23: chain.manager.coin.setting.v1.Manager.ExistSetting:input_type -> chain.manager.coin.setting.v1.ExistSettingRequest
	17, // 24: chain.manager.coin.setting.v1.Manager.ExistSettingConds:input_type -> chain.manager.coin.setting.v1.ExistSettingCondsRequest
	19, // 25: chain.manager.coin.setting.v1.Manager.CountSettings:input_type -> chain.manager.coin.setting.v1.CountSettingsRequest
	21, // 26: chain.manager.coin.setting.v1.Manager.DeleteSetting:input_type -> chain.manager.coin.setting.v1.DeleteSettingRequest
	4,  // 27: chain.manager.coin.setting.v1.Manager.CreateSetting:output_type -> chain.manager.coin.setting.v1.CreateSettingResponse
	6,  // 28: chain.manager.coin.setting.v1.Manager.CreateSettings:output_type -> chain.manager.coin.setting.v1.CreateSettingsResponse
	8,  // 29: chain.manager.coin.setting.v1.Manager.UpdateSetting:output_type -> chain.manager.coin.setting.v1.UpdateSettingResponse
	10, // 30: chain.manager.coin.setting.v1.Manager.GetSetting:output_type -> chain.manager.coin.setting.v1.GetSettingResponse
	14, // 31: chain.manager.coin.setting.v1.Manager.GetSettingOnly:output_type -> chain.manager.coin.setting.v1.GetSettingOnlyResponse
	12, // 32: chain.manager.coin.setting.v1.Manager.GetSettings:output_type -> chain.manager.coin.setting.v1.GetSettingsResponse
	16, // 33: chain.manager.coin.setting.v1.Manager.ExistSetting:output_type -> chain.manager.coin.setting.v1.ExistSettingResponse
	18, // 34: chain.manager.coin.setting.v1.Manager.ExistSettingConds:output_type -> chain.manager.coin.setting.v1.ExistSettingCondsResponse
	20, // 35: chain.manager.coin.setting.v1.Manager.CountSettings:output_type -> chain.manager.coin.setting.v1.CountSettingsResponse
	22, // 36: chain.manager.coin.setting.v1.Manager.DeleteSetting:output_type -> chain.manager.coin.setting.v1.DeleteSettingResponse
	27, // [27:37] is the sub-list for method output_type
	17, // [17:27] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_npool_chain_mgr_v1_coin_setting_setting_proto_init() }
func file_npool_chain_mgr_v1_coin_setting_setting_proto_init() {
	if File_npool_chain_mgr_v1_coin_setting_setting_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettingReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Setting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSettingOnlyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSettingOnlyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistSettingCondsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistSettingCondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_chain_mgr_v1_coin_setting_setting_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_chain_mgr_v1_coin_setting_setting_proto_goTypes,
		DependencyIndexes: file_npool_chain_mgr_v1_coin_setting_setting_proto_depIdxs,
		MessageInfos:      file_npool_chain_mgr_v1_coin_setting_setting_proto_msgTypes,
	}.Build()
	File_npool_chain_mgr_v1_coin_setting_setting_proto = out.File
	file_npool_chain_mgr_v1_coin_setting_setting_proto_rawDesc = nil
	file_npool_chain_mgr_v1_coin_setting_setting_proto_goTypes = nil
	file_npool_chain_mgr_v1_coin_setting_setting_proto_depIdxs = nil
}
