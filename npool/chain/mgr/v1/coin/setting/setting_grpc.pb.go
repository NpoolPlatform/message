// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/chain/mgr/v1/coin/setting/setting.proto

package setting

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateCoinSetting(ctx context.Context, in *CreateCoinSettingRequest, opts ...grpc.CallOption) (*CreateCoinSettingResponse, error)
	CreateCoinSettings(ctx context.Context, in *CreateCoinSettingsRequest, opts ...grpc.CallOption) (*CreateCoinSettingsResponse, error)
	AddCoinSetting(ctx context.Context, in *AddCoinSettingRequest, opts ...grpc.CallOption) (*AddCoinSettingResponse, error)
	GetCoinSetting(ctx context.Context, in *GetCoinSettingRequest, opts ...grpc.CallOption) (*GetCoinSettingResponse, error)
	GetCoinSettingOnly(ctx context.Context, in *GetCoinSettingOnlyRequest, opts ...grpc.CallOption) (*GetCoinSettingOnlyResponse, error)
	GetCoinSettings(ctx context.Context, in *GetCoinSettingsRequest, opts ...grpc.CallOption) (*GetCoinSettingsResponse, error)
	ExistCoinSetting(ctx context.Context, in *ExistCoinSettingRequest, opts ...grpc.CallOption) (*ExistCoinSettingResponse, error)
	ExistCoinSettingConds(ctx context.Context, in *ExistCoinSettingCondsRequest, opts ...grpc.CallOption) (*ExistCoinSettingCondsResponse, error)
	CountCoinSettings(ctx context.Context, in *CountCoinSettingsRequest, opts ...grpc.CallOption) (*CountCoinSettingsResponse, error)
	DeleteCoinSetting(ctx context.Context, in *DeleteCoinSettingRequest, opts ...grpc.CallOption) (*DeleteCoinSettingResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateCoinSetting(ctx context.Context, in *CreateCoinSettingRequest, opts ...grpc.CallOption) (*CreateCoinSettingResponse, error) {
	out := new(CreateCoinSettingResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.setting.v1.Manager/CreateCoinSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateCoinSettings(ctx context.Context, in *CreateCoinSettingsRequest, opts ...grpc.CallOption) (*CreateCoinSettingsResponse, error) {
	out := new(CreateCoinSettingsResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.setting.v1.Manager/CreateCoinSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) AddCoinSetting(ctx context.Context, in *AddCoinSettingRequest, opts ...grpc.CallOption) (*AddCoinSettingResponse, error) {
	out := new(AddCoinSettingResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.setting.v1.Manager/AddCoinSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetCoinSetting(ctx context.Context, in *GetCoinSettingRequest, opts ...grpc.CallOption) (*GetCoinSettingResponse, error) {
	out := new(GetCoinSettingResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.setting.v1.Manager/GetCoinSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetCoinSettingOnly(ctx context.Context, in *GetCoinSettingOnlyRequest, opts ...grpc.CallOption) (*GetCoinSettingOnlyResponse, error) {
	out := new(GetCoinSettingOnlyResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.setting.v1.Manager/GetCoinSettingOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetCoinSettings(ctx context.Context, in *GetCoinSettingsRequest, opts ...grpc.CallOption) (*GetCoinSettingsResponse, error) {
	out := new(GetCoinSettingsResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.setting.v1.Manager/GetCoinSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistCoinSetting(ctx context.Context, in *ExistCoinSettingRequest, opts ...grpc.CallOption) (*ExistCoinSettingResponse, error) {
	out := new(ExistCoinSettingResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.setting.v1.Manager/ExistCoinSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistCoinSettingConds(ctx context.Context, in *ExistCoinSettingCondsRequest, opts ...grpc.CallOption) (*ExistCoinSettingCondsResponse, error) {
	out := new(ExistCoinSettingCondsResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.setting.v1.Manager/ExistCoinSettingConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountCoinSettings(ctx context.Context, in *CountCoinSettingsRequest, opts ...grpc.CallOption) (*CountCoinSettingsResponse, error) {
	out := new(CountCoinSettingsResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.setting.v1.Manager/CountCoinSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteCoinSetting(ctx context.Context, in *DeleteCoinSettingRequest, opts ...grpc.CallOption) (*DeleteCoinSettingResponse, error) {
	out := new(DeleteCoinSettingResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.setting.v1.Manager/DeleteCoinSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateCoinSetting(context.Context, *CreateCoinSettingRequest) (*CreateCoinSettingResponse, error)
	CreateCoinSettings(context.Context, *CreateCoinSettingsRequest) (*CreateCoinSettingsResponse, error)
	AddCoinSetting(context.Context, *AddCoinSettingRequest) (*AddCoinSettingResponse, error)
	GetCoinSetting(context.Context, *GetCoinSettingRequest) (*GetCoinSettingResponse, error)
	GetCoinSettingOnly(context.Context, *GetCoinSettingOnlyRequest) (*GetCoinSettingOnlyResponse, error)
	GetCoinSettings(context.Context, *GetCoinSettingsRequest) (*GetCoinSettingsResponse, error)
	ExistCoinSetting(context.Context, *ExistCoinSettingRequest) (*ExistCoinSettingResponse, error)
	ExistCoinSettingConds(context.Context, *ExistCoinSettingCondsRequest) (*ExistCoinSettingCondsResponse, error)
	CountCoinSettings(context.Context, *CountCoinSettingsRequest) (*CountCoinSettingsResponse, error)
	DeleteCoinSetting(context.Context, *DeleteCoinSettingRequest) (*DeleteCoinSettingResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateCoinSetting(context.Context, *CreateCoinSettingRequest) (*CreateCoinSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCoinSetting not implemented")
}
func (UnimplementedManagerServer) CreateCoinSettings(context.Context, *CreateCoinSettingsRequest) (*CreateCoinSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCoinSettings not implemented")
}
func (UnimplementedManagerServer) AddCoinSetting(context.Context, *AddCoinSettingRequest) (*AddCoinSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCoinSetting not implemented")
}
func (UnimplementedManagerServer) GetCoinSetting(context.Context, *GetCoinSettingRequest) (*GetCoinSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinSetting not implemented")
}
func (UnimplementedManagerServer) GetCoinSettingOnly(context.Context, *GetCoinSettingOnlyRequest) (*GetCoinSettingOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinSettingOnly not implemented")
}
func (UnimplementedManagerServer) GetCoinSettings(context.Context, *GetCoinSettingsRequest) (*GetCoinSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinSettings not implemented")
}
func (UnimplementedManagerServer) ExistCoinSetting(context.Context, *ExistCoinSettingRequest) (*ExistCoinSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistCoinSetting not implemented")
}
func (UnimplementedManagerServer) ExistCoinSettingConds(context.Context, *ExistCoinSettingCondsRequest) (*ExistCoinSettingCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistCoinSettingConds not implemented")
}
func (UnimplementedManagerServer) CountCoinSettings(context.Context, *CountCoinSettingsRequest) (*CountCoinSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountCoinSettings not implemented")
}
func (UnimplementedManagerServer) DeleteCoinSetting(context.Context, *DeleteCoinSettingRequest) (*DeleteCoinSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCoinSetting not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateCoinSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCoinSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateCoinSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.setting.v1.Manager/CreateCoinSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateCoinSetting(ctx, req.(*CreateCoinSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateCoinSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCoinSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateCoinSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.setting.v1.Manager/CreateCoinSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateCoinSettings(ctx, req.(*CreateCoinSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_AddCoinSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCoinSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).AddCoinSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.setting.v1.Manager/AddCoinSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).AddCoinSetting(ctx, req.(*AddCoinSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetCoinSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetCoinSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.setting.v1.Manager/GetCoinSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetCoinSetting(ctx, req.(*GetCoinSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetCoinSettingOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinSettingOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetCoinSettingOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.setting.v1.Manager/GetCoinSettingOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetCoinSettingOnly(ctx, req.(*GetCoinSettingOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetCoinSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetCoinSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.setting.v1.Manager/GetCoinSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetCoinSettings(ctx, req.(*GetCoinSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistCoinSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistCoinSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistCoinSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.setting.v1.Manager/ExistCoinSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistCoinSetting(ctx, req.(*ExistCoinSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistCoinSettingConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistCoinSettingCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistCoinSettingConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.setting.v1.Manager/ExistCoinSettingConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistCoinSettingConds(ctx, req.(*ExistCoinSettingCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountCoinSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountCoinSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountCoinSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.setting.v1.Manager/CountCoinSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountCoinSettings(ctx, req.(*CountCoinSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteCoinSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCoinSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteCoinSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.setting.v1.Manager/DeleteCoinSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteCoinSetting(ctx, req.(*DeleteCoinSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chain.manager.coin.setting.v1.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCoinSetting",
			Handler:    _Manager_CreateCoinSetting_Handler,
		},
		{
			MethodName: "CreateCoinSettings",
			Handler:    _Manager_CreateCoinSettings_Handler,
		},
		{
			MethodName: "AddCoinSetting",
			Handler:    _Manager_AddCoinSetting_Handler,
		},
		{
			MethodName: "GetCoinSetting",
			Handler:    _Manager_GetCoinSetting_Handler,
		},
		{
			MethodName: "GetCoinSettingOnly",
			Handler:    _Manager_GetCoinSettingOnly_Handler,
		},
		{
			MethodName: "GetCoinSettings",
			Handler:    _Manager_GetCoinSettings_Handler,
		},
		{
			MethodName: "ExistCoinSetting",
			Handler:    _Manager_ExistCoinSetting_Handler,
		},
		{
			MethodName: "ExistCoinSettingConds",
			Handler:    _Manager_ExistCoinSettingConds_Handler,
		},
		{
			MethodName: "CountCoinSettings",
			Handler:    _Manager_CountCoinSettings_Handler,
		},
		{
			MethodName: "DeleteCoinSetting",
			Handler:    _Manager_DeleteCoinSetting_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/chain/mgr/v1/coin/setting/setting.proto",
}
