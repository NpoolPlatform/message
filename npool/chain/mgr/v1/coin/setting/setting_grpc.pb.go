// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/chain/mgr/v1/coin/setting/setting.proto

package setting

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Manager_CreateSetting_FullMethodName     = "/chain.manager.coin.setting.v1.Manager/CreateSetting"
	Manager_CreateSettings_FullMethodName    = "/chain.manager.coin.setting.v1.Manager/CreateSettings"
	Manager_UpdateSetting_FullMethodName     = "/chain.manager.coin.setting.v1.Manager/UpdateSetting"
	Manager_GetSetting_FullMethodName        = "/chain.manager.coin.setting.v1.Manager/GetSetting"
	Manager_GetSettingOnly_FullMethodName    = "/chain.manager.coin.setting.v1.Manager/GetSettingOnly"
	Manager_GetSettings_FullMethodName       = "/chain.manager.coin.setting.v1.Manager/GetSettings"
	Manager_ExistSetting_FullMethodName      = "/chain.manager.coin.setting.v1.Manager/ExistSetting"
	Manager_ExistSettingConds_FullMethodName = "/chain.manager.coin.setting.v1.Manager/ExistSettingConds"
	Manager_CountSettings_FullMethodName     = "/chain.manager.coin.setting.v1.Manager/CountSettings"
	Manager_DeleteSetting_FullMethodName     = "/chain.manager.coin.setting.v1.Manager/DeleteSetting"
)

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateSetting(ctx context.Context, in *CreateSettingRequest, opts ...grpc.CallOption) (*CreateSettingResponse, error)
	CreateSettings(ctx context.Context, in *CreateSettingsRequest, opts ...grpc.CallOption) (*CreateSettingsResponse, error)
	UpdateSetting(ctx context.Context, in *UpdateSettingRequest, opts ...grpc.CallOption) (*UpdateSettingResponse, error)
	GetSetting(ctx context.Context, in *GetSettingRequest, opts ...grpc.CallOption) (*GetSettingResponse, error)
	GetSettingOnly(ctx context.Context, in *GetSettingOnlyRequest, opts ...grpc.CallOption) (*GetSettingOnlyResponse, error)
	GetSettings(ctx context.Context, in *GetSettingsRequest, opts ...grpc.CallOption) (*GetSettingsResponse, error)
	ExistSetting(ctx context.Context, in *ExistSettingRequest, opts ...grpc.CallOption) (*ExistSettingResponse, error)
	ExistSettingConds(ctx context.Context, in *ExistSettingCondsRequest, opts ...grpc.CallOption) (*ExistSettingCondsResponse, error)
	CountSettings(ctx context.Context, in *CountSettingsRequest, opts ...grpc.CallOption) (*CountSettingsResponse, error)
	DeleteSetting(ctx context.Context, in *DeleteSettingRequest, opts ...grpc.CallOption) (*DeleteSettingResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateSetting(ctx context.Context, in *CreateSettingRequest, opts ...grpc.CallOption) (*CreateSettingResponse, error) {
	out := new(CreateSettingResponse)
	err := c.cc.Invoke(ctx, Manager_CreateSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateSettings(ctx context.Context, in *CreateSettingsRequest, opts ...grpc.CallOption) (*CreateSettingsResponse, error) {
	out := new(CreateSettingsResponse)
	err := c.cc.Invoke(ctx, Manager_CreateSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateSetting(ctx context.Context, in *UpdateSettingRequest, opts ...grpc.CallOption) (*UpdateSettingResponse, error) {
	out := new(UpdateSettingResponse)
	err := c.cc.Invoke(ctx, Manager_UpdateSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetSetting(ctx context.Context, in *GetSettingRequest, opts ...grpc.CallOption) (*GetSettingResponse, error) {
	out := new(GetSettingResponse)
	err := c.cc.Invoke(ctx, Manager_GetSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetSettingOnly(ctx context.Context, in *GetSettingOnlyRequest, opts ...grpc.CallOption) (*GetSettingOnlyResponse, error) {
	out := new(GetSettingOnlyResponse)
	err := c.cc.Invoke(ctx, Manager_GetSettingOnly_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetSettings(ctx context.Context, in *GetSettingsRequest, opts ...grpc.CallOption) (*GetSettingsResponse, error) {
	out := new(GetSettingsResponse)
	err := c.cc.Invoke(ctx, Manager_GetSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistSetting(ctx context.Context, in *ExistSettingRequest, opts ...grpc.CallOption) (*ExistSettingResponse, error) {
	out := new(ExistSettingResponse)
	err := c.cc.Invoke(ctx, Manager_ExistSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistSettingConds(ctx context.Context, in *ExistSettingCondsRequest, opts ...grpc.CallOption) (*ExistSettingCondsResponse, error) {
	out := new(ExistSettingCondsResponse)
	err := c.cc.Invoke(ctx, Manager_ExistSettingConds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountSettings(ctx context.Context, in *CountSettingsRequest, opts ...grpc.CallOption) (*CountSettingsResponse, error) {
	out := new(CountSettingsResponse)
	err := c.cc.Invoke(ctx, Manager_CountSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteSetting(ctx context.Context, in *DeleteSettingRequest, opts ...grpc.CallOption) (*DeleteSettingResponse, error) {
	out := new(DeleteSettingResponse)
	err := c.cc.Invoke(ctx, Manager_DeleteSetting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateSetting(context.Context, *CreateSettingRequest) (*CreateSettingResponse, error)
	CreateSettings(context.Context, *CreateSettingsRequest) (*CreateSettingsResponse, error)
	UpdateSetting(context.Context, *UpdateSettingRequest) (*UpdateSettingResponse, error)
	GetSetting(context.Context, *GetSettingRequest) (*GetSettingResponse, error)
	GetSettingOnly(context.Context, *GetSettingOnlyRequest) (*GetSettingOnlyResponse, error)
	GetSettings(context.Context, *GetSettingsRequest) (*GetSettingsResponse, error)
	ExistSetting(context.Context, *ExistSettingRequest) (*ExistSettingResponse, error)
	ExistSettingConds(context.Context, *ExistSettingCondsRequest) (*ExistSettingCondsResponse, error)
	CountSettings(context.Context, *CountSettingsRequest) (*CountSettingsResponse, error)
	DeleteSetting(context.Context, *DeleteSettingRequest) (*DeleteSettingResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateSetting(context.Context, *CreateSettingRequest) (*CreateSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSetting not implemented")
}
func (UnimplementedManagerServer) CreateSettings(context.Context, *CreateSettingsRequest) (*CreateSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSettings not implemented")
}
func (UnimplementedManagerServer) UpdateSetting(context.Context, *UpdateSettingRequest) (*UpdateSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSetting not implemented")
}
func (UnimplementedManagerServer) GetSetting(context.Context, *GetSettingRequest) (*GetSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSetting not implemented")
}
func (UnimplementedManagerServer) GetSettingOnly(context.Context, *GetSettingOnlyRequest) (*GetSettingOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettingOnly not implemented")
}
func (UnimplementedManagerServer) GetSettings(context.Context, *GetSettingsRequest) (*GetSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettings not implemented")
}
func (UnimplementedManagerServer) ExistSetting(context.Context, *ExistSettingRequest) (*ExistSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistSetting not implemented")
}
func (UnimplementedManagerServer) ExistSettingConds(context.Context, *ExistSettingCondsRequest) (*ExistSettingCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistSettingConds not implemented")
}
func (UnimplementedManagerServer) CountSettings(context.Context, *CountSettingsRequest) (*CountSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountSettings not implemented")
}
func (UnimplementedManagerServer) DeleteSetting(context.Context, *DeleteSettingRequest) (*DeleteSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSetting not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_CreateSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateSetting(ctx, req.(*CreateSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_CreateSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateSettings(ctx, req.(*CreateSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_UpdateSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateSetting(ctx, req.(*UpdateSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetSetting(ctx, req.(*GetSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetSettingOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSettingOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetSettingOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetSettingOnly_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetSettingOnly(ctx, req.(*GetSettingOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetSettings(ctx, req.(*GetSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_ExistSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistSetting(ctx, req.(*ExistSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistSettingConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistSettingCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistSettingConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_ExistSettingConds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistSettingConds(ctx, req.(*ExistSettingCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_CountSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountSettings(ctx, req.(*CountSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_DeleteSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteSetting(ctx, req.(*DeleteSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chain.manager.coin.setting.v1.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSetting",
			Handler:    _Manager_CreateSetting_Handler,
		},
		{
			MethodName: "CreateSettings",
			Handler:    _Manager_CreateSettings_Handler,
		},
		{
			MethodName: "UpdateSetting",
			Handler:    _Manager_UpdateSetting_Handler,
		},
		{
			MethodName: "GetSetting",
			Handler:    _Manager_GetSetting_Handler,
		},
		{
			MethodName: "GetSettingOnly",
			Handler:    _Manager_GetSettingOnly_Handler,
		},
		{
			MethodName: "GetSettings",
			Handler:    _Manager_GetSettings_Handler,
		},
		{
			MethodName: "ExistSetting",
			Handler:    _Manager_ExistSetting_Handler,
		},
		{
			MethodName: "ExistSettingConds",
			Handler:    _Manager_ExistSettingConds_Handler,
		},
		{
			MethodName: "CountSettings",
			Handler:    _Manager_CountSettings_Handler,
		},
		{
			MethodName: "DeleteSetting",
			Handler:    _Manager_DeleteSetting_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/chain/mgr/v1/coin/setting/setting.proto",
}
