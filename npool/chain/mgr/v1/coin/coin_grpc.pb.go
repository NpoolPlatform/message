// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/chain/mgr/v1/coin/coin.proto

package coin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateCoin(ctx context.Context, in *CreateCoinRequest, opts ...grpc.CallOption) (*CreateCoinResponse, error)
	CreateCoins(ctx context.Context, in *CreateCoinsRequest, opts ...grpc.CallOption) (*CreateCoinsResponse, error)
	AddCoin(ctx context.Context, in *AddCoinRequest, opts ...grpc.CallOption) (*AddCoinResponse, error)
	GetCoin(ctx context.Context, in *GetCoinRequest, opts ...grpc.CallOption) (*GetCoinResponse, error)
	GetCoinOnly(ctx context.Context, in *GetCoinOnlyRequest, opts ...grpc.CallOption) (*GetCoinOnlyResponse, error)
	GetCoins(ctx context.Context, in *GetCoinsRequest, opts ...grpc.CallOption) (*GetCoinsResponse, error)
	ExistCoin(ctx context.Context, in *ExistCoinRequest, opts ...grpc.CallOption) (*ExistCoinResponse, error)
	ExistCoinConds(ctx context.Context, in *ExistCoinCondsRequest, opts ...grpc.CallOption) (*ExistCoinCondsResponse, error)
	CountCoins(ctx context.Context, in *CountCoinsRequest, opts ...grpc.CallOption) (*CountCoinsResponse, error)
	DeleteCoin(ctx context.Context, in *DeleteCoinRequest, opts ...grpc.CallOption) (*DeleteCoinResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateCoin(ctx context.Context, in *CreateCoinRequest, opts ...grpc.CallOption) (*CreateCoinResponse, error) {
	out := new(CreateCoinResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.v1.Manager/CreateCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateCoins(ctx context.Context, in *CreateCoinsRequest, opts ...grpc.CallOption) (*CreateCoinsResponse, error) {
	out := new(CreateCoinsResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.v1.Manager/CreateCoins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) AddCoin(ctx context.Context, in *AddCoinRequest, opts ...grpc.CallOption) (*AddCoinResponse, error) {
	out := new(AddCoinResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.v1.Manager/AddCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetCoin(ctx context.Context, in *GetCoinRequest, opts ...grpc.CallOption) (*GetCoinResponse, error) {
	out := new(GetCoinResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.v1.Manager/GetCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetCoinOnly(ctx context.Context, in *GetCoinOnlyRequest, opts ...grpc.CallOption) (*GetCoinOnlyResponse, error) {
	out := new(GetCoinOnlyResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.v1.Manager/GetCoinOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetCoins(ctx context.Context, in *GetCoinsRequest, opts ...grpc.CallOption) (*GetCoinsResponse, error) {
	out := new(GetCoinsResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.v1.Manager/GetCoins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistCoin(ctx context.Context, in *ExistCoinRequest, opts ...grpc.CallOption) (*ExistCoinResponse, error) {
	out := new(ExistCoinResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.v1.Manager/ExistCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistCoinConds(ctx context.Context, in *ExistCoinCondsRequest, opts ...grpc.CallOption) (*ExistCoinCondsResponse, error) {
	out := new(ExistCoinCondsResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.v1.Manager/ExistCoinConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountCoins(ctx context.Context, in *CountCoinsRequest, opts ...grpc.CallOption) (*CountCoinsResponse, error) {
	out := new(CountCoinsResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.v1.Manager/CountCoins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteCoin(ctx context.Context, in *DeleteCoinRequest, opts ...grpc.CallOption) (*DeleteCoinResponse, error) {
	out := new(DeleteCoinResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.v1.Manager/DeleteCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateCoin(context.Context, *CreateCoinRequest) (*CreateCoinResponse, error)
	CreateCoins(context.Context, *CreateCoinsRequest) (*CreateCoinsResponse, error)
	AddCoin(context.Context, *AddCoinRequest) (*AddCoinResponse, error)
	GetCoin(context.Context, *GetCoinRequest) (*GetCoinResponse, error)
	GetCoinOnly(context.Context, *GetCoinOnlyRequest) (*GetCoinOnlyResponse, error)
	GetCoins(context.Context, *GetCoinsRequest) (*GetCoinsResponse, error)
	ExistCoin(context.Context, *ExistCoinRequest) (*ExistCoinResponse, error)
	ExistCoinConds(context.Context, *ExistCoinCondsRequest) (*ExistCoinCondsResponse, error)
	CountCoins(context.Context, *CountCoinsRequest) (*CountCoinsResponse, error)
	DeleteCoin(context.Context, *DeleteCoinRequest) (*DeleteCoinResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateCoin(context.Context, *CreateCoinRequest) (*CreateCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCoin not implemented")
}
func (UnimplementedManagerServer) CreateCoins(context.Context, *CreateCoinsRequest) (*CreateCoinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCoins not implemented")
}
func (UnimplementedManagerServer) AddCoin(context.Context, *AddCoinRequest) (*AddCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCoin not implemented")
}
func (UnimplementedManagerServer) GetCoin(context.Context, *GetCoinRequest) (*GetCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoin not implemented")
}
func (UnimplementedManagerServer) GetCoinOnly(context.Context, *GetCoinOnlyRequest) (*GetCoinOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinOnly not implemented")
}
func (UnimplementedManagerServer) GetCoins(context.Context, *GetCoinsRequest) (*GetCoinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoins not implemented")
}
func (UnimplementedManagerServer) ExistCoin(context.Context, *ExistCoinRequest) (*ExistCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistCoin not implemented")
}
func (UnimplementedManagerServer) ExistCoinConds(context.Context, *ExistCoinCondsRequest) (*ExistCoinCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistCoinConds not implemented")
}
func (UnimplementedManagerServer) CountCoins(context.Context, *CountCoinsRequest) (*CountCoinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountCoins not implemented")
}
func (UnimplementedManagerServer) DeleteCoin(context.Context, *DeleteCoinRequest) (*DeleteCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCoin not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.v1.Manager/CreateCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateCoin(ctx, req.(*CreateCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCoinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.v1.Manager/CreateCoins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateCoins(ctx, req.(*CreateCoinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_AddCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).AddCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.v1.Manager/AddCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).AddCoin(ctx, req.(*AddCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.v1.Manager/GetCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetCoin(ctx, req.(*GetCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetCoinOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetCoinOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.v1.Manager/GetCoinOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetCoinOnly(ctx, req.(*GetCoinOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.v1.Manager/GetCoins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetCoins(ctx, req.(*GetCoinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.v1.Manager/ExistCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistCoin(ctx, req.(*ExistCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistCoinConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistCoinCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistCoinConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.v1.Manager/ExistCoinConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistCoinConds(ctx, req.(*ExistCoinCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountCoinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.v1.Manager/CountCoins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountCoins(ctx, req.(*CountCoinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.v1.Manager/DeleteCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteCoin(ctx, req.(*DeleteCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chain.manager.coin.v1.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCoin",
			Handler:    _Manager_CreateCoin_Handler,
		},
		{
			MethodName: "CreateCoins",
			Handler:    _Manager_CreateCoins_Handler,
		},
		{
			MethodName: "AddCoin",
			Handler:    _Manager_AddCoin_Handler,
		},
		{
			MethodName: "GetCoin",
			Handler:    _Manager_GetCoin_Handler,
		},
		{
			MethodName: "GetCoinOnly",
			Handler:    _Manager_GetCoinOnly_Handler,
		},
		{
			MethodName: "GetCoins",
			Handler:    _Manager_GetCoins_Handler,
		},
		{
			MethodName: "ExistCoin",
			Handler:    _Manager_ExistCoin_Handler,
		},
		{
			MethodName: "ExistCoinConds",
			Handler:    _Manager_ExistCoinConds_Handler,
		},
		{
			MethodName: "CountCoins",
			Handler:    _Manager_CountCoins_Handler,
		},
		{
			MethodName: "DeleteCoin",
			Handler:    _Manager_DeleteCoin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/chain/mgr/v1/coin/coin.proto",
}
