// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/chain/mgr/v1/coin/exrate/exrate.proto

package exchangerage

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateExchangeRate(ctx context.Context, in *CreateExchangeRateRequest, opts ...grpc.CallOption) (*CreateExchangeRateResponse, error)
	CreateExchangeRates(ctx context.Context, in *CreateExchangeRatesRequest, opts ...grpc.CallOption) (*CreateExchangeRatesResponse, error)
	AddExchangeRate(ctx context.Context, in *AddExchangeRateRequest, opts ...grpc.CallOption) (*AddExchangeRateResponse, error)
	GetExchangeRate(ctx context.Context, in *GetExchangeRateRequest, opts ...grpc.CallOption) (*GetExchangeRateResponse, error)
	GetExchangeRateOnly(ctx context.Context, in *GetExchangeRateOnlyRequest, opts ...grpc.CallOption) (*GetExchangeRateOnlyResponse, error)
	GetExchangeRates(ctx context.Context, in *GetExchangeRatesRequest, opts ...grpc.CallOption) (*GetExchangeRatesResponse, error)
	ExistExchangeRate(ctx context.Context, in *ExistExchangeRateRequest, opts ...grpc.CallOption) (*ExistExchangeRateResponse, error)
	ExistExchangeRateConds(ctx context.Context, in *ExistExchangeRateCondsRequest, opts ...grpc.CallOption) (*ExistExchangeRateCondsResponse, error)
	CountExchangeRates(ctx context.Context, in *CountExchangeRatesRequest, opts ...grpc.CallOption) (*CountExchangeRatesResponse, error)
	DeleteExchangeRate(ctx context.Context, in *DeleteExchangeRateRequest, opts ...grpc.CallOption) (*DeleteExchangeRateResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateExchangeRate(ctx context.Context, in *CreateExchangeRateRequest, opts ...grpc.CallOption) (*CreateExchangeRateResponse, error) {
	out := new(CreateExchangeRateResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.exchangerage.v1.Manager/CreateExchangeRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateExchangeRates(ctx context.Context, in *CreateExchangeRatesRequest, opts ...grpc.CallOption) (*CreateExchangeRatesResponse, error) {
	out := new(CreateExchangeRatesResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.exchangerage.v1.Manager/CreateExchangeRates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) AddExchangeRate(ctx context.Context, in *AddExchangeRateRequest, opts ...grpc.CallOption) (*AddExchangeRateResponse, error) {
	out := new(AddExchangeRateResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.exchangerage.v1.Manager/AddExchangeRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetExchangeRate(ctx context.Context, in *GetExchangeRateRequest, opts ...grpc.CallOption) (*GetExchangeRateResponse, error) {
	out := new(GetExchangeRateResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.exchangerage.v1.Manager/GetExchangeRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetExchangeRateOnly(ctx context.Context, in *GetExchangeRateOnlyRequest, opts ...grpc.CallOption) (*GetExchangeRateOnlyResponse, error) {
	out := new(GetExchangeRateOnlyResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.exchangerage.v1.Manager/GetExchangeRateOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetExchangeRates(ctx context.Context, in *GetExchangeRatesRequest, opts ...grpc.CallOption) (*GetExchangeRatesResponse, error) {
	out := new(GetExchangeRatesResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.exchangerage.v1.Manager/GetExchangeRates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistExchangeRate(ctx context.Context, in *ExistExchangeRateRequest, opts ...grpc.CallOption) (*ExistExchangeRateResponse, error) {
	out := new(ExistExchangeRateResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.exchangerage.v1.Manager/ExistExchangeRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistExchangeRateConds(ctx context.Context, in *ExistExchangeRateCondsRequest, opts ...grpc.CallOption) (*ExistExchangeRateCondsResponse, error) {
	out := new(ExistExchangeRateCondsResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.exchangerage.v1.Manager/ExistExchangeRateConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountExchangeRates(ctx context.Context, in *CountExchangeRatesRequest, opts ...grpc.CallOption) (*CountExchangeRatesResponse, error) {
	out := new(CountExchangeRatesResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.exchangerage.v1.Manager/CountExchangeRates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteExchangeRate(ctx context.Context, in *DeleteExchangeRateRequest, opts ...grpc.CallOption) (*DeleteExchangeRateResponse, error) {
	out := new(DeleteExchangeRateResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.exchangerage.v1.Manager/DeleteExchangeRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateExchangeRate(context.Context, *CreateExchangeRateRequest) (*CreateExchangeRateResponse, error)
	CreateExchangeRates(context.Context, *CreateExchangeRatesRequest) (*CreateExchangeRatesResponse, error)
	AddExchangeRate(context.Context, *AddExchangeRateRequest) (*AddExchangeRateResponse, error)
	GetExchangeRate(context.Context, *GetExchangeRateRequest) (*GetExchangeRateResponse, error)
	GetExchangeRateOnly(context.Context, *GetExchangeRateOnlyRequest) (*GetExchangeRateOnlyResponse, error)
	GetExchangeRates(context.Context, *GetExchangeRatesRequest) (*GetExchangeRatesResponse, error)
	ExistExchangeRate(context.Context, *ExistExchangeRateRequest) (*ExistExchangeRateResponse, error)
	ExistExchangeRateConds(context.Context, *ExistExchangeRateCondsRequest) (*ExistExchangeRateCondsResponse, error)
	CountExchangeRates(context.Context, *CountExchangeRatesRequest) (*CountExchangeRatesResponse, error)
	DeleteExchangeRate(context.Context, *DeleteExchangeRateRequest) (*DeleteExchangeRateResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateExchangeRate(context.Context, *CreateExchangeRateRequest) (*CreateExchangeRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExchangeRate not implemented")
}
func (UnimplementedManagerServer) CreateExchangeRates(context.Context, *CreateExchangeRatesRequest) (*CreateExchangeRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExchangeRates not implemented")
}
func (UnimplementedManagerServer) AddExchangeRate(context.Context, *AddExchangeRateRequest) (*AddExchangeRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddExchangeRate not implemented")
}
func (UnimplementedManagerServer) GetExchangeRate(context.Context, *GetExchangeRateRequest) (*GetExchangeRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExchangeRate not implemented")
}
func (UnimplementedManagerServer) GetExchangeRateOnly(context.Context, *GetExchangeRateOnlyRequest) (*GetExchangeRateOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExchangeRateOnly not implemented")
}
func (UnimplementedManagerServer) GetExchangeRates(context.Context, *GetExchangeRatesRequest) (*GetExchangeRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExchangeRates not implemented")
}
func (UnimplementedManagerServer) ExistExchangeRate(context.Context, *ExistExchangeRateRequest) (*ExistExchangeRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistExchangeRate not implemented")
}
func (UnimplementedManagerServer) ExistExchangeRateConds(context.Context, *ExistExchangeRateCondsRequest) (*ExistExchangeRateCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistExchangeRateConds not implemented")
}
func (UnimplementedManagerServer) CountExchangeRates(context.Context, *CountExchangeRatesRequest) (*CountExchangeRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountExchangeRates not implemented")
}
func (UnimplementedManagerServer) DeleteExchangeRate(context.Context, *DeleteExchangeRateRequest) (*DeleteExchangeRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExchangeRate not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExchangeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.exchangerage.v1.Manager/CreateExchangeRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateExchangeRate(ctx, req.(*CreateExchangeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateExchangeRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExchangeRatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateExchangeRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.exchangerage.v1.Manager/CreateExchangeRates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateExchangeRates(ctx, req.(*CreateExchangeRatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_AddExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddExchangeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).AddExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.exchangerage.v1.Manager/AddExchangeRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).AddExchangeRate(ctx, req.(*AddExchangeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExchangeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.exchangerage.v1.Manager/GetExchangeRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetExchangeRate(ctx, req.(*GetExchangeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetExchangeRateOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExchangeRateOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetExchangeRateOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.exchangerage.v1.Manager/GetExchangeRateOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetExchangeRateOnly(ctx, req.(*GetExchangeRateOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetExchangeRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExchangeRatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetExchangeRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.exchangerage.v1.Manager/GetExchangeRates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetExchangeRates(ctx, req.(*GetExchangeRatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistExchangeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.exchangerage.v1.Manager/ExistExchangeRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistExchangeRate(ctx, req.(*ExistExchangeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistExchangeRateConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistExchangeRateCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistExchangeRateConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.exchangerage.v1.Manager/ExistExchangeRateConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistExchangeRateConds(ctx, req.(*ExistExchangeRateCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountExchangeRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountExchangeRatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountExchangeRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.exchangerage.v1.Manager/CountExchangeRates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountExchangeRates(ctx, req.(*CountExchangeRatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteExchangeRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExchangeRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteExchangeRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.exchangerage.v1.Manager/DeleteExchangeRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteExchangeRate(ctx, req.(*DeleteExchangeRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chain.manager.coin.exchangerage.v1.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateExchangeRate",
			Handler:    _Manager_CreateExchangeRate_Handler,
		},
		{
			MethodName: "CreateExchangeRates",
			Handler:    _Manager_CreateExchangeRates_Handler,
		},
		{
			MethodName: "AddExchangeRate",
			Handler:    _Manager_AddExchangeRate_Handler,
		},
		{
			MethodName: "GetExchangeRate",
			Handler:    _Manager_GetExchangeRate_Handler,
		},
		{
			MethodName: "GetExchangeRateOnly",
			Handler:    _Manager_GetExchangeRateOnly_Handler,
		},
		{
			MethodName: "GetExchangeRates",
			Handler:    _Manager_GetExchangeRates_Handler,
		},
		{
			MethodName: "ExistExchangeRate",
			Handler:    _Manager_ExistExchangeRate_Handler,
		},
		{
			MethodName: "ExistExchangeRateConds",
			Handler:    _Manager_ExistExchangeRateConds_Handler,
		},
		{
			MethodName: "CountExchangeRates",
			Handler:    _Manager_CountExchangeRates_Handler,
		},
		{
			MethodName: "DeleteExchangeRate",
			Handler:    _Manager_DeleteExchangeRate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/chain/mgr/v1/coin/exrate/exrate.proto",
}
