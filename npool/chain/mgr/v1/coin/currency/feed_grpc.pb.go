// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/chain/mgr/v1/coin/currency/feed.proto

package currency

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateCurrencyFeed(ctx context.Context, in *CreateCurrencyFeedRequest, opts ...grpc.CallOption) (*CreateCurrencyFeedResponse, error)
	CreateCurrencyFeeds(ctx context.Context, in *CreateCurrencyFeedsRequest, opts ...grpc.CallOption) (*CreateCurrencyFeedsResponse, error)
	UpdateCurrencyFeed(ctx context.Context, in *UpdateCurrencyFeedRequest, opts ...grpc.CallOption) (*UpdateCurrencyFeedResponse, error)
	GetCurrencyFeed(ctx context.Context, in *GetCurrencyFeedRequest, opts ...grpc.CallOption) (*GetCurrencyFeedResponse, error)
	GetCurrencyFeedOnly(ctx context.Context, in *GetCurrencyFeedOnlyRequest, opts ...grpc.CallOption) (*GetCurrencyFeedOnlyResponse, error)
	GetCurrencyFeeds(ctx context.Context, in *GetCurrencyFeedsRequest, opts ...grpc.CallOption) (*GetCurrencyFeedsResponse, error)
	ExistCurrencyFeed(ctx context.Context, in *ExistCurrencyFeedRequest, opts ...grpc.CallOption) (*ExistCurrencyFeedResponse, error)
	ExistCurrencyFeedConds(ctx context.Context, in *ExistCurrencyFeedCondsRequest, opts ...grpc.CallOption) (*ExistCurrencyFeedCondsResponse, error)
	CountCurrencyFeeds(ctx context.Context, in *CountCurrencyFeedsRequest, opts ...grpc.CallOption) (*CountCurrencyFeedsResponse, error)
	DeleteCurrencyFeed(ctx context.Context, in *DeleteCurrencyFeedRequest, opts ...grpc.CallOption) (*DeleteCurrencyFeedResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateCurrencyFeed(ctx context.Context, in *CreateCurrencyFeedRequest, opts ...grpc.CallOption) (*CreateCurrencyFeedResponse, error) {
	out := new(CreateCurrencyFeedResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.currency.v1.Manager/CreateCurrencyFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateCurrencyFeeds(ctx context.Context, in *CreateCurrencyFeedsRequest, opts ...grpc.CallOption) (*CreateCurrencyFeedsResponse, error) {
	out := new(CreateCurrencyFeedsResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.currency.v1.Manager/CreateCurrencyFeeds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateCurrencyFeed(ctx context.Context, in *UpdateCurrencyFeedRequest, opts ...grpc.CallOption) (*UpdateCurrencyFeedResponse, error) {
	out := new(UpdateCurrencyFeedResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.currency.v1.Manager/UpdateCurrencyFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetCurrencyFeed(ctx context.Context, in *GetCurrencyFeedRequest, opts ...grpc.CallOption) (*GetCurrencyFeedResponse, error) {
	out := new(GetCurrencyFeedResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.currency.v1.Manager/GetCurrencyFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetCurrencyFeedOnly(ctx context.Context, in *GetCurrencyFeedOnlyRequest, opts ...grpc.CallOption) (*GetCurrencyFeedOnlyResponse, error) {
	out := new(GetCurrencyFeedOnlyResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.currency.v1.Manager/GetCurrencyFeedOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetCurrencyFeeds(ctx context.Context, in *GetCurrencyFeedsRequest, opts ...grpc.CallOption) (*GetCurrencyFeedsResponse, error) {
	out := new(GetCurrencyFeedsResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.currency.v1.Manager/GetCurrencyFeeds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistCurrencyFeed(ctx context.Context, in *ExistCurrencyFeedRequest, opts ...grpc.CallOption) (*ExistCurrencyFeedResponse, error) {
	out := new(ExistCurrencyFeedResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.currency.v1.Manager/ExistCurrencyFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistCurrencyFeedConds(ctx context.Context, in *ExistCurrencyFeedCondsRequest, opts ...grpc.CallOption) (*ExistCurrencyFeedCondsResponse, error) {
	out := new(ExistCurrencyFeedCondsResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.currency.v1.Manager/ExistCurrencyFeedConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountCurrencyFeeds(ctx context.Context, in *CountCurrencyFeedsRequest, opts ...grpc.CallOption) (*CountCurrencyFeedsResponse, error) {
	out := new(CountCurrencyFeedsResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.currency.v1.Manager/CountCurrencyFeeds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteCurrencyFeed(ctx context.Context, in *DeleteCurrencyFeedRequest, opts ...grpc.CallOption) (*DeleteCurrencyFeedResponse, error) {
	out := new(DeleteCurrencyFeedResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.currency.v1.Manager/DeleteCurrencyFeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateCurrencyFeed(context.Context, *CreateCurrencyFeedRequest) (*CreateCurrencyFeedResponse, error)
	CreateCurrencyFeeds(context.Context, *CreateCurrencyFeedsRequest) (*CreateCurrencyFeedsResponse, error)
	UpdateCurrencyFeed(context.Context, *UpdateCurrencyFeedRequest) (*UpdateCurrencyFeedResponse, error)
	GetCurrencyFeed(context.Context, *GetCurrencyFeedRequest) (*GetCurrencyFeedResponse, error)
	GetCurrencyFeedOnly(context.Context, *GetCurrencyFeedOnlyRequest) (*GetCurrencyFeedOnlyResponse, error)
	GetCurrencyFeeds(context.Context, *GetCurrencyFeedsRequest) (*GetCurrencyFeedsResponse, error)
	ExistCurrencyFeed(context.Context, *ExistCurrencyFeedRequest) (*ExistCurrencyFeedResponse, error)
	ExistCurrencyFeedConds(context.Context, *ExistCurrencyFeedCondsRequest) (*ExistCurrencyFeedCondsResponse, error)
	CountCurrencyFeeds(context.Context, *CountCurrencyFeedsRequest) (*CountCurrencyFeedsResponse, error)
	DeleteCurrencyFeed(context.Context, *DeleteCurrencyFeedRequest) (*DeleteCurrencyFeedResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateCurrencyFeed(context.Context, *CreateCurrencyFeedRequest) (*CreateCurrencyFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCurrencyFeed not implemented")
}
func (UnimplementedManagerServer) CreateCurrencyFeeds(context.Context, *CreateCurrencyFeedsRequest) (*CreateCurrencyFeedsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCurrencyFeeds not implemented")
}
func (UnimplementedManagerServer) UpdateCurrencyFeed(context.Context, *UpdateCurrencyFeedRequest) (*UpdateCurrencyFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCurrencyFeed not implemented")
}
func (UnimplementedManagerServer) GetCurrencyFeed(context.Context, *GetCurrencyFeedRequest) (*GetCurrencyFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrencyFeed not implemented")
}
func (UnimplementedManagerServer) GetCurrencyFeedOnly(context.Context, *GetCurrencyFeedOnlyRequest) (*GetCurrencyFeedOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrencyFeedOnly not implemented")
}
func (UnimplementedManagerServer) GetCurrencyFeeds(context.Context, *GetCurrencyFeedsRequest) (*GetCurrencyFeedsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrencyFeeds not implemented")
}
func (UnimplementedManagerServer) ExistCurrencyFeed(context.Context, *ExistCurrencyFeedRequest) (*ExistCurrencyFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistCurrencyFeed not implemented")
}
func (UnimplementedManagerServer) ExistCurrencyFeedConds(context.Context, *ExistCurrencyFeedCondsRequest) (*ExistCurrencyFeedCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistCurrencyFeedConds not implemented")
}
func (UnimplementedManagerServer) CountCurrencyFeeds(context.Context, *CountCurrencyFeedsRequest) (*CountCurrencyFeedsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountCurrencyFeeds not implemented")
}
func (UnimplementedManagerServer) DeleteCurrencyFeed(context.Context, *DeleteCurrencyFeedRequest) (*DeleteCurrencyFeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCurrencyFeed not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateCurrencyFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCurrencyFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateCurrencyFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.currency.v1.Manager/CreateCurrencyFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateCurrencyFeed(ctx, req.(*CreateCurrencyFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateCurrencyFeeds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCurrencyFeedsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateCurrencyFeeds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.currency.v1.Manager/CreateCurrencyFeeds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateCurrencyFeeds(ctx, req.(*CreateCurrencyFeedsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateCurrencyFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCurrencyFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateCurrencyFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.currency.v1.Manager/UpdateCurrencyFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateCurrencyFeed(ctx, req.(*UpdateCurrencyFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetCurrencyFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrencyFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetCurrencyFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.currency.v1.Manager/GetCurrencyFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetCurrencyFeed(ctx, req.(*GetCurrencyFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetCurrencyFeedOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrencyFeedOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetCurrencyFeedOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.currency.v1.Manager/GetCurrencyFeedOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetCurrencyFeedOnly(ctx, req.(*GetCurrencyFeedOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetCurrencyFeeds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCurrencyFeedsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetCurrencyFeeds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.currency.v1.Manager/GetCurrencyFeeds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetCurrencyFeeds(ctx, req.(*GetCurrencyFeedsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistCurrencyFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistCurrencyFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistCurrencyFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.currency.v1.Manager/ExistCurrencyFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistCurrencyFeed(ctx, req.(*ExistCurrencyFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistCurrencyFeedConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistCurrencyFeedCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistCurrencyFeedConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.currency.v1.Manager/ExistCurrencyFeedConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistCurrencyFeedConds(ctx, req.(*ExistCurrencyFeedCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountCurrencyFeeds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountCurrencyFeedsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountCurrencyFeeds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.currency.v1.Manager/CountCurrencyFeeds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountCurrencyFeeds(ctx, req.(*CountCurrencyFeedsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteCurrencyFeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCurrencyFeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteCurrencyFeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.currency.v1.Manager/DeleteCurrencyFeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteCurrencyFeed(ctx, req.(*DeleteCurrencyFeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chain.manager.coin.currency.v1.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCurrencyFeed",
			Handler:    _Manager_CreateCurrencyFeed_Handler,
		},
		{
			MethodName: "CreateCurrencyFeeds",
			Handler:    _Manager_CreateCurrencyFeeds_Handler,
		},
		{
			MethodName: "UpdateCurrencyFeed",
			Handler:    _Manager_UpdateCurrencyFeed_Handler,
		},
		{
			MethodName: "GetCurrencyFeed",
			Handler:    _Manager_GetCurrencyFeed_Handler,
		},
		{
			MethodName: "GetCurrencyFeedOnly",
			Handler:    _Manager_GetCurrencyFeedOnly_Handler,
		},
		{
			MethodName: "GetCurrencyFeeds",
			Handler:    _Manager_GetCurrencyFeeds_Handler,
		},
		{
			MethodName: "ExistCurrencyFeed",
			Handler:    _Manager_ExistCurrencyFeed_Handler,
		},
		{
			MethodName: "ExistCurrencyFeedConds",
			Handler:    _Manager_ExistCurrencyFeedConds_Handler,
		},
		{
			MethodName: "CountCurrencyFeeds",
			Handler:    _Manager_CountCurrencyFeeds_Handler,
		},
		{
			MethodName: "DeleteCurrencyFeed",
			Handler:    _Manager_DeleteCurrencyFeed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/chain/mgr/v1/coin/currency/feed.proto",
}
