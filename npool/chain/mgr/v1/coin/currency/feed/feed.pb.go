// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: npool/chain/mgr/v1/coin/currency/feed/feed.proto

package feed

import (
	npool "github.com/NpoolPlatform/message/npool"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FeedType int32

const (
	FeedType_DefaultFeedType FeedType = 0
	FeedType_CoinGecko       FeedType = 10
	FeedType_CoinBase        FeedType = 20
)

// Enum value maps for FeedType.
var (
	FeedType_name = map[int32]string{
		0:  "DefaultFeedType",
		10: "CoinGecko",
		20: "CoinBase",
	}
	FeedType_value = map[string]int32{
		"DefaultFeedType": 0,
		"CoinGecko":       10,
		"CoinBase":        20,
	}
)

func (x FeedType) Enum() *FeedType {
	p := new(FeedType)
	*p = x
	return p
}

func (x FeedType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FeedType) Descriptor() protoreflect.EnumDescriptor {
	return file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_enumTypes[0].Descriptor()
}

func (FeedType) Type() protoreflect.EnumType {
	return &file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_enumTypes[0]
}

func (x FeedType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FeedType.Descriptor instead.
func (FeedType) EnumDescriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_rawDescGZIP(), []int{0}
}

type CurrencyFeedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         *string   `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	CoinTypeID *string   `protobuf:"bytes,20,opt,name=CoinTypeID,proto3,oneof" json:"CoinTypeID,omitempty"`
	FeedSource *string   `protobuf:"bytes,30,opt,name=FeedSource,proto3,oneof" json:"FeedSource,omitempty"`
	FeedType   *FeedType `protobuf:"varint,40,opt,name=FeedType,proto3,enum=chain.manager.coin.currency.feed.v1.FeedType,oneof" json:"FeedType,omitempty"`
	Disabled   *bool     `protobuf:"varint,50,opt,name=Disabled,proto3,oneof" json:"Disabled,omitempty"`
}

func (x *CurrencyFeedReq) Reset() {
	*x = CurrencyFeedReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyFeedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyFeedReq) ProtoMessage() {}

func (x *CurrencyFeedReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyFeedReq.ProtoReflect.Descriptor instead.
func (*CurrencyFeedReq) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_rawDescGZIP(), []int{0}
}

func (x *CurrencyFeedReq) GetID() string {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return ""
}

func (x *CurrencyFeedReq) GetCoinTypeID() string {
	if x != nil && x.CoinTypeID != nil {
		return *x.CoinTypeID
	}
	return ""
}

func (x *CurrencyFeedReq) GetFeedSource() string {
	if x != nil && x.FeedSource != nil {
		return *x.FeedSource
	}
	return ""
}

func (x *CurrencyFeedReq) GetFeedType() FeedType {
	if x != nil && x.FeedType != nil {
		return *x.FeedType
	}
	return FeedType_DefaultFeedType
}

func (x *CurrencyFeedReq) GetDisabled() bool {
	if x != nil && x.Disabled != nil {
		return *x.Disabled
	}
	return false
}

type CurrencyFeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         string   `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	CoinTypeID string   `protobuf:"bytes,20,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty"`
	FeedSource string   `protobuf:"bytes,30,opt,name=FeedSource,proto3" json:"FeedSource,omitempty"`
	FeedType   FeedType `protobuf:"varint,40,opt,name=FeedType,proto3,enum=chain.manager.coin.currency.feed.v1.FeedType" json:"FeedType,omitempty"`
	Disabled   bool     `protobuf:"varint,50,opt,name=Disabled,proto3" json:"Disabled,omitempty"`
	CreatedAt  uint32   `protobuf:"varint,60,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt  uint32   `protobuf:"varint,70,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (x *CurrencyFeed) Reset() {
	*x = CurrencyFeed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyFeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyFeed) ProtoMessage() {}

func (x *CurrencyFeed) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyFeed.ProtoReflect.Descriptor instead.
func (*CurrencyFeed) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_rawDescGZIP(), []int{1}
}

func (x *CurrencyFeed) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *CurrencyFeed) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

func (x *CurrencyFeed) GetFeedSource() string {
	if x != nil {
		return x.FeedSource
	}
	return ""
}

func (x *CurrencyFeed) GetFeedType() FeedType {
	if x != nil {
		return x.FeedType
	}
	return FeedType_DefaultFeedType
}

func (x *CurrencyFeed) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *CurrencyFeed) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *CurrencyFeed) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         *npool.StringVal `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	CoinTypeID *npool.StringVal `protobuf:"bytes,20,opt,name=CoinTypeID,proto3,oneof" json:"CoinTypeID,omitempty"`
	Disabled   *npool.BoolVal   `protobuf:"bytes,30,opt,name=Disabled,proto3,oneof" json:"Disabled,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *npool.StringVal {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetCoinTypeID() *npool.StringVal {
	if x != nil {
		return x.CoinTypeID
	}
	return nil
}

func (x *Conds) GetDisabled() *npool.BoolVal {
	if x != nil {
		return x.Disabled
	}
	return nil
}

type CreateCurrencyFeedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CurrencyFeedReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateCurrencyFeedRequest) Reset() {
	*x = CreateCurrencyFeedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCurrencyFeedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCurrencyFeedRequest) ProtoMessage() {}

func (x *CreateCurrencyFeedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCurrencyFeedRequest.ProtoReflect.Descriptor instead.
func (*CreateCurrencyFeedRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_rawDescGZIP(), []int{3}
}

func (x *CreateCurrencyFeedRequest) GetInfo() *CurrencyFeedReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateCurrencyFeedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CurrencyFeed `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateCurrencyFeedResponse) Reset() {
	*x = CreateCurrencyFeedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCurrencyFeedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCurrencyFeedResponse) ProtoMessage() {}

func (x *CreateCurrencyFeedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCurrencyFeedResponse.ProtoReflect.Descriptor instead.
func (*CreateCurrencyFeedResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_rawDescGZIP(), []int{4}
}

func (x *CreateCurrencyFeedResponse) GetInfo() *CurrencyFeed {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateCurrencyFeedsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*CurrencyFeedReq `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateCurrencyFeedsRequest) Reset() {
	*x = CreateCurrencyFeedsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCurrencyFeedsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCurrencyFeedsRequest) ProtoMessage() {}

func (x *CreateCurrencyFeedsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCurrencyFeedsRequest.ProtoReflect.Descriptor instead.
func (*CreateCurrencyFeedsRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_rawDescGZIP(), []int{5}
}

func (x *CreateCurrencyFeedsRequest) GetInfos() []*CurrencyFeedReq {
	if x != nil {
		return x.Infos
	}
	return nil
}

type CreateCurrencyFeedsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*CurrencyFeed `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateCurrencyFeedsResponse) Reset() {
	*x = CreateCurrencyFeedsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCurrencyFeedsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCurrencyFeedsResponse) ProtoMessage() {}

func (x *CreateCurrencyFeedsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCurrencyFeedsResponse.ProtoReflect.Descriptor instead.
func (*CreateCurrencyFeedsResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_rawDescGZIP(), []int{6}
}

func (x *CreateCurrencyFeedsResponse) GetInfos() []*CurrencyFeed {
	if x != nil {
		return x.Infos
	}
	return nil
}

type UpdateCurrencyFeedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CurrencyFeedReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateCurrencyFeedRequest) Reset() {
	*x = UpdateCurrencyFeedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCurrencyFeedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCurrencyFeedRequest) ProtoMessage() {}

func (x *UpdateCurrencyFeedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCurrencyFeedRequest.ProtoReflect.Descriptor instead.
func (*UpdateCurrencyFeedRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateCurrencyFeedRequest) GetInfo() *CurrencyFeedReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateCurrencyFeedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CurrencyFeed `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateCurrencyFeedResponse) Reset() {
	*x = UpdateCurrencyFeedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCurrencyFeedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCurrencyFeedResponse) ProtoMessage() {}

func (x *UpdateCurrencyFeedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCurrencyFeedResponse.ProtoReflect.Descriptor instead.
func (*UpdateCurrencyFeedResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateCurrencyFeedResponse) GetInfo() *CurrencyFeed {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetCurrencyFeedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetCurrencyFeedRequest) Reset() {
	*x = GetCurrencyFeedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrencyFeedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrencyFeedRequest) ProtoMessage() {}

func (x *GetCurrencyFeedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrencyFeedRequest.ProtoReflect.Descriptor instead.
func (*GetCurrencyFeedRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_rawDescGZIP(), []int{9}
}

func (x *GetCurrencyFeedRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetCurrencyFeedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CurrencyFeed `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetCurrencyFeedResponse) Reset() {
	*x = GetCurrencyFeedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrencyFeedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrencyFeedResponse) ProtoMessage() {}

func (x *GetCurrencyFeedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrencyFeedResponse.ProtoReflect.Descriptor instead.
func (*GetCurrencyFeedResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_rawDescGZIP(), []int{10}
}

func (x *GetCurrencyFeedResponse) GetInfo() *CurrencyFeed {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetCurrencyFeedsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetCurrencyFeedsRequest) Reset() {
	*x = GetCurrencyFeedsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrencyFeedsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrencyFeedsRequest) ProtoMessage() {}

func (x *GetCurrencyFeedsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrencyFeedsRequest.ProtoReflect.Descriptor instead.
func (*GetCurrencyFeedsRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_rawDescGZIP(), []int{11}
}

func (x *GetCurrencyFeedsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetCurrencyFeedsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetCurrencyFeedsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetCurrencyFeedsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*CurrencyFeed `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32          `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetCurrencyFeedsResponse) Reset() {
	*x = GetCurrencyFeedsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrencyFeedsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrencyFeedsResponse) ProtoMessage() {}

func (x *GetCurrencyFeedsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrencyFeedsResponse.ProtoReflect.Descriptor instead.
func (*GetCurrencyFeedsResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_rawDescGZIP(), []int{12}
}

func (x *GetCurrencyFeedsResponse) GetInfos() []*CurrencyFeed {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetCurrencyFeedsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetCurrencyFeedOnlyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *GetCurrencyFeedOnlyRequest) Reset() {
	*x = GetCurrencyFeedOnlyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrencyFeedOnlyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrencyFeedOnlyRequest) ProtoMessage() {}

func (x *GetCurrencyFeedOnlyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrencyFeedOnlyRequest.ProtoReflect.Descriptor instead.
func (*GetCurrencyFeedOnlyRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_rawDescGZIP(), []int{13}
}

func (x *GetCurrencyFeedOnlyRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type GetCurrencyFeedOnlyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CurrencyFeed `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetCurrencyFeedOnlyResponse) Reset() {
	*x = GetCurrencyFeedOnlyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrencyFeedOnlyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrencyFeedOnlyResponse) ProtoMessage() {}

func (x *GetCurrencyFeedOnlyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrencyFeedOnlyResponse.ProtoReflect.Descriptor instead.
func (*GetCurrencyFeedOnlyResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_rawDescGZIP(), []int{14}
}

func (x *GetCurrencyFeedOnlyResponse) GetInfo() *CurrencyFeed {
	if x != nil {
		return x.Info
	}
	return nil
}

type ExistCurrencyFeedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ExistCurrencyFeedRequest) Reset() {
	*x = ExistCurrencyFeedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistCurrencyFeedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistCurrencyFeedRequest) ProtoMessage() {}

func (x *ExistCurrencyFeedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistCurrencyFeedRequest.ProtoReflect.Descriptor instead.
func (*ExistCurrencyFeedRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_rawDescGZIP(), []int{15}
}

func (x *ExistCurrencyFeedRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ExistCurrencyFeedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistCurrencyFeedResponse) Reset() {
	*x = ExistCurrencyFeedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistCurrencyFeedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistCurrencyFeedResponse) ProtoMessage() {}

func (x *ExistCurrencyFeedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistCurrencyFeedResponse.ProtoReflect.Descriptor instead.
func (*ExistCurrencyFeedResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_rawDescGZIP(), []int{16}
}

func (x *ExistCurrencyFeedResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type ExistCurrencyFeedCondsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *ExistCurrencyFeedCondsRequest) Reset() {
	*x = ExistCurrencyFeedCondsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistCurrencyFeedCondsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistCurrencyFeedCondsRequest) ProtoMessage() {}

func (x *ExistCurrencyFeedCondsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistCurrencyFeedCondsRequest.ProtoReflect.Descriptor instead.
func (*ExistCurrencyFeedCondsRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_rawDescGZIP(), []int{17}
}

func (x *ExistCurrencyFeedCondsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type ExistCurrencyFeedCondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistCurrencyFeedCondsResponse) Reset() {
	*x = ExistCurrencyFeedCondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistCurrencyFeedCondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistCurrencyFeedCondsResponse) ProtoMessage() {}

func (x *ExistCurrencyFeedCondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistCurrencyFeedCondsResponse.ProtoReflect.Descriptor instead.
func (*ExistCurrencyFeedCondsResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_rawDescGZIP(), []int{18}
}

func (x *ExistCurrencyFeedCondsResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type CountCurrencyFeedsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *CountCurrencyFeedsRequest) Reset() {
	*x = CountCurrencyFeedsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountCurrencyFeedsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountCurrencyFeedsRequest) ProtoMessage() {}

func (x *CountCurrencyFeedsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountCurrencyFeedsRequest.ProtoReflect.Descriptor instead.
func (*CountCurrencyFeedsRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_rawDescGZIP(), []int{19}
}

func (x *CountCurrencyFeedsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type CountCurrencyFeedsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info uint32 `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CountCurrencyFeedsResponse) Reset() {
	*x = CountCurrencyFeedsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountCurrencyFeedsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountCurrencyFeedsResponse) ProtoMessage() {}

func (x *CountCurrencyFeedsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountCurrencyFeedsResponse.ProtoReflect.Descriptor instead.
func (*CountCurrencyFeedsResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_rawDescGZIP(), []int{20}
}

func (x *CountCurrencyFeedsResponse) GetInfo() uint32 {
	if x != nil {
		return x.Info
	}
	return 0
}

type DeleteCurrencyFeedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *DeleteCurrencyFeedRequest) Reset() {
	*x = DeleteCurrencyFeedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCurrencyFeedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCurrencyFeedRequest) ProtoMessage() {}

func (x *DeleteCurrencyFeedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCurrencyFeedRequest.ProtoReflect.Descriptor instead.
func (*DeleteCurrencyFeedRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteCurrencyFeedRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type DeleteCurrencyFeedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CurrencyFeed `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteCurrencyFeedResponse) Reset() {
	*x = DeleteCurrencyFeedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCurrencyFeedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCurrencyFeedResponse) ProtoMessage() {}

func (x *DeleteCurrencyFeedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCurrencyFeedResponse.ProtoReflect.Descriptor instead.
func (*DeleteCurrencyFeedResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteCurrencyFeedResponse) GetInfo() *CurrencyFeed {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_chain_mgr_v1_coin_currency_feed_feed_proto protoreflect.FileDescriptor

var file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_rawDesc = []byte{
	0x0a, 0x30, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x67,
	0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x2f, 0x66, 0x65, 0x65, 0x64, 0x2f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x23, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e,
	0x66, 0x65, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6e, 0x70, 0x6f, 0x6f,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa0, 0x02, 0x0a, 0x0f, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01,
	0x12, 0x23, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x46, 0x65, 0x65, 0x64, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x46, 0x65, 0x65,
	0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x08, 0x46, 0x65,
	0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x48, 0x03, 0x52, 0x08, 0x46,
	0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x08,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x49, 0x44, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x44, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x46, 0x65, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x81, 0x02, 0x0a, 0x0c, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x65, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43,
	0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x46,
	0x65, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x46, 0x65, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x08, 0x46,
	0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x66, 0x65, 0x65, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x46, 0x65,
	0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x46, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xc2,
	0x01, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x12, 0x38, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x0a, 0x43,
	0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x08,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x48, 0x02, 0x52, 0x08, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x43, 0x6f, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x22, 0x65, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x48, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x66, 0x65, 0x65,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x65, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x63, 0x0a, 0x1a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x65, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x65, 0x65, 0x64, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x68, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x46, 0x65, 0x65, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a,
	0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x65, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x66, 0x0a, 0x1b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x65, 0x65, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x65, 0x65, 0x64, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x22, 0x65, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x65, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x63, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x46, 0x65, 0x65, 0x64, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x28, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x65, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x60, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x66,
	0x65, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x46,
	0x65, 0x65, 0x64, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x89, 0x01, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x65, 0x65, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x79, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x46, 0x65, 0x65, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x47, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x66,
	0x65, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x46,
	0x65, 0x65, 0x64, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x22, 0x5e, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x46,
	0x65, 0x65, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40,
	0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x66, 0x65, 0x65, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x22, 0x64, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x46,
	0x65, 0x65, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x45, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x66, 0x65, 0x65, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x65, 0x65, 0x64,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2a, 0x0a, 0x18, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x44, 0x22, 0x2f, 0x0a, 0x19, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x61, 0x0a, 0x1d, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x46, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52,
	0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x34, 0x0a, 0x1e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5d, 0x0a, 0x19,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x65, 0x65,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x05, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x30, 0x0a, 0x1a, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x65, 0x65, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2b, 0x0a,
	0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x46,
	0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x63, 0x0a, 0x1a, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x65, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x65, 0x65, 0x64, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x2a,
	0x3c, 0x0a, 0x08, 0x46, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x6f, 0x69, 0x6e, 0x47, 0x65, 0x63, 0x6b, 0x6f, 0x10, 0x0a, 0x12,
	0x0c, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x10, 0x14, 0x32, 0x8d, 0x0c,
	0x0a, 0x07, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x97, 0x01, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x65, 0x65, 0x64,
	0x12, 0x3e, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x66,
	0x65, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3f, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x66,
	0x65, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x9a, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x65, 0x65, 0x64, 0x73, 0x12, 0x3f, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x46, 0x65, 0x65, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x46, 0x65, 0x65, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x97, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x46, 0x65, 0x65, 0x64, 0x12, 0x3e, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x65, 0x65, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x65, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8e, 0x01, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x65, 0x65, 0x64, 0x12, 0x3b,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x66, 0x65, 0x65,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x65, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9a, 0x01, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x65, 0x65, 0x64, 0x4f,
	0x6e, 0x6c, 0x79, 0x12, 0x3f, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x65, 0x65, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x65, 0x65, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x91, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x65, 0x65, 0x64, 0x73, 0x12, 0x3c, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x66, 0x65, 0x65, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x46,
	0x65, 0x65, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x65, 0x65,
	0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x94, 0x01, 0x0a,
	0x11, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x65,
	0x65, 0x64, 0x12, 0x3d, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3e, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e,
	0x66, 0x65, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0xa3, 0x01, 0x0a, 0x16, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x42,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x66, 0x65, 0x65,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x46, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x43, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x65, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x97, 0x01, 0x0a, 0x12, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x65, 0x65, 0x64, 0x73,
	0x12, 0x3e, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x66,
	0x65, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x46, 0x65, 0x65, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3f, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x66,
	0x65, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x46, 0x65, 0x65, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x97, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x46, 0x65, 0x65, 0x64, 0x12, 0x3e, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x46,
	0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x46,
	0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x48, 0x5a,
	0x46, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f,
	0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x67,
	0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x2f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_rawDescOnce sync.Once
	file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_rawDescData = file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_rawDesc
)

func file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_rawDescGZIP() []byte {
	file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_rawDescOnce.Do(func() {
		file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_rawDescData)
	})
	return file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_rawDescData
}

var file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_goTypes = []interface{}{
	(FeedType)(0),                          // 0: chain.manager.coin.currency.feed.v1.FeedType
	(*CurrencyFeedReq)(nil),                // 1: chain.manager.coin.currency.feed.v1.CurrencyFeedReq
	(*CurrencyFeed)(nil),                   // 2: chain.manager.coin.currency.feed.v1.CurrencyFeed
	(*Conds)(nil),                          // 3: chain.manager.coin.currency.feed.v1.Conds
	(*CreateCurrencyFeedRequest)(nil),      // 4: chain.manager.coin.currency.feed.v1.CreateCurrencyFeedRequest
	(*CreateCurrencyFeedResponse)(nil),     // 5: chain.manager.coin.currency.feed.v1.CreateCurrencyFeedResponse
	(*CreateCurrencyFeedsRequest)(nil),     // 6: chain.manager.coin.currency.feed.v1.CreateCurrencyFeedsRequest
	(*CreateCurrencyFeedsResponse)(nil),    // 7: chain.manager.coin.currency.feed.v1.CreateCurrencyFeedsResponse
	(*UpdateCurrencyFeedRequest)(nil),      // 8: chain.manager.coin.currency.feed.v1.UpdateCurrencyFeedRequest
	(*UpdateCurrencyFeedResponse)(nil),     // 9: chain.manager.coin.currency.feed.v1.UpdateCurrencyFeedResponse
	(*GetCurrencyFeedRequest)(nil),         // 10: chain.manager.coin.currency.feed.v1.GetCurrencyFeedRequest
	(*GetCurrencyFeedResponse)(nil),        // 11: chain.manager.coin.currency.feed.v1.GetCurrencyFeedResponse
	(*GetCurrencyFeedsRequest)(nil),        // 12: chain.manager.coin.currency.feed.v1.GetCurrencyFeedsRequest
	(*GetCurrencyFeedsResponse)(nil),       // 13: chain.manager.coin.currency.feed.v1.GetCurrencyFeedsResponse
	(*GetCurrencyFeedOnlyRequest)(nil),     // 14: chain.manager.coin.currency.feed.v1.GetCurrencyFeedOnlyRequest
	(*GetCurrencyFeedOnlyResponse)(nil),    // 15: chain.manager.coin.currency.feed.v1.GetCurrencyFeedOnlyResponse
	(*ExistCurrencyFeedRequest)(nil),       // 16: chain.manager.coin.currency.feed.v1.ExistCurrencyFeedRequest
	(*ExistCurrencyFeedResponse)(nil),      // 17: chain.manager.coin.currency.feed.v1.ExistCurrencyFeedResponse
	(*ExistCurrencyFeedCondsRequest)(nil),  // 18: chain.manager.coin.currency.feed.v1.ExistCurrencyFeedCondsRequest
	(*ExistCurrencyFeedCondsResponse)(nil), // 19: chain.manager.coin.currency.feed.v1.ExistCurrencyFeedCondsResponse
	(*CountCurrencyFeedsRequest)(nil),      // 20: chain.manager.coin.currency.feed.v1.CountCurrencyFeedsRequest
	(*CountCurrencyFeedsResponse)(nil),     // 21: chain.manager.coin.currency.feed.v1.CountCurrencyFeedsResponse
	(*DeleteCurrencyFeedRequest)(nil),      // 22: chain.manager.coin.currency.feed.v1.DeleteCurrencyFeedRequest
	(*DeleteCurrencyFeedResponse)(nil),     // 23: chain.manager.coin.currency.feed.v1.DeleteCurrencyFeedResponse
	(*npool.StringVal)(nil),                // 24: npool.v1.StringVal
	(*npool.BoolVal)(nil),                  // 25: npool.v1.BoolVal
}
var file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_depIdxs = []int32{
	0,  // 0: chain.manager.coin.currency.feed.v1.CurrencyFeedReq.FeedType:type_name -> chain.manager.coin.currency.feed.v1.FeedType
	0,  // 1: chain.manager.coin.currency.feed.v1.CurrencyFeed.FeedType:type_name -> chain.manager.coin.currency.feed.v1.FeedType
	24, // 2: chain.manager.coin.currency.feed.v1.Conds.ID:type_name -> npool.v1.StringVal
	24, // 3: chain.manager.coin.currency.feed.v1.Conds.CoinTypeID:type_name -> npool.v1.StringVal
	25, // 4: chain.manager.coin.currency.feed.v1.Conds.Disabled:type_name -> npool.v1.BoolVal
	1,  // 5: chain.manager.coin.currency.feed.v1.CreateCurrencyFeedRequest.Info:type_name -> chain.manager.coin.currency.feed.v1.CurrencyFeedReq
	2,  // 6: chain.manager.coin.currency.feed.v1.CreateCurrencyFeedResponse.Info:type_name -> chain.manager.coin.currency.feed.v1.CurrencyFeed
	1,  // 7: chain.manager.coin.currency.feed.v1.CreateCurrencyFeedsRequest.Infos:type_name -> chain.manager.coin.currency.feed.v1.CurrencyFeedReq
	2,  // 8: chain.manager.coin.currency.feed.v1.CreateCurrencyFeedsResponse.Infos:type_name -> chain.manager.coin.currency.feed.v1.CurrencyFeed
	1,  // 9: chain.manager.coin.currency.feed.v1.UpdateCurrencyFeedRequest.Info:type_name -> chain.manager.coin.currency.feed.v1.CurrencyFeedReq
	2,  // 10: chain.manager.coin.currency.feed.v1.UpdateCurrencyFeedResponse.Info:type_name -> chain.manager.coin.currency.feed.v1.CurrencyFeed
	2,  // 11: chain.manager.coin.currency.feed.v1.GetCurrencyFeedResponse.Info:type_name -> chain.manager.coin.currency.feed.v1.CurrencyFeed
	3,  // 12: chain.manager.coin.currency.feed.v1.GetCurrencyFeedsRequest.Conds:type_name -> chain.manager.coin.currency.feed.v1.Conds
	2,  // 13: chain.manager.coin.currency.feed.v1.GetCurrencyFeedsResponse.Infos:type_name -> chain.manager.coin.currency.feed.v1.CurrencyFeed
	3,  // 14: chain.manager.coin.currency.feed.v1.GetCurrencyFeedOnlyRequest.Conds:type_name -> chain.manager.coin.currency.feed.v1.Conds
	2,  // 15: chain.manager.coin.currency.feed.v1.GetCurrencyFeedOnlyResponse.Info:type_name -> chain.manager.coin.currency.feed.v1.CurrencyFeed
	3,  // 16: chain.manager.coin.currency.feed.v1.ExistCurrencyFeedCondsRequest.Conds:type_name -> chain.manager.coin.currency.feed.v1.Conds
	3,  // 17: chain.manager.coin.currency.feed.v1.CountCurrencyFeedsRequest.Conds:type_name -> chain.manager.coin.currency.feed.v1.Conds
	2,  // 18: chain.manager.coin.currency.feed.v1.DeleteCurrencyFeedResponse.Info:type_name -> chain.manager.coin.currency.feed.v1.CurrencyFeed
	4,  // 19: chain.manager.coin.currency.feed.v1.Manager.CreateCurrencyFeed:input_type -> chain.manager.coin.currency.feed.v1.CreateCurrencyFeedRequest
	6,  // 20: chain.manager.coin.currency.feed.v1.Manager.CreateCurrencyFeeds:input_type -> chain.manager.coin.currency.feed.v1.CreateCurrencyFeedsRequest
	8,  // 21: chain.manager.coin.currency.feed.v1.Manager.UpdateCurrencyFeed:input_type -> chain.manager.coin.currency.feed.v1.UpdateCurrencyFeedRequest
	10, // 22: chain.manager.coin.currency.feed.v1.Manager.GetCurrencyFeed:input_type -> chain.manager.coin.currency.feed.v1.GetCurrencyFeedRequest
	14, // 23: chain.manager.coin.currency.feed.v1.Manager.GetCurrencyFeedOnly:input_type -> chain.manager.coin.currency.feed.v1.GetCurrencyFeedOnlyRequest
	12, // 24: chain.manager.coin.currency.feed.v1.Manager.GetCurrencyFeeds:input_type -> chain.manager.coin.currency.feed.v1.GetCurrencyFeedsRequest
	16, // 25: chain.manager.coin.currency.feed.v1.Manager.ExistCurrencyFeed:input_type -> chain.manager.coin.currency.feed.v1.ExistCurrencyFeedRequest
	18, // 26: chain.manager.coin.currency.feed.v1.Manager.ExistCurrencyFeedConds:input_type -> chain.manager.coin.currency.feed.v1.ExistCurrencyFeedCondsRequest
	20, // 27: chain.manager.coin.currency.feed.v1.Manager.CountCurrencyFeeds:input_type -> chain.manager.coin.currency.feed.v1.CountCurrencyFeedsRequest
	22, // 28: chain.manager.coin.currency.feed.v1.Manager.DeleteCurrencyFeed:input_type -> chain.manager.coin.currency.feed.v1.DeleteCurrencyFeedRequest
	5,  // 29: chain.manager.coin.currency.feed.v1.Manager.CreateCurrencyFeed:output_type -> chain.manager.coin.currency.feed.v1.CreateCurrencyFeedResponse
	7,  // 30: chain.manager.coin.currency.feed.v1.Manager.CreateCurrencyFeeds:output_type -> chain.manager.coin.currency.feed.v1.CreateCurrencyFeedsResponse
	9,  // 31: chain.manager.coin.currency.feed.v1.Manager.UpdateCurrencyFeed:output_type -> chain.manager.coin.currency.feed.v1.UpdateCurrencyFeedResponse
	11, // 32: chain.manager.coin.currency.feed.v1.Manager.GetCurrencyFeed:output_type -> chain.manager.coin.currency.feed.v1.GetCurrencyFeedResponse
	15, // 33: chain.manager.coin.currency.feed.v1.Manager.GetCurrencyFeedOnly:output_type -> chain.manager.coin.currency.feed.v1.GetCurrencyFeedOnlyResponse
	13, // 34: chain.manager.coin.currency.feed.v1.Manager.GetCurrencyFeeds:output_type -> chain.manager.coin.currency.feed.v1.GetCurrencyFeedsResponse
	17, // 35: chain.manager.coin.currency.feed.v1.Manager.ExistCurrencyFeed:output_type -> chain.manager.coin.currency.feed.v1.ExistCurrencyFeedResponse
	19, // 36: chain.manager.coin.currency.feed.v1.Manager.ExistCurrencyFeedConds:output_type -> chain.manager.coin.currency.feed.v1.ExistCurrencyFeedCondsResponse
	21, // 37: chain.manager.coin.currency.feed.v1.Manager.CountCurrencyFeeds:output_type -> chain.manager.coin.currency.feed.v1.CountCurrencyFeedsResponse
	23, // 38: chain.manager.coin.currency.feed.v1.Manager.DeleteCurrencyFeed:output_type -> chain.manager.coin.currency.feed.v1.DeleteCurrencyFeedResponse
	29, // [29:39] is the sub-list for method output_type
	19, // [19:29] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_init() }
func file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_init() {
	if File_npool_chain_mgr_v1_coin_currency_feed_feed_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyFeedReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyFeed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCurrencyFeedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCurrencyFeedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCurrencyFeedsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCurrencyFeedsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCurrencyFeedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCurrencyFeedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrencyFeedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrencyFeedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrencyFeedsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrencyFeedsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrencyFeedOnlyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrencyFeedOnlyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistCurrencyFeedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistCurrencyFeedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistCurrencyFeedCondsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistCurrencyFeedCondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountCurrencyFeedsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountCurrencyFeedsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCurrencyFeedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCurrencyFeedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_goTypes,
		DependencyIndexes: file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_depIdxs,
		EnumInfos:         file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_enumTypes,
		MessageInfos:      file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_msgTypes,
	}.Build()
	File_npool_chain_mgr_v1_coin_currency_feed_feed_proto = out.File
	file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_rawDesc = nil
	file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_goTypes = nil
	file_npool_chain_mgr_v1_coin_currency_feed_feed_proto_depIdxs = nil
}
