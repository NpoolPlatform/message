// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: npool/chain/mgr/v1/coin/currency/value/value.proto

package value

import (
	npool "github.com/NpoolPlatform/message/npool"
	feed "github.com/NpoolPlatform/message/npool/chain/mgr/v1/coin/currency/feed"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CurrencyValueReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           *string        `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	CoinTypeID   *string        `protobuf:"bytes,20,opt,name=CoinTypeID,proto3,oneof" json:"CoinTypeID,omitempty"`
	MarketValue  *string        `protobuf:"bytes,30,opt,name=MarketValue,proto3,oneof" json:"MarketValue,omitempty"`
	FeedSourceID *string        `protobuf:"bytes,40,opt,name=FeedSourceID,proto3,oneof" json:"FeedSourceID,omitempty"`
	FeedType     *feed.FeedType `protobuf:"varint,50,opt,name=FeedType,proto3,enum=chain.manager.coin.currency.feed.v1.FeedType,oneof" json:"FeedType,omitempty"`
}

func (x *CurrencyValueReq) Reset() {
	*x = CurrencyValueReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyValueReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyValueReq) ProtoMessage() {}

func (x *CurrencyValueReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyValueReq.ProtoReflect.Descriptor instead.
func (*CurrencyValueReq) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_currency_value_value_proto_rawDescGZIP(), []int{0}
}

func (x *CurrencyValueReq) GetID() string {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return ""
}

func (x *CurrencyValueReq) GetCoinTypeID() string {
	if x != nil && x.CoinTypeID != nil {
		return *x.CoinTypeID
	}
	return ""
}

func (x *CurrencyValueReq) GetMarketValue() string {
	if x != nil && x.MarketValue != nil {
		return *x.MarketValue
	}
	return ""
}

func (x *CurrencyValueReq) GetFeedSourceID() string {
	if x != nil && x.FeedSourceID != nil {
		return *x.FeedSourceID
	}
	return ""
}

func (x *CurrencyValueReq) GetFeedType() feed.FeedType {
	if x != nil && x.FeedType != nil {
		return *x.FeedType
	}
	return feed.FeedType(0)
}

type CurrencyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           string        `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	CoinTypeID   string        `protobuf:"bytes,20,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty"`
	FeedSourceID string        `protobuf:"bytes,30,opt,name=FeedSourceID,proto3" json:"FeedSourceID,omitempty"`
	FeedType     feed.FeedType `protobuf:"varint,40,opt,name=FeedType,proto3,enum=chain.manager.coin.currency.feed.v1.FeedType" json:"FeedType,omitempty"`
	CreatedAt    uint32        `protobuf:"varint,50,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt    uint32        `protobuf:"varint,60,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (x *CurrencyValue) Reset() {
	*x = CurrencyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyValue) ProtoMessage() {}

func (x *CurrencyValue) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyValue.ProtoReflect.Descriptor instead.
func (*CurrencyValue) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_currency_value_value_proto_rawDescGZIP(), []int{1}
}

func (x *CurrencyValue) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *CurrencyValue) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

func (x *CurrencyValue) GetFeedSourceID() string {
	if x != nil {
		return x.FeedSourceID
	}
	return ""
}

func (x *CurrencyValue) GetFeedType() feed.FeedType {
	if x != nil {
		return x.FeedType
	}
	return feed.FeedType(0)
}

func (x *CurrencyValue) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *CurrencyValue) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         *npool.StringVal `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	CoinTypeID *npool.StringVal `protobuf:"bytes,20,opt,name=CoinTypeID,proto3,oneof" json:"CoinTypeID,omitempty"`
	StartAt    *npool.Uint32Val `protobuf:"bytes,30,opt,name=StartAt,proto3,oneof" json:"StartAt,omitempty"`
	EndAt      *npool.Uint32Val `protobuf:"bytes,40,opt,name=EndAt,proto3,oneof" json:"EndAt,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_currency_value_value_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *npool.StringVal {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetCoinTypeID() *npool.StringVal {
	if x != nil {
		return x.CoinTypeID
	}
	return nil
}

func (x *Conds) GetStartAt() *npool.Uint32Val {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *Conds) GetEndAt() *npool.Uint32Val {
	if x != nil {
		return x.EndAt
	}
	return nil
}

type CreateCurrencyValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CurrencyValueReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateCurrencyValueRequest) Reset() {
	*x = CreateCurrencyValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCurrencyValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCurrencyValueRequest) ProtoMessage() {}

func (x *CreateCurrencyValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCurrencyValueRequest.ProtoReflect.Descriptor instead.
func (*CreateCurrencyValueRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_currency_value_value_proto_rawDescGZIP(), []int{3}
}

func (x *CreateCurrencyValueRequest) GetInfo() *CurrencyValueReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateCurrencyValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CurrencyValue `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateCurrencyValueResponse) Reset() {
	*x = CreateCurrencyValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCurrencyValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCurrencyValueResponse) ProtoMessage() {}

func (x *CreateCurrencyValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCurrencyValueResponse.ProtoReflect.Descriptor instead.
func (*CreateCurrencyValueResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_currency_value_value_proto_rawDescGZIP(), []int{4}
}

func (x *CreateCurrencyValueResponse) GetInfo() *CurrencyValue {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateCurrencyValuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*CurrencyValueReq `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateCurrencyValuesRequest) Reset() {
	*x = CreateCurrencyValuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCurrencyValuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCurrencyValuesRequest) ProtoMessage() {}

func (x *CreateCurrencyValuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCurrencyValuesRequest.ProtoReflect.Descriptor instead.
func (*CreateCurrencyValuesRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_currency_value_value_proto_rawDescGZIP(), []int{5}
}

func (x *CreateCurrencyValuesRequest) GetInfos() []*CurrencyValueReq {
	if x != nil {
		return x.Infos
	}
	return nil
}

type CreateCurrencyValuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*CurrencyValue `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateCurrencyValuesResponse) Reset() {
	*x = CreateCurrencyValuesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCurrencyValuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCurrencyValuesResponse) ProtoMessage() {}

func (x *CreateCurrencyValuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCurrencyValuesResponse.ProtoReflect.Descriptor instead.
func (*CreateCurrencyValuesResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_currency_value_value_proto_rawDescGZIP(), []int{6}
}

func (x *CreateCurrencyValuesResponse) GetInfos() []*CurrencyValue {
	if x != nil {
		return x.Infos
	}
	return nil
}

type UpdateCurrencyValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CurrencyValueReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateCurrencyValueRequest) Reset() {
	*x = UpdateCurrencyValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCurrencyValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCurrencyValueRequest) ProtoMessage() {}

func (x *UpdateCurrencyValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCurrencyValueRequest.ProtoReflect.Descriptor instead.
func (*UpdateCurrencyValueRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_currency_value_value_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateCurrencyValueRequest) GetInfo() *CurrencyValueReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateCurrencyValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CurrencyValue `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateCurrencyValueResponse) Reset() {
	*x = UpdateCurrencyValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCurrencyValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCurrencyValueResponse) ProtoMessage() {}

func (x *UpdateCurrencyValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCurrencyValueResponse.ProtoReflect.Descriptor instead.
func (*UpdateCurrencyValueResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_currency_value_value_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateCurrencyValueResponse) GetInfo() *CurrencyValue {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetCurrencyValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetCurrencyValueRequest) Reset() {
	*x = GetCurrencyValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrencyValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrencyValueRequest) ProtoMessage() {}

func (x *GetCurrencyValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrencyValueRequest.ProtoReflect.Descriptor instead.
func (*GetCurrencyValueRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_currency_value_value_proto_rawDescGZIP(), []int{9}
}

func (x *GetCurrencyValueRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetCurrencyValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CurrencyValue `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetCurrencyValueResponse) Reset() {
	*x = GetCurrencyValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrencyValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrencyValueResponse) ProtoMessage() {}

func (x *GetCurrencyValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrencyValueResponse.ProtoReflect.Descriptor instead.
func (*GetCurrencyValueResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_currency_value_value_proto_rawDescGZIP(), []int{10}
}

func (x *GetCurrencyValueResponse) GetInfo() *CurrencyValue {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetCurrencyValuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetCurrencyValuesRequest) Reset() {
	*x = GetCurrencyValuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrencyValuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrencyValuesRequest) ProtoMessage() {}

func (x *GetCurrencyValuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrencyValuesRequest.ProtoReflect.Descriptor instead.
func (*GetCurrencyValuesRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_currency_value_value_proto_rawDescGZIP(), []int{11}
}

func (x *GetCurrencyValuesRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetCurrencyValuesRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetCurrencyValuesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetCurrencyValuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*CurrencyValue `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32           `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetCurrencyValuesResponse) Reset() {
	*x = GetCurrencyValuesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrencyValuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrencyValuesResponse) ProtoMessage() {}

func (x *GetCurrencyValuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrencyValuesResponse.ProtoReflect.Descriptor instead.
func (*GetCurrencyValuesResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_currency_value_value_proto_rawDescGZIP(), []int{12}
}

func (x *GetCurrencyValuesResponse) GetInfos() []*CurrencyValue {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetCurrencyValuesResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetCurrencyValueOnlyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *GetCurrencyValueOnlyRequest) Reset() {
	*x = GetCurrencyValueOnlyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrencyValueOnlyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrencyValueOnlyRequest) ProtoMessage() {}

func (x *GetCurrencyValueOnlyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrencyValueOnlyRequest.ProtoReflect.Descriptor instead.
func (*GetCurrencyValueOnlyRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_currency_value_value_proto_rawDescGZIP(), []int{13}
}

func (x *GetCurrencyValueOnlyRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type GetCurrencyValueOnlyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CurrencyValue `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetCurrencyValueOnlyResponse) Reset() {
	*x = GetCurrencyValueOnlyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrencyValueOnlyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrencyValueOnlyResponse) ProtoMessage() {}

func (x *GetCurrencyValueOnlyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrencyValueOnlyResponse.ProtoReflect.Descriptor instead.
func (*GetCurrencyValueOnlyResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_currency_value_value_proto_rawDescGZIP(), []int{14}
}

func (x *GetCurrencyValueOnlyResponse) GetInfo() *CurrencyValue {
	if x != nil {
		return x.Info
	}
	return nil
}

type ExistCurrencyValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ExistCurrencyValueRequest) Reset() {
	*x = ExistCurrencyValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistCurrencyValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistCurrencyValueRequest) ProtoMessage() {}

func (x *ExistCurrencyValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistCurrencyValueRequest.ProtoReflect.Descriptor instead.
func (*ExistCurrencyValueRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_currency_value_value_proto_rawDescGZIP(), []int{15}
}

func (x *ExistCurrencyValueRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ExistCurrencyValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistCurrencyValueResponse) Reset() {
	*x = ExistCurrencyValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistCurrencyValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistCurrencyValueResponse) ProtoMessage() {}

func (x *ExistCurrencyValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistCurrencyValueResponse.ProtoReflect.Descriptor instead.
func (*ExistCurrencyValueResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_currency_value_value_proto_rawDescGZIP(), []int{16}
}

func (x *ExistCurrencyValueResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type ExistCurrencyValueCondsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *ExistCurrencyValueCondsRequest) Reset() {
	*x = ExistCurrencyValueCondsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistCurrencyValueCondsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistCurrencyValueCondsRequest) ProtoMessage() {}

func (x *ExistCurrencyValueCondsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistCurrencyValueCondsRequest.ProtoReflect.Descriptor instead.
func (*ExistCurrencyValueCondsRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_currency_value_value_proto_rawDescGZIP(), []int{17}
}

func (x *ExistCurrencyValueCondsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type ExistCurrencyValueCondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistCurrencyValueCondsResponse) Reset() {
	*x = ExistCurrencyValueCondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistCurrencyValueCondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistCurrencyValueCondsResponse) ProtoMessage() {}

func (x *ExistCurrencyValueCondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistCurrencyValueCondsResponse.ProtoReflect.Descriptor instead.
func (*ExistCurrencyValueCondsResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_currency_value_value_proto_rawDescGZIP(), []int{18}
}

func (x *ExistCurrencyValueCondsResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type CountCurrencyValuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *CountCurrencyValuesRequest) Reset() {
	*x = CountCurrencyValuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountCurrencyValuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountCurrencyValuesRequest) ProtoMessage() {}

func (x *CountCurrencyValuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountCurrencyValuesRequest.ProtoReflect.Descriptor instead.
func (*CountCurrencyValuesRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_currency_value_value_proto_rawDescGZIP(), []int{19}
}

func (x *CountCurrencyValuesRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type CountCurrencyValuesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info uint32 `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CountCurrencyValuesResponse) Reset() {
	*x = CountCurrencyValuesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountCurrencyValuesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountCurrencyValuesResponse) ProtoMessage() {}

func (x *CountCurrencyValuesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountCurrencyValuesResponse.ProtoReflect.Descriptor instead.
func (*CountCurrencyValuesResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_currency_value_value_proto_rawDescGZIP(), []int{20}
}

func (x *CountCurrencyValuesResponse) GetInfo() uint32 {
	if x != nil {
		return x.Info
	}
	return 0
}

type DeleteCurrencyValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *DeleteCurrencyValueRequest) Reset() {
	*x = DeleteCurrencyValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCurrencyValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCurrencyValueRequest) ProtoMessage() {}

func (x *DeleteCurrencyValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCurrencyValueRequest.ProtoReflect.Descriptor instead.
func (*DeleteCurrencyValueRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_currency_value_value_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteCurrencyValueRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type DeleteCurrencyValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CurrencyValue `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteCurrencyValueResponse) Reset() {
	*x = DeleteCurrencyValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCurrencyValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCurrencyValueResponse) ProtoMessage() {}

func (x *DeleteCurrencyValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCurrencyValueResponse.ProtoReflect.Descriptor instead.
func (*DeleteCurrencyValueResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_currency_value_value_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteCurrencyValueResponse) GetInfo() *CurrencyValue {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_chain_mgr_v1_coin_currency_value_value_proto protoreflect.FileDescriptor

var file_npool_chain_mgr_v1_coin_currency_value_value_proto_rawDesc = []byte{
	0x0a, 0x32, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x67,
	0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6e,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x6e, 0x70, 0x6f, 0x6f,
	0x6c, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x67, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x69, 0x6e, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x66, 0x65, 0x65,
	0x64, 0x2f, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb0, 0x02, 0x0a,
	0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x13, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x43, 0x6f,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x0b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x46, 0x65, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0c, 0x46, 0x65, 0x65, 0x64,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x08, 0x46,
	0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x66, 0x65, 0x65, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x48, 0x04, 0x52, 0x08,
	0x46, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x49, 0x44, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x44, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x46, 0x65, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22,
	0xea, 0x01, 0x0a, 0x0d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x65, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49,
	0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x65, 0x65, 0x64, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x44, 0x12, 0x49, 0x0a, 0x08, 0x46, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65,
	0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x46, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xfb, 0x01, 0x0a,
	0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01,
	0x12, 0x38, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x0a, 0x43, 0x6f, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x07, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x48, 0x02, 0x52, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2e,
	0x0a, 0x05, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x48, 0x03, 0x52, 0x05, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x05,
	0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x44, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x22, 0x68, 0x0a, 0x1a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x66, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x33, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6b, 0x0a, 0x1b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x05, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x65, 0x71, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x69, 0x0a, 0x1c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x05, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x22, 0x68, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x4a, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x66,
	0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x29, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x44, 0x22, 0x63, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x8b, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52,
	0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x22, 0x7c, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x49, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0x60, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x41, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x22, 0x67, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2b, 0x0a,
	0x19, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x30, 0x0a, 0x1a, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x63, 0x0a, 0x1e,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41,
	0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x22, 0x35, 0x0a, 0x1f, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5f, 0x0a, 0x1a, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x31, 0x0a, 0x1b, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2c, 0x0a, 0x1a,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x66, 0x0a, 0x1b, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x32, 0xbf, 0x0c, 0x0a, 0x07, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x9c,
	0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x40, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9f, 0x01,
	0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x41, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x9c, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x40, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x93,
	0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x3d, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x9f, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x41, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x42, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x96, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x3e, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x99, 0x01, 0x0a, 0x12, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3f, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa8, 0x01, 0x0a, 0x17,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x44, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9c, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x40,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x41, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9c, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x40, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x41, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x49, 0x5a, 0x47, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x67, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e,
	0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_chain_mgr_v1_coin_currency_value_value_proto_rawDescOnce sync.Once
	file_npool_chain_mgr_v1_coin_currency_value_value_proto_rawDescData = file_npool_chain_mgr_v1_coin_currency_value_value_proto_rawDesc
)

func file_npool_chain_mgr_v1_coin_currency_value_value_proto_rawDescGZIP() []byte {
	file_npool_chain_mgr_v1_coin_currency_value_value_proto_rawDescOnce.Do(func() {
		file_npool_chain_mgr_v1_coin_currency_value_value_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_chain_mgr_v1_coin_currency_value_value_proto_rawDescData)
	})
	return file_npool_chain_mgr_v1_coin_currency_value_value_proto_rawDescData
}

var file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_npool_chain_mgr_v1_coin_currency_value_value_proto_goTypes = []interface{}{
	(*CurrencyValueReq)(nil),                // 0: chain.manager.coin.currency.value.v1.CurrencyValueReq
	(*CurrencyValue)(nil),                   // 1: chain.manager.coin.currency.value.v1.CurrencyValue
	(*Conds)(nil),                           // 2: chain.manager.coin.currency.value.v1.Conds
	(*CreateCurrencyValueRequest)(nil),      // 3: chain.manager.coin.currency.value.v1.CreateCurrencyValueRequest
	(*CreateCurrencyValueResponse)(nil),     // 4: chain.manager.coin.currency.value.v1.CreateCurrencyValueResponse
	(*CreateCurrencyValuesRequest)(nil),     // 5: chain.manager.coin.currency.value.v1.CreateCurrencyValuesRequest
	(*CreateCurrencyValuesResponse)(nil),    // 6: chain.manager.coin.currency.value.v1.CreateCurrencyValuesResponse
	(*UpdateCurrencyValueRequest)(nil),      // 7: chain.manager.coin.currency.value.v1.UpdateCurrencyValueRequest
	(*UpdateCurrencyValueResponse)(nil),     // 8: chain.manager.coin.currency.value.v1.UpdateCurrencyValueResponse
	(*GetCurrencyValueRequest)(nil),         // 9: chain.manager.coin.currency.value.v1.GetCurrencyValueRequest
	(*GetCurrencyValueResponse)(nil),        // 10: chain.manager.coin.currency.value.v1.GetCurrencyValueResponse
	(*GetCurrencyValuesRequest)(nil),        // 11: chain.manager.coin.currency.value.v1.GetCurrencyValuesRequest
	(*GetCurrencyValuesResponse)(nil),       // 12: chain.manager.coin.currency.value.v1.GetCurrencyValuesResponse
	(*GetCurrencyValueOnlyRequest)(nil),     // 13: chain.manager.coin.currency.value.v1.GetCurrencyValueOnlyRequest
	(*GetCurrencyValueOnlyResponse)(nil),    // 14: chain.manager.coin.currency.value.v1.GetCurrencyValueOnlyResponse
	(*ExistCurrencyValueRequest)(nil),       // 15: chain.manager.coin.currency.value.v1.ExistCurrencyValueRequest
	(*ExistCurrencyValueResponse)(nil),      // 16: chain.manager.coin.currency.value.v1.ExistCurrencyValueResponse
	(*ExistCurrencyValueCondsRequest)(nil),  // 17: chain.manager.coin.currency.value.v1.ExistCurrencyValueCondsRequest
	(*ExistCurrencyValueCondsResponse)(nil), // 18: chain.manager.coin.currency.value.v1.ExistCurrencyValueCondsResponse
	(*CountCurrencyValuesRequest)(nil),      // 19: chain.manager.coin.currency.value.v1.CountCurrencyValuesRequest
	(*CountCurrencyValuesResponse)(nil),     // 20: chain.manager.coin.currency.value.v1.CountCurrencyValuesResponse
	(*DeleteCurrencyValueRequest)(nil),      // 21: chain.manager.coin.currency.value.v1.DeleteCurrencyValueRequest
	(*DeleteCurrencyValueResponse)(nil),     // 22: chain.manager.coin.currency.value.v1.DeleteCurrencyValueResponse
	(feed.FeedType)(0),                      // 23: chain.manager.coin.currency.feed.v1.FeedType
	(*npool.StringVal)(nil),                 // 24: npool.v1.StringVal
	(*npool.Uint32Val)(nil),                 // 25: npool.v1.Uint32Val
}
var file_npool_chain_mgr_v1_coin_currency_value_value_proto_depIdxs = []int32{
	23, // 0: chain.manager.coin.currency.value.v1.CurrencyValueReq.FeedType:type_name -> chain.manager.coin.currency.feed.v1.FeedType
	23, // 1: chain.manager.coin.currency.value.v1.CurrencyValue.FeedType:type_name -> chain.manager.coin.currency.feed.v1.FeedType
	24, // 2: chain.manager.coin.currency.value.v1.Conds.ID:type_name -> npool.v1.StringVal
	24, // 3: chain.manager.coin.currency.value.v1.Conds.CoinTypeID:type_name -> npool.v1.StringVal
	25, // 4: chain.manager.coin.currency.value.v1.Conds.StartAt:type_name -> npool.v1.Uint32Val
	25, // 5: chain.manager.coin.currency.value.v1.Conds.EndAt:type_name -> npool.v1.Uint32Val
	0,  // 6: chain.manager.coin.currency.value.v1.CreateCurrencyValueRequest.Info:type_name -> chain.manager.coin.currency.value.v1.CurrencyValueReq
	1,  // 7: chain.manager.coin.currency.value.v1.CreateCurrencyValueResponse.Info:type_name -> chain.manager.coin.currency.value.v1.CurrencyValue
	0,  // 8: chain.manager.coin.currency.value.v1.CreateCurrencyValuesRequest.Infos:type_name -> chain.manager.coin.currency.value.v1.CurrencyValueReq
	1,  // 9: chain.manager.coin.currency.value.v1.CreateCurrencyValuesResponse.Infos:type_name -> chain.manager.coin.currency.value.v1.CurrencyValue
	0,  // 10: chain.manager.coin.currency.value.v1.UpdateCurrencyValueRequest.Info:type_name -> chain.manager.coin.currency.value.v1.CurrencyValueReq
	1,  // 11: chain.manager.coin.currency.value.v1.UpdateCurrencyValueResponse.Info:type_name -> chain.manager.coin.currency.value.v1.CurrencyValue
	1,  // 12: chain.manager.coin.currency.value.v1.GetCurrencyValueResponse.Info:type_name -> chain.manager.coin.currency.value.v1.CurrencyValue
	2,  // 13: chain.manager.coin.currency.value.v1.GetCurrencyValuesRequest.Conds:type_name -> chain.manager.coin.currency.value.v1.Conds
	1,  // 14: chain.manager.coin.currency.value.v1.GetCurrencyValuesResponse.Infos:type_name -> chain.manager.coin.currency.value.v1.CurrencyValue
	2,  // 15: chain.manager.coin.currency.value.v1.GetCurrencyValueOnlyRequest.Conds:type_name -> chain.manager.coin.currency.value.v1.Conds
	1,  // 16: chain.manager.coin.currency.value.v1.GetCurrencyValueOnlyResponse.Info:type_name -> chain.manager.coin.currency.value.v1.CurrencyValue
	2,  // 17: chain.manager.coin.currency.value.v1.ExistCurrencyValueCondsRequest.Conds:type_name -> chain.manager.coin.currency.value.v1.Conds
	2,  // 18: chain.manager.coin.currency.value.v1.CountCurrencyValuesRequest.Conds:type_name -> chain.manager.coin.currency.value.v1.Conds
	1,  // 19: chain.manager.coin.currency.value.v1.DeleteCurrencyValueResponse.Info:type_name -> chain.manager.coin.currency.value.v1.CurrencyValue
	3,  // 20: chain.manager.coin.currency.value.v1.Manager.CreateCurrencyValue:input_type -> chain.manager.coin.currency.value.v1.CreateCurrencyValueRequest
	5,  // 21: chain.manager.coin.currency.value.v1.Manager.CreateCurrencyValues:input_type -> chain.manager.coin.currency.value.v1.CreateCurrencyValuesRequest
	7,  // 22: chain.manager.coin.currency.value.v1.Manager.UpdateCurrencyValue:input_type -> chain.manager.coin.currency.value.v1.UpdateCurrencyValueRequest
	9,  // 23: chain.manager.coin.currency.value.v1.Manager.GetCurrencyValue:input_type -> chain.manager.coin.currency.value.v1.GetCurrencyValueRequest
	13, // 24: chain.manager.coin.currency.value.v1.Manager.GetCurrencyValueOnly:input_type -> chain.manager.coin.currency.value.v1.GetCurrencyValueOnlyRequest
	11, // 25: chain.manager.coin.currency.value.v1.Manager.GetCurrencyValues:input_type -> chain.manager.coin.currency.value.v1.GetCurrencyValuesRequest
	15, // 26: chain.manager.coin.currency.value.v1.Manager.ExistCurrencyValue:input_type -> chain.manager.coin.currency.value.v1.ExistCurrencyValueRequest
	17, // 27: chain.manager.coin.currency.value.v1.Manager.ExistCurrencyValueConds:input_type -> chain.manager.coin.currency.value.v1.ExistCurrencyValueCondsRequest
	19, // 28: chain.manager.coin.currency.value.v1.Manager.CountCurrencyValues:input_type -> chain.manager.coin.currency.value.v1.CountCurrencyValuesRequest
	21, // 29: chain.manager.coin.currency.value.v1.Manager.DeleteCurrencyValue:input_type -> chain.manager.coin.currency.value.v1.DeleteCurrencyValueRequest
	4,  // 30: chain.manager.coin.currency.value.v1.Manager.CreateCurrencyValue:output_type -> chain.manager.coin.currency.value.v1.CreateCurrencyValueResponse
	6,  // 31: chain.manager.coin.currency.value.v1.Manager.CreateCurrencyValues:output_type -> chain.manager.coin.currency.value.v1.CreateCurrencyValuesResponse
	8,  // 32: chain.manager.coin.currency.value.v1.Manager.UpdateCurrencyValue:output_type -> chain.manager.coin.currency.value.v1.UpdateCurrencyValueResponse
	10, // 33: chain.manager.coin.currency.value.v1.Manager.GetCurrencyValue:output_type -> chain.manager.coin.currency.value.v1.GetCurrencyValueResponse
	14, // 34: chain.manager.coin.currency.value.v1.Manager.GetCurrencyValueOnly:output_type -> chain.manager.coin.currency.value.v1.GetCurrencyValueOnlyResponse
	12, // 35: chain.manager.coin.currency.value.v1.Manager.GetCurrencyValues:output_type -> chain.manager.coin.currency.value.v1.GetCurrencyValuesResponse
	16, // 36: chain.manager.coin.currency.value.v1.Manager.ExistCurrencyValue:output_type -> chain.manager.coin.currency.value.v1.ExistCurrencyValueResponse
	18, // 37: chain.manager.coin.currency.value.v1.Manager.ExistCurrencyValueConds:output_type -> chain.manager.coin.currency.value.v1.ExistCurrencyValueCondsResponse
	20, // 38: chain.manager.coin.currency.value.v1.Manager.CountCurrencyValues:output_type -> chain.manager.coin.currency.value.v1.CountCurrencyValuesResponse
	22, // 39: chain.manager.coin.currency.value.v1.Manager.DeleteCurrencyValue:output_type -> chain.manager.coin.currency.value.v1.DeleteCurrencyValueResponse
	30, // [30:40] is the sub-list for method output_type
	20, // [20:30] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_npool_chain_mgr_v1_coin_currency_value_value_proto_init() }
func file_npool_chain_mgr_v1_coin_currency_value_value_proto_init() {
	if File_npool_chain_mgr_v1_coin_currency_value_value_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyValueReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCurrencyValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCurrencyValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCurrencyValuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCurrencyValuesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCurrencyValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCurrencyValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrencyValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrencyValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrencyValuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrencyValuesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrencyValueOnlyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrencyValueOnlyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistCurrencyValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistCurrencyValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistCurrencyValueCondsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistCurrencyValueCondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountCurrencyValuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountCurrencyValuesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCurrencyValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCurrencyValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_chain_mgr_v1_coin_currency_value_value_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_chain_mgr_v1_coin_currency_value_value_proto_goTypes,
		DependencyIndexes: file_npool_chain_mgr_v1_coin_currency_value_value_proto_depIdxs,
		MessageInfos:      file_npool_chain_mgr_v1_coin_currency_value_value_proto_msgTypes,
	}.Build()
	File_npool_chain_mgr_v1_coin_currency_value_value_proto = out.File
	file_npool_chain_mgr_v1_coin_currency_value_value_proto_rawDesc = nil
	file_npool_chain_mgr_v1_coin_currency_value_value_proto_goTypes = nil
	file_npool_chain_mgr_v1_coin_currency_value_value_proto_depIdxs = nil
}
