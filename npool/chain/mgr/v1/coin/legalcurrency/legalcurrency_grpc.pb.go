// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/chain/mgr/v1/coin/legalcurrency/legalcurrency.proto

package legalcurrency

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateLegalCurrency(ctx context.Context, in *CreateLegalCurrencyRequest, opts ...grpc.CallOption) (*CreateLegalCurrencyResponse, error)
	CreateLegalCurrencies(ctx context.Context, in *CreateLegalCurrenciesRequest, opts ...grpc.CallOption) (*CreateLegalCurrenciesResponse, error)
	UpdateLegalCurrency(ctx context.Context, in *UpdateLegalCurrencyRequest, opts ...grpc.CallOption) (*UpdateLegalCurrencyResponse, error)
	GetLegalCurrency(ctx context.Context, in *GetLegalCurrencyRequest, opts ...grpc.CallOption) (*GetLegalCurrencyResponse, error)
	GetLegalCurrencyOnly(ctx context.Context, in *GetLegalCurrencyOnlyRequest, opts ...grpc.CallOption) (*GetLegalCurrencyOnlyResponse, error)
	GetLegalCurrencies(ctx context.Context, in *GetLegalCurrenciesRequest, opts ...grpc.CallOption) (*GetLegalCurrenciesResponse, error)
	ExistLegalCurrency(ctx context.Context, in *ExistLegalCurrencyRequest, opts ...grpc.CallOption) (*ExistLegalCurrencyResponse, error)
	ExistLegalCurrencyConds(ctx context.Context, in *ExistLegalCurrencyCondsRequest, opts ...grpc.CallOption) (*ExistLegalCurrencyCondsResponse, error)
	CountLegalCurrencies(ctx context.Context, in *CountLegalCurrenciesRequest, opts ...grpc.CallOption) (*CountLegalCurrenciesResponse, error)
	DeleteLegalCurrency(ctx context.Context, in *DeleteLegalCurrencyRequest, opts ...grpc.CallOption) (*DeleteLegalCurrencyResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateLegalCurrency(ctx context.Context, in *CreateLegalCurrencyRequest, opts ...grpc.CallOption) (*CreateLegalCurrencyResponse, error) {
	out := new(CreateLegalCurrencyResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.legalcurrency.v1.Manager/CreateLegalCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateLegalCurrencies(ctx context.Context, in *CreateLegalCurrenciesRequest, opts ...grpc.CallOption) (*CreateLegalCurrenciesResponse, error) {
	out := new(CreateLegalCurrenciesResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.legalcurrency.v1.Manager/CreateLegalCurrencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateLegalCurrency(ctx context.Context, in *UpdateLegalCurrencyRequest, opts ...grpc.CallOption) (*UpdateLegalCurrencyResponse, error) {
	out := new(UpdateLegalCurrencyResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.legalcurrency.v1.Manager/UpdateLegalCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetLegalCurrency(ctx context.Context, in *GetLegalCurrencyRequest, opts ...grpc.CallOption) (*GetLegalCurrencyResponse, error) {
	out := new(GetLegalCurrencyResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.legalcurrency.v1.Manager/GetLegalCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetLegalCurrencyOnly(ctx context.Context, in *GetLegalCurrencyOnlyRequest, opts ...grpc.CallOption) (*GetLegalCurrencyOnlyResponse, error) {
	out := new(GetLegalCurrencyOnlyResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.legalcurrency.v1.Manager/GetLegalCurrencyOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetLegalCurrencies(ctx context.Context, in *GetLegalCurrenciesRequest, opts ...grpc.CallOption) (*GetLegalCurrenciesResponse, error) {
	out := new(GetLegalCurrenciesResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.legalcurrency.v1.Manager/GetLegalCurrencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistLegalCurrency(ctx context.Context, in *ExistLegalCurrencyRequest, opts ...grpc.CallOption) (*ExistLegalCurrencyResponse, error) {
	out := new(ExistLegalCurrencyResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.legalcurrency.v1.Manager/ExistLegalCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistLegalCurrencyConds(ctx context.Context, in *ExistLegalCurrencyCondsRequest, opts ...grpc.CallOption) (*ExistLegalCurrencyCondsResponse, error) {
	out := new(ExistLegalCurrencyCondsResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.legalcurrency.v1.Manager/ExistLegalCurrencyConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountLegalCurrencies(ctx context.Context, in *CountLegalCurrenciesRequest, opts ...grpc.CallOption) (*CountLegalCurrenciesResponse, error) {
	out := new(CountLegalCurrenciesResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.legalcurrency.v1.Manager/CountLegalCurrencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteLegalCurrency(ctx context.Context, in *DeleteLegalCurrencyRequest, opts ...grpc.CallOption) (*DeleteLegalCurrencyResponse, error) {
	out := new(DeleteLegalCurrencyResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.legalcurrency.v1.Manager/DeleteLegalCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateLegalCurrency(context.Context, *CreateLegalCurrencyRequest) (*CreateLegalCurrencyResponse, error)
	CreateLegalCurrencies(context.Context, *CreateLegalCurrenciesRequest) (*CreateLegalCurrenciesResponse, error)
	UpdateLegalCurrency(context.Context, *UpdateLegalCurrencyRequest) (*UpdateLegalCurrencyResponse, error)
	GetLegalCurrency(context.Context, *GetLegalCurrencyRequest) (*GetLegalCurrencyResponse, error)
	GetLegalCurrencyOnly(context.Context, *GetLegalCurrencyOnlyRequest) (*GetLegalCurrencyOnlyResponse, error)
	GetLegalCurrencies(context.Context, *GetLegalCurrenciesRequest) (*GetLegalCurrenciesResponse, error)
	ExistLegalCurrency(context.Context, *ExistLegalCurrencyRequest) (*ExistLegalCurrencyResponse, error)
	ExistLegalCurrencyConds(context.Context, *ExistLegalCurrencyCondsRequest) (*ExistLegalCurrencyCondsResponse, error)
	CountLegalCurrencies(context.Context, *CountLegalCurrenciesRequest) (*CountLegalCurrenciesResponse, error)
	DeleteLegalCurrency(context.Context, *DeleteLegalCurrencyRequest) (*DeleteLegalCurrencyResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateLegalCurrency(context.Context, *CreateLegalCurrencyRequest) (*CreateLegalCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLegalCurrency not implemented")
}
func (UnimplementedManagerServer) CreateLegalCurrencies(context.Context, *CreateLegalCurrenciesRequest) (*CreateLegalCurrenciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLegalCurrencies not implemented")
}
func (UnimplementedManagerServer) UpdateLegalCurrency(context.Context, *UpdateLegalCurrencyRequest) (*UpdateLegalCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLegalCurrency not implemented")
}
func (UnimplementedManagerServer) GetLegalCurrency(context.Context, *GetLegalCurrencyRequest) (*GetLegalCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLegalCurrency not implemented")
}
func (UnimplementedManagerServer) GetLegalCurrencyOnly(context.Context, *GetLegalCurrencyOnlyRequest) (*GetLegalCurrencyOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLegalCurrencyOnly not implemented")
}
func (UnimplementedManagerServer) GetLegalCurrencies(context.Context, *GetLegalCurrenciesRequest) (*GetLegalCurrenciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLegalCurrencies not implemented")
}
func (UnimplementedManagerServer) ExistLegalCurrency(context.Context, *ExistLegalCurrencyRequest) (*ExistLegalCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistLegalCurrency not implemented")
}
func (UnimplementedManagerServer) ExistLegalCurrencyConds(context.Context, *ExistLegalCurrencyCondsRequest) (*ExistLegalCurrencyCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistLegalCurrencyConds not implemented")
}
func (UnimplementedManagerServer) CountLegalCurrencies(context.Context, *CountLegalCurrenciesRequest) (*CountLegalCurrenciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountLegalCurrencies not implemented")
}
func (UnimplementedManagerServer) DeleteLegalCurrency(context.Context, *DeleteLegalCurrencyRequest) (*DeleteLegalCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLegalCurrency not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateLegalCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLegalCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateLegalCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.legalcurrency.v1.Manager/CreateLegalCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateLegalCurrency(ctx, req.(*CreateLegalCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateLegalCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLegalCurrenciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateLegalCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.legalcurrency.v1.Manager/CreateLegalCurrencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateLegalCurrencies(ctx, req.(*CreateLegalCurrenciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateLegalCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLegalCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateLegalCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.legalcurrency.v1.Manager/UpdateLegalCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateLegalCurrency(ctx, req.(*UpdateLegalCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetLegalCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLegalCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetLegalCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.legalcurrency.v1.Manager/GetLegalCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetLegalCurrency(ctx, req.(*GetLegalCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetLegalCurrencyOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLegalCurrencyOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetLegalCurrencyOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.legalcurrency.v1.Manager/GetLegalCurrencyOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetLegalCurrencyOnly(ctx, req.(*GetLegalCurrencyOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetLegalCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLegalCurrenciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetLegalCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.legalcurrency.v1.Manager/GetLegalCurrencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetLegalCurrencies(ctx, req.(*GetLegalCurrenciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistLegalCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistLegalCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistLegalCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.legalcurrency.v1.Manager/ExistLegalCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistLegalCurrency(ctx, req.(*ExistLegalCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistLegalCurrencyConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistLegalCurrencyCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistLegalCurrencyConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.legalcurrency.v1.Manager/ExistLegalCurrencyConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistLegalCurrencyConds(ctx, req.(*ExistLegalCurrencyCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountLegalCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountLegalCurrenciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountLegalCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.legalcurrency.v1.Manager/CountLegalCurrencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountLegalCurrencies(ctx, req.(*CountLegalCurrenciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteLegalCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLegalCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteLegalCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.legalcurrency.v1.Manager/DeleteLegalCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteLegalCurrency(ctx, req.(*DeleteLegalCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chain.manager.coin.legalcurrency.v1.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLegalCurrency",
			Handler:    _Manager_CreateLegalCurrency_Handler,
		},
		{
			MethodName: "CreateLegalCurrencies",
			Handler:    _Manager_CreateLegalCurrencies_Handler,
		},
		{
			MethodName: "UpdateLegalCurrency",
			Handler:    _Manager_UpdateLegalCurrency_Handler,
		},
		{
			MethodName: "GetLegalCurrency",
			Handler:    _Manager_GetLegalCurrency_Handler,
		},
		{
			MethodName: "GetLegalCurrencyOnly",
			Handler:    _Manager_GetLegalCurrencyOnly_Handler,
		},
		{
			MethodName: "GetLegalCurrencies",
			Handler:    _Manager_GetLegalCurrencies_Handler,
		},
		{
			MethodName: "ExistLegalCurrency",
			Handler:    _Manager_ExistLegalCurrency_Handler,
		},
		{
			MethodName: "ExistLegalCurrencyConds",
			Handler:    _Manager_ExistLegalCurrencyConds_Handler,
		},
		{
			MethodName: "CountLegalCurrencies",
			Handler:    _Manager_CountLegalCurrencies_Handler,
		},
		{
			MethodName: "DeleteLegalCurrency",
			Handler:    _Manager_DeleteLegalCurrency_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/chain/mgr/v1/coin/legalcurrency/legalcurrency.proto",
}
