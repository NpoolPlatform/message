// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/chain/mgr/v1/coin/legaltype/legalcurrency.proto

package legaltype

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateLegalType(ctx context.Context, in *CreateLegalTypeRequest, opts ...grpc.CallOption) (*CreateLegalTypeResponse, error)
	CreateLegalTypes(ctx context.Context, in *CreateLegalTypesRequest, opts ...grpc.CallOption) (*CreateLegalTypesResponse, error)
	UpdateLegalType(ctx context.Context, in *UpdateLegalTypeRequest, opts ...grpc.CallOption) (*UpdateLegalTypeResponse, error)
	GetLegalType(ctx context.Context, in *GetLegalTypeRequest, opts ...grpc.CallOption) (*GetLegalTypeResponse, error)
	GetLegalTypeOnly(ctx context.Context, in *GetLegalTypeOnlyRequest, opts ...grpc.CallOption) (*GetLegalTypeOnlyResponse, error)
	GetLegalTypes(ctx context.Context, in *GetLegalTypesRequest, opts ...grpc.CallOption) (*GetLegalTypesResponse, error)
	ExistLegalType(ctx context.Context, in *ExistLegalTypeRequest, opts ...grpc.CallOption) (*ExistLegalTypeResponse, error)
	ExistLegalTypeConds(ctx context.Context, in *ExistLegalTypeCondsRequest, opts ...grpc.CallOption) (*ExistLegalTypeCondsResponse, error)
	CountLegalTypes(ctx context.Context, in *CountLegalTypesRequest, opts ...grpc.CallOption) (*CountLegalTypesResponse, error)
	DeleteLegalType(ctx context.Context, in *DeleteLegalTypeRequest, opts ...grpc.CallOption) (*DeleteLegalTypeResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateLegalType(ctx context.Context, in *CreateLegalTypeRequest, opts ...grpc.CallOption) (*CreateLegalTypeResponse, error) {
	out := new(CreateLegalTypeResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.legaltype.v1.Manager/CreateLegalType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateLegalTypes(ctx context.Context, in *CreateLegalTypesRequest, opts ...grpc.CallOption) (*CreateLegalTypesResponse, error) {
	out := new(CreateLegalTypesResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.legaltype.v1.Manager/CreateLegalTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateLegalType(ctx context.Context, in *UpdateLegalTypeRequest, opts ...grpc.CallOption) (*UpdateLegalTypeResponse, error) {
	out := new(UpdateLegalTypeResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.legaltype.v1.Manager/UpdateLegalType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetLegalType(ctx context.Context, in *GetLegalTypeRequest, opts ...grpc.CallOption) (*GetLegalTypeResponse, error) {
	out := new(GetLegalTypeResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.legaltype.v1.Manager/GetLegalType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetLegalTypeOnly(ctx context.Context, in *GetLegalTypeOnlyRequest, opts ...grpc.CallOption) (*GetLegalTypeOnlyResponse, error) {
	out := new(GetLegalTypeOnlyResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.legaltype.v1.Manager/GetLegalTypeOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetLegalTypes(ctx context.Context, in *GetLegalTypesRequest, opts ...grpc.CallOption) (*GetLegalTypesResponse, error) {
	out := new(GetLegalTypesResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.legaltype.v1.Manager/GetLegalTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistLegalType(ctx context.Context, in *ExistLegalTypeRequest, opts ...grpc.CallOption) (*ExistLegalTypeResponse, error) {
	out := new(ExistLegalTypeResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.legaltype.v1.Manager/ExistLegalType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistLegalTypeConds(ctx context.Context, in *ExistLegalTypeCondsRequest, opts ...grpc.CallOption) (*ExistLegalTypeCondsResponse, error) {
	out := new(ExistLegalTypeCondsResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.legaltype.v1.Manager/ExistLegalTypeConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountLegalTypes(ctx context.Context, in *CountLegalTypesRequest, opts ...grpc.CallOption) (*CountLegalTypesResponse, error) {
	out := new(CountLegalTypesResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.legaltype.v1.Manager/CountLegalTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteLegalType(ctx context.Context, in *DeleteLegalTypeRequest, opts ...grpc.CallOption) (*DeleteLegalTypeResponse, error) {
	out := new(DeleteLegalTypeResponse)
	err := c.cc.Invoke(ctx, "/chain.manager.coin.legaltype.v1.Manager/DeleteLegalType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateLegalType(context.Context, *CreateLegalTypeRequest) (*CreateLegalTypeResponse, error)
	CreateLegalTypes(context.Context, *CreateLegalTypesRequest) (*CreateLegalTypesResponse, error)
	UpdateLegalType(context.Context, *UpdateLegalTypeRequest) (*UpdateLegalTypeResponse, error)
	GetLegalType(context.Context, *GetLegalTypeRequest) (*GetLegalTypeResponse, error)
	GetLegalTypeOnly(context.Context, *GetLegalTypeOnlyRequest) (*GetLegalTypeOnlyResponse, error)
	GetLegalTypes(context.Context, *GetLegalTypesRequest) (*GetLegalTypesResponse, error)
	ExistLegalType(context.Context, *ExistLegalTypeRequest) (*ExistLegalTypeResponse, error)
	ExistLegalTypeConds(context.Context, *ExistLegalTypeCondsRequest) (*ExistLegalTypeCondsResponse, error)
	CountLegalTypes(context.Context, *CountLegalTypesRequest) (*CountLegalTypesResponse, error)
	DeleteLegalType(context.Context, *DeleteLegalTypeRequest) (*DeleteLegalTypeResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateLegalType(context.Context, *CreateLegalTypeRequest) (*CreateLegalTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLegalType not implemented")
}
func (UnimplementedManagerServer) CreateLegalTypes(context.Context, *CreateLegalTypesRequest) (*CreateLegalTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLegalTypes not implemented")
}
func (UnimplementedManagerServer) UpdateLegalType(context.Context, *UpdateLegalTypeRequest) (*UpdateLegalTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLegalType not implemented")
}
func (UnimplementedManagerServer) GetLegalType(context.Context, *GetLegalTypeRequest) (*GetLegalTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLegalType not implemented")
}
func (UnimplementedManagerServer) GetLegalTypeOnly(context.Context, *GetLegalTypeOnlyRequest) (*GetLegalTypeOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLegalTypeOnly not implemented")
}
func (UnimplementedManagerServer) GetLegalTypes(context.Context, *GetLegalTypesRequest) (*GetLegalTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLegalTypes not implemented")
}
func (UnimplementedManagerServer) ExistLegalType(context.Context, *ExistLegalTypeRequest) (*ExistLegalTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistLegalType not implemented")
}
func (UnimplementedManagerServer) ExistLegalTypeConds(context.Context, *ExistLegalTypeCondsRequest) (*ExistLegalTypeCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistLegalTypeConds not implemented")
}
func (UnimplementedManagerServer) CountLegalTypes(context.Context, *CountLegalTypesRequest) (*CountLegalTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountLegalTypes not implemented")
}
func (UnimplementedManagerServer) DeleteLegalType(context.Context, *DeleteLegalTypeRequest) (*DeleteLegalTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLegalType not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateLegalType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLegalTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateLegalType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.legaltype.v1.Manager/CreateLegalType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateLegalType(ctx, req.(*CreateLegalTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateLegalTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLegalTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateLegalTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.legaltype.v1.Manager/CreateLegalTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateLegalTypes(ctx, req.(*CreateLegalTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateLegalType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLegalTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateLegalType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.legaltype.v1.Manager/UpdateLegalType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateLegalType(ctx, req.(*UpdateLegalTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetLegalType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLegalTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetLegalType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.legaltype.v1.Manager/GetLegalType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetLegalType(ctx, req.(*GetLegalTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetLegalTypeOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLegalTypeOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetLegalTypeOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.legaltype.v1.Manager/GetLegalTypeOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetLegalTypeOnly(ctx, req.(*GetLegalTypeOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetLegalTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLegalTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetLegalTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.legaltype.v1.Manager/GetLegalTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetLegalTypes(ctx, req.(*GetLegalTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistLegalType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistLegalTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistLegalType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.legaltype.v1.Manager/ExistLegalType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistLegalType(ctx, req.(*ExistLegalTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistLegalTypeConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistLegalTypeCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistLegalTypeConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.legaltype.v1.Manager/ExistLegalTypeConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistLegalTypeConds(ctx, req.(*ExistLegalTypeCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountLegalTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountLegalTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountLegalTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.legaltype.v1.Manager/CountLegalTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountLegalTypes(ctx, req.(*CountLegalTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteLegalType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLegalTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteLegalType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chain.manager.coin.legaltype.v1.Manager/DeleteLegalType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteLegalType(ctx, req.(*DeleteLegalTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chain.manager.coin.legaltype.v1.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLegalType",
			Handler:    _Manager_CreateLegalType_Handler,
		},
		{
			MethodName: "CreateLegalTypes",
			Handler:    _Manager_CreateLegalTypes_Handler,
		},
		{
			MethodName: "UpdateLegalType",
			Handler:    _Manager_UpdateLegalType_Handler,
		},
		{
			MethodName: "GetLegalType",
			Handler:    _Manager_GetLegalType_Handler,
		},
		{
			MethodName: "GetLegalTypeOnly",
			Handler:    _Manager_GetLegalTypeOnly_Handler,
		},
		{
			MethodName: "GetLegalTypes",
			Handler:    _Manager_GetLegalTypes_Handler,
		},
		{
			MethodName: "ExistLegalType",
			Handler:    _Manager_ExistLegalType_Handler,
		},
		{
			MethodName: "ExistLegalTypeConds",
			Handler:    _Manager_ExistLegalTypeConds_Handler,
		},
		{
			MethodName: "CountLegalTypes",
			Handler:    _Manager_CountLegalTypes_Handler,
		},
		{
			MethodName: "DeleteLegalType",
			Handler:    _Manager_DeleteLegalType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/chain/mgr/v1/coin/legaltype/legalcurrency.proto",
}
