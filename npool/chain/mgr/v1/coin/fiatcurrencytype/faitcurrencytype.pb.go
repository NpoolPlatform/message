// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: npool/chain/mgr/v1/coin/fiatcurrencytype/faitcurrencytype.proto

package fiatcurrencytype

import (
	npool "github.com/NpoolPlatform/message/npool"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FiatCurrencyTypeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID   *string `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	Name *string `protobuf:"bytes,20,opt,name=Name,proto3,oneof" json:"Name,omitempty"`
}

func (x *FiatCurrencyTypeReq) Reset() {
	*x = FiatCurrencyTypeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FiatCurrencyTypeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FiatCurrencyTypeReq) ProtoMessage() {}

func (x *FiatCurrencyTypeReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FiatCurrencyTypeReq.ProtoReflect.Descriptor instead.
func (*FiatCurrencyTypeReq) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_rawDescGZIP(), []int{0}
}

func (x *FiatCurrencyTypeReq) GetID() string {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return ""
}

func (x *FiatCurrencyTypeReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type FiatCurrencyType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	Name      string `protobuf:"bytes,20,opt,name=Name,proto3" json:"Name,omitempty"`
	CreatedAt uint32 `protobuf:"varint,30,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt uint32 `protobuf:"varint,40,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (x *FiatCurrencyType) Reset() {
	*x = FiatCurrencyType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FiatCurrencyType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FiatCurrencyType) ProtoMessage() {}

func (x *FiatCurrencyType) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FiatCurrencyType.ProtoReflect.Descriptor instead.
func (*FiatCurrencyType) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_rawDescGZIP(), []int{1}
}

func (x *FiatCurrencyType) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *FiatCurrencyType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FiatCurrencyType) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *FiatCurrencyType) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID   *npool.StringVal `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	Name *npool.StringVal `protobuf:"bytes,20,opt,name=Name,proto3,oneof" json:"Name,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *npool.StringVal {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetName() *npool.StringVal {
	if x != nil {
		return x.Name
	}
	return nil
}

type CreateFiatCurrencyTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *FiatCurrencyTypeReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateFiatCurrencyTypeRequest) Reset() {
	*x = CreateFiatCurrencyTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFiatCurrencyTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFiatCurrencyTypeRequest) ProtoMessage() {}

func (x *CreateFiatCurrencyTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFiatCurrencyTypeRequest.ProtoReflect.Descriptor instead.
func (*CreateFiatCurrencyTypeRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_rawDescGZIP(), []int{3}
}

func (x *CreateFiatCurrencyTypeRequest) GetInfo() *FiatCurrencyTypeReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateFiatCurrencyTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *FiatCurrencyType `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateFiatCurrencyTypeResponse) Reset() {
	*x = CreateFiatCurrencyTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFiatCurrencyTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFiatCurrencyTypeResponse) ProtoMessage() {}

func (x *CreateFiatCurrencyTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFiatCurrencyTypeResponse.ProtoReflect.Descriptor instead.
func (*CreateFiatCurrencyTypeResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_rawDescGZIP(), []int{4}
}

func (x *CreateFiatCurrencyTypeResponse) GetInfo() *FiatCurrencyType {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateFiatCurrencyTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*FiatCurrencyTypeReq `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateFiatCurrencyTypesRequest) Reset() {
	*x = CreateFiatCurrencyTypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFiatCurrencyTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFiatCurrencyTypesRequest) ProtoMessage() {}

func (x *CreateFiatCurrencyTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFiatCurrencyTypesRequest.ProtoReflect.Descriptor instead.
func (*CreateFiatCurrencyTypesRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_rawDescGZIP(), []int{5}
}

func (x *CreateFiatCurrencyTypesRequest) GetInfos() []*FiatCurrencyTypeReq {
	if x != nil {
		return x.Infos
	}
	return nil
}

type CreateFiatCurrencyTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*FiatCurrencyType `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateFiatCurrencyTypesResponse) Reset() {
	*x = CreateFiatCurrencyTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFiatCurrencyTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFiatCurrencyTypesResponse) ProtoMessage() {}

func (x *CreateFiatCurrencyTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFiatCurrencyTypesResponse.ProtoReflect.Descriptor instead.
func (*CreateFiatCurrencyTypesResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_rawDescGZIP(), []int{6}
}

func (x *CreateFiatCurrencyTypesResponse) GetInfos() []*FiatCurrencyType {
	if x != nil {
		return x.Infos
	}
	return nil
}

type UpdateFiatCurrencyTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *FiatCurrencyTypeReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateFiatCurrencyTypeRequest) Reset() {
	*x = UpdateFiatCurrencyTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFiatCurrencyTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFiatCurrencyTypeRequest) ProtoMessage() {}

func (x *UpdateFiatCurrencyTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFiatCurrencyTypeRequest.ProtoReflect.Descriptor instead.
func (*UpdateFiatCurrencyTypeRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateFiatCurrencyTypeRequest) GetInfo() *FiatCurrencyTypeReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateFiatCurrencyTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *FiatCurrencyType `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateFiatCurrencyTypeResponse) Reset() {
	*x = UpdateFiatCurrencyTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFiatCurrencyTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFiatCurrencyTypeResponse) ProtoMessage() {}

func (x *UpdateFiatCurrencyTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFiatCurrencyTypeResponse.ProtoReflect.Descriptor instead.
func (*UpdateFiatCurrencyTypeResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateFiatCurrencyTypeResponse) GetInfo() *FiatCurrencyType {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetFiatCurrencyTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetFiatCurrencyTypeRequest) Reset() {
	*x = GetFiatCurrencyTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFiatCurrencyTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFiatCurrencyTypeRequest) ProtoMessage() {}

func (x *GetFiatCurrencyTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFiatCurrencyTypeRequest.ProtoReflect.Descriptor instead.
func (*GetFiatCurrencyTypeRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_rawDescGZIP(), []int{9}
}

func (x *GetFiatCurrencyTypeRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetFiatCurrencyTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *FiatCurrencyType `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetFiatCurrencyTypeResponse) Reset() {
	*x = GetFiatCurrencyTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFiatCurrencyTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFiatCurrencyTypeResponse) ProtoMessage() {}

func (x *GetFiatCurrencyTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFiatCurrencyTypeResponse.ProtoReflect.Descriptor instead.
func (*GetFiatCurrencyTypeResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_rawDescGZIP(), []int{10}
}

func (x *GetFiatCurrencyTypeResponse) GetInfo() *FiatCurrencyType {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetFiatCurrencyTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetFiatCurrencyTypesRequest) Reset() {
	*x = GetFiatCurrencyTypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFiatCurrencyTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFiatCurrencyTypesRequest) ProtoMessage() {}

func (x *GetFiatCurrencyTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFiatCurrencyTypesRequest.ProtoReflect.Descriptor instead.
func (*GetFiatCurrencyTypesRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_rawDescGZIP(), []int{11}
}

func (x *GetFiatCurrencyTypesRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetFiatCurrencyTypesRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetFiatCurrencyTypesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetFiatCurrencyTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*FiatCurrencyType `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32              `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetFiatCurrencyTypesResponse) Reset() {
	*x = GetFiatCurrencyTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFiatCurrencyTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFiatCurrencyTypesResponse) ProtoMessage() {}

func (x *GetFiatCurrencyTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFiatCurrencyTypesResponse.ProtoReflect.Descriptor instead.
func (*GetFiatCurrencyTypesResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_rawDescGZIP(), []int{12}
}

func (x *GetFiatCurrencyTypesResponse) GetInfos() []*FiatCurrencyType {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetFiatCurrencyTypesResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetFiatCurrencyTypeOnlyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *GetFiatCurrencyTypeOnlyRequest) Reset() {
	*x = GetFiatCurrencyTypeOnlyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFiatCurrencyTypeOnlyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFiatCurrencyTypeOnlyRequest) ProtoMessage() {}

func (x *GetFiatCurrencyTypeOnlyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFiatCurrencyTypeOnlyRequest.ProtoReflect.Descriptor instead.
func (*GetFiatCurrencyTypeOnlyRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_rawDescGZIP(), []int{13}
}

func (x *GetFiatCurrencyTypeOnlyRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type GetFiatCurrencyTypeOnlyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *FiatCurrencyType `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetFiatCurrencyTypeOnlyResponse) Reset() {
	*x = GetFiatCurrencyTypeOnlyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFiatCurrencyTypeOnlyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFiatCurrencyTypeOnlyResponse) ProtoMessage() {}

func (x *GetFiatCurrencyTypeOnlyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFiatCurrencyTypeOnlyResponse.ProtoReflect.Descriptor instead.
func (*GetFiatCurrencyTypeOnlyResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_rawDescGZIP(), []int{14}
}

func (x *GetFiatCurrencyTypeOnlyResponse) GetInfo() *FiatCurrencyType {
	if x != nil {
		return x.Info
	}
	return nil
}

type ExistFiatCurrencyTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ExistFiatCurrencyTypeRequest) Reset() {
	*x = ExistFiatCurrencyTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistFiatCurrencyTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistFiatCurrencyTypeRequest) ProtoMessage() {}

func (x *ExistFiatCurrencyTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistFiatCurrencyTypeRequest.ProtoReflect.Descriptor instead.
func (*ExistFiatCurrencyTypeRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_rawDescGZIP(), []int{15}
}

func (x *ExistFiatCurrencyTypeRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ExistFiatCurrencyTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistFiatCurrencyTypeResponse) Reset() {
	*x = ExistFiatCurrencyTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistFiatCurrencyTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistFiatCurrencyTypeResponse) ProtoMessage() {}

func (x *ExistFiatCurrencyTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistFiatCurrencyTypeResponse.ProtoReflect.Descriptor instead.
func (*ExistFiatCurrencyTypeResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_rawDescGZIP(), []int{16}
}

func (x *ExistFiatCurrencyTypeResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type ExistFiatCurrencyTypeCondsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *ExistFiatCurrencyTypeCondsRequest) Reset() {
	*x = ExistFiatCurrencyTypeCondsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistFiatCurrencyTypeCondsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistFiatCurrencyTypeCondsRequest) ProtoMessage() {}

func (x *ExistFiatCurrencyTypeCondsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistFiatCurrencyTypeCondsRequest.ProtoReflect.Descriptor instead.
func (*ExistFiatCurrencyTypeCondsRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_rawDescGZIP(), []int{17}
}

func (x *ExistFiatCurrencyTypeCondsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type ExistFiatCurrencyTypeCondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistFiatCurrencyTypeCondsResponse) Reset() {
	*x = ExistFiatCurrencyTypeCondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistFiatCurrencyTypeCondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistFiatCurrencyTypeCondsResponse) ProtoMessage() {}

func (x *ExistFiatCurrencyTypeCondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistFiatCurrencyTypeCondsResponse.ProtoReflect.Descriptor instead.
func (*ExistFiatCurrencyTypeCondsResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_rawDescGZIP(), []int{18}
}

func (x *ExistFiatCurrencyTypeCondsResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type CountFiatCurrencyTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *CountFiatCurrencyTypesRequest) Reset() {
	*x = CountFiatCurrencyTypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountFiatCurrencyTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountFiatCurrencyTypesRequest) ProtoMessage() {}

func (x *CountFiatCurrencyTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountFiatCurrencyTypesRequest.ProtoReflect.Descriptor instead.
func (*CountFiatCurrencyTypesRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_rawDescGZIP(), []int{19}
}

func (x *CountFiatCurrencyTypesRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type CountFiatCurrencyTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info uint32 `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CountFiatCurrencyTypesResponse) Reset() {
	*x = CountFiatCurrencyTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountFiatCurrencyTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountFiatCurrencyTypesResponse) ProtoMessage() {}

func (x *CountFiatCurrencyTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountFiatCurrencyTypesResponse.ProtoReflect.Descriptor instead.
func (*CountFiatCurrencyTypesResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_rawDescGZIP(), []int{20}
}

func (x *CountFiatCurrencyTypesResponse) GetInfo() uint32 {
	if x != nil {
		return x.Info
	}
	return 0
}

type DeleteFiatCurrencyTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *DeleteFiatCurrencyTypeRequest) Reset() {
	*x = DeleteFiatCurrencyTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFiatCurrencyTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFiatCurrencyTypeRequest) ProtoMessage() {}

func (x *DeleteFiatCurrencyTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFiatCurrencyTypeRequest.ProtoReflect.Descriptor instead.
func (*DeleteFiatCurrencyTypeRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteFiatCurrencyTypeRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type DeleteFiatCurrencyTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *FiatCurrencyType `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteFiatCurrencyTypeResponse) Reset() {
	*x = DeleteFiatCurrencyTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFiatCurrencyTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFiatCurrencyTypeResponse) ProtoMessage() {}

func (x *DeleteFiatCurrencyTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFiatCurrencyTypeResponse.ProtoReflect.Descriptor instead.
func (*DeleteFiatCurrencyTypeResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteFiatCurrencyTypeResponse) GetInfo() *FiatCurrencyType {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto protoreflect.FileDescriptor

var file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_rawDesc = []byte{
	0x0a, 0x3f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x67,
	0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x66, 0x61, 0x69, 0x74, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x26, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6e, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x53, 0x0a, 0x13, 0x46, 0x69, 0x61,
	0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x13, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02,
	0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05,
	0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x72,
	0x0a, 0x10, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x6f, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x02,
	0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x70, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x61,
	0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x61, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6e, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x73, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x71, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x71, 0x0a, 0x1f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a,
	0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x70, 0x0a,
	0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x6e, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4c, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x38, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x2c, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x6b, 0x0a,
	0x1b, 0x47, 0x65, 0x74, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e,
	0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x90, 0x01, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x05, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66,
	0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x84, 0x01,
	0x0a, 0x1c, 0x47, 0x65, 0x74, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e,
	0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x22, 0x65, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x61, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x6f, 0x0a, 0x1f, 0x47,
	0x65, 0x74, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2e, 0x0a, 0x1c,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x33, 0x0a, 0x1d,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x68, 0x0a, 0x21, 0x45, 0x78, 0x69, 0x73, 0x74, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x38, 0x0a, 0x22, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x64, 0x0a, 0x1d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69,
	0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x34, 0x0a, 0x1e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x2f, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x61, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x44, 0x22, 0x6e, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x61, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x61, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x32, 0xc1, 0x0d, 0x0a, 0x07, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0xa9,
	0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66,
	0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x46, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xac, 0x01, 0x0a, 0x17, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x46, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa9, 0x01, 0x0a, 0x16, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x61, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa0, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x46, 0x69, 0x61,
	0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x43, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69,
	0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xac, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x46, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa3, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x46,
	0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x12, 0x43, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x61,
	0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa6, 0x01,
	0x0a, 0x15, 0x45, 0x78, 0x69, 0x73, 0x74, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61,
	0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x46, 0x69, 0x61, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xb5, 0x01, 0x0a, 0x1a, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x49, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x4a, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x46,
	0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa9,
	0x01, 0x0a, 0x16, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x45, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66,
	0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x46, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46,
	0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa9, 0x01, 0x0a, 0x16, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x61, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x4b, 0x5a, 0x49, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c,
	0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x67, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x69, 0x6e, 0x2f, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x74,
	0x79, 0x70, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_rawDescOnce sync.Once
	file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_rawDescData = file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_rawDesc
)

func file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_rawDescGZIP() []byte {
	file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_rawDescOnce.Do(func() {
		file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_rawDescData)
	})
	return file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_rawDescData
}

var file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_goTypes = []interface{}{
	(*FiatCurrencyTypeReq)(nil),                // 0: chain.manager.coin.fiatcurrencytype.v1.FiatCurrencyTypeReq
	(*FiatCurrencyType)(nil),                   // 1: chain.manager.coin.fiatcurrencytype.v1.FiatCurrencyType
	(*Conds)(nil),                              // 2: chain.manager.coin.fiatcurrencytype.v1.Conds
	(*CreateFiatCurrencyTypeRequest)(nil),      // 3: chain.manager.coin.fiatcurrencytype.v1.CreateFiatCurrencyTypeRequest
	(*CreateFiatCurrencyTypeResponse)(nil),     // 4: chain.manager.coin.fiatcurrencytype.v1.CreateFiatCurrencyTypeResponse
	(*CreateFiatCurrencyTypesRequest)(nil),     // 5: chain.manager.coin.fiatcurrencytype.v1.CreateFiatCurrencyTypesRequest
	(*CreateFiatCurrencyTypesResponse)(nil),    // 6: chain.manager.coin.fiatcurrencytype.v1.CreateFiatCurrencyTypesResponse
	(*UpdateFiatCurrencyTypeRequest)(nil),      // 7: chain.manager.coin.fiatcurrencytype.v1.UpdateFiatCurrencyTypeRequest
	(*UpdateFiatCurrencyTypeResponse)(nil),     // 8: chain.manager.coin.fiatcurrencytype.v1.UpdateFiatCurrencyTypeResponse
	(*GetFiatCurrencyTypeRequest)(nil),         // 9: chain.manager.coin.fiatcurrencytype.v1.GetFiatCurrencyTypeRequest
	(*GetFiatCurrencyTypeResponse)(nil),        // 10: chain.manager.coin.fiatcurrencytype.v1.GetFiatCurrencyTypeResponse
	(*GetFiatCurrencyTypesRequest)(nil),        // 11: chain.manager.coin.fiatcurrencytype.v1.GetFiatCurrencyTypesRequest
	(*GetFiatCurrencyTypesResponse)(nil),       // 12: chain.manager.coin.fiatcurrencytype.v1.GetFiatCurrencyTypesResponse
	(*GetFiatCurrencyTypeOnlyRequest)(nil),     // 13: chain.manager.coin.fiatcurrencytype.v1.GetFiatCurrencyTypeOnlyRequest
	(*GetFiatCurrencyTypeOnlyResponse)(nil),    // 14: chain.manager.coin.fiatcurrencytype.v1.GetFiatCurrencyTypeOnlyResponse
	(*ExistFiatCurrencyTypeRequest)(nil),       // 15: chain.manager.coin.fiatcurrencytype.v1.ExistFiatCurrencyTypeRequest
	(*ExistFiatCurrencyTypeResponse)(nil),      // 16: chain.manager.coin.fiatcurrencytype.v1.ExistFiatCurrencyTypeResponse
	(*ExistFiatCurrencyTypeCondsRequest)(nil),  // 17: chain.manager.coin.fiatcurrencytype.v1.ExistFiatCurrencyTypeCondsRequest
	(*ExistFiatCurrencyTypeCondsResponse)(nil), // 18: chain.manager.coin.fiatcurrencytype.v1.ExistFiatCurrencyTypeCondsResponse
	(*CountFiatCurrencyTypesRequest)(nil),      // 19: chain.manager.coin.fiatcurrencytype.v1.CountFiatCurrencyTypesRequest
	(*CountFiatCurrencyTypesResponse)(nil),     // 20: chain.manager.coin.fiatcurrencytype.v1.CountFiatCurrencyTypesResponse
	(*DeleteFiatCurrencyTypeRequest)(nil),      // 21: chain.manager.coin.fiatcurrencytype.v1.DeleteFiatCurrencyTypeRequest
	(*DeleteFiatCurrencyTypeResponse)(nil),     // 22: chain.manager.coin.fiatcurrencytype.v1.DeleteFiatCurrencyTypeResponse
	(*npool.StringVal)(nil),                    // 23: npool.v1.StringVal
}
var file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_depIdxs = []int32{
	23, // 0: chain.manager.coin.fiatcurrencytype.v1.Conds.ID:type_name -> npool.v1.StringVal
	23, // 1: chain.manager.coin.fiatcurrencytype.v1.Conds.Name:type_name -> npool.v1.StringVal
	0,  // 2: chain.manager.coin.fiatcurrencytype.v1.CreateFiatCurrencyTypeRequest.Info:type_name -> chain.manager.coin.fiatcurrencytype.v1.FiatCurrencyTypeReq
	1,  // 3: chain.manager.coin.fiatcurrencytype.v1.CreateFiatCurrencyTypeResponse.Info:type_name -> chain.manager.coin.fiatcurrencytype.v1.FiatCurrencyType
	0,  // 4: chain.manager.coin.fiatcurrencytype.v1.CreateFiatCurrencyTypesRequest.Infos:type_name -> chain.manager.coin.fiatcurrencytype.v1.FiatCurrencyTypeReq
	1,  // 5: chain.manager.coin.fiatcurrencytype.v1.CreateFiatCurrencyTypesResponse.Infos:type_name -> chain.manager.coin.fiatcurrencytype.v1.FiatCurrencyType
	0,  // 6: chain.manager.coin.fiatcurrencytype.v1.UpdateFiatCurrencyTypeRequest.Info:type_name -> chain.manager.coin.fiatcurrencytype.v1.FiatCurrencyTypeReq
	1,  // 7: chain.manager.coin.fiatcurrencytype.v1.UpdateFiatCurrencyTypeResponse.Info:type_name -> chain.manager.coin.fiatcurrencytype.v1.FiatCurrencyType
	1,  // 8: chain.manager.coin.fiatcurrencytype.v1.GetFiatCurrencyTypeResponse.Info:type_name -> chain.manager.coin.fiatcurrencytype.v1.FiatCurrencyType
	2,  // 9: chain.manager.coin.fiatcurrencytype.v1.GetFiatCurrencyTypesRequest.Conds:type_name -> chain.manager.coin.fiatcurrencytype.v1.Conds
	1,  // 10: chain.manager.coin.fiatcurrencytype.v1.GetFiatCurrencyTypesResponse.Infos:type_name -> chain.manager.coin.fiatcurrencytype.v1.FiatCurrencyType
	2,  // 11: chain.manager.coin.fiatcurrencytype.v1.GetFiatCurrencyTypeOnlyRequest.Conds:type_name -> chain.manager.coin.fiatcurrencytype.v1.Conds
	1,  // 12: chain.manager.coin.fiatcurrencytype.v1.GetFiatCurrencyTypeOnlyResponse.Info:type_name -> chain.manager.coin.fiatcurrencytype.v1.FiatCurrencyType
	2,  // 13: chain.manager.coin.fiatcurrencytype.v1.ExistFiatCurrencyTypeCondsRequest.Conds:type_name -> chain.manager.coin.fiatcurrencytype.v1.Conds
	2,  // 14: chain.manager.coin.fiatcurrencytype.v1.CountFiatCurrencyTypesRequest.Conds:type_name -> chain.manager.coin.fiatcurrencytype.v1.Conds
	1,  // 15: chain.manager.coin.fiatcurrencytype.v1.DeleteFiatCurrencyTypeResponse.Info:type_name -> chain.manager.coin.fiatcurrencytype.v1.FiatCurrencyType
	3,  // 16: chain.manager.coin.fiatcurrencytype.v1.Manager.CreateFiatCurrencyType:input_type -> chain.manager.coin.fiatcurrencytype.v1.CreateFiatCurrencyTypeRequest
	5,  // 17: chain.manager.coin.fiatcurrencytype.v1.Manager.CreateFiatCurrencyTypes:input_type -> chain.manager.coin.fiatcurrencytype.v1.CreateFiatCurrencyTypesRequest
	7,  // 18: chain.manager.coin.fiatcurrencytype.v1.Manager.UpdateFiatCurrencyType:input_type -> chain.manager.coin.fiatcurrencytype.v1.UpdateFiatCurrencyTypeRequest
	9,  // 19: chain.manager.coin.fiatcurrencytype.v1.Manager.GetFiatCurrencyType:input_type -> chain.manager.coin.fiatcurrencytype.v1.GetFiatCurrencyTypeRequest
	13, // 20: chain.manager.coin.fiatcurrencytype.v1.Manager.GetFiatCurrencyTypeOnly:input_type -> chain.manager.coin.fiatcurrencytype.v1.GetFiatCurrencyTypeOnlyRequest
	11, // 21: chain.manager.coin.fiatcurrencytype.v1.Manager.GetFiatCurrencyTypes:input_type -> chain.manager.coin.fiatcurrencytype.v1.GetFiatCurrencyTypesRequest
	15, // 22: chain.manager.coin.fiatcurrencytype.v1.Manager.ExistFiatCurrencyType:input_type -> chain.manager.coin.fiatcurrencytype.v1.ExistFiatCurrencyTypeRequest
	17, // 23: chain.manager.coin.fiatcurrencytype.v1.Manager.ExistFiatCurrencyTypeConds:input_type -> chain.manager.coin.fiatcurrencytype.v1.ExistFiatCurrencyTypeCondsRequest
	19, // 24: chain.manager.coin.fiatcurrencytype.v1.Manager.CountFiatCurrencyTypes:input_type -> chain.manager.coin.fiatcurrencytype.v1.CountFiatCurrencyTypesRequest
	21, // 25: chain.manager.coin.fiatcurrencytype.v1.Manager.DeleteFiatCurrencyType:input_type -> chain.manager.coin.fiatcurrencytype.v1.DeleteFiatCurrencyTypeRequest
	4,  // 26: chain.manager.coin.fiatcurrencytype.v1.Manager.CreateFiatCurrencyType:output_type -> chain.manager.coin.fiatcurrencytype.v1.CreateFiatCurrencyTypeResponse
	6,  // 27: chain.manager.coin.fiatcurrencytype.v1.Manager.CreateFiatCurrencyTypes:output_type -> chain.manager.coin.fiatcurrencytype.v1.CreateFiatCurrencyTypesResponse
	8,  // 28: chain.manager.coin.fiatcurrencytype.v1.Manager.UpdateFiatCurrencyType:output_type -> chain.manager.coin.fiatcurrencytype.v1.UpdateFiatCurrencyTypeResponse
	10, // 29: chain.manager.coin.fiatcurrencytype.v1.Manager.GetFiatCurrencyType:output_type -> chain.manager.coin.fiatcurrencytype.v1.GetFiatCurrencyTypeResponse
	14, // 30: chain.manager.coin.fiatcurrencytype.v1.Manager.GetFiatCurrencyTypeOnly:output_type -> chain.manager.coin.fiatcurrencytype.v1.GetFiatCurrencyTypeOnlyResponse
	12, // 31: chain.manager.coin.fiatcurrencytype.v1.Manager.GetFiatCurrencyTypes:output_type -> chain.manager.coin.fiatcurrencytype.v1.GetFiatCurrencyTypesResponse
	16, // 32: chain.manager.coin.fiatcurrencytype.v1.Manager.ExistFiatCurrencyType:output_type -> chain.manager.coin.fiatcurrencytype.v1.ExistFiatCurrencyTypeResponse
	18, // 33: chain.manager.coin.fiatcurrencytype.v1.Manager.ExistFiatCurrencyTypeConds:output_type -> chain.manager.coin.fiatcurrencytype.v1.ExistFiatCurrencyTypeCondsResponse
	20, // 34: chain.manager.coin.fiatcurrencytype.v1.Manager.CountFiatCurrencyTypes:output_type -> chain.manager.coin.fiatcurrencytype.v1.CountFiatCurrencyTypesResponse
	22, // 35: chain.manager.coin.fiatcurrencytype.v1.Manager.DeleteFiatCurrencyType:output_type -> chain.manager.coin.fiatcurrencytype.v1.DeleteFiatCurrencyTypeResponse
	26, // [26:36] is the sub-list for method output_type
	16, // [16:26] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_init() }
func file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_init() {
	if File_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FiatCurrencyTypeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FiatCurrencyType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFiatCurrencyTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFiatCurrencyTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFiatCurrencyTypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFiatCurrencyTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFiatCurrencyTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFiatCurrencyTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFiatCurrencyTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFiatCurrencyTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFiatCurrencyTypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFiatCurrencyTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFiatCurrencyTypeOnlyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFiatCurrencyTypeOnlyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistFiatCurrencyTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistFiatCurrencyTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistFiatCurrencyTypeCondsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistFiatCurrencyTypeCondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountFiatCurrencyTypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountFiatCurrencyTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFiatCurrencyTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFiatCurrencyTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_goTypes,
		DependencyIndexes: file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_depIdxs,
		MessageInfos:      file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_msgTypes,
	}.Build()
	File_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto = out.File
	file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_rawDesc = nil
	file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_goTypes = nil
	file_npool_chain_mgr_v1_coin_fiatcurrencytype_faitcurrencytype_proto_depIdxs = nil
}
