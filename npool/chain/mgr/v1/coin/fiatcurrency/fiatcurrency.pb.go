// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: npool/chain/mgr/v1/coin/fiatcurrency/fiatcurrency.proto

package fiatcurrency

import (
	npool "github.com/NpoolPlatform/message/npool"
	currency "github.com/NpoolPlatform/message/npool/chain/mgr/v1/coin/currency"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FiatCurrencyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              *string            `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	FiatTypeID      *string            `protobuf:"bytes,20,opt,name=FiatTypeID,proto3,oneof" json:"FiatTypeID,omitempty"`
	FeedType        *currency.FeedType `protobuf:"varint,30,opt,name=FeedType,proto3,enum=chain.manager.coin.currency.v1.FeedType,oneof" json:"FeedType,omitempty"`
	MarketValueHigh *string            `protobuf:"bytes,40,opt,name=MarketValueHigh,proto3,oneof" json:"MarketValueHigh,omitempty"`
	MarketValueLow  *string            `protobuf:"bytes,50,opt,name=MarketValueLow,proto3,oneof" json:"MarketValueLow,omitempty"`
}

func (x *FiatCurrencyReq) Reset() {
	*x = FiatCurrencyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FiatCurrencyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FiatCurrencyReq) ProtoMessage() {}

func (x *FiatCurrencyReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FiatCurrencyReq.ProtoReflect.Descriptor instead.
func (*FiatCurrencyReq) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescGZIP(), []int{0}
}

func (x *FiatCurrencyReq) GetID() string {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return ""
}

func (x *FiatCurrencyReq) GetFiatTypeID() string {
	if x != nil && x.FiatTypeID != nil {
		return *x.FiatTypeID
	}
	return ""
}

func (x *FiatCurrencyReq) GetFeedType() currency.FeedType {
	if x != nil && x.FeedType != nil {
		return *x.FeedType
	}
	return currency.FeedType(0)
}

func (x *FiatCurrencyReq) GetMarketValueHigh() string {
	if x != nil && x.MarketValueHigh != nil {
		return *x.MarketValueHigh
	}
	return ""
}

func (x *FiatCurrencyReq) GetMarketValueLow() string {
	if x != nil && x.MarketValueLow != nil {
		return *x.MarketValueLow
	}
	return ""
}

type FiatCurrency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              string            `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	FiatTypeID      string            `protobuf:"bytes,20,opt,name=FiatTypeID,proto3" json:"FiatTypeID,omitempty"`
	FeedType        currency.FeedType `protobuf:"varint,30,opt,name=FeedType,proto3,enum=chain.manager.coin.currency.v1.FeedType" json:"FeedType,omitempty"`
	MarketValueHigh string            `protobuf:"bytes,40,opt,name=MarketValueHigh,proto3" json:"MarketValueHigh,omitempty"`
	MarketValueLow  string            `protobuf:"bytes,50,opt,name=MarketValueLow,proto3" json:"MarketValueLow,omitempty"`
	CreatedAt       uint32            `protobuf:"varint,60,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt       uint32            `protobuf:"varint,70,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (x *FiatCurrency) Reset() {
	*x = FiatCurrency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FiatCurrency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FiatCurrency) ProtoMessage() {}

func (x *FiatCurrency) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FiatCurrency.ProtoReflect.Descriptor instead.
func (*FiatCurrency) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescGZIP(), []int{1}
}

func (x *FiatCurrency) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *FiatCurrency) GetFiatTypeID() string {
	if x != nil {
		return x.FiatTypeID
	}
	return ""
}

func (x *FiatCurrency) GetFeedType() currency.FeedType {
	if x != nil {
		return x.FeedType
	}
	return currency.FeedType(0)
}

func (x *FiatCurrency) GetMarketValueHigh() string {
	if x != nil {
		return x.MarketValueHigh
	}
	return ""
}

func (x *FiatCurrency) GetMarketValueLow() string {
	if x != nil {
		return x.MarketValueLow
	}
	return ""
}

func (x *FiatCurrency) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *FiatCurrency) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         *npool.StringVal `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	FiatTypeID *npool.StringVal `protobuf:"bytes,20,opt,name=FiatTypeID,proto3,oneof" json:"FiatTypeID,omitempty"`
	StartAt    *npool.Uint32Val `protobuf:"bytes,30,opt,name=StartAt,proto3,oneof" json:"StartAt,omitempty"`
	EndAt      *npool.Uint32Val `protobuf:"bytes,40,opt,name=EndAt,proto3,oneof" json:"EndAt,omitempty"`
	FeedType   *npool.Int32Val  `protobuf:"bytes,50,opt,name=FeedType,proto3,oneof" json:"FeedType,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *npool.StringVal {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetFiatTypeID() *npool.StringVal {
	if x != nil {
		return x.FiatTypeID
	}
	return nil
}

func (x *Conds) GetStartAt() *npool.Uint32Val {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *Conds) GetEndAt() *npool.Uint32Val {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *Conds) GetFeedType() *npool.Int32Val {
	if x != nil {
		return x.FeedType
	}
	return nil
}

type CreateFiatCurrencyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *FiatCurrencyReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateFiatCurrencyRequest) Reset() {
	*x = CreateFiatCurrencyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFiatCurrencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFiatCurrencyRequest) ProtoMessage() {}

func (x *CreateFiatCurrencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFiatCurrencyRequest.ProtoReflect.Descriptor instead.
func (*CreateFiatCurrencyRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescGZIP(), []int{3}
}

func (x *CreateFiatCurrencyRequest) GetInfo() *FiatCurrencyReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateFiatCurrencyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *FiatCurrency `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateFiatCurrencyResponse) Reset() {
	*x = CreateFiatCurrencyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFiatCurrencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFiatCurrencyResponse) ProtoMessage() {}

func (x *CreateFiatCurrencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFiatCurrencyResponse.ProtoReflect.Descriptor instead.
func (*CreateFiatCurrencyResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescGZIP(), []int{4}
}

func (x *CreateFiatCurrencyResponse) GetInfo() *FiatCurrency {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateFiatCurrenciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*FiatCurrencyReq `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateFiatCurrenciesRequest) Reset() {
	*x = CreateFiatCurrenciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFiatCurrenciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFiatCurrenciesRequest) ProtoMessage() {}

func (x *CreateFiatCurrenciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFiatCurrenciesRequest.ProtoReflect.Descriptor instead.
func (*CreateFiatCurrenciesRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescGZIP(), []int{5}
}

func (x *CreateFiatCurrenciesRequest) GetInfos() []*FiatCurrencyReq {
	if x != nil {
		return x.Infos
	}
	return nil
}

type CreateFiatCurrenciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*FiatCurrency `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateFiatCurrenciesResponse) Reset() {
	*x = CreateFiatCurrenciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFiatCurrenciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFiatCurrenciesResponse) ProtoMessage() {}

func (x *CreateFiatCurrenciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFiatCurrenciesResponse.ProtoReflect.Descriptor instead.
func (*CreateFiatCurrenciesResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescGZIP(), []int{6}
}

func (x *CreateFiatCurrenciesResponse) GetInfos() []*FiatCurrency {
	if x != nil {
		return x.Infos
	}
	return nil
}

type UpdateFiatCurrencyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *FiatCurrencyReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateFiatCurrencyRequest) Reset() {
	*x = UpdateFiatCurrencyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFiatCurrencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFiatCurrencyRequest) ProtoMessage() {}

func (x *UpdateFiatCurrencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFiatCurrencyRequest.ProtoReflect.Descriptor instead.
func (*UpdateFiatCurrencyRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateFiatCurrencyRequest) GetInfo() *FiatCurrencyReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateFiatCurrencyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *FiatCurrency `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateFiatCurrencyResponse) Reset() {
	*x = UpdateFiatCurrencyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFiatCurrencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFiatCurrencyResponse) ProtoMessage() {}

func (x *UpdateFiatCurrencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFiatCurrencyResponse.ProtoReflect.Descriptor instead.
func (*UpdateFiatCurrencyResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateFiatCurrencyResponse) GetInfo() *FiatCurrency {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetFiatCurrencyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetFiatCurrencyRequest) Reset() {
	*x = GetFiatCurrencyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFiatCurrencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFiatCurrencyRequest) ProtoMessage() {}

func (x *GetFiatCurrencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFiatCurrencyRequest.ProtoReflect.Descriptor instead.
func (*GetFiatCurrencyRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescGZIP(), []int{9}
}

func (x *GetFiatCurrencyRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetFiatCurrencyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *FiatCurrency `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetFiatCurrencyResponse) Reset() {
	*x = GetFiatCurrencyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFiatCurrencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFiatCurrencyResponse) ProtoMessage() {}

func (x *GetFiatCurrencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFiatCurrencyResponse.ProtoReflect.Descriptor instead.
func (*GetFiatCurrencyResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescGZIP(), []int{10}
}

func (x *GetFiatCurrencyResponse) GetInfo() *FiatCurrency {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetFiatCurrenciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetFiatCurrenciesRequest) Reset() {
	*x = GetFiatCurrenciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFiatCurrenciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFiatCurrenciesRequest) ProtoMessage() {}

func (x *GetFiatCurrenciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFiatCurrenciesRequest.ProtoReflect.Descriptor instead.
func (*GetFiatCurrenciesRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescGZIP(), []int{11}
}

func (x *GetFiatCurrenciesRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetFiatCurrenciesRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetFiatCurrenciesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetFiatCurrenciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*FiatCurrency `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32          `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetFiatCurrenciesResponse) Reset() {
	*x = GetFiatCurrenciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFiatCurrenciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFiatCurrenciesResponse) ProtoMessage() {}

func (x *GetFiatCurrenciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFiatCurrenciesResponse.ProtoReflect.Descriptor instead.
func (*GetFiatCurrenciesResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescGZIP(), []int{12}
}

func (x *GetFiatCurrenciesResponse) GetInfos() []*FiatCurrency {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetFiatCurrenciesResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetFiatCurrencyOnlyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *GetFiatCurrencyOnlyRequest) Reset() {
	*x = GetFiatCurrencyOnlyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFiatCurrencyOnlyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFiatCurrencyOnlyRequest) ProtoMessage() {}

func (x *GetFiatCurrencyOnlyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFiatCurrencyOnlyRequest.ProtoReflect.Descriptor instead.
func (*GetFiatCurrencyOnlyRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescGZIP(), []int{13}
}

func (x *GetFiatCurrencyOnlyRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type GetFiatCurrencyOnlyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *FiatCurrency `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetFiatCurrencyOnlyResponse) Reset() {
	*x = GetFiatCurrencyOnlyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFiatCurrencyOnlyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFiatCurrencyOnlyResponse) ProtoMessage() {}

func (x *GetFiatCurrencyOnlyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFiatCurrencyOnlyResponse.ProtoReflect.Descriptor instead.
func (*GetFiatCurrencyOnlyResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescGZIP(), []int{14}
}

func (x *GetFiatCurrencyOnlyResponse) GetInfo() *FiatCurrency {
	if x != nil {
		return x.Info
	}
	return nil
}

type ExistFiatCurrencyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ExistFiatCurrencyRequest) Reset() {
	*x = ExistFiatCurrencyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistFiatCurrencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistFiatCurrencyRequest) ProtoMessage() {}

func (x *ExistFiatCurrencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistFiatCurrencyRequest.ProtoReflect.Descriptor instead.
func (*ExistFiatCurrencyRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescGZIP(), []int{15}
}

func (x *ExistFiatCurrencyRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ExistFiatCurrencyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistFiatCurrencyResponse) Reset() {
	*x = ExistFiatCurrencyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistFiatCurrencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistFiatCurrencyResponse) ProtoMessage() {}

func (x *ExistFiatCurrencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistFiatCurrencyResponse.ProtoReflect.Descriptor instead.
func (*ExistFiatCurrencyResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescGZIP(), []int{16}
}

func (x *ExistFiatCurrencyResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type ExistFiatCurrencyCondsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *ExistFiatCurrencyCondsRequest) Reset() {
	*x = ExistFiatCurrencyCondsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistFiatCurrencyCondsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistFiatCurrencyCondsRequest) ProtoMessage() {}

func (x *ExistFiatCurrencyCondsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistFiatCurrencyCondsRequest.ProtoReflect.Descriptor instead.
func (*ExistFiatCurrencyCondsRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescGZIP(), []int{17}
}

func (x *ExistFiatCurrencyCondsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type ExistFiatCurrencyCondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistFiatCurrencyCondsResponse) Reset() {
	*x = ExistFiatCurrencyCondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistFiatCurrencyCondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistFiatCurrencyCondsResponse) ProtoMessage() {}

func (x *ExistFiatCurrencyCondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistFiatCurrencyCondsResponse.ProtoReflect.Descriptor instead.
func (*ExistFiatCurrencyCondsResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescGZIP(), []int{18}
}

func (x *ExistFiatCurrencyCondsResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type CountFiatCurrenciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *CountFiatCurrenciesRequest) Reset() {
	*x = CountFiatCurrenciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountFiatCurrenciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountFiatCurrenciesRequest) ProtoMessage() {}

func (x *CountFiatCurrenciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountFiatCurrenciesRequest.ProtoReflect.Descriptor instead.
func (*CountFiatCurrenciesRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescGZIP(), []int{19}
}

func (x *CountFiatCurrenciesRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type CountFiatCurrenciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info uint32 `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CountFiatCurrenciesResponse) Reset() {
	*x = CountFiatCurrenciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountFiatCurrenciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountFiatCurrenciesResponse) ProtoMessage() {}

func (x *CountFiatCurrenciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountFiatCurrenciesResponse.ProtoReflect.Descriptor instead.
func (*CountFiatCurrenciesResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescGZIP(), []int{20}
}

func (x *CountFiatCurrenciesResponse) GetInfo() uint32 {
	if x != nil {
		return x.Info
	}
	return 0
}

type DeleteFiatCurrencyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *DeleteFiatCurrencyRequest) Reset() {
	*x = DeleteFiatCurrencyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFiatCurrencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFiatCurrencyRequest) ProtoMessage() {}

func (x *DeleteFiatCurrencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFiatCurrencyRequest.ProtoReflect.Descriptor instead.
func (*DeleteFiatCurrencyRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteFiatCurrencyRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type DeleteFiatCurrencyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *FiatCurrency `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteFiatCurrencyResponse) Reset() {
	*x = DeleteFiatCurrencyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFiatCurrencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFiatCurrencyResponse) ProtoMessage() {}

func (x *DeleteFiatCurrencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFiatCurrencyResponse.ProtoReflect.Descriptor instead.
func (*DeleteFiatCurrencyResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteFiatCurrencyResponse) GetInfo() *FiatCurrency {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto protoreflect.FileDescriptor

var file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_rawDesc = []byte{
	0x0a, 0x37, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x67,
	0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x22, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69,
	0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x6e, 0x70, 0x6f, 0x6f,
	0x6c, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x6e,
	0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x67, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2f,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbc,
	0x02, 0x0a, 0x0f, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52,
	0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x46, 0x69, 0x61, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x46,
	0x69, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x08,
	0x46, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x48, 0x02, 0x52, 0x08, 0x46, 0x65, 0x65, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x69, 0x67, 0x68, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x0f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x69, 0x67, 0x68, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x6f, 0x77, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x0e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x6f, 0x77,
	0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x46,
	0x69, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x65,
	0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x69, 0x67, 0x68, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x6f, 0x77, 0x22, 0x92, 0x02,
	0x0a, 0x0c, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0a, 0x46, 0x69, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x46, 0x69, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x44,
	0x0a, 0x08, 0x46, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x28, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x46, 0x65, 0x65, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x48, 0x69, 0x67, 0x68, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x69, 0x67, 0x68, 0x12, 0x26,
	0x0a, 0x0e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x6f, 0x77,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x4c, 0x6f, 0x77, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0xbd, 0x02, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52,
	0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0a, 0x46, 0x69, 0x61, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48,
	0x01, 0x52, 0x0a, 0x46, 0x69, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01,
	0x12, 0x32, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x02, 0x52, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x05, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x05, 0x45, 0x6e, 0x64, 0x41,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x08, 0x46, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x04, 0x52, 0x08, 0x46, 0x65,
	0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x46, 0x69, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x45, 0x6e, 0x64, 0x41, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x65, 0x65, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x64, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x61, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x47, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52,
	0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x62, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x68, 0x0a, 0x1b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x05, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e,
	0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x52,
	0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x66, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x61, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x64,
	0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66,
	0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x62, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x44, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x28, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x46,
	0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x44, 0x22, 0x5f, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x89, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x46, 0x69, 0x61, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3f, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22,
	0x79, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x05,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x05, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x5d, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4f, 0x6e, 0x6c,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61,
	0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x63, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4f, 0x6e, 0x6c, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x61, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2a,
	0x0a, 0x18, 0x45, 0x78, 0x69, 0x73, 0x74, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x2f, 0x0a, 0x19, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x60, 0x0a, 0x1d, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x05,
	0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x34, 0x0a,
	0x1e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x5d, 0x0a, 0x1a, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x61, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3f, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x22, 0x31, 0x0a, 0x1b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x61, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2b, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46,
	0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x44, 0x22, 0x62, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x61, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x44, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x82, 0x0c, 0x0a, 0x07, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x12, 0x95, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x61,
	0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3d, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66,
	0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69,
	0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9b, 0x01, 0x0a, 0x14, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x12, 0x3f, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x95, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x3d, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x61, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x8c, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x3a, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x61,
	0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3b, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x98, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x3e, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61,
	0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4f, 0x6e, 0x6c, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61,
	0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4f, 0x6e, 0x6c, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x92, 0x01, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x12, 0x3c, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x92, 0x01, 0x0a, 0x11, 0x45, 0x78, 0x69, 0x73, 0x74, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3c, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x46, 0x69,
	0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0xa1, 0x01, 0x0a, 0x16, 0x45, 0x78, 0x69, 0x73, 0x74, 0x46, 0x69,
	0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x41, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x42, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x46, 0x69, 0x61,
	0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x98, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x12, 0x3e, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x61, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3f, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x61, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x95, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69,
	0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x3d, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e,
	0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x66,
	0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x47, 0x5a, 0x45, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f,
	0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x67, 0x72, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x66, 0x69, 0x61, 0x74, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescOnce sync.Once
	file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescData = file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_rawDesc
)

func file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescGZIP() []byte {
	file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescOnce.Do(func() {
		file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescData)
	})
	return file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_rawDescData
}

var file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_goTypes = []interface{}{
	(*FiatCurrencyReq)(nil),                // 0: chain.manager.coin.fiatcurrency.v1.FiatCurrencyReq
	(*FiatCurrency)(nil),                   // 1: chain.manager.coin.fiatcurrency.v1.FiatCurrency
	(*Conds)(nil),                          // 2: chain.manager.coin.fiatcurrency.v1.Conds
	(*CreateFiatCurrencyRequest)(nil),      // 3: chain.manager.coin.fiatcurrency.v1.CreateFiatCurrencyRequest
	(*CreateFiatCurrencyResponse)(nil),     // 4: chain.manager.coin.fiatcurrency.v1.CreateFiatCurrencyResponse
	(*CreateFiatCurrenciesRequest)(nil),    // 5: chain.manager.coin.fiatcurrency.v1.CreateFiatCurrenciesRequest
	(*CreateFiatCurrenciesResponse)(nil),   // 6: chain.manager.coin.fiatcurrency.v1.CreateFiatCurrenciesResponse
	(*UpdateFiatCurrencyRequest)(nil),      // 7: chain.manager.coin.fiatcurrency.v1.UpdateFiatCurrencyRequest
	(*UpdateFiatCurrencyResponse)(nil),     // 8: chain.manager.coin.fiatcurrency.v1.UpdateFiatCurrencyResponse
	(*GetFiatCurrencyRequest)(nil),         // 9: chain.manager.coin.fiatcurrency.v1.GetFiatCurrencyRequest
	(*GetFiatCurrencyResponse)(nil),        // 10: chain.manager.coin.fiatcurrency.v1.GetFiatCurrencyResponse
	(*GetFiatCurrenciesRequest)(nil),       // 11: chain.manager.coin.fiatcurrency.v1.GetFiatCurrenciesRequest
	(*GetFiatCurrenciesResponse)(nil),      // 12: chain.manager.coin.fiatcurrency.v1.GetFiatCurrenciesResponse
	(*GetFiatCurrencyOnlyRequest)(nil),     // 13: chain.manager.coin.fiatcurrency.v1.GetFiatCurrencyOnlyRequest
	(*GetFiatCurrencyOnlyResponse)(nil),    // 14: chain.manager.coin.fiatcurrency.v1.GetFiatCurrencyOnlyResponse
	(*ExistFiatCurrencyRequest)(nil),       // 15: chain.manager.coin.fiatcurrency.v1.ExistFiatCurrencyRequest
	(*ExistFiatCurrencyResponse)(nil),      // 16: chain.manager.coin.fiatcurrency.v1.ExistFiatCurrencyResponse
	(*ExistFiatCurrencyCondsRequest)(nil),  // 17: chain.manager.coin.fiatcurrency.v1.ExistFiatCurrencyCondsRequest
	(*ExistFiatCurrencyCondsResponse)(nil), // 18: chain.manager.coin.fiatcurrency.v1.ExistFiatCurrencyCondsResponse
	(*CountFiatCurrenciesRequest)(nil),     // 19: chain.manager.coin.fiatcurrency.v1.CountFiatCurrenciesRequest
	(*CountFiatCurrenciesResponse)(nil),    // 20: chain.manager.coin.fiatcurrency.v1.CountFiatCurrenciesResponse
	(*DeleteFiatCurrencyRequest)(nil),      // 21: chain.manager.coin.fiatcurrency.v1.DeleteFiatCurrencyRequest
	(*DeleteFiatCurrencyResponse)(nil),     // 22: chain.manager.coin.fiatcurrency.v1.DeleteFiatCurrencyResponse
	(currency.FeedType)(0),                 // 23: chain.manager.coin.currency.v1.FeedType
	(*npool.StringVal)(nil),                // 24: npool.v1.StringVal
	(*npool.Uint32Val)(nil),                // 25: npool.v1.Uint32Val
	(*npool.Int32Val)(nil),                 // 26: npool.v1.Int32Val
}
var file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_depIdxs = []int32{
	23, // 0: chain.manager.coin.fiatcurrency.v1.FiatCurrencyReq.FeedType:type_name -> chain.manager.coin.currency.v1.FeedType
	23, // 1: chain.manager.coin.fiatcurrency.v1.FiatCurrency.FeedType:type_name -> chain.manager.coin.currency.v1.FeedType
	24, // 2: chain.manager.coin.fiatcurrency.v1.Conds.ID:type_name -> npool.v1.StringVal
	24, // 3: chain.manager.coin.fiatcurrency.v1.Conds.FiatTypeID:type_name -> npool.v1.StringVal
	25, // 4: chain.manager.coin.fiatcurrency.v1.Conds.StartAt:type_name -> npool.v1.Uint32Val
	25, // 5: chain.manager.coin.fiatcurrency.v1.Conds.EndAt:type_name -> npool.v1.Uint32Val
	26, // 6: chain.manager.coin.fiatcurrency.v1.Conds.FeedType:type_name -> npool.v1.Int32Val
	0,  // 7: chain.manager.coin.fiatcurrency.v1.CreateFiatCurrencyRequest.Info:type_name -> chain.manager.coin.fiatcurrency.v1.FiatCurrencyReq
	1,  // 8: chain.manager.coin.fiatcurrency.v1.CreateFiatCurrencyResponse.Info:type_name -> chain.manager.coin.fiatcurrency.v1.FiatCurrency
	0,  // 9: chain.manager.coin.fiatcurrency.v1.CreateFiatCurrenciesRequest.Infos:type_name -> chain.manager.coin.fiatcurrency.v1.FiatCurrencyReq
	1,  // 10: chain.manager.coin.fiatcurrency.v1.CreateFiatCurrenciesResponse.Infos:type_name -> chain.manager.coin.fiatcurrency.v1.FiatCurrency
	0,  // 11: chain.manager.coin.fiatcurrency.v1.UpdateFiatCurrencyRequest.Info:type_name -> chain.manager.coin.fiatcurrency.v1.FiatCurrencyReq
	1,  // 12: chain.manager.coin.fiatcurrency.v1.UpdateFiatCurrencyResponse.Info:type_name -> chain.manager.coin.fiatcurrency.v1.FiatCurrency
	1,  // 13: chain.manager.coin.fiatcurrency.v1.GetFiatCurrencyResponse.Info:type_name -> chain.manager.coin.fiatcurrency.v1.FiatCurrency
	2,  // 14: chain.manager.coin.fiatcurrency.v1.GetFiatCurrenciesRequest.Conds:type_name -> chain.manager.coin.fiatcurrency.v1.Conds
	1,  // 15: chain.manager.coin.fiatcurrency.v1.GetFiatCurrenciesResponse.Infos:type_name -> chain.manager.coin.fiatcurrency.v1.FiatCurrency
	2,  // 16: chain.manager.coin.fiatcurrency.v1.GetFiatCurrencyOnlyRequest.Conds:type_name -> chain.manager.coin.fiatcurrency.v1.Conds
	1,  // 17: chain.manager.coin.fiatcurrency.v1.GetFiatCurrencyOnlyResponse.Info:type_name -> chain.manager.coin.fiatcurrency.v1.FiatCurrency
	2,  // 18: chain.manager.coin.fiatcurrency.v1.ExistFiatCurrencyCondsRequest.Conds:type_name -> chain.manager.coin.fiatcurrency.v1.Conds
	2,  // 19: chain.manager.coin.fiatcurrency.v1.CountFiatCurrenciesRequest.Conds:type_name -> chain.manager.coin.fiatcurrency.v1.Conds
	1,  // 20: chain.manager.coin.fiatcurrency.v1.DeleteFiatCurrencyResponse.Info:type_name -> chain.manager.coin.fiatcurrency.v1.FiatCurrency
	3,  // 21: chain.manager.coin.fiatcurrency.v1.Manager.CreateFiatCurrency:input_type -> chain.manager.coin.fiatcurrency.v1.CreateFiatCurrencyRequest
	5,  // 22: chain.manager.coin.fiatcurrency.v1.Manager.CreateFiatCurrencies:input_type -> chain.manager.coin.fiatcurrency.v1.CreateFiatCurrenciesRequest
	7,  // 23: chain.manager.coin.fiatcurrency.v1.Manager.UpdateFiatCurrency:input_type -> chain.manager.coin.fiatcurrency.v1.UpdateFiatCurrencyRequest
	9,  // 24: chain.manager.coin.fiatcurrency.v1.Manager.GetFiatCurrency:input_type -> chain.manager.coin.fiatcurrency.v1.GetFiatCurrencyRequest
	13, // 25: chain.manager.coin.fiatcurrency.v1.Manager.GetFiatCurrencyOnly:input_type -> chain.manager.coin.fiatcurrency.v1.GetFiatCurrencyOnlyRequest
	11, // 26: chain.manager.coin.fiatcurrency.v1.Manager.GetFiatCurrencies:input_type -> chain.manager.coin.fiatcurrency.v1.GetFiatCurrenciesRequest
	15, // 27: chain.manager.coin.fiatcurrency.v1.Manager.ExistFiatCurrency:input_type -> chain.manager.coin.fiatcurrency.v1.ExistFiatCurrencyRequest
	17, // 28: chain.manager.coin.fiatcurrency.v1.Manager.ExistFiatCurrencyConds:input_type -> chain.manager.coin.fiatcurrency.v1.ExistFiatCurrencyCondsRequest
	19, // 29: chain.manager.coin.fiatcurrency.v1.Manager.CountFiatCurrencies:input_type -> chain.manager.coin.fiatcurrency.v1.CountFiatCurrenciesRequest
	21, // 30: chain.manager.coin.fiatcurrency.v1.Manager.DeleteFiatCurrency:input_type -> chain.manager.coin.fiatcurrency.v1.DeleteFiatCurrencyRequest
	4,  // 31: chain.manager.coin.fiatcurrency.v1.Manager.CreateFiatCurrency:output_type -> chain.manager.coin.fiatcurrency.v1.CreateFiatCurrencyResponse
	6,  // 32: chain.manager.coin.fiatcurrency.v1.Manager.CreateFiatCurrencies:output_type -> chain.manager.coin.fiatcurrency.v1.CreateFiatCurrenciesResponse
	8,  // 33: chain.manager.coin.fiatcurrency.v1.Manager.UpdateFiatCurrency:output_type -> chain.manager.coin.fiatcurrency.v1.UpdateFiatCurrencyResponse
	10, // 34: chain.manager.coin.fiatcurrency.v1.Manager.GetFiatCurrency:output_type -> chain.manager.coin.fiatcurrency.v1.GetFiatCurrencyResponse
	14, // 35: chain.manager.coin.fiatcurrency.v1.Manager.GetFiatCurrencyOnly:output_type -> chain.manager.coin.fiatcurrency.v1.GetFiatCurrencyOnlyResponse
	12, // 36: chain.manager.coin.fiatcurrency.v1.Manager.GetFiatCurrencies:output_type -> chain.manager.coin.fiatcurrency.v1.GetFiatCurrenciesResponse
	16, // 37: chain.manager.coin.fiatcurrency.v1.Manager.ExistFiatCurrency:output_type -> chain.manager.coin.fiatcurrency.v1.ExistFiatCurrencyResponse
	18, // 38: chain.manager.coin.fiatcurrency.v1.Manager.ExistFiatCurrencyConds:output_type -> chain.manager.coin.fiatcurrency.v1.ExistFiatCurrencyCondsResponse
	20, // 39: chain.manager.coin.fiatcurrency.v1.Manager.CountFiatCurrencies:output_type -> chain.manager.coin.fiatcurrency.v1.CountFiatCurrenciesResponse
	22, // 40: chain.manager.coin.fiatcurrency.v1.Manager.DeleteFiatCurrency:output_type -> chain.manager.coin.fiatcurrency.v1.DeleteFiatCurrencyResponse
	31, // [31:41] is the sub-list for method output_type
	21, // [21:31] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_init() }
func file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_init() {
	if File_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FiatCurrencyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FiatCurrency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFiatCurrencyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFiatCurrencyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFiatCurrenciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFiatCurrenciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFiatCurrencyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFiatCurrencyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFiatCurrencyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFiatCurrencyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFiatCurrenciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFiatCurrenciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFiatCurrencyOnlyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFiatCurrencyOnlyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistFiatCurrencyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistFiatCurrencyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistFiatCurrencyCondsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistFiatCurrencyCondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountFiatCurrenciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountFiatCurrenciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFiatCurrencyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFiatCurrencyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_goTypes,
		DependencyIndexes: file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_depIdxs,
		MessageInfos:      file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_msgTypes,
	}.Build()
	File_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto = out.File
	file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_rawDesc = nil
	file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_goTypes = nil
	file_npool_chain_mgr_v1_coin_fiatcurrency_fiatcurrency_proto_depIdxs = nil
}
