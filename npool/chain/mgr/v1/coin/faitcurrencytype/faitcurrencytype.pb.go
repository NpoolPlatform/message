// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: npool/chain/mgr/v1/coin/faitcurrencytype/faitcurrencytype.proto

package legaltype

import (
	npool "github.com/NpoolPlatform/message/npool"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LegalTypeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID   *string `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	Name *string `protobuf:"bytes,20,opt,name=Name,proto3,oneof" json:"Name,omitempty"`
}

func (x *LegalTypeReq) Reset() {
	*x = LegalTypeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LegalTypeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegalTypeReq) ProtoMessage() {}

func (x *LegalTypeReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegalTypeReq.ProtoReflect.Descriptor instead.
func (*LegalTypeReq) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_rawDescGZIP(), []int{0}
}

func (x *LegalTypeReq) GetID() string {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return ""
}

func (x *LegalTypeReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type LegalType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	Name      string `protobuf:"bytes,20,opt,name=Name,proto3" json:"Name,omitempty"`
	CreatedAt uint32 `protobuf:"varint,30,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt uint32 `protobuf:"varint,40,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (x *LegalType) Reset() {
	*x = LegalType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LegalType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegalType) ProtoMessage() {}

func (x *LegalType) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegalType.ProtoReflect.Descriptor instead.
func (*LegalType) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_rawDescGZIP(), []int{1}
}

func (x *LegalType) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *LegalType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LegalType) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *LegalType) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID   *npool.StringVal `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	Name *npool.StringVal `protobuf:"bytes,20,opt,name=Name,proto3,oneof" json:"Name,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *npool.StringVal {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetName() *npool.StringVal {
	if x != nil {
		return x.Name
	}
	return nil
}

type CreateLegalTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *LegalTypeReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateLegalTypeRequest) Reset() {
	*x = CreateLegalTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLegalTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLegalTypeRequest) ProtoMessage() {}

func (x *CreateLegalTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLegalTypeRequest.ProtoReflect.Descriptor instead.
func (*CreateLegalTypeRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_rawDescGZIP(), []int{3}
}

func (x *CreateLegalTypeRequest) GetInfo() *LegalTypeReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateLegalTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *LegalType `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateLegalTypeResponse) Reset() {
	*x = CreateLegalTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLegalTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLegalTypeResponse) ProtoMessage() {}

func (x *CreateLegalTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLegalTypeResponse.ProtoReflect.Descriptor instead.
func (*CreateLegalTypeResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_rawDescGZIP(), []int{4}
}

func (x *CreateLegalTypeResponse) GetInfo() *LegalType {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateLegalTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*LegalTypeReq `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateLegalTypesRequest) Reset() {
	*x = CreateLegalTypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLegalTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLegalTypesRequest) ProtoMessage() {}

func (x *CreateLegalTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLegalTypesRequest.ProtoReflect.Descriptor instead.
func (*CreateLegalTypesRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_rawDescGZIP(), []int{5}
}

func (x *CreateLegalTypesRequest) GetInfos() []*LegalTypeReq {
	if x != nil {
		return x.Infos
	}
	return nil
}

type CreateLegalTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*LegalType `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateLegalTypesResponse) Reset() {
	*x = CreateLegalTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateLegalTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLegalTypesResponse) ProtoMessage() {}

func (x *CreateLegalTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLegalTypesResponse.ProtoReflect.Descriptor instead.
func (*CreateLegalTypesResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_rawDescGZIP(), []int{6}
}

func (x *CreateLegalTypesResponse) GetInfos() []*LegalType {
	if x != nil {
		return x.Infos
	}
	return nil
}

type UpdateLegalTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *LegalTypeReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateLegalTypeRequest) Reset() {
	*x = UpdateLegalTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLegalTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLegalTypeRequest) ProtoMessage() {}

func (x *UpdateLegalTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLegalTypeRequest.ProtoReflect.Descriptor instead.
func (*UpdateLegalTypeRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateLegalTypeRequest) GetInfo() *LegalTypeReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateLegalTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *LegalType `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateLegalTypeResponse) Reset() {
	*x = UpdateLegalTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateLegalTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateLegalTypeResponse) ProtoMessage() {}

func (x *UpdateLegalTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateLegalTypeResponse.ProtoReflect.Descriptor instead.
func (*UpdateLegalTypeResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateLegalTypeResponse) GetInfo() *LegalType {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetLegalTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetLegalTypeRequest) Reset() {
	*x = GetLegalTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLegalTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLegalTypeRequest) ProtoMessage() {}

func (x *GetLegalTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLegalTypeRequest.ProtoReflect.Descriptor instead.
func (*GetLegalTypeRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_rawDescGZIP(), []int{9}
}

func (x *GetLegalTypeRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetLegalTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *LegalType `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetLegalTypeResponse) Reset() {
	*x = GetLegalTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLegalTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLegalTypeResponse) ProtoMessage() {}

func (x *GetLegalTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLegalTypeResponse.ProtoReflect.Descriptor instead.
func (*GetLegalTypeResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_rawDescGZIP(), []int{10}
}

func (x *GetLegalTypeResponse) GetInfo() *LegalType {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetLegalTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetLegalTypesRequest) Reset() {
	*x = GetLegalTypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLegalTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLegalTypesRequest) ProtoMessage() {}

func (x *GetLegalTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLegalTypesRequest.ProtoReflect.Descriptor instead.
func (*GetLegalTypesRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_rawDescGZIP(), []int{11}
}

func (x *GetLegalTypesRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetLegalTypesRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetLegalTypesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetLegalTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*LegalType `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32       `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetLegalTypesResponse) Reset() {
	*x = GetLegalTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLegalTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLegalTypesResponse) ProtoMessage() {}

func (x *GetLegalTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLegalTypesResponse.ProtoReflect.Descriptor instead.
func (*GetLegalTypesResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_rawDescGZIP(), []int{12}
}

func (x *GetLegalTypesResponse) GetInfos() []*LegalType {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetLegalTypesResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetLegalTypeOnlyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *GetLegalTypeOnlyRequest) Reset() {
	*x = GetLegalTypeOnlyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLegalTypeOnlyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLegalTypeOnlyRequest) ProtoMessage() {}

func (x *GetLegalTypeOnlyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLegalTypeOnlyRequest.ProtoReflect.Descriptor instead.
func (*GetLegalTypeOnlyRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_rawDescGZIP(), []int{13}
}

func (x *GetLegalTypeOnlyRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type GetLegalTypeOnlyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *LegalType `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetLegalTypeOnlyResponse) Reset() {
	*x = GetLegalTypeOnlyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLegalTypeOnlyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLegalTypeOnlyResponse) ProtoMessage() {}

func (x *GetLegalTypeOnlyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLegalTypeOnlyResponse.ProtoReflect.Descriptor instead.
func (*GetLegalTypeOnlyResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_rawDescGZIP(), []int{14}
}

func (x *GetLegalTypeOnlyResponse) GetInfo() *LegalType {
	if x != nil {
		return x.Info
	}
	return nil
}

type ExistLegalTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ExistLegalTypeRequest) Reset() {
	*x = ExistLegalTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistLegalTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistLegalTypeRequest) ProtoMessage() {}

func (x *ExistLegalTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistLegalTypeRequest.ProtoReflect.Descriptor instead.
func (*ExistLegalTypeRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_rawDescGZIP(), []int{15}
}

func (x *ExistLegalTypeRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ExistLegalTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistLegalTypeResponse) Reset() {
	*x = ExistLegalTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistLegalTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistLegalTypeResponse) ProtoMessage() {}

func (x *ExistLegalTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistLegalTypeResponse.ProtoReflect.Descriptor instead.
func (*ExistLegalTypeResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_rawDescGZIP(), []int{16}
}

func (x *ExistLegalTypeResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type ExistLegalTypeCondsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *ExistLegalTypeCondsRequest) Reset() {
	*x = ExistLegalTypeCondsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistLegalTypeCondsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistLegalTypeCondsRequest) ProtoMessage() {}

func (x *ExistLegalTypeCondsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistLegalTypeCondsRequest.ProtoReflect.Descriptor instead.
func (*ExistLegalTypeCondsRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_rawDescGZIP(), []int{17}
}

func (x *ExistLegalTypeCondsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type ExistLegalTypeCondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistLegalTypeCondsResponse) Reset() {
	*x = ExistLegalTypeCondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistLegalTypeCondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistLegalTypeCondsResponse) ProtoMessage() {}

func (x *ExistLegalTypeCondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistLegalTypeCondsResponse.ProtoReflect.Descriptor instead.
func (*ExistLegalTypeCondsResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_rawDescGZIP(), []int{18}
}

func (x *ExistLegalTypeCondsResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type CountLegalTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *CountLegalTypesRequest) Reset() {
	*x = CountLegalTypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountLegalTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountLegalTypesRequest) ProtoMessage() {}

func (x *CountLegalTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountLegalTypesRequest.ProtoReflect.Descriptor instead.
func (*CountLegalTypesRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_rawDescGZIP(), []int{19}
}

func (x *CountLegalTypesRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type CountLegalTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info uint32 `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CountLegalTypesResponse) Reset() {
	*x = CountLegalTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountLegalTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountLegalTypesResponse) ProtoMessage() {}

func (x *CountLegalTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountLegalTypesResponse.ProtoReflect.Descriptor instead.
func (*CountLegalTypesResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_rawDescGZIP(), []int{20}
}

func (x *CountLegalTypesResponse) GetInfo() uint32 {
	if x != nil {
		return x.Info
	}
	return 0
}

type DeleteLegalTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *DeleteLegalTypeRequest) Reset() {
	*x = DeleteLegalTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLegalTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLegalTypeRequest) ProtoMessage() {}

func (x *DeleteLegalTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLegalTypeRequest.ProtoReflect.Descriptor instead.
func (*DeleteLegalTypeRequest) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteLegalTypeRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type DeleteLegalTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *LegalType `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteLegalTypeResponse) Reset() {
	*x = DeleteLegalTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteLegalTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteLegalTypeResponse) ProtoMessage() {}

func (x *DeleteLegalTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteLegalTypeResponse.ProtoReflect.Descriptor instead.
func (*DeleteLegalTypeResponse) Descriptor() ([]byte, []int) {
	return file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteLegalTypeResponse) GetInfo() *LegalType {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto protoreflect.FileDescriptor

var file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_rawDesc = []byte{
	0x0a, 0x3f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x67,
	0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x66, 0x61, 0x69, 0x74, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x66, 0x61, 0x69, 0x74, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x11, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x4c, 0x0a, 0x0c, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x6b, 0x0a, 0x09, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x6f, 0x0a,
	0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01,
	0x12, 0x2c, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05,
	0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x5b,
	0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x6c, 0x65, 0x67, 0x61,
	0x6c, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x59, 0x0a, 0x17, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5e, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4c, 0x65, 0x67, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x43, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x52,
	0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x5c, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4c, 0x65, 0x67, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x22, 0x5b, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x65,
	0x67, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x2e, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x65, 0x67, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x59, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x67, 0x61, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e,
	0x6c, 0x65, 0x67, 0x61, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x67,
	0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x25, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x44, 0x22, 0x56, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x6c,
	0x65, 0x67, 0x61, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x67, 0x61,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x82, 0x01, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0x6f, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x6c, 0x65,
	0x67, 0x61, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x22, 0x57, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x05,
	0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x2e, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x5a, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x27, 0x0a, 0x15, 0x45, 0x78, 0x69, 0x73, 0x74, 0x4c,
	0x65, 0x67, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22,
	0x2c, 0x0a, 0x16, 0x45, 0x78, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5a, 0x0a,
	0x1a, 0x45, 0x78, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e,
	0x6c, 0x65, 0x67, 0x61, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x31, 0x0a, 0x1b, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x56, 0x0a, 0x16,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x6c, 0x65, 0x67, 0x61, 0x6c,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x22, 0x2d, 0x0a, 0x17, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x65, 0x67,
	0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x28, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x65, 0x67,
	0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x59, 0x0a,
	0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x6c, 0x65, 0x67, 0x61,
	0x6c, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0xe2, 0x0a, 0x0a, 0x07, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x12, 0x86, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c,
	0x65, 0x67, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x6c, 0x65,
	0x67, 0x61, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x38, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x89, 0x01,
	0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x38, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x67, 0x61, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x2e, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x86, 0x01, 0x0a, 0x0f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x2e,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x2e, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x6c, 0x65, 0x67, 0x61,
	0x6c, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c,
	0x65, 0x67, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x7d, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x34, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x6c, 0x65,
	0x67, 0x61, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65,
	0x67, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x89, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x38, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x6c, 0x65, 0x67, 0x61,
	0x6c, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x67, 0x61,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x39, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4f,
	0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x80, 0x01,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x35, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x6c, 0x65, 0x67, 0x61,
	0x6c, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x67, 0x61,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x83, 0x01, 0x0a, 0x0e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x36, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x67, 0x61, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x2e, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x92, 0x01, 0x0a, 0x13, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x4c, 0x65, 0x67, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x3b,
	0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x2e, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x2e, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x86, 0x01, 0x0a, 0x0f,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x37, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x6c, 0x65,
	0x67, 0x61, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x4c, 0x65, 0x67, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x86, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c,
	0x65, 0x67, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x6c, 0x65,
	0x67, 0x61, 0x6c, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x38, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4c, 0x65, 0x67, 0x61, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x44, 0x5a,
	0x42, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f,
	0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x6d, 0x67,
	0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x6c, 0x65, 0x67, 0x61, 0x6c, 0x74,
	0x79, 0x70, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_rawDescOnce sync.Once
	file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_rawDescData = file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_rawDesc
)

func file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_rawDescGZIP() []byte {
	file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_rawDescOnce.Do(func() {
		file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_rawDescData)
	})
	return file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_rawDescData
}

var file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_goTypes = []interface{}{
	(*LegalTypeReq)(nil),                // 0: chain.manager.coin.legaltype.v1.LegalTypeReq
	(*LegalType)(nil),                   // 1: chain.manager.coin.legaltype.v1.LegalType
	(*Conds)(nil),                       // 2: chain.manager.coin.legaltype.v1.Conds
	(*CreateLegalTypeRequest)(nil),      // 3: chain.manager.coin.legaltype.v1.CreateLegalTypeRequest
	(*CreateLegalTypeResponse)(nil),     // 4: chain.manager.coin.legaltype.v1.CreateLegalTypeResponse
	(*CreateLegalTypesRequest)(nil),     // 5: chain.manager.coin.legaltype.v1.CreateLegalTypesRequest
	(*CreateLegalTypesResponse)(nil),    // 6: chain.manager.coin.legaltype.v1.CreateLegalTypesResponse
	(*UpdateLegalTypeRequest)(nil),      // 7: chain.manager.coin.legaltype.v1.UpdateLegalTypeRequest
	(*UpdateLegalTypeResponse)(nil),     // 8: chain.manager.coin.legaltype.v1.UpdateLegalTypeResponse
	(*GetLegalTypeRequest)(nil),         // 9: chain.manager.coin.legaltype.v1.GetLegalTypeRequest
	(*GetLegalTypeResponse)(nil),        // 10: chain.manager.coin.legaltype.v1.GetLegalTypeResponse
	(*GetLegalTypesRequest)(nil),        // 11: chain.manager.coin.legaltype.v1.GetLegalTypesRequest
	(*GetLegalTypesResponse)(nil),       // 12: chain.manager.coin.legaltype.v1.GetLegalTypesResponse
	(*GetLegalTypeOnlyRequest)(nil),     // 13: chain.manager.coin.legaltype.v1.GetLegalTypeOnlyRequest
	(*GetLegalTypeOnlyResponse)(nil),    // 14: chain.manager.coin.legaltype.v1.GetLegalTypeOnlyResponse
	(*ExistLegalTypeRequest)(nil),       // 15: chain.manager.coin.legaltype.v1.ExistLegalTypeRequest
	(*ExistLegalTypeResponse)(nil),      // 16: chain.manager.coin.legaltype.v1.ExistLegalTypeResponse
	(*ExistLegalTypeCondsRequest)(nil),  // 17: chain.manager.coin.legaltype.v1.ExistLegalTypeCondsRequest
	(*ExistLegalTypeCondsResponse)(nil), // 18: chain.manager.coin.legaltype.v1.ExistLegalTypeCondsResponse
	(*CountLegalTypesRequest)(nil),      // 19: chain.manager.coin.legaltype.v1.CountLegalTypesRequest
	(*CountLegalTypesResponse)(nil),     // 20: chain.manager.coin.legaltype.v1.CountLegalTypesResponse
	(*DeleteLegalTypeRequest)(nil),      // 21: chain.manager.coin.legaltype.v1.DeleteLegalTypeRequest
	(*DeleteLegalTypeResponse)(nil),     // 22: chain.manager.coin.legaltype.v1.DeleteLegalTypeResponse
	(*npool.StringVal)(nil),             // 23: npool.v1.StringVal
}
var file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_depIdxs = []int32{
	23, // 0: chain.manager.coin.legaltype.v1.Conds.ID:type_name -> npool.v1.StringVal
	23, // 1: chain.manager.coin.legaltype.v1.Conds.Name:type_name -> npool.v1.StringVal
	0,  // 2: chain.manager.coin.legaltype.v1.CreateLegalTypeRequest.Info:type_name -> chain.manager.coin.legaltype.v1.LegalTypeReq
	1,  // 3: chain.manager.coin.legaltype.v1.CreateLegalTypeResponse.Info:type_name -> chain.manager.coin.legaltype.v1.LegalType
	0,  // 4: chain.manager.coin.legaltype.v1.CreateLegalTypesRequest.Infos:type_name -> chain.manager.coin.legaltype.v1.LegalTypeReq
	1,  // 5: chain.manager.coin.legaltype.v1.CreateLegalTypesResponse.Infos:type_name -> chain.manager.coin.legaltype.v1.LegalType
	0,  // 6: chain.manager.coin.legaltype.v1.UpdateLegalTypeRequest.Info:type_name -> chain.manager.coin.legaltype.v1.LegalTypeReq
	1,  // 7: chain.manager.coin.legaltype.v1.UpdateLegalTypeResponse.Info:type_name -> chain.manager.coin.legaltype.v1.LegalType
	1,  // 8: chain.manager.coin.legaltype.v1.GetLegalTypeResponse.Info:type_name -> chain.manager.coin.legaltype.v1.LegalType
	2,  // 9: chain.manager.coin.legaltype.v1.GetLegalTypesRequest.Conds:type_name -> chain.manager.coin.legaltype.v1.Conds
	1,  // 10: chain.manager.coin.legaltype.v1.GetLegalTypesResponse.Infos:type_name -> chain.manager.coin.legaltype.v1.LegalType
	2,  // 11: chain.manager.coin.legaltype.v1.GetLegalTypeOnlyRequest.Conds:type_name -> chain.manager.coin.legaltype.v1.Conds
	1,  // 12: chain.manager.coin.legaltype.v1.GetLegalTypeOnlyResponse.Info:type_name -> chain.manager.coin.legaltype.v1.LegalType
	2,  // 13: chain.manager.coin.legaltype.v1.ExistLegalTypeCondsRequest.Conds:type_name -> chain.manager.coin.legaltype.v1.Conds
	2,  // 14: chain.manager.coin.legaltype.v1.CountLegalTypesRequest.Conds:type_name -> chain.manager.coin.legaltype.v1.Conds
	1,  // 15: chain.manager.coin.legaltype.v1.DeleteLegalTypeResponse.Info:type_name -> chain.manager.coin.legaltype.v1.LegalType
	3,  // 16: chain.manager.coin.legaltype.v1.Manager.CreateLegalType:input_type -> chain.manager.coin.legaltype.v1.CreateLegalTypeRequest
	5,  // 17: chain.manager.coin.legaltype.v1.Manager.CreateLegalTypes:input_type -> chain.manager.coin.legaltype.v1.CreateLegalTypesRequest
	7,  // 18: chain.manager.coin.legaltype.v1.Manager.UpdateLegalType:input_type -> chain.manager.coin.legaltype.v1.UpdateLegalTypeRequest
	9,  // 19: chain.manager.coin.legaltype.v1.Manager.GetLegalType:input_type -> chain.manager.coin.legaltype.v1.GetLegalTypeRequest
	13, // 20: chain.manager.coin.legaltype.v1.Manager.GetLegalTypeOnly:input_type -> chain.manager.coin.legaltype.v1.GetLegalTypeOnlyRequest
	11, // 21: chain.manager.coin.legaltype.v1.Manager.GetLegalTypes:input_type -> chain.manager.coin.legaltype.v1.GetLegalTypesRequest
	15, // 22: chain.manager.coin.legaltype.v1.Manager.ExistLegalType:input_type -> chain.manager.coin.legaltype.v1.ExistLegalTypeRequest
	17, // 23: chain.manager.coin.legaltype.v1.Manager.ExistLegalTypeConds:input_type -> chain.manager.coin.legaltype.v1.ExistLegalTypeCondsRequest
	19, // 24: chain.manager.coin.legaltype.v1.Manager.CountLegalTypes:input_type -> chain.manager.coin.legaltype.v1.CountLegalTypesRequest
	21, // 25: chain.manager.coin.legaltype.v1.Manager.DeleteLegalType:input_type -> chain.manager.coin.legaltype.v1.DeleteLegalTypeRequest
	4,  // 26: chain.manager.coin.legaltype.v1.Manager.CreateLegalType:output_type -> chain.manager.coin.legaltype.v1.CreateLegalTypeResponse
	6,  // 27: chain.manager.coin.legaltype.v1.Manager.CreateLegalTypes:output_type -> chain.manager.coin.legaltype.v1.CreateLegalTypesResponse
	8,  // 28: chain.manager.coin.legaltype.v1.Manager.UpdateLegalType:output_type -> chain.manager.coin.legaltype.v1.UpdateLegalTypeResponse
	10, // 29: chain.manager.coin.legaltype.v1.Manager.GetLegalType:output_type -> chain.manager.coin.legaltype.v1.GetLegalTypeResponse
	14, // 30: chain.manager.coin.legaltype.v1.Manager.GetLegalTypeOnly:output_type -> chain.manager.coin.legaltype.v1.GetLegalTypeOnlyResponse
	12, // 31: chain.manager.coin.legaltype.v1.Manager.GetLegalTypes:output_type -> chain.manager.coin.legaltype.v1.GetLegalTypesResponse
	16, // 32: chain.manager.coin.legaltype.v1.Manager.ExistLegalType:output_type -> chain.manager.coin.legaltype.v1.ExistLegalTypeResponse
	18, // 33: chain.manager.coin.legaltype.v1.Manager.ExistLegalTypeConds:output_type -> chain.manager.coin.legaltype.v1.ExistLegalTypeCondsResponse
	20, // 34: chain.manager.coin.legaltype.v1.Manager.CountLegalTypes:output_type -> chain.manager.coin.legaltype.v1.CountLegalTypesResponse
	22, // 35: chain.manager.coin.legaltype.v1.Manager.DeleteLegalType:output_type -> chain.manager.coin.legaltype.v1.DeleteLegalTypeResponse
	26, // [26:36] is the sub-list for method output_type
	16, // [16:26] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_init() }
func file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_init() {
	if File_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LegalTypeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LegalType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLegalTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLegalTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLegalTypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateLegalTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLegalTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateLegalTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLegalTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLegalTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLegalTypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLegalTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLegalTypeOnlyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLegalTypeOnlyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistLegalTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistLegalTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistLegalTypeCondsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistLegalTypeCondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountLegalTypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountLegalTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLegalTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteLegalTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_goTypes,
		DependencyIndexes: file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_depIdxs,
		MessageInfos:      file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_msgTypes,
	}.Build()
	File_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto = out.File
	file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_rawDesc = nil
	file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_goTypes = nil
	file_npool_chain_mgr_v1_coin_faitcurrencytype_faitcurrencytype_proto_depIdxs = nil
}
