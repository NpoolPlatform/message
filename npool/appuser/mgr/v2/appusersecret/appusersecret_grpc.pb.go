// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/appuser/mgr/v2/appusersecret/appusersecret.proto

package appusersecret

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppUserManagerAppUserSecretClient is the client API for AppUserManagerAppUserSecret service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppUserManagerAppUserSecretClient interface {
	CreateAppUserSecretV2(ctx context.Context, in *CreateAppUserSecretRequest, opts ...grpc.CallOption) (*CreateAppUserSecretResponse, error)
	CreateAppUserSecretsV2(ctx context.Context, in *CreateAppUserSecretsRequest, opts ...grpc.CallOption) (*CreateAppUserSecretsResponse, error)
	UpdateAppUserSecretV2(ctx context.Context, in *UpdateAppUserSecretRequest, opts ...grpc.CallOption) (*UpdateAppUserSecretResponse, error)
	GetAppUserSecretV2(ctx context.Context, in *GetAppUserSecretRequest, opts ...grpc.CallOption) (*GetAppUserSecretResponse, error)
	GetAppUserSecretOnlyV2(ctx context.Context, in *GetAppUserSecretOnlyRequest, opts ...grpc.CallOption) (*GetAppUserSecretOnlyResponse, error)
	GetAppUserSecretsV2(ctx context.Context, in *GetAppUserSecretsRequest, opts ...grpc.CallOption) (*GetAppUserSecretsResponse, error)
	ExistAppUserSecretV2(ctx context.Context, in *ExistAppUserSecretRequest, opts ...grpc.CallOption) (*ExistAppUserSecretResponse, error)
	ExistAppUserSecretCondsV2(ctx context.Context, in *ExistAppUserSecretCondsRequest, opts ...grpc.CallOption) (*ExistAppUserSecretCondsResponse, error)
	CountAppUserSecretsV2(ctx context.Context, in *CountAppUserSecretsRequest, opts ...grpc.CallOption) (*CountAppUserSecretsResponse, error)
	DeleteAppUserSecretV2(ctx context.Context, in *DeleteAppUserSecretRequest, opts ...grpc.CallOption) (*DeleteAppUserSecretResponse, error)
}

type appUserManagerAppUserSecretClient struct {
	cc grpc.ClientConnInterface
}

func NewAppUserManagerAppUserSecretClient(cc grpc.ClientConnInterface) AppUserManagerAppUserSecretClient {
	return &appUserManagerAppUserSecretClient{cc}
}

func (c *appUserManagerAppUserSecretClient) CreateAppUserSecretV2(ctx context.Context, in *CreateAppUserSecretRequest, opts ...grpc.CallOption) (*CreateAppUserSecretResponse, error) {
	out := new(CreateAppUserSecretResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.appusersecret.v2.AppUserManagerAppUserSecret/CreateAppUserSecretV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppUserSecretClient) CreateAppUserSecretsV2(ctx context.Context, in *CreateAppUserSecretsRequest, opts ...grpc.CallOption) (*CreateAppUserSecretsResponse, error) {
	out := new(CreateAppUserSecretsResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.appusersecret.v2.AppUserManagerAppUserSecret/CreateAppUserSecretsV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppUserSecretClient) UpdateAppUserSecretV2(ctx context.Context, in *UpdateAppUserSecretRequest, opts ...grpc.CallOption) (*UpdateAppUserSecretResponse, error) {
	out := new(UpdateAppUserSecretResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.appusersecret.v2.AppUserManagerAppUserSecret/UpdateAppUserSecretV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppUserSecretClient) GetAppUserSecretV2(ctx context.Context, in *GetAppUserSecretRequest, opts ...grpc.CallOption) (*GetAppUserSecretResponse, error) {
	out := new(GetAppUserSecretResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.appusersecret.v2.AppUserManagerAppUserSecret/GetAppUserSecretV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppUserSecretClient) GetAppUserSecretOnlyV2(ctx context.Context, in *GetAppUserSecretOnlyRequest, opts ...grpc.CallOption) (*GetAppUserSecretOnlyResponse, error) {
	out := new(GetAppUserSecretOnlyResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.appusersecret.v2.AppUserManagerAppUserSecret/GetAppUserSecretOnlyV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppUserSecretClient) GetAppUserSecretsV2(ctx context.Context, in *GetAppUserSecretsRequest, opts ...grpc.CallOption) (*GetAppUserSecretsResponse, error) {
	out := new(GetAppUserSecretsResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.appusersecret.v2.AppUserManagerAppUserSecret/GetAppUserSecretsV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppUserSecretClient) ExistAppUserSecretV2(ctx context.Context, in *ExistAppUserSecretRequest, opts ...grpc.CallOption) (*ExistAppUserSecretResponse, error) {
	out := new(ExistAppUserSecretResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.appusersecret.v2.AppUserManagerAppUserSecret/ExistAppUserSecretV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppUserSecretClient) ExistAppUserSecretCondsV2(ctx context.Context, in *ExistAppUserSecretCondsRequest, opts ...grpc.CallOption) (*ExistAppUserSecretCondsResponse, error) {
	out := new(ExistAppUserSecretCondsResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.appusersecret.v2.AppUserManagerAppUserSecret/ExistAppUserSecretCondsV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppUserSecretClient) CountAppUserSecretsV2(ctx context.Context, in *CountAppUserSecretsRequest, opts ...grpc.CallOption) (*CountAppUserSecretsResponse, error) {
	out := new(CountAppUserSecretsResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.appusersecret.v2.AppUserManagerAppUserSecret/CountAppUserSecretsV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppUserSecretClient) DeleteAppUserSecretV2(ctx context.Context, in *DeleteAppUserSecretRequest, opts ...grpc.CallOption) (*DeleteAppUserSecretResponse, error) {
	out := new(DeleteAppUserSecretResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.appusersecret.v2.AppUserManagerAppUserSecret/DeleteAppUserSecretV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppUserManagerAppUserSecretServer is the server API for AppUserManagerAppUserSecret service.
// All implementations must embed UnimplementedAppUserManagerAppUserSecretServer
// for forward compatibility
type AppUserManagerAppUserSecretServer interface {
	CreateAppUserSecretV2(context.Context, *CreateAppUserSecretRequest) (*CreateAppUserSecretResponse, error)
	CreateAppUserSecretsV2(context.Context, *CreateAppUserSecretsRequest) (*CreateAppUserSecretsResponse, error)
	UpdateAppUserSecretV2(context.Context, *UpdateAppUserSecretRequest) (*UpdateAppUserSecretResponse, error)
	GetAppUserSecretV2(context.Context, *GetAppUserSecretRequest) (*GetAppUserSecretResponse, error)
	GetAppUserSecretOnlyV2(context.Context, *GetAppUserSecretOnlyRequest) (*GetAppUserSecretOnlyResponse, error)
	GetAppUserSecretsV2(context.Context, *GetAppUserSecretsRequest) (*GetAppUserSecretsResponse, error)
	ExistAppUserSecretV2(context.Context, *ExistAppUserSecretRequest) (*ExistAppUserSecretResponse, error)
	ExistAppUserSecretCondsV2(context.Context, *ExistAppUserSecretCondsRequest) (*ExistAppUserSecretCondsResponse, error)
	CountAppUserSecretsV2(context.Context, *CountAppUserSecretsRequest) (*CountAppUserSecretsResponse, error)
	DeleteAppUserSecretV2(context.Context, *DeleteAppUserSecretRequest) (*DeleteAppUserSecretResponse, error)
	mustEmbedUnimplementedAppUserManagerAppUserSecretServer()
}

// UnimplementedAppUserManagerAppUserSecretServer must be embedded to have forward compatible implementations.
type UnimplementedAppUserManagerAppUserSecretServer struct {
}

func (UnimplementedAppUserManagerAppUserSecretServer) CreateAppUserSecretV2(context.Context, *CreateAppUserSecretRequest) (*CreateAppUserSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppUserSecretV2 not implemented")
}
func (UnimplementedAppUserManagerAppUserSecretServer) CreateAppUserSecretsV2(context.Context, *CreateAppUserSecretsRequest) (*CreateAppUserSecretsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppUserSecretsV2 not implemented")
}
func (UnimplementedAppUserManagerAppUserSecretServer) UpdateAppUserSecretV2(context.Context, *UpdateAppUserSecretRequest) (*UpdateAppUserSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppUserSecretV2 not implemented")
}
func (UnimplementedAppUserManagerAppUserSecretServer) GetAppUserSecretV2(context.Context, *GetAppUserSecretRequest) (*GetAppUserSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppUserSecretV2 not implemented")
}
func (UnimplementedAppUserManagerAppUserSecretServer) GetAppUserSecretOnlyV2(context.Context, *GetAppUserSecretOnlyRequest) (*GetAppUserSecretOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppUserSecretOnlyV2 not implemented")
}
func (UnimplementedAppUserManagerAppUserSecretServer) GetAppUserSecretsV2(context.Context, *GetAppUserSecretsRequest) (*GetAppUserSecretsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppUserSecretsV2 not implemented")
}
func (UnimplementedAppUserManagerAppUserSecretServer) ExistAppUserSecretV2(context.Context, *ExistAppUserSecretRequest) (*ExistAppUserSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistAppUserSecretV2 not implemented")
}
func (UnimplementedAppUserManagerAppUserSecretServer) ExistAppUserSecretCondsV2(context.Context, *ExistAppUserSecretCondsRequest) (*ExistAppUserSecretCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistAppUserSecretCondsV2 not implemented")
}
func (UnimplementedAppUserManagerAppUserSecretServer) CountAppUserSecretsV2(context.Context, *CountAppUserSecretsRequest) (*CountAppUserSecretsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAppUserSecretsV2 not implemented")
}
func (UnimplementedAppUserManagerAppUserSecretServer) DeleteAppUserSecretV2(context.Context, *DeleteAppUserSecretRequest) (*DeleteAppUserSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppUserSecretV2 not implemented")
}
func (UnimplementedAppUserManagerAppUserSecretServer) mustEmbedUnimplementedAppUserManagerAppUserSecretServer() {
}

// UnsafeAppUserManagerAppUserSecretServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppUserManagerAppUserSecretServer will
// result in compilation errors.
type UnsafeAppUserManagerAppUserSecretServer interface {
	mustEmbedUnimplementedAppUserManagerAppUserSecretServer()
}

func RegisterAppUserManagerAppUserSecretServer(s grpc.ServiceRegistrar, srv AppUserManagerAppUserSecretServer) {
	s.RegisterService(&AppUserManagerAppUserSecret_ServiceDesc, srv)
}

func _AppUserManagerAppUserSecret_CreateAppUserSecretV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppUserSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppUserSecretServer).CreateAppUserSecretV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.appusersecret.v2.AppUserManagerAppUserSecret/CreateAppUserSecretV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppUserSecretServer).CreateAppUserSecretV2(ctx, req.(*CreateAppUserSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerAppUserSecret_CreateAppUserSecretsV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppUserSecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppUserSecretServer).CreateAppUserSecretsV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.appusersecret.v2.AppUserManagerAppUserSecret/CreateAppUserSecretsV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppUserSecretServer).CreateAppUserSecretsV2(ctx, req.(*CreateAppUserSecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerAppUserSecret_UpdateAppUserSecretV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppUserSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppUserSecretServer).UpdateAppUserSecretV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.appusersecret.v2.AppUserManagerAppUserSecret/UpdateAppUserSecretV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppUserSecretServer).UpdateAppUserSecretV2(ctx, req.(*UpdateAppUserSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerAppUserSecret_GetAppUserSecretV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppUserSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppUserSecretServer).GetAppUserSecretV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.appusersecret.v2.AppUserManagerAppUserSecret/GetAppUserSecretV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppUserSecretServer).GetAppUserSecretV2(ctx, req.(*GetAppUserSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerAppUserSecret_GetAppUserSecretOnlyV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppUserSecretOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppUserSecretServer).GetAppUserSecretOnlyV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.appusersecret.v2.AppUserManagerAppUserSecret/GetAppUserSecretOnlyV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppUserSecretServer).GetAppUserSecretOnlyV2(ctx, req.(*GetAppUserSecretOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerAppUserSecret_GetAppUserSecretsV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppUserSecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppUserSecretServer).GetAppUserSecretsV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.appusersecret.v2.AppUserManagerAppUserSecret/GetAppUserSecretsV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppUserSecretServer).GetAppUserSecretsV2(ctx, req.(*GetAppUserSecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerAppUserSecret_ExistAppUserSecretV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistAppUserSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppUserSecretServer).ExistAppUserSecretV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.appusersecret.v2.AppUserManagerAppUserSecret/ExistAppUserSecretV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppUserSecretServer).ExistAppUserSecretV2(ctx, req.(*ExistAppUserSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerAppUserSecret_ExistAppUserSecretCondsV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistAppUserSecretCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppUserSecretServer).ExistAppUserSecretCondsV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.appusersecret.v2.AppUserManagerAppUserSecret/ExistAppUserSecretCondsV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppUserSecretServer).ExistAppUserSecretCondsV2(ctx, req.(*ExistAppUserSecretCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerAppUserSecret_CountAppUserSecretsV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAppUserSecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppUserSecretServer).CountAppUserSecretsV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.appusersecret.v2.AppUserManagerAppUserSecret/CountAppUserSecretsV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppUserSecretServer).CountAppUserSecretsV2(ctx, req.(*CountAppUserSecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerAppUserSecret_DeleteAppUserSecretV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppUserSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppUserSecretServer).DeleteAppUserSecretV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.appusersecret.v2.AppUserManagerAppUserSecret/DeleteAppUserSecretV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppUserSecretServer).DeleteAppUserSecretV2(ctx, req.(*DeleteAppUserSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppUserManagerAppUserSecret_ServiceDesc is the grpc.ServiceDesc for AppUserManagerAppUserSecret service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppUserManagerAppUserSecret_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app.user.manager.appusersecret.v2.AppUserManagerAppUserSecret",
	HandlerType: (*AppUserManagerAppUserSecretServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAppUserSecretV2",
			Handler:    _AppUserManagerAppUserSecret_CreateAppUserSecretV2_Handler,
		},
		{
			MethodName: "CreateAppUserSecretsV2",
			Handler:    _AppUserManagerAppUserSecret_CreateAppUserSecretsV2_Handler,
		},
		{
			MethodName: "UpdateAppUserSecretV2",
			Handler:    _AppUserManagerAppUserSecret_UpdateAppUserSecretV2_Handler,
		},
		{
			MethodName: "GetAppUserSecretV2",
			Handler:    _AppUserManagerAppUserSecret_GetAppUserSecretV2_Handler,
		},
		{
			MethodName: "GetAppUserSecretOnlyV2",
			Handler:    _AppUserManagerAppUserSecret_GetAppUserSecretOnlyV2_Handler,
		},
		{
			MethodName: "GetAppUserSecretsV2",
			Handler:    _AppUserManagerAppUserSecret_GetAppUserSecretsV2_Handler,
		},
		{
			MethodName: "ExistAppUserSecretV2",
			Handler:    _AppUserManagerAppUserSecret_ExistAppUserSecretV2_Handler,
		},
		{
			MethodName: "ExistAppUserSecretCondsV2",
			Handler:    _AppUserManagerAppUserSecret_ExistAppUserSecretCondsV2_Handler,
		},
		{
			MethodName: "CountAppUserSecretsV2",
			Handler:    _AppUserManagerAppUserSecret_CountAppUserSecretsV2_Handler,
		},
		{
			MethodName: "DeleteAppUserSecretV2",
			Handler:    _AppUserManagerAppUserSecret_DeleteAppUserSecretV2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/appuser/mgr/v2/appusersecret/appusersecret.proto",
}
