// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/appuser/mgr/v2/appuserextra/appuserextra.proto

package appuserextra

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateAppUserExtra(ctx context.Context, in *CreateAppUserExtraRequest, opts ...grpc.CallOption) (*CreateAppUserExtraResponse, error)
	CreateAppUserExtras(ctx context.Context, in *CreateAppUserExtrasRequest, opts ...grpc.CallOption) (*CreateAppUserExtrasResponse, error)
	UpdateAppUserExtra(ctx context.Context, in *UpdateAppUserExtraRequest, opts ...grpc.CallOption) (*UpdateAppUserExtraResponse, error)
	GetAppUserExtra(ctx context.Context, in *GetAppUserExtraRequest, opts ...grpc.CallOption) (*GetAppUserExtraResponse, error)
	GetAppUserExtraOnly(ctx context.Context, in *GetAppUserExtraOnlyRequest, opts ...grpc.CallOption) (*GetAppUserExtraOnlyResponse, error)
	GetAppUserExtras(ctx context.Context, in *GetAppUserExtrasRequest, opts ...grpc.CallOption) (*GetAppUserExtrasResponse, error)
	ExistAppUserExtra(ctx context.Context, in *ExistAppUserExtraRequest, opts ...grpc.CallOption) (*ExistAppUserExtraResponse, error)
	ExistAppUserExtraConds(ctx context.Context, in *ExistAppUserExtraCondsRequest, opts ...grpc.CallOption) (*ExistAppUserExtraCondsResponse, error)
	CountAppUserExtras(ctx context.Context, in *CountAppUserExtrasRequest, opts ...grpc.CallOption) (*CountAppUserExtrasResponse, error)
	DeleteAppUserExtra(ctx context.Context, in *DeleteAppUserExtraRequest, opts ...grpc.CallOption) (*DeleteAppUserExtraResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateAppUserExtra(ctx context.Context, in *CreateAppUserExtraRequest, opts ...grpc.CallOption) (*CreateAppUserExtraResponse, error) {
	out := new(CreateAppUserExtraResponse)
	err := c.cc.Invoke(ctx, "/appuser.manager.appuserextra.v2.Manager/CreateAppUserExtra", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateAppUserExtras(ctx context.Context, in *CreateAppUserExtrasRequest, opts ...grpc.CallOption) (*CreateAppUserExtrasResponse, error) {
	out := new(CreateAppUserExtrasResponse)
	err := c.cc.Invoke(ctx, "/appuser.manager.appuserextra.v2.Manager/CreateAppUserExtras", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateAppUserExtra(ctx context.Context, in *UpdateAppUserExtraRequest, opts ...grpc.CallOption) (*UpdateAppUserExtraResponse, error) {
	out := new(UpdateAppUserExtraResponse)
	err := c.cc.Invoke(ctx, "/appuser.manager.appuserextra.v2.Manager/UpdateAppUserExtra", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetAppUserExtra(ctx context.Context, in *GetAppUserExtraRequest, opts ...grpc.CallOption) (*GetAppUserExtraResponse, error) {
	out := new(GetAppUserExtraResponse)
	err := c.cc.Invoke(ctx, "/appuser.manager.appuserextra.v2.Manager/GetAppUserExtra", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetAppUserExtraOnly(ctx context.Context, in *GetAppUserExtraOnlyRequest, opts ...grpc.CallOption) (*GetAppUserExtraOnlyResponse, error) {
	out := new(GetAppUserExtraOnlyResponse)
	err := c.cc.Invoke(ctx, "/appuser.manager.appuserextra.v2.Manager/GetAppUserExtraOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetAppUserExtras(ctx context.Context, in *GetAppUserExtrasRequest, opts ...grpc.CallOption) (*GetAppUserExtrasResponse, error) {
	out := new(GetAppUserExtrasResponse)
	err := c.cc.Invoke(ctx, "/appuser.manager.appuserextra.v2.Manager/GetAppUserExtras", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistAppUserExtra(ctx context.Context, in *ExistAppUserExtraRequest, opts ...grpc.CallOption) (*ExistAppUserExtraResponse, error) {
	out := new(ExistAppUserExtraResponse)
	err := c.cc.Invoke(ctx, "/appuser.manager.appuserextra.v2.Manager/ExistAppUserExtra", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistAppUserExtraConds(ctx context.Context, in *ExistAppUserExtraCondsRequest, opts ...grpc.CallOption) (*ExistAppUserExtraCondsResponse, error) {
	out := new(ExistAppUserExtraCondsResponse)
	err := c.cc.Invoke(ctx, "/appuser.manager.appuserextra.v2.Manager/ExistAppUserExtraConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountAppUserExtras(ctx context.Context, in *CountAppUserExtrasRequest, opts ...grpc.CallOption) (*CountAppUserExtrasResponse, error) {
	out := new(CountAppUserExtrasResponse)
	err := c.cc.Invoke(ctx, "/appuser.manager.appuserextra.v2.Manager/CountAppUserExtras", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteAppUserExtra(ctx context.Context, in *DeleteAppUserExtraRequest, opts ...grpc.CallOption) (*DeleteAppUserExtraResponse, error) {
	out := new(DeleteAppUserExtraResponse)
	err := c.cc.Invoke(ctx, "/appuser.manager.appuserextra.v2.Manager/DeleteAppUserExtra", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateAppUserExtra(context.Context, *CreateAppUserExtraRequest) (*CreateAppUserExtraResponse, error)
	CreateAppUserExtras(context.Context, *CreateAppUserExtrasRequest) (*CreateAppUserExtrasResponse, error)
	UpdateAppUserExtra(context.Context, *UpdateAppUserExtraRequest) (*UpdateAppUserExtraResponse, error)
	GetAppUserExtra(context.Context, *GetAppUserExtraRequest) (*GetAppUserExtraResponse, error)
	GetAppUserExtraOnly(context.Context, *GetAppUserExtraOnlyRequest) (*GetAppUserExtraOnlyResponse, error)
	GetAppUserExtras(context.Context, *GetAppUserExtrasRequest) (*GetAppUserExtrasResponse, error)
	ExistAppUserExtra(context.Context, *ExistAppUserExtraRequest) (*ExistAppUserExtraResponse, error)
	ExistAppUserExtraConds(context.Context, *ExistAppUserExtraCondsRequest) (*ExistAppUserExtraCondsResponse, error)
	CountAppUserExtras(context.Context, *CountAppUserExtrasRequest) (*CountAppUserExtrasResponse, error)
	DeleteAppUserExtra(context.Context, *DeleteAppUserExtraRequest) (*DeleteAppUserExtraResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateAppUserExtra(context.Context, *CreateAppUserExtraRequest) (*CreateAppUserExtraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppUserExtra not implemented")
}
func (UnimplementedManagerServer) CreateAppUserExtras(context.Context, *CreateAppUserExtrasRequest) (*CreateAppUserExtrasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppUserExtras not implemented")
}
func (UnimplementedManagerServer) UpdateAppUserExtra(context.Context, *UpdateAppUserExtraRequest) (*UpdateAppUserExtraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppUserExtra not implemented")
}
func (UnimplementedManagerServer) GetAppUserExtra(context.Context, *GetAppUserExtraRequest) (*GetAppUserExtraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppUserExtra not implemented")
}
func (UnimplementedManagerServer) GetAppUserExtraOnly(context.Context, *GetAppUserExtraOnlyRequest) (*GetAppUserExtraOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppUserExtraOnly not implemented")
}
func (UnimplementedManagerServer) GetAppUserExtras(context.Context, *GetAppUserExtrasRequest) (*GetAppUserExtrasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppUserExtras not implemented")
}
func (UnimplementedManagerServer) ExistAppUserExtra(context.Context, *ExistAppUserExtraRequest) (*ExistAppUserExtraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistAppUserExtra not implemented")
}
func (UnimplementedManagerServer) ExistAppUserExtraConds(context.Context, *ExistAppUserExtraCondsRequest) (*ExistAppUserExtraCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistAppUserExtraConds not implemented")
}
func (UnimplementedManagerServer) CountAppUserExtras(context.Context, *CountAppUserExtrasRequest) (*CountAppUserExtrasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAppUserExtras not implemented")
}
func (UnimplementedManagerServer) DeleteAppUserExtra(context.Context, *DeleteAppUserExtraRequest) (*DeleteAppUserExtraResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppUserExtra not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateAppUserExtra_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppUserExtraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateAppUserExtra(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.manager.appuserextra.v2.Manager/CreateAppUserExtra",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateAppUserExtra(ctx, req.(*CreateAppUserExtraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateAppUserExtras_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppUserExtrasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateAppUserExtras(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.manager.appuserextra.v2.Manager/CreateAppUserExtras",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateAppUserExtras(ctx, req.(*CreateAppUserExtrasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateAppUserExtra_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppUserExtraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateAppUserExtra(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.manager.appuserextra.v2.Manager/UpdateAppUserExtra",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateAppUserExtra(ctx, req.(*UpdateAppUserExtraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetAppUserExtra_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppUserExtraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetAppUserExtra(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.manager.appuserextra.v2.Manager/GetAppUserExtra",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetAppUserExtra(ctx, req.(*GetAppUserExtraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetAppUserExtraOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppUserExtraOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetAppUserExtraOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.manager.appuserextra.v2.Manager/GetAppUserExtraOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetAppUserExtraOnly(ctx, req.(*GetAppUserExtraOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetAppUserExtras_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppUserExtrasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetAppUserExtras(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.manager.appuserextra.v2.Manager/GetAppUserExtras",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetAppUserExtras(ctx, req.(*GetAppUserExtrasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistAppUserExtra_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistAppUserExtraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistAppUserExtra(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.manager.appuserextra.v2.Manager/ExistAppUserExtra",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistAppUserExtra(ctx, req.(*ExistAppUserExtraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistAppUserExtraConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistAppUserExtraCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistAppUserExtraConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.manager.appuserextra.v2.Manager/ExistAppUserExtraConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistAppUserExtraConds(ctx, req.(*ExistAppUserExtraCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountAppUserExtras_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAppUserExtrasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountAppUserExtras(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.manager.appuserextra.v2.Manager/CountAppUserExtras",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountAppUserExtras(ctx, req.(*CountAppUserExtrasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteAppUserExtra_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppUserExtraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteAppUserExtra(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.manager.appuserextra.v2.Manager/DeleteAppUserExtra",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteAppUserExtra(ctx, req.(*DeleteAppUserExtraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "appuser.manager.appuserextra.v2.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAppUserExtra",
			Handler:    _Manager_CreateAppUserExtra_Handler,
		},
		{
			MethodName: "CreateAppUserExtras",
			Handler:    _Manager_CreateAppUserExtras_Handler,
		},
		{
			MethodName: "UpdateAppUserExtra",
			Handler:    _Manager_UpdateAppUserExtra_Handler,
		},
		{
			MethodName: "GetAppUserExtra",
			Handler:    _Manager_GetAppUserExtra_Handler,
		},
		{
			MethodName: "GetAppUserExtraOnly",
			Handler:    _Manager_GetAppUserExtraOnly_Handler,
		},
		{
			MethodName: "GetAppUserExtras",
			Handler:    _Manager_GetAppUserExtras_Handler,
		},
		{
			MethodName: "ExistAppUserExtra",
			Handler:    _Manager_ExistAppUserExtra_Handler,
		},
		{
			MethodName: "ExistAppUserExtraConds",
			Handler:    _Manager_ExistAppUserExtraConds_Handler,
		},
		{
			MethodName: "CountAppUserExtras",
			Handler:    _Manager_CountAppUserExtras_Handler,
		},
		{
			MethodName: "DeleteAppUserExtra",
			Handler:    _Manager_DeleteAppUserExtra_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/appuser/mgr/v2/appuserextra/appuserextra.proto",
}
