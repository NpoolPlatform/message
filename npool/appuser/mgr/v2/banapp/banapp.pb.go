// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.18.1
// source: npool/appuser/mgr/v2/banapp/banapp.proto

package banapp

import (
	npool "github.com/NpoolPlatform/message/npool"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BanAppReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      *string `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	AppID   *string `protobuf:"bytes,20,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	Message *string `protobuf:"bytes,30,opt,name=Message,proto3,oneof" json:"Message,omitempty"`
}

func (x *BanAppReq) Reset() {
	*x = BanAppReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BanAppReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BanAppReq) ProtoMessage() {}

func (x *BanAppReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BanAppReq.ProtoReflect.Descriptor instead.
func (*BanAppReq) Descriptor() ([]byte, []int) {
	return file_npool_appuser_mgr_v2_banapp_banapp_proto_rawDescGZIP(), []int{0}
}

func (x *BanAppReq) GetID() string {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return ""
}

func (x *BanAppReq) GetAppID() string {
	if x != nil && x.AppID != nil {
		return *x.AppID
	}
	return ""
}

func (x *BanAppReq) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type BanApp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID   string `protobuf:"bytes,20,opt,name=AppID,proto3" json:"AppID,omitempty"`
	Message string `protobuf:"bytes,30,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *BanApp) Reset() {
	*x = BanApp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BanApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BanApp) ProtoMessage() {}

func (x *BanApp) ProtoReflect() protoreflect.Message {
	mi := &file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BanApp.ProtoReflect.Descriptor instead.
func (*BanApp) Descriptor() ([]byte, []int) {
	return file_npool_appuser_mgr_v2_banapp_banapp_proto_rawDescGZIP(), []int{1}
}

func (x *BanApp) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *BanApp) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *BanApp) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      *npool.StringVal `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID   *npool.StringVal `protobuf:"bytes,20,opt,name=AppID,proto3" json:"AppID,omitempty"`
	Message *npool.StringVal `protobuf:"bytes,30,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_appuser_mgr_v2_banapp_banapp_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *npool.StringVal {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetAppID() *npool.StringVal {
	if x != nil {
		return x.AppID
	}
	return nil
}

func (x *Conds) GetMessage() *npool.StringVal {
	if x != nil {
		return x.Message
	}
	return nil
}

type CreateBanAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *BanAppReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateBanAppRequest) Reset() {
	*x = CreateBanAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBanAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBanAppRequest) ProtoMessage() {}

func (x *CreateBanAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBanAppRequest.ProtoReflect.Descriptor instead.
func (*CreateBanAppRequest) Descriptor() ([]byte, []int) {
	return file_npool_appuser_mgr_v2_banapp_banapp_proto_rawDescGZIP(), []int{3}
}

func (x *CreateBanAppRequest) GetInfo() *BanAppReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateBanAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *BanApp `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateBanAppResponse) Reset() {
	*x = CreateBanAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBanAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBanAppResponse) ProtoMessage() {}

func (x *CreateBanAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBanAppResponse.ProtoReflect.Descriptor instead.
func (*CreateBanAppResponse) Descriptor() ([]byte, []int) {
	return file_npool_appuser_mgr_v2_banapp_banapp_proto_rawDescGZIP(), []int{4}
}

func (x *CreateBanAppResponse) GetInfo() *BanApp {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateBanAppsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*BanAppReq `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateBanAppsRequest) Reset() {
	*x = CreateBanAppsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBanAppsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBanAppsRequest) ProtoMessage() {}

func (x *CreateBanAppsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBanAppsRequest.ProtoReflect.Descriptor instead.
func (*CreateBanAppsRequest) Descriptor() ([]byte, []int) {
	return file_npool_appuser_mgr_v2_banapp_banapp_proto_rawDescGZIP(), []int{5}
}

func (x *CreateBanAppsRequest) GetInfos() []*BanAppReq {
	if x != nil {
		return x.Infos
	}
	return nil
}

type CreateBanAppsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*BanApp `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateBanAppsResponse) Reset() {
	*x = CreateBanAppsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBanAppsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBanAppsResponse) ProtoMessage() {}

func (x *CreateBanAppsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBanAppsResponse.ProtoReflect.Descriptor instead.
func (*CreateBanAppsResponse) Descriptor() ([]byte, []int) {
	return file_npool_appuser_mgr_v2_banapp_banapp_proto_rawDescGZIP(), []int{6}
}

func (x *CreateBanAppsResponse) GetInfos() []*BanApp {
	if x != nil {
		return x.Infos
	}
	return nil
}

type GetBanAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetBanAppRequest) Reset() {
	*x = GetBanAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBanAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBanAppRequest) ProtoMessage() {}

func (x *GetBanAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBanAppRequest.ProtoReflect.Descriptor instead.
func (*GetBanAppRequest) Descriptor() ([]byte, []int) {
	return file_npool_appuser_mgr_v2_banapp_banapp_proto_rawDescGZIP(), []int{7}
}

func (x *GetBanAppRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetBanAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *BanApp `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetBanAppResponse) Reset() {
	*x = GetBanAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBanAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBanAppResponse) ProtoMessage() {}

func (x *GetBanAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBanAppResponse.ProtoReflect.Descriptor instead.
func (*GetBanAppResponse) Descriptor() ([]byte, []int) {
	return file_npool_appuser_mgr_v2_banapp_banapp_proto_rawDescGZIP(), []int{8}
}

func (x *GetBanAppResponse) GetInfo() *BanApp {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetBanAppsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetBanAppsRequest) Reset() {
	*x = GetBanAppsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBanAppsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBanAppsRequest) ProtoMessage() {}

func (x *GetBanAppsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBanAppsRequest.ProtoReflect.Descriptor instead.
func (*GetBanAppsRequest) Descriptor() ([]byte, []int) {
	return file_npool_appuser_mgr_v2_banapp_banapp_proto_rawDescGZIP(), []int{9}
}

func (x *GetBanAppsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetBanAppsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetBanAppsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetBanAppsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*BanApp `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32    `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetBanAppsResponse) Reset() {
	*x = GetBanAppsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBanAppsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBanAppsResponse) ProtoMessage() {}

func (x *GetBanAppsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBanAppsResponse.ProtoReflect.Descriptor instead.
func (*GetBanAppsResponse) Descriptor() ([]byte, []int) {
	return file_npool_appuser_mgr_v2_banapp_banapp_proto_rawDescGZIP(), []int{10}
}

func (x *GetBanAppsResponse) GetInfos() []*BanApp {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetBanAppsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetBanAppOnlyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *GetBanAppOnlyRequest) Reset() {
	*x = GetBanAppOnlyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBanAppOnlyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBanAppOnlyRequest) ProtoMessage() {}

func (x *GetBanAppOnlyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBanAppOnlyRequest.ProtoReflect.Descriptor instead.
func (*GetBanAppOnlyRequest) Descriptor() ([]byte, []int) {
	return file_npool_appuser_mgr_v2_banapp_banapp_proto_rawDescGZIP(), []int{11}
}

func (x *GetBanAppOnlyRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type GetBanAppOnlyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *BanApp `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetBanAppOnlyResponse) Reset() {
	*x = GetBanAppOnlyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBanAppOnlyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBanAppOnlyResponse) ProtoMessage() {}

func (x *GetBanAppOnlyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBanAppOnlyResponse.ProtoReflect.Descriptor instead.
func (*GetBanAppOnlyResponse) Descriptor() ([]byte, []int) {
	return file_npool_appuser_mgr_v2_banapp_banapp_proto_rawDescGZIP(), []int{12}
}

func (x *GetBanAppOnlyResponse) GetInfo() *BanApp {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateBanAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *BanAppReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateBanAppRequest) Reset() {
	*x = UpdateBanAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBanAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBanAppRequest) ProtoMessage() {}

func (x *UpdateBanAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBanAppRequest.ProtoReflect.Descriptor instead.
func (*UpdateBanAppRequest) Descriptor() ([]byte, []int) {
	return file_npool_appuser_mgr_v2_banapp_banapp_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateBanAppRequest) GetInfo() *BanAppReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateBanAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *BanApp `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateBanAppResponse) Reset() {
	*x = UpdateBanAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBanAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBanAppResponse) ProtoMessage() {}

func (x *UpdateBanAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBanAppResponse.ProtoReflect.Descriptor instead.
func (*UpdateBanAppResponse) Descriptor() ([]byte, []int) {
	return file_npool_appuser_mgr_v2_banapp_banapp_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateBanAppResponse) GetInfo() *BanApp {
	if x != nil {
		return x.Info
	}
	return nil
}

type ExistBanAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ExistBanAppRequest) Reset() {
	*x = ExistBanAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistBanAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistBanAppRequest) ProtoMessage() {}

func (x *ExistBanAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistBanAppRequest.ProtoReflect.Descriptor instead.
func (*ExistBanAppRequest) Descriptor() ([]byte, []int) {
	return file_npool_appuser_mgr_v2_banapp_banapp_proto_rawDescGZIP(), []int{15}
}

func (x *ExistBanAppRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ExistBanAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistBanAppResponse) Reset() {
	*x = ExistBanAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistBanAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistBanAppResponse) ProtoMessage() {}

func (x *ExistBanAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistBanAppResponse.ProtoReflect.Descriptor instead.
func (*ExistBanAppResponse) Descriptor() ([]byte, []int) {
	return file_npool_appuser_mgr_v2_banapp_banapp_proto_rawDescGZIP(), []int{16}
}

func (x *ExistBanAppResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type ExistBanAppCondsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *ExistBanAppCondsRequest) Reset() {
	*x = ExistBanAppCondsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistBanAppCondsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistBanAppCondsRequest) ProtoMessage() {}

func (x *ExistBanAppCondsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistBanAppCondsRequest.ProtoReflect.Descriptor instead.
func (*ExistBanAppCondsRequest) Descriptor() ([]byte, []int) {
	return file_npool_appuser_mgr_v2_banapp_banapp_proto_rawDescGZIP(), []int{17}
}

func (x *ExistBanAppCondsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type ExistBanAppCondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistBanAppCondsResponse) Reset() {
	*x = ExistBanAppCondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistBanAppCondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistBanAppCondsResponse) ProtoMessage() {}

func (x *ExistBanAppCondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistBanAppCondsResponse.ProtoReflect.Descriptor instead.
func (*ExistBanAppCondsResponse) Descriptor() ([]byte, []int) {
	return file_npool_appuser_mgr_v2_banapp_banapp_proto_rawDescGZIP(), []int{18}
}

func (x *ExistBanAppCondsResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type CountBanAppsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *CountBanAppsRequest) Reset() {
	*x = CountBanAppsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountBanAppsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountBanAppsRequest) ProtoMessage() {}

func (x *CountBanAppsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountBanAppsRequest.ProtoReflect.Descriptor instead.
func (*CountBanAppsRequest) Descriptor() ([]byte, []int) {
	return file_npool_appuser_mgr_v2_banapp_banapp_proto_rawDescGZIP(), []int{19}
}

func (x *CountBanAppsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type CountBanAppsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info uint32 `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CountBanAppsResponse) Reset() {
	*x = CountBanAppsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountBanAppsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountBanAppsResponse) ProtoMessage() {}

func (x *CountBanAppsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountBanAppsResponse.ProtoReflect.Descriptor instead.
func (*CountBanAppsResponse) Descriptor() ([]byte, []int) {
	return file_npool_appuser_mgr_v2_banapp_banapp_proto_rawDescGZIP(), []int{20}
}

func (x *CountBanAppsResponse) GetInfo() uint32 {
	if x != nil {
		return x.Info
	}
	return 0
}

type DeleteBanAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *DeleteBanAppRequest) Reset() {
	*x = DeleteBanAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBanAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBanAppRequest) ProtoMessage() {}

func (x *DeleteBanAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBanAppRequest.ProtoReflect.Descriptor instead.
func (*DeleteBanAppRequest) Descriptor() ([]byte, []int) {
	return file_npool_appuser_mgr_v2_banapp_banapp_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteBanAppRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type DeleteBanAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *BanApp `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteBanAppResponse) Reset() {
	*x = DeleteBanAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBanAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBanAppResponse) ProtoMessage() {}

func (x *DeleteBanAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBanAppResponse.ProtoReflect.Descriptor instead.
func (*DeleteBanAppResponse) Descriptor() ([]byte, []int) {
	return file_npool_appuser_mgr_v2_banapp_banapp_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteBanAppResponse) GetInfo() *BanApp {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_appuser_mgr_v2_banapp_banapp_proto protoreflect.FileDescriptor

var file_npool_appuser_mgr_v2_banapp_banapp_proto_rawDesc = []byte{
	0x0a, 0x28, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2f,
	0x6d, 0x67, 0x72, 0x2f, 0x76, 0x32, 0x2f, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x2f, 0x62, 0x61,
	0x6e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x61, 0x70, 0x70, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61,
	0x70, 0x70, 0x2e, 0x76, 0x32, 0x1a, 0x11, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6e, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x77, 0x0a, 0x09, 0x42, 0x61, 0x6e, 0x41,
	0x70, 0x70, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x48, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x05,
	0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x52, 0x02, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x05, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x52, 0x05,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x2d, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x52, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x4f, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61,
	0x6e, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x70, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61,
	0x70, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4d, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x61, 0x6e, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70,
	0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x61,
	0x6e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x52, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61,
	0x6e, 0x41, 0x70, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x05,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70,
	0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x61,
	0x6e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x52, 0x65,
	0x71, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x50, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x37, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x6e,
	0x41, 0x70, 0x70, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x22, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x4a,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61,
	0x6e, 0x41, 0x70, 0x70, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x79, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x36, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x63, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x41,
	0x70, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x70,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e,
	0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x52, 0x05, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x4e, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x4e, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61,
	0x6e, 0x41, 0x70, 0x70, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4f, 0x0a, 0x13, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x38, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x6e, 0x41,
	0x70, 0x70, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4d, 0x0a, 0x14, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61,
	0x6e, 0x41, 0x70, 0x70, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x24, 0x0a, 0x12, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x22, 0x29, 0x0a, 0x13, 0x45, 0x78, 0x69, 0x73, 0x74, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x51, 0x0a, 0x17, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x2e, 0x76,
	0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x2e,
	0x0a, 0x18, 0x45, 0x78, 0x69, 0x73, 0x74, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4d,
	0x0a, 0x13, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x2a, 0x0a,
	0x14, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x25, 0x0a, 0x13, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x22, 0x4d, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x2e,
	0x76, 0x32, 0x2e, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x32,
	0x87, 0x09, 0x0a, 0x07, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x71, 0x0a, 0x0c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x12, 0x2e, 0x2e, 0x61, 0x70,
	0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x61,
	0x6e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61,
	0x6e, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x70,
	0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x61,
	0x6e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61,
	0x6e, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x74,
	0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x73, 0x12,
	0x2f, 0x2e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x30, 0x2e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61,
	0x6e, 0x41, 0x70, 0x70, 0x12, 0x2e, 0x2e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x42, 0x61,
	0x6e, 0x41, 0x70, 0x70, 0x12, 0x2b, 0x2e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65,
	0x74, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x74, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x4f, 0x6e,
	0x6c, 0x79, 0x12, 0x2f, 0x2e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x47,
	0x65, 0x74, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x42, 0x61,
	0x6e, 0x41, 0x70, 0x70, 0x73, 0x12, 0x2c, 0x2e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x2e, 0x76,
	0x32, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x0b, 0x45, 0x78, 0x69, 0x73, 0x74, 0x42, 0x61, 0x6e,
	0x41, 0x70, 0x70, 0x12, 0x2d, 0x2e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x2e,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x7d, 0x0a, 0x10, 0x45, 0x78, 0x69, 0x73, 0x74, 0x42, 0x61, 0x6e,
	0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x32, 0x2e, 0x61, 0x70, 0x70, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70,
	0x70, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70,
	0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x61,
	0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x62,
	0x61, 0x6e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x42, 0x61,
	0x6e, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x0c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x41,
	0x70, 0x70, 0x73, 0x12, 0x2e, 0x2e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x2e, 0x76, 0x32, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x12, 0x2e, 0x2e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x2e,
	0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x2e,
	0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70,
	0x6f, 0x6f, 0x6c, 0x2f, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x6d, 0x67, 0x72, 0x2f,
	0x76, 0x32, 0x2f, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_npool_appuser_mgr_v2_banapp_banapp_proto_rawDescOnce sync.Once
	file_npool_appuser_mgr_v2_banapp_banapp_proto_rawDescData = file_npool_appuser_mgr_v2_banapp_banapp_proto_rawDesc
)

func file_npool_appuser_mgr_v2_banapp_banapp_proto_rawDescGZIP() []byte {
	file_npool_appuser_mgr_v2_banapp_banapp_proto_rawDescOnce.Do(func() {
		file_npool_appuser_mgr_v2_banapp_banapp_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_appuser_mgr_v2_banapp_banapp_proto_rawDescData)
	})
	return file_npool_appuser_mgr_v2_banapp_banapp_proto_rawDescData
}

var file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_npool_appuser_mgr_v2_banapp_banapp_proto_goTypes = []interface{}{
	(*BanAppReq)(nil),                // 0: appuser.manager.banapp.v2.BanAppReq
	(*BanApp)(nil),                   // 1: appuser.manager.banapp.v2.BanApp
	(*Conds)(nil),                    // 2: appuser.manager.banapp.v2.Conds
	(*CreateBanAppRequest)(nil),      // 3: appuser.manager.banapp.v2.CreateBanAppRequest
	(*CreateBanAppResponse)(nil),     // 4: appuser.manager.banapp.v2.CreateBanAppResponse
	(*CreateBanAppsRequest)(nil),     // 5: appuser.manager.banapp.v2.CreateBanAppsRequest
	(*CreateBanAppsResponse)(nil),    // 6: appuser.manager.banapp.v2.CreateBanAppsResponse
	(*GetBanAppRequest)(nil),         // 7: appuser.manager.banapp.v2.GetBanAppRequest
	(*GetBanAppResponse)(nil),        // 8: appuser.manager.banapp.v2.GetBanAppResponse
	(*GetBanAppsRequest)(nil),        // 9: appuser.manager.banapp.v2.GetBanAppsRequest
	(*GetBanAppsResponse)(nil),       // 10: appuser.manager.banapp.v2.GetBanAppsResponse
	(*GetBanAppOnlyRequest)(nil),     // 11: appuser.manager.banapp.v2.GetBanAppOnlyRequest
	(*GetBanAppOnlyResponse)(nil),    // 12: appuser.manager.banapp.v2.GetBanAppOnlyResponse
	(*UpdateBanAppRequest)(nil),      // 13: appuser.manager.banapp.v2.UpdateBanAppRequest
	(*UpdateBanAppResponse)(nil),     // 14: appuser.manager.banapp.v2.UpdateBanAppResponse
	(*ExistBanAppRequest)(nil),       // 15: appuser.manager.banapp.v2.ExistBanAppRequest
	(*ExistBanAppResponse)(nil),      // 16: appuser.manager.banapp.v2.ExistBanAppResponse
	(*ExistBanAppCondsRequest)(nil),  // 17: appuser.manager.banapp.v2.ExistBanAppCondsRequest
	(*ExistBanAppCondsResponse)(nil), // 18: appuser.manager.banapp.v2.ExistBanAppCondsResponse
	(*CountBanAppsRequest)(nil),      // 19: appuser.manager.banapp.v2.CountBanAppsRequest
	(*CountBanAppsResponse)(nil),     // 20: appuser.manager.banapp.v2.CountBanAppsResponse
	(*DeleteBanAppRequest)(nil),      // 21: appuser.manager.banapp.v2.DeleteBanAppRequest
	(*DeleteBanAppResponse)(nil),     // 22: appuser.manager.banapp.v2.DeleteBanAppResponse
	(*npool.StringVal)(nil),          // 23: npool.v1.StringVal
}
var file_npool_appuser_mgr_v2_banapp_banapp_proto_depIdxs = []int32{
	23, // 0: appuser.manager.banapp.v2.Conds.ID:type_name -> npool.v1.StringVal
	23, // 1: appuser.manager.banapp.v2.Conds.AppID:type_name -> npool.v1.StringVal
	23, // 2: appuser.manager.banapp.v2.Conds.Message:type_name -> npool.v1.StringVal
	0,  // 3: appuser.manager.banapp.v2.CreateBanAppRequest.Info:type_name -> appuser.manager.banapp.v2.BanAppReq
	1,  // 4: appuser.manager.banapp.v2.CreateBanAppResponse.Info:type_name -> appuser.manager.banapp.v2.BanApp
	0,  // 5: appuser.manager.banapp.v2.CreateBanAppsRequest.Infos:type_name -> appuser.manager.banapp.v2.BanAppReq
	1,  // 6: appuser.manager.banapp.v2.CreateBanAppsResponse.Infos:type_name -> appuser.manager.banapp.v2.BanApp
	1,  // 7: appuser.manager.banapp.v2.GetBanAppResponse.Info:type_name -> appuser.manager.banapp.v2.BanApp
	2,  // 8: appuser.manager.banapp.v2.GetBanAppsRequest.Conds:type_name -> appuser.manager.banapp.v2.Conds
	1,  // 9: appuser.manager.banapp.v2.GetBanAppsResponse.Infos:type_name -> appuser.manager.banapp.v2.BanApp
	2,  // 10: appuser.manager.banapp.v2.GetBanAppOnlyRequest.Conds:type_name -> appuser.manager.banapp.v2.Conds
	1,  // 11: appuser.manager.banapp.v2.GetBanAppOnlyResponse.Info:type_name -> appuser.manager.banapp.v2.BanApp
	0,  // 12: appuser.manager.banapp.v2.UpdateBanAppRequest.Info:type_name -> appuser.manager.banapp.v2.BanAppReq
	1,  // 13: appuser.manager.banapp.v2.UpdateBanAppResponse.Info:type_name -> appuser.manager.banapp.v2.BanApp
	2,  // 14: appuser.manager.banapp.v2.ExistBanAppCondsRequest.Conds:type_name -> appuser.manager.banapp.v2.Conds
	2,  // 15: appuser.manager.banapp.v2.CountBanAppsRequest.Conds:type_name -> appuser.manager.banapp.v2.Conds
	1,  // 16: appuser.manager.banapp.v2.DeleteBanAppResponse.Info:type_name -> appuser.manager.banapp.v2.BanApp
	3,  // 17: appuser.manager.banapp.v2.Manager.CreateBanApp:input_type -> appuser.manager.banapp.v2.CreateBanAppRequest
	5,  // 18: appuser.manager.banapp.v2.Manager.CreateBanApps:input_type -> appuser.manager.banapp.v2.CreateBanAppsRequest
	13, // 19: appuser.manager.banapp.v2.Manager.UpdateBanApp:input_type -> appuser.manager.banapp.v2.UpdateBanAppRequest
	7,  // 20: appuser.manager.banapp.v2.Manager.GetBanApp:input_type -> appuser.manager.banapp.v2.GetBanAppRequest
	11, // 21: appuser.manager.banapp.v2.Manager.GetBanAppOnly:input_type -> appuser.manager.banapp.v2.GetBanAppOnlyRequest
	9,  // 22: appuser.manager.banapp.v2.Manager.GetBanApps:input_type -> appuser.manager.banapp.v2.GetBanAppsRequest
	15, // 23: appuser.manager.banapp.v2.Manager.ExistBanApp:input_type -> appuser.manager.banapp.v2.ExistBanAppRequest
	17, // 24: appuser.manager.banapp.v2.Manager.ExistBanAppConds:input_type -> appuser.manager.banapp.v2.ExistBanAppCondsRequest
	19, // 25: appuser.manager.banapp.v2.Manager.CountBanApps:input_type -> appuser.manager.banapp.v2.CountBanAppsRequest
	21, // 26: appuser.manager.banapp.v2.Manager.DeleteBanApp:input_type -> appuser.manager.banapp.v2.DeleteBanAppRequest
	4,  // 27: appuser.manager.banapp.v2.Manager.CreateBanApp:output_type -> appuser.manager.banapp.v2.CreateBanAppResponse
	6,  // 28: appuser.manager.banapp.v2.Manager.CreateBanApps:output_type -> appuser.manager.banapp.v2.CreateBanAppsResponse
	14, // 29: appuser.manager.banapp.v2.Manager.UpdateBanApp:output_type -> appuser.manager.banapp.v2.UpdateBanAppResponse
	8,  // 30: appuser.manager.banapp.v2.Manager.GetBanApp:output_type -> appuser.manager.banapp.v2.GetBanAppResponse
	12, // 31: appuser.manager.banapp.v2.Manager.GetBanAppOnly:output_type -> appuser.manager.banapp.v2.GetBanAppOnlyResponse
	10, // 32: appuser.manager.banapp.v2.Manager.GetBanApps:output_type -> appuser.manager.banapp.v2.GetBanAppsResponse
	16, // 33: appuser.manager.banapp.v2.Manager.ExistBanApp:output_type -> appuser.manager.banapp.v2.ExistBanAppResponse
	18, // 34: appuser.manager.banapp.v2.Manager.ExistBanAppConds:output_type -> appuser.manager.banapp.v2.ExistBanAppCondsResponse
	20, // 35: appuser.manager.banapp.v2.Manager.CountBanApps:output_type -> appuser.manager.banapp.v2.CountBanAppsResponse
	22, // 36: appuser.manager.banapp.v2.Manager.DeleteBanApp:output_type -> appuser.manager.banapp.v2.DeleteBanAppResponse
	27, // [27:37] is the sub-list for method output_type
	17, // [17:27] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_npool_appuser_mgr_v2_banapp_banapp_proto_init() }
func file_npool_appuser_mgr_v2_banapp_banapp_proto_init() {
	if File_npool_appuser_mgr_v2_banapp_banapp_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BanAppReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BanApp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBanAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBanAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBanAppsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBanAppsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBanAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBanAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBanAppsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBanAppsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBanAppOnlyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBanAppOnlyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBanAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBanAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistBanAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistBanAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistBanAppCondsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistBanAppCondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountBanAppsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountBanAppsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBanAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBanAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_appuser_mgr_v2_banapp_banapp_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_appuser_mgr_v2_banapp_banapp_proto_goTypes,
		DependencyIndexes: file_npool_appuser_mgr_v2_banapp_banapp_proto_depIdxs,
		MessageInfos:      file_npool_appuser_mgr_v2_banapp_banapp_proto_msgTypes,
	}.Build()
	File_npool_appuser_mgr_v2_banapp_banapp_proto = out.File
	file_npool_appuser_mgr_v2_banapp_banapp_proto_rawDesc = nil
	file_npool_appuser_mgr_v2_banapp_banapp_proto_goTypes = nil
	file_npool_appuser_mgr_v2_banapp_banapp_proto_depIdxs = nil
}
