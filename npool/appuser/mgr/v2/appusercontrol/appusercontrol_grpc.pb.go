// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/appuser/mgr/v2/appusercontrol/appusercontrol.proto

package appusercontrol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateAppUserControl(ctx context.Context, in *CreateAppUserControlRequest, opts ...grpc.CallOption) (*CreateAppUserControlResponse, error)
	CreateAppUserControls(ctx context.Context, in *CreateAppUserControlsRequest, opts ...grpc.CallOption) (*CreateAppUserControlsResponse, error)
	UpdateAppUserControl(ctx context.Context, in *UpdateAppUserControlRequest, opts ...grpc.CallOption) (*UpdateAppUserControlResponse, error)
	GetAppUserControl(ctx context.Context, in *GetAppUserControlRequest, opts ...grpc.CallOption) (*GetAppUserControlResponse, error)
	GetAppUserControlOnly(ctx context.Context, in *GetAppUserControlOnlyRequest, opts ...grpc.CallOption) (*GetAppUserControlOnlyResponse, error)
	GetAppUserControls(ctx context.Context, in *GetAppUserControlsRequest, opts ...grpc.CallOption) (*GetAppUserControlsResponse, error)
	ExistAppUserControl(ctx context.Context, in *ExistAppUserControlRequest, opts ...grpc.CallOption) (*ExistAppUserControlResponse, error)
	ExistAppUserControlConds(ctx context.Context, in *ExistAppUserControlCondsRequest, opts ...grpc.CallOption) (*ExistAppUserControlCondsResponse, error)
	CountAppUserControls(ctx context.Context, in *CountAppUserControlsRequest, opts ...grpc.CallOption) (*CountAppUserControlsResponse, error)
	DeleteAppUserControl(ctx context.Context, in *DeleteAppUserControlRequest, opts ...grpc.CallOption) (*DeleteAppUserControlResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateAppUserControl(ctx context.Context, in *CreateAppUserControlRequest, opts ...grpc.CallOption) (*CreateAppUserControlResponse, error) {
	out := new(CreateAppUserControlResponse)
	err := c.cc.Invoke(ctx, "/appuser.manager.appusercontrol.v2.Manager/CreateAppUserControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateAppUserControls(ctx context.Context, in *CreateAppUserControlsRequest, opts ...grpc.CallOption) (*CreateAppUserControlsResponse, error) {
	out := new(CreateAppUserControlsResponse)
	err := c.cc.Invoke(ctx, "/appuser.manager.appusercontrol.v2.Manager/CreateAppUserControls", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateAppUserControl(ctx context.Context, in *UpdateAppUserControlRequest, opts ...grpc.CallOption) (*UpdateAppUserControlResponse, error) {
	out := new(UpdateAppUserControlResponse)
	err := c.cc.Invoke(ctx, "/appuser.manager.appusercontrol.v2.Manager/UpdateAppUserControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetAppUserControl(ctx context.Context, in *GetAppUserControlRequest, opts ...grpc.CallOption) (*GetAppUserControlResponse, error) {
	out := new(GetAppUserControlResponse)
	err := c.cc.Invoke(ctx, "/appuser.manager.appusercontrol.v2.Manager/GetAppUserControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetAppUserControlOnly(ctx context.Context, in *GetAppUserControlOnlyRequest, opts ...grpc.CallOption) (*GetAppUserControlOnlyResponse, error) {
	out := new(GetAppUserControlOnlyResponse)
	err := c.cc.Invoke(ctx, "/appuser.manager.appusercontrol.v2.Manager/GetAppUserControlOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetAppUserControls(ctx context.Context, in *GetAppUserControlsRequest, opts ...grpc.CallOption) (*GetAppUserControlsResponse, error) {
	out := new(GetAppUserControlsResponse)
	err := c.cc.Invoke(ctx, "/appuser.manager.appusercontrol.v2.Manager/GetAppUserControls", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistAppUserControl(ctx context.Context, in *ExistAppUserControlRequest, opts ...grpc.CallOption) (*ExistAppUserControlResponse, error) {
	out := new(ExistAppUserControlResponse)
	err := c.cc.Invoke(ctx, "/appuser.manager.appusercontrol.v2.Manager/ExistAppUserControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistAppUserControlConds(ctx context.Context, in *ExistAppUserControlCondsRequest, opts ...grpc.CallOption) (*ExistAppUserControlCondsResponse, error) {
	out := new(ExistAppUserControlCondsResponse)
	err := c.cc.Invoke(ctx, "/appuser.manager.appusercontrol.v2.Manager/ExistAppUserControlConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountAppUserControls(ctx context.Context, in *CountAppUserControlsRequest, opts ...grpc.CallOption) (*CountAppUserControlsResponse, error) {
	out := new(CountAppUserControlsResponse)
	err := c.cc.Invoke(ctx, "/appuser.manager.appusercontrol.v2.Manager/CountAppUserControls", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteAppUserControl(ctx context.Context, in *DeleteAppUserControlRequest, opts ...grpc.CallOption) (*DeleteAppUserControlResponse, error) {
	out := new(DeleteAppUserControlResponse)
	err := c.cc.Invoke(ctx, "/appuser.manager.appusercontrol.v2.Manager/DeleteAppUserControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateAppUserControl(context.Context, *CreateAppUserControlRequest) (*CreateAppUserControlResponse, error)
	CreateAppUserControls(context.Context, *CreateAppUserControlsRequest) (*CreateAppUserControlsResponse, error)
	UpdateAppUserControl(context.Context, *UpdateAppUserControlRequest) (*UpdateAppUserControlResponse, error)
	GetAppUserControl(context.Context, *GetAppUserControlRequest) (*GetAppUserControlResponse, error)
	GetAppUserControlOnly(context.Context, *GetAppUserControlOnlyRequest) (*GetAppUserControlOnlyResponse, error)
	GetAppUserControls(context.Context, *GetAppUserControlsRequest) (*GetAppUserControlsResponse, error)
	ExistAppUserControl(context.Context, *ExistAppUserControlRequest) (*ExistAppUserControlResponse, error)
	ExistAppUserControlConds(context.Context, *ExistAppUserControlCondsRequest) (*ExistAppUserControlCondsResponse, error)
	CountAppUserControls(context.Context, *CountAppUserControlsRequest) (*CountAppUserControlsResponse, error)
	DeleteAppUserControl(context.Context, *DeleteAppUserControlRequest) (*DeleteAppUserControlResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateAppUserControl(context.Context, *CreateAppUserControlRequest) (*CreateAppUserControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppUserControl not implemented")
}
func (UnimplementedManagerServer) CreateAppUserControls(context.Context, *CreateAppUserControlsRequest) (*CreateAppUserControlsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppUserControls not implemented")
}
func (UnimplementedManagerServer) UpdateAppUserControl(context.Context, *UpdateAppUserControlRequest) (*UpdateAppUserControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppUserControl not implemented")
}
func (UnimplementedManagerServer) GetAppUserControl(context.Context, *GetAppUserControlRequest) (*GetAppUserControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppUserControl not implemented")
}
func (UnimplementedManagerServer) GetAppUserControlOnly(context.Context, *GetAppUserControlOnlyRequest) (*GetAppUserControlOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppUserControlOnly not implemented")
}
func (UnimplementedManagerServer) GetAppUserControls(context.Context, *GetAppUserControlsRequest) (*GetAppUserControlsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppUserControls not implemented")
}
func (UnimplementedManagerServer) ExistAppUserControl(context.Context, *ExistAppUserControlRequest) (*ExistAppUserControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistAppUserControl not implemented")
}
func (UnimplementedManagerServer) ExistAppUserControlConds(context.Context, *ExistAppUserControlCondsRequest) (*ExistAppUserControlCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistAppUserControlConds not implemented")
}
func (UnimplementedManagerServer) CountAppUserControls(context.Context, *CountAppUserControlsRequest) (*CountAppUserControlsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAppUserControls not implemented")
}
func (UnimplementedManagerServer) DeleteAppUserControl(context.Context, *DeleteAppUserControlRequest) (*DeleteAppUserControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppUserControl not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateAppUserControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppUserControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateAppUserControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.manager.appusercontrol.v2.Manager/CreateAppUserControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateAppUserControl(ctx, req.(*CreateAppUserControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateAppUserControls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppUserControlsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateAppUserControls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.manager.appusercontrol.v2.Manager/CreateAppUserControls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateAppUserControls(ctx, req.(*CreateAppUserControlsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateAppUserControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppUserControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateAppUserControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.manager.appusercontrol.v2.Manager/UpdateAppUserControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateAppUserControl(ctx, req.(*UpdateAppUserControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetAppUserControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppUserControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetAppUserControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.manager.appusercontrol.v2.Manager/GetAppUserControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetAppUserControl(ctx, req.(*GetAppUserControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetAppUserControlOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppUserControlOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetAppUserControlOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.manager.appusercontrol.v2.Manager/GetAppUserControlOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetAppUserControlOnly(ctx, req.(*GetAppUserControlOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetAppUserControls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppUserControlsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetAppUserControls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.manager.appusercontrol.v2.Manager/GetAppUserControls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetAppUserControls(ctx, req.(*GetAppUserControlsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistAppUserControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistAppUserControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistAppUserControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.manager.appusercontrol.v2.Manager/ExistAppUserControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistAppUserControl(ctx, req.(*ExistAppUserControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistAppUserControlConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistAppUserControlCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistAppUserControlConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.manager.appusercontrol.v2.Manager/ExistAppUserControlConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistAppUserControlConds(ctx, req.(*ExistAppUserControlCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountAppUserControls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAppUserControlsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountAppUserControls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.manager.appusercontrol.v2.Manager/CountAppUserControls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountAppUserControls(ctx, req.(*CountAppUserControlsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteAppUserControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppUserControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteAppUserControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.manager.appusercontrol.v2.Manager/DeleteAppUserControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteAppUserControl(ctx, req.(*DeleteAppUserControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "appuser.manager.appusercontrol.v2.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAppUserControl",
			Handler:    _Manager_CreateAppUserControl_Handler,
		},
		{
			MethodName: "CreateAppUserControls",
			Handler:    _Manager_CreateAppUserControls_Handler,
		},
		{
			MethodName: "UpdateAppUserControl",
			Handler:    _Manager_UpdateAppUserControl_Handler,
		},
		{
			MethodName: "GetAppUserControl",
			Handler:    _Manager_GetAppUserControl_Handler,
		},
		{
			MethodName: "GetAppUserControlOnly",
			Handler:    _Manager_GetAppUserControlOnly_Handler,
		},
		{
			MethodName: "GetAppUserControls",
			Handler:    _Manager_GetAppUserControls_Handler,
		},
		{
			MethodName: "ExistAppUserControl",
			Handler:    _Manager_ExistAppUserControl_Handler,
		},
		{
			MethodName: "ExistAppUserControlConds",
			Handler:    _Manager_ExistAppUserControlConds_Handler,
		},
		{
			MethodName: "CountAppUserControls",
			Handler:    _Manager_CountAppUserControls_Handler,
		},
		{
			MethodName: "DeleteAppUserControl",
			Handler:    _Manager_DeleteAppUserControl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/appuser/mgr/v2/appusercontrol/appusercontrol.proto",
}
