// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/appuser/mgr/v2/banappuser/banappuser.proto

package banappuser

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppUserManagerBanAppUserClient is the client API for AppUserManagerBanAppUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppUserManagerBanAppUserClient interface {
	CreateBanAppUserV2(ctx context.Context, in *CreateBanAppUserRequest, opts ...grpc.CallOption) (*CreateBanAppUserResponse, error)
	CreateBanAppUsersV2(ctx context.Context, in *CreateBanAppUsersRequest, opts ...grpc.CallOption) (*CreateBanAppUsersResponse, error)
	UpdateBanAppUserV2(ctx context.Context, in *UpdateBanAppUserRequest, opts ...grpc.CallOption) (*UpdateBanAppUserResponse, error)
	GetBanAppUserV2(ctx context.Context, in *GetBanAppUserRequest, opts ...grpc.CallOption) (*GetBanAppUserResponse, error)
	GetBanAppUserOnlyV2(ctx context.Context, in *GetBanAppUserOnlyRequest, opts ...grpc.CallOption) (*GetBanAppUserOnlyResponse, error)
	GetBanAppUsersV2(ctx context.Context, in *GetBanAppUsersRequest, opts ...grpc.CallOption) (*GetBanAppUsersResponse, error)
	ExistBanAppUserV2(ctx context.Context, in *ExistBanAppUserRequest, opts ...grpc.CallOption) (*ExistBanAppUserResponse, error)
	ExistBanAppUserCondsV2(ctx context.Context, in *ExistBanAppUserCondsRequest, opts ...grpc.CallOption) (*ExistBanAppUserCondsResponse, error)
	CountBanAppUsersV2(ctx context.Context, in *CountBanAppUsersRequest, opts ...grpc.CallOption) (*CountBanAppUsersResponse, error)
	DeleteBanAppUserV2(ctx context.Context, in *DeleteBanAppUserRequest, opts ...grpc.CallOption) (*DeleteBanAppUserResponse, error)
}

type appUserManagerBanAppUserClient struct {
	cc grpc.ClientConnInterface
}

func NewAppUserManagerBanAppUserClient(cc grpc.ClientConnInterface) AppUserManagerBanAppUserClient {
	return &appUserManagerBanAppUserClient{cc}
}

func (c *appUserManagerBanAppUserClient) CreateBanAppUserV2(ctx context.Context, in *CreateBanAppUserRequest, opts ...grpc.CallOption) (*CreateBanAppUserResponse, error) {
	out := new(CreateBanAppUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.banappuser.v2.AppUserManagerBanAppUser/CreateBanAppUserV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerBanAppUserClient) CreateBanAppUsersV2(ctx context.Context, in *CreateBanAppUsersRequest, opts ...grpc.CallOption) (*CreateBanAppUsersResponse, error) {
	out := new(CreateBanAppUsersResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.banappuser.v2.AppUserManagerBanAppUser/CreateBanAppUsersV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerBanAppUserClient) UpdateBanAppUserV2(ctx context.Context, in *UpdateBanAppUserRequest, opts ...grpc.CallOption) (*UpdateBanAppUserResponse, error) {
	out := new(UpdateBanAppUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.banappuser.v2.AppUserManagerBanAppUser/UpdateBanAppUserV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerBanAppUserClient) GetBanAppUserV2(ctx context.Context, in *GetBanAppUserRequest, opts ...grpc.CallOption) (*GetBanAppUserResponse, error) {
	out := new(GetBanAppUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.banappuser.v2.AppUserManagerBanAppUser/GetBanAppUserV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerBanAppUserClient) GetBanAppUserOnlyV2(ctx context.Context, in *GetBanAppUserOnlyRequest, opts ...grpc.CallOption) (*GetBanAppUserOnlyResponse, error) {
	out := new(GetBanAppUserOnlyResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.banappuser.v2.AppUserManagerBanAppUser/GetBanAppUserOnlyV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerBanAppUserClient) GetBanAppUsersV2(ctx context.Context, in *GetBanAppUsersRequest, opts ...grpc.CallOption) (*GetBanAppUsersResponse, error) {
	out := new(GetBanAppUsersResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.banappuser.v2.AppUserManagerBanAppUser/GetBanAppUsersV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerBanAppUserClient) ExistBanAppUserV2(ctx context.Context, in *ExistBanAppUserRequest, opts ...grpc.CallOption) (*ExistBanAppUserResponse, error) {
	out := new(ExistBanAppUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.banappuser.v2.AppUserManagerBanAppUser/ExistBanAppUserV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerBanAppUserClient) ExistBanAppUserCondsV2(ctx context.Context, in *ExistBanAppUserCondsRequest, opts ...grpc.CallOption) (*ExistBanAppUserCondsResponse, error) {
	out := new(ExistBanAppUserCondsResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.banappuser.v2.AppUserManagerBanAppUser/ExistBanAppUserCondsV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerBanAppUserClient) CountBanAppUsersV2(ctx context.Context, in *CountBanAppUsersRequest, opts ...grpc.CallOption) (*CountBanAppUsersResponse, error) {
	out := new(CountBanAppUsersResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.banappuser.v2.AppUserManagerBanAppUser/CountBanAppUsersV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerBanAppUserClient) DeleteBanAppUserV2(ctx context.Context, in *DeleteBanAppUserRequest, opts ...grpc.CallOption) (*DeleteBanAppUserResponse, error) {
	out := new(DeleteBanAppUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.banappuser.v2.AppUserManagerBanAppUser/DeleteBanAppUserV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppUserManagerBanAppUserServer is the server API for AppUserManagerBanAppUser service.
// All implementations must embed UnimplementedAppUserManagerBanAppUserServer
// for forward compatibility
type AppUserManagerBanAppUserServer interface {
	CreateBanAppUserV2(context.Context, *CreateBanAppUserRequest) (*CreateBanAppUserResponse, error)
	CreateBanAppUsersV2(context.Context, *CreateBanAppUsersRequest) (*CreateBanAppUsersResponse, error)
	UpdateBanAppUserV2(context.Context, *UpdateBanAppUserRequest) (*UpdateBanAppUserResponse, error)
	GetBanAppUserV2(context.Context, *GetBanAppUserRequest) (*GetBanAppUserResponse, error)
	GetBanAppUserOnlyV2(context.Context, *GetBanAppUserOnlyRequest) (*GetBanAppUserOnlyResponse, error)
	GetBanAppUsersV2(context.Context, *GetBanAppUsersRequest) (*GetBanAppUsersResponse, error)
	ExistBanAppUserV2(context.Context, *ExistBanAppUserRequest) (*ExistBanAppUserResponse, error)
	ExistBanAppUserCondsV2(context.Context, *ExistBanAppUserCondsRequest) (*ExistBanAppUserCondsResponse, error)
	CountBanAppUsersV2(context.Context, *CountBanAppUsersRequest) (*CountBanAppUsersResponse, error)
	DeleteBanAppUserV2(context.Context, *DeleteBanAppUserRequest) (*DeleteBanAppUserResponse, error)
	mustEmbedUnimplementedAppUserManagerBanAppUserServer()
}

// UnimplementedAppUserManagerBanAppUserServer must be embedded to have forward compatible implementations.
type UnimplementedAppUserManagerBanAppUserServer struct {
}

func (UnimplementedAppUserManagerBanAppUserServer) CreateBanAppUserV2(context.Context, *CreateBanAppUserRequest) (*CreateBanAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBanAppUserV2 not implemented")
}
func (UnimplementedAppUserManagerBanAppUserServer) CreateBanAppUsersV2(context.Context, *CreateBanAppUsersRequest) (*CreateBanAppUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBanAppUsersV2 not implemented")
}
func (UnimplementedAppUserManagerBanAppUserServer) UpdateBanAppUserV2(context.Context, *UpdateBanAppUserRequest) (*UpdateBanAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBanAppUserV2 not implemented")
}
func (UnimplementedAppUserManagerBanAppUserServer) GetBanAppUserV2(context.Context, *GetBanAppUserRequest) (*GetBanAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBanAppUserV2 not implemented")
}
func (UnimplementedAppUserManagerBanAppUserServer) GetBanAppUserOnlyV2(context.Context, *GetBanAppUserOnlyRequest) (*GetBanAppUserOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBanAppUserOnlyV2 not implemented")
}
func (UnimplementedAppUserManagerBanAppUserServer) GetBanAppUsersV2(context.Context, *GetBanAppUsersRequest) (*GetBanAppUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBanAppUsersV2 not implemented")
}
func (UnimplementedAppUserManagerBanAppUserServer) ExistBanAppUserV2(context.Context, *ExistBanAppUserRequest) (*ExistBanAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistBanAppUserV2 not implemented")
}
func (UnimplementedAppUserManagerBanAppUserServer) ExistBanAppUserCondsV2(context.Context, *ExistBanAppUserCondsRequest) (*ExistBanAppUserCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistBanAppUserCondsV2 not implemented")
}
func (UnimplementedAppUserManagerBanAppUserServer) CountBanAppUsersV2(context.Context, *CountBanAppUsersRequest) (*CountBanAppUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountBanAppUsersV2 not implemented")
}
func (UnimplementedAppUserManagerBanAppUserServer) DeleteBanAppUserV2(context.Context, *DeleteBanAppUserRequest) (*DeleteBanAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBanAppUserV2 not implemented")
}
func (UnimplementedAppUserManagerBanAppUserServer) mustEmbedUnimplementedAppUserManagerBanAppUserServer() {
}

// UnsafeAppUserManagerBanAppUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppUserManagerBanAppUserServer will
// result in compilation errors.
type UnsafeAppUserManagerBanAppUserServer interface {
	mustEmbedUnimplementedAppUserManagerBanAppUserServer()
}

func RegisterAppUserManagerBanAppUserServer(s grpc.ServiceRegistrar, srv AppUserManagerBanAppUserServer) {
	s.RegisterService(&AppUserManagerBanAppUser_ServiceDesc, srv)
}

func _AppUserManagerBanAppUser_CreateBanAppUserV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBanAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerBanAppUserServer).CreateBanAppUserV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.banappuser.v2.AppUserManagerBanAppUser/CreateBanAppUserV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerBanAppUserServer).CreateBanAppUserV2(ctx, req.(*CreateBanAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerBanAppUser_CreateBanAppUsersV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBanAppUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerBanAppUserServer).CreateBanAppUsersV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.banappuser.v2.AppUserManagerBanAppUser/CreateBanAppUsersV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerBanAppUserServer).CreateBanAppUsersV2(ctx, req.(*CreateBanAppUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerBanAppUser_UpdateBanAppUserV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBanAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerBanAppUserServer).UpdateBanAppUserV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.banappuser.v2.AppUserManagerBanAppUser/UpdateBanAppUserV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerBanAppUserServer).UpdateBanAppUserV2(ctx, req.(*UpdateBanAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerBanAppUser_GetBanAppUserV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBanAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerBanAppUserServer).GetBanAppUserV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.banappuser.v2.AppUserManagerBanAppUser/GetBanAppUserV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerBanAppUserServer).GetBanAppUserV2(ctx, req.(*GetBanAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerBanAppUser_GetBanAppUserOnlyV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBanAppUserOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerBanAppUserServer).GetBanAppUserOnlyV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.banappuser.v2.AppUserManagerBanAppUser/GetBanAppUserOnlyV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerBanAppUserServer).GetBanAppUserOnlyV2(ctx, req.(*GetBanAppUserOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerBanAppUser_GetBanAppUsersV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBanAppUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerBanAppUserServer).GetBanAppUsersV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.banappuser.v2.AppUserManagerBanAppUser/GetBanAppUsersV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerBanAppUserServer).GetBanAppUsersV2(ctx, req.(*GetBanAppUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerBanAppUser_ExistBanAppUserV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistBanAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerBanAppUserServer).ExistBanAppUserV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.banappuser.v2.AppUserManagerBanAppUser/ExistBanAppUserV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerBanAppUserServer).ExistBanAppUserV2(ctx, req.(*ExistBanAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerBanAppUser_ExistBanAppUserCondsV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistBanAppUserCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerBanAppUserServer).ExistBanAppUserCondsV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.banappuser.v2.AppUserManagerBanAppUser/ExistBanAppUserCondsV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerBanAppUserServer).ExistBanAppUserCondsV2(ctx, req.(*ExistBanAppUserCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerBanAppUser_CountBanAppUsersV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountBanAppUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerBanAppUserServer).CountBanAppUsersV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.banappuser.v2.AppUserManagerBanAppUser/CountBanAppUsersV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerBanAppUserServer).CountBanAppUsersV2(ctx, req.(*CountBanAppUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerBanAppUser_DeleteBanAppUserV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBanAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerBanAppUserServer).DeleteBanAppUserV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.banappuser.v2.AppUserManagerBanAppUser/DeleteBanAppUserV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerBanAppUserServer).DeleteBanAppUserV2(ctx, req.(*DeleteBanAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppUserManagerBanAppUser_ServiceDesc is the grpc.ServiceDesc for AppUserManagerBanAppUser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppUserManagerBanAppUser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app.user.manager.banappuser.v2.AppUserManagerBanAppUser",
	HandlerType: (*AppUserManagerBanAppUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBanAppUserV2",
			Handler:    _AppUserManagerBanAppUser_CreateBanAppUserV2_Handler,
		},
		{
			MethodName: "CreateBanAppUsersV2",
			Handler:    _AppUserManagerBanAppUser_CreateBanAppUsersV2_Handler,
		},
		{
			MethodName: "UpdateBanAppUserV2",
			Handler:    _AppUserManagerBanAppUser_UpdateBanAppUserV2_Handler,
		},
		{
			MethodName: "GetBanAppUserV2",
			Handler:    _AppUserManagerBanAppUser_GetBanAppUserV2_Handler,
		},
		{
			MethodName: "GetBanAppUserOnlyV2",
			Handler:    _AppUserManagerBanAppUser_GetBanAppUserOnlyV2_Handler,
		},
		{
			MethodName: "GetBanAppUsersV2",
			Handler:    _AppUserManagerBanAppUser_GetBanAppUsersV2_Handler,
		},
		{
			MethodName: "ExistBanAppUserV2",
			Handler:    _AppUserManagerBanAppUser_ExistBanAppUserV2_Handler,
		},
		{
			MethodName: "ExistBanAppUserCondsV2",
			Handler:    _AppUserManagerBanAppUser_ExistBanAppUserCondsV2_Handler,
		},
		{
			MethodName: "CountBanAppUsersV2",
			Handler:    _AppUserManagerBanAppUser_CountBanAppUsersV2_Handler,
		},
		{
			MethodName: "DeleteBanAppUserV2",
			Handler:    _AppUserManagerBanAppUser_DeleteBanAppUserV2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/appuser/mgr/v2/banappuser/banappuser.proto",
}
