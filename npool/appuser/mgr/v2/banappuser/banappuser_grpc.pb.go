// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/appuser/mgr/v2/banappuser/banappuser.proto

package banappuser

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BanAppUserMgrClient is the client API for BanAppUserMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BanAppUserMgrClient interface {
	CreateBanAppUser(ctx context.Context, in *CreateBanAppUserRequest, opts ...grpc.CallOption) (*CreateBanAppUserResponse, error)
	CreateBanAppUsers(ctx context.Context, in *CreateBanAppUsersRequest, opts ...grpc.CallOption) (*CreateBanAppUsersResponse, error)
	UpdateBanAppUser(ctx context.Context, in *UpdateBanAppUserRequest, opts ...grpc.CallOption) (*UpdateBanAppUserResponse, error)
	GetBanAppUser(ctx context.Context, in *GetBanAppUserRequest, opts ...grpc.CallOption) (*GetBanAppUserResponse, error)
	GetBanAppUserOnly(ctx context.Context, in *GetBanAppUserOnlyRequest, opts ...grpc.CallOption) (*GetBanAppUserOnlyResponse, error)
	GetBanAppUsers(ctx context.Context, in *GetBanAppUsersRequest, opts ...grpc.CallOption) (*GetBanAppUsersResponse, error)
	ExistBanAppUser(ctx context.Context, in *ExistBanAppUserRequest, opts ...grpc.CallOption) (*ExistBanAppUserResponse, error)
	ExistBanAppUserConds(ctx context.Context, in *ExistBanAppUserCondsRequest, opts ...grpc.CallOption) (*ExistBanAppUserCondsResponse, error)
	CountBanAppUsers(ctx context.Context, in *CountBanAppUsersRequest, opts ...grpc.CallOption) (*CountBanAppUsersResponse, error)
	DeleteBanAppUser(ctx context.Context, in *DeleteBanAppUserRequest, opts ...grpc.CallOption) (*DeleteBanAppUserResponse, error)
}

type banAppUserMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewBanAppUserMgrClient(cc grpc.ClientConnInterface) BanAppUserMgrClient {
	return &banAppUserMgrClient{cc}
}

func (c *banAppUserMgrClient) CreateBanAppUser(ctx context.Context, in *CreateBanAppUserRequest, opts ...grpc.CallOption) (*CreateBanAppUserResponse, error) {
	out := new(CreateBanAppUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.banappuser.v2.BanAppUserMgr/CreateBanAppUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *banAppUserMgrClient) CreateBanAppUsers(ctx context.Context, in *CreateBanAppUsersRequest, opts ...grpc.CallOption) (*CreateBanAppUsersResponse, error) {
	out := new(CreateBanAppUsersResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.banappuser.v2.BanAppUserMgr/CreateBanAppUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *banAppUserMgrClient) UpdateBanAppUser(ctx context.Context, in *UpdateBanAppUserRequest, opts ...grpc.CallOption) (*UpdateBanAppUserResponse, error) {
	out := new(UpdateBanAppUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.banappuser.v2.BanAppUserMgr/UpdateBanAppUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *banAppUserMgrClient) GetBanAppUser(ctx context.Context, in *GetBanAppUserRequest, opts ...grpc.CallOption) (*GetBanAppUserResponse, error) {
	out := new(GetBanAppUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.banappuser.v2.BanAppUserMgr/GetBanAppUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *banAppUserMgrClient) GetBanAppUserOnly(ctx context.Context, in *GetBanAppUserOnlyRequest, opts ...grpc.CallOption) (*GetBanAppUserOnlyResponse, error) {
	out := new(GetBanAppUserOnlyResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.banappuser.v2.BanAppUserMgr/GetBanAppUserOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *banAppUserMgrClient) GetBanAppUsers(ctx context.Context, in *GetBanAppUsersRequest, opts ...grpc.CallOption) (*GetBanAppUsersResponse, error) {
	out := new(GetBanAppUsersResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.banappuser.v2.BanAppUserMgr/GetBanAppUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *banAppUserMgrClient) ExistBanAppUser(ctx context.Context, in *ExistBanAppUserRequest, opts ...grpc.CallOption) (*ExistBanAppUserResponse, error) {
	out := new(ExistBanAppUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.banappuser.v2.BanAppUserMgr/ExistBanAppUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *banAppUserMgrClient) ExistBanAppUserConds(ctx context.Context, in *ExistBanAppUserCondsRequest, opts ...grpc.CallOption) (*ExistBanAppUserCondsResponse, error) {
	out := new(ExistBanAppUserCondsResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.banappuser.v2.BanAppUserMgr/ExistBanAppUserConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *banAppUserMgrClient) CountBanAppUsers(ctx context.Context, in *CountBanAppUsersRequest, opts ...grpc.CallOption) (*CountBanAppUsersResponse, error) {
	out := new(CountBanAppUsersResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.banappuser.v2.BanAppUserMgr/CountBanAppUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *banAppUserMgrClient) DeleteBanAppUser(ctx context.Context, in *DeleteBanAppUserRequest, opts ...grpc.CallOption) (*DeleteBanAppUserResponse, error) {
	out := new(DeleteBanAppUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.banappuser.v2.BanAppUserMgr/DeleteBanAppUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BanAppUserMgrServer is the server API for BanAppUserMgr service.
// All implementations must embed UnimplementedBanAppUserMgrServer
// for forward compatibility
type BanAppUserMgrServer interface {
	CreateBanAppUser(context.Context, *CreateBanAppUserRequest) (*CreateBanAppUserResponse, error)
	CreateBanAppUsers(context.Context, *CreateBanAppUsersRequest) (*CreateBanAppUsersResponse, error)
	UpdateBanAppUser(context.Context, *UpdateBanAppUserRequest) (*UpdateBanAppUserResponse, error)
	GetBanAppUser(context.Context, *GetBanAppUserRequest) (*GetBanAppUserResponse, error)
	GetBanAppUserOnly(context.Context, *GetBanAppUserOnlyRequest) (*GetBanAppUserOnlyResponse, error)
	GetBanAppUsers(context.Context, *GetBanAppUsersRequest) (*GetBanAppUsersResponse, error)
	ExistBanAppUser(context.Context, *ExistBanAppUserRequest) (*ExistBanAppUserResponse, error)
	ExistBanAppUserConds(context.Context, *ExistBanAppUserCondsRequest) (*ExistBanAppUserCondsResponse, error)
	CountBanAppUsers(context.Context, *CountBanAppUsersRequest) (*CountBanAppUsersResponse, error)
	DeleteBanAppUser(context.Context, *DeleteBanAppUserRequest) (*DeleteBanAppUserResponse, error)
	mustEmbedUnimplementedBanAppUserMgrServer()
}

// UnimplementedBanAppUserMgrServer must be embedded to have forward compatible implementations.
type UnimplementedBanAppUserMgrServer struct {
}

func (UnimplementedBanAppUserMgrServer) CreateBanAppUser(context.Context, *CreateBanAppUserRequest) (*CreateBanAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBanAppUser not implemented")
}
func (UnimplementedBanAppUserMgrServer) CreateBanAppUsers(context.Context, *CreateBanAppUsersRequest) (*CreateBanAppUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBanAppUsers not implemented")
}
func (UnimplementedBanAppUserMgrServer) UpdateBanAppUser(context.Context, *UpdateBanAppUserRequest) (*UpdateBanAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBanAppUser not implemented")
}
func (UnimplementedBanAppUserMgrServer) GetBanAppUser(context.Context, *GetBanAppUserRequest) (*GetBanAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBanAppUser not implemented")
}
func (UnimplementedBanAppUserMgrServer) GetBanAppUserOnly(context.Context, *GetBanAppUserOnlyRequest) (*GetBanAppUserOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBanAppUserOnly not implemented")
}
func (UnimplementedBanAppUserMgrServer) GetBanAppUsers(context.Context, *GetBanAppUsersRequest) (*GetBanAppUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBanAppUsers not implemented")
}
func (UnimplementedBanAppUserMgrServer) ExistBanAppUser(context.Context, *ExistBanAppUserRequest) (*ExistBanAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistBanAppUser not implemented")
}
func (UnimplementedBanAppUserMgrServer) ExistBanAppUserConds(context.Context, *ExistBanAppUserCondsRequest) (*ExistBanAppUserCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistBanAppUserConds not implemented")
}
func (UnimplementedBanAppUserMgrServer) CountBanAppUsers(context.Context, *CountBanAppUsersRequest) (*CountBanAppUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountBanAppUsers not implemented")
}
func (UnimplementedBanAppUserMgrServer) DeleteBanAppUser(context.Context, *DeleteBanAppUserRequest) (*DeleteBanAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBanAppUser not implemented")
}
func (UnimplementedBanAppUserMgrServer) mustEmbedUnimplementedBanAppUserMgrServer() {}

// UnsafeBanAppUserMgrServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BanAppUserMgrServer will
// result in compilation errors.
type UnsafeBanAppUserMgrServer interface {
	mustEmbedUnimplementedBanAppUserMgrServer()
}

func RegisterBanAppUserMgrServer(s grpc.ServiceRegistrar, srv BanAppUserMgrServer) {
	s.RegisterService(&BanAppUserMgr_ServiceDesc, srv)
}

func _BanAppUserMgr_CreateBanAppUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBanAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BanAppUserMgrServer).CreateBanAppUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.banappuser.v2.BanAppUserMgr/CreateBanAppUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BanAppUserMgrServer).CreateBanAppUser(ctx, req.(*CreateBanAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BanAppUserMgr_CreateBanAppUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBanAppUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BanAppUserMgrServer).CreateBanAppUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.banappuser.v2.BanAppUserMgr/CreateBanAppUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BanAppUserMgrServer).CreateBanAppUsers(ctx, req.(*CreateBanAppUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BanAppUserMgr_UpdateBanAppUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBanAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BanAppUserMgrServer).UpdateBanAppUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.banappuser.v2.BanAppUserMgr/UpdateBanAppUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BanAppUserMgrServer).UpdateBanAppUser(ctx, req.(*UpdateBanAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BanAppUserMgr_GetBanAppUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBanAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BanAppUserMgrServer).GetBanAppUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.banappuser.v2.BanAppUserMgr/GetBanAppUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BanAppUserMgrServer).GetBanAppUser(ctx, req.(*GetBanAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BanAppUserMgr_GetBanAppUserOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBanAppUserOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BanAppUserMgrServer).GetBanAppUserOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.banappuser.v2.BanAppUserMgr/GetBanAppUserOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BanAppUserMgrServer).GetBanAppUserOnly(ctx, req.(*GetBanAppUserOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BanAppUserMgr_GetBanAppUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBanAppUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BanAppUserMgrServer).GetBanAppUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.banappuser.v2.BanAppUserMgr/GetBanAppUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BanAppUserMgrServer).GetBanAppUsers(ctx, req.(*GetBanAppUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BanAppUserMgr_ExistBanAppUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistBanAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BanAppUserMgrServer).ExistBanAppUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.banappuser.v2.BanAppUserMgr/ExistBanAppUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BanAppUserMgrServer).ExistBanAppUser(ctx, req.(*ExistBanAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BanAppUserMgr_ExistBanAppUserConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistBanAppUserCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BanAppUserMgrServer).ExistBanAppUserConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.banappuser.v2.BanAppUserMgr/ExistBanAppUserConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BanAppUserMgrServer).ExistBanAppUserConds(ctx, req.(*ExistBanAppUserCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BanAppUserMgr_CountBanAppUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountBanAppUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BanAppUserMgrServer).CountBanAppUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.banappuser.v2.BanAppUserMgr/CountBanAppUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BanAppUserMgrServer).CountBanAppUsers(ctx, req.(*CountBanAppUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BanAppUserMgr_DeleteBanAppUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBanAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BanAppUserMgrServer).DeleteBanAppUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.banappuser.v2.BanAppUserMgr/DeleteBanAppUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BanAppUserMgrServer).DeleteBanAppUser(ctx, req.(*DeleteBanAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BanAppUserMgr_ServiceDesc is the grpc.ServiceDesc for BanAppUserMgr service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BanAppUserMgr_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app.user.manager.banappuser.v2.BanAppUserMgr",
	HandlerType: (*BanAppUserMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBanAppUser",
			Handler:    _BanAppUserMgr_CreateBanAppUser_Handler,
		},
		{
			MethodName: "CreateBanAppUsers",
			Handler:    _BanAppUserMgr_CreateBanAppUsers_Handler,
		},
		{
			MethodName: "UpdateBanAppUser",
			Handler:    _BanAppUserMgr_UpdateBanAppUser_Handler,
		},
		{
			MethodName: "GetBanAppUser",
			Handler:    _BanAppUserMgr_GetBanAppUser_Handler,
		},
		{
			MethodName: "GetBanAppUserOnly",
			Handler:    _BanAppUserMgr_GetBanAppUserOnly_Handler,
		},
		{
			MethodName: "GetBanAppUsers",
			Handler:    _BanAppUserMgr_GetBanAppUsers_Handler,
		},
		{
			MethodName: "ExistBanAppUser",
			Handler:    _BanAppUserMgr_ExistBanAppUser_Handler,
		},
		{
			MethodName: "ExistBanAppUserConds",
			Handler:    _BanAppUserMgr_ExistBanAppUserConds_Handler,
		},
		{
			MethodName: "CountBanAppUsers",
			Handler:    _BanAppUserMgr_CountBanAppUsers_Handler,
		},
		{
			MethodName: "DeleteBanAppUser",
			Handler:    _BanAppUserMgr_DeleteBanAppUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/appuser/mgr/v2/banappuser/banappuser.proto",
}
