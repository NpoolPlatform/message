// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/appuser/mgr/v2/appuserthirdparty/appuserthirdparty.proto

package appuserthirdparty

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppUserManagerAppUserThirdPartyClient is the client API for AppUserManagerAppUserThirdParty service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppUserManagerAppUserThirdPartyClient interface {
	CreateAppUserThirdPartyV2(ctx context.Context, in *CreateAppUserThirdPartyRequest, opts ...grpc.CallOption) (*CreateAppUserThirdPartyResponse, error)
	CreateAppUserThirdPartysV2(ctx context.Context, in *CreateAppUserThirdPartysRequest, opts ...grpc.CallOption) (*CreateAppUserThirdPartysResponse, error)
	UpdateAppUserThirdPartyV2(ctx context.Context, in *UpdateAppUserThirdPartyRequest, opts ...grpc.CallOption) (*UpdateAppUserThirdPartyResponse, error)
	GetAppUserThirdPartyV2(ctx context.Context, in *GetAppUserThirdPartyRequest, opts ...grpc.CallOption) (*GetAppUserThirdPartyResponse, error)
	GetAppUserThirdPartyOnlyV2(ctx context.Context, in *GetAppUserThirdPartyOnlyRequest, opts ...grpc.CallOption) (*GetAppUserThirdPartyOnlyResponse, error)
	GetAppUserThirdPartysV2(ctx context.Context, in *GetAppUserThirdPartysRequest, opts ...grpc.CallOption) (*GetAppUserThirdPartysResponse, error)
	ExistAppUserThirdPartyV2(ctx context.Context, in *ExistAppUserThirdPartyRequest, opts ...grpc.CallOption) (*ExistAppUserThirdPartyResponse, error)
	ExistAppUserThirdPartyCondsV2(ctx context.Context, in *ExistAppUserThirdPartyCondsRequest, opts ...grpc.CallOption) (*ExistAppUserThirdPartyCondsResponse, error)
	CountAppUserThirdPartysV2(ctx context.Context, in *CountAppUserThirdPartysRequest, opts ...grpc.CallOption) (*CountAppUserThirdPartysResponse, error)
	DeleteAppUserThirdPartyV2(ctx context.Context, in *DeleteAppUserThirdPartyRequest, opts ...grpc.CallOption) (*DeleteAppUserThirdPartyResponse, error)
}

type appUserManagerAppUserThirdPartyClient struct {
	cc grpc.ClientConnInterface
}

func NewAppUserManagerAppUserThirdPartyClient(cc grpc.ClientConnInterface) AppUserManagerAppUserThirdPartyClient {
	return &appUserManagerAppUserThirdPartyClient{cc}
}

func (c *appUserManagerAppUserThirdPartyClient) CreateAppUserThirdPartyV2(ctx context.Context, in *CreateAppUserThirdPartyRequest, opts ...grpc.CallOption) (*CreateAppUserThirdPartyResponse, error) {
	out := new(CreateAppUserThirdPartyResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.appuserthirdparty.v2.AppUserManagerAppUserThirdParty/CreateAppUserThirdPartyV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppUserThirdPartyClient) CreateAppUserThirdPartysV2(ctx context.Context, in *CreateAppUserThirdPartysRequest, opts ...grpc.CallOption) (*CreateAppUserThirdPartysResponse, error) {
	out := new(CreateAppUserThirdPartysResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.appuserthirdparty.v2.AppUserManagerAppUserThirdParty/CreateAppUserThirdPartysV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppUserThirdPartyClient) UpdateAppUserThirdPartyV2(ctx context.Context, in *UpdateAppUserThirdPartyRequest, opts ...grpc.CallOption) (*UpdateAppUserThirdPartyResponse, error) {
	out := new(UpdateAppUserThirdPartyResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.appuserthirdparty.v2.AppUserManagerAppUserThirdParty/UpdateAppUserThirdPartyV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppUserThirdPartyClient) GetAppUserThirdPartyV2(ctx context.Context, in *GetAppUserThirdPartyRequest, opts ...grpc.CallOption) (*GetAppUserThirdPartyResponse, error) {
	out := new(GetAppUserThirdPartyResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.appuserthirdparty.v2.AppUserManagerAppUserThirdParty/GetAppUserThirdPartyV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppUserThirdPartyClient) GetAppUserThirdPartyOnlyV2(ctx context.Context, in *GetAppUserThirdPartyOnlyRequest, opts ...grpc.CallOption) (*GetAppUserThirdPartyOnlyResponse, error) {
	out := new(GetAppUserThirdPartyOnlyResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.appuserthirdparty.v2.AppUserManagerAppUserThirdParty/GetAppUserThirdPartyOnlyV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppUserThirdPartyClient) GetAppUserThirdPartysV2(ctx context.Context, in *GetAppUserThirdPartysRequest, opts ...grpc.CallOption) (*GetAppUserThirdPartysResponse, error) {
	out := new(GetAppUserThirdPartysResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.appuserthirdparty.v2.AppUserManagerAppUserThirdParty/GetAppUserThirdPartysV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppUserThirdPartyClient) ExistAppUserThirdPartyV2(ctx context.Context, in *ExistAppUserThirdPartyRequest, opts ...grpc.CallOption) (*ExistAppUserThirdPartyResponse, error) {
	out := new(ExistAppUserThirdPartyResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.appuserthirdparty.v2.AppUserManagerAppUserThirdParty/ExistAppUserThirdPartyV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppUserThirdPartyClient) ExistAppUserThirdPartyCondsV2(ctx context.Context, in *ExistAppUserThirdPartyCondsRequest, opts ...grpc.CallOption) (*ExistAppUserThirdPartyCondsResponse, error) {
	out := new(ExistAppUserThirdPartyCondsResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.appuserthirdparty.v2.AppUserManagerAppUserThirdParty/ExistAppUserThirdPartyCondsV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppUserThirdPartyClient) CountAppUserThirdPartysV2(ctx context.Context, in *CountAppUserThirdPartysRequest, opts ...grpc.CallOption) (*CountAppUserThirdPartysResponse, error) {
	out := new(CountAppUserThirdPartysResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.appuserthirdparty.v2.AppUserManagerAppUserThirdParty/CountAppUserThirdPartysV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppUserThirdPartyClient) DeleteAppUserThirdPartyV2(ctx context.Context, in *DeleteAppUserThirdPartyRequest, opts ...grpc.CallOption) (*DeleteAppUserThirdPartyResponse, error) {
	out := new(DeleteAppUserThirdPartyResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.appuserthirdparty.v2.AppUserManagerAppUserThirdParty/DeleteAppUserThirdPartyV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppUserManagerAppUserThirdPartyServer is the server API for AppUserManagerAppUserThirdParty service.
// All implementations must embed UnimplementedAppUserManagerAppUserThirdPartyServer
// for forward compatibility
type AppUserManagerAppUserThirdPartyServer interface {
	CreateAppUserThirdPartyV2(context.Context, *CreateAppUserThirdPartyRequest) (*CreateAppUserThirdPartyResponse, error)
	CreateAppUserThirdPartysV2(context.Context, *CreateAppUserThirdPartysRequest) (*CreateAppUserThirdPartysResponse, error)
	UpdateAppUserThirdPartyV2(context.Context, *UpdateAppUserThirdPartyRequest) (*UpdateAppUserThirdPartyResponse, error)
	GetAppUserThirdPartyV2(context.Context, *GetAppUserThirdPartyRequest) (*GetAppUserThirdPartyResponse, error)
	GetAppUserThirdPartyOnlyV2(context.Context, *GetAppUserThirdPartyOnlyRequest) (*GetAppUserThirdPartyOnlyResponse, error)
	GetAppUserThirdPartysV2(context.Context, *GetAppUserThirdPartysRequest) (*GetAppUserThirdPartysResponse, error)
	ExistAppUserThirdPartyV2(context.Context, *ExistAppUserThirdPartyRequest) (*ExistAppUserThirdPartyResponse, error)
	ExistAppUserThirdPartyCondsV2(context.Context, *ExistAppUserThirdPartyCondsRequest) (*ExistAppUserThirdPartyCondsResponse, error)
	CountAppUserThirdPartysV2(context.Context, *CountAppUserThirdPartysRequest) (*CountAppUserThirdPartysResponse, error)
	DeleteAppUserThirdPartyV2(context.Context, *DeleteAppUserThirdPartyRequest) (*DeleteAppUserThirdPartyResponse, error)
	mustEmbedUnimplementedAppUserManagerAppUserThirdPartyServer()
}

// UnimplementedAppUserManagerAppUserThirdPartyServer must be embedded to have forward compatible implementations.
type UnimplementedAppUserManagerAppUserThirdPartyServer struct {
}

func (UnimplementedAppUserManagerAppUserThirdPartyServer) CreateAppUserThirdPartyV2(context.Context, *CreateAppUserThirdPartyRequest) (*CreateAppUserThirdPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppUserThirdPartyV2 not implemented")
}
func (UnimplementedAppUserManagerAppUserThirdPartyServer) CreateAppUserThirdPartysV2(context.Context, *CreateAppUserThirdPartysRequest) (*CreateAppUserThirdPartysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppUserThirdPartysV2 not implemented")
}
func (UnimplementedAppUserManagerAppUserThirdPartyServer) UpdateAppUserThirdPartyV2(context.Context, *UpdateAppUserThirdPartyRequest) (*UpdateAppUserThirdPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppUserThirdPartyV2 not implemented")
}
func (UnimplementedAppUserManagerAppUserThirdPartyServer) GetAppUserThirdPartyV2(context.Context, *GetAppUserThirdPartyRequest) (*GetAppUserThirdPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppUserThirdPartyV2 not implemented")
}
func (UnimplementedAppUserManagerAppUserThirdPartyServer) GetAppUserThirdPartyOnlyV2(context.Context, *GetAppUserThirdPartyOnlyRequest) (*GetAppUserThirdPartyOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppUserThirdPartyOnlyV2 not implemented")
}
func (UnimplementedAppUserManagerAppUserThirdPartyServer) GetAppUserThirdPartysV2(context.Context, *GetAppUserThirdPartysRequest) (*GetAppUserThirdPartysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppUserThirdPartysV2 not implemented")
}
func (UnimplementedAppUserManagerAppUserThirdPartyServer) ExistAppUserThirdPartyV2(context.Context, *ExistAppUserThirdPartyRequest) (*ExistAppUserThirdPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistAppUserThirdPartyV2 not implemented")
}
func (UnimplementedAppUserManagerAppUserThirdPartyServer) ExistAppUserThirdPartyCondsV2(context.Context, *ExistAppUserThirdPartyCondsRequest) (*ExistAppUserThirdPartyCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistAppUserThirdPartyCondsV2 not implemented")
}
func (UnimplementedAppUserManagerAppUserThirdPartyServer) CountAppUserThirdPartysV2(context.Context, *CountAppUserThirdPartysRequest) (*CountAppUserThirdPartysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAppUserThirdPartysV2 not implemented")
}
func (UnimplementedAppUserManagerAppUserThirdPartyServer) DeleteAppUserThirdPartyV2(context.Context, *DeleteAppUserThirdPartyRequest) (*DeleteAppUserThirdPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppUserThirdPartyV2 not implemented")
}
func (UnimplementedAppUserManagerAppUserThirdPartyServer) mustEmbedUnimplementedAppUserManagerAppUserThirdPartyServer() {
}

// UnsafeAppUserManagerAppUserThirdPartyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppUserManagerAppUserThirdPartyServer will
// result in compilation errors.
type UnsafeAppUserManagerAppUserThirdPartyServer interface {
	mustEmbedUnimplementedAppUserManagerAppUserThirdPartyServer()
}

func RegisterAppUserManagerAppUserThirdPartyServer(s grpc.ServiceRegistrar, srv AppUserManagerAppUserThirdPartyServer) {
	s.RegisterService(&AppUserManagerAppUserThirdParty_ServiceDesc, srv)
}

func _AppUserManagerAppUserThirdParty_CreateAppUserThirdPartyV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppUserThirdPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppUserThirdPartyServer).CreateAppUserThirdPartyV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.appuserthirdparty.v2.AppUserManagerAppUserThirdParty/CreateAppUserThirdPartyV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppUserThirdPartyServer).CreateAppUserThirdPartyV2(ctx, req.(*CreateAppUserThirdPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerAppUserThirdParty_CreateAppUserThirdPartysV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppUserThirdPartysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppUserThirdPartyServer).CreateAppUserThirdPartysV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.appuserthirdparty.v2.AppUserManagerAppUserThirdParty/CreateAppUserThirdPartysV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppUserThirdPartyServer).CreateAppUserThirdPartysV2(ctx, req.(*CreateAppUserThirdPartysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerAppUserThirdParty_UpdateAppUserThirdPartyV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppUserThirdPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppUserThirdPartyServer).UpdateAppUserThirdPartyV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.appuserthirdparty.v2.AppUserManagerAppUserThirdParty/UpdateAppUserThirdPartyV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppUserThirdPartyServer).UpdateAppUserThirdPartyV2(ctx, req.(*UpdateAppUserThirdPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerAppUserThirdParty_GetAppUserThirdPartyV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppUserThirdPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppUserThirdPartyServer).GetAppUserThirdPartyV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.appuserthirdparty.v2.AppUserManagerAppUserThirdParty/GetAppUserThirdPartyV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppUserThirdPartyServer).GetAppUserThirdPartyV2(ctx, req.(*GetAppUserThirdPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerAppUserThirdParty_GetAppUserThirdPartyOnlyV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppUserThirdPartyOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppUserThirdPartyServer).GetAppUserThirdPartyOnlyV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.appuserthirdparty.v2.AppUserManagerAppUserThirdParty/GetAppUserThirdPartyOnlyV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppUserThirdPartyServer).GetAppUserThirdPartyOnlyV2(ctx, req.(*GetAppUserThirdPartyOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerAppUserThirdParty_GetAppUserThirdPartysV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppUserThirdPartysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppUserThirdPartyServer).GetAppUserThirdPartysV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.appuserthirdparty.v2.AppUserManagerAppUserThirdParty/GetAppUserThirdPartysV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppUserThirdPartyServer).GetAppUserThirdPartysV2(ctx, req.(*GetAppUserThirdPartysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerAppUserThirdParty_ExistAppUserThirdPartyV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistAppUserThirdPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppUserThirdPartyServer).ExistAppUserThirdPartyV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.appuserthirdparty.v2.AppUserManagerAppUserThirdParty/ExistAppUserThirdPartyV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppUserThirdPartyServer).ExistAppUserThirdPartyV2(ctx, req.(*ExistAppUserThirdPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerAppUserThirdParty_ExistAppUserThirdPartyCondsV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistAppUserThirdPartyCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppUserThirdPartyServer).ExistAppUserThirdPartyCondsV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.appuserthirdparty.v2.AppUserManagerAppUserThirdParty/ExistAppUserThirdPartyCondsV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppUserThirdPartyServer).ExistAppUserThirdPartyCondsV2(ctx, req.(*ExistAppUserThirdPartyCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerAppUserThirdParty_CountAppUserThirdPartysV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAppUserThirdPartysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppUserThirdPartyServer).CountAppUserThirdPartysV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.appuserthirdparty.v2.AppUserManagerAppUserThirdParty/CountAppUserThirdPartysV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppUserThirdPartyServer).CountAppUserThirdPartysV2(ctx, req.(*CountAppUserThirdPartysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerAppUserThirdParty_DeleteAppUserThirdPartyV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppUserThirdPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppUserThirdPartyServer).DeleteAppUserThirdPartyV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.appuserthirdparty.v2.AppUserManagerAppUserThirdParty/DeleteAppUserThirdPartyV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppUserThirdPartyServer).DeleteAppUserThirdPartyV2(ctx, req.(*DeleteAppUserThirdPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppUserManagerAppUserThirdParty_ServiceDesc is the grpc.ServiceDesc for AppUserManagerAppUserThirdParty service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppUserManagerAppUserThirdParty_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app.user.manager.appuserthirdparty.v2.AppUserManagerAppUserThirdParty",
	HandlerType: (*AppUserManagerAppUserThirdPartyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAppUserThirdPartyV2",
			Handler:    _AppUserManagerAppUserThirdParty_CreateAppUserThirdPartyV2_Handler,
		},
		{
			MethodName: "CreateAppUserThirdPartysV2",
			Handler:    _AppUserManagerAppUserThirdParty_CreateAppUserThirdPartysV2_Handler,
		},
		{
			MethodName: "UpdateAppUserThirdPartyV2",
			Handler:    _AppUserManagerAppUserThirdParty_UpdateAppUserThirdPartyV2_Handler,
		},
		{
			MethodName: "GetAppUserThirdPartyV2",
			Handler:    _AppUserManagerAppUserThirdParty_GetAppUserThirdPartyV2_Handler,
		},
		{
			MethodName: "GetAppUserThirdPartyOnlyV2",
			Handler:    _AppUserManagerAppUserThirdParty_GetAppUserThirdPartyOnlyV2_Handler,
		},
		{
			MethodName: "GetAppUserThirdPartysV2",
			Handler:    _AppUserManagerAppUserThirdParty_GetAppUserThirdPartysV2_Handler,
		},
		{
			MethodName: "ExistAppUserThirdPartyV2",
			Handler:    _AppUserManagerAppUserThirdParty_ExistAppUserThirdPartyV2_Handler,
		},
		{
			MethodName: "ExistAppUserThirdPartyCondsV2",
			Handler:    _AppUserManagerAppUserThirdParty_ExistAppUserThirdPartyCondsV2_Handler,
		},
		{
			MethodName: "CountAppUserThirdPartysV2",
			Handler:    _AppUserManagerAppUserThirdParty_CountAppUserThirdPartysV2_Handler,
		},
		{
			MethodName: "DeleteAppUserThirdPartyV2",
			Handler:    _AppUserManagerAppUserThirdParty_DeleteAppUserThirdPartyV2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/appuser/mgr/v2/appuserthirdparty/appuserthirdparty.proto",
}
