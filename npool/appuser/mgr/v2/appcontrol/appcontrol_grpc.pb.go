// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/appuser/mgr/v2/appcontrol/appcontrol.proto

package appcontrol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppControlMgrClient is the client API for AppControlMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppControlMgrClient interface {
	CreateAppControl(ctx context.Context, in *CreateAppControlRequest, opts ...grpc.CallOption) (*CreateAppControlResponse, error)
	CreateAppControls(ctx context.Context, in *CreateAppControlsRequest, opts ...grpc.CallOption) (*CreateAppControlsResponse, error)
	UpdateAppControl(ctx context.Context, in *UpdateAppControlRequest, opts ...grpc.CallOption) (*UpdateAppControlResponse, error)
	GetAppControl(ctx context.Context, in *GetAppControlRequest, opts ...grpc.CallOption) (*GetAppControlResponse, error)
	GetAppControlOnly(ctx context.Context, in *GetAppControlOnlyRequest, opts ...grpc.CallOption) (*GetAppControlOnlyResponse, error)
	GetAppControls(ctx context.Context, in *GetAppControlsRequest, opts ...grpc.CallOption) (*GetAppControlsResponse, error)
	ExistAppControl(ctx context.Context, in *ExistAppControlRequest, opts ...grpc.CallOption) (*ExistAppControlResponse, error)
	ExistAppControlConds(ctx context.Context, in *ExistAppControlCondsRequest, opts ...grpc.CallOption) (*ExistAppControlCondsResponse, error)
	CountAppControls(ctx context.Context, in *CountAppControlsRequest, opts ...grpc.CallOption) (*CountAppControlsResponse, error)
	DeleteAppControl(ctx context.Context, in *DeleteAppControlRequest, opts ...grpc.CallOption) (*DeleteAppControlResponse, error)
}

type appControlMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewAppControlMgrClient(cc grpc.ClientConnInterface) AppControlMgrClient {
	return &appControlMgrClient{cc}
}

func (c *appControlMgrClient) CreateAppControl(ctx context.Context, in *CreateAppControlRequest, opts ...grpc.CallOption) (*CreateAppControlResponse, error) {
	out := new(CreateAppControlResponse)
	err := c.cc.Invoke(ctx, "/app.manager.appcontrol.v2.AppControlMgr/CreateAppControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appControlMgrClient) CreateAppControls(ctx context.Context, in *CreateAppControlsRequest, opts ...grpc.CallOption) (*CreateAppControlsResponse, error) {
	out := new(CreateAppControlsResponse)
	err := c.cc.Invoke(ctx, "/app.manager.appcontrol.v2.AppControlMgr/CreateAppControls", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appControlMgrClient) UpdateAppControl(ctx context.Context, in *UpdateAppControlRequest, opts ...grpc.CallOption) (*UpdateAppControlResponse, error) {
	out := new(UpdateAppControlResponse)
	err := c.cc.Invoke(ctx, "/app.manager.appcontrol.v2.AppControlMgr/UpdateAppControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appControlMgrClient) GetAppControl(ctx context.Context, in *GetAppControlRequest, opts ...grpc.CallOption) (*GetAppControlResponse, error) {
	out := new(GetAppControlResponse)
	err := c.cc.Invoke(ctx, "/app.manager.appcontrol.v2.AppControlMgr/GetAppControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appControlMgrClient) GetAppControlOnly(ctx context.Context, in *GetAppControlOnlyRequest, opts ...grpc.CallOption) (*GetAppControlOnlyResponse, error) {
	out := new(GetAppControlOnlyResponse)
	err := c.cc.Invoke(ctx, "/app.manager.appcontrol.v2.AppControlMgr/GetAppControlOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appControlMgrClient) GetAppControls(ctx context.Context, in *GetAppControlsRequest, opts ...grpc.CallOption) (*GetAppControlsResponse, error) {
	out := new(GetAppControlsResponse)
	err := c.cc.Invoke(ctx, "/app.manager.appcontrol.v2.AppControlMgr/GetAppControls", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appControlMgrClient) ExistAppControl(ctx context.Context, in *ExistAppControlRequest, opts ...grpc.CallOption) (*ExistAppControlResponse, error) {
	out := new(ExistAppControlResponse)
	err := c.cc.Invoke(ctx, "/app.manager.appcontrol.v2.AppControlMgr/ExistAppControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appControlMgrClient) ExistAppControlConds(ctx context.Context, in *ExistAppControlCondsRequest, opts ...grpc.CallOption) (*ExistAppControlCondsResponse, error) {
	out := new(ExistAppControlCondsResponse)
	err := c.cc.Invoke(ctx, "/app.manager.appcontrol.v2.AppControlMgr/ExistAppControlConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appControlMgrClient) CountAppControls(ctx context.Context, in *CountAppControlsRequest, opts ...grpc.CallOption) (*CountAppControlsResponse, error) {
	out := new(CountAppControlsResponse)
	err := c.cc.Invoke(ctx, "/app.manager.appcontrol.v2.AppControlMgr/CountAppControls", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appControlMgrClient) DeleteAppControl(ctx context.Context, in *DeleteAppControlRequest, opts ...grpc.CallOption) (*DeleteAppControlResponse, error) {
	out := new(DeleteAppControlResponse)
	err := c.cc.Invoke(ctx, "/app.manager.appcontrol.v2.AppControlMgr/DeleteAppControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppControlMgrServer is the server API for AppControlMgr service.
// All implementations must embed UnimplementedAppControlMgrServer
// for forward compatibility
type AppControlMgrServer interface {
	CreateAppControl(context.Context, *CreateAppControlRequest) (*CreateAppControlResponse, error)
	CreateAppControls(context.Context, *CreateAppControlsRequest) (*CreateAppControlsResponse, error)
	UpdateAppControl(context.Context, *UpdateAppControlRequest) (*UpdateAppControlResponse, error)
	GetAppControl(context.Context, *GetAppControlRequest) (*GetAppControlResponse, error)
	GetAppControlOnly(context.Context, *GetAppControlOnlyRequest) (*GetAppControlOnlyResponse, error)
	GetAppControls(context.Context, *GetAppControlsRequest) (*GetAppControlsResponse, error)
	ExistAppControl(context.Context, *ExistAppControlRequest) (*ExistAppControlResponse, error)
	ExistAppControlConds(context.Context, *ExistAppControlCondsRequest) (*ExistAppControlCondsResponse, error)
	CountAppControls(context.Context, *CountAppControlsRequest) (*CountAppControlsResponse, error)
	DeleteAppControl(context.Context, *DeleteAppControlRequest) (*DeleteAppControlResponse, error)
	mustEmbedUnimplementedAppControlMgrServer()
}

// UnimplementedAppControlMgrServer must be embedded to have forward compatible implementations.
type UnimplementedAppControlMgrServer struct {
}

func (UnimplementedAppControlMgrServer) CreateAppControl(context.Context, *CreateAppControlRequest) (*CreateAppControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppControl not implemented")
}
func (UnimplementedAppControlMgrServer) CreateAppControls(context.Context, *CreateAppControlsRequest) (*CreateAppControlsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppControls not implemented")
}
func (UnimplementedAppControlMgrServer) UpdateAppControl(context.Context, *UpdateAppControlRequest) (*UpdateAppControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppControl not implemented")
}
func (UnimplementedAppControlMgrServer) GetAppControl(context.Context, *GetAppControlRequest) (*GetAppControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppControl not implemented")
}
func (UnimplementedAppControlMgrServer) GetAppControlOnly(context.Context, *GetAppControlOnlyRequest) (*GetAppControlOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppControlOnly not implemented")
}
func (UnimplementedAppControlMgrServer) GetAppControls(context.Context, *GetAppControlsRequest) (*GetAppControlsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppControls not implemented")
}
func (UnimplementedAppControlMgrServer) ExistAppControl(context.Context, *ExistAppControlRequest) (*ExistAppControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistAppControl not implemented")
}
func (UnimplementedAppControlMgrServer) ExistAppControlConds(context.Context, *ExistAppControlCondsRequest) (*ExistAppControlCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistAppControlConds not implemented")
}
func (UnimplementedAppControlMgrServer) CountAppControls(context.Context, *CountAppControlsRequest) (*CountAppControlsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAppControls not implemented")
}
func (UnimplementedAppControlMgrServer) DeleteAppControl(context.Context, *DeleteAppControlRequest) (*DeleteAppControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppControl not implemented")
}
func (UnimplementedAppControlMgrServer) mustEmbedUnimplementedAppControlMgrServer() {}

// UnsafeAppControlMgrServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppControlMgrServer will
// result in compilation errors.
type UnsafeAppControlMgrServer interface {
	mustEmbedUnimplementedAppControlMgrServer()
}

func RegisterAppControlMgrServer(s grpc.ServiceRegistrar, srv AppControlMgrServer) {
	s.RegisterService(&AppControlMgr_ServiceDesc, srv)
}

func _AppControlMgr_CreateAppControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppControlMgrServer).CreateAppControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.manager.appcontrol.v2.AppControlMgr/CreateAppControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppControlMgrServer).CreateAppControl(ctx, req.(*CreateAppControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppControlMgr_CreateAppControls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppControlsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppControlMgrServer).CreateAppControls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.manager.appcontrol.v2.AppControlMgr/CreateAppControls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppControlMgrServer).CreateAppControls(ctx, req.(*CreateAppControlsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppControlMgr_UpdateAppControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppControlMgrServer).UpdateAppControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.manager.appcontrol.v2.AppControlMgr/UpdateAppControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppControlMgrServer).UpdateAppControl(ctx, req.(*UpdateAppControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppControlMgr_GetAppControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppControlMgrServer).GetAppControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.manager.appcontrol.v2.AppControlMgr/GetAppControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppControlMgrServer).GetAppControl(ctx, req.(*GetAppControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppControlMgr_GetAppControlOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppControlOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppControlMgrServer).GetAppControlOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.manager.appcontrol.v2.AppControlMgr/GetAppControlOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppControlMgrServer).GetAppControlOnly(ctx, req.(*GetAppControlOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppControlMgr_GetAppControls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppControlsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppControlMgrServer).GetAppControls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.manager.appcontrol.v2.AppControlMgr/GetAppControls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppControlMgrServer).GetAppControls(ctx, req.(*GetAppControlsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppControlMgr_ExistAppControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistAppControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppControlMgrServer).ExistAppControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.manager.appcontrol.v2.AppControlMgr/ExistAppControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppControlMgrServer).ExistAppControl(ctx, req.(*ExistAppControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppControlMgr_ExistAppControlConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistAppControlCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppControlMgrServer).ExistAppControlConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.manager.appcontrol.v2.AppControlMgr/ExistAppControlConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppControlMgrServer).ExistAppControlConds(ctx, req.(*ExistAppControlCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppControlMgr_CountAppControls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAppControlsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppControlMgrServer).CountAppControls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.manager.appcontrol.v2.AppControlMgr/CountAppControls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppControlMgrServer).CountAppControls(ctx, req.(*CountAppControlsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppControlMgr_DeleteAppControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppControlMgrServer).DeleteAppControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.manager.appcontrol.v2.AppControlMgr/DeleteAppControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppControlMgrServer).DeleteAppControl(ctx, req.(*DeleteAppControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppControlMgr_ServiceDesc is the grpc.ServiceDesc for AppControlMgr service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppControlMgr_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app.manager.appcontrol.v2.AppControlMgr",
	HandlerType: (*AppControlMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAppControl",
			Handler:    _AppControlMgr_CreateAppControl_Handler,
		},
		{
			MethodName: "CreateAppControls",
			Handler:    _AppControlMgr_CreateAppControls_Handler,
		},
		{
			MethodName: "UpdateAppControl",
			Handler:    _AppControlMgr_UpdateAppControl_Handler,
		},
		{
			MethodName: "GetAppControl",
			Handler:    _AppControlMgr_GetAppControl_Handler,
		},
		{
			MethodName: "GetAppControlOnly",
			Handler:    _AppControlMgr_GetAppControlOnly_Handler,
		},
		{
			MethodName: "GetAppControls",
			Handler:    _AppControlMgr_GetAppControls_Handler,
		},
		{
			MethodName: "ExistAppControl",
			Handler:    _AppControlMgr_ExistAppControl_Handler,
		},
		{
			MethodName: "ExistAppControlConds",
			Handler:    _AppControlMgr_ExistAppControlConds_Handler,
		},
		{
			MethodName: "CountAppControls",
			Handler:    _AppControlMgr_CountAppControls_Handler,
		},
		{
			MethodName: "DeleteAppControl",
			Handler:    _AppControlMgr_DeleteAppControl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/appuser/mgr/v2/appcontrol/appcontrol.proto",
}
