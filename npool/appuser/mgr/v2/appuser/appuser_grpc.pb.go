// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/appusermgrv2/appuser/appuser.proto

package appuser

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppUserManagerAppUserClient is the client API for AppUserManagerAppUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppUserManagerAppUserClient interface {
	CreateAppUserV2(ctx context.Context, in *CreateAppUserRequest, opts ...grpc.CallOption) (*CreateAppUserResponse, error)
	CreateAppUsersV2(ctx context.Context, in *CreateAppUsersRequest, opts ...grpc.CallOption) (*CreateAppUsersResponse, error)
	UpdateAppUserV2(ctx context.Context, in *UpdateAppUserRequest, opts ...grpc.CallOption) (*UpdateAppUserResponse, error)
	GetAppUserV2(ctx context.Context, in *GetAppUserRequest, opts ...grpc.CallOption) (*GetAppUserResponse, error)
	GetAppUserOnlyV2(ctx context.Context, in *GetAppUserOnlyRequest, opts ...grpc.CallOption) (*GetAppUserOnlyResponse, error)
	GetAppUsersV2(ctx context.Context, in *GetAppUsersRequest, opts ...grpc.CallOption) (*GetAppUsersResponse, error)
	ExistAppUserV2(ctx context.Context, in *ExistAppUserRequest, opts ...grpc.CallOption) (*ExistAppUserResponse, error)
	ExistAppUserCondsV2(ctx context.Context, in *ExistAppUserCondsRequest, opts ...grpc.CallOption) (*ExistAppUserCondsResponse, error)
	CountAppUsersV2(ctx context.Context, in *CountAppUsersRequest, opts ...grpc.CallOption) (*CountAppUsersResponse, error)
	DeleteAppUserV2(ctx context.Context, in *DeleteAppUserRequest, opts ...grpc.CallOption) (*DeleteAppUserResponse, error)
}

type appUserManagerAppUserClient struct {
	cc grpc.ClientConnInterface
}

func NewAppUserManagerAppUserClient(cc grpc.ClientConnInterface) AppUserManagerAppUserClient {
	return &appUserManagerAppUserClient{cc}
}

func (c *appUserManagerAppUserClient) CreateAppUserV2(ctx context.Context, in *CreateAppUserRequest, opts ...grpc.CallOption) (*CreateAppUserResponse, error) {
	out := new(CreateAppUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.appuser.v2.AppUserManagerAppUser/CreateAppUserV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppUserClient) CreateAppUsersV2(ctx context.Context, in *CreateAppUsersRequest, opts ...grpc.CallOption) (*CreateAppUsersResponse, error) {
	out := new(CreateAppUsersResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.appuser.v2.AppUserManagerAppUser/CreateAppUsersV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppUserClient) UpdateAppUserV2(ctx context.Context, in *UpdateAppUserRequest, opts ...grpc.CallOption) (*UpdateAppUserResponse, error) {
	out := new(UpdateAppUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.appuser.v2.AppUserManagerAppUser/UpdateAppUserV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppUserClient) GetAppUserV2(ctx context.Context, in *GetAppUserRequest, opts ...grpc.CallOption) (*GetAppUserResponse, error) {
	out := new(GetAppUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.appuser.v2.AppUserManagerAppUser/GetAppUserV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppUserClient) GetAppUserOnlyV2(ctx context.Context, in *GetAppUserOnlyRequest, opts ...grpc.CallOption) (*GetAppUserOnlyResponse, error) {
	out := new(GetAppUserOnlyResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.appuser.v2.AppUserManagerAppUser/GetAppUserOnlyV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppUserClient) GetAppUsersV2(ctx context.Context, in *GetAppUsersRequest, opts ...grpc.CallOption) (*GetAppUsersResponse, error) {
	out := new(GetAppUsersResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.appuser.v2.AppUserManagerAppUser/GetAppUsersV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppUserClient) ExistAppUserV2(ctx context.Context, in *ExistAppUserRequest, opts ...grpc.CallOption) (*ExistAppUserResponse, error) {
	out := new(ExistAppUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.appuser.v2.AppUserManagerAppUser/ExistAppUserV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppUserClient) ExistAppUserCondsV2(ctx context.Context, in *ExistAppUserCondsRequest, opts ...grpc.CallOption) (*ExistAppUserCondsResponse, error) {
	out := new(ExistAppUserCondsResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.appuser.v2.AppUserManagerAppUser/ExistAppUserCondsV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppUserClient) CountAppUsersV2(ctx context.Context, in *CountAppUsersRequest, opts ...grpc.CallOption) (*CountAppUsersResponse, error) {
	out := new(CountAppUsersResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.appuser.v2.AppUserManagerAppUser/CountAppUsersV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppUserClient) DeleteAppUserV2(ctx context.Context, in *DeleteAppUserRequest, opts ...grpc.CallOption) (*DeleteAppUserResponse, error) {
	out := new(DeleteAppUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.appuser.v2.AppUserManagerAppUser/DeleteAppUserV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppUserManagerAppUserServer is the server API for AppUserManagerAppUser service.
// All implementations must embed UnimplementedAppUserManagerAppUserServer
// for forward compatibility
type AppUserManagerAppUserServer interface {
	CreateAppUserV2(context.Context, *CreateAppUserRequest) (*CreateAppUserResponse, error)
	CreateAppUsersV2(context.Context, *CreateAppUsersRequest) (*CreateAppUsersResponse, error)
	UpdateAppUserV2(context.Context, *UpdateAppUserRequest) (*UpdateAppUserResponse, error)
	GetAppUserV2(context.Context, *GetAppUserRequest) (*GetAppUserResponse, error)
	GetAppUserOnlyV2(context.Context, *GetAppUserOnlyRequest) (*GetAppUserOnlyResponse, error)
	GetAppUsersV2(context.Context, *GetAppUsersRequest) (*GetAppUsersResponse, error)
	ExistAppUserV2(context.Context, *ExistAppUserRequest) (*ExistAppUserResponse, error)
	ExistAppUserCondsV2(context.Context, *ExistAppUserCondsRequest) (*ExistAppUserCondsResponse, error)
	CountAppUsersV2(context.Context, *CountAppUsersRequest) (*CountAppUsersResponse, error)
	DeleteAppUserV2(context.Context, *DeleteAppUserRequest) (*DeleteAppUserResponse, error)
	mustEmbedUnimplementedAppUserManagerAppUserServer()
}

// UnimplementedAppUserManagerAppUserServer must be embedded to have forward compatible implementations.
type UnimplementedAppUserManagerAppUserServer struct {
}

func (UnimplementedAppUserManagerAppUserServer) CreateAppUserV2(context.Context, *CreateAppUserRequest) (*CreateAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppUserV2 not implemented")
}
func (UnimplementedAppUserManagerAppUserServer) CreateAppUsersV2(context.Context, *CreateAppUsersRequest) (*CreateAppUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppUsersV2 not implemented")
}
func (UnimplementedAppUserManagerAppUserServer) UpdateAppUserV2(context.Context, *UpdateAppUserRequest) (*UpdateAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppUserV2 not implemented")
}
func (UnimplementedAppUserManagerAppUserServer) GetAppUserV2(context.Context, *GetAppUserRequest) (*GetAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppUserV2 not implemented")
}
func (UnimplementedAppUserManagerAppUserServer) GetAppUserOnlyV2(context.Context, *GetAppUserOnlyRequest) (*GetAppUserOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppUserOnlyV2 not implemented")
}
func (UnimplementedAppUserManagerAppUserServer) GetAppUsersV2(context.Context, *GetAppUsersRequest) (*GetAppUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppUsersV2 not implemented")
}
func (UnimplementedAppUserManagerAppUserServer) ExistAppUserV2(context.Context, *ExistAppUserRequest) (*ExistAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistAppUserV2 not implemented")
}
func (UnimplementedAppUserManagerAppUserServer) ExistAppUserCondsV2(context.Context, *ExistAppUserCondsRequest) (*ExistAppUserCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistAppUserCondsV2 not implemented")
}
func (UnimplementedAppUserManagerAppUserServer) CountAppUsersV2(context.Context, *CountAppUsersRequest) (*CountAppUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAppUsersV2 not implemented")
}
func (UnimplementedAppUserManagerAppUserServer) DeleteAppUserV2(context.Context, *DeleteAppUserRequest) (*DeleteAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppUserV2 not implemented")
}
func (UnimplementedAppUserManagerAppUserServer) mustEmbedUnimplementedAppUserManagerAppUserServer() {}

// UnsafeAppUserManagerAppUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppUserManagerAppUserServer will
// result in compilation errors.
type UnsafeAppUserManagerAppUserServer interface {
	mustEmbedUnimplementedAppUserManagerAppUserServer()
}

func RegisterAppUserManagerAppUserServer(s grpc.ServiceRegistrar, srv AppUserManagerAppUserServer) {
	s.RegisterService(&AppUserManagerAppUser_ServiceDesc, srv)
}

func _AppUserManagerAppUser_CreateAppUserV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppUserServer).CreateAppUserV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.appuser.v2.AppUserManagerAppUser/CreateAppUserV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppUserServer).CreateAppUserV2(ctx, req.(*CreateAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerAppUser_CreateAppUsersV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppUserServer).CreateAppUsersV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.appuser.v2.AppUserManagerAppUser/CreateAppUsersV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppUserServer).CreateAppUsersV2(ctx, req.(*CreateAppUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerAppUser_UpdateAppUserV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppUserServer).UpdateAppUserV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.appuser.v2.AppUserManagerAppUser/UpdateAppUserV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppUserServer).UpdateAppUserV2(ctx, req.(*UpdateAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerAppUser_GetAppUserV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppUserServer).GetAppUserV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.appuser.v2.AppUserManagerAppUser/GetAppUserV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppUserServer).GetAppUserV2(ctx, req.(*GetAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerAppUser_GetAppUserOnlyV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppUserOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppUserServer).GetAppUserOnlyV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.appuser.v2.AppUserManagerAppUser/GetAppUserOnlyV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppUserServer).GetAppUserOnlyV2(ctx, req.(*GetAppUserOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerAppUser_GetAppUsersV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppUserServer).GetAppUsersV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.appuser.v2.AppUserManagerAppUser/GetAppUsersV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppUserServer).GetAppUsersV2(ctx, req.(*GetAppUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerAppUser_ExistAppUserV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppUserServer).ExistAppUserV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.appuser.v2.AppUserManagerAppUser/ExistAppUserV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppUserServer).ExistAppUserV2(ctx, req.(*ExistAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerAppUser_ExistAppUserCondsV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistAppUserCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppUserServer).ExistAppUserCondsV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.appuser.v2.AppUserManagerAppUser/ExistAppUserCondsV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppUserServer).ExistAppUserCondsV2(ctx, req.(*ExistAppUserCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerAppUser_CountAppUsersV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAppUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppUserServer).CountAppUsersV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.appuser.v2.AppUserManagerAppUser/CountAppUsersV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppUserServer).CountAppUsersV2(ctx, req.(*CountAppUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerAppUser_DeleteAppUserV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppUserServer).DeleteAppUserV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.appuser.v2.AppUserManagerAppUser/DeleteAppUserV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppUserServer).DeleteAppUserV2(ctx, req.(*DeleteAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppUserManagerAppUser_ServiceDesc is the grpc.ServiceDesc for AppUserManagerAppUser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppUserManagerAppUser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app.user.manager.appuser.v2.AppUserManagerAppUser",
	HandlerType: (*AppUserManagerAppUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAppUserV2",
			Handler:    _AppUserManagerAppUser_CreateAppUserV2_Handler,
		},
		{
			MethodName: "CreateAppUsersV2",
			Handler:    _AppUserManagerAppUser_CreateAppUsersV2_Handler,
		},
		{
			MethodName: "UpdateAppUserV2",
			Handler:    _AppUserManagerAppUser_UpdateAppUserV2_Handler,
		},
		{
			MethodName: "GetAppUserV2",
			Handler:    _AppUserManagerAppUser_GetAppUserV2_Handler,
		},
		{
			MethodName: "GetAppUserOnlyV2",
			Handler:    _AppUserManagerAppUser_GetAppUserOnlyV2_Handler,
		},
		{
			MethodName: "GetAppUsersV2",
			Handler:    _AppUserManagerAppUser_GetAppUsersV2_Handler,
		},
		{
			MethodName: "ExistAppUserV2",
			Handler:    _AppUserManagerAppUser_ExistAppUserV2_Handler,
		},
		{
			MethodName: "ExistAppUserCondsV2",
			Handler:    _AppUserManagerAppUser_ExistAppUserCondsV2_Handler,
		},
		{
			MethodName: "CountAppUsersV2",
			Handler:    _AppUserManagerAppUser_CountAppUsersV2_Handler,
		},
		{
			MethodName: "DeleteAppUserV2",
			Handler:    _AppUserManagerAppUser_DeleteAppUserV2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/appusermgrv2/appuser/appuser.proto",
}
