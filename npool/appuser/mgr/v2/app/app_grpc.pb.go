// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/appuser/mgr/v2/app/app.proto

package app

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppMgrClient is the client API for AppMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppMgrClient interface {
	CreateApp(ctx context.Context, in *CreateAppRequest, opts ...grpc.CallOption) (*CreateAppResponse, error)
	CreateApps(ctx context.Context, in *CreateAppsRequest, opts ...grpc.CallOption) (*CreateAppsResponse, error)
	UpdateApp(ctx context.Context, in *UpdateAppRequest, opts ...grpc.CallOption) (*UpdateAppResponse, error)
	GetApp(ctx context.Context, in *GetAppRequest, opts ...grpc.CallOption) (*GetAppResponse, error)
	GetAppOnly(ctx context.Context, in *GetAppOnlyRequest, opts ...grpc.CallOption) (*GetAppOnlyResponse, error)
	GetApps(ctx context.Context, in *GetAppsRequest, opts ...grpc.CallOption) (*GetAppsResponse, error)
	ExistApp(ctx context.Context, in *ExistAppRequest, opts ...grpc.CallOption) (*ExistAppResponse, error)
	ExistAppConds(ctx context.Context, in *ExistAppCondsRequest, opts ...grpc.CallOption) (*ExistAppCondsResponse, error)
	CountApps(ctx context.Context, in *CountAppsRequest, opts ...grpc.CallOption) (*CountAppsResponse, error)
	DeleteApp(ctx context.Context, in *DeleteAppRequest, opts ...grpc.CallOption) (*DeleteAppResponse, error)
}

type appMgrClient struct {
	cc grpc.ClientConnInterface
}

func NewAppMgrClient(cc grpc.ClientConnInterface) AppMgrClient {
	return &appMgrClient{cc}
}

func (c *appMgrClient) CreateApp(ctx context.Context, in *CreateAppRequest, opts ...grpc.CallOption) (*CreateAppResponse, error) {
	out := new(CreateAppResponse)
	err := c.cc.Invoke(ctx, "/appuser.manager.app.v2.AppMgr/CreateApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgrClient) CreateApps(ctx context.Context, in *CreateAppsRequest, opts ...grpc.CallOption) (*CreateAppsResponse, error) {
	out := new(CreateAppsResponse)
	err := c.cc.Invoke(ctx, "/appuser.manager.app.v2.AppMgr/CreateApps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgrClient) UpdateApp(ctx context.Context, in *UpdateAppRequest, opts ...grpc.CallOption) (*UpdateAppResponse, error) {
	out := new(UpdateAppResponse)
	err := c.cc.Invoke(ctx, "/appuser.manager.app.v2.AppMgr/UpdateApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgrClient) GetApp(ctx context.Context, in *GetAppRequest, opts ...grpc.CallOption) (*GetAppResponse, error) {
	out := new(GetAppResponse)
	err := c.cc.Invoke(ctx, "/appuser.manager.app.v2.AppMgr/GetApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgrClient) GetAppOnly(ctx context.Context, in *GetAppOnlyRequest, opts ...grpc.CallOption) (*GetAppOnlyResponse, error) {
	out := new(GetAppOnlyResponse)
	err := c.cc.Invoke(ctx, "/appuser.manager.app.v2.AppMgr/GetAppOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgrClient) GetApps(ctx context.Context, in *GetAppsRequest, opts ...grpc.CallOption) (*GetAppsResponse, error) {
	out := new(GetAppsResponse)
	err := c.cc.Invoke(ctx, "/appuser.manager.app.v2.AppMgr/GetApps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgrClient) ExistApp(ctx context.Context, in *ExistAppRequest, opts ...grpc.CallOption) (*ExistAppResponse, error) {
	out := new(ExistAppResponse)
	err := c.cc.Invoke(ctx, "/appuser.manager.app.v2.AppMgr/ExistApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgrClient) ExistAppConds(ctx context.Context, in *ExistAppCondsRequest, opts ...grpc.CallOption) (*ExistAppCondsResponse, error) {
	out := new(ExistAppCondsResponse)
	err := c.cc.Invoke(ctx, "/appuser.manager.app.v2.AppMgr/ExistAppConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgrClient) CountApps(ctx context.Context, in *CountAppsRequest, opts ...grpc.CallOption) (*CountAppsResponse, error) {
	out := new(CountAppsResponse)
	err := c.cc.Invoke(ctx, "/appuser.manager.app.v2.AppMgr/CountApps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appMgrClient) DeleteApp(ctx context.Context, in *DeleteAppRequest, opts ...grpc.CallOption) (*DeleteAppResponse, error) {
	out := new(DeleteAppResponse)
	err := c.cc.Invoke(ctx, "/appuser.manager.app.v2.AppMgr/DeleteApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppMgrServer is the server API for AppMgr service.
// All implementations must embed UnimplementedAppMgrServer
// for forward compatibility
type AppMgrServer interface {
	CreateApp(context.Context, *CreateAppRequest) (*CreateAppResponse, error)
	CreateApps(context.Context, *CreateAppsRequest) (*CreateAppsResponse, error)
	UpdateApp(context.Context, *UpdateAppRequest) (*UpdateAppResponse, error)
	GetApp(context.Context, *GetAppRequest) (*GetAppResponse, error)
	GetAppOnly(context.Context, *GetAppOnlyRequest) (*GetAppOnlyResponse, error)
	GetApps(context.Context, *GetAppsRequest) (*GetAppsResponse, error)
	ExistApp(context.Context, *ExistAppRequest) (*ExistAppResponse, error)
	ExistAppConds(context.Context, *ExistAppCondsRequest) (*ExistAppCondsResponse, error)
	CountApps(context.Context, *CountAppsRequest) (*CountAppsResponse, error)
	DeleteApp(context.Context, *DeleteAppRequest) (*DeleteAppResponse, error)
	mustEmbedUnimplementedAppMgrServer()
}

// UnimplementedAppMgrServer must be embedded to have forward compatible implementations.
type UnimplementedAppMgrServer struct {
}

func (UnimplementedAppMgrServer) CreateApp(context.Context, *CreateAppRequest) (*CreateAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApp not implemented")
}
func (UnimplementedAppMgrServer) CreateApps(context.Context, *CreateAppsRequest) (*CreateAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApps not implemented")
}
func (UnimplementedAppMgrServer) UpdateApp(context.Context, *UpdateAppRequest) (*UpdateAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApp not implemented")
}
func (UnimplementedAppMgrServer) GetApp(context.Context, *GetAppRequest) (*GetAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApp not implemented")
}
func (UnimplementedAppMgrServer) GetAppOnly(context.Context, *GetAppOnlyRequest) (*GetAppOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppOnly not implemented")
}
func (UnimplementedAppMgrServer) GetApps(context.Context, *GetAppsRequest) (*GetAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApps not implemented")
}
func (UnimplementedAppMgrServer) ExistApp(context.Context, *ExistAppRequest) (*ExistAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistApp not implemented")
}
func (UnimplementedAppMgrServer) ExistAppConds(context.Context, *ExistAppCondsRequest) (*ExistAppCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistAppConds not implemented")
}
func (UnimplementedAppMgrServer) CountApps(context.Context, *CountAppsRequest) (*CountAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountApps not implemented")
}
func (UnimplementedAppMgrServer) DeleteApp(context.Context, *DeleteAppRequest) (*DeleteAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApp not implemented")
}
func (UnimplementedAppMgrServer) mustEmbedUnimplementedAppMgrServer() {}

// UnsafeAppMgrServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppMgrServer will
// result in compilation errors.
type UnsafeAppMgrServer interface {
	mustEmbedUnimplementedAppMgrServer()
}

func RegisterAppMgrServer(s grpc.ServiceRegistrar, srv AppMgrServer) {
	s.RegisterService(&AppMgr_ServiceDesc, srv)
}

func _AppMgr_CreateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMgrServer).CreateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.manager.app.v2.AppMgr/CreateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMgrServer).CreateApp(ctx, req.(*CreateAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMgr_CreateApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMgrServer).CreateApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.manager.app.v2.AppMgr/CreateApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMgrServer).CreateApps(ctx, req.(*CreateAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMgr_UpdateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMgrServer).UpdateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.manager.app.v2.AppMgr/UpdateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMgrServer).UpdateApp(ctx, req.(*UpdateAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMgr_GetApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMgrServer).GetApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.manager.app.v2.AppMgr/GetApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMgrServer).GetApp(ctx, req.(*GetAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMgr_GetAppOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMgrServer).GetAppOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.manager.app.v2.AppMgr/GetAppOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMgrServer).GetAppOnly(ctx, req.(*GetAppOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMgr_GetApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMgrServer).GetApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.manager.app.v2.AppMgr/GetApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMgrServer).GetApps(ctx, req.(*GetAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMgr_ExistApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMgrServer).ExistApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.manager.app.v2.AppMgr/ExistApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMgrServer).ExistApp(ctx, req.(*ExistAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMgr_ExistAppConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistAppCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMgrServer).ExistAppConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.manager.app.v2.AppMgr/ExistAppConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMgrServer).ExistAppConds(ctx, req.(*ExistAppCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMgr_CountApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMgrServer).CountApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.manager.app.v2.AppMgr/CountApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMgrServer).CountApps(ctx, req.(*CountAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppMgr_DeleteApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppMgrServer).DeleteApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.manager.app.v2.AppMgr/DeleteApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppMgrServer).DeleteApp(ctx, req.(*DeleteAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppMgr_ServiceDesc is the grpc.ServiceDesc for AppMgr service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppMgr_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "appuser.manager.app.v2.AppMgr",
	HandlerType: (*AppMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateApp",
			Handler:    _AppMgr_CreateApp_Handler,
		},
		{
			MethodName: "CreateApps",
			Handler:    _AppMgr_CreateApps_Handler,
		},
		{
			MethodName: "UpdateApp",
			Handler:    _AppMgr_UpdateApp_Handler,
		},
		{
			MethodName: "GetApp",
			Handler:    _AppMgr_GetApp_Handler,
		},
		{
			MethodName: "GetAppOnly",
			Handler:    _AppMgr_GetAppOnly_Handler,
		},
		{
			MethodName: "GetApps",
			Handler:    _AppMgr_GetApps_Handler,
		},
		{
			MethodName: "ExistApp",
			Handler:    _AppMgr_ExistApp_Handler,
		},
		{
			MethodName: "ExistAppConds",
			Handler:    _AppMgr_ExistAppConds_Handler,
		},
		{
			MethodName: "CountApps",
			Handler:    _AppMgr_CountApps_Handler,
		},
		{
			MethodName: "DeleteApp",
			Handler:    _AppMgr_DeleteApp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/appuser/mgr/v2/app/app.proto",
}
