// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/appuser/mgr/v2/approleuser/approleuser.proto

package approleuser

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppUserManagerAppRoleUserClient is the client API for AppUserManagerAppRoleUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppUserManagerAppRoleUserClient interface {
	CreateAppRoleUserV2(ctx context.Context, in *CreateAppRoleUserRequest, opts ...grpc.CallOption) (*CreateAppRoleUserResponse, error)
	CreateAppRoleUsersV2(ctx context.Context, in *CreateAppRoleUsersRequest, opts ...grpc.CallOption) (*CreateAppRoleUsersResponse, error)
	UpdateAppRoleUserV2(ctx context.Context, in *UpdateAppRoleUserRequest, opts ...grpc.CallOption) (*UpdateAppRoleUserResponse, error)
	GetAppRoleUserV2(ctx context.Context, in *GetAppRoleUserRequest, opts ...grpc.CallOption) (*GetAppRoleUserResponse, error)
	GetAppRoleUserOnlyV2(ctx context.Context, in *GetAppRoleUserOnlyRequest, opts ...grpc.CallOption) (*GetAppRoleUserOnlyResponse, error)
	GetAppRoleUsersV2(ctx context.Context, in *GetAppRoleUsersRequest, opts ...grpc.CallOption) (*GetAppRoleUsersResponse, error)
	ExistAppRoleUserV2(ctx context.Context, in *ExistAppRoleUserRequest, opts ...grpc.CallOption) (*ExistAppRoleUserResponse, error)
	ExistAppRoleUserCondsV2(ctx context.Context, in *ExistAppRoleUserCondsRequest, opts ...grpc.CallOption) (*ExistAppRoleUserCondsResponse, error)
	CountAppRoleUsersV2(ctx context.Context, in *CountAppRoleUsersRequest, opts ...grpc.CallOption) (*CountAppRoleUsersResponse, error)
	DeleteAppRoleUserV2(ctx context.Context, in *DeleteAppRoleUserRequest, opts ...grpc.CallOption) (*DeleteAppRoleUserResponse, error)
}

type appUserManagerAppRoleUserClient struct {
	cc grpc.ClientConnInterface
}

func NewAppUserManagerAppRoleUserClient(cc grpc.ClientConnInterface) AppUserManagerAppRoleUserClient {
	return &appUserManagerAppRoleUserClient{cc}
}

func (c *appUserManagerAppRoleUserClient) CreateAppRoleUserV2(ctx context.Context, in *CreateAppRoleUserRequest, opts ...grpc.CallOption) (*CreateAppRoleUserResponse, error) {
	out := new(CreateAppRoleUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.approleuser.v2.AppUserManagerAppRoleUser/CreateAppRoleUserV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppRoleUserClient) CreateAppRoleUsersV2(ctx context.Context, in *CreateAppRoleUsersRequest, opts ...grpc.CallOption) (*CreateAppRoleUsersResponse, error) {
	out := new(CreateAppRoleUsersResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.approleuser.v2.AppUserManagerAppRoleUser/CreateAppRoleUsersV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppRoleUserClient) UpdateAppRoleUserV2(ctx context.Context, in *UpdateAppRoleUserRequest, opts ...grpc.CallOption) (*UpdateAppRoleUserResponse, error) {
	out := new(UpdateAppRoleUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.approleuser.v2.AppUserManagerAppRoleUser/UpdateAppRoleUserV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppRoleUserClient) GetAppRoleUserV2(ctx context.Context, in *GetAppRoleUserRequest, opts ...grpc.CallOption) (*GetAppRoleUserResponse, error) {
	out := new(GetAppRoleUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.approleuser.v2.AppUserManagerAppRoleUser/GetAppRoleUserV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppRoleUserClient) GetAppRoleUserOnlyV2(ctx context.Context, in *GetAppRoleUserOnlyRequest, opts ...grpc.CallOption) (*GetAppRoleUserOnlyResponse, error) {
	out := new(GetAppRoleUserOnlyResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.approleuser.v2.AppUserManagerAppRoleUser/GetAppRoleUserOnlyV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppRoleUserClient) GetAppRoleUsersV2(ctx context.Context, in *GetAppRoleUsersRequest, opts ...grpc.CallOption) (*GetAppRoleUsersResponse, error) {
	out := new(GetAppRoleUsersResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.approleuser.v2.AppUserManagerAppRoleUser/GetAppRoleUsersV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppRoleUserClient) ExistAppRoleUserV2(ctx context.Context, in *ExistAppRoleUserRequest, opts ...grpc.CallOption) (*ExistAppRoleUserResponse, error) {
	out := new(ExistAppRoleUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.approleuser.v2.AppUserManagerAppRoleUser/ExistAppRoleUserV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppRoleUserClient) ExistAppRoleUserCondsV2(ctx context.Context, in *ExistAppRoleUserCondsRequest, opts ...grpc.CallOption) (*ExistAppRoleUserCondsResponse, error) {
	out := new(ExistAppRoleUserCondsResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.approleuser.v2.AppUserManagerAppRoleUser/ExistAppRoleUserCondsV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppRoleUserClient) CountAppRoleUsersV2(ctx context.Context, in *CountAppRoleUsersRequest, opts ...grpc.CallOption) (*CountAppRoleUsersResponse, error) {
	out := new(CountAppRoleUsersResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.approleuser.v2.AppUserManagerAppRoleUser/CountAppRoleUsersV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppRoleUserClient) DeleteAppRoleUserV2(ctx context.Context, in *DeleteAppRoleUserRequest, opts ...grpc.CallOption) (*DeleteAppRoleUserResponse, error) {
	out := new(DeleteAppRoleUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.approleuser.v2.AppUserManagerAppRoleUser/DeleteAppRoleUserV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppUserManagerAppRoleUserServer is the server API for AppUserManagerAppRoleUser service.
// All implementations must embed UnimplementedAppUserManagerAppRoleUserServer
// for forward compatibility
type AppUserManagerAppRoleUserServer interface {
	CreateAppRoleUserV2(context.Context, *CreateAppRoleUserRequest) (*CreateAppRoleUserResponse, error)
	CreateAppRoleUsersV2(context.Context, *CreateAppRoleUsersRequest) (*CreateAppRoleUsersResponse, error)
	UpdateAppRoleUserV2(context.Context, *UpdateAppRoleUserRequest) (*UpdateAppRoleUserResponse, error)
	GetAppRoleUserV2(context.Context, *GetAppRoleUserRequest) (*GetAppRoleUserResponse, error)
	GetAppRoleUserOnlyV2(context.Context, *GetAppRoleUserOnlyRequest) (*GetAppRoleUserOnlyResponse, error)
	GetAppRoleUsersV2(context.Context, *GetAppRoleUsersRequest) (*GetAppRoleUsersResponse, error)
	ExistAppRoleUserV2(context.Context, *ExistAppRoleUserRequest) (*ExistAppRoleUserResponse, error)
	ExistAppRoleUserCondsV2(context.Context, *ExistAppRoleUserCondsRequest) (*ExistAppRoleUserCondsResponse, error)
	CountAppRoleUsersV2(context.Context, *CountAppRoleUsersRequest) (*CountAppRoleUsersResponse, error)
	DeleteAppRoleUserV2(context.Context, *DeleteAppRoleUserRequest) (*DeleteAppRoleUserResponse, error)
	mustEmbedUnimplementedAppUserManagerAppRoleUserServer()
}

// UnimplementedAppUserManagerAppRoleUserServer must be embedded to have forward compatible implementations.
type UnimplementedAppUserManagerAppRoleUserServer struct {
}

func (UnimplementedAppUserManagerAppRoleUserServer) CreateAppRoleUserV2(context.Context, *CreateAppRoleUserRequest) (*CreateAppRoleUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppRoleUserV2 not implemented")
}
func (UnimplementedAppUserManagerAppRoleUserServer) CreateAppRoleUsersV2(context.Context, *CreateAppRoleUsersRequest) (*CreateAppRoleUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppRoleUsersV2 not implemented")
}
func (UnimplementedAppUserManagerAppRoleUserServer) UpdateAppRoleUserV2(context.Context, *UpdateAppRoleUserRequest) (*UpdateAppRoleUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppRoleUserV2 not implemented")
}
func (UnimplementedAppUserManagerAppRoleUserServer) GetAppRoleUserV2(context.Context, *GetAppRoleUserRequest) (*GetAppRoleUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppRoleUserV2 not implemented")
}
func (UnimplementedAppUserManagerAppRoleUserServer) GetAppRoleUserOnlyV2(context.Context, *GetAppRoleUserOnlyRequest) (*GetAppRoleUserOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppRoleUserOnlyV2 not implemented")
}
func (UnimplementedAppUserManagerAppRoleUserServer) GetAppRoleUsersV2(context.Context, *GetAppRoleUsersRequest) (*GetAppRoleUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppRoleUsersV2 not implemented")
}
func (UnimplementedAppUserManagerAppRoleUserServer) ExistAppRoleUserV2(context.Context, *ExistAppRoleUserRequest) (*ExistAppRoleUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistAppRoleUserV2 not implemented")
}
func (UnimplementedAppUserManagerAppRoleUserServer) ExistAppRoleUserCondsV2(context.Context, *ExistAppRoleUserCondsRequest) (*ExistAppRoleUserCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistAppRoleUserCondsV2 not implemented")
}
func (UnimplementedAppUserManagerAppRoleUserServer) CountAppRoleUsersV2(context.Context, *CountAppRoleUsersRequest) (*CountAppRoleUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAppRoleUsersV2 not implemented")
}
func (UnimplementedAppUserManagerAppRoleUserServer) DeleteAppRoleUserV2(context.Context, *DeleteAppRoleUserRequest) (*DeleteAppRoleUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppRoleUserV2 not implemented")
}
func (UnimplementedAppUserManagerAppRoleUserServer) mustEmbedUnimplementedAppUserManagerAppRoleUserServer() {
}

// UnsafeAppUserManagerAppRoleUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppUserManagerAppRoleUserServer will
// result in compilation errors.
type UnsafeAppUserManagerAppRoleUserServer interface {
	mustEmbedUnimplementedAppUserManagerAppRoleUserServer()
}

func RegisterAppUserManagerAppRoleUserServer(s grpc.ServiceRegistrar, srv AppUserManagerAppRoleUserServer) {
	s.RegisterService(&AppUserManagerAppRoleUser_ServiceDesc, srv)
}

func _AppUserManagerAppRoleUser_CreateAppRoleUserV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppRoleUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppRoleUserServer).CreateAppRoleUserV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.approleuser.v2.AppUserManagerAppRoleUser/CreateAppRoleUserV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppRoleUserServer).CreateAppRoleUserV2(ctx, req.(*CreateAppRoleUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerAppRoleUser_CreateAppRoleUsersV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppRoleUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppRoleUserServer).CreateAppRoleUsersV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.approleuser.v2.AppUserManagerAppRoleUser/CreateAppRoleUsersV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppRoleUserServer).CreateAppRoleUsersV2(ctx, req.(*CreateAppRoleUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerAppRoleUser_UpdateAppRoleUserV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppRoleUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppRoleUserServer).UpdateAppRoleUserV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.approleuser.v2.AppUserManagerAppRoleUser/UpdateAppRoleUserV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppRoleUserServer).UpdateAppRoleUserV2(ctx, req.(*UpdateAppRoleUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerAppRoleUser_GetAppRoleUserV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppRoleUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppRoleUserServer).GetAppRoleUserV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.approleuser.v2.AppUserManagerAppRoleUser/GetAppRoleUserV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppRoleUserServer).GetAppRoleUserV2(ctx, req.(*GetAppRoleUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerAppRoleUser_GetAppRoleUserOnlyV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppRoleUserOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppRoleUserServer).GetAppRoleUserOnlyV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.approleuser.v2.AppUserManagerAppRoleUser/GetAppRoleUserOnlyV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppRoleUserServer).GetAppRoleUserOnlyV2(ctx, req.(*GetAppRoleUserOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerAppRoleUser_GetAppRoleUsersV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppRoleUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppRoleUserServer).GetAppRoleUsersV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.approleuser.v2.AppUserManagerAppRoleUser/GetAppRoleUsersV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppRoleUserServer).GetAppRoleUsersV2(ctx, req.(*GetAppRoleUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerAppRoleUser_ExistAppRoleUserV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistAppRoleUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppRoleUserServer).ExistAppRoleUserV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.approleuser.v2.AppUserManagerAppRoleUser/ExistAppRoleUserV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppRoleUserServer).ExistAppRoleUserV2(ctx, req.(*ExistAppRoleUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerAppRoleUser_ExistAppRoleUserCondsV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistAppRoleUserCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppRoleUserServer).ExistAppRoleUserCondsV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.approleuser.v2.AppUserManagerAppRoleUser/ExistAppRoleUserCondsV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppRoleUserServer).ExistAppRoleUserCondsV2(ctx, req.(*ExistAppRoleUserCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerAppRoleUser_CountAppRoleUsersV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAppRoleUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppRoleUserServer).CountAppRoleUsersV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.approleuser.v2.AppUserManagerAppRoleUser/CountAppRoleUsersV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppRoleUserServer).CountAppRoleUsersV2(ctx, req.(*CountAppRoleUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerAppRoleUser_DeleteAppRoleUserV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppRoleUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppRoleUserServer).DeleteAppRoleUserV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.approleuser.v2.AppUserManagerAppRoleUser/DeleteAppRoleUserV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppRoleUserServer).DeleteAppRoleUserV2(ctx, req.(*DeleteAppRoleUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppUserManagerAppRoleUser_ServiceDesc is the grpc.ServiceDesc for AppUserManagerAppRoleUser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppUserManagerAppRoleUser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app.user.manager.approleuser.v2.AppUserManagerAppRoleUser",
	HandlerType: (*AppUserManagerAppRoleUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAppRoleUserV2",
			Handler:    _AppUserManagerAppRoleUser_CreateAppRoleUserV2_Handler,
		},
		{
			MethodName: "CreateAppRoleUsersV2",
			Handler:    _AppUserManagerAppRoleUser_CreateAppRoleUsersV2_Handler,
		},
		{
			MethodName: "UpdateAppRoleUserV2",
			Handler:    _AppUserManagerAppRoleUser_UpdateAppRoleUserV2_Handler,
		},
		{
			MethodName: "GetAppRoleUserV2",
			Handler:    _AppUserManagerAppRoleUser_GetAppRoleUserV2_Handler,
		},
		{
			MethodName: "GetAppRoleUserOnlyV2",
			Handler:    _AppUserManagerAppRoleUser_GetAppRoleUserOnlyV2_Handler,
		},
		{
			MethodName: "GetAppRoleUsersV2",
			Handler:    _AppUserManagerAppRoleUser_GetAppRoleUsersV2_Handler,
		},
		{
			MethodName: "ExistAppRoleUserV2",
			Handler:    _AppUserManagerAppRoleUser_ExistAppRoleUserV2_Handler,
		},
		{
			MethodName: "ExistAppRoleUserCondsV2",
			Handler:    _AppUserManagerAppRoleUser_ExistAppRoleUserCondsV2_Handler,
		},
		{
			MethodName: "CountAppRoleUsersV2",
			Handler:    _AppUserManagerAppRoleUser_CountAppRoleUsersV2_Handler,
		},
		{
			MethodName: "DeleteAppRoleUserV2",
			Handler:    _AppUserManagerAppRoleUser_DeleteAppRoleUserV2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/appuser/mgr/v2/approleuser/approleuser.proto",
}
