// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/appuser/mgr/v2/approleuser/approleuser.proto

package approleuser

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateAppRoleUser(ctx context.Context, in *CreateAppRoleUserRequest, opts ...grpc.CallOption) (*CreateAppRoleUserResponse, error)
	CreateAppRoleUsers(ctx context.Context, in *CreateAppRoleUsersRequest, opts ...grpc.CallOption) (*CreateAppRoleUsersResponse, error)
	UpdateAppRoleUser(ctx context.Context, in *UpdateAppRoleUserRequest, opts ...grpc.CallOption) (*UpdateAppRoleUserResponse, error)
	GetAppRoleUser(ctx context.Context, in *GetAppRoleUserRequest, opts ...grpc.CallOption) (*GetAppRoleUserResponse, error)
	GetAppRoleUserOnly(ctx context.Context, in *GetAppRoleUserOnlyRequest, opts ...grpc.CallOption) (*GetAppRoleUserOnlyResponse, error)
	GetAppRoleUsers(ctx context.Context, in *GetAppRoleUsersRequest, opts ...grpc.CallOption) (*GetAppRoleUsersResponse, error)
	ExistAppRoleUser(ctx context.Context, in *ExistAppRoleUserRequest, opts ...grpc.CallOption) (*ExistAppRoleUserResponse, error)
	ExistAppRoleUserConds(ctx context.Context, in *ExistAppRoleUserCondsRequest, opts ...grpc.CallOption) (*ExistAppRoleUserCondsResponse, error)
	CountAppRoleUsers(ctx context.Context, in *CountAppRoleUsersRequest, opts ...grpc.CallOption) (*CountAppRoleUsersResponse, error)
	DeleteAppRoleUser(ctx context.Context, in *DeleteAppRoleUserRequest, opts ...grpc.CallOption) (*DeleteAppRoleUserResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateAppRoleUser(ctx context.Context, in *CreateAppRoleUserRequest, opts ...grpc.CallOption) (*CreateAppRoleUserResponse, error) {
	out := new(CreateAppRoleUserResponse)
	err := c.cc.Invoke(ctx, "/appuser.manager.approleuser.v2.Manager/CreateAppRoleUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateAppRoleUsers(ctx context.Context, in *CreateAppRoleUsersRequest, opts ...grpc.CallOption) (*CreateAppRoleUsersResponse, error) {
	out := new(CreateAppRoleUsersResponse)
	err := c.cc.Invoke(ctx, "/appuser.manager.approleuser.v2.Manager/CreateAppRoleUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateAppRoleUser(ctx context.Context, in *UpdateAppRoleUserRequest, opts ...grpc.CallOption) (*UpdateAppRoleUserResponse, error) {
	out := new(UpdateAppRoleUserResponse)
	err := c.cc.Invoke(ctx, "/appuser.manager.approleuser.v2.Manager/UpdateAppRoleUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetAppRoleUser(ctx context.Context, in *GetAppRoleUserRequest, opts ...grpc.CallOption) (*GetAppRoleUserResponse, error) {
	out := new(GetAppRoleUserResponse)
	err := c.cc.Invoke(ctx, "/appuser.manager.approleuser.v2.Manager/GetAppRoleUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetAppRoleUserOnly(ctx context.Context, in *GetAppRoleUserOnlyRequest, opts ...grpc.CallOption) (*GetAppRoleUserOnlyResponse, error) {
	out := new(GetAppRoleUserOnlyResponse)
	err := c.cc.Invoke(ctx, "/appuser.manager.approleuser.v2.Manager/GetAppRoleUserOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetAppRoleUsers(ctx context.Context, in *GetAppRoleUsersRequest, opts ...grpc.CallOption) (*GetAppRoleUsersResponse, error) {
	out := new(GetAppRoleUsersResponse)
	err := c.cc.Invoke(ctx, "/appuser.manager.approleuser.v2.Manager/GetAppRoleUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistAppRoleUser(ctx context.Context, in *ExistAppRoleUserRequest, opts ...grpc.CallOption) (*ExistAppRoleUserResponse, error) {
	out := new(ExistAppRoleUserResponse)
	err := c.cc.Invoke(ctx, "/appuser.manager.approleuser.v2.Manager/ExistAppRoleUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistAppRoleUserConds(ctx context.Context, in *ExistAppRoleUserCondsRequest, opts ...grpc.CallOption) (*ExistAppRoleUserCondsResponse, error) {
	out := new(ExistAppRoleUserCondsResponse)
	err := c.cc.Invoke(ctx, "/appuser.manager.approleuser.v2.Manager/ExistAppRoleUserConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountAppRoleUsers(ctx context.Context, in *CountAppRoleUsersRequest, opts ...grpc.CallOption) (*CountAppRoleUsersResponse, error) {
	out := new(CountAppRoleUsersResponse)
	err := c.cc.Invoke(ctx, "/appuser.manager.approleuser.v2.Manager/CountAppRoleUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteAppRoleUser(ctx context.Context, in *DeleteAppRoleUserRequest, opts ...grpc.CallOption) (*DeleteAppRoleUserResponse, error) {
	out := new(DeleteAppRoleUserResponse)
	err := c.cc.Invoke(ctx, "/appuser.manager.approleuser.v2.Manager/DeleteAppRoleUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateAppRoleUser(context.Context, *CreateAppRoleUserRequest) (*CreateAppRoleUserResponse, error)
	CreateAppRoleUsers(context.Context, *CreateAppRoleUsersRequest) (*CreateAppRoleUsersResponse, error)
	UpdateAppRoleUser(context.Context, *UpdateAppRoleUserRequest) (*UpdateAppRoleUserResponse, error)
	GetAppRoleUser(context.Context, *GetAppRoleUserRequest) (*GetAppRoleUserResponse, error)
	GetAppRoleUserOnly(context.Context, *GetAppRoleUserOnlyRequest) (*GetAppRoleUserOnlyResponse, error)
	GetAppRoleUsers(context.Context, *GetAppRoleUsersRequest) (*GetAppRoleUsersResponse, error)
	ExistAppRoleUser(context.Context, *ExistAppRoleUserRequest) (*ExistAppRoleUserResponse, error)
	ExistAppRoleUserConds(context.Context, *ExistAppRoleUserCondsRequest) (*ExistAppRoleUserCondsResponse, error)
	CountAppRoleUsers(context.Context, *CountAppRoleUsersRequest) (*CountAppRoleUsersResponse, error)
	DeleteAppRoleUser(context.Context, *DeleteAppRoleUserRequest) (*DeleteAppRoleUserResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateAppRoleUser(context.Context, *CreateAppRoleUserRequest) (*CreateAppRoleUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppRoleUser not implemented")
}
func (UnimplementedManagerServer) CreateAppRoleUsers(context.Context, *CreateAppRoleUsersRequest) (*CreateAppRoleUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppRoleUsers not implemented")
}
func (UnimplementedManagerServer) UpdateAppRoleUser(context.Context, *UpdateAppRoleUserRequest) (*UpdateAppRoleUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppRoleUser not implemented")
}
func (UnimplementedManagerServer) GetAppRoleUser(context.Context, *GetAppRoleUserRequest) (*GetAppRoleUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppRoleUser not implemented")
}
func (UnimplementedManagerServer) GetAppRoleUserOnly(context.Context, *GetAppRoleUserOnlyRequest) (*GetAppRoleUserOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppRoleUserOnly not implemented")
}
func (UnimplementedManagerServer) GetAppRoleUsers(context.Context, *GetAppRoleUsersRequest) (*GetAppRoleUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppRoleUsers not implemented")
}
func (UnimplementedManagerServer) ExistAppRoleUser(context.Context, *ExistAppRoleUserRequest) (*ExistAppRoleUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistAppRoleUser not implemented")
}
func (UnimplementedManagerServer) ExistAppRoleUserConds(context.Context, *ExistAppRoleUserCondsRequest) (*ExistAppRoleUserCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistAppRoleUserConds not implemented")
}
func (UnimplementedManagerServer) CountAppRoleUsers(context.Context, *CountAppRoleUsersRequest) (*CountAppRoleUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAppRoleUsers not implemented")
}
func (UnimplementedManagerServer) DeleteAppRoleUser(context.Context, *DeleteAppRoleUserRequest) (*DeleteAppRoleUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppRoleUser not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateAppRoleUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppRoleUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateAppRoleUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.manager.approleuser.v2.Manager/CreateAppRoleUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateAppRoleUser(ctx, req.(*CreateAppRoleUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateAppRoleUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppRoleUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateAppRoleUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.manager.approleuser.v2.Manager/CreateAppRoleUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateAppRoleUsers(ctx, req.(*CreateAppRoleUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateAppRoleUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppRoleUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateAppRoleUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.manager.approleuser.v2.Manager/UpdateAppRoleUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateAppRoleUser(ctx, req.(*UpdateAppRoleUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetAppRoleUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppRoleUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetAppRoleUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.manager.approleuser.v2.Manager/GetAppRoleUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetAppRoleUser(ctx, req.(*GetAppRoleUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetAppRoleUserOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppRoleUserOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetAppRoleUserOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.manager.approleuser.v2.Manager/GetAppRoleUserOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetAppRoleUserOnly(ctx, req.(*GetAppRoleUserOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetAppRoleUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppRoleUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetAppRoleUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.manager.approleuser.v2.Manager/GetAppRoleUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetAppRoleUsers(ctx, req.(*GetAppRoleUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistAppRoleUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistAppRoleUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistAppRoleUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.manager.approleuser.v2.Manager/ExistAppRoleUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistAppRoleUser(ctx, req.(*ExistAppRoleUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistAppRoleUserConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistAppRoleUserCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistAppRoleUserConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.manager.approleuser.v2.Manager/ExistAppRoleUserConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistAppRoleUserConds(ctx, req.(*ExistAppRoleUserCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountAppRoleUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAppRoleUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountAppRoleUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.manager.approleuser.v2.Manager/CountAppRoleUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountAppRoleUsers(ctx, req.(*CountAppRoleUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteAppRoleUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppRoleUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteAppRoleUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.manager.approleuser.v2.Manager/DeleteAppRoleUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteAppRoleUser(ctx, req.(*DeleteAppRoleUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "appuser.manager.approleuser.v2.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAppRoleUser",
			Handler:    _Manager_CreateAppRoleUser_Handler,
		},
		{
			MethodName: "CreateAppRoleUsers",
			Handler:    _Manager_CreateAppRoleUsers_Handler,
		},
		{
			MethodName: "UpdateAppRoleUser",
			Handler:    _Manager_UpdateAppRoleUser_Handler,
		},
		{
			MethodName: "GetAppRoleUser",
			Handler:    _Manager_GetAppRoleUser_Handler,
		},
		{
			MethodName: "GetAppRoleUserOnly",
			Handler:    _Manager_GetAppRoleUserOnly_Handler,
		},
		{
			MethodName: "GetAppRoleUsers",
			Handler:    _Manager_GetAppRoleUsers_Handler,
		},
		{
			MethodName: "ExistAppRoleUser",
			Handler:    _Manager_ExistAppRoleUser_Handler,
		},
		{
			MethodName: "ExistAppRoleUserConds",
			Handler:    _Manager_ExistAppRoleUserConds_Handler,
		},
		{
			MethodName: "CountAppRoleUsers",
			Handler:    _Manager_CountAppRoleUsers_Handler,
		},
		{
			MethodName: "DeleteAppRoleUser",
			Handler:    _Manager_DeleteAppRoleUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/appuser/mgr/v2/approleuser/approleuser.proto",
}
