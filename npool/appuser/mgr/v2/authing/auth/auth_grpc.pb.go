// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/appuser/mgr/v2/authing/auth/auth.proto

package auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateAuth(ctx context.Context, in *CreateAuthRequest, opts ...grpc.CallOption) (*CreateAuthResponse, error)
	CreateAuths(ctx context.Context, in *CreateAuthsRequest, opts ...grpc.CallOption) (*CreateAuthsResponse, error)
	UpdateAuth(ctx context.Context, in *UpdateAuthRequest, opts ...grpc.CallOption) (*UpdateAuthResponse, error)
	GetAuth(ctx context.Context, in *GetAuthRequest, opts ...grpc.CallOption) (*GetAuthResponse, error)
	GetAuthOnly(ctx context.Context, in *GetAuthOnlyRequest, opts ...grpc.CallOption) (*GetAuthOnlyResponse, error)
	GetAuths(ctx context.Context, in *GetAuthsRequest, opts ...grpc.CallOption) (*GetAuthsResponse, error)
	ExistAuth(ctx context.Context, in *ExistAuthRequest, opts ...grpc.CallOption) (*ExistAuthResponse, error)
	ExistAuthConds(ctx context.Context, in *ExistAuthCondsRequest, opts ...grpc.CallOption) (*ExistAuthCondsResponse, error)
	CountAuths(ctx context.Context, in *CountAuthsRequest, opts ...grpc.CallOption) (*CountAuthsResponse, error)
	DeleteAuth(ctx context.Context, in *DeleteAuthRequest, opts ...grpc.CallOption) (*DeleteAuthResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateAuth(ctx context.Context, in *CreateAuthRequest, opts ...grpc.CallOption) (*CreateAuthResponse, error) {
	out := new(CreateAuthResponse)
	err := c.cc.Invoke(ctx, "/appuser.manager.authing.auth.v2.Manager/CreateAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateAuths(ctx context.Context, in *CreateAuthsRequest, opts ...grpc.CallOption) (*CreateAuthsResponse, error) {
	out := new(CreateAuthsResponse)
	err := c.cc.Invoke(ctx, "/appuser.manager.authing.auth.v2.Manager/CreateAuths", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateAuth(ctx context.Context, in *UpdateAuthRequest, opts ...grpc.CallOption) (*UpdateAuthResponse, error) {
	out := new(UpdateAuthResponse)
	err := c.cc.Invoke(ctx, "/appuser.manager.authing.auth.v2.Manager/UpdateAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetAuth(ctx context.Context, in *GetAuthRequest, opts ...grpc.CallOption) (*GetAuthResponse, error) {
	out := new(GetAuthResponse)
	err := c.cc.Invoke(ctx, "/appuser.manager.authing.auth.v2.Manager/GetAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetAuthOnly(ctx context.Context, in *GetAuthOnlyRequest, opts ...grpc.CallOption) (*GetAuthOnlyResponse, error) {
	out := new(GetAuthOnlyResponse)
	err := c.cc.Invoke(ctx, "/appuser.manager.authing.auth.v2.Manager/GetAuthOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetAuths(ctx context.Context, in *GetAuthsRequest, opts ...grpc.CallOption) (*GetAuthsResponse, error) {
	out := new(GetAuthsResponse)
	err := c.cc.Invoke(ctx, "/appuser.manager.authing.auth.v2.Manager/GetAuths", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistAuth(ctx context.Context, in *ExistAuthRequest, opts ...grpc.CallOption) (*ExistAuthResponse, error) {
	out := new(ExistAuthResponse)
	err := c.cc.Invoke(ctx, "/appuser.manager.authing.auth.v2.Manager/ExistAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistAuthConds(ctx context.Context, in *ExistAuthCondsRequest, opts ...grpc.CallOption) (*ExistAuthCondsResponse, error) {
	out := new(ExistAuthCondsResponse)
	err := c.cc.Invoke(ctx, "/appuser.manager.authing.auth.v2.Manager/ExistAuthConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountAuths(ctx context.Context, in *CountAuthsRequest, opts ...grpc.CallOption) (*CountAuthsResponse, error) {
	out := new(CountAuthsResponse)
	err := c.cc.Invoke(ctx, "/appuser.manager.authing.auth.v2.Manager/CountAuths", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteAuth(ctx context.Context, in *DeleteAuthRequest, opts ...grpc.CallOption) (*DeleteAuthResponse, error) {
	out := new(DeleteAuthResponse)
	err := c.cc.Invoke(ctx, "/appuser.manager.authing.auth.v2.Manager/DeleteAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateAuth(context.Context, *CreateAuthRequest) (*CreateAuthResponse, error)
	CreateAuths(context.Context, *CreateAuthsRequest) (*CreateAuthsResponse, error)
	UpdateAuth(context.Context, *UpdateAuthRequest) (*UpdateAuthResponse, error)
	GetAuth(context.Context, *GetAuthRequest) (*GetAuthResponse, error)
	GetAuthOnly(context.Context, *GetAuthOnlyRequest) (*GetAuthOnlyResponse, error)
	GetAuths(context.Context, *GetAuthsRequest) (*GetAuthsResponse, error)
	ExistAuth(context.Context, *ExistAuthRequest) (*ExistAuthResponse, error)
	ExistAuthConds(context.Context, *ExistAuthCondsRequest) (*ExistAuthCondsResponse, error)
	CountAuths(context.Context, *CountAuthsRequest) (*CountAuthsResponse, error)
	DeleteAuth(context.Context, *DeleteAuthRequest) (*DeleteAuthResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateAuth(context.Context, *CreateAuthRequest) (*CreateAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuth not implemented")
}
func (UnimplementedManagerServer) CreateAuths(context.Context, *CreateAuthsRequest) (*CreateAuthsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuths not implemented")
}
func (UnimplementedManagerServer) UpdateAuth(context.Context, *UpdateAuthRequest) (*UpdateAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAuth not implemented")
}
func (UnimplementedManagerServer) GetAuth(context.Context, *GetAuthRequest) (*GetAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuth not implemented")
}
func (UnimplementedManagerServer) GetAuthOnly(context.Context, *GetAuthOnlyRequest) (*GetAuthOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthOnly not implemented")
}
func (UnimplementedManagerServer) GetAuths(context.Context, *GetAuthsRequest) (*GetAuthsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuths not implemented")
}
func (UnimplementedManagerServer) ExistAuth(context.Context, *ExistAuthRequest) (*ExistAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistAuth not implemented")
}
func (UnimplementedManagerServer) ExistAuthConds(context.Context, *ExistAuthCondsRequest) (*ExistAuthCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistAuthConds not implemented")
}
func (UnimplementedManagerServer) CountAuths(context.Context, *CountAuthsRequest) (*CountAuthsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAuths not implemented")
}
func (UnimplementedManagerServer) DeleteAuth(context.Context, *DeleteAuthRequest) (*DeleteAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuth not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.manager.authing.auth.v2.Manager/CreateAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateAuth(ctx, req.(*CreateAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateAuths_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAuthsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateAuths(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.manager.authing.auth.v2.Manager/CreateAuths",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateAuths(ctx, req.(*CreateAuthsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.manager.authing.auth.v2.Manager/UpdateAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateAuth(ctx, req.(*UpdateAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.manager.authing.auth.v2.Manager/GetAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetAuth(ctx, req.(*GetAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetAuthOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetAuthOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.manager.authing.auth.v2.Manager/GetAuthOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetAuthOnly(ctx, req.(*GetAuthOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetAuths_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetAuths(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.manager.authing.auth.v2.Manager/GetAuths",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetAuths(ctx, req.(*GetAuthsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.manager.authing.auth.v2.Manager/ExistAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistAuth(ctx, req.(*ExistAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistAuthConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistAuthCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistAuthConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.manager.authing.auth.v2.Manager/ExistAuthConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistAuthConds(ctx, req.(*ExistAuthCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountAuths_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAuthsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountAuths(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.manager.authing.auth.v2.Manager/CountAuths",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountAuths(ctx, req.(*CountAuthsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.manager.authing.auth.v2.Manager/DeleteAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteAuth(ctx, req.(*DeleteAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "appuser.manager.authing.auth.v2.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAuth",
			Handler:    _Manager_CreateAuth_Handler,
		},
		{
			MethodName: "CreateAuths",
			Handler:    _Manager_CreateAuths_Handler,
		},
		{
			MethodName: "UpdateAuth",
			Handler:    _Manager_UpdateAuth_Handler,
		},
		{
			MethodName: "GetAuth",
			Handler:    _Manager_GetAuth_Handler,
		},
		{
			MethodName: "GetAuthOnly",
			Handler:    _Manager_GetAuthOnly_Handler,
		},
		{
			MethodName: "GetAuths",
			Handler:    _Manager_GetAuths_Handler,
		},
		{
			MethodName: "ExistAuth",
			Handler:    _Manager_ExistAuth_Handler,
		},
		{
			MethodName: "ExistAuthConds",
			Handler:    _Manager_ExistAuthConds_Handler,
		},
		{
			MethodName: "CountAuths",
			Handler:    _Manager_CountAuths_Handler,
		},
		{
			MethodName: "DeleteAuth",
			Handler:    _Manager_DeleteAuth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/appuser/mgr/v2/authing/auth/auth.proto",
}
