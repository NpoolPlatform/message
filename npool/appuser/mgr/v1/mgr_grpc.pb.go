// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/appuser/mgr/v1/mgr.proto

package v1

import (
	context "context"
	npool "github.com/NpoolPlatform/message/npool"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppUserManagerClient is the client API for AppUserManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppUserManagerClient interface {
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*npool.VersionResponse, error)
	//    rpc CreateApp (CreateAppRequest) returns (CreateAppResponse) {
	//        option (google.api.http) = {
	//            post: "/v1/create/app"
	//            body: "*"
	//        };
	//    }
	//    rpc GetApp (GetAppRequest) returns (GetAppResponse) {
	//        option (google.api.http) = {
	//            post: "/v1/get/app"
	//            body: "*"
	//        };
	//    }
	//    rpc GetApps (GetAppsRequest) returns (GetAppsResponse) {
	//        option (google.api.http) = {
	//            post: "/v1/get/apps"
	//            body: "*"
	//        };
	//    }
	//    rpc GetAppsByCreator (GetAppsByCreatorRequest) returns (GetAppsByCreatorResponse) {
	//        option (google.api.http) = {
	//            post: "/v1/get/apps/by/creator"
	//            body: "*"
	//        };
	//    }
	//    rpc UpdateApp (UpdateAppRequest) returns (UpdateAppResponse) {
	//        option (google.api.http) = {
	//            post: "/v1/update/app"
	//            body: "*"
	//        };
	//    }
	CreateAppControl(ctx context.Context, in *CreateAppControlRequest, opts ...grpc.CallOption) (*CreateAppControlResponse, error)
	CreateAppControlForOtherApp(ctx context.Context, in *CreateAppControlForOtherAppRequest, opts ...grpc.CallOption) (*CreateAppControlForOtherAppResponse, error)
	GetAppControl(ctx context.Context, in *GetAppControlRequest, opts ...grpc.CallOption) (*GetAppControlResponse, error)
	GetAppControlByApp(ctx context.Context, in *GetAppControlByAppRequest, opts ...grpc.CallOption) (*GetAppControlByAppResponse, error)
	UpdateAppControl(ctx context.Context, in *UpdateAppControlRequest, opts ...grpc.CallOption) (*UpdateAppControlResponse, error)
	CreateAppUserControl(ctx context.Context, in *CreateAppUserControlRequest, opts ...grpc.CallOption) (*CreateAppUserControlResponse, error)
	GetAppUserControl(ctx context.Context, in *GetAppUserControlRequest, opts ...grpc.CallOption) (*GetAppUserControlResponse, error)
	GetAppUserControlByAppUser(ctx context.Context, in *GetAppUserControlByAppUserRequest, opts ...grpc.CallOption) (*GetAppUserControlByAppUserResponse, error)
	UpdateAppUserControl(ctx context.Context, in *UpdateAppUserControlRequest, opts ...grpc.CallOption) (*UpdateAppUserControlResponse, error)
	CreateGenesisRoleUser(ctx context.Context, in *CreateGenesisRoleUserRequest, opts ...grpc.CallOption) (*CreateGenesisRoleUserResponse, error)
	CreateAppUserWithThirdParty(ctx context.Context, in *CreateAppUserWithThirdPartyRequest, opts ...grpc.CallOption) (*CreateAppUserWithThirdPartyResponse, error)
	CreateAppUserThirdParty(ctx context.Context, in *CreateAppUserThirdPartyRequest, opts ...grpc.CallOption) (*CreateAppUserThirdPartyResponse, error)
	GetAppUserThirdPartyByAppThirdPartyID(ctx context.Context, in *GetAppUserThirdPartyByAppThirdPartyIDRequest, opts ...grpc.CallOption) (*GetAppUserThirdPartyByAppThirdPartyIDResponse, error)
	CreateAppUserWithSecretRevert(ctx context.Context, in *CreateAppUserWithSecretRequest, opts ...grpc.CallOption) (*CreateAppUserWithSecretResponse, error)
}

type appUserManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewAppUserManagerClient(cc grpc.ClientConnInterface) AppUserManagerClient {
	return &appUserManagerClient{cc}
}

func (c *appUserManagerClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*npool.VersionResponse, error) {
	out := new(npool.VersionResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) CreateAppControl(ctx context.Context, in *CreateAppControlRequest, opts ...grpc.CallOption) (*CreateAppControlResponse, error) {
	out := new(CreateAppControlResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/CreateAppControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) CreateAppControlForOtherApp(ctx context.Context, in *CreateAppControlForOtherAppRequest, opts ...grpc.CallOption) (*CreateAppControlForOtherAppResponse, error) {
	out := new(CreateAppControlForOtherAppResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/CreateAppControlForOtherApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) GetAppControl(ctx context.Context, in *GetAppControlRequest, opts ...grpc.CallOption) (*GetAppControlResponse, error) {
	out := new(GetAppControlResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/GetAppControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) GetAppControlByApp(ctx context.Context, in *GetAppControlByAppRequest, opts ...grpc.CallOption) (*GetAppControlByAppResponse, error) {
	out := new(GetAppControlByAppResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/GetAppControlByApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) UpdateAppControl(ctx context.Context, in *UpdateAppControlRequest, opts ...grpc.CallOption) (*UpdateAppControlResponse, error) {
	out := new(UpdateAppControlResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/UpdateAppControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) CreateAppUserControl(ctx context.Context, in *CreateAppUserControlRequest, opts ...grpc.CallOption) (*CreateAppUserControlResponse, error) {
	out := new(CreateAppUserControlResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/CreateAppUserControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) GetAppUserControl(ctx context.Context, in *GetAppUserControlRequest, opts ...grpc.CallOption) (*GetAppUserControlResponse, error) {
	out := new(GetAppUserControlResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/GetAppUserControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) GetAppUserControlByAppUser(ctx context.Context, in *GetAppUserControlByAppUserRequest, opts ...grpc.CallOption) (*GetAppUserControlByAppUserResponse, error) {
	out := new(GetAppUserControlByAppUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/GetAppUserControlByAppUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) UpdateAppUserControl(ctx context.Context, in *UpdateAppUserControlRequest, opts ...grpc.CallOption) (*UpdateAppUserControlResponse, error) {
	out := new(UpdateAppUserControlResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/UpdateAppUserControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) CreateGenesisRoleUser(ctx context.Context, in *CreateGenesisRoleUserRequest, opts ...grpc.CallOption) (*CreateGenesisRoleUserResponse, error) {
	out := new(CreateGenesisRoleUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/CreateGenesisRoleUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) CreateAppUserWithThirdParty(ctx context.Context, in *CreateAppUserWithThirdPartyRequest, opts ...grpc.CallOption) (*CreateAppUserWithThirdPartyResponse, error) {
	out := new(CreateAppUserWithThirdPartyResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/CreateAppUserWithThirdParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) CreateAppUserThirdParty(ctx context.Context, in *CreateAppUserThirdPartyRequest, opts ...grpc.CallOption) (*CreateAppUserThirdPartyResponse, error) {
	out := new(CreateAppUserThirdPartyResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/CreateAppUserThirdParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) GetAppUserThirdPartyByAppThirdPartyID(ctx context.Context, in *GetAppUserThirdPartyByAppThirdPartyIDRequest, opts ...grpc.CallOption) (*GetAppUserThirdPartyByAppThirdPartyIDResponse, error) {
	out := new(GetAppUserThirdPartyByAppThirdPartyIDResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/GetAppUserThirdPartyByAppThirdPartyID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerClient) CreateAppUserWithSecretRevert(ctx context.Context, in *CreateAppUserWithSecretRequest, opts ...grpc.CallOption) (*CreateAppUserWithSecretResponse, error) {
	out := new(CreateAppUserWithSecretResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v1.AppUserManager/CreateAppUserWithSecretRevert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppUserManagerServer is the server API for AppUserManager service.
// All implementations must embed UnimplementedAppUserManagerServer
// for forward compatibility
type AppUserManagerServer interface {
	Version(context.Context, *emptypb.Empty) (*npool.VersionResponse, error)
	//    rpc CreateApp (CreateAppRequest) returns (CreateAppResponse) {
	//        option (google.api.http) = {
	//            post: "/v1/create/app"
	//            body: "*"
	//        };
	//    }
	//    rpc GetApp (GetAppRequest) returns (GetAppResponse) {
	//        option (google.api.http) = {
	//            post: "/v1/get/app"
	//            body: "*"
	//        };
	//    }
	//    rpc GetApps (GetAppsRequest) returns (GetAppsResponse) {
	//        option (google.api.http) = {
	//            post: "/v1/get/apps"
	//            body: "*"
	//        };
	//    }
	//    rpc GetAppsByCreator (GetAppsByCreatorRequest) returns (GetAppsByCreatorResponse) {
	//        option (google.api.http) = {
	//            post: "/v1/get/apps/by/creator"
	//            body: "*"
	//        };
	//    }
	//    rpc UpdateApp (UpdateAppRequest) returns (UpdateAppResponse) {
	//        option (google.api.http) = {
	//            post: "/v1/update/app"
	//            body: "*"
	//        };
	//    }
	CreateAppControl(context.Context, *CreateAppControlRequest) (*CreateAppControlResponse, error)
	CreateAppControlForOtherApp(context.Context, *CreateAppControlForOtherAppRequest) (*CreateAppControlForOtherAppResponse, error)
	GetAppControl(context.Context, *GetAppControlRequest) (*GetAppControlResponse, error)
	GetAppControlByApp(context.Context, *GetAppControlByAppRequest) (*GetAppControlByAppResponse, error)
	UpdateAppControl(context.Context, *UpdateAppControlRequest) (*UpdateAppControlResponse, error)
	CreateAppUserControl(context.Context, *CreateAppUserControlRequest) (*CreateAppUserControlResponse, error)
	GetAppUserControl(context.Context, *GetAppUserControlRequest) (*GetAppUserControlResponse, error)
	GetAppUserControlByAppUser(context.Context, *GetAppUserControlByAppUserRequest) (*GetAppUserControlByAppUserResponse, error)
	UpdateAppUserControl(context.Context, *UpdateAppUserControlRequest) (*UpdateAppUserControlResponse, error)
	CreateGenesisRoleUser(context.Context, *CreateGenesisRoleUserRequest) (*CreateGenesisRoleUserResponse, error)
	CreateAppUserWithThirdParty(context.Context, *CreateAppUserWithThirdPartyRequest) (*CreateAppUserWithThirdPartyResponse, error)
	CreateAppUserThirdParty(context.Context, *CreateAppUserThirdPartyRequest) (*CreateAppUserThirdPartyResponse, error)
	GetAppUserThirdPartyByAppThirdPartyID(context.Context, *GetAppUserThirdPartyByAppThirdPartyIDRequest) (*GetAppUserThirdPartyByAppThirdPartyIDResponse, error)
	CreateAppUserWithSecretRevert(context.Context, *CreateAppUserWithSecretRequest) (*CreateAppUserWithSecretResponse, error)
	mustEmbedUnimplementedAppUserManagerServer()
}

// UnimplementedAppUserManagerServer must be embedded to have forward compatible implementations.
type UnimplementedAppUserManagerServer struct {
}

func (UnimplementedAppUserManagerServer) Version(context.Context, *emptypb.Empty) (*npool.VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedAppUserManagerServer) CreateAppControl(context.Context, *CreateAppControlRequest) (*CreateAppControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppControl not implemented")
}
func (UnimplementedAppUserManagerServer) CreateAppControlForOtherApp(context.Context, *CreateAppControlForOtherAppRequest) (*CreateAppControlForOtherAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppControlForOtherApp not implemented")
}
func (UnimplementedAppUserManagerServer) GetAppControl(context.Context, *GetAppControlRequest) (*GetAppControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppControl not implemented")
}
func (UnimplementedAppUserManagerServer) GetAppControlByApp(context.Context, *GetAppControlByAppRequest) (*GetAppControlByAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppControlByApp not implemented")
}
func (UnimplementedAppUserManagerServer) UpdateAppControl(context.Context, *UpdateAppControlRequest) (*UpdateAppControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppControl not implemented")
}
func (UnimplementedAppUserManagerServer) CreateAppUserControl(context.Context, *CreateAppUserControlRequest) (*CreateAppUserControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppUserControl not implemented")
}
func (UnimplementedAppUserManagerServer) GetAppUserControl(context.Context, *GetAppUserControlRequest) (*GetAppUserControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppUserControl not implemented")
}
func (UnimplementedAppUserManagerServer) GetAppUserControlByAppUser(context.Context, *GetAppUserControlByAppUserRequest) (*GetAppUserControlByAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppUserControlByAppUser not implemented")
}
func (UnimplementedAppUserManagerServer) UpdateAppUserControl(context.Context, *UpdateAppUserControlRequest) (*UpdateAppUserControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppUserControl not implemented")
}
func (UnimplementedAppUserManagerServer) CreateGenesisRoleUser(context.Context, *CreateGenesisRoleUserRequest) (*CreateGenesisRoleUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGenesisRoleUser not implemented")
}
func (UnimplementedAppUserManagerServer) CreateAppUserWithThirdParty(context.Context, *CreateAppUserWithThirdPartyRequest) (*CreateAppUserWithThirdPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppUserWithThirdParty not implemented")
}
func (UnimplementedAppUserManagerServer) CreateAppUserThirdParty(context.Context, *CreateAppUserThirdPartyRequest) (*CreateAppUserThirdPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppUserThirdParty not implemented")
}
func (UnimplementedAppUserManagerServer) GetAppUserThirdPartyByAppThirdPartyID(context.Context, *GetAppUserThirdPartyByAppThirdPartyIDRequest) (*GetAppUserThirdPartyByAppThirdPartyIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppUserThirdPartyByAppThirdPartyID not implemented")
}
func (UnimplementedAppUserManagerServer) CreateAppUserWithSecretRevert(context.Context, *CreateAppUserWithSecretRequest) (*CreateAppUserWithSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppUserWithSecretRevert not implemented")
}
func (UnimplementedAppUserManagerServer) mustEmbedUnimplementedAppUserManagerServer() {}

// UnsafeAppUserManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppUserManagerServer will
// result in compilation errors.
type UnsafeAppUserManagerServer interface {
	mustEmbedUnimplementedAppUserManagerServer()
}

func RegisterAppUserManagerServer(s grpc.ServiceRegistrar, srv AppUserManagerServer) {
	s.RegisterService(&AppUserManager_ServiceDesc, srv)
}

func _AppUserManager_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_CreateAppControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).CreateAppControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/CreateAppControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).CreateAppControl(ctx, req.(*CreateAppControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_CreateAppControlForOtherApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppControlForOtherAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).CreateAppControlForOtherApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/CreateAppControlForOtherApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).CreateAppControlForOtherApp(ctx, req.(*CreateAppControlForOtherAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_GetAppControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).GetAppControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/GetAppControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).GetAppControl(ctx, req.(*GetAppControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_GetAppControlByApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppControlByAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).GetAppControlByApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/GetAppControlByApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).GetAppControlByApp(ctx, req.(*GetAppControlByAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_UpdateAppControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).UpdateAppControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/UpdateAppControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).UpdateAppControl(ctx, req.(*UpdateAppControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_CreateAppUserControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppUserControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).CreateAppUserControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/CreateAppUserControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).CreateAppUserControl(ctx, req.(*CreateAppUserControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_GetAppUserControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppUserControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).GetAppUserControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/GetAppUserControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).GetAppUserControl(ctx, req.(*GetAppUserControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_GetAppUserControlByAppUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppUserControlByAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).GetAppUserControlByAppUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/GetAppUserControlByAppUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).GetAppUserControlByAppUser(ctx, req.(*GetAppUserControlByAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_UpdateAppUserControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppUserControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).UpdateAppUserControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/UpdateAppUserControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).UpdateAppUserControl(ctx, req.(*UpdateAppUserControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_CreateGenesisRoleUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGenesisRoleUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).CreateGenesisRoleUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/CreateGenesisRoleUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).CreateGenesisRoleUser(ctx, req.(*CreateGenesisRoleUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_CreateAppUserWithThirdParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppUserWithThirdPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).CreateAppUserWithThirdParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/CreateAppUserWithThirdParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).CreateAppUserWithThirdParty(ctx, req.(*CreateAppUserWithThirdPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_CreateAppUserThirdParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppUserThirdPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).CreateAppUserThirdParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/CreateAppUserThirdParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).CreateAppUserThirdParty(ctx, req.(*CreateAppUserThirdPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_GetAppUserThirdPartyByAppThirdPartyID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppUserThirdPartyByAppThirdPartyIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).GetAppUserThirdPartyByAppThirdPartyID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/GetAppUserThirdPartyByAppThirdPartyID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).GetAppUserThirdPartyByAppThirdPartyID(ctx, req.(*GetAppUserThirdPartyByAppThirdPartyIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManager_CreateAppUserWithSecretRevert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppUserWithSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerServer).CreateAppUserWithSecretRevert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v1.AppUserManager/CreateAppUserWithSecretRevert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerServer).CreateAppUserWithSecretRevert(ctx, req.(*CreateAppUserWithSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppUserManager_ServiceDesc is the grpc.ServiceDesc for AppUserManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppUserManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app.user.manager.v1.AppUserManager",
	HandlerType: (*AppUserManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _AppUserManager_Version_Handler,
		},
		{
			MethodName: "CreateAppControl",
			Handler:    _AppUserManager_CreateAppControl_Handler,
		},
		{
			MethodName: "CreateAppControlForOtherApp",
			Handler:    _AppUserManager_CreateAppControlForOtherApp_Handler,
		},
		{
			MethodName: "GetAppControl",
			Handler:    _AppUserManager_GetAppControl_Handler,
		},
		{
			MethodName: "GetAppControlByApp",
			Handler:    _AppUserManager_GetAppControlByApp_Handler,
		},
		{
			MethodName: "UpdateAppControl",
			Handler:    _AppUserManager_UpdateAppControl_Handler,
		},
		{
			MethodName: "CreateAppUserControl",
			Handler:    _AppUserManager_CreateAppUserControl_Handler,
		},
		{
			MethodName: "GetAppUserControl",
			Handler:    _AppUserManager_GetAppUserControl_Handler,
		},
		{
			MethodName: "GetAppUserControlByAppUser",
			Handler:    _AppUserManager_GetAppUserControlByAppUser_Handler,
		},
		{
			MethodName: "UpdateAppUserControl",
			Handler:    _AppUserManager_UpdateAppUserControl_Handler,
		},
		{
			MethodName: "CreateGenesisRoleUser",
			Handler:    _AppUserManager_CreateGenesisRoleUser_Handler,
		},
		{
			MethodName: "CreateAppUserWithThirdParty",
			Handler:    _AppUserManager_CreateAppUserWithThirdParty_Handler,
		},
		{
			MethodName: "CreateAppUserThirdParty",
			Handler:    _AppUserManager_CreateAppUserThirdParty_Handler,
		},
		{
			MethodName: "GetAppUserThirdPartyByAppThirdPartyID",
			Handler:    _AppUserManager_GetAppUserThirdPartyByAppThirdPartyID_Handler,
		},
		{
			MethodName: "CreateAppUserWithSecretRevert",
			Handler:    _AppUserManager_CreateAppUserWithSecretRevert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/appuser/mgr/v1/mgr.proto",
}
