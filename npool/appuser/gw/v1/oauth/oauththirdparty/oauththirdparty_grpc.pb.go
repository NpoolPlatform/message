// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/appuser/gw/v1/oauth/oauththirdparty/oauththirdparty.proto

package oauththirdparty

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	CreateOAuthThirdParty(ctx context.Context, in *CreateOAuthThirdPartyRequest, opts ...grpc.CallOption) (*CreateOAuthThirdPartyResponse, error)
	UpdateOAuthThirdParty(ctx context.Context, in *UpdateOAuthThirdPartyRequest, opts ...grpc.CallOption) (*UpdateOAuthThirdPartyResponse, error)
	DeleteOAuthThirdParty(ctx context.Context, in *DeleteOAuthThirdPartyRequest, opts ...grpc.CallOption) (*DeleteOAuthThirdPartyResponse, error)
	GetOAuthThirdParties(ctx context.Context, in *GetOAuthThirdPartiesRequest, opts ...grpc.CallOption) (*GetOAuthThirdPartiesResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) CreateOAuthThirdParty(ctx context.Context, in *CreateOAuthThirdPartyRequest, opts ...grpc.CallOption) (*CreateOAuthThirdPartyResponse, error) {
	out := new(CreateOAuthThirdPartyResponse)
	err := c.cc.Invoke(ctx, "/appuser.gateway.oauth.oauththirdparty.v1.Gateway/CreateOAuthThirdParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdateOAuthThirdParty(ctx context.Context, in *UpdateOAuthThirdPartyRequest, opts ...grpc.CallOption) (*UpdateOAuthThirdPartyResponse, error) {
	out := new(UpdateOAuthThirdPartyResponse)
	err := c.cc.Invoke(ctx, "/appuser.gateway.oauth.oauththirdparty.v1.Gateway/UpdateOAuthThirdParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) DeleteOAuthThirdParty(ctx context.Context, in *DeleteOAuthThirdPartyRequest, opts ...grpc.CallOption) (*DeleteOAuthThirdPartyResponse, error) {
	out := new(DeleteOAuthThirdPartyResponse)
	err := c.cc.Invoke(ctx, "/appuser.gateway.oauth.oauththirdparty.v1.Gateway/DeleteOAuthThirdParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetOAuthThirdParties(ctx context.Context, in *GetOAuthThirdPartiesRequest, opts ...grpc.CallOption) (*GetOAuthThirdPartiesResponse, error) {
	out := new(GetOAuthThirdPartiesResponse)
	err := c.cc.Invoke(ctx, "/appuser.gateway.oauth.oauththirdparty.v1.Gateway/GetOAuthThirdParties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	CreateOAuthThirdParty(context.Context, *CreateOAuthThirdPartyRequest) (*CreateOAuthThirdPartyResponse, error)
	UpdateOAuthThirdParty(context.Context, *UpdateOAuthThirdPartyRequest) (*UpdateOAuthThirdPartyResponse, error)
	DeleteOAuthThirdParty(context.Context, *DeleteOAuthThirdPartyRequest) (*DeleteOAuthThirdPartyResponse, error)
	GetOAuthThirdParties(context.Context, *GetOAuthThirdPartiesRequest) (*GetOAuthThirdPartiesResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) CreateOAuthThirdParty(context.Context, *CreateOAuthThirdPartyRequest) (*CreateOAuthThirdPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOAuthThirdParty not implemented")
}
func (UnimplementedGatewayServer) UpdateOAuthThirdParty(context.Context, *UpdateOAuthThirdPartyRequest) (*UpdateOAuthThirdPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOAuthThirdParty not implemented")
}
func (UnimplementedGatewayServer) DeleteOAuthThirdParty(context.Context, *DeleteOAuthThirdPartyRequest) (*DeleteOAuthThirdPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOAuthThirdParty not implemented")
}
func (UnimplementedGatewayServer) GetOAuthThirdParties(context.Context, *GetOAuthThirdPartiesRequest) (*GetOAuthThirdPartiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOAuthThirdParties not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_CreateOAuthThirdParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOAuthThirdPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateOAuthThirdParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.gateway.oauth.oauththirdparty.v1.Gateway/CreateOAuthThirdParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateOAuthThirdParty(ctx, req.(*CreateOAuthThirdPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdateOAuthThirdParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOAuthThirdPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateOAuthThirdParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.gateway.oauth.oauththirdparty.v1.Gateway/UpdateOAuthThirdParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateOAuthThirdParty(ctx, req.(*UpdateOAuthThirdPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_DeleteOAuthThirdParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOAuthThirdPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).DeleteOAuthThirdParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.gateway.oauth.oauththirdparty.v1.Gateway/DeleteOAuthThirdParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).DeleteOAuthThirdParty(ctx, req.(*DeleteOAuthThirdPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetOAuthThirdParties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOAuthThirdPartiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetOAuthThirdParties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.gateway.oauth.oauththirdparty.v1.Gateway/GetOAuthThirdParties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetOAuthThirdParties(ctx, req.(*GetOAuthThirdPartiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "appuser.gateway.oauth.oauththirdparty.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOAuthThirdParty",
			Handler:    _Gateway_CreateOAuthThirdParty_Handler,
		},
		{
			MethodName: "UpdateOAuthThirdParty",
			Handler:    _Gateway_UpdateOAuthThirdParty_Handler,
		},
		{
			MethodName: "DeleteOAuthThirdParty",
			Handler:    _Gateway_DeleteOAuthThirdParty_Handler,
		},
		{
			MethodName: "GetOAuthThirdParties",
			Handler:    _Gateway_GetOAuthThirdParties_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/appuser/gw/v1/oauth/oauththirdparty/oauththirdparty.proto",
}
