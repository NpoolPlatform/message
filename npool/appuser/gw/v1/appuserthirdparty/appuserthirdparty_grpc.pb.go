// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/appuser/gw/v1/appuserthirdparty/appuserthirdparty.proto

package thirdparty

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppUserThirdPartyClient is the client API for AppUserThirdParty service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppUserThirdPartyClient interface {
	CreateThirdParty(ctx context.Context, in *CreateThirdPartyRequest, opts ...grpc.CallOption) (*CreateThirdPartyResponse, error)
}

type appUserThirdPartyClient struct {
	cc grpc.ClientConnInterface
}

func NewAppUserThirdPartyClient(cc grpc.ClientConnInterface) AppUserThirdPartyClient {
	return &appUserThirdPartyClient{cc}
}

func (c *appUserThirdPartyClient) CreateThirdParty(ctx context.Context, in *CreateThirdPartyRequest, opts ...grpc.CallOption) (*CreateThirdPartyResponse, error) {
	out := new(CreateThirdPartyResponse)
	err := c.cc.Invoke(ctx, "/app.user.gateway.thirdparty.v1.AppUserThirdParty/CreateThirdParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppUserThirdPartyServer is the server API for AppUserThirdParty service.
// All implementations must embed UnimplementedAppUserThirdPartyServer
// for forward compatibility
type AppUserThirdPartyServer interface {
	CreateThirdParty(context.Context, *CreateThirdPartyRequest) (*CreateThirdPartyResponse, error)
	mustEmbedUnimplementedAppUserThirdPartyServer()
}

// UnimplementedAppUserThirdPartyServer must be embedded to have forward compatible implementations.
type UnimplementedAppUserThirdPartyServer struct {
}

func (UnimplementedAppUserThirdPartyServer) CreateThirdParty(context.Context, *CreateThirdPartyRequest) (*CreateThirdPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateThirdParty not implemented")
}
func (UnimplementedAppUserThirdPartyServer) mustEmbedUnimplementedAppUserThirdPartyServer() {}

// UnsafeAppUserThirdPartyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppUserThirdPartyServer will
// result in compilation errors.
type UnsafeAppUserThirdPartyServer interface {
	mustEmbedUnimplementedAppUserThirdPartyServer()
}

func RegisterAppUserThirdPartyServer(s grpc.ServiceRegistrar, srv AppUserThirdPartyServer) {
	s.RegisterService(&AppUserThirdParty_ServiceDesc, srv)
}

func _AppUserThirdParty_CreateThirdParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateThirdPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserThirdPartyServer).CreateThirdParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.gateway.thirdparty.v1.AppUserThirdParty/CreateThirdParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserThirdPartyServer).CreateThirdParty(ctx, req.(*CreateThirdPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppUserThirdParty_ServiceDesc is the grpc.ServiceDesc for AppUserThirdParty service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppUserThirdParty_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app.user.gateway.thirdparty.v1.AppUserThirdParty",
	HandlerType: (*AppUserThirdPartyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateThirdParty",
			Handler:    _AppUserThirdParty_CreateThirdParty_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/appuser/gw/v1/appuserthirdparty/appuserthirdparty.proto",
}
