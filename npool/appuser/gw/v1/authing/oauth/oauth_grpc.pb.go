// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/appuser/gw/v1/authing/oauth/oauth.proto

package oauth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gateway_GetOAuthLoginList_FullMethodName = "/appuser.gateway.authing.oauth.v1.Gateway/GetOAuthLoginList"
	Gateway_GetOAuthLoginURL_FullMethodName  = "/appuser.gateway.authing.oauth.v1.Gateway/GetOAuthLoginURL"
	Gateway_OAuthLogin_FullMethodName        = "/appuser.gateway.authing.oauth.v1.Gateway/OAuthLogin"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	GetOAuthLoginList(ctx context.Context, in *GetOAuthLoginListRequest, opts ...grpc.CallOption) (*GetOAuthLoginListResponse, error)
	GetOAuthLoginURL(ctx context.Context, in *GetOAuthLoginURLRequest, opts ...grpc.CallOption) (*GetOAuthLoginURLResponse, error)
	OAuthLogin(ctx context.Context, in *OAuthLoginRequest, opts ...grpc.CallOption) (*OAuthLoginResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) GetOAuthLoginList(ctx context.Context, in *GetOAuthLoginListRequest, opts ...grpc.CallOption) (*GetOAuthLoginListResponse, error) {
	out := new(GetOAuthLoginListResponse)
	err := c.cc.Invoke(ctx, Gateway_GetOAuthLoginList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetOAuthLoginURL(ctx context.Context, in *GetOAuthLoginURLRequest, opts ...grpc.CallOption) (*GetOAuthLoginURLResponse, error) {
	out := new(GetOAuthLoginURLResponse)
	err := c.cc.Invoke(ctx, Gateway_GetOAuthLoginURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) OAuthLogin(ctx context.Context, in *OAuthLoginRequest, opts ...grpc.CallOption) (*OAuthLoginResponse, error) {
	out := new(OAuthLoginResponse)
	err := c.cc.Invoke(ctx, Gateway_OAuthLogin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	GetOAuthLoginList(context.Context, *GetOAuthLoginListRequest) (*GetOAuthLoginListResponse, error)
	GetOAuthLoginURL(context.Context, *GetOAuthLoginURLRequest) (*GetOAuthLoginURLResponse, error)
	OAuthLogin(context.Context, *OAuthLoginRequest) (*OAuthLoginResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) GetOAuthLoginList(context.Context, *GetOAuthLoginListRequest) (*GetOAuthLoginListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOAuthLoginList not implemented")
}
func (UnimplementedGatewayServer) GetOAuthLoginURL(context.Context, *GetOAuthLoginURLRequest) (*GetOAuthLoginURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOAuthLoginURL not implemented")
}
func (UnimplementedGatewayServer) OAuthLogin(context.Context, *OAuthLoginRequest) (*OAuthLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OAuthLogin not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_GetOAuthLoginList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOAuthLoginListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetOAuthLoginList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetOAuthLoginList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetOAuthLoginList(ctx, req.(*GetOAuthLoginListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetOAuthLoginURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOAuthLoginURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetOAuthLoginURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetOAuthLoginURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetOAuthLoginURL(ctx, req.(*GetOAuthLoginURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_OAuthLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OAuthLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).OAuthLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_OAuthLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).OAuthLogin(ctx, req.(*OAuthLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "appuser.gateway.authing.oauth.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOAuthLoginList",
			Handler:    _Gateway_GetOAuthLoginList_Handler,
		},
		{
			MethodName: "GetOAuthLoginURL",
			Handler:    _Gateway_GetOAuthLoginURL_Handler,
		},
		{
			MethodName: "OAuthLogin",
			Handler:    _Gateway_OAuthLogin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/appuser/gw/v1/authing/oauth/oauth.proto",
}
