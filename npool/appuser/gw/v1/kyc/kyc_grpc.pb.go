// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/appuser/gw/v1/kyc/kyc.proto

package kyc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	CreateKyc(ctx context.Context, in *CreateKycRequest, opts ...grpc.CallOption) (*CreateKycResponse, error)
	UpdateKyc(ctx context.Context, in *UpdateKycRequest, opts ...grpc.CallOption) (*UpdateKycResponse, error)
	GetKyc(ctx context.Context, in *GetKycRequest, opts ...grpc.CallOption) (*GetKycResponse, error)
	GetKycs(ctx context.Context, in *GetKycsRequest, opts ...grpc.CallOption) (*GetKycsResponse, error)
	GetAppKycs(ctx context.Context, in *GetAppKycsRequest, opts ...grpc.CallOption) (*GetAppKycsResponse, error)
	UploadKycImage(ctx context.Context, in *UploadKycImageRequest, opts ...grpc.CallOption) (*UploadKycImageResponse, error)
	GetKycImage(ctx context.Context, in *GetKycImageRequest, opts ...grpc.CallOption) (*GetKycImageResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) CreateKyc(ctx context.Context, in *CreateKycRequest, opts ...grpc.CallOption) (*CreateKycResponse, error) {
	out := new(CreateKycResponse)
	err := c.cc.Invoke(ctx, "/appuser.gateway.kyc.v2.Gateway/CreateKyc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdateKyc(ctx context.Context, in *UpdateKycRequest, opts ...grpc.CallOption) (*UpdateKycResponse, error) {
	out := new(UpdateKycResponse)
	err := c.cc.Invoke(ctx, "/appuser.gateway.kyc.v2.Gateway/UpdateKyc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetKyc(ctx context.Context, in *GetKycRequest, opts ...grpc.CallOption) (*GetKycResponse, error) {
	out := new(GetKycResponse)
	err := c.cc.Invoke(ctx, "/appuser.gateway.kyc.v2.Gateway/GetKyc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetKycs(ctx context.Context, in *GetKycsRequest, opts ...grpc.CallOption) (*GetKycsResponse, error) {
	out := new(GetKycsResponse)
	err := c.cc.Invoke(ctx, "/appuser.gateway.kyc.v2.Gateway/GetKycs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetAppKycs(ctx context.Context, in *GetAppKycsRequest, opts ...grpc.CallOption) (*GetAppKycsResponse, error) {
	out := new(GetAppKycsResponse)
	err := c.cc.Invoke(ctx, "/appuser.gateway.kyc.v2.Gateway/GetAppKycs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UploadKycImage(ctx context.Context, in *UploadKycImageRequest, opts ...grpc.CallOption) (*UploadKycImageResponse, error) {
	out := new(UploadKycImageResponse)
	err := c.cc.Invoke(ctx, "/appuser.gateway.kyc.v2.Gateway/UploadKycImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetKycImage(ctx context.Context, in *GetKycImageRequest, opts ...grpc.CallOption) (*GetKycImageResponse, error) {
	out := new(GetKycImageResponse)
	err := c.cc.Invoke(ctx, "/appuser.gateway.kyc.v2.Gateway/GetKycImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	CreateKyc(context.Context, *CreateKycRequest) (*CreateKycResponse, error)
	UpdateKyc(context.Context, *UpdateKycRequest) (*UpdateKycResponse, error)
	GetKyc(context.Context, *GetKycRequest) (*GetKycResponse, error)
	GetKycs(context.Context, *GetKycsRequest) (*GetKycsResponse, error)
	GetAppKycs(context.Context, *GetAppKycsRequest) (*GetAppKycsResponse, error)
	UploadKycImage(context.Context, *UploadKycImageRequest) (*UploadKycImageResponse, error)
	GetKycImage(context.Context, *GetKycImageRequest) (*GetKycImageResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) CreateKyc(context.Context, *CreateKycRequest) (*CreateKycResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKyc not implemented")
}
func (UnimplementedGatewayServer) UpdateKyc(context.Context, *UpdateKycRequest) (*UpdateKycResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKyc not implemented")
}
func (UnimplementedGatewayServer) GetKyc(context.Context, *GetKycRequest) (*GetKycResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKyc not implemented")
}
func (UnimplementedGatewayServer) GetKycs(context.Context, *GetKycsRequest) (*GetKycsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKycs not implemented")
}
func (UnimplementedGatewayServer) GetAppKycs(context.Context, *GetAppKycsRequest) (*GetAppKycsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppKycs not implemented")
}
func (UnimplementedGatewayServer) UploadKycImage(context.Context, *UploadKycImageRequest) (*UploadKycImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadKycImage not implemented")
}
func (UnimplementedGatewayServer) GetKycImage(context.Context, *GetKycImageRequest) (*GetKycImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKycImage not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_CreateKyc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKycRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateKyc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.gateway.kyc.v2.Gateway/CreateKyc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateKyc(ctx, req.(*CreateKycRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdateKyc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKycRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateKyc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.gateway.kyc.v2.Gateway/UpdateKyc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateKyc(ctx, req.(*UpdateKycRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetKyc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKycRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetKyc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.gateway.kyc.v2.Gateway/GetKyc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetKyc(ctx, req.(*GetKycRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetKycs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKycsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetKycs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.gateway.kyc.v2.Gateway/GetKycs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetKycs(ctx, req.(*GetKycsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetAppKycs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppKycsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetAppKycs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.gateway.kyc.v2.Gateway/GetAppKycs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetAppKycs(ctx, req.(*GetAppKycsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UploadKycImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadKycImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UploadKycImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.gateway.kyc.v2.Gateway/UploadKycImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UploadKycImage(ctx, req.(*UploadKycImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetKycImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKycImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetKycImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.gateway.kyc.v2.Gateway/GetKycImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetKycImage(ctx, req.(*GetKycImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "appuser.gateway.kyc.v2.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateKyc",
			Handler:    _Gateway_CreateKyc_Handler,
		},
		{
			MethodName: "UpdateKyc",
			Handler:    _Gateway_UpdateKyc_Handler,
		},
		{
			MethodName: "GetKyc",
			Handler:    _Gateway_GetKyc_Handler,
		},
		{
			MethodName: "GetKycs",
			Handler:    _Gateway_GetKycs_Handler,
		},
		{
			MethodName: "GetAppKycs",
			Handler:    _Gateway_GetAppKycs_Handler,
		},
		{
			MethodName: "UploadKycImage",
			Handler:    _Gateway_UploadKycImage_Handler,
		},
		{
			MethodName: "GetKycImage",
			Handler:    _Gateway_GetKycImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/appuser/gw/v1/kyc/kyc.proto",
}
