syntax = "proto3";

package appuser.gateway.kyc.v2;

option go_package = "github.com/NpoolPlatform/message/npool/appuser/gw/v1/kyc";

import "npool/appuser/mgr/v2/kyc/kyc.proto";
import "google/api/annotations.proto";
import "npool/npool.proto";

service Manager {
    rpc CreateKyc (CreateKycRequest) returns (CreateKycResponse) {
        option (google.api.http) = {
            post: "/v1/create/kyc"
            body: "*"
        };
    }

    rpc UpdateKyc (UpdateKycRequest) returns (UpdateKycResponse) {
        option (google.api.http) = {
            post: "/v1/update/kyc"
            body: "*"
        };
    }

    rpc GetKyc (GetKycRequest) returns (GetKycResponse) {
        option (google.api.http) = {
            post: "/v1/get/kyc"
            body: "*"
        };
    }

    rpc GetKycs (GetKycsRequest) returns (GetKycsResponse) {
        option (google.api.http) = {
            post: "/v1/get/kycs"
            body: "*"
        };
    }
}

message Kyc {
    string          ID           = 10;
    string          AppID        = 20;
    string          AppName      = 30;
    string          AppLogo      = 40;
    string          UserID       = 50;
    string          EmailAddress = 60;
    string          PhoneNO      = 70;
    appuser.manager.kyc.v1.KycDocumentType DocumentType = 80;
    string          IDNumber     = 90;
    string          FrontImg     = 100;
    string          BackImg      = 110;
    string          SelfieImg    = 120;
    appuser.manager.kyc.v1.KycEntityType   EntityType   = 130;
    uint32          CreatedAt    = 140;
    uint32          UpdatedAt    = 150;
}

message CreateKycRequest {
    KycReq Info = 10;
}

message CreateKycResponse {
    Kyc Info = 10;
}

message CreateKycsRequest {
    repeated KycReq Infos = 10;
}

message CreateKycsResponse {
    repeated Kyc Infos = 10;
}

message GetKycRequest {
    string ID = 10;
}

message GetKycResponse {
    Kyc Info = 10;
}

message GetKycsRequest {
    Conds Conds  = 10;
    int32 Offset = 20;
    int32 Limit  = 30;
}

message GetKycsResponse {
    repeated Kyc Infos = 10;
    uint32        Total = 20;
}

message GetKycOnlyRequest {
    Conds Conds = 10;
}

message GetKycOnlyResponse {
    Kyc Info = 10;
}

message UpdateKycRequest {
    KycReq Info = 10;
}

message UpdateKycResponse {
    Kyc Info = 10;
}

message ExistKycRequest {
    string ID = 10;
}

message ExistKycResponse {
    bool Info = 10;
}

message ExistKycCondsRequest {
    Conds Conds = 10;
}

message ExistKycCondsResponse {
    bool Info = 10;
}

message CountKycsRequest {
    Conds Conds = 10;
}

message CountKycsResponse {
    uint32 Info = 10;
}

message DeleteKycRequest {
    string ID = 10;
}

message DeleteKycResponse {
    Kyc Info = 10;
}
