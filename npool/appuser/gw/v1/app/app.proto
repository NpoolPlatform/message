syntax = "proto3";

package appuser.gateway.app.v1;

option go_package = "github.com/NpoolPlatform/message/npool/appuser/gw/v1/app";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "npool/npool.proto";
import "npool/appuser/mgr/v2/app/app.proto";
import "npool/appuser/mw/v1/app/app.proto";

service AppGw {
    rpc CreateApp (CreateAppRequest) returns (CreateAppResponse) {
        option (google.api.http) = {
            post: "/v1/create/app"
            body: "*"
        };
    }

    rpc GetApp (GetAppRequest) returns (GetAppResponse) {
        option (google.api.http) = {
            post: "/v1/get/app"
            body: "*"
        };
    }

    // Super admin api
    rpc GetApps (GetAppsRequest) returns (GetAppsResponse) {
        option (google.api.http) = {
            post: "/v1/get/apps"
            body: "*"
        };
    }

    rpc GetUserApps (GetUserAppsRequest) returns (GetUserAppsResponse) {
        option (google.api.http) = {
            post: "/v1/get/user/apps"
            body: "*"
        };
    }

    rpc BanApp (appuser.middleware.app.v1.BanAppRequest) returns (appuser.middleware.app.v1.BanAppResponse) {
        option (google.api.http) = {
            post: "/v1/ban/app"
            body: "*"
        };
    }

    rpc GetSignMethods (appuser.middleware.app.v1.GetSignMethodsRequest) returns (appuser.middleware.app.v1.GetSignMethodsResponse) {
        option (google.api.http) = {
            post: "/v1/get/signmethods"
            body: "*"
        };
    }

    rpc SetSignMethods (appuser.middleware.app.v1.SetSignMethodsRequest) returns (appuser.middleware.app.v1.SetSignMethodsResponse) {
        option (google.api.http) = {
            post: "/v1/set/signmethods"
            body: "*"
        };
    }

    rpc GetRecaptchas (appuser.middleware.app.v1.GetRecaptchasRequest) returns (appuser.middleware.app.v1.GetRecaptchasResponse) {
        option (google.api.http) = {
            post: "/v1/get/recaptchas"
            body: "*"
        };
    }

    rpc SetRecaptcha (appuser.middleware.app.v1.SetRecaptchaRequest) returns (appuser.middleware.app.v1.SetRecaptchaResponse) {
        option (google.api.http) = {
            post: "/v1/set/recaptcha"
            body: "*"
        };
    }

    rpc SetKyc (appuser.middleware.app.v1.SetKycRequest) returns (appuser.middleware.app.v1.SetKycResponse) {
        option (google.api.http) = {
            post: "/v1/set/kyc"
            body: "*"
        };
    }

    rpc SetSigninVerify (appuser.middleware.app.v1.SetSigninVerifyRequest) returns (appuser.middleware.app.v1.SetSigninVerifyResponse) {
        option (google.api.http) = {
            post: "/v1/set/signinverify"
            body: "*"
        };
    }

    rpc SetInvitationCodeMust (appuser.middleware.app.v1.SetInvitationCodeMustRequest) returns (appuser.middleware.app.v1.SetInvitationCodeMustResponse) {
        option (google.api.http) = {
            post: "/v1/set/invitationcodemust"
            body: "*"
        };
    }
}

message CreateAppRequest {
    // Permissioned by path
    appuser.manager.app.v2.AppReq Info = 10;
}

message CreateAppResponse {
    appuser.manager.app.v2.App Info = 10;
}

message GetAppRequest {
    // Permissioned by app
    string AppID = 10;
}

message GetAppResponse {
    appuser.middleware.app.v1.App Info = 10;
}

message GetAppsRequest {
    // Permissioned by path
    int32  Offset = 30;
    int32  Limit  = 40;
}

message GetAppsResponse {
    repeated appuser.middleware.app.v1.App Infos = 10;
    uint32                                 Total = 20;
}

message GetUserAppsRequest {
    // Permissioned by path
    string TargetUserID = 10;
    int32  Offset       = 20;
    int32  Limit        = 30;
}

message GetUserAppsResponse {
    repeated appuser.middleware.app.v1.App Infos = 10;
    uint32                                 Total = 20;
}

