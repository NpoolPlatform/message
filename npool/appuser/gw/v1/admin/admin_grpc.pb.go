// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/appuser/gw/v1/admin/admin.proto

package admin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminGwClient is the client API for AdminGw service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminGwClient interface {
	// VPN only apis
	// Create genesis / admin apps
	CreateAdminApps(ctx context.Context, in *CreateAdminAppsRequest, opts ...grpc.CallOption) (*CreateAdminAppsResponse, error)
	// Create genesis / admin role
	CreateGenesisRoles(ctx context.Context, in *CreateGenesisRolesRequest, opts ...grpc.CallOption) (*CreateGenesisRolesResponse, error)
	// Create genesis / admin user
	CreateGenesisUser(ctx context.Context, in *CreateGenesisUserRequest, opts ...grpc.CallOption) (*CreateGenesisUserResponse, error)
	GetAdminApps(ctx context.Context, in *GetAdminAppsRequest, opts ...grpc.CallOption) (*GetAdminAppsResponse, error)
	GetGenesisRoles(ctx context.Context, in *GetGenesisRolesRequest, opts ...grpc.CallOption) (*GetGenesisRolesResponse, error)
	GetGenesisRoleUsers(ctx context.Context, in *GetGenesisRoleUsersRequest, opts ...grpc.CallOption) (*GetGenesisRoleUsersResponse, error)
	GetGenesisAuths(ctx context.Context, in *GetGenesisAuthsRequest, opts ...grpc.CallOption) (*GetGenesisAuthsResponse, error)
	AuthorizeGenesis(ctx context.Context, in *AuthorizeGenesisRequest, opts ...grpc.CallOption) (*AuthorizeGenesisResponse, error)
}

type adminGwClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminGwClient(cc grpc.ClientConnInterface) AdminGwClient {
	return &adminGwClient{cc}
}

func (c *adminGwClient) CreateAdminApps(ctx context.Context, in *CreateAdminAppsRequest, opts ...grpc.CallOption) (*CreateAdminAppsResponse, error) {
	out := new(CreateAdminAppsResponse)
	err := c.cc.Invoke(ctx, "/appuser.gateway.admin.v1.AdminGw/CreateAdminApps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminGwClient) CreateGenesisRoles(ctx context.Context, in *CreateGenesisRolesRequest, opts ...grpc.CallOption) (*CreateGenesisRolesResponse, error) {
	out := new(CreateGenesisRolesResponse)
	err := c.cc.Invoke(ctx, "/appuser.gateway.admin.v1.AdminGw/CreateGenesisRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminGwClient) CreateGenesisUser(ctx context.Context, in *CreateGenesisUserRequest, opts ...grpc.CallOption) (*CreateGenesisUserResponse, error) {
	out := new(CreateGenesisUserResponse)
	err := c.cc.Invoke(ctx, "/appuser.gateway.admin.v1.AdminGw/CreateGenesisUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminGwClient) GetAdminApps(ctx context.Context, in *GetAdminAppsRequest, opts ...grpc.CallOption) (*GetAdminAppsResponse, error) {
	out := new(GetAdminAppsResponse)
	err := c.cc.Invoke(ctx, "/appuser.gateway.admin.v1.AdminGw/GetAdminApps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminGwClient) GetGenesisRoles(ctx context.Context, in *GetGenesisRolesRequest, opts ...grpc.CallOption) (*GetGenesisRolesResponse, error) {
	out := new(GetGenesisRolesResponse)
	err := c.cc.Invoke(ctx, "/appuser.gateway.admin.v1.AdminGw/GetGenesisRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminGwClient) GetGenesisRoleUsers(ctx context.Context, in *GetGenesisRoleUsersRequest, opts ...grpc.CallOption) (*GetGenesisRoleUsersResponse, error) {
	out := new(GetGenesisRoleUsersResponse)
	err := c.cc.Invoke(ctx, "/appuser.gateway.admin.v1.AdminGw/GetGenesisRoleUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminGwClient) GetGenesisAuths(ctx context.Context, in *GetGenesisAuthsRequest, opts ...grpc.CallOption) (*GetGenesisAuthsResponse, error) {
	out := new(GetGenesisAuthsResponse)
	err := c.cc.Invoke(ctx, "/appuser.gateway.admin.v1.AdminGw/GetGenesisAuths", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminGwClient) AuthorizeGenesis(ctx context.Context, in *AuthorizeGenesisRequest, opts ...grpc.CallOption) (*AuthorizeGenesisResponse, error) {
	out := new(AuthorizeGenesisResponse)
	err := c.cc.Invoke(ctx, "/appuser.gateway.admin.v1.AdminGw/AuthorizeGenesis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminGwServer is the server API for AdminGw service.
// All implementations must embed UnimplementedAdminGwServer
// for forward compatibility
type AdminGwServer interface {
	// VPN only apis
	// Create genesis / admin apps
	CreateAdminApps(context.Context, *CreateAdminAppsRequest) (*CreateAdminAppsResponse, error)
	// Create genesis / admin role
	CreateGenesisRoles(context.Context, *CreateGenesisRolesRequest) (*CreateGenesisRolesResponse, error)
	// Create genesis / admin user
	CreateGenesisUser(context.Context, *CreateGenesisUserRequest) (*CreateGenesisUserResponse, error)
	GetAdminApps(context.Context, *GetAdminAppsRequest) (*GetAdminAppsResponse, error)
	GetGenesisRoles(context.Context, *GetGenesisRolesRequest) (*GetGenesisRolesResponse, error)
	GetGenesisRoleUsers(context.Context, *GetGenesisRoleUsersRequest) (*GetGenesisRoleUsersResponse, error)
	GetGenesisAuths(context.Context, *GetGenesisAuthsRequest) (*GetGenesisAuthsResponse, error)
	AuthorizeGenesis(context.Context, *AuthorizeGenesisRequest) (*AuthorizeGenesisResponse, error)
	mustEmbedUnimplementedAdminGwServer()
}

// UnimplementedAdminGwServer must be embedded to have forward compatible implementations.
type UnimplementedAdminGwServer struct {
}

func (UnimplementedAdminGwServer) CreateAdminApps(context.Context, *CreateAdminAppsRequest) (*CreateAdminAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAdminApps not implemented")
}
func (UnimplementedAdminGwServer) CreateGenesisRoles(context.Context, *CreateGenesisRolesRequest) (*CreateGenesisRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGenesisRoles not implemented")
}
func (UnimplementedAdminGwServer) CreateGenesisUser(context.Context, *CreateGenesisUserRequest) (*CreateGenesisUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGenesisUser not implemented")
}
func (UnimplementedAdminGwServer) GetAdminApps(context.Context, *GetAdminAppsRequest) (*GetAdminAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdminApps not implemented")
}
func (UnimplementedAdminGwServer) GetGenesisRoles(context.Context, *GetGenesisRolesRequest) (*GetGenesisRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGenesisRoles not implemented")
}
func (UnimplementedAdminGwServer) GetGenesisRoleUsers(context.Context, *GetGenesisRoleUsersRequest) (*GetGenesisRoleUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGenesisRoleUsers not implemented")
}
func (UnimplementedAdminGwServer) GetGenesisAuths(context.Context, *GetGenesisAuthsRequest) (*GetGenesisAuthsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGenesisAuths not implemented")
}
func (UnimplementedAdminGwServer) AuthorizeGenesis(context.Context, *AuthorizeGenesisRequest) (*AuthorizeGenesisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizeGenesis not implemented")
}
func (UnimplementedAdminGwServer) mustEmbedUnimplementedAdminGwServer() {}

// UnsafeAdminGwServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminGwServer will
// result in compilation errors.
type UnsafeAdminGwServer interface {
	mustEmbedUnimplementedAdminGwServer()
}

func RegisterAdminGwServer(s grpc.ServiceRegistrar, srv AdminGwServer) {
	s.RegisterService(&AdminGw_ServiceDesc, srv)
}

func _AdminGw_CreateAdminApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAdminAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminGwServer).CreateAdminApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.gateway.admin.v1.AdminGw/CreateAdminApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminGwServer).CreateAdminApps(ctx, req.(*CreateAdminAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminGw_CreateGenesisRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGenesisRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminGwServer).CreateGenesisRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.gateway.admin.v1.AdminGw/CreateGenesisRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminGwServer).CreateGenesisRoles(ctx, req.(*CreateGenesisRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminGw_CreateGenesisUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGenesisUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminGwServer).CreateGenesisUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.gateway.admin.v1.AdminGw/CreateGenesisUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminGwServer).CreateGenesisUser(ctx, req.(*CreateGenesisUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminGw_GetAdminApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdminAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminGwServer).GetAdminApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.gateway.admin.v1.AdminGw/GetAdminApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminGwServer).GetAdminApps(ctx, req.(*GetAdminAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminGw_GetGenesisRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGenesisRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminGwServer).GetGenesisRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.gateway.admin.v1.AdminGw/GetGenesisRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminGwServer).GetGenesisRoles(ctx, req.(*GetGenesisRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminGw_GetGenesisRoleUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGenesisRoleUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminGwServer).GetGenesisRoleUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.gateway.admin.v1.AdminGw/GetGenesisRoleUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminGwServer).GetGenesisRoleUsers(ctx, req.(*GetGenesisRoleUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminGw_GetGenesisAuths_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGenesisAuthsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminGwServer).GetGenesisAuths(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.gateway.admin.v1.AdminGw/GetGenesisAuths",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminGwServer).GetGenesisAuths(ctx, req.(*GetGenesisAuthsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminGw_AuthorizeGenesis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeGenesisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminGwServer).AuthorizeGenesis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.gateway.admin.v1.AdminGw/AuthorizeGenesis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminGwServer).AuthorizeGenesis(ctx, req.(*AuthorizeGenesisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminGw_ServiceDesc is the grpc.ServiceDesc for AdminGw service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminGw_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "appuser.gateway.admin.v1.AdminGw",
	HandlerType: (*AdminGwServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAdminApps",
			Handler:    _AdminGw_CreateAdminApps_Handler,
		},
		{
			MethodName: "CreateGenesisRoles",
			Handler:    _AdminGw_CreateGenesisRoles_Handler,
		},
		{
			MethodName: "CreateGenesisUser",
			Handler:    _AdminGw_CreateGenesisUser_Handler,
		},
		{
			MethodName: "GetAdminApps",
			Handler:    _AdminGw_GetAdminApps_Handler,
		},
		{
			MethodName: "GetGenesisRoles",
			Handler:    _AdminGw_GetGenesisRoles_Handler,
		},
		{
			MethodName: "GetGenesisRoleUsers",
			Handler:    _AdminGw_GetGenesisRoleUsers_Handler,
		},
		{
			MethodName: "GetGenesisAuths",
			Handler:    _AdminGw_GetGenesisAuths_Handler,
		},
		{
			MethodName: "AuthorizeGenesis",
			Handler:    _AdminGw_AuthorizeGenesis_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/appuser/gw/v1/admin/admin.proto",
}
