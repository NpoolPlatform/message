// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/appuser/gw/v1/approleuser/approleuser.proto

package approleuser

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppRoleUserClient is the client API for AppRoleUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppRoleUserClient interface {
	CreateRoleUser(ctx context.Context, in *CreateRoleUserRequest, opts ...grpc.CallOption) (*CreateRoleUserResponse, error)
	CreateAppUserRoleUser(ctx context.Context, in *CreateAppUserRoleUserRequest, opts ...grpc.CallOption) (*CreateAppUserRoleUserResponse, error)
	CreateUserRoleUser(ctx context.Context, in *CreateUserRoleUserRequest, opts ...grpc.CallOption) (*CreateUserRoleUserResponse, error)
	GetRoleUser(ctx context.Context, in *GetRoleUserRequest, opts ...grpc.CallOption) (*GetRoleUserResponse, error)
	GetRoleUserByUsers(ctx context.Context, in *GetRoleUserByUsersRequest, opts ...grpc.CallOption) (*GetRoleUserByUsersResponse, error)
	GetRoleUsersByRole(ctx context.Context, in *GetRoleUsersByRoleRequest, opts ...grpc.CallOption) (*GetRoleUsersByRoleResponse, error)
	GetAppRoleUsersByRole(ctx context.Context, in *GetAppRoleUsersByRoleRequest, opts ...grpc.CallOption) (*GetAppRoleUsersByRoleResponse, error)
	GetRoleUsers(ctx context.Context, in *GetRoleUsersRequest, opts ...grpc.CallOption) (*GetRoleUsersResponse, error)
	GetAppRoleUsers(ctx context.Context, in *GetAppRoleUsersRequest, opts ...grpc.CallOption) (*GetAppRoleUsersResponse, error)
	DeleteRoleUser(ctx context.Context, in *DeleteRoleUserRequest, opts ...grpc.CallOption) (*DeleteRoleUserResponse, error)
}

type appRoleUserClient struct {
	cc grpc.ClientConnInterface
}

func NewAppRoleUserClient(cc grpc.ClientConnInterface) AppRoleUserClient {
	return &appRoleUserClient{cc}
}

func (c *appRoleUserClient) CreateRoleUser(ctx context.Context, in *CreateRoleUserRequest, opts ...grpc.CallOption) (*CreateRoleUserResponse, error) {
	out := new(CreateRoleUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.gateway.approleuser.v1.AppRoleUser/CreateRoleUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appRoleUserClient) CreateAppUserRoleUser(ctx context.Context, in *CreateAppUserRoleUserRequest, opts ...grpc.CallOption) (*CreateAppUserRoleUserResponse, error) {
	out := new(CreateAppUserRoleUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.gateway.approleuser.v1.AppRoleUser/CreateAppUserRoleUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appRoleUserClient) CreateUserRoleUser(ctx context.Context, in *CreateUserRoleUserRequest, opts ...grpc.CallOption) (*CreateUserRoleUserResponse, error) {
	out := new(CreateUserRoleUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.gateway.approleuser.v1.AppRoleUser/CreateUserRoleUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appRoleUserClient) GetRoleUser(ctx context.Context, in *GetRoleUserRequest, opts ...grpc.CallOption) (*GetRoleUserResponse, error) {
	out := new(GetRoleUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.gateway.approleuser.v1.AppRoleUser/GetRoleUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appRoleUserClient) GetRoleUserByUsers(ctx context.Context, in *GetRoleUserByUsersRequest, opts ...grpc.CallOption) (*GetRoleUserByUsersResponse, error) {
	out := new(GetRoleUserByUsersResponse)
	err := c.cc.Invoke(ctx, "/app.user.gateway.approleuser.v1.AppRoleUser/GetRoleUserByUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appRoleUserClient) GetRoleUsersByRole(ctx context.Context, in *GetRoleUsersByRoleRequest, opts ...grpc.CallOption) (*GetRoleUsersByRoleResponse, error) {
	out := new(GetRoleUsersByRoleResponse)
	err := c.cc.Invoke(ctx, "/app.user.gateway.approleuser.v1.AppRoleUser/GetRoleUsersByRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appRoleUserClient) GetAppRoleUsersByRole(ctx context.Context, in *GetAppRoleUsersByRoleRequest, opts ...grpc.CallOption) (*GetAppRoleUsersByRoleResponse, error) {
	out := new(GetAppRoleUsersByRoleResponse)
	err := c.cc.Invoke(ctx, "/app.user.gateway.approleuser.v1.AppRoleUser/GetAppRoleUsersByRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appRoleUserClient) GetRoleUsers(ctx context.Context, in *GetRoleUsersRequest, opts ...grpc.CallOption) (*GetRoleUsersResponse, error) {
	out := new(GetRoleUsersResponse)
	err := c.cc.Invoke(ctx, "/app.user.gateway.approleuser.v1.AppRoleUser/GetRoleUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appRoleUserClient) GetAppRoleUsers(ctx context.Context, in *GetAppRoleUsersRequest, opts ...grpc.CallOption) (*GetAppRoleUsersResponse, error) {
	out := new(GetAppRoleUsersResponse)
	err := c.cc.Invoke(ctx, "/app.user.gateway.approleuser.v1.AppRoleUser/GetAppRoleUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appRoleUserClient) DeleteRoleUser(ctx context.Context, in *DeleteRoleUserRequest, opts ...grpc.CallOption) (*DeleteRoleUserResponse, error) {
	out := new(DeleteRoleUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.gateway.approleuser.v1.AppRoleUser/DeleteRoleUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppRoleUserServer is the server API for AppRoleUser service.
// All implementations must embed UnimplementedAppRoleUserServer
// for forward compatibility
type AppRoleUserServer interface {
	CreateRoleUser(context.Context, *CreateRoleUserRequest) (*CreateRoleUserResponse, error)
	CreateAppUserRoleUser(context.Context, *CreateAppUserRoleUserRequest) (*CreateAppUserRoleUserResponse, error)
	CreateUserRoleUser(context.Context, *CreateUserRoleUserRequest) (*CreateUserRoleUserResponse, error)
	GetRoleUser(context.Context, *GetRoleUserRequest) (*GetRoleUserResponse, error)
	GetRoleUserByUsers(context.Context, *GetRoleUserByUsersRequest) (*GetRoleUserByUsersResponse, error)
	GetRoleUsersByRole(context.Context, *GetRoleUsersByRoleRequest) (*GetRoleUsersByRoleResponse, error)
	GetAppRoleUsersByRole(context.Context, *GetAppRoleUsersByRoleRequest) (*GetAppRoleUsersByRoleResponse, error)
	GetRoleUsers(context.Context, *GetRoleUsersRequest) (*GetRoleUsersResponse, error)
	GetAppRoleUsers(context.Context, *GetAppRoleUsersRequest) (*GetAppRoleUsersResponse, error)
	DeleteRoleUser(context.Context, *DeleteRoleUserRequest) (*DeleteRoleUserResponse, error)
	mustEmbedUnimplementedAppRoleUserServer()
}

// UnimplementedAppRoleUserServer must be embedded to have forward compatible implementations.
type UnimplementedAppRoleUserServer struct {
}

func (UnimplementedAppRoleUserServer) CreateRoleUser(context.Context, *CreateRoleUserRequest) (*CreateRoleUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoleUser not implemented")
}
func (UnimplementedAppRoleUserServer) CreateAppUserRoleUser(context.Context, *CreateAppUserRoleUserRequest) (*CreateAppUserRoleUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppUserRoleUser not implemented")
}
func (UnimplementedAppRoleUserServer) CreateUserRoleUser(context.Context, *CreateUserRoleUserRequest) (*CreateUserRoleUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserRoleUser not implemented")
}
func (UnimplementedAppRoleUserServer) GetRoleUser(context.Context, *GetRoleUserRequest) (*GetRoleUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleUser not implemented")
}
func (UnimplementedAppRoleUserServer) GetRoleUserByUsers(context.Context, *GetRoleUserByUsersRequest) (*GetRoleUserByUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleUserByUsers not implemented")
}
func (UnimplementedAppRoleUserServer) GetRoleUsersByRole(context.Context, *GetRoleUsersByRoleRequest) (*GetRoleUsersByRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleUsersByRole not implemented")
}
func (UnimplementedAppRoleUserServer) GetAppRoleUsersByRole(context.Context, *GetAppRoleUsersByRoleRequest) (*GetAppRoleUsersByRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppRoleUsersByRole not implemented")
}
func (UnimplementedAppRoleUserServer) GetRoleUsers(context.Context, *GetRoleUsersRequest) (*GetRoleUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleUsers not implemented")
}
func (UnimplementedAppRoleUserServer) GetAppRoleUsers(context.Context, *GetAppRoleUsersRequest) (*GetAppRoleUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppRoleUsers not implemented")
}
func (UnimplementedAppRoleUserServer) DeleteRoleUser(context.Context, *DeleteRoleUserRequest) (*DeleteRoleUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoleUser not implemented")
}
func (UnimplementedAppRoleUserServer) mustEmbedUnimplementedAppRoleUserServer() {}

// UnsafeAppRoleUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppRoleUserServer will
// result in compilation errors.
type UnsafeAppRoleUserServer interface {
	mustEmbedUnimplementedAppRoleUserServer()
}

func RegisterAppRoleUserServer(s grpc.ServiceRegistrar, srv AppRoleUserServer) {
	s.RegisterService(&AppRoleUser_ServiceDesc, srv)
}

func _AppRoleUser_CreateRoleUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppRoleUserServer).CreateRoleUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.gateway.approleuser.v1.AppRoleUser/CreateRoleUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppRoleUserServer).CreateRoleUser(ctx, req.(*CreateRoleUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppRoleUser_CreateAppUserRoleUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppUserRoleUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppRoleUserServer).CreateAppUserRoleUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.gateway.approleuser.v1.AppRoleUser/CreateAppUserRoleUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppRoleUserServer).CreateAppUserRoleUser(ctx, req.(*CreateAppUserRoleUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppRoleUser_CreateUserRoleUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRoleUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppRoleUserServer).CreateUserRoleUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.gateway.approleuser.v1.AppRoleUser/CreateUserRoleUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppRoleUserServer).CreateUserRoleUser(ctx, req.(*CreateUserRoleUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppRoleUser_GetRoleUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppRoleUserServer).GetRoleUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.gateway.approleuser.v1.AppRoleUser/GetRoleUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppRoleUserServer).GetRoleUser(ctx, req.(*GetRoleUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppRoleUser_GetRoleUserByUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleUserByUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppRoleUserServer).GetRoleUserByUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.gateway.approleuser.v1.AppRoleUser/GetRoleUserByUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppRoleUserServer).GetRoleUserByUsers(ctx, req.(*GetRoleUserByUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppRoleUser_GetRoleUsersByRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleUsersByRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppRoleUserServer).GetRoleUsersByRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.gateway.approleuser.v1.AppRoleUser/GetRoleUsersByRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppRoleUserServer).GetRoleUsersByRole(ctx, req.(*GetRoleUsersByRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppRoleUser_GetAppRoleUsersByRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppRoleUsersByRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppRoleUserServer).GetAppRoleUsersByRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.gateway.approleuser.v1.AppRoleUser/GetAppRoleUsersByRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppRoleUserServer).GetAppRoleUsersByRole(ctx, req.(*GetAppRoleUsersByRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppRoleUser_GetRoleUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppRoleUserServer).GetRoleUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.gateway.approleuser.v1.AppRoleUser/GetRoleUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppRoleUserServer).GetRoleUsers(ctx, req.(*GetRoleUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppRoleUser_GetAppRoleUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppRoleUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppRoleUserServer).GetAppRoleUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.gateway.approleuser.v1.AppRoleUser/GetAppRoleUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppRoleUserServer).GetAppRoleUsers(ctx, req.(*GetAppRoleUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppRoleUser_DeleteRoleUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppRoleUserServer).DeleteRoleUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.gateway.approleuser.v1.AppRoleUser/DeleteRoleUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppRoleUserServer).DeleteRoleUser(ctx, req.(*DeleteRoleUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppRoleUser_ServiceDesc is the grpc.ServiceDesc for AppRoleUser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppRoleUser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app.user.gateway.approleuser.v1.AppRoleUser",
	HandlerType: (*AppRoleUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRoleUser",
			Handler:    _AppRoleUser_CreateRoleUser_Handler,
		},
		{
			MethodName: "CreateAppUserRoleUser",
			Handler:    _AppRoleUser_CreateAppUserRoleUser_Handler,
		},
		{
			MethodName: "CreateUserRoleUser",
			Handler:    _AppRoleUser_CreateUserRoleUser_Handler,
		},
		{
			MethodName: "GetRoleUser",
			Handler:    _AppRoleUser_GetRoleUser_Handler,
		},
		{
			MethodName: "GetRoleUserByUsers",
			Handler:    _AppRoleUser_GetRoleUserByUsers_Handler,
		},
		{
			MethodName: "GetRoleUsersByRole",
			Handler:    _AppRoleUser_GetRoleUsersByRole_Handler,
		},
		{
			MethodName: "GetAppRoleUsersByRole",
			Handler:    _AppRoleUser_GetAppRoleUsersByRole_Handler,
		},
		{
			MethodName: "GetRoleUsers",
			Handler:    _AppRoleUser_GetRoleUsers_Handler,
		},
		{
			MethodName: "GetAppRoleUsers",
			Handler:    _AppRoleUser_GetAppRoleUsers_Handler,
		},
		{
			MethodName: "DeleteRoleUser",
			Handler:    _AppRoleUser_DeleteRoleUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/appuser/gw/v1/approleuser/approleuser.proto",
}
