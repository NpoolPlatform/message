// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/appuser/gw/v1/approleuser/approleuser.proto

package approleuser

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppRoleUserGwClient is the client API for AppRoleUserGw service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppRoleUserGwClient interface {
	CreateRoleUser(ctx context.Context, in *CreateRoleUserRequest, opts ...grpc.CallOption) (*CreateRoleUserResponse, error)
	CreateAppUserRoleUser(ctx context.Context, in *CreateAppUserRoleUserRequest, opts ...grpc.CallOption) (*CreateAppUserRoleUserResponse, error)
	CreateUserRoleUser(ctx context.Context, in *CreateUserRoleUserRequest, opts ...grpc.CallOption) (*CreateUserRoleUserResponse, error)
	GetRoleUser(ctx context.Context, in *GetRoleUserRequest, opts ...grpc.CallOption) (*GetRoleUserResponse, error)
	GetRoleUserByUsers(ctx context.Context, in *GetRoleUserByUsersRequest, opts ...grpc.CallOption) (*GetRoleUserByUsersResponse, error)
	GetRoleUsersByRole(ctx context.Context, in *GetRoleUsersByRoleRequest, opts ...grpc.CallOption) (*GetRoleUsersByRoleResponse, error)
	GetAppRoleUsersByRole(ctx context.Context, in *GetAppRoleUsersByRoleRequest, opts ...grpc.CallOption) (*GetAppRoleUsersByRoleResponse, error)
	GetRoleUsers(ctx context.Context, in *GetRoleUsersRequest, opts ...grpc.CallOption) (*GetRoleUsersResponse, error)
	GetAppRoleUsers(ctx context.Context, in *GetAppRoleUsersRequest, opts ...grpc.CallOption) (*GetAppRoleUsersResponse, error)
	DeleteRoleUser(ctx context.Context, in *DeleteRoleUserRequest, opts ...grpc.CallOption) (*DeleteRoleUserResponse, error)
}

type appRoleUserGwClient struct {
	cc grpc.ClientConnInterface
}

func NewAppRoleUserGwClient(cc grpc.ClientConnInterface) AppRoleUserGwClient {
	return &appRoleUserGwClient{cc}
}

func (c *appRoleUserGwClient) CreateRoleUser(ctx context.Context, in *CreateRoleUserRequest, opts ...grpc.CallOption) (*CreateRoleUserResponse, error) {
	out := new(CreateRoleUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.gateway.approleuser.v1.AppRoleUserGw/CreateRoleUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appRoleUserGwClient) CreateAppUserRoleUser(ctx context.Context, in *CreateAppUserRoleUserRequest, opts ...grpc.CallOption) (*CreateAppUserRoleUserResponse, error) {
	out := new(CreateAppUserRoleUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.gateway.approleuser.v1.AppRoleUserGw/CreateAppUserRoleUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appRoleUserGwClient) CreateUserRoleUser(ctx context.Context, in *CreateUserRoleUserRequest, opts ...grpc.CallOption) (*CreateUserRoleUserResponse, error) {
	out := new(CreateUserRoleUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.gateway.approleuser.v1.AppRoleUserGw/CreateUserRoleUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appRoleUserGwClient) GetRoleUser(ctx context.Context, in *GetRoleUserRequest, opts ...grpc.CallOption) (*GetRoleUserResponse, error) {
	out := new(GetRoleUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.gateway.approleuser.v1.AppRoleUserGw/GetRoleUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appRoleUserGwClient) GetRoleUserByUsers(ctx context.Context, in *GetRoleUserByUsersRequest, opts ...grpc.CallOption) (*GetRoleUserByUsersResponse, error) {
	out := new(GetRoleUserByUsersResponse)
	err := c.cc.Invoke(ctx, "/app.user.gateway.approleuser.v1.AppRoleUserGw/GetRoleUserByUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appRoleUserGwClient) GetRoleUsersByRole(ctx context.Context, in *GetRoleUsersByRoleRequest, opts ...grpc.CallOption) (*GetRoleUsersByRoleResponse, error) {
	out := new(GetRoleUsersByRoleResponse)
	err := c.cc.Invoke(ctx, "/app.user.gateway.approleuser.v1.AppRoleUserGw/GetRoleUsersByRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appRoleUserGwClient) GetAppRoleUsersByRole(ctx context.Context, in *GetAppRoleUsersByRoleRequest, opts ...grpc.CallOption) (*GetAppRoleUsersByRoleResponse, error) {
	out := new(GetAppRoleUsersByRoleResponse)
	err := c.cc.Invoke(ctx, "/app.user.gateway.approleuser.v1.AppRoleUserGw/GetAppRoleUsersByRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appRoleUserGwClient) GetRoleUsers(ctx context.Context, in *GetRoleUsersRequest, opts ...grpc.CallOption) (*GetRoleUsersResponse, error) {
	out := new(GetRoleUsersResponse)
	err := c.cc.Invoke(ctx, "/app.user.gateway.approleuser.v1.AppRoleUserGw/GetRoleUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appRoleUserGwClient) GetAppRoleUsers(ctx context.Context, in *GetAppRoleUsersRequest, opts ...grpc.CallOption) (*GetAppRoleUsersResponse, error) {
	out := new(GetAppRoleUsersResponse)
	err := c.cc.Invoke(ctx, "/app.user.gateway.approleuser.v1.AppRoleUserGw/GetAppRoleUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appRoleUserGwClient) DeleteRoleUser(ctx context.Context, in *DeleteRoleUserRequest, opts ...grpc.CallOption) (*DeleteRoleUserResponse, error) {
	out := new(DeleteRoleUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.gateway.approleuser.v1.AppRoleUserGw/DeleteRoleUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppRoleUserGwServer is the server API for AppRoleUserGw service.
// All implementations must embed UnimplementedAppRoleUserGwServer
// for forward compatibility
type AppRoleUserGwServer interface {
	CreateRoleUser(context.Context, *CreateRoleUserRequest) (*CreateRoleUserResponse, error)
	CreateAppUserRoleUser(context.Context, *CreateAppUserRoleUserRequest) (*CreateAppUserRoleUserResponse, error)
	CreateUserRoleUser(context.Context, *CreateUserRoleUserRequest) (*CreateUserRoleUserResponse, error)
	GetRoleUser(context.Context, *GetRoleUserRequest) (*GetRoleUserResponse, error)
	GetRoleUserByUsers(context.Context, *GetRoleUserByUsersRequest) (*GetRoleUserByUsersResponse, error)
	GetRoleUsersByRole(context.Context, *GetRoleUsersByRoleRequest) (*GetRoleUsersByRoleResponse, error)
	GetAppRoleUsersByRole(context.Context, *GetAppRoleUsersByRoleRequest) (*GetAppRoleUsersByRoleResponse, error)
	GetRoleUsers(context.Context, *GetRoleUsersRequest) (*GetRoleUsersResponse, error)
	GetAppRoleUsers(context.Context, *GetAppRoleUsersRequest) (*GetAppRoleUsersResponse, error)
	DeleteRoleUser(context.Context, *DeleteRoleUserRequest) (*DeleteRoleUserResponse, error)
	mustEmbedUnimplementedAppRoleUserGwServer()
}

// UnimplementedAppRoleUserGwServer must be embedded to have forward compatible implementations.
type UnimplementedAppRoleUserGwServer struct {
}

func (UnimplementedAppRoleUserGwServer) CreateRoleUser(context.Context, *CreateRoleUserRequest) (*CreateRoleUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoleUser not implemented")
}
func (UnimplementedAppRoleUserGwServer) CreateAppUserRoleUser(context.Context, *CreateAppUserRoleUserRequest) (*CreateAppUserRoleUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppUserRoleUser not implemented")
}
func (UnimplementedAppRoleUserGwServer) CreateUserRoleUser(context.Context, *CreateUserRoleUserRequest) (*CreateUserRoleUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserRoleUser not implemented")
}
func (UnimplementedAppRoleUserGwServer) GetRoleUser(context.Context, *GetRoleUserRequest) (*GetRoleUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleUser not implemented")
}
func (UnimplementedAppRoleUserGwServer) GetRoleUserByUsers(context.Context, *GetRoleUserByUsersRequest) (*GetRoleUserByUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleUserByUsers not implemented")
}
func (UnimplementedAppRoleUserGwServer) GetRoleUsersByRole(context.Context, *GetRoleUsersByRoleRequest) (*GetRoleUsersByRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleUsersByRole not implemented")
}
func (UnimplementedAppRoleUserGwServer) GetAppRoleUsersByRole(context.Context, *GetAppRoleUsersByRoleRequest) (*GetAppRoleUsersByRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppRoleUsersByRole not implemented")
}
func (UnimplementedAppRoleUserGwServer) GetRoleUsers(context.Context, *GetRoleUsersRequest) (*GetRoleUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoleUsers not implemented")
}
func (UnimplementedAppRoleUserGwServer) GetAppRoleUsers(context.Context, *GetAppRoleUsersRequest) (*GetAppRoleUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppRoleUsers not implemented")
}
func (UnimplementedAppRoleUserGwServer) DeleteRoleUser(context.Context, *DeleteRoleUserRequest) (*DeleteRoleUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoleUser not implemented")
}
func (UnimplementedAppRoleUserGwServer) mustEmbedUnimplementedAppRoleUserGwServer() {}

// UnsafeAppRoleUserGwServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppRoleUserGwServer will
// result in compilation errors.
type UnsafeAppRoleUserGwServer interface {
	mustEmbedUnimplementedAppRoleUserGwServer()
}

func RegisterAppRoleUserGwServer(s grpc.ServiceRegistrar, srv AppRoleUserGwServer) {
	s.RegisterService(&AppRoleUserGw_ServiceDesc, srv)
}

func _AppRoleUserGw_CreateRoleUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppRoleUserGwServer).CreateRoleUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.gateway.approleuser.v1.AppRoleUserGw/CreateRoleUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppRoleUserGwServer).CreateRoleUser(ctx, req.(*CreateRoleUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppRoleUserGw_CreateAppUserRoleUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppUserRoleUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppRoleUserGwServer).CreateAppUserRoleUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.gateway.approleuser.v1.AppRoleUserGw/CreateAppUserRoleUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppRoleUserGwServer).CreateAppUserRoleUser(ctx, req.(*CreateAppUserRoleUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppRoleUserGw_CreateUserRoleUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRoleUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppRoleUserGwServer).CreateUserRoleUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.gateway.approleuser.v1.AppRoleUserGw/CreateUserRoleUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppRoleUserGwServer).CreateUserRoleUser(ctx, req.(*CreateUserRoleUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppRoleUserGw_GetRoleUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppRoleUserGwServer).GetRoleUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.gateway.approleuser.v1.AppRoleUserGw/GetRoleUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppRoleUserGwServer).GetRoleUser(ctx, req.(*GetRoleUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppRoleUserGw_GetRoleUserByUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleUserByUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppRoleUserGwServer).GetRoleUserByUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.gateway.approleuser.v1.AppRoleUserGw/GetRoleUserByUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppRoleUserGwServer).GetRoleUserByUsers(ctx, req.(*GetRoleUserByUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppRoleUserGw_GetRoleUsersByRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleUsersByRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppRoleUserGwServer).GetRoleUsersByRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.gateway.approleuser.v1.AppRoleUserGw/GetRoleUsersByRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppRoleUserGwServer).GetRoleUsersByRole(ctx, req.(*GetRoleUsersByRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppRoleUserGw_GetAppRoleUsersByRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppRoleUsersByRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppRoleUserGwServer).GetAppRoleUsersByRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.gateway.approleuser.v1.AppRoleUserGw/GetAppRoleUsersByRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppRoleUserGwServer).GetAppRoleUsersByRole(ctx, req.(*GetAppRoleUsersByRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppRoleUserGw_GetRoleUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppRoleUserGwServer).GetRoleUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.gateway.approleuser.v1.AppRoleUserGw/GetRoleUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppRoleUserGwServer).GetRoleUsers(ctx, req.(*GetRoleUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppRoleUserGw_GetAppRoleUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppRoleUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppRoleUserGwServer).GetAppRoleUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.gateway.approleuser.v1.AppRoleUserGw/GetAppRoleUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppRoleUserGwServer).GetAppRoleUsers(ctx, req.(*GetAppRoleUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppRoleUserGw_DeleteRoleUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppRoleUserGwServer).DeleteRoleUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.gateway.approleuser.v1.AppRoleUserGw/DeleteRoleUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppRoleUserGwServer).DeleteRoleUser(ctx, req.(*DeleteRoleUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppRoleUserGw_ServiceDesc is the grpc.ServiceDesc for AppRoleUserGw service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppRoleUserGw_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app.user.gateway.approleuser.v1.AppRoleUserGw",
	HandlerType: (*AppRoleUserGwServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRoleUser",
			Handler:    _AppRoleUserGw_CreateRoleUser_Handler,
		},
		{
			MethodName: "CreateAppUserRoleUser",
			Handler:    _AppRoleUserGw_CreateAppUserRoleUser_Handler,
		},
		{
			MethodName: "CreateUserRoleUser",
			Handler:    _AppRoleUserGw_CreateUserRoleUser_Handler,
		},
		{
			MethodName: "GetRoleUser",
			Handler:    _AppRoleUserGw_GetRoleUser_Handler,
		},
		{
			MethodName: "GetRoleUserByUsers",
			Handler:    _AppRoleUserGw_GetRoleUserByUsers_Handler,
		},
		{
			MethodName: "GetRoleUsersByRole",
			Handler:    _AppRoleUserGw_GetRoleUsersByRole_Handler,
		},
		{
			MethodName: "GetAppRoleUsersByRole",
			Handler:    _AppRoleUserGw_GetAppRoleUsersByRole_Handler,
		},
		{
			MethodName: "GetRoleUsers",
			Handler:    _AppRoleUserGw_GetRoleUsers_Handler,
		},
		{
			MethodName: "GetAppRoleUsers",
			Handler:    _AppRoleUserGw_GetAppRoleUsers_Handler,
		},
		{
			MethodName: "DeleteRoleUser",
			Handler:    _AppRoleUserGw_DeleteRoleUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/appuser/gw/v1/approleuser/approleuser.proto",
}
