// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/appuser/mw/v1/admin/admin.proto

package admin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminMwClient is the client API for AdminMw service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminMwClient interface {
	CreateAdminApps(ctx context.Context, in *CreateAdminAppsRequest, opts ...grpc.CallOption) (*CreateAdminAppsResponse, error)
	CreateGenesisRoles(ctx context.Context, in *CreateGenesisRolesRequest, opts ...grpc.CallOption) (*CreateGenesisRolesResponse, error)
	CreateGenesisUser(ctx context.Context, in *CreateGenesisUserRequest, opts ...grpc.CallOption) (*CreateGenesisUserResponse, error)
	GetAdminApps(ctx context.Context, in *GetAdminAppsRequest, opts ...grpc.CallOption) (*GetAdminAppsResponse, error)
	AuthorizeGenesis(ctx context.Context, in *AuthorizeGenesisRequest, opts ...grpc.CallOption) (*AuthorizeGenesisResponse, error)
}

type adminMwClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminMwClient(cc grpc.ClientConnInterface) AdminMwClient {
	return &adminMwClient{cc}
}

func (c *adminMwClient) CreateAdminApps(ctx context.Context, in *CreateAdminAppsRequest, opts ...grpc.CallOption) (*CreateAdminAppsResponse, error) {
	out := new(CreateAdminAppsResponse)
	err := c.cc.Invoke(ctx, "/appuser.middleware.admin.v1.AdminMw/CreateAdminApps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminMwClient) CreateGenesisRoles(ctx context.Context, in *CreateGenesisRolesRequest, opts ...grpc.CallOption) (*CreateGenesisRolesResponse, error) {
	out := new(CreateGenesisRolesResponse)
	err := c.cc.Invoke(ctx, "/appuser.middleware.admin.v1.AdminMw/CreateGenesisRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminMwClient) CreateGenesisUser(ctx context.Context, in *CreateGenesisUserRequest, opts ...grpc.CallOption) (*CreateGenesisUserResponse, error) {
	out := new(CreateGenesisUserResponse)
	err := c.cc.Invoke(ctx, "/appuser.middleware.admin.v1.AdminMw/CreateGenesisUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminMwClient) GetAdminApps(ctx context.Context, in *GetAdminAppsRequest, opts ...grpc.CallOption) (*GetAdminAppsResponse, error) {
	out := new(GetAdminAppsResponse)
	err := c.cc.Invoke(ctx, "/appuser.middleware.admin.v1.AdminMw/GetAdminApps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminMwClient) AuthorizeGenesis(ctx context.Context, in *AuthorizeGenesisRequest, opts ...grpc.CallOption) (*AuthorizeGenesisResponse, error) {
	out := new(AuthorizeGenesisResponse)
	err := c.cc.Invoke(ctx, "/appuser.middleware.admin.v1.AdminMw/AuthorizeGenesis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminMwServer is the server API for AdminMw service.
// All implementations must embed UnimplementedAdminMwServer
// for forward compatibility
type AdminMwServer interface {
	CreateAdminApps(context.Context, *CreateAdminAppsRequest) (*CreateAdminAppsResponse, error)
	CreateGenesisRoles(context.Context, *CreateGenesisRolesRequest) (*CreateGenesisRolesResponse, error)
	CreateGenesisUser(context.Context, *CreateGenesisUserRequest) (*CreateGenesisUserResponse, error)
	GetAdminApps(context.Context, *GetAdminAppsRequest) (*GetAdminAppsResponse, error)
	AuthorizeGenesis(context.Context, *AuthorizeGenesisRequest) (*AuthorizeGenesisResponse, error)
	mustEmbedUnimplementedAdminMwServer()
}

// UnimplementedAdminMwServer must be embedded to have forward compatible implementations.
type UnimplementedAdminMwServer struct {
}

func (UnimplementedAdminMwServer) CreateAdminApps(context.Context, *CreateAdminAppsRequest) (*CreateAdminAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAdminApps not implemented")
}
func (UnimplementedAdminMwServer) CreateGenesisRoles(context.Context, *CreateGenesisRolesRequest) (*CreateGenesisRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGenesisRoles not implemented")
}
func (UnimplementedAdminMwServer) CreateGenesisUser(context.Context, *CreateGenesisUserRequest) (*CreateGenesisUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGenesisUser not implemented")
}
func (UnimplementedAdminMwServer) GetAdminApps(context.Context, *GetAdminAppsRequest) (*GetAdminAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdminApps not implemented")
}
func (UnimplementedAdminMwServer) AuthorizeGenesis(context.Context, *AuthorizeGenesisRequest) (*AuthorizeGenesisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizeGenesis not implemented")
}
func (UnimplementedAdminMwServer) mustEmbedUnimplementedAdminMwServer() {}

// UnsafeAdminMwServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminMwServer will
// result in compilation errors.
type UnsafeAdminMwServer interface {
	mustEmbedUnimplementedAdminMwServer()
}

func RegisterAdminMwServer(s grpc.ServiceRegistrar, srv AdminMwServer) {
	s.RegisterService(&AdminMw_ServiceDesc, srv)
}

func _AdminMw_CreateAdminApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAdminAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminMwServer).CreateAdminApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.middleware.admin.v1.AdminMw/CreateAdminApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminMwServer).CreateAdminApps(ctx, req.(*CreateAdminAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminMw_CreateGenesisRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGenesisRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminMwServer).CreateGenesisRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.middleware.admin.v1.AdminMw/CreateGenesisRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminMwServer).CreateGenesisRoles(ctx, req.(*CreateGenesisRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminMw_CreateGenesisUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGenesisUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminMwServer).CreateGenesisUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.middleware.admin.v1.AdminMw/CreateGenesisUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminMwServer).CreateGenesisUser(ctx, req.(*CreateGenesisUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminMw_GetAdminApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdminAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminMwServer).GetAdminApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.middleware.admin.v1.AdminMw/GetAdminApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminMwServer).GetAdminApps(ctx, req.(*GetAdminAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminMw_AuthorizeGenesis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorizeGenesisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminMwServer).AuthorizeGenesis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.middleware.admin.v1.AdminMw/AuthorizeGenesis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminMwServer).AuthorizeGenesis(ctx, req.(*AuthorizeGenesisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminMw_ServiceDesc is the grpc.ServiceDesc for AdminMw service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminMw_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "appuser.middleware.admin.v1.AdminMw",
	HandlerType: (*AdminMwServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAdminApps",
			Handler:    _AdminMw_CreateAdminApps_Handler,
		},
		{
			MethodName: "CreateGenesisRoles",
			Handler:    _AdminMw_CreateGenesisRoles_Handler,
		},
		{
			MethodName: "CreateGenesisUser",
			Handler:    _AdminMw_CreateGenesisUser_Handler,
		},
		{
			MethodName: "GetAdminApps",
			Handler:    _AdminMw_GetAdminApps_Handler,
		},
		{
			MethodName: "AuthorizeGenesis",
			Handler:    _AdminMw_AuthorizeGenesis_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/appuser/mw/v1/admin/admin.proto",
}
