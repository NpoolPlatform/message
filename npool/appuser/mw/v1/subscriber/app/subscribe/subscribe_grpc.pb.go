// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/appuser/mw/v1/subscriber/app/subscribe/subscribe.proto

package subscribe

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
	CreateAppSubscribe(ctx context.Context, in *CreateAppSubscribeRequest, opts ...grpc.CallOption) (*CreateAppSubscribeResponse, error)
	GetAppSubscribe(ctx context.Context, in *GetAppSubscribeRequest, opts ...grpc.CallOption) (*GetAppSubscribeResponse, error)
	GetAppSubscribes(ctx context.Context, in *GetAppSubscribesRequest, opts ...grpc.CallOption) (*GetAppSubscribesResponse, error)
	ExistAppSubscribeConds(ctx context.Context, in *ExistAppSubscribeCondsRequest, opts ...grpc.CallOption) (*ExistAppSubscribeCondsResponse, error)
	DeleteAppSubscribe(ctx context.Context, in *DeleteAppSubscribeRequest, opts ...grpc.CallOption) (*DeleteAppSubscribeResponse, error)
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) CreateAppSubscribe(ctx context.Context, in *CreateAppSubscribeRequest, opts ...grpc.CallOption) (*CreateAppSubscribeResponse, error) {
	out := new(CreateAppSubscribeResponse)
	err := c.cc.Invoke(ctx, "/appuser.middleware.subscriber.app.subscribe.v1.Middleware/CreateAppSubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetAppSubscribe(ctx context.Context, in *GetAppSubscribeRequest, opts ...grpc.CallOption) (*GetAppSubscribeResponse, error) {
	out := new(GetAppSubscribeResponse)
	err := c.cc.Invoke(ctx, "/appuser.middleware.subscriber.app.subscribe.v1.Middleware/GetAppSubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetAppSubscribes(ctx context.Context, in *GetAppSubscribesRequest, opts ...grpc.CallOption) (*GetAppSubscribesResponse, error) {
	out := new(GetAppSubscribesResponse)
	err := c.cc.Invoke(ctx, "/appuser.middleware.subscriber.app.subscribe.v1.Middleware/GetAppSubscribes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ExistAppSubscribeConds(ctx context.Context, in *ExistAppSubscribeCondsRequest, opts ...grpc.CallOption) (*ExistAppSubscribeCondsResponse, error) {
	out := new(ExistAppSubscribeCondsResponse)
	err := c.cc.Invoke(ctx, "/appuser.middleware.subscriber.app.subscribe.v1.Middleware/ExistAppSubscribeConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) DeleteAppSubscribe(ctx context.Context, in *DeleteAppSubscribeRequest, opts ...grpc.CallOption) (*DeleteAppSubscribeResponse, error) {
	out := new(DeleteAppSubscribeResponse)
	err := c.cc.Invoke(ctx, "/appuser.middleware.subscriber.app.subscribe.v1.Middleware/DeleteAppSubscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
	CreateAppSubscribe(context.Context, *CreateAppSubscribeRequest) (*CreateAppSubscribeResponse, error)
	GetAppSubscribe(context.Context, *GetAppSubscribeRequest) (*GetAppSubscribeResponse, error)
	GetAppSubscribes(context.Context, *GetAppSubscribesRequest) (*GetAppSubscribesResponse, error)
	ExistAppSubscribeConds(context.Context, *ExistAppSubscribeCondsRequest) (*ExistAppSubscribeCondsResponse, error)
	DeleteAppSubscribe(context.Context, *DeleteAppSubscribeRequest) (*DeleteAppSubscribeResponse, error)
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) CreateAppSubscribe(context.Context, *CreateAppSubscribeRequest) (*CreateAppSubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppSubscribe not implemented")
}
func (UnimplementedMiddlewareServer) GetAppSubscribe(context.Context, *GetAppSubscribeRequest) (*GetAppSubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppSubscribe not implemented")
}
func (UnimplementedMiddlewareServer) GetAppSubscribes(context.Context, *GetAppSubscribesRequest) (*GetAppSubscribesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppSubscribes not implemented")
}
func (UnimplementedMiddlewareServer) ExistAppSubscribeConds(context.Context, *ExistAppSubscribeCondsRequest) (*ExistAppSubscribeCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistAppSubscribeConds not implemented")
}
func (UnimplementedMiddlewareServer) DeleteAppSubscribe(context.Context, *DeleteAppSubscribeRequest) (*DeleteAppSubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppSubscribe not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_CreateAppSubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppSubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateAppSubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.middleware.subscriber.app.subscribe.v1.Middleware/CreateAppSubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateAppSubscribe(ctx, req.(*CreateAppSubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetAppSubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppSubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetAppSubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.middleware.subscriber.app.subscribe.v1.Middleware/GetAppSubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetAppSubscribe(ctx, req.(*GetAppSubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetAppSubscribes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppSubscribesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetAppSubscribes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.middleware.subscriber.app.subscribe.v1.Middleware/GetAppSubscribes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetAppSubscribes(ctx, req.(*GetAppSubscribesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ExistAppSubscribeConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistAppSubscribeCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ExistAppSubscribeConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.middleware.subscriber.app.subscribe.v1.Middleware/ExistAppSubscribeConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ExistAppSubscribeConds(ctx, req.(*ExistAppSubscribeCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_DeleteAppSubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppSubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).DeleteAppSubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appuser.middleware.subscriber.app.subscribe.v1.Middleware/DeleteAppSubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).DeleteAppSubscribe(ctx, req.(*DeleteAppSubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "appuser.middleware.subscriber.app.subscribe.v1.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAppSubscribe",
			Handler:    _Middleware_CreateAppSubscribe_Handler,
		},
		{
			MethodName: "GetAppSubscribe",
			Handler:    _Middleware_GetAppSubscribe_Handler,
		},
		{
			MethodName: "GetAppSubscribes",
			Handler:    _Middleware_GetAppSubscribes_Handler,
		},
		{
			MethodName: "ExistAppSubscribeConds",
			Handler:    _Middleware_ExistAppSubscribeConds_Handler,
		},
		{
			MethodName: "DeleteAppSubscribe",
			Handler:    _Middleware_DeleteAppSubscribe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/appuser/mw/v1/subscriber/app/subscribe/subscribe.proto",
}
