// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/g11n/gw/v1/message/message.proto

package message

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gateway_CreateMessage_FullMethodName     = "/g11n.gateway.message1.v1.Gateway/CreateMessage"
	Gateway_CreateAppMessage_FullMethodName  = "/g11n.gateway.message1.v1.Gateway/CreateAppMessage"
	Gateway_CreateMessages_FullMethodName    = "/g11n.gateway.message1.v1.Gateway/CreateMessages"
	Gateway_CreateAppMessages_FullMethodName = "/g11n.gateway.message1.v1.Gateway/CreateAppMessages"
	Gateway_UpdateMessage_FullMethodName     = "/g11n.gateway.message1.v1.Gateway/UpdateMessage"
	Gateway_UpdateAppMessage_FullMethodName  = "/g11n.gateway.message1.v1.Gateway/UpdateAppMessage"
	Gateway_GetMessages_FullMethodName       = "/g11n.gateway.message1.v1.Gateway/GetMessages"
	Gateway_GetAppMessages_FullMethodName    = "/g11n.gateway.message1.v1.Gateway/GetAppMessages"
	Gateway_DeleteMessage_FullMethodName     = "/g11n.gateway.message1.v1.Gateway/DeleteMessage"
	Gateway_DeleteAppMessage_FullMethodName  = "/g11n.gateway.message1.v1.Gateway/DeleteAppMessage"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	CreateMessage(ctx context.Context, in *CreateMessageRequest, opts ...grpc.CallOption) (*CreateMessageResponse, error)
	CreateAppMessage(ctx context.Context, in *CreateAppMessageRequest, opts ...grpc.CallOption) (*CreateAppMessageResponse, error)
	CreateMessages(ctx context.Context, in *CreateMessagesRequest, opts ...grpc.CallOption) (*CreateMessagesResponse, error)
	CreateAppMessages(ctx context.Context, in *CreateAppMessagesRequest, opts ...grpc.CallOption) (*CreateAppMessagesResponse, error)
	UpdateMessage(ctx context.Context, in *UpdateMessageRequest, opts ...grpc.CallOption) (*UpdateMessageResponse, error)
	UpdateAppMessage(ctx context.Context, in *UpdateAppMessageRequest, opts ...grpc.CallOption) (*UpdateAppMessageResponse, error)
	GetMessages(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (*GetMessagesResponse, error)
	GetAppMessages(ctx context.Context, in *GetAppMessagesRequest, opts ...grpc.CallOption) (*GetAppMessagesResponse, error)
	DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageResponse, error)
	DeleteAppMessage(ctx context.Context, in *DeleteAppMessageRequest, opts ...grpc.CallOption) (*DeleteAppMessageResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) CreateMessage(ctx context.Context, in *CreateMessageRequest, opts ...grpc.CallOption) (*CreateMessageResponse, error) {
	out := new(CreateMessageResponse)
	err := c.cc.Invoke(ctx, Gateway_CreateMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) CreateAppMessage(ctx context.Context, in *CreateAppMessageRequest, opts ...grpc.CallOption) (*CreateAppMessageResponse, error) {
	out := new(CreateAppMessageResponse)
	err := c.cc.Invoke(ctx, Gateway_CreateAppMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) CreateMessages(ctx context.Context, in *CreateMessagesRequest, opts ...grpc.CallOption) (*CreateMessagesResponse, error) {
	out := new(CreateMessagesResponse)
	err := c.cc.Invoke(ctx, Gateway_CreateMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) CreateAppMessages(ctx context.Context, in *CreateAppMessagesRequest, opts ...grpc.CallOption) (*CreateAppMessagesResponse, error) {
	out := new(CreateAppMessagesResponse)
	err := c.cc.Invoke(ctx, Gateway_CreateAppMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdateMessage(ctx context.Context, in *UpdateMessageRequest, opts ...grpc.CallOption) (*UpdateMessageResponse, error) {
	out := new(UpdateMessageResponse)
	err := c.cc.Invoke(ctx, Gateway_UpdateMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdateAppMessage(ctx context.Context, in *UpdateAppMessageRequest, opts ...grpc.CallOption) (*UpdateAppMessageResponse, error) {
	out := new(UpdateAppMessageResponse)
	err := c.cc.Invoke(ctx, Gateway_UpdateAppMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetMessages(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (*GetMessagesResponse, error) {
	out := new(GetMessagesResponse)
	err := c.cc.Invoke(ctx, Gateway_GetMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetAppMessages(ctx context.Context, in *GetAppMessagesRequest, opts ...grpc.CallOption) (*GetAppMessagesResponse, error) {
	out := new(GetAppMessagesResponse)
	err := c.cc.Invoke(ctx, Gateway_GetAppMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageResponse, error) {
	out := new(DeleteMessageResponse)
	err := c.cc.Invoke(ctx, Gateway_DeleteMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) DeleteAppMessage(ctx context.Context, in *DeleteAppMessageRequest, opts ...grpc.CallOption) (*DeleteAppMessageResponse, error) {
	out := new(DeleteAppMessageResponse)
	err := c.cc.Invoke(ctx, Gateway_DeleteAppMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	CreateMessage(context.Context, *CreateMessageRequest) (*CreateMessageResponse, error)
	CreateAppMessage(context.Context, *CreateAppMessageRequest) (*CreateAppMessageResponse, error)
	CreateMessages(context.Context, *CreateMessagesRequest) (*CreateMessagesResponse, error)
	CreateAppMessages(context.Context, *CreateAppMessagesRequest) (*CreateAppMessagesResponse, error)
	UpdateMessage(context.Context, *UpdateMessageRequest) (*UpdateMessageResponse, error)
	UpdateAppMessage(context.Context, *UpdateAppMessageRequest) (*UpdateAppMessageResponse, error)
	GetMessages(context.Context, *GetMessagesRequest) (*GetMessagesResponse, error)
	GetAppMessages(context.Context, *GetAppMessagesRequest) (*GetAppMessagesResponse, error)
	DeleteMessage(context.Context, *DeleteMessageRequest) (*DeleteMessageResponse, error)
	DeleteAppMessage(context.Context, *DeleteAppMessageRequest) (*DeleteAppMessageResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) CreateMessage(context.Context, *CreateMessageRequest) (*CreateMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMessage not implemented")
}
func (UnimplementedGatewayServer) CreateAppMessage(context.Context, *CreateAppMessageRequest) (*CreateAppMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppMessage not implemented")
}
func (UnimplementedGatewayServer) CreateMessages(context.Context, *CreateMessagesRequest) (*CreateMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMessages not implemented")
}
func (UnimplementedGatewayServer) CreateAppMessages(context.Context, *CreateAppMessagesRequest) (*CreateAppMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppMessages not implemented")
}
func (UnimplementedGatewayServer) UpdateMessage(context.Context, *UpdateMessageRequest) (*UpdateMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMessage not implemented")
}
func (UnimplementedGatewayServer) UpdateAppMessage(context.Context, *UpdateAppMessageRequest) (*UpdateAppMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppMessage not implemented")
}
func (UnimplementedGatewayServer) GetMessages(context.Context, *GetMessagesRequest) (*GetMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessages not implemented")
}
func (UnimplementedGatewayServer) GetAppMessages(context.Context, *GetAppMessagesRequest) (*GetAppMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppMessages not implemented")
}
func (UnimplementedGatewayServer) DeleteMessage(context.Context, *DeleteMessageRequest) (*DeleteMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessage not implemented")
}
func (UnimplementedGatewayServer) DeleteAppMessage(context.Context, *DeleteAppMessageRequest) (*DeleteAppMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppMessage not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_CreateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_CreateMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateMessage(ctx, req.(*CreateMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_CreateAppMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateAppMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_CreateAppMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateAppMessage(ctx, req.(*CreateAppMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_CreateMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_CreateMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateMessages(ctx, req.(*CreateMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_CreateAppMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateAppMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_CreateAppMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateAppMessages(ctx, req.(*CreateAppMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_UpdateMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateMessage(ctx, req.(*UpdateMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdateAppMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateAppMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_UpdateAppMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateAppMessage(ctx, req.(*UpdateAppMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetMessages(ctx, req.(*GetMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetAppMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetAppMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetAppMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetAppMessages(ctx, req.(*GetAppMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_DeleteMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).DeleteMessage(ctx, req.(*DeleteMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_DeleteAppMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).DeleteAppMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_DeleteAppMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).DeleteAppMessage(ctx, req.(*DeleteAppMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "g11n.gateway.message1.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMessage",
			Handler:    _Gateway_CreateMessage_Handler,
		},
		{
			MethodName: "CreateAppMessage",
			Handler:    _Gateway_CreateAppMessage_Handler,
		},
		{
			MethodName: "CreateMessages",
			Handler:    _Gateway_CreateMessages_Handler,
		},
		{
			MethodName: "CreateAppMessages",
			Handler:    _Gateway_CreateAppMessages_Handler,
		},
		{
			MethodName: "UpdateMessage",
			Handler:    _Gateway_UpdateMessage_Handler,
		},
		{
			MethodName: "UpdateAppMessage",
			Handler:    _Gateway_UpdateAppMessage_Handler,
		},
		{
			MethodName: "GetMessages",
			Handler:    _Gateway_GetMessages_Handler,
		},
		{
			MethodName: "GetAppMessages",
			Handler:    _Gateway_GetAppMessages_Handler,
		},
		{
			MethodName: "DeleteMessage",
			Handler:    _Gateway_DeleteMessage_Handler,
		},
		{
			MethodName: "DeleteAppMessage",
			Handler:    _Gateway_DeleteAppMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/g11n/gw/v1/message/message.proto",
}
