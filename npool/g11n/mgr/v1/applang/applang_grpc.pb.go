// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/g11n/mgr/v1/applang/applang.proto

package applang

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Manager_CreateLang_FullMethodName     = "/g11n.manager.applang.v1.Manager/CreateLang"
	Manager_CreateLangs_FullMethodName    = "/g11n.manager.applang.v1.Manager/CreateLangs"
	Manager_UpdateLang_FullMethodName     = "/g11n.manager.applang.v1.Manager/UpdateLang"
	Manager_GetLang_FullMethodName        = "/g11n.manager.applang.v1.Manager/GetLang"
	Manager_GetLangOnly_FullMethodName    = "/g11n.manager.applang.v1.Manager/GetLangOnly"
	Manager_GetLangs_FullMethodName       = "/g11n.manager.applang.v1.Manager/GetLangs"
	Manager_ExistLang_FullMethodName      = "/g11n.manager.applang.v1.Manager/ExistLang"
	Manager_ExistLangConds_FullMethodName = "/g11n.manager.applang.v1.Manager/ExistLangConds"
	Manager_CountLangs_FullMethodName     = "/g11n.manager.applang.v1.Manager/CountLangs"
	Manager_DeleteLang_FullMethodName     = "/g11n.manager.applang.v1.Manager/DeleteLang"
)

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateLang(ctx context.Context, in *CreateLangRequest, opts ...grpc.CallOption) (*CreateLangResponse, error)
	CreateLangs(ctx context.Context, in *CreateLangsRequest, opts ...grpc.CallOption) (*CreateLangsResponse, error)
	UpdateLang(ctx context.Context, in *UpdateLangRequest, opts ...grpc.CallOption) (*UpdateLangResponse, error)
	GetLang(ctx context.Context, in *GetLangRequest, opts ...grpc.CallOption) (*GetLangResponse, error)
	GetLangOnly(ctx context.Context, in *GetLangOnlyRequest, opts ...grpc.CallOption) (*GetLangOnlyResponse, error)
	GetLangs(ctx context.Context, in *GetLangsRequest, opts ...grpc.CallOption) (*GetLangsResponse, error)
	ExistLang(ctx context.Context, in *ExistLangRequest, opts ...grpc.CallOption) (*ExistLangResponse, error)
	ExistLangConds(ctx context.Context, in *ExistLangCondsRequest, opts ...grpc.CallOption) (*ExistLangCondsResponse, error)
	CountLangs(ctx context.Context, in *CountLangsRequest, opts ...grpc.CallOption) (*CountLangsResponse, error)
	DeleteLang(ctx context.Context, in *DeleteLangRequest, opts ...grpc.CallOption) (*DeleteLangResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateLang(ctx context.Context, in *CreateLangRequest, opts ...grpc.CallOption) (*CreateLangResponse, error) {
	out := new(CreateLangResponse)
	err := c.cc.Invoke(ctx, Manager_CreateLang_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateLangs(ctx context.Context, in *CreateLangsRequest, opts ...grpc.CallOption) (*CreateLangsResponse, error) {
	out := new(CreateLangsResponse)
	err := c.cc.Invoke(ctx, Manager_CreateLangs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateLang(ctx context.Context, in *UpdateLangRequest, opts ...grpc.CallOption) (*UpdateLangResponse, error) {
	out := new(UpdateLangResponse)
	err := c.cc.Invoke(ctx, Manager_UpdateLang_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetLang(ctx context.Context, in *GetLangRequest, opts ...grpc.CallOption) (*GetLangResponse, error) {
	out := new(GetLangResponse)
	err := c.cc.Invoke(ctx, Manager_GetLang_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetLangOnly(ctx context.Context, in *GetLangOnlyRequest, opts ...grpc.CallOption) (*GetLangOnlyResponse, error) {
	out := new(GetLangOnlyResponse)
	err := c.cc.Invoke(ctx, Manager_GetLangOnly_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetLangs(ctx context.Context, in *GetLangsRequest, opts ...grpc.CallOption) (*GetLangsResponse, error) {
	out := new(GetLangsResponse)
	err := c.cc.Invoke(ctx, Manager_GetLangs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistLang(ctx context.Context, in *ExistLangRequest, opts ...grpc.CallOption) (*ExistLangResponse, error) {
	out := new(ExistLangResponse)
	err := c.cc.Invoke(ctx, Manager_ExistLang_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistLangConds(ctx context.Context, in *ExistLangCondsRequest, opts ...grpc.CallOption) (*ExistLangCondsResponse, error) {
	out := new(ExistLangCondsResponse)
	err := c.cc.Invoke(ctx, Manager_ExistLangConds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountLangs(ctx context.Context, in *CountLangsRequest, opts ...grpc.CallOption) (*CountLangsResponse, error) {
	out := new(CountLangsResponse)
	err := c.cc.Invoke(ctx, Manager_CountLangs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteLang(ctx context.Context, in *DeleteLangRequest, opts ...grpc.CallOption) (*DeleteLangResponse, error) {
	out := new(DeleteLangResponse)
	err := c.cc.Invoke(ctx, Manager_DeleteLang_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateLang(context.Context, *CreateLangRequest) (*CreateLangResponse, error)
	CreateLangs(context.Context, *CreateLangsRequest) (*CreateLangsResponse, error)
	UpdateLang(context.Context, *UpdateLangRequest) (*UpdateLangResponse, error)
	GetLang(context.Context, *GetLangRequest) (*GetLangResponse, error)
	GetLangOnly(context.Context, *GetLangOnlyRequest) (*GetLangOnlyResponse, error)
	GetLangs(context.Context, *GetLangsRequest) (*GetLangsResponse, error)
	ExistLang(context.Context, *ExistLangRequest) (*ExistLangResponse, error)
	ExistLangConds(context.Context, *ExistLangCondsRequest) (*ExistLangCondsResponse, error)
	CountLangs(context.Context, *CountLangsRequest) (*CountLangsResponse, error)
	DeleteLang(context.Context, *DeleteLangRequest) (*DeleteLangResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateLang(context.Context, *CreateLangRequest) (*CreateLangResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLang not implemented")
}
func (UnimplementedManagerServer) CreateLangs(context.Context, *CreateLangsRequest) (*CreateLangsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLangs not implemented")
}
func (UnimplementedManagerServer) UpdateLang(context.Context, *UpdateLangRequest) (*UpdateLangResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLang not implemented")
}
func (UnimplementedManagerServer) GetLang(context.Context, *GetLangRequest) (*GetLangResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLang not implemented")
}
func (UnimplementedManagerServer) GetLangOnly(context.Context, *GetLangOnlyRequest) (*GetLangOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLangOnly not implemented")
}
func (UnimplementedManagerServer) GetLangs(context.Context, *GetLangsRequest) (*GetLangsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLangs not implemented")
}
func (UnimplementedManagerServer) ExistLang(context.Context, *ExistLangRequest) (*ExistLangResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistLang not implemented")
}
func (UnimplementedManagerServer) ExistLangConds(context.Context, *ExistLangCondsRequest) (*ExistLangCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistLangConds not implemented")
}
func (UnimplementedManagerServer) CountLangs(context.Context, *CountLangsRequest) (*CountLangsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountLangs not implemented")
}
func (UnimplementedManagerServer) DeleteLang(context.Context, *DeleteLangRequest) (*DeleteLangResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLang not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateLang_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLangRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateLang(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_CreateLang_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateLang(ctx, req.(*CreateLangRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateLangs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLangsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateLangs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_CreateLangs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateLangs(ctx, req.(*CreateLangsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateLang_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLangRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateLang(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_UpdateLang_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateLang(ctx, req.(*UpdateLangRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetLang_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLangRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetLang(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetLang_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetLang(ctx, req.(*GetLangRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetLangOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLangOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetLangOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetLangOnly_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetLangOnly(ctx, req.(*GetLangOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetLangs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLangsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetLangs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetLangs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetLangs(ctx, req.(*GetLangsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistLang_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistLangRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistLang(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_ExistLang_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistLang(ctx, req.(*ExistLangRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistLangConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistLangCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistLangConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_ExistLangConds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistLangConds(ctx, req.(*ExistLangCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountLangs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountLangsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountLangs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_CountLangs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountLangs(ctx, req.(*CountLangsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteLang_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLangRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteLang(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_DeleteLang_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteLang(ctx, req.(*DeleteLangRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "g11n.manager.applang.v1.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLang",
			Handler:    _Manager_CreateLang_Handler,
		},
		{
			MethodName: "CreateLangs",
			Handler:    _Manager_CreateLangs_Handler,
		},
		{
			MethodName: "UpdateLang",
			Handler:    _Manager_UpdateLang_Handler,
		},
		{
			MethodName: "GetLang",
			Handler:    _Manager_GetLang_Handler,
		},
		{
			MethodName: "GetLangOnly",
			Handler:    _Manager_GetLangOnly_Handler,
		},
		{
			MethodName: "GetLangs",
			Handler:    _Manager_GetLangs_Handler,
		},
		{
			MethodName: "ExistLang",
			Handler:    _Manager_ExistLang_Handler,
		},
		{
			MethodName: "ExistLangConds",
			Handler:    _Manager_ExistLangConds_Handler,
		},
		{
			MethodName: "CountLangs",
			Handler:    _Manager_CountLangs_Handler,
		},
		{
			MethodName: "DeleteLang",
			Handler:    _Manager_DeleteLang_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/g11n/mgr/v1/applang/applang.proto",
}
