syntax = "proto3";

package ledger.gateway.ledger1.v1;

option go_package = "github.com/NpoolPlatform/message/npool/ledger/gw/v1/ledger";

import "npool/ledger/mgr/v1/ledger/withdraw/withdraw.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "npool/npool.proto";

// Service Name
service Gateway {
    rpc GetGenerals (GetGeneralsRequest) returns (GetGeneralsResponse) {
        option (google.api.http) = {
            post: "/v1/get/generals"
            body: "*"
        };
    }

    rpc GetIntervalGenerals (GetIntervalGeneralsRequest) returns (GetIntervalGeneralsResponse) {
        option (google.api.http) = {
            post: "/v1/get/intervalgenerals"
            body: "*"
        };
    }

    rpc GetDetails (GetDetailsRequest) returns (GetDetailsResponse) {
        option (google.api.http) = {
            post: "/v1/get/details"
            body: "*"
        };
    }

    rpc GetProfits (GetProfitsRequest) returns (GetProfitsResponse) {
        option (google.api.http) = {
            post: "/v1/get/profits"
            body: "*"
        };
    }

    rpc GetIntervalProfits (GetIntervalProfitsRequest) returns (GetIntervalProfitsResponse) {
        option (google.api.http) = {
            post: "/v1/get/intervalprofits"
            body: "*"
        };
    }

    rpc CreateWithdraw (CreateWithdrawRequest) returns (CreateWithdrawResponse) {
        option (google.api.http) = {
            post: "/v1/create/withdraw"
            body: "*"
        };
    }

    rpc GetWithdraws (GetWithdrawsRequest) returns (GetWithdrawsResponse) {
        option (google.api.http) = {
            post: "/v1/get/withdraws"
            body: "*"
        };
    }

    rpc GetIntervalWithdraws (GetIntervalWithdrawsRequest) returns (GetIntervalWithdrawsResponse) {
        option (google.api.http) = {
            post: "/v1/get/intervalwithdraws"
            body: "*"
        };
    }
}

message General {
    string CoinTypeID = 10;
    string CoinName   = 20;
    string CoinLogo   = 30;
    string CoinUnit   = 40;
    string Incoming   = 50;
    string Locked     = 60;
    string Outcoming  = 70;
    string Spendable  = 80;
}

message GetGeneralsRequest {
    string AppID   = 10;
    string UserID  = 20;
    int32  Offset  = 30;
    int32  Limit   = 40;
}

message GetGeneralsResponse {
    repeated General Infos = 10;
    uint32           Total = 20;
}

message GetIntervalGeneralsRequest {
    string AppID   = 10;
    string UserID  = 20;
    uint32 StartAt = 30;
    uint32 EndAt   = 40;
    int32  Offset  = 50;
    int32  Limit   = 60;
}

message GetIntervalGeneralsResponse {
    repeated General Infos = 10;
    uint32           Total = 20;
}

message Detail {
    string CoinTypeID = 10;
    string CoinName   = 20;
    string CoinLogo   = 30;
    string CoinUnit   = 40;
    string IOType     = 50;
    string IOSubType  = 60;
    string Amount     = 70;
    string IOExtra    = 80;
}

message GetDetailsRequest {
    string AppID   = 10;
    string UserID  = 20;
    uint32 StartAt = 30;
    uint32 EndAt   = 40;
    int32  Offset  = 50;
    int32  Limit   = 60;
}

message GetDetailsResponse {
    repeated Detail Infos = 10;
    uint32          Total = 20;
}

message Profit {
    string CoinTypeID = 10;
    string CoinName   = 20;
    string CoinLogo   = 30;
    string CoinUnit   = 40;
    string Incoming   = 50;
}

message GetProfitsRequest {
    string AppID   = 10;
    string UserID  = 20;
    int32  Offset  = 30;
    int32  Limit   = 40;
}

message GetProfitsResponse {
    repeated Profit Infos = 10;
    uint32          Total = 20;
}

message GetIntervalProfitsRequest {
    string AppID   = 10;
    string UserID  = 20;
    uint32 StartAt = 30;
    uint32 EndAt   = 40;
    int32  Offset  = 50;
    int32  Limit   = 60;
}

message GetIntervalProfitsResponse {
    repeated Profit Infos = 10;
    uint32          Total = 20;
}

enum WithdrawState {
    DefaultWithdrawState  = 0;
    Reviewing             = 10;
    Transferfing          = 20;
    Rejected              = 30;
    TransactionFail       = 40;
    Successful            = 50;
}

message Withdraw {
    string        CoinTypeID    = 10;
    string        CoinName      = 20;
    string        CoinLogo      = 30;
    string        CoinUnit      = 40;
    string        Amount        = 50;
    uint32        CreatedAt     = 60;

    string        Address       = 70;
    string        AddressLabels = 80;

    WithdrawState State         = 90;
    string        Message       = 100;
}

message CreateWithdrawRequest {
    ledger.manager.ledger.withdraw.v1.WithdrawReq Info = 10;
}

message CreateWithdrawResponse {
    Withdraw Info = 10;
}

message GetWithdrawsRequest {
    string AppID   = 10;
    string UserID  = 20;
    int32  Offset  = 30;
    int32  Limit   = 40;
}

message GetWithdrawsResponse {
    repeated Withdraw Infos = 10;
    uint32            Total = 20;
}

message GetIntervalWithdrawsRequest {
    string AppID   = 10;
    string UserID  = 20;
    uint32 StartAt = 30;
    uint32 EndAt   = 40;
    int32  Offset  = 50;
    int32  Limit   = 60;
}

message GetIntervalWithdrawsResponse {
    repeated Withdraw Infos = 10;
    uint32            Total = 20;
}
