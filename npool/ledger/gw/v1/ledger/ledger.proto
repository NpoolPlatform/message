syntax = "proto3";

package ledger.gateway.ledger1.v1;

option go_package = "github.com/NpoolPlatform/message/npool/ledger/gw/v1/ledger";

import "npool/basetypes/v1/signmethod.proto";
import "google/api/annotations.proto";
import "npool/basetypes/ledger/v1/enums.proto";

// Service Name
service Gateway {
    rpc GetGenerals (GetGeneralsRequest) returns (GetGeneralsResponse) {
        option (google.api.http) = {
            post: "/v1/get/generals"
            body: "*"
        };
    }

    rpc GetIntervalGenerals (GetIntervalGeneralsRequest) returns (GetIntervalGeneralsResponse) {
        option (google.api.http) = {
            post: "/v1/get/intervalgenerals"
            body: "*"
        };
    }

    rpc GetAppGenerals (GetAppGeneralsRequest) returns (GetAppGeneralsResponse) {
        option (google.api.http) = {
            post: "/v1/get/app/generals"
            body: "*"
        };
    }

    rpc GetStatements (GetStatementsRequest) returns (GetStatementsResponse) {
        option (google.api.http) = {
            post: "/v1/get/details"
            body: "*"
        };
    }

    rpc GetAppStatements (GetAppStatementsRequest) returns (GetAppStatementsResponse) {
        option (google.api.http) = {
            post: "/v1/get/app/details"
            body: "*"
        };
    }

    rpc GetMiningRewards (GetMiningRewardsRequest) returns (GetMiningRewardsResponse) {
        option (google.api.http) = {
            post: "/v1/get/miningrewards"
            body: "*"
        };
    }

    rpc GetProfits (GetProfitsRequest) returns (GetProfitsResponse) {
        option (google.api.http) = {
            post: "/v1/get/profits"
            body: "*"
        };
    }

    rpc GetIntervalProfits (GetIntervalProfitsRequest) returns (GetIntervalProfitsResponse) {
        option (google.api.http) = {
            post: "/v1/get/intervalprofits"
            body: "*"
        };
    }

    rpc GetGoodProfits (GetGoodProfitsRequest) returns (GetGoodProfitsResponse) {
        option (google.api.http) = {
            post: "/v1/get/goodprofits"
            body: "*"
        };
    }

    rpc CreateWithdraw (CreateWithdrawRequest) returns (CreateWithdrawResponse) {
        option (google.api.http) = {
            post: "/v1/create/withdraw"
            body: "*"
        };
    }

    rpc GetWithdraws (GetWithdrawsRequest) returns (GetWithdrawsResponse) {
        option (google.api.http) = {
            post: "/v1/get/withdraws"
            body: "*"
        };
    }

    rpc GetIntervalWithdraws (GetIntervalWithdrawsRequest) returns (GetIntervalWithdrawsResponse) {
        option (google.api.http) = {
            post: "/v1/get/intervalwithdraws"
            body: "*"
        };
    }

    rpc GetAppWithdraws (GetAppWithdrawsRequest) returns (GetAppWithdrawsResponse) {
        option (google.api.http) = {
            post: "/v1/get/app/withdraws"
            body: "*"
        };
    }

    rpc GetNAppWithdraws (GetNAppWithdrawsRequest) returns (GetNAppWithdrawsResponse) {
        option (google.api.http) = {
            post: "/v1/get/n/app/withdraws"
            body: "*"
        };
    }

    rpc CreateTransfer (CreateTransferRequest) returns (CreateTransferResponse) {
        option (google.api.http) = {
            post: "/v1/create/transfer"
            body: "*"
        };
    }

    rpc CreateAppUserDeposit (CreateAppUserDepositRequest) returns (CreateAppUserDepositResponse) {
        option (google.api.http) = {
            post: "/v1/create/app/user/deposit"
            body: "*"
        };
    }
}

message General {
    string CoinTypeID     = 10;
    string CoinName       = 20;
    repeated string DisplayNames = 21;
    string CoinLogo       = 30;
    string CoinUnit       = 40;
    bool   CoinDisabled   = 41;
    bool   CoinDisplay    = 42;
    string Incoming       = 50;
    string Locked         = 60;
    string Outcoming      = 70;
    string Spendable      = 80;
    string UserID         = 90;
    string PhoneNO        = 100;
    string EmailAddress   = 110;
}

message GetGeneralsRequest {
    string AppID   = 10;
    string UserID  = 20;
    int32  Offset  = 30;
    int32  Limit   = 40;
}

message GetGeneralsResponse {
    repeated General Infos = 10;
    uint32           Total = 20;
}

message GetIntervalGeneralsRequest {
    string AppID   = 10;
    string UserID  = 20;
    uint32 StartAt = 30;
    uint32 EndAt   = 40;
    int32  Offset  = 50;
    int32  Limit   = 60;
}

message GetIntervalGeneralsResponse {
    repeated General Infos = 10;
    uint32           Total = 20;
}

message GetAppGeneralsRequest {
    string TargetAppID   = 10;
    int32  Offset        = 20;
    int32  Limit         = 30;
}

message GetAppGeneralsResponse {
    repeated General Infos = 10;
    uint32           Total = 20;
}

message Statement {
    string CoinTypeID = 10;
    string CoinName   = 20;
    repeated string DisplayNames = 21;
    string CoinLogo   = 30;
    string CoinUnit   = 40;
    basetypes.ledger.v1.IOType    IOType    = 50;
    basetypes.ledger.v1.IOSubType IOSubType = 60;
    string Amount     = 70;
    string IOExtra    = 80;
    uint32 CreatedAt  = 90;
    string UserID     = 100;
    string PhoneNO       = 110;
    string EmailAddress  = 120;
}

message GetStatementsRequest {
    string AppID   = 10;
    string UserID  = 20;
    uint32 StartAt = 30;
    uint32 EndAt   = 40;
    int32  Offset  = 50;
    int32  Limit   = 60;
}

message GetStatementsResponse {
    repeated Statement Infos = 10;
    uint32             Total = 20;
}

message GetAppStatementsRequest {
    string TargetAppID   = 10;
    int32  Offset        = 20;
    int32  Limit         = 30;
}

message GetAppStatementsResponse {
    repeated Statement Infos = 10;
    uint32          Total = 20;
}


message MiningReward {
    string CoinTypeID = 10;
    string CoinName = 20;
    string CoinLogo = 30;
    string CoinUnit = 40;
    basetypes.ledger.v1.IOType    IOType    = 50;
    basetypes.ledger.v1.IOSubType IOSubType = 60;
    string RewardAmount = 70;
    string RewardAmountPerUnit = 80;
    string Units = 90;
    string Extra = 100;
    string GoodID = 110;
    string OrderID = 120;
    uint32 CreatedAt = 130;
}

message GetMiningRewardsRequest {
    string AppID = 10;
    string UserID = 20;
    uint32 StartAt = 30;
    uint32 EndAt = 40;
    int32  Offset = 50;
    int32  Limit = 60;
}

message GetMiningRewardsResponse {
    repeated MiningReward Infos = 10;
    uint32  Total = 20;
}

message Profit {
    string CoinTypeID = 10;
    string CoinName   = 20;
    repeated string DisplayNames = 21;
    string CoinLogo   = 30;
    string CoinUnit   = 40;
    string Incoming   = 50;
}

message GetProfitsRequest {
    string AppID   = 10;
    string UserID  = 20;
    int32  Offset  = 30;
    int32  Limit   = 40;
}

message GetProfitsResponse {
    repeated Profit Infos = 10;
    uint32          Total = 20;
}

message GetIntervalProfitsRequest {
    string AppID   = 10;
    string UserID  = 20;
    uint32 StartAt = 30;
    uint32 EndAt   = 40;
    int32  Offset  = 50;
    int32  Limit   = 60;
}

message GetIntervalProfitsResponse {
    repeated Profit Infos = 10;
    uint32          Total = 20;
}

message GoodProfit {
    string GoodID     = 10;
    string GoodName   = 20;
    string GoodUnit   = 30;
    uint32 GoodServicePeriodDays = 31;
    string Units      = 40;
    string CoinTypeID = 50;
    string CoinName   = 60;
    repeated string DisplayNames = 61;
    string CoinLogo   = 70;
    string CoinUnit   = 80;
    string Incoming   = 90;
}

message GetGoodProfitsRequest {
    string AppID   = 10;
    string UserID  = 20;
    uint32 StartAt = 30;
    uint32 EndAt   = 40;
    int32  Offset  = 50;
    int32  Limit   = 60;
}

message GetGoodProfitsResponse {
    repeated GoodProfit Infos = 10;
    uint32              Total = 20;
}

message Withdraw {
    string        CoinTypeID     = 10;
    string        CoinName       = 20;
    repeated string DisplayNames = 21;
    string        CoinLogo       = 30;
    string        CoinUnit       = 40;
    string        Amount         = 50;
    uint32        CreatedAt      = 60;
    string        Address        = 70;
    repeated string AddressLabels = 80;
    basetypes.ledger.v1.WithdrawState State = 90;
    string        Message       = 100;
}

message CreateWithdrawRequest {
    string AppID             = 10;
    string UserID            = 20;
    string LangID            = 21;
    string CoinTypeID        = 30;
    string AccountID         = 40;
    string Amount            = 50;
    basetypes.v1.SignMethod AccountType = 60;
    string Account           = 70;
    string VerificationCode  = 80;
}

message CreateWithdrawResponse {
    Withdraw Info = 10;
}

message GetWithdrawsRequest {
    string AppID   = 10;
    string UserID  = 20;
    int32  Offset  = 30;
    int32  Limit   = 40;
}

message GetWithdrawsResponse {
    repeated Withdraw Infos = 10;
    uint32            Total = 20;
}

message GetIntervalWithdrawsRequest {
    string AppID   = 10;
    string UserID  = 20;
    uint32 StartAt = 30;
    uint32 EndAt   = 40;
    int32  Offset  = 50;
    int32  Limit   = 60;
}

message GetIntervalWithdrawsResponse {
    repeated Withdraw Infos = 10;
    uint32            Total = 20;
}

message GetAppWithdrawsRequest {
    string AppID   = 10;
    int32  Offset  = 20;
    int32  Limit   = 30;
}

message GetAppWithdrawsResponse {
    repeated Withdraw Infos = 10;
    uint32            Total = 20;
}

message GetNAppWithdrawsRequest {
    string TargetAppID   = 10;
    int32  Offset        = 20;
    int32  Limit         = 30;
}

message GetNAppWithdrawsResponse {
    repeated Withdraw Infos = 10;
    uint32            Total = 20;
}

message Transfer {
    string CoinTypeID    = 10;
    string CoinName      = 20;
    repeated string DisplayNames = 21;
    string CoinLogo      = 30;
    string CoinUnit      = 40;
    string Amount        = 50;
    uint32 CreatedAt     = 60;

    string TargetUserID       = 70;
    string TargetEmailAddress = 80;
    string TargetPhoneNO      = 90;
    string TargetUsername     = 100;
    string TargetFirstName    = 110;
    string TargetLastName     = 120;
}

message CreateTransferRequest {
    string AppID            = 10;
    string UserID           = 20;
    string Account          = 30;
    basetypes.v1.SignMethod AccountType = 40;
    string VerificationCode = 50;
    string TargetUserID     = 60;
    string Amount           = 70;
    string CoinTypeID       = 80;
}

message CreateTransferResponse {
    Transfer Info = 10;
}

message CreateAppUserDepositRequest {
    string AppID        = 10;
    string UserID       = 20;
    string LangID       = 21;
    string CoinTypeID   = 30;
    string Amount       = 40;
    string TargetAppID  = 50;
    string TargetUserID = 60;

}

message CreateAppUserDepositResponse {
    Statement Info = 10;
}
