// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.18.1
// source: npool/ledger/gw/v1/ledger/profit/profit.proto

package profit

import (
	v11 "github.com/NpoolPlatform/message/npool/basetypes/good/v1"
	v1 "github.com/NpoolPlatform/message/npool/basetypes/ledger/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MiningReward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                  uint32       `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID               string       `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty"`
	UserID              string       `protobuf:"bytes,30,opt,name=UserID,proto3" json:"UserID,omitempty"`
	AppID               string       `protobuf:"bytes,40,opt,name=AppID,proto3" json:"AppID,omitempty"`
	CoinTypeID          string       `protobuf:"bytes,50,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty"`
	CoinName            string       `protobuf:"bytes,60,opt,name=CoinName,proto3" json:"CoinName,omitempty"`
	CoinLogo            string       `protobuf:"bytes,70,opt,name=CoinLogo,proto3" json:"CoinLogo,omitempty"`
	CoinUnit            string       `protobuf:"bytes,80,opt,name=CoinUnit,proto3" json:"CoinUnit,omitempty"`
	IOType              v1.IOType    `protobuf:"varint,90,opt,name=IOType,proto3,enum=basetypes.ledger.v1.IOType" json:"IOType,omitempty"`
	IOSubType           v1.IOSubType `protobuf:"varint,100,opt,name=IOSubType,proto3,enum=basetypes.ledger.v1.IOSubType" json:"IOSubType,omitempty"`
	RewardAmount        string       `protobuf:"bytes,110,opt,name=RewardAmount,proto3" json:"RewardAmount,omitempty"`
	RewardAmountPerUnit string       `protobuf:"bytes,120,opt,name=RewardAmountPerUnit,proto3" json:"RewardAmountPerUnit,omitempty"`
	Units               string       `protobuf:"bytes,130,opt,name=Units,proto3" json:"Units,omitempty"`
	Extra               string       `protobuf:"bytes,140,opt,name=Extra,proto3" json:"Extra,omitempty"`
	AppGoodID           string       `protobuf:"bytes,150,opt,name=AppGoodID,proto3" json:"AppGoodID,omitempty"`
	AppGoodName         string       `protobuf:"bytes,160,opt,name=AppGoodName,proto3" json:"AppGoodName,omitempty"`
	GoodType            v11.GoodType `protobuf:"varint,170,opt,name=GoodType,proto3,enum=basetypes.good.v1.GoodType" json:"GoodType,omitempty"`
	OrderID             string       `protobuf:"bytes,180,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
	CreatedAt           uint32       `protobuf:"varint,1000,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
}

func (x *MiningReward) Reset() {
	*x = MiningReward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_ledger_gw_v1_ledger_profit_profit_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiningReward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiningReward) ProtoMessage() {}

func (x *MiningReward) ProtoReflect() protoreflect.Message {
	mi := &file_npool_ledger_gw_v1_ledger_profit_profit_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiningReward.ProtoReflect.Descriptor instead.
func (*MiningReward) Descriptor() ([]byte, []int) {
	return file_npool_ledger_gw_v1_ledger_profit_profit_proto_rawDescGZIP(), []int{0}
}

func (x *MiningReward) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *MiningReward) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *MiningReward) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *MiningReward) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *MiningReward) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

func (x *MiningReward) GetCoinName() string {
	if x != nil {
		return x.CoinName
	}
	return ""
}

func (x *MiningReward) GetCoinLogo() string {
	if x != nil {
		return x.CoinLogo
	}
	return ""
}

func (x *MiningReward) GetCoinUnit() string {
	if x != nil {
		return x.CoinUnit
	}
	return ""
}

func (x *MiningReward) GetIOType() v1.IOType {
	if x != nil {
		return x.IOType
	}
	return v1.IOType(0)
}

func (x *MiningReward) GetIOSubType() v1.IOSubType {
	if x != nil {
		return x.IOSubType
	}
	return v1.IOSubType(0)
}

func (x *MiningReward) GetRewardAmount() string {
	if x != nil {
		return x.RewardAmount
	}
	return ""
}

func (x *MiningReward) GetRewardAmountPerUnit() string {
	if x != nil {
		return x.RewardAmountPerUnit
	}
	return ""
}

func (x *MiningReward) GetUnits() string {
	if x != nil {
		return x.Units
	}
	return ""
}

func (x *MiningReward) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *MiningReward) GetAppGoodID() string {
	if x != nil {
		return x.AppGoodID
	}
	return ""
}

func (x *MiningReward) GetAppGoodName() string {
	if x != nil {
		return x.AppGoodName
	}
	return ""
}

func (x *MiningReward) GetGoodType() v11.GoodType {
	if x != nil {
		return x.GoodType
	}
	return v11.GoodType(0)
}

func (x *MiningReward) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

func (x *MiningReward) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type GetMiningRewardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID        string  `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	UserID       string  `protobuf:"bytes,20,opt,name=UserID,proto3" json:"UserID,omitempty"`
	StartAt      *uint32 `protobuf:"varint,30,opt,name=StartAt,proto3,oneof" json:"StartAt,omitempty"`
	EndAt        *uint32 `protobuf:"varint,40,opt,name=EndAt,proto3,oneof" json:"EndAt,omitempty"`
	SimulateOnly *bool   `protobuf:"varint,50,opt,name=SimulateOnly,proto3,oneof" json:"SimulateOnly,omitempty"`
	Offset       int32   `protobuf:"varint,60,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit        int32   `protobuf:"varint,70,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetMiningRewardsRequest) Reset() {
	*x = GetMiningRewardsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_ledger_gw_v1_ledger_profit_profit_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMiningRewardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMiningRewardsRequest) ProtoMessage() {}

func (x *GetMiningRewardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_ledger_gw_v1_ledger_profit_profit_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMiningRewardsRequest.ProtoReflect.Descriptor instead.
func (*GetMiningRewardsRequest) Descriptor() ([]byte, []int) {
	return file_npool_ledger_gw_v1_ledger_profit_profit_proto_rawDescGZIP(), []int{1}
}

func (x *GetMiningRewardsRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetMiningRewardsRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetMiningRewardsRequest) GetStartAt() uint32 {
	if x != nil && x.StartAt != nil {
		return *x.StartAt
	}
	return 0
}

func (x *GetMiningRewardsRequest) GetEndAt() uint32 {
	if x != nil && x.EndAt != nil {
		return *x.EndAt
	}
	return 0
}

func (x *GetMiningRewardsRequest) GetSimulateOnly() bool {
	if x != nil && x.SimulateOnly != nil {
		return *x.SimulateOnly
	}
	return false
}

func (x *GetMiningRewardsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetMiningRewardsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetMiningRewardsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*MiningReward `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32          `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetMiningRewardsResponse) Reset() {
	*x = GetMiningRewardsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_ledger_gw_v1_ledger_profit_profit_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMiningRewardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMiningRewardsResponse) ProtoMessage() {}

func (x *GetMiningRewardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_ledger_gw_v1_ledger_profit_profit_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMiningRewardsResponse.ProtoReflect.Descriptor instead.
func (*GetMiningRewardsResponse) Descriptor() ([]byte, []int) {
	return file_npool_ledger_gw_v1_ledger_profit_profit_proto_rawDescGZIP(), []int{2}
}

func (x *GetMiningRewardsResponse) GetInfos() []*MiningReward {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetMiningRewardsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type CoinProfit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID        string   `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	UserID       string   `protobuf:"bytes,20,opt,name=UserID,proto3" json:"UserID,omitempty"`
	CoinTypeID   string   `protobuf:"bytes,30,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty"`
	CoinName     string   `protobuf:"bytes,40,opt,name=CoinName,proto3" json:"CoinName,omitempty"`
	DisplayNames []string `protobuf:"bytes,50,rep,name=DisplayNames,proto3" json:"DisplayNames,omitempty"`
	CoinLogo     string   `protobuf:"bytes,60,opt,name=CoinLogo,proto3" json:"CoinLogo,omitempty"`
	CoinUnit     string   `protobuf:"bytes,70,opt,name=CoinUnit,proto3" json:"CoinUnit,omitempty"`
	Incoming     string   `protobuf:"bytes,80,opt,name=Incoming,proto3" json:"Incoming,omitempty"`
}

func (x *CoinProfit) Reset() {
	*x = CoinProfit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_ledger_gw_v1_ledger_profit_profit_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinProfit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinProfit) ProtoMessage() {}

func (x *CoinProfit) ProtoReflect() protoreflect.Message {
	mi := &file_npool_ledger_gw_v1_ledger_profit_profit_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinProfit.ProtoReflect.Descriptor instead.
func (*CoinProfit) Descriptor() ([]byte, []int) {
	return file_npool_ledger_gw_v1_ledger_profit_profit_proto_rawDescGZIP(), []int{3}
}

func (x *CoinProfit) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *CoinProfit) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CoinProfit) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

func (x *CoinProfit) GetCoinName() string {
	if x != nil {
		return x.CoinName
	}
	return ""
}

func (x *CoinProfit) GetDisplayNames() []string {
	if x != nil {
		return x.DisplayNames
	}
	return nil
}

func (x *CoinProfit) GetCoinLogo() string {
	if x != nil {
		return x.CoinLogo
	}
	return ""
}

func (x *CoinProfit) GetCoinUnit() string {
	if x != nil {
		return x.CoinUnit
	}
	return ""
}

func (x *CoinProfit) GetIncoming() string {
	if x != nil {
		return x.Incoming
	}
	return ""
}

type GetCoinProfitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID   string  `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	UserID  string  `protobuf:"bytes,20,opt,name=UserID,proto3" json:"UserID,omitempty"`
	StartAt *uint32 `protobuf:"varint,30,opt,name=StartAt,proto3,oneof" json:"StartAt,omitempty"`
	EndAt   *uint32 `protobuf:"varint,40,opt,name=EndAt,proto3,oneof" json:"EndAt,omitempty"`
	Offset  int32   `protobuf:"varint,50,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit   int32   `protobuf:"varint,60,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetCoinProfitsRequest) Reset() {
	*x = GetCoinProfitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_ledger_gw_v1_ledger_profit_profit_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinProfitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinProfitsRequest) ProtoMessage() {}

func (x *GetCoinProfitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_ledger_gw_v1_ledger_profit_profit_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinProfitsRequest.ProtoReflect.Descriptor instead.
func (*GetCoinProfitsRequest) Descriptor() ([]byte, []int) {
	return file_npool_ledger_gw_v1_ledger_profit_profit_proto_rawDescGZIP(), []int{4}
}

func (x *GetCoinProfitsRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetCoinProfitsRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetCoinProfitsRequest) GetStartAt() uint32 {
	if x != nil && x.StartAt != nil {
		return *x.StartAt
	}
	return 0
}

func (x *GetCoinProfitsRequest) GetEndAt() uint32 {
	if x != nil && x.EndAt != nil {
		return *x.EndAt
	}
	return 0
}

func (x *GetCoinProfitsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetCoinProfitsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetCoinProfitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*CoinProfit `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32        `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetCoinProfitsResponse) Reset() {
	*x = GetCoinProfitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_ledger_gw_v1_ledger_profit_profit_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinProfitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinProfitsResponse) ProtoMessage() {}

func (x *GetCoinProfitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_ledger_gw_v1_ledger_profit_profit_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinProfitsResponse.ProtoReflect.Descriptor instead.
func (*GetCoinProfitsResponse) Descriptor() ([]byte, []int) {
	return file_npool_ledger_gw_v1_ledger_profit_profit_proto_rawDescGZIP(), []int{5}
}

func (x *GetCoinProfitsResponse) GetInfos() []*CoinProfit {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetCoinProfitsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GoodProfit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID            string       `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	UserID           string       `protobuf:"bytes,20,opt,name=UserID,proto3" json:"UserID,omitempty"`
	AppGoodID        string       `protobuf:"bytes,30,opt,name=AppGoodID,proto3" json:"AppGoodID,omitempty"`
	AppGoodName      string       `protobuf:"bytes,40,opt,name=AppGoodName,proto3" json:"AppGoodName,omitempty"`
	GoodType         v11.GoodType `protobuf:"varint,50,opt,name=GoodType,proto3,enum=basetypes.good.v1.GoodType" json:"GoodType,omitempty"`
	GoodQuantityUnit string       `protobuf:"bytes,51,opt,name=GoodQuantityUnit,proto3" json:"GoodQuantityUnit,omitempty"`
	// Good is multiple coins
	CoinTypeID   string   `protobuf:"bytes,60,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty"`
	CoinName     string   `protobuf:"bytes,70,opt,name=CoinName,proto3" json:"CoinName,omitempty"`
	DisplayNames []string `protobuf:"bytes,80,rep,name=DisplayNames,proto3" json:"DisplayNames,omitempty"`
	CoinLogo     string   `protobuf:"bytes,90,opt,name=CoinLogo,proto3" json:"CoinLogo,omitempty"`
	CoinUnit     string   `protobuf:"bytes,100,opt,name=CoinUnit,proto3" json:"CoinUnit,omitempty"`
	GoodMainCoin bool     `protobuf:"varint,110,opt,name=GoodMainCoin,proto3" json:"GoodMainCoin,omitempty"`
	Units        string   `protobuf:"bytes,120,opt,name=Units,proto3" json:"Units,omitempty"`
	Incoming     string   `protobuf:"bytes,130,opt,name=Incoming,proto3" json:"Incoming,omitempty"`
}

func (x *GoodProfit) Reset() {
	*x = GoodProfit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_ledger_gw_v1_ledger_profit_profit_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodProfit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodProfit) ProtoMessage() {}

func (x *GoodProfit) ProtoReflect() protoreflect.Message {
	mi := &file_npool_ledger_gw_v1_ledger_profit_profit_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodProfit.ProtoReflect.Descriptor instead.
func (*GoodProfit) Descriptor() ([]byte, []int) {
	return file_npool_ledger_gw_v1_ledger_profit_profit_proto_rawDescGZIP(), []int{6}
}

func (x *GoodProfit) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GoodProfit) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GoodProfit) GetAppGoodID() string {
	if x != nil {
		return x.AppGoodID
	}
	return ""
}

func (x *GoodProfit) GetAppGoodName() string {
	if x != nil {
		return x.AppGoodName
	}
	return ""
}

func (x *GoodProfit) GetGoodType() v11.GoodType {
	if x != nil {
		return x.GoodType
	}
	return v11.GoodType(0)
}

func (x *GoodProfit) GetGoodQuantityUnit() string {
	if x != nil {
		return x.GoodQuantityUnit
	}
	return ""
}

func (x *GoodProfit) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

func (x *GoodProfit) GetCoinName() string {
	if x != nil {
		return x.CoinName
	}
	return ""
}

func (x *GoodProfit) GetDisplayNames() []string {
	if x != nil {
		return x.DisplayNames
	}
	return nil
}

func (x *GoodProfit) GetCoinLogo() string {
	if x != nil {
		return x.CoinLogo
	}
	return ""
}

func (x *GoodProfit) GetCoinUnit() string {
	if x != nil {
		return x.CoinUnit
	}
	return ""
}

func (x *GoodProfit) GetGoodMainCoin() bool {
	if x != nil {
		return x.GoodMainCoin
	}
	return false
}

func (x *GoodProfit) GetUnits() string {
	if x != nil {
		return x.Units
	}
	return ""
}

func (x *GoodProfit) GetIncoming() string {
	if x != nil {
		return x.Incoming
	}
	return ""
}

type GetGoodProfitsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID   string  `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	UserID  string  `protobuf:"bytes,20,opt,name=UserID,proto3" json:"UserID,omitempty"`
	StartAt *uint32 `protobuf:"varint,30,opt,name=StartAt,proto3,oneof" json:"StartAt,omitempty"`
	EndAt   *uint32 `protobuf:"varint,40,opt,name=EndAt,proto3,oneof" json:"EndAt,omitempty"`
	Offset  int32   `protobuf:"varint,50,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit   int32   `protobuf:"varint,60,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetGoodProfitsRequest) Reset() {
	*x = GetGoodProfitsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_ledger_gw_v1_ledger_profit_profit_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodProfitsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodProfitsRequest) ProtoMessage() {}

func (x *GetGoodProfitsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_ledger_gw_v1_ledger_profit_profit_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodProfitsRequest.ProtoReflect.Descriptor instead.
func (*GetGoodProfitsRequest) Descriptor() ([]byte, []int) {
	return file_npool_ledger_gw_v1_ledger_profit_profit_proto_rawDescGZIP(), []int{7}
}

func (x *GetGoodProfitsRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetGoodProfitsRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetGoodProfitsRequest) GetStartAt() uint32 {
	if x != nil && x.StartAt != nil {
		return *x.StartAt
	}
	return 0
}

func (x *GetGoodProfitsRequest) GetEndAt() uint32 {
	if x != nil && x.EndAt != nil {
		return *x.EndAt
	}
	return 0
}

func (x *GetGoodProfitsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetGoodProfitsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetGoodProfitsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*GoodProfit `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32        `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetGoodProfitsResponse) Reset() {
	*x = GetGoodProfitsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_ledger_gw_v1_ledger_profit_profit_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodProfitsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodProfitsResponse) ProtoMessage() {}

func (x *GetGoodProfitsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_ledger_gw_v1_ledger_profit_profit_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodProfitsResponse.ProtoReflect.Descriptor instead.
func (*GetGoodProfitsResponse) Descriptor() ([]byte, []int) {
	return file_npool_ledger_gw_v1_ledger_profit_profit_proto_rawDescGZIP(), []int{8}
}

func (x *GetGoodProfitsResponse) GetInfos() []*GoodProfit {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetGoodProfitsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

var File_npool_ledger_gw_v1_ledger_profit_profit_proto protoreflect.FileDescriptor

var file_npool_ledger_gw_v1_ledger_profit_profit_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x67,
	0x77, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x2e, 0x76, 0x31,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25,
	0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x6e, 0x70, 0x6f, 0x6f,
	0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x64,
	0x2f, 0x76, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x83, 0x05, 0x0a, 0x0c, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x44, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x46, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x1a, 0x0a, 0x08,
	0x43, 0x6f, 0x69, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x43, 0x6f, 0x69, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x49, 0x4f, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x4f, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x49, 0x4f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a,
	0x09, 0x49, 0x4f, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x4f, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x49, 0x4f, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x30, 0x0a, 0x13, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x65, 0x72, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x15, 0x0a, 0x05, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x15, 0x0a, 0x05, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12,
	0x1d, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x96, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x21,
	0x0a, 0x0b, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0xa0, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x38, 0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0xaa, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x07, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xff, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x1d, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x00, 0x52, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52,
	0x05, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x53, 0x69, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x32, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x02, 0x52, 0x0c, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x3c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x46, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x53, 0x69, 0x6d, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x75, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4d, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xee,
	0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43,
	0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43,
	0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43,
	0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x32, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x43,
	0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43,
	0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x55,
	0x6e, 0x69, 0x74, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x55,
	0x6e, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x18,
	0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x22,
	0xc3, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x07, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x05, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x45, 0x6e, 0x64, 0x41, 0x74, 0x22, 0x71, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x41, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x52, 0x05, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xce, 0x03, 0x0a, 0x0a, 0x47, 0x6f, 0x6f,
	0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64,
	0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f,
	0x64, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a,
	0x0a, 0x10, 0x47, 0x6f, 0x6f, 0x64, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x6e,
	0x69, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x47, 0x6f, 0x6f, 0x64, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f,
	0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f,
	0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x50, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f,
	0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f,
	0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x6e,
	0x69, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x6e,
	0x69, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x47, 0x6f, 0x6f, 0x64, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x6f,
	0x69, 0x6e, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x47, 0x6f, 0x6f, 0x64, 0x4d, 0x61,
	0x69, 0x6e, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x18,
	0x78, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x1b, 0x0a, 0x08,
	0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x22, 0xc3, 0x01, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x47, 0x6f, 0x6f, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x1d, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x00, 0x52, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x01, 0x52, 0x05, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x3c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x41, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x22,
	0x71, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x74, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x32, 0xfd, 0x03, 0x0a, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0xa9,
	0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x12, 0x38, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a,
	0x3a, 0x01, 0x2a, 0x22, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x6d, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0xa1, 0x01, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x73, 0x12, 0x36, 0x2e,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x67,
	0x65, 0x74, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x73, 0x12, 0xa1,
	0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x73, 0x12, 0x36, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47,
	0x6f, 0x6f, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13, 0x2f,
	0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x73, 0x42, 0x43, 0x5a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x2f, 0x67, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_ledger_gw_v1_ledger_profit_profit_proto_rawDescOnce sync.Once
	file_npool_ledger_gw_v1_ledger_profit_profit_proto_rawDescData = file_npool_ledger_gw_v1_ledger_profit_profit_proto_rawDesc
)

func file_npool_ledger_gw_v1_ledger_profit_profit_proto_rawDescGZIP() []byte {
	file_npool_ledger_gw_v1_ledger_profit_profit_proto_rawDescOnce.Do(func() {
		file_npool_ledger_gw_v1_ledger_profit_profit_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_ledger_gw_v1_ledger_profit_profit_proto_rawDescData)
	})
	return file_npool_ledger_gw_v1_ledger_profit_profit_proto_rawDescData
}

var file_npool_ledger_gw_v1_ledger_profit_profit_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_npool_ledger_gw_v1_ledger_profit_profit_proto_goTypes = []interface{}{
	(*MiningReward)(nil),             // 0: ledger.gateway.ledger.profit.v1.MiningReward
	(*GetMiningRewardsRequest)(nil),  // 1: ledger.gateway.ledger.profit.v1.GetMiningRewardsRequest
	(*GetMiningRewardsResponse)(nil), // 2: ledger.gateway.ledger.profit.v1.GetMiningRewardsResponse
	(*CoinProfit)(nil),               // 3: ledger.gateway.ledger.profit.v1.CoinProfit
	(*GetCoinProfitsRequest)(nil),    // 4: ledger.gateway.ledger.profit.v1.GetCoinProfitsRequest
	(*GetCoinProfitsResponse)(nil),   // 5: ledger.gateway.ledger.profit.v1.GetCoinProfitsResponse
	(*GoodProfit)(nil),               // 6: ledger.gateway.ledger.profit.v1.GoodProfit
	(*GetGoodProfitsRequest)(nil),    // 7: ledger.gateway.ledger.profit.v1.GetGoodProfitsRequest
	(*GetGoodProfitsResponse)(nil),   // 8: ledger.gateway.ledger.profit.v1.GetGoodProfitsResponse
	(v1.IOType)(0),                   // 9: basetypes.ledger.v1.IOType
	(v1.IOSubType)(0),                // 10: basetypes.ledger.v1.IOSubType
	(v11.GoodType)(0),                // 11: basetypes.good.v1.GoodType
}
var file_npool_ledger_gw_v1_ledger_profit_profit_proto_depIdxs = []int32{
	9,  // 0: ledger.gateway.ledger.profit.v1.MiningReward.IOType:type_name -> basetypes.ledger.v1.IOType
	10, // 1: ledger.gateway.ledger.profit.v1.MiningReward.IOSubType:type_name -> basetypes.ledger.v1.IOSubType
	11, // 2: ledger.gateway.ledger.profit.v1.MiningReward.GoodType:type_name -> basetypes.good.v1.GoodType
	0,  // 3: ledger.gateway.ledger.profit.v1.GetMiningRewardsResponse.Infos:type_name -> ledger.gateway.ledger.profit.v1.MiningReward
	3,  // 4: ledger.gateway.ledger.profit.v1.GetCoinProfitsResponse.Infos:type_name -> ledger.gateway.ledger.profit.v1.CoinProfit
	11, // 5: ledger.gateway.ledger.profit.v1.GoodProfit.GoodType:type_name -> basetypes.good.v1.GoodType
	6,  // 6: ledger.gateway.ledger.profit.v1.GetGoodProfitsResponse.Infos:type_name -> ledger.gateway.ledger.profit.v1.GoodProfit
	1,  // 7: ledger.gateway.ledger.profit.v1.Gateway.GetMiningRewards:input_type -> ledger.gateway.ledger.profit.v1.GetMiningRewardsRequest
	4,  // 8: ledger.gateway.ledger.profit.v1.Gateway.GetCoinProfits:input_type -> ledger.gateway.ledger.profit.v1.GetCoinProfitsRequest
	7,  // 9: ledger.gateway.ledger.profit.v1.Gateway.GetGoodProfits:input_type -> ledger.gateway.ledger.profit.v1.GetGoodProfitsRequest
	2,  // 10: ledger.gateway.ledger.profit.v1.Gateway.GetMiningRewards:output_type -> ledger.gateway.ledger.profit.v1.GetMiningRewardsResponse
	5,  // 11: ledger.gateway.ledger.profit.v1.Gateway.GetCoinProfits:output_type -> ledger.gateway.ledger.profit.v1.GetCoinProfitsResponse
	8,  // 12: ledger.gateway.ledger.profit.v1.Gateway.GetGoodProfits:output_type -> ledger.gateway.ledger.profit.v1.GetGoodProfitsResponse
	10, // [10:13] is the sub-list for method output_type
	7,  // [7:10] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_npool_ledger_gw_v1_ledger_profit_profit_proto_init() }
func file_npool_ledger_gw_v1_ledger_profit_profit_proto_init() {
	if File_npool_ledger_gw_v1_ledger_profit_profit_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_ledger_gw_v1_ledger_profit_profit_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiningReward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_ledger_gw_v1_ledger_profit_profit_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMiningRewardsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_ledger_gw_v1_ledger_profit_profit_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMiningRewardsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_ledger_gw_v1_ledger_profit_profit_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinProfit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_ledger_gw_v1_ledger_profit_profit_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinProfitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_ledger_gw_v1_ledger_profit_profit_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinProfitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_ledger_gw_v1_ledger_profit_profit_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodProfit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_ledger_gw_v1_ledger_profit_profit_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodProfitsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_ledger_gw_v1_ledger_profit_profit_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodProfitsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_ledger_gw_v1_ledger_profit_profit_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_npool_ledger_gw_v1_ledger_profit_profit_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_npool_ledger_gw_v1_ledger_profit_profit_proto_msgTypes[7].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_ledger_gw_v1_ledger_profit_profit_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_ledger_gw_v1_ledger_profit_profit_proto_goTypes,
		DependencyIndexes: file_npool_ledger_gw_v1_ledger_profit_profit_proto_depIdxs,
		MessageInfos:      file_npool_ledger_gw_v1_ledger_profit_profit_proto_msgTypes,
	}.Build()
	File_npool_ledger_gw_v1_ledger_profit_profit_proto = out.File
	file_npool_ledger_gw_v1_ledger_profit_profit_proto_rawDesc = nil
	file_npool_ledger_gw_v1_ledger_profit_profit_proto_goTypes = nil
	file_npool_ledger_gw_v1_ledger_profit_profit_proto_depIdxs = nil
}
