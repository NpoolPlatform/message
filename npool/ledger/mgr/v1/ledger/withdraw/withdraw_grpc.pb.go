// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/ledger/mgr/v1/ledger/withdraw/withdraw.proto

package withdraw

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateWithdraw(ctx context.Context, in *CreateWithdrawRequest, opts ...grpc.CallOption) (*CreateWithdrawResponse, error)
	CreateWithdraws(ctx context.Context, in *CreateWithdrawsRequest, opts ...grpc.CallOption) (*CreateWithdrawsResponse, error)
	UpdateWithdraw(ctx context.Context, in *UpdateWithdrawRequest, opts ...grpc.CallOption) (*UpdateWithdrawResponse, error)
	GetWithdraw(ctx context.Context, in *GetWithdrawRequest, opts ...grpc.CallOption) (*GetWithdrawResponse, error)
	GetWithdrawOnly(ctx context.Context, in *GetWithdrawOnlyRequest, opts ...grpc.CallOption) (*GetWithdrawOnlyResponse, error)
	GetWithdraws(ctx context.Context, in *GetWithdrawsRequest, opts ...grpc.CallOption) (*GetWithdrawsResponse, error)
	ExistWithdraw(ctx context.Context, in *ExistWithdrawRequest, opts ...grpc.CallOption) (*ExistWithdrawResponse, error)
	ExistWithdrawConds(ctx context.Context, in *ExistWithdrawCondsRequest, opts ...grpc.CallOption) (*ExistWithdrawCondsResponse, error)
	CountWithdraws(ctx context.Context, in *CountWithdrawsRequest, opts ...grpc.CallOption) (*CountWithdrawsResponse, error)
	DeleteWithdraw(ctx context.Context, in *DeleteWithdrawRequest, opts ...grpc.CallOption) (*DeleteWithdrawResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateWithdraw(ctx context.Context, in *CreateWithdrawRequest, opts ...grpc.CallOption) (*CreateWithdrawResponse, error) {
	out := new(CreateWithdrawResponse)
	err := c.cc.Invoke(ctx, "/ledger.manager.ledger.withdraw.v1.Manager/CreateWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateWithdraws(ctx context.Context, in *CreateWithdrawsRequest, opts ...grpc.CallOption) (*CreateWithdrawsResponse, error) {
	out := new(CreateWithdrawsResponse)
	err := c.cc.Invoke(ctx, "/ledger.manager.ledger.withdraw.v1.Manager/CreateWithdraws", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateWithdraw(ctx context.Context, in *UpdateWithdrawRequest, opts ...grpc.CallOption) (*UpdateWithdrawResponse, error) {
	out := new(UpdateWithdrawResponse)
	err := c.cc.Invoke(ctx, "/ledger.manager.ledger.withdraw.v1.Manager/UpdateWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetWithdraw(ctx context.Context, in *GetWithdrawRequest, opts ...grpc.CallOption) (*GetWithdrawResponse, error) {
	out := new(GetWithdrawResponse)
	err := c.cc.Invoke(ctx, "/ledger.manager.ledger.withdraw.v1.Manager/GetWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetWithdrawOnly(ctx context.Context, in *GetWithdrawOnlyRequest, opts ...grpc.CallOption) (*GetWithdrawOnlyResponse, error) {
	out := new(GetWithdrawOnlyResponse)
	err := c.cc.Invoke(ctx, "/ledger.manager.ledger.withdraw.v1.Manager/GetWithdrawOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetWithdraws(ctx context.Context, in *GetWithdrawsRequest, opts ...grpc.CallOption) (*GetWithdrawsResponse, error) {
	out := new(GetWithdrawsResponse)
	err := c.cc.Invoke(ctx, "/ledger.manager.ledger.withdraw.v1.Manager/GetWithdraws", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistWithdraw(ctx context.Context, in *ExistWithdrawRequest, opts ...grpc.CallOption) (*ExistWithdrawResponse, error) {
	out := new(ExistWithdrawResponse)
	err := c.cc.Invoke(ctx, "/ledger.manager.ledger.withdraw.v1.Manager/ExistWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistWithdrawConds(ctx context.Context, in *ExistWithdrawCondsRequest, opts ...grpc.CallOption) (*ExistWithdrawCondsResponse, error) {
	out := new(ExistWithdrawCondsResponse)
	err := c.cc.Invoke(ctx, "/ledger.manager.ledger.withdraw.v1.Manager/ExistWithdrawConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountWithdraws(ctx context.Context, in *CountWithdrawsRequest, opts ...grpc.CallOption) (*CountWithdrawsResponse, error) {
	out := new(CountWithdrawsResponse)
	err := c.cc.Invoke(ctx, "/ledger.manager.ledger.withdraw.v1.Manager/CountWithdraws", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteWithdraw(ctx context.Context, in *DeleteWithdrawRequest, opts ...grpc.CallOption) (*DeleteWithdrawResponse, error) {
	out := new(DeleteWithdrawResponse)
	err := c.cc.Invoke(ctx, "/ledger.manager.ledger.withdraw.v1.Manager/DeleteWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateWithdraw(context.Context, *CreateWithdrawRequest) (*CreateWithdrawResponse, error)
	CreateWithdraws(context.Context, *CreateWithdrawsRequest) (*CreateWithdrawsResponse, error)
	UpdateWithdraw(context.Context, *UpdateWithdrawRequest) (*UpdateWithdrawResponse, error)
	GetWithdraw(context.Context, *GetWithdrawRequest) (*GetWithdrawResponse, error)
	GetWithdrawOnly(context.Context, *GetWithdrawOnlyRequest) (*GetWithdrawOnlyResponse, error)
	GetWithdraws(context.Context, *GetWithdrawsRequest) (*GetWithdrawsResponse, error)
	ExistWithdraw(context.Context, *ExistWithdrawRequest) (*ExistWithdrawResponse, error)
	ExistWithdrawConds(context.Context, *ExistWithdrawCondsRequest) (*ExistWithdrawCondsResponse, error)
	CountWithdraws(context.Context, *CountWithdrawsRequest) (*CountWithdrawsResponse, error)
	DeleteWithdraw(context.Context, *DeleteWithdrawRequest) (*DeleteWithdrawResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateWithdraw(context.Context, *CreateWithdrawRequest) (*CreateWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWithdraw not implemented")
}
func (UnimplementedManagerServer) CreateWithdraws(context.Context, *CreateWithdrawsRequest) (*CreateWithdrawsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWithdraws not implemented")
}
func (UnimplementedManagerServer) UpdateWithdraw(context.Context, *UpdateWithdrawRequest) (*UpdateWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWithdraw not implemented")
}
func (UnimplementedManagerServer) GetWithdraw(context.Context, *GetWithdrawRequest) (*GetWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdraw not implemented")
}
func (UnimplementedManagerServer) GetWithdrawOnly(context.Context, *GetWithdrawOnlyRequest) (*GetWithdrawOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdrawOnly not implemented")
}
func (UnimplementedManagerServer) GetWithdraws(context.Context, *GetWithdrawsRequest) (*GetWithdrawsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWithdraws not implemented")
}
func (UnimplementedManagerServer) ExistWithdraw(context.Context, *ExistWithdrawRequest) (*ExistWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistWithdraw not implemented")
}
func (UnimplementedManagerServer) ExistWithdrawConds(context.Context, *ExistWithdrawCondsRequest) (*ExistWithdrawCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistWithdrawConds not implemented")
}
func (UnimplementedManagerServer) CountWithdraws(context.Context, *CountWithdrawsRequest) (*CountWithdrawsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountWithdraws not implemented")
}
func (UnimplementedManagerServer) DeleteWithdraw(context.Context, *DeleteWithdrawRequest) (*DeleteWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWithdraw not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ledger.manager.ledger.withdraw.v1.Manager/CreateWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateWithdraw(ctx, req.(*CreateWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateWithdraws_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWithdrawsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateWithdraws(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ledger.manager.ledger.withdraw.v1.Manager/CreateWithdraws",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateWithdraws(ctx, req.(*CreateWithdrawsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ledger.manager.ledger.withdraw.v1.Manager/UpdateWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateWithdraw(ctx, req.(*UpdateWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ledger.manager.ledger.withdraw.v1.Manager/GetWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetWithdraw(ctx, req.(*GetWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetWithdrawOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithdrawOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetWithdrawOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ledger.manager.ledger.withdraw.v1.Manager/GetWithdrawOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetWithdrawOnly(ctx, req.(*GetWithdrawOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetWithdraws_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWithdrawsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetWithdraws(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ledger.manager.ledger.withdraw.v1.Manager/GetWithdraws",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetWithdraws(ctx, req.(*GetWithdrawsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ledger.manager.ledger.withdraw.v1.Manager/ExistWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistWithdraw(ctx, req.(*ExistWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistWithdrawConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistWithdrawCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistWithdrawConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ledger.manager.ledger.withdraw.v1.Manager/ExistWithdrawConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistWithdrawConds(ctx, req.(*ExistWithdrawCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountWithdraws_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountWithdrawsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountWithdraws(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ledger.manager.ledger.withdraw.v1.Manager/CountWithdraws",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountWithdraws(ctx, req.(*CountWithdrawsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ledger.manager.ledger.withdraw.v1.Manager/DeleteWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteWithdraw(ctx, req.(*DeleteWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ledger.manager.ledger.withdraw.v1.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWithdraw",
			Handler:    _Manager_CreateWithdraw_Handler,
		},
		{
			MethodName: "CreateWithdraws",
			Handler:    _Manager_CreateWithdraws_Handler,
		},
		{
			MethodName: "UpdateWithdraw",
			Handler:    _Manager_UpdateWithdraw_Handler,
		},
		{
			MethodName: "GetWithdraw",
			Handler:    _Manager_GetWithdraw_Handler,
		},
		{
			MethodName: "GetWithdrawOnly",
			Handler:    _Manager_GetWithdrawOnly_Handler,
		},
		{
			MethodName: "GetWithdraws",
			Handler:    _Manager_GetWithdraws_Handler,
		},
		{
			MethodName: "ExistWithdraw",
			Handler:    _Manager_ExistWithdraw_Handler,
		},
		{
			MethodName: "ExistWithdrawConds",
			Handler:    _Manager_ExistWithdrawConds_Handler,
		},
		{
			MethodName: "CountWithdraws",
			Handler:    _Manager_CountWithdraws_Handler,
		},
		{
			MethodName: "DeleteWithdraw",
			Handler:    _Manager_DeleteWithdraw_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/ledger/mgr/v1/ledger/withdraw/withdraw.proto",
}
