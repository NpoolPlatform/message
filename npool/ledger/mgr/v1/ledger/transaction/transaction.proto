syntax = "proto3";

package ledger.manager.ledger.transaction.v1;

option go_package = "github.com/NpoolPlatform/message/npool/ledger/mgr/v1/ledger/transaction";

import "google/protobuf/empty.proto";
import "npool/npool.proto";

// Service Name
service Manager {
    rpc CreateTransaction     (CreateTransactionRequest)     returns (CreateTransactionResponse)     {}
    rpc CreateTransactions    (CreateTransactionsRequest)    returns (CreateTransactionsResponse)    {}
    rpc UpdateTransaction     (UpdateTransactionRequest)     returns (UpdateTransactionResponse)     {}
    rpc GetTransaction        (GetTransactionRequest)        returns (GetTransactionResponse)        {}
    rpc GetTransactionOnly    (GetTransactionOnlyRequest)    returns (GetTransactionOnlyResponse)    {}
    rpc GetTransactions       (GetTransactionsRequest)       returns (GetTransactionsResponse)       {}
    rpc ExistTransaction      (ExistTransactionRequest)      returns (ExistTransactionResponse)      {}
    rpc ExistTransactionConds (ExistTransactionCondsRequest) returns (ExistTransactionCondsResponse) {}
    rpc CountTransactions     (CountTransactionsRequest)     returns (CountTransactionsResponse)     {}
    rpc DeleteTransaction     (DeleteTransactionRequest)     returns (DeleteTransactionResponse)     {}
}

enum TransactionState {
    DefaultTransactionState  = 0;
    Created                  = 10;  // Just created
    Wait                     = 20;  // Wait for dispatched to transaction system
    Transferring             = 30;  // Dispatched to transaction system
    TransactionFail          = 40;  // Transaction system tell me fail
    Successful               = 50;  // Transaction system tell me success
}

enum TransactionType {
    DefaultTransactionType   = 0;
    UserGoodBenefit          = 10;
    UserHotLimitation        = 20;
    PlatformGoodBenefit      = 30;
    PaymentCollector         = 40;
    GasFeeding               = 50;
    Withdrawal               = 60;
}

message TransactionReq {
    optional string           ID                  = 10;
    optional string           CoinTypeID          = 20;
    optional string           FromAccountID       = 30;
    optional string           ToAccountID         = 40;
    optional string           Amount              = 50;
    optional string           ChainTransactionID  = 60;
    optional TransactionState State               = 70;
    optional TransactionType  TxType              = 80;
    optional string           TxExtra             = 90; // Extra info: which user, which good, etc.
}

message Transaction {
    string           ID                  = 10;
    string           CoinTypeID          = 20;
    string           FromAccountID       = 30;
    string           ToAccountID         = 40;
    string           Amount              = 50;
    string           ChainTransactionID  = 60;
    TransactionState State               = 70;
    TransactionType  TxType              = 80;
    string           TxExtra             = 90;
    uint32           CreatedAt           = 100;
    uint32           UpdatedAt           = 110;
}

message Conds {
    optional npool.v1.StringVal ID             = 10;
    optional npool.v1.StringVal CoinTypeID     = 20;
    optional npool.v1.StringVal FromAccountID  = 30;
    optional npool.v1.StringVal ToAccountID    = 40;
    optional npool.v1.Int32Val  State          = 50;
    optional npool.v1.Int32Val  TxType         = 60;
    optional npool.v1.Uint32Val CreatedAt      = 70;
}


message CreateTransactionRequest {
    TransactionReq Info = 10;
}

message CreateTransactionResponse {
    Transaction Info = 10;
}

message CreateTransactionsRequest {
    repeated TransactionReq Infos = 10;
}

message CreateTransactionsResponse {
    repeated Transaction Infos = 10;
}

message UpdateTransactionRequest {
    TransactionReq Info = 10;
}

message UpdateTransactionResponse {
    Transaction Info = 10;
}

message GetTransactionRequest {
    string ID = 10;
}

message GetTransactionResponse {
    Transaction Info = 10;
}

message GetTransactionsRequest {
    Conds Conds = 10;
    int32 Offset = 20;
    int32 Limit = 30;
}

message GetTransactionsResponse {
    repeated Transaction Infos = 10;
    uint32 Total = 20;
}

message GetTransactionOnlyRequest {
    Conds Conds = 10;
}

message GetTransactionOnlyResponse {
    Transaction Info = 10;
}

message ExistTransactionRequest {
    string ID = 10;
}

message ExistTransactionResponse {
    bool Info = 10;
}

message ExistTransactionCondsRequest {
    Conds Conds = 10;
}

message ExistTransactionCondsResponse {
    bool Info = 10;
}

message CountTransactionsRequest {
    Conds Conds = 10;
}

message CountTransactionsResponse {
    uint32 Info = 10;
}

message DeleteTransactionRequest {
    string ID = 10;
}

message DeleteTransactionResponse {
    Transaction Info = 10;
}

