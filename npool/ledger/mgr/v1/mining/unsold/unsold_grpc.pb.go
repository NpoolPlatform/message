// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/ledger/mgr/v1/mining/unsold/unsold.proto

package unsold

import (
	context "context"
	npool "github.com/NpoolPlatform/message/npool"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Manager_Version_FullMethodName          = "/ledger.manager.mining.unsold.v1.Manager/Version"
	Manager_CreateUnsold_FullMethodName     = "/ledger.manager.mining.unsold.v1.Manager/CreateUnsold"
	Manager_CreateUnsolds_FullMethodName    = "/ledger.manager.mining.unsold.v1.Manager/CreateUnsolds"
	Manager_GetUnsold_FullMethodName        = "/ledger.manager.mining.unsold.v1.Manager/GetUnsold"
	Manager_GetUnsoldOnly_FullMethodName    = "/ledger.manager.mining.unsold.v1.Manager/GetUnsoldOnly"
	Manager_GetUnsolds_FullMethodName       = "/ledger.manager.mining.unsold.v1.Manager/GetUnsolds"
	Manager_ExistUnsold_FullMethodName      = "/ledger.manager.mining.unsold.v1.Manager/ExistUnsold"
	Manager_ExistUnsoldConds_FullMethodName = "/ledger.manager.mining.unsold.v1.Manager/ExistUnsoldConds"
	Manager_CountUnsolds_FullMethodName     = "/ledger.manager.mining.unsold.v1.Manager/CountUnsolds"
)

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*npool.VersionResponse, error)
	CreateUnsold(ctx context.Context, in *CreateUnsoldRequest, opts ...grpc.CallOption) (*CreateUnsoldResponse, error)
	CreateUnsolds(ctx context.Context, in *CreateUnsoldsRequest, opts ...grpc.CallOption) (*CreateUnsoldsResponse, error)
	GetUnsold(ctx context.Context, in *GetUnsoldRequest, opts ...grpc.CallOption) (*GetUnsoldResponse, error)
	GetUnsoldOnly(ctx context.Context, in *GetUnsoldOnlyRequest, opts ...grpc.CallOption) (*GetUnsoldOnlyResponse, error)
	GetUnsolds(ctx context.Context, in *GetUnsoldsRequest, opts ...grpc.CallOption) (*GetUnsoldsResponse, error)
	ExistUnsold(ctx context.Context, in *ExistUnsoldRequest, opts ...grpc.CallOption) (*ExistUnsoldResponse, error)
	ExistUnsoldConds(ctx context.Context, in *ExistUnsoldCondsRequest, opts ...grpc.CallOption) (*ExistUnsoldCondsResponse, error)
	CountUnsolds(ctx context.Context, in *CountUnsoldsRequest, opts ...grpc.CallOption) (*CountUnsoldsResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*npool.VersionResponse, error) {
	out := new(npool.VersionResponse)
	err := c.cc.Invoke(ctx, Manager_Version_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateUnsold(ctx context.Context, in *CreateUnsoldRequest, opts ...grpc.CallOption) (*CreateUnsoldResponse, error) {
	out := new(CreateUnsoldResponse)
	err := c.cc.Invoke(ctx, Manager_CreateUnsold_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateUnsolds(ctx context.Context, in *CreateUnsoldsRequest, opts ...grpc.CallOption) (*CreateUnsoldsResponse, error) {
	out := new(CreateUnsoldsResponse)
	err := c.cc.Invoke(ctx, Manager_CreateUnsolds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetUnsold(ctx context.Context, in *GetUnsoldRequest, opts ...grpc.CallOption) (*GetUnsoldResponse, error) {
	out := new(GetUnsoldResponse)
	err := c.cc.Invoke(ctx, Manager_GetUnsold_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetUnsoldOnly(ctx context.Context, in *GetUnsoldOnlyRequest, opts ...grpc.CallOption) (*GetUnsoldOnlyResponse, error) {
	out := new(GetUnsoldOnlyResponse)
	err := c.cc.Invoke(ctx, Manager_GetUnsoldOnly_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetUnsolds(ctx context.Context, in *GetUnsoldsRequest, opts ...grpc.CallOption) (*GetUnsoldsResponse, error) {
	out := new(GetUnsoldsResponse)
	err := c.cc.Invoke(ctx, Manager_GetUnsolds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistUnsold(ctx context.Context, in *ExistUnsoldRequest, opts ...grpc.CallOption) (*ExistUnsoldResponse, error) {
	out := new(ExistUnsoldResponse)
	err := c.cc.Invoke(ctx, Manager_ExistUnsold_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistUnsoldConds(ctx context.Context, in *ExistUnsoldCondsRequest, opts ...grpc.CallOption) (*ExistUnsoldCondsResponse, error) {
	out := new(ExistUnsoldCondsResponse)
	err := c.cc.Invoke(ctx, Manager_ExistUnsoldConds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountUnsolds(ctx context.Context, in *CountUnsoldsRequest, opts ...grpc.CallOption) (*CountUnsoldsResponse, error) {
	out := new(CountUnsoldsResponse)
	err := c.cc.Invoke(ctx, Manager_CountUnsolds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	Version(context.Context, *emptypb.Empty) (*npool.VersionResponse, error)
	CreateUnsold(context.Context, *CreateUnsoldRequest) (*CreateUnsoldResponse, error)
	CreateUnsolds(context.Context, *CreateUnsoldsRequest) (*CreateUnsoldsResponse, error)
	GetUnsold(context.Context, *GetUnsoldRequest) (*GetUnsoldResponse, error)
	GetUnsoldOnly(context.Context, *GetUnsoldOnlyRequest) (*GetUnsoldOnlyResponse, error)
	GetUnsolds(context.Context, *GetUnsoldsRequest) (*GetUnsoldsResponse, error)
	ExistUnsold(context.Context, *ExistUnsoldRequest) (*ExistUnsoldResponse, error)
	ExistUnsoldConds(context.Context, *ExistUnsoldCondsRequest) (*ExistUnsoldCondsResponse, error)
	CountUnsolds(context.Context, *CountUnsoldsRequest) (*CountUnsoldsResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) Version(context.Context, *emptypb.Empty) (*npool.VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedManagerServer) CreateUnsold(context.Context, *CreateUnsoldRequest) (*CreateUnsoldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUnsold not implemented")
}
func (UnimplementedManagerServer) CreateUnsolds(context.Context, *CreateUnsoldsRequest) (*CreateUnsoldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUnsolds not implemented")
}
func (UnimplementedManagerServer) GetUnsold(context.Context, *GetUnsoldRequest) (*GetUnsoldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnsold not implemented")
}
func (UnimplementedManagerServer) GetUnsoldOnly(context.Context, *GetUnsoldOnlyRequest) (*GetUnsoldOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnsoldOnly not implemented")
}
func (UnimplementedManagerServer) GetUnsolds(context.Context, *GetUnsoldsRequest) (*GetUnsoldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUnsolds not implemented")
}
func (UnimplementedManagerServer) ExistUnsold(context.Context, *ExistUnsoldRequest) (*ExistUnsoldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistUnsold not implemented")
}
func (UnimplementedManagerServer) ExistUnsoldConds(context.Context, *ExistUnsoldCondsRequest) (*ExistUnsoldCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistUnsoldConds not implemented")
}
func (UnimplementedManagerServer) CountUnsolds(context.Context, *CountUnsoldsRequest) (*CountUnsoldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountUnsolds not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_Version_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateUnsold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUnsoldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateUnsold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_CreateUnsold_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateUnsold(ctx, req.(*CreateUnsoldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateUnsolds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUnsoldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateUnsolds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_CreateUnsolds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateUnsolds(ctx, req.(*CreateUnsoldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetUnsold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnsoldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetUnsold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetUnsold_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetUnsold(ctx, req.(*GetUnsoldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetUnsoldOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnsoldOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetUnsoldOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetUnsoldOnly_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetUnsoldOnly(ctx, req.(*GetUnsoldOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetUnsolds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUnsoldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetUnsolds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetUnsolds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetUnsolds(ctx, req.(*GetUnsoldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistUnsold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistUnsoldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistUnsold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_ExistUnsold_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistUnsold(ctx, req.(*ExistUnsoldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistUnsoldConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistUnsoldCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistUnsoldConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_ExistUnsoldConds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistUnsoldConds(ctx, req.(*ExistUnsoldCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountUnsolds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountUnsoldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountUnsolds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_CountUnsolds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountUnsolds(ctx, req.(*CountUnsoldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ledger.manager.mining.unsold.v1.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _Manager_Version_Handler,
		},
		{
			MethodName: "CreateUnsold",
			Handler:    _Manager_CreateUnsold_Handler,
		},
		{
			MethodName: "CreateUnsolds",
			Handler:    _Manager_CreateUnsolds_Handler,
		},
		{
			MethodName: "GetUnsold",
			Handler:    _Manager_GetUnsold_Handler,
		},
		{
			MethodName: "GetUnsoldOnly",
			Handler:    _Manager_GetUnsoldOnly_Handler,
		},
		{
			MethodName: "GetUnsolds",
			Handler:    _Manager_GetUnsolds_Handler,
		},
		{
			MethodName: "ExistUnsold",
			Handler:    _Manager_ExistUnsold_Handler,
		},
		{
			MethodName: "ExistUnsoldConds",
			Handler:    _Manager_ExistUnsoldConds_Handler,
		},
		{
			MethodName: "CountUnsolds",
			Handler:    _Manager_CountUnsolds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/ledger/mgr/v1/mining/unsold/unsold.proto",
}
