syntax = "proto3";

package ledger.middleware.good.ledger.unsold.v2;

option go_package = "github.com/NpoolPlatform/message/npool/ledger/mw/v2/good/ledger/unsold";

import "npool/basetypes/v1/conds.proto";

// Service Name
service Middleware {
    rpc GetUnsoldStatementOnly (GetUnsoldStatementOnlyRequest) returns (GetUnsoldStatementOnlyResponse) {}
}

message UnsoldStatementReq {
    optional string ID          = 10;
    optional string GoodID      = 20;
    optional string CoinTypeID  = 30;
    optional string Amount      = 40;
    optional uint32 BenefitDate = 50;
    optional uint32 CreatedAt   = 60;
}

message UnsoldStatement {
    // @inject_tag: sql:"id"
    string ID          = 10;
    // @inject_tag: sql:"good_id"
    string GoodID      = 20;
    // @inject_tag: sql:"coin_type_id"
    string CoinTypeID  = 30;
    // @inject_tag: sql:"amount"
    string Amount      = 40;
    // @inject_tag: sql:"benefit_date"
    uint32 BenefitDate = 50;
    // @inject_tag: sql:"created_at"
    uint32 CreatedAt   = 60;
    // @inject_tag: sql:"updated_at"
    uint32 UpdatedAt   = 70;
}

message Conds {
    optional basetypes.v1.StringVal ID          = 10;
    optional basetypes.v1.StringVal GoodID      = 20;
    optional basetypes.v1.StringVal CoinTypeID  = 30;
    optional basetypes.v1.StringVal Amount      = 40;
    optional basetypes.v1.Uint32Val BenefitDate = 50;
}

message GetUnsoldStatementOnlyRequest {
    Conds Conds = 10;
}

message GetUnsoldStatementOnlyResponse {
    UnsoldStatement Info = 10;
}

