syntax = "proto3";

package ledger.middleware.good.ledger.statement.v2;

option go_package = "github.com/NpoolPlatform/message/npool/ledger/mw/v2/good/ledger/statement";

import "npool/basetypes/v1/conds.proto";

// Service Name
service Middleware {
    rpc GetGoodStatements       (GetGoodStatementsRequest)      returns (GetGoodStatementsResponse)    {}
    rpc CreateGoodStatement     (CreateGoodStatementRequest)    returns (CreateGoodStatementResponse) {}
    rpc CreateGoodStatements    (CreateGoodStatementsRequest)   returns (CreateGoodStatementsResponse) {}
    rpc DeleteGoodStatement     (DeleteGoodStatementRequest)    returns (DeleteGoodStatementResponse) {}
    rpc DeleteGoodStatements    (DeleteGoodStatementsRequest)   returns (DeleteGoodStatementsResponse) {}
    rpc ExistGoodStatementConds (ExistGoodStatementCondsRequest) returns (ExistGoodStatementCondsResponse) {}
}

message GoodStatementReq {
    optional string     ID                 = 10;
    optional string     GoodID             = 20;
    optional string     CoinTypeID         = 30;
    optional uint32     BenefitDate        = 50;
    optional uint32     CreatedAt          = 60;
    optional string     TotalAmount        = 70;
    optional string     UnsoldAmount       = 80;
    optional string     TechniqueServiceFeeAmount = 90;
}

message GoodStatement {
    // @inject_tag: sql:"id"
    string ID          = 10;
    // @inject_tag: sql:"good_id"
    string GoodID      = 20;
    // @inject_tag: sql:"coin_type_id"
    string CoinTypeID  = 30;
    // @inject_tag: sql:"amount"
    string Amount      = 40;
    // @inject_tag: sql:"technique_service_fee_amount"
    string TechniqueServiceFeeAmount      = 50;
    // @inject_tag: sql:"to_platform"
    string ToPlatform  = 60;
    // @inject_tag: sql:"to_user"
    string ToUser      = 70;
    // @inject_tag: sql:"benefit_date"
    uint32 BenefitDate = 80;
    // @inject_tag: sql:"created_at"
    uint32 CreatedAt   = 90;
    // @inject_tag: sql:"updated_at"
    uint32 UpdatedAt   = 100;
}

message Conds {
    optional basetypes.v1.StringVal ID               = 10;
    optional basetypes.v1.StringVal GoodID           = 20;
    optional basetypes.v1.StringVal CoinTypeID       = 30;
    optional basetypes.v1.StringVal Amount           = 40;
    optional basetypes.v1.Uint32Val BenefitDate      = 50;
}

message GetGoodStatementsRequest {
    Conds Conds   = 10;
    int32 Offset  = 20;
    int32 Limit   = 30;
}

message GetGoodStatementsResponse {
    repeated GoodStatement Infos = 10;
    uint32                 Total = 20;
}

message CreateGoodStatementRequest {
    GoodStatementReq Info = 10;
}

message CreateGoodStatementResponse {
    GoodStatement Info = 10;
}

message CreateGoodStatementsRequest {
    repeated GoodStatementReq Infos = 10;
}

message CreateGoodStatementsResponse {
    repeated GoodStatement Infos = 10;
}

message DeleteGoodStatementRequest {
    GoodStatementReq Info = 10;
}

message DeleteGoodStatementResponse {
    GoodStatement Info = 10;
}

message DeleteGoodStatementsRequest {
    repeated GoodStatementReq Infos = 10;
}

message DeleteGoodStatementsResponse {
    repeated GoodStatement Infos = 10;
}

message ExistGoodStatementCondsRequest {
    Conds conds = 10;
}

message ExistGoodStatementCondsResponse {
    bool info = 10;
}