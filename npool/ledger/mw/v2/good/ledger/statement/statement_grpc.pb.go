// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/ledger/mw/v2/good/ledger/statement/statement.proto

package statement

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Middleware_GetGoodStatementOnly_FullMethodName    = "/ledger.middleware.good.ledger.statement.v2.Middleware/GetGoodStatementOnly"
	Middleware_GetGoodStatements_FullMethodName       = "/ledger.middleware.good.ledger.statement.v2.Middleware/GetGoodStatements"
	Middleware_CreateGoodStatement_FullMethodName     = "/ledger.middleware.good.ledger.statement.v2.Middleware/CreateGoodStatement"
	Middleware_CreateGoodStatements_FullMethodName    = "/ledger.middleware.good.ledger.statement.v2.Middleware/CreateGoodStatements"
	Middleware_DeleteGoodStatement_FullMethodName     = "/ledger.middleware.good.ledger.statement.v2.Middleware/DeleteGoodStatement"
	Middleware_DeleteGoodStatements_FullMethodName    = "/ledger.middleware.good.ledger.statement.v2.Middleware/DeleteGoodStatements"
	Middleware_ExistGoodStatementConds_FullMethodName = "/ledger.middleware.good.ledger.statement.v2.Middleware/ExistGoodStatementConds"
)

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
	GetGoodStatementOnly(ctx context.Context, in *GetGoodStatementOnlyRequest, opts ...grpc.CallOption) (*GetGoodStatementOnlyResponse, error)
	GetGoodStatements(ctx context.Context, in *GetGoodStatementsRequest, opts ...grpc.CallOption) (*GetGoodStatementsResponse, error)
	CreateGoodStatement(ctx context.Context, in *CreateGoodStatementRequest, opts ...grpc.CallOption) (*CreateGoodStatementResponse, error)
	CreateGoodStatements(ctx context.Context, in *CreateGoodStatementsRequest, opts ...grpc.CallOption) (*CreateGoodStatementsResponse, error)
	DeleteGoodStatement(ctx context.Context, in *DeleteGoodStatementRequest, opts ...grpc.CallOption) (*DeleteGoodStatementResponse, error)
	DeleteGoodStatements(ctx context.Context, in *DeleteGoodStatementsRequest, opts ...grpc.CallOption) (*DeleteGoodStatementsResponse, error)
	ExistGoodStatementConds(ctx context.Context, in *ExistGoodStatementCondsRequest, opts ...grpc.CallOption) (*ExistGoodStatementCondsResponse, error)
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) GetGoodStatementOnly(ctx context.Context, in *GetGoodStatementOnlyRequest, opts ...grpc.CallOption) (*GetGoodStatementOnlyResponse, error) {
	out := new(GetGoodStatementOnlyResponse)
	err := c.cc.Invoke(ctx, Middleware_GetGoodStatementOnly_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetGoodStatements(ctx context.Context, in *GetGoodStatementsRequest, opts ...grpc.CallOption) (*GetGoodStatementsResponse, error) {
	out := new(GetGoodStatementsResponse)
	err := c.cc.Invoke(ctx, Middleware_GetGoodStatements_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) CreateGoodStatement(ctx context.Context, in *CreateGoodStatementRequest, opts ...grpc.CallOption) (*CreateGoodStatementResponse, error) {
	out := new(CreateGoodStatementResponse)
	err := c.cc.Invoke(ctx, Middleware_CreateGoodStatement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) CreateGoodStatements(ctx context.Context, in *CreateGoodStatementsRequest, opts ...grpc.CallOption) (*CreateGoodStatementsResponse, error) {
	out := new(CreateGoodStatementsResponse)
	err := c.cc.Invoke(ctx, Middleware_CreateGoodStatements_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) DeleteGoodStatement(ctx context.Context, in *DeleteGoodStatementRequest, opts ...grpc.CallOption) (*DeleteGoodStatementResponse, error) {
	out := new(DeleteGoodStatementResponse)
	err := c.cc.Invoke(ctx, Middleware_DeleteGoodStatement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) DeleteGoodStatements(ctx context.Context, in *DeleteGoodStatementsRequest, opts ...grpc.CallOption) (*DeleteGoodStatementsResponse, error) {
	out := new(DeleteGoodStatementsResponse)
	err := c.cc.Invoke(ctx, Middleware_DeleteGoodStatements_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ExistGoodStatementConds(ctx context.Context, in *ExistGoodStatementCondsRequest, opts ...grpc.CallOption) (*ExistGoodStatementCondsResponse, error) {
	out := new(ExistGoodStatementCondsResponse)
	err := c.cc.Invoke(ctx, Middleware_ExistGoodStatementConds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
	GetGoodStatementOnly(context.Context, *GetGoodStatementOnlyRequest) (*GetGoodStatementOnlyResponse, error)
	GetGoodStatements(context.Context, *GetGoodStatementsRequest) (*GetGoodStatementsResponse, error)
	CreateGoodStatement(context.Context, *CreateGoodStatementRequest) (*CreateGoodStatementResponse, error)
	CreateGoodStatements(context.Context, *CreateGoodStatementsRequest) (*CreateGoodStatementsResponse, error)
	DeleteGoodStatement(context.Context, *DeleteGoodStatementRequest) (*DeleteGoodStatementResponse, error)
	DeleteGoodStatements(context.Context, *DeleteGoodStatementsRequest) (*DeleteGoodStatementsResponse, error)
	ExistGoodStatementConds(context.Context, *ExistGoodStatementCondsRequest) (*ExistGoodStatementCondsResponse, error)
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) GetGoodStatementOnly(context.Context, *GetGoodStatementOnlyRequest) (*GetGoodStatementOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodStatementOnly not implemented")
}
func (UnimplementedMiddlewareServer) GetGoodStatements(context.Context, *GetGoodStatementsRequest) (*GetGoodStatementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodStatements not implemented")
}
func (UnimplementedMiddlewareServer) CreateGoodStatement(context.Context, *CreateGoodStatementRequest) (*CreateGoodStatementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGoodStatement not implemented")
}
func (UnimplementedMiddlewareServer) CreateGoodStatements(context.Context, *CreateGoodStatementsRequest) (*CreateGoodStatementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGoodStatements not implemented")
}
func (UnimplementedMiddlewareServer) DeleteGoodStatement(context.Context, *DeleteGoodStatementRequest) (*DeleteGoodStatementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGoodStatement not implemented")
}
func (UnimplementedMiddlewareServer) DeleteGoodStatements(context.Context, *DeleteGoodStatementsRequest) (*DeleteGoodStatementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGoodStatements not implemented")
}
func (UnimplementedMiddlewareServer) ExistGoodStatementConds(context.Context, *ExistGoodStatementCondsRequest) (*ExistGoodStatementCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistGoodStatementConds not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_GetGoodStatementOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoodStatementOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetGoodStatementOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetGoodStatementOnly_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetGoodStatementOnly(ctx, req.(*GetGoodStatementOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetGoodStatements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoodStatementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetGoodStatements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetGoodStatements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetGoodStatements(ctx, req.(*GetGoodStatementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_CreateGoodStatement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGoodStatementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateGoodStatement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_CreateGoodStatement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateGoodStatement(ctx, req.(*CreateGoodStatementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_CreateGoodStatements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGoodStatementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateGoodStatements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_CreateGoodStatements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateGoodStatements(ctx, req.(*CreateGoodStatementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_DeleteGoodStatement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGoodStatementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).DeleteGoodStatement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_DeleteGoodStatement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).DeleteGoodStatement(ctx, req.(*DeleteGoodStatementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_DeleteGoodStatements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGoodStatementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).DeleteGoodStatements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_DeleteGoodStatements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).DeleteGoodStatements(ctx, req.(*DeleteGoodStatementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ExistGoodStatementConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistGoodStatementCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ExistGoodStatementConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_ExistGoodStatementConds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ExistGoodStatementConds(ctx, req.(*ExistGoodStatementCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ledger.middleware.good.ledger.statement.v2.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGoodStatementOnly",
			Handler:    _Middleware_GetGoodStatementOnly_Handler,
		},
		{
			MethodName: "GetGoodStatements",
			Handler:    _Middleware_GetGoodStatements_Handler,
		},
		{
			MethodName: "CreateGoodStatement",
			Handler:    _Middleware_CreateGoodStatement_Handler,
		},
		{
			MethodName: "CreateGoodStatements",
			Handler:    _Middleware_CreateGoodStatements_Handler,
		},
		{
			MethodName: "DeleteGoodStatement",
			Handler:    _Middleware_DeleteGoodStatement_Handler,
		},
		{
			MethodName: "DeleteGoodStatements",
			Handler:    _Middleware_DeleteGoodStatements_Handler,
		},
		{
			MethodName: "ExistGoodStatementConds",
			Handler:    _Middleware_ExistGoodStatementConds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/ledger/mw/v2/good/ledger/statement/statement.proto",
}
