syntax = "proto3";

package ledger.middleware.statement.v2;

option go_package = "github.com/NpoolPlatform/message/npool/ledger/mw/v2/statement";

import "npool/basetypes/v1/conds.proto";
import "npool/basetypes/ledger/v1/enums.proto";
import "npool/ledger/mw/v2/ledger/ledger.proto";

// Service Name
service Middleware {
    rpc GetStatementOnly    (GetStatementOnlyRequest)    returns (GetStatementOnlyResponse)    {}
    rpc GetStatements       (GetStatementsRequest)       returns (GetStatementsResponse)       {}
    rpc GetStatement        (GetStatementRequest)        returns (GetStatementResponse)        {}
    rpc LockBalance         (LockBalanceRequest)         returns (LockBalanceResponse)          {}
    rpc LockBalanceOut      (LockBalanceOutRequest)      returns (LockBalanceOutResponse)          {}
    rpc UnlockBalance       (UnlockBalanceRequest)       returns (UnlockBalanceResponse)        {}
    rpc UnlockBalanceOut    (UnlockBalanceOutRequest)    returns (UnlockBalanceOutResponse)        {}
}

message StatementReq {
    optional string     ID               = 10;
    optional string     AppID            = 20;
    optional string     UserID           = 30;
    optional string     CoinTypeID       = 40;
    optional basetypes.ledger.v1.IOType     IOType           = 50;
    optional basetypes.ledger.v1.IOSubType  IOSubType        = 60;
    optional string     Amount           = 70;
    // E.g. when pay with non-USDT coin
    optional string     FromCoinTypeID   = 80;
    optional string     CoinUSDCurrency  = 90;
    optional string     IOExtra          = 100;
    optional uint32     CreatedAt        = 110;
}

message Statement {
    // @inject_tag: sql:"id"
    string      ID                             = 10;
    // @inject_tag: sql:"app_id"
    string      AppID                          = 20;
    // @inject_tag: sql:"user_id"
    string      UserID                         = 30;
    // @inject_tag: sql:"coin_type_id"
    string      CoinTypeID                     = 40;
    // @inject_tag: sql:"io_type"
    string      IOTypeStr                      = 41;
    basetypes.ledger.v1.IOType      IOType                         = 50;
    // @inject_tag: sql:"io_sub_type"
    string      IOSubTypeStr                   = 51;
    basetypes.ledger.v1.IOSubType   IOSubType                      = 60;
    // @inject_tag: sql:"amount"
    string      Amount                         = 70;
    // @inject_tag: sql:"from_coin_type_id"
    string      FromCoinTypeID                 = 80;
    // @inject_tag: sql:"coin_usd_currency"
    string      CoinUSDCurrency                = 90;
    // @inject_tag: sql:"io_extra"
    string      IOExtra                        = 100;
    // @inject_tag: sql:"created_at"
    uint32      CreatedAt                      = 110;
    // @inject_tag: sql:"updated_at"
    uint32      UpdatedAt                      = 120;
}

message Conds {
    optional basetypes.v1.StringVal ID               = 10;
    optional basetypes.v1.StringVal AppID            = 20;
    optional basetypes.v1.StringVal UserID           = 30;
    optional basetypes.v1.StringVal CoinTypeID       = 40;
    optional basetypes.v1.Uint32Val IOType           = 50;
    optional basetypes.v1.Uint32Val IOSubType        = 60;
    optional basetypes.v1.StringVal Amount           = 70;
    optional basetypes.v1.StringVal FromCoinTypeID   = 80;
    optional basetypes.v1.StringVal CoinUSDCurrency  = 90;
    optional basetypes.v1.StringVal IOExtra          = 100;
    optional basetypes.v1.Uint32Val StartAt          = 110;
    optional basetypes.v1.Uint32Val EndAt            = 120;
}

message GetStatementOnlyRequest {
    Conds Conds = 10;
}

message GetStatementOnlyResponse {
    Statement Info = 10;
}

message GetStatementsRequest {
    Conds  Conds  = 10;
    int32  Offset = 20;
    int32  Limit  = 30;
}

message GetStatementsResponse {
    repeated Statement Infos = 10;
    uint32             Total = 20;
}

message GetStatementRequest {
    string ID = 10;
}

message GetStatementResponse {
    Statement Info = 10;
}

message LockBalanceReq {
    string AppID       = 10;
    string UserID      = 20;
    string CoinTypeID  = 30;
    string Amount      = 40;
}

message LockBalanceRequest {
    LockBalanceReq Info = 10;
}

message LockBalanceResponse {
    .ledger.middleware.ledger.v2.Ledger Info = 10;
}

message LockBalanceOutRequest {
    LockBalanceReq Info = 10;
}

message LockBalanceOutResponse {
    .ledger.middleware.ledger.v2.Ledger Info = 10;
}

message UnlockBalanceReq {
    string AppID                                        = 10;
    string UserID                                       = 20;
    string CoinTypeID                                   = 30;
    string Unlocked                                     = 40;
    string Outcoming                                    = 50;
    // Only Payment or Withdrawal
    optional basetypes.ledger.v1.IOSubType IOSubType    = 60;
    string IOExtra                                      = 70;
}

message UnlockBalanceRequest {
    UnlockBalanceReq Info = 10;
}

message UnlockBalanceResponse {
    .ledger.middleware.ledger.v2.Ledger Info = 10;
}

message UnlockBalanceOutRequest {
    UnlockBalanceReq Info = 10;
}

message UnlockBalanceOutResponse {
    .ledger.middleware.ledger.v2.Ledger Info = 10;
}