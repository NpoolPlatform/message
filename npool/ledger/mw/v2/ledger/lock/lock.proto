syntax = "proto3";

package ledger.middleware.ledger.lock.v2;

option go_package = "github.com/NpoolPlatform/message/npool/ledger/mw/v2/ledger/lock";

import "npool/basetypes/ledger/v1/enums.proto";
import "npool/ledger/mw/v2/ledger/ledger.proto";

// Service Name
service Middleware {
    rpc LockBalance         (LockBalanceRequest)        returns (LockBalanceResponse)      {}
    rpc UnlockBalance       (UnlockBalanceRequest)      returns (UnlockBalanceResponse)    {}
    rpc SpendBalance        (SpendBalanceRequest)       returns (SpendBalanceResponse)     {}
    rpc UnspendBalance      (UnspendBalanceRequest)     returns (UnspendBalanceResponse)   {}
}

message BalanceReq {
    optional string ID          = 10;
    string          AppID       = 20;
    string          UserID      = 30;
    string          CoinTypeID  = 40;
    string          Amount      = 50;
}

message LockBalanceRequest {
    BalanceReq Info = 10;
}

message LockBalanceResponse {
    .ledger.middleware.ledger.v2.Ledger Info = 10;
}

message UnlockBalanceRequest {
    BalanceReq Info = 10;
}

message UnlockBalanceResponse {
    .ledger.middleware.ledger.v2.Ledger Info = 10;
}

message SpendBalanceReq {
    optional string ID                                  = 10;
    string          AppID                               = 20;
    string          UserID                              = 30;
    string          CoinTypeID                          = 40;
    string          Unlocked                            = 50;
    string          Outcoming                           = 60;
    // Only Payment or Withdraw
    basetypes.ledger.v1.IOSubType IOSubType             = 70;
    string          IOExtra                             = 80;
}

message SpendBalanceRequest {
    SpendBalanceReq Info = 10;
}

message SpendBalanceResponse {
    .ledger.middleware.ledger.v2.Ledger Info = 10;
}

message UnspendBalanceRequest {
    SpendBalanceReq Info = 10;
}

message UnspendBalanceResponse {
    .ledger.middleware.ledger.v2.Ledger Info = 10;
}