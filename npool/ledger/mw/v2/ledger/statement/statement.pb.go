// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.18.1
// source: npool/ledger/mw/v2/ledger/statement/statement.proto

package statement

import (
	v1 "github.com/NpoolPlatform/message/npool/basetypes/ledger/v1"
	v11 "github.com/NpoolPlatform/message/npool/basetypes/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StatementReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         *string       `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	AppID      *string       `protobuf:"bytes,20,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	UserID     *string       `protobuf:"bytes,30,opt,name=UserID,proto3,oneof" json:"UserID,omitempty"`
	CoinTypeID *string       `protobuf:"bytes,40,opt,name=CoinTypeID,proto3,oneof" json:"CoinTypeID,omitempty"`
	IOType     *v1.IOType    `protobuf:"varint,50,opt,name=IOType,proto3,enum=basetypes.ledger.v1.IOType,oneof" json:"IOType,omitempty"`
	IOSubType  *v1.IOSubType `protobuf:"varint,60,opt,name=IOSubType,proto3,enum=basetypes.ledger.v1.IOSubType,oneof" json:"IOSubType,omitempty"`
	Amount     *string       `protobuf:"bytes,70,opt,name=Amount,proto3,oneof" json:"Amount,omitempty"`
	// E.g. when pay with non-USDT coin
	FromCoinTypeID  *string `protobuf:"bytes,80,opt,name=FromCoinTypeID,proto3,oneof" json:"FromCoinTypeID,omitempty"`
	CoinUSDCurrency *string `protobuf:"bytes,90,opt,name=CoinUSDCurrency,proto3,oneof" json:"CoinUSDCurrency,omitempty"`
	IOExtra         *string `protobuf:"bytes,100,opt,name=IOExtra,proto3,oneof" json:"IOExtra,omitempty"`
	CreatedAt       *uint32 `protobuf:"varint,110,opt,name=CreatedAt,proto3,oneof" json:"CreatedAt,omitempty"`
	// default true
	ChangeLedger *bool `protobuf:"varint,120,opt,name=ChangeLedger,proto3,oneof" json:"ChangeLedger,omitempty"`
}

func (x *StatementReq) Reset() {
	*x = StatementReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatementReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatementReq) ProtoMessage() {}

func (x *StatementReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatementReq.ProtoReflect.Descriptor instead.
func (*StatementReq) Descriptor() ([]byte, []int) {
	return file_npool_ledger_mw_v2_ledger_statement_statement_proto_rawDescGZIP(), []int{0}
}

func (x *StatementReq) GetID() string {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return ""
}

func (x *StatementReq) GetAppID() string {
	if x != nil && x.AppID != nil {
		return *x.AppID
	}
	return ""
}

func (x *StatementReq) GetUserID() string {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return ""
}

func (x *StatementReq) GetCoinTypeID() string {
	if x != nil && x.CoinTypeID != nil {
		return *x.CoinTypeID
	}
	return ""
}

func (x *StatementReq) GetIOType() v1.IOType {
	if x != nil && x.IOType != nil {
		return *x.IOType
	}
	return v1.IOType(0)
}

func (x *StatementReq) GetIOSubType() v1.IOSubType {
	if x != nil && x.IOSubType != nil {
		return *x.IOSubType
	}
	return v1.IOSubType(0)
}

func (x *StatementReq) GetAmount() string {
	if x != nil && x.Amount != nil {
		return *x.Amount
	}
	return ""
}

func (x *StatementReq) GetFromCoinTypeID() string {
	if x != nil && x.FromCoinTypeID != nil {
		return *x.FromCoinTypeID
	}
	return ""
}

func (x *StatementReq) GetCoinUSDCurrency() string {
	if x != nil && x.CoinUSDCurrency != nil {
		return *x.CoinUSDCurrency
	}
	return ""
}

func (x *StatementReq) GetIOExtra() string {
	if x != nil && x.IOExtra != nil {
		return *x.IOExtra
	}
	return ""
}

func (x *StatementReq) GetCreatedAt() uint32 {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return 0
}

func (x *StatementReq) GetChangeLedger() bool {
	if x != nil && x.ChangeLedger != nil {
		return *x.ChangeLedger
	}
	return false
}

type Statement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: sql:"id"
	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty" sql:"id"`
	// @inject_tag: sql:"app_id"
	AppID string `protobuf:"bytes,20,opt,name=AppID,proto3" json:"AppID,omitempty" sql:"app_id"`
	// @inject_tag: sql:"user_id"
	UserID string `protobuf:"bytes,30,opt,name=UserID,proto3" json:"UserID,omitempty" sql:"user_id"`
	// @inject_tag: sql:"coin_type_id"
	CoinTypeID string `protobuf:"bytes,40,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty" sql:"coin_type_id"`
	// @inject_tag: sql:"io_type"
	IOTypeStr string    `protobuf:"bytes,41,opt,name=IOTypeStr,proto3" json:"IOTypeStr,omitempty" sql:"io_type"`
	IOType    v1.IOType `protobuf:"varint,50,opt,name=IOType,proto3,enum=basetypes.ledger.v1.IOType" json:"IOType,omitempty"`
	// @inject_tag: sql:"io_sub_type"
	IOSubTypeStr string       `protobuf:"bytes,51,opt,name=IOSubTypeStr,proto3" json:"IOSubTypeStr,omitempty" sql:"io_sub_type"`
	IOSubType    v1.IOSubType `protobuf:"varint,60,opt,name=IOSubType,proto3,enum=basetypes.ledger.v1.IOSubType" json:"IOSubType,omitempty"`
	// @inject_tag: sql:"amount"
	Amount string `protobuf:"bytes,70,opt,name=Amount,proto3" json:"Amount,omitempty" sql:"amount"`
	// @inject_tag: sql:"from_coin_type_id"
	FromCoinTypeID string `protobuf:"bytes,80,opt,name=FromCoinTypeID,proto3" json:"FromCoinTypeID,omitempty" sql:"from_coin_type_id"`
	// @inject_tag: sql:"coin_usd_currency"
	CoinUSDCurrency string `protobuf:"bytes,90,opt,name=CoinUSDCurrency,proto3" json:"CoinUSDCurrency,omitempty" sql:"coin_usd_currency"`
	// @inject_tag: sql:"io_extra"
	IOExtra string `protobuf:"bytes,100,opt,name=IOExtra,proto3" json:"IOExtra,omitempty" sql:"io_extra"`
	// @inject_tag: sql:"created_at"
	CreatedAt uint32 `protobuf:"varint,110,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
	// @inject_tag: sql:"updated_at"
	UpdatedAt uint32 `protobuf:"varint,120,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty" sql:"updated_at"`
}

func (x *Statement) Reset() {
	*x = Statement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Statement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Statement) ProtoMessage() {}

func (x *Statement) ProtoReflect() protoreflect.Message {
	mi := &file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Statement.ProtoReflect.Descriptor instead.
func (*Statement) Descriptor() ([]byte, []int) {
	return file_npool_ledger_mw_v2_ledger_statement_statement_proto_rawDescGZIP(), []int{1}
}

func (x *Statement) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Statement) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *Statement) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *Statement) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

func (x *Statement) GetIOTypeStr() string {
	if x != nil {
		return x.IOTypeStr
	}
	return ""
}

func (x *Statement) GetIOType() v1.IOType {
	if x != nil {
		return x.IOType
	}
	return v1.IOType(0)
}

func (x *Statement) GetIOSubTypeStr() string {
	if x != nil {
		return x.IOSubTypeStr
	}
	return ""
}

func (x *Statement) GetIOSubType() v1.IOSubType {
	if x != nil {
		return x.IOSubType
	}
	return v1.IOSubType(0)
}

func (x *Statement) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *Statement) GetFromCoinTypeID() string {
	if x != nil {
		return x.FromCoinTypeID
	}
	return ""
}

func (x *Statement) GetCoinUSDCurrency() string {
	if x != nil {
		return x.CoinUSDCurrency
	}
	return ""
}

func (x *Statement) GetIOExtra() string {
	if x != nil {
		return x.IOExtra
	}
	return ""
}

func (x *Statement) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Statement) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              *v11.StringVal `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	AppID           *v11.StringVal `protobuf:"bytes,20,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	UserID          *v11.StringVal `protobuf:"bytes,30,opt,name=UserID,proto3,oneof" json:"UserID,omitempty"`
	CoinTypeID      *v11.StringVal `protobuf:"bytes,40,opt,name=CoinTypeID,proto3,oneof" json:"CoinTypeID,omitempty"`
	IOType          *v11.Uint32Val `protobuf:"bytes,50,opt,name=IOType,proto3,oneof" json:"IOType,omitempty"`
	IOSubType       *v11.Uint32Val `protobuf:"bytes,60,opt,name=IOSubType,proto3,oneof" json:"IOSubType,omitempty"`
	Amount          *v11.StringVal `protobuf:"bytes,70,opt,name=Amount,proto3,oneof" json:"Amount,omitempty"`
	FromCoinTypeID  *v11.StringVal `protobuf:"bytes,80,opt,name=FromCoinTypeID,proto3,oneof" json:"FromCoinTypeID,omitempty"`
	CoinUSDCurrency *v11.StringVal `protobuf:"bytes,90,opt,name=CoinUSDCurrency,proto3,oneof" json:"CoinUSDCurrency,omitempty"`
	IOExtra         *v11.StringVal `protobuf:"bytes,100,opt,name=IOExtra,proto3,oneof" json:"IOExtra,omitempty"`
	StartAt         *v11.Uint32Val `protobuf:"bytes,110,opt,name=StartAt,proto3,oneof" json:"StartAt,omitempty"`
	EndAt           *v11.Uint32Val `protobuf:"bytes,120,opt,name=EndAt,proto3,oneof" json:"EndAt,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_ledger_mw_v2_ledger_statement_statement_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *v11.StringVal {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetAppID() *v11.StringVal {
	if x != nil {
		return x.AppID
	}
	return nil
}

func (x *Conds) GetUserID() *v11.StringVal {
	if x != nil {
		return x.UserID
	}
	return nil
}

func (x *Conds) GetCoinTypeID() *v11.StringVal {
	if x != nil {
		return x.CoinTypeID
	}
	return nil
}

func (x *Conds) GetIOType() *v11.Uint32Val {
	if x != nil {
		return x.IOType
	}
	return nil
}

func (x *Conds) GetIOSubType() *v11.Uint32Val {
	if x != nil {
		return x.IOSubType
	}
	return nil
}

func (x *Conds) GetAmount() *v11.StringVal {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *Conds) GetFromCoinTypeID() *v11.StringVal {
	if x != nil {
		return x.FromCoinTypeID
	}
	return nil
}

func (x *Conds) GetCoinUSDCurrency() *v11.StringVal {
	if x != nil {
		return x.CoinUSDCurrency
	}
	return nil
}

func (x *Conds) GetIOExtra() *v11.StringVal {
	if x != nil {
		return x.IOExtra
	}
	return nil
}

func (x *Conds) GetStartAt() *v11.Uint32Val {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *Conds) GetEndAt() *v11.Uint32Val {
	if x != nil {
		return x.EndAt
	}
	return nil
}

type GetStatementOnlyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *GetStatementOnlyRequest) Reset() {
	*x = GetStatementOnlyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatementOnlyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatementOnlyRequest) ProtoMessage() {}

func (x *GetStatementOnlyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatementOnlyRequest.ProtoReflect.Descriptor instead.
func (*GetStatementOnlyRequest) Descriptor() ([]byte, []int) {
	return file_npool_ledger_mw_v2_ledger_statement_statement_proto_rawDescGZIP(), []int{3}
}

func (x *GetStatementOnlyRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type GetStatementOnlyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Statement `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetStatementOnlyResponse) Reset() {
	*x = GetStatementOnlyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatementOnlyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatementOnlyResponse) ProtoMessage() {}

func (x *GetStatementOnlyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatementOnlyResponse.ProtoReflect.Descriptor instead.
func (*GetStatementOnlyResponse) Descriptor() ([]byte, []int) {
	return file_npool_ledger_mw_v2_ledger_statement_statement_proto_rawDescGZIP(), []int{4}
}

func (x *GetStatementOnlyResponse) GetInfo() *Statement {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetStatementsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetStatementsRequest) Reset() {
	*x = GetStatementsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatementsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatementsRequest) ProtoMessage() {}

func (x *GetStatementsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatementsRequest.ProtoReflect.Descriptor instead.
func (*GetStatementsRequest) Descriptor() ([]byte, []int) {
	return file_npool_ledger_mw_v2_ledger_statement_statement_proto_rawDescGZIP(), []int{5}
}

func (x *GetStatementsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetStatementsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetStatementsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetStatementsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Statement `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32       `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetStatementsResponse) Reset() {
	*x = GetStatementsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatementsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatementsResponse) ProtoMessage() {}

func (x *GetStatementsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatementsResponse.ProtoReflect.Descriptor instead.
func (*GetStatementsResponse) Descriptor() ([]byte, []int) {
	return file_npool_ledger_mw_v2_ledger_statement_statement_proto_rawDescGZIP(), []int{6}
}

func (x *GetStatementsResponse) GetInfos() []*Statement {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetStatementsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetStatementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetStatementRequest) Reset() {
	*x = GetStatementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatementRequest) ProtoMessage() {}

func (x *GetStatementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatementRequest.ProtoReflect.Descriptor instead.
func (*GetStatementRequest) Descriptor() ([]byte, []int) {
	return file_npool_ledger_mw_v2_ledger_statement_statement_proto_rawDescGZIP(), []int{7}
}

func (x *GetStatementRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetStatementResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Statement `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetStatementResponse) Reset() {
	*x = GetStatementResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatementResponse) ProtoMessage() {}

func (x *GetStatementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatementResponse.ProtoReflect.Descriptor instead.
func (*GetStatementResponse) Descriptor() ([]byte, []int) {
	return file_npool_ledger_mw_v2_ledger_statement_statement_proto_rawDescGZIP(), []int{8}
}

func (x *GetStatementResponse) GetInfo() *Statement {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateStatementsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*StatementReq `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateStatementsRequest) Reset() {
	*x = CreateStatementsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateStatementsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStatementsRequest) ProtoMessage() {}

func (x *CreateStatementsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStatementsRequest.ProtoReflect.Descriptor instead.
func (*CreateStatementsRequest) Descriptor() ([]byte, []int) {
	return file_npool_ledger_mw_v2_ledger_statement_statement_proto_rawDescGZIP(), []int{9}
}

func (x *CreateStatementsRequest) GetInfos() []*StatementReq {
	if x != nil {
		return x.Infos
	}
	return nil
}

type CreateStatementsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Statement `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateStatementsResponse) Reset() {
	*x = CreateStatementsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateStatementsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStatementsResponse) ProtoMessage() {}

func (x *CreateStatementsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStatementsResponse.ProtoReflect.Descriptor instead.
func (*CreateStatementsResponse) Descriptor() ([]byte, []int) {
	return file_npool_ledger_mw_v2_ledger_statement_statement_proto_rawDescGZIP(), []int{10}
}

func (x *CreateStatementsResponse) GetInfos() []*Statement {
	if x != nil {
		return x.Infos
	}
	return nil
}

type UnCreateStatementsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*StatementReq `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *UnCreateStatementsRequest) Reset() {
	*x = UnCreateStatementsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnCreateStatementsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnCreateStatementsRequest) ProtoMessage() {}

func (x *UnCreateStatementsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnCreateStatementsRequest.ProtoReflect.Descriptor instead.
func (*UnCreateStatementsRequest) Descriptor() ([]byte, []int) {
	return file_npool_ledger_mw_v2_ledger_statement_statement_proto_rawDescGZIP(), []int{11}
}

func (x *UnCreateStatementsRequest) GetInfos() []*StatementReq {
	if x != nil {
		return x.Infos
	}
	return nil
}

type UnCreateStatementsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Statement `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *UnCreateStatementsResponse) Reset() {
	*x = UnCreateStatementsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnCreateStatementsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnCreateStatementsResponse) ProtoMessage() {}

func (x *UnCreateStatementsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnCreateStatementsResponse.ProtoReflect.Descriptor instead.
func (*UnCreateStatementsResponse) Descriptor() ([]byte, []int) {
	return file_npool_ledger_mw_v2_ledger_statement_statement_proto_rawDescGZIP(), []int{12}
}

func (x *UnCreateStatementsResponse) GetInfos() []*Statement {
	if x != nil {
		return x.Infos
	}
	return nil
}

type CreateStatementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *StatementReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateStatementRequest) Reset() {
	*x = CreateStatementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateStatementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStatementRequest) ProtoMessage() {}

func (x *CreateStatementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStatementRequest.ProtoReflect.Descriptor instead.
func (*CreateStatementRequest) Descriptor() ([]byte, []int) {
	return file_npool_ledger_mw_v2_ledger_statement_statement_proto_rawDescGZIP(), []int{13}
}

func (x *CreateStatementRequest) GetInfo() *StatementReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateStatementResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Statement `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateStatementResponse) Reset() {
	*x = CreateStatementResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateStatementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStatementResponse) ProtoMessage() {}

func (x *CreateStatementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStatementResponse.ProtoReflect.Descriptor instead.
func (*CreateStatementResponse) Descriptor() ([]byte, []int) {
	return file_npool_ledger_mw_v2_ledger_statement_statement_proto_rawDescGZIP(), []int{14}
}

func (x *CreateStatementResponse) GetInfo() *Statement {
	if x != nil {
		return x.Info
	}
	return nil
}

type UnCreateStatementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *StatementReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UnCreateStatementRequest) Reset() {
	*x = UnCreateStatementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnCreateStatementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnCreateStatementRequest) ProtoMessage() {}

func (x *UnCreateStatementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnCreateStatementRequest.ProtoReflect.Descriptor instead.
func (*UnCreateStatementRequest) Descriptor() ([]byte, []int) {
	return file_npool_ledger_mw_v2_ledger_statement_statement_proto_rawDescGZIP(), []int{15}
}

func (x *UnCreateStatementRequest) GetInfo() *StatementReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UnCreateStatementResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Statement `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UnCreateStatementResponse) Reset() {
	*x = UnCreateStatementResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnCreateStatementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnCreateStatementResponse) ProtoMessage() {}

func (x *UnCreateStatementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnCreateStatementResponse.ProtoReflect.Descriptor instead.
func (*UnCreateStatementResponse) Descriptor() ([]byte, []int) {
	return file_npool_ledger_mw_v2_ledger_statement_statement_proto_rawDescGZIP(), []int{16}
}

func (x *UnCreateStatementResponse) GetInfo() *Statement {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_ledger_mw_v2_ledger_statement_statement_proto protoreflect.FileDescriptor

var file_npool_ledger_mw_v2_ledger_statement_statement_proto_rawDesc = []byte{
	0x0a, 0x33, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x6d,
	0x77, 0x2f, 0x76, 0x32, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x25, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x1a, 0x1e, 0x6e, 0x70,
	0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x6e, 0x70,
	0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x82, 0x05, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x23, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x06, 0x49, 0x4f, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x4f, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x04, 0x52, 0x06, 0x49, 0x4f, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x41, 0x0a, 0x09, 0x49, 0x4f, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x3c, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x4f, 0x53, 0x75, 0x62, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x05, 0x52, 0x09, 0x49, 0x4f, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x46, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x2b, 0x0a, 0x0e, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x44, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0e, 0x46, 0x72, 0x6f, 0x6d,
	0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a,
	0x0f, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x53, 0x44, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0f, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x53,
	0x44, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07,
	0x49, 0x4f, 0x45, 0x78, 0x74, 0x72, 0x61, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52,
	0x07, 0x49, 0x4f, 0x45, 0x78, 0x74, 0x72, 0x61, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0a,
	0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x27,
	0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x18, 0x78,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x0b, 0x52, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x41, 0x70, 0x70, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x49, 0x4f, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x49, 0x4f, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x46, 0x72, 0x6f, 0x6d, 0x43,
	0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x43, 0x6f,
	0x69, 0x6e, 0x55, 0x53, 0x44, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x49, 0x4f, 0x45, 0x78, 0x74, 0x72, 0x61, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x22, 0xde, 0x03, 0x0a, 0x09, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x4f, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74,
	0x72, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x4f, 0x54, 0x79, 0x70, 0x65, 0x53,
	0x74, 0x72, 0x12, 0x33, 0x0a, 0x06, 0x49, 0x4f, 0x54, 0x79, 0x70, 0x65, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x4f, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x06, 0x49, 0x4f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x4f, 0x53, 0x75, 0x62,
	0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x49,
	0x4f, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x12, 0x3c, 0x0a, 0x09, 0x49,
	0x4f, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x4f, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x49, 0x4f, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x44, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x46, 0x72, 0x6f, 0x6d, 0x43,
	0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x69,
	0x6e, 0x55, 0x53, 0x44, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x5a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x53, 0x44, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x4f, 0x45, 0x78, 0x74, 0x72, 0x61, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x49, 0x4f, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x1c, 0x0a,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xcf, 0x06, 0x0a, 0x05, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x32, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x05, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x02,
	0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0a, 0x43,
	0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x06, 0x49, 0x4f, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x48, 0x04, 0x52, 0x06, 0x49, 0x4f, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x3a, 0x0a, 0x09, 0x49, 0x4f, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x18, 0x3c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x05, 0x52, 0x09, 0x49,
	0x4f, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x06, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x48, 0x06, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x44, 0x0a, 0x0e, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x44, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x48, 0x07, 0x52, 0x0e, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0f, 0x43, 0x6f, 0x69, 0x6e, 0x55,
	0x53, 0x44, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x08, 0x52, 0x0f, 0x43, 0x6f, 0x69,
	0x6e, 0x55, 0x53, 0x44, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x36, 0x0a, 0x07, 0x49, 0x4f, 0x45, 0x78, 0x74, 0x72, 0x61, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x09, 0x52, 0x07, 0x49, 0x4f, 0x45,
	0x78, 0x74, 0x72, 0x61, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x48, 0x0a, 0x52, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x32, 0x0a, 0x05, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x0b, 0x52, 0x05, 0x45, 0x6e, 0x64, 0x41, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x49, 0x4f, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x49, 0x4f,
	0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x44, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x53,
	0x44, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x49, 0x4f,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x22, 0x5d, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x60, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x88, 0x01, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x75, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x46, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x25,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x5c, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x64, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49,
	0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x62, 0x0a, 0x18, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x66, 0x0a,
	0x19, 0x55, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x05, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x32, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x52, 0x05,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x64, 0x0a, 0x1a, 0x55, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x61, 0x0a, 0x16, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5f,
	0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x63, 0x0a, 0x18, 0x55, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x32, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x61, 0x0a, 0x19, 0x55, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x44, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0xa5, 0x08, 0x0a, 0x0a, 0x4d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x12, 0x95, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x3e, 0x2e, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8c,
	0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x3b, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x89, 0x01,
	0x0a, 0x0c, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3a,
	0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x95, 0x01, 0x0a, 0x10, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3e,
	0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f,
	0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x9b, 0x01, 0x0a, 0x12, 0x55, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x40, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32,
	0x2e, 0x55, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x55, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x92, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x3d, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x98, 0x01, 0x0a, 0x11, 0x55, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3f, 0x2e, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x32, 0x2e, 0x55, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x32, 0x2e, 0x55, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x46, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70,
	0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x32, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_ledger_mw_v2_ledger_statement_statement_proto_rawDescOnce sync.Once
	file_npool_ledger_mw_v2_ledger_statement_statement_proto_rawDescData = file_npool_ledger_mw_v2_ledger_statement_statement_proto_rawDesc
)

func file_npool_ledger_mw_v2_ledger_statement_statement_proto_rawDescGZIP() []byte {
	file_npool_ledger_mw_v2_ledger_statement_statement_proto_rawDescOnce.Do(func() {
		file_npool_ledger_mw_v2_ledger_statement_statement_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_ledger_mw_v2_ledger_statement_statement_proto_rawDescData)
	})
	return file_npool_ledger_mw_v2_ledger_statement_statement_proto_rawDescData
}

var file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_npool_ledger_mw_v2_ledger_statement_statement_proto_goTypes = []interface{}{
	(*StatementReq)(nil),               // 0: ledger.middleware.ledger.statement.v2.StatementReq
	(*Statement)(nil),                  // 1: ledger.middleware.ledger.statement.v2.Statement
	(*Conds)(nil),                      // 2: ledger.middleware.ledger.statement.v2.Conds
	(*GetStatementOnlyRequest)(nil),    // 3: ledger.middleware.ledger.statement.v2.GetStatementOnlyRequest
	(*GetStatementOnlyResponse)(nil),   // 4: ledger.middleware.ledger.statement.v2.GetStatementOnlyResponse
	(*GetStatementsRequest)(nil),       // 5: ledger.middleware.ledger.statement.v2.GetStatementsRequest
	(*GetStatementsResponse)(nil),      // 6: ledger.middleware.ledger.statement.v2.GetStatementsResponse
	(*GetStatementRequest)(nil),        // 7: ledger.middleware.ledger.statement.v2.GetStatementRequest
	(*GetStatementResponse)(nil),       // 8: ledger.middleware.ledger.statement.v2.GetStatementResponse
	(*CreateStatementsRequest)(nil),    // 9: ledger.middleware.ledger.statement.v2.CreateStatementsRequest
	(*CreateStatementsResponse)(nil),   // 10: ledger.middleware.ledger.statement.v2.CreateStatementsResponse
	(*UnCreateStatementsRequest)(nil),  // 11: ledger.middleware.ledger.statement.v2.UnCreateStatementsRequest
	(*UnCreateStatementsResponse)(nil), // 12: ledger.middleware.ledger.statement.v2.UnCreateStatementsResponse
	(*CreateStatementRequest)(nil),     // 13: ledger.middleware.ledger.statement.v2.CreateStatementRequest
	(*CreateStatementResponse)(nil),    // 14: ledger.middleware.ledger.statement.v2.CreateStatementResponse
	(*UnCreateStatementRequest)(nil),   // 15: ledger.middleware.ledger.statement.v2.UnCreateStatementRequest
	(*UnCreateStatementResponse)(nil),  // 16: ledger.middleware.ledger.statement.v2.UnCreateStatementResponse
	(v1.IOType)(0),                     // 17: basetypes.ledger.v1.IOType
	(v1.IOSubType)(0),                  // 18: basetypes.ledger.v1.IOSubType
	(*v11.StringVal)(nil),              // 19: basetypes.v1.StringVal
	(*v11.Uint32Val)(nil),              // 20: basetypes.v1.Uint32Val
}
var file_npool_ledger_mw_v2_ledger_statement_statement_proto_depIdxs = []int32{
	17, // 0: ledger.middleware.ledger.statement.v2.StatementReq.IOType:type_name -> basetypes.ledger.v1.IOType
	18, // 1: ledger.middleware.ledger.statement.v2.StatementReq.IOSubType:type_name -> basetypes.ledger.v1.IOSubType
	17, // 2: ledger.middleware.ledger.statement.v2.Statement.IOType:type_name -> basetypes.ledger.v1.IOType
	18, // 3: ledger.middleware.ledger.statement.v2.Statement.IOSubType:type_name -> basetypes.ledger.v1.IOSubType
	19, // 4: ledger.middleware.ledger.statement.v2.Conds.ID:type_name -> basetypes.v1.StringVal
	19, // 5: ledger.middleware.ledger.statement.v2.Conds.AppID:type_name -> basetypes.v1.StringVal
	19, // 6: ledger.middleware.ledger.statement.v2.Conds.UserID:type_name -> basetypes.v1.StringVal
	19, // 7: ledger.middleware.ledger.statement.v2.Conds.CoinTypeID:type_name -> basetypes.v1.StringVal
	20, // 8: ledger.middleware.ledger.statement.v2.Conds.IOType:type_name -> basetypes.v1.Uint32Val
	20, // 9: ledger.middleware.ledger.statement.v2.Conds.IOSubType:type_name -> basetypes.v1.Uint32Val
	19, // 10: ledger.middleware.ledger.statement.v2.Conds.Amount:type_name -> basetypes.v1.StringVal
	19, // 11: ledger.middleware.ledger.statement.v2.Conds.FromCoinTypeID:type_name -> basetypes.v1.StringVal
	19, // 12: ledger.middleware.ledger.statement.v2.Conds.CoinUSDCurrency:type_name -> basetypes.v1.StringVal
	19, // 13: ledger.middleware.ledger.statement.v2.Conds.IOExtra:type_name -> basetypes.v1.StringVal
	20, // 14: ledger.middleware.ledger.statement.v2.Conds.StartAt:type_name -> basetypes.v1.Uint32Val
	20, // 15: ledger.middleware.ledger.statement.v2.Conds.EndAt:type_name -> basetypes.v1.Uint32Val
	2,  // 16: ledger.middleware.ledger.statement.v2.GetStatementOnlyRequest.Conds:type_name -> ledger.middleware.ledger.statement.v2.Conds
	1,  // 17: ledger.middleware.ledger.statement.v2.GetStatementOnlyResponse.Info:type_name -> ledger.middleware.ledger.statement.v2.Statement
	2,  // 18: ledger.middleware.ledger.statement.v2.GetStatementsRequest.Conds:type_name -> ledger.middleware.ledger.statement.v2.Conds
	1,  // 19: ledger.middleware.ledger.statement.v2.GetStatementsResponse.Infos:type_name -> ledger.middleware.ledger.statement.v2.Statement
	1,  // 20: ledger.middleware.ledger.statement.v2.GetStatementResponse.Info:type_name -> ledger.middleware.ledger.statement.v2.Statement
	0,  // 21: ledger.middleware.ledger.statement.v2.CreateStatementsRequest.Infos:type_name -> ledger.middleware.ledger.statement.v2.StatementReq
	1,  // 22: ledger.middleware.ledger.statement.v2.CreateStatementsResponse.Infos:type_name -> ledger.middleware.ledger.statement.v2.Statement
	0,  // 23: ledger.middleware.ledger.statement.v2.UnCreateStatementsRequest.Infos:type_name -> ledger.middleware.ledger.statement.v2.StatementReq
	1,  // 24: ledger.middleware.ledger.statement.v2.UnCreateStatementsResponse.Infos:type_name -> ledger.middleware.ledger.statement.v2.Statement
	0,  // 25: ledger.middleware.ledger.statement.v2.CreateStatementRequest.Info:type_name -> ledger.middleware.ledger.statement.v2.StatementReq
	1,  // 26: ledger.middleware.ledger.statement.v2.CreateStatementResponse.Info:type_name -> ledger.middleware.ledger.statement.v2.Statement
	0,  // 27: ledger.middleware.ledger.statement.v2.UnCreateStatementRequest.Info:type_name -> ledger.middleware.ledger.statement.v2.StatementReq
	1,  // 28: ledger.middleware.ledger.statement.v2.UnCreateStatementResponse.Info:type_name -> ledger.middleware.ledger.statement.v2.Statement
	3,  // 29: ledger.middleware.ledger.statement.v2.Middleware.GetStatementOnly:input_type -> ledger.middleware.ledger.statement.v2.GetStatementOnlyRequest
	5,  // 30: ledger.middleware.ledger.statement.v2.Middleware.GetStatements:input_type -> ledger.middleware.ledger.statement.v2.GetStatementsRequest
	7,  // 31: ledger.middleware.ledger.statement.v2.Middleware.GetStatement:input_type -> ledger.middleware.ledger.statement.v2.GetStatementRequest
	9,  // 32: ledger.middleware.ledger.statement.v2.Middleware.CreateStatements:input_type -> ledger.middleware.ledger.statement.v2.CreateStatementsRequest
	11, // 33: ledger.middleware.ledger.statement.v2.Middleware.UnCreateStatements:input_type -> ledger.middleware.ledger.statement.v2.UnCreateStatementsRequest
	13, // 34: ledger.middleware.ledger.statement.v2.Middleware.CreateStatement:input_type -> ledger.middleware.ledger.statement.v2.CreateStatementRequest
	15, // 35: ledger.middleware.ledger.statement.v2.Middleware.UnCreateStatement:input_type -> ledger.middleware.ledger.statement.v2.UnCreateStatementRequest
	4,  // 36: ledger.middleware.ledger.statement.v2.Middleware.GetStatementOnly:output_type -> ledger.middleware.ledger.statement.v2.GetStatementOnlyResponse
	6,  // 37: ledger.middleware.ledger.statement.v2.Middleware.GetStatements:output_type -> ledger.middleware.ledger.statement.v2.GetStatementsResponse
	8,  // 38: ledger.middleware.ledger.statement.v2.Middleware.GetStatement:output_type -> ledger.middleware.ledger.statement.v2.GetStatementResponse
	10, // 39: ledger.middleware.ledger.statement.v2.Middleware.CreateStatements:output_type -> ledger.middleware.ledger.statement.v2.CreateStatementsResponse
	12, // 40: ledger.middleware.ledger.statement.v2.Middleware.UnCreateStatements:output_type -> ledger.middleware.ledger.statement.v2.UnCreateStatementsResponse
	14, // 41: ledger.middleware.ledger.statement.v2.Middleware.CreateStatement:output_type -> ledger.middleware.ledger.statement.v2.CreateStatementResponse
	16, // 42: ledger.middleware.ledger.statement.v2.Middleware.UnCreateStatement:output_type -> ledger.middleware.ledger.statement.v2.UnCreateStatementResponse
	36, // [36:43] is the sub-list for method output_type
	29, // [29:36] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_npool_ledger_mw_v2_ledger_statement_statement_proto_init() }
func file_npool_ledger_mw_v2_ledger_statement_statement_proto_init() {
	if File_npool_ledger_mw_v2_ledger_statement_statement_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatementReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Statement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatementOnlyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatementOnlyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatementsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatementsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatementResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateStatementsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateStatementsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnCreateStatementsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnCreateStatementsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateStatementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateStatementResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnCreateStatementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnCreateStatementResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_ledger_mw_v2_ledger_statement_statement_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_ledger_mw_v2_ledger_statement_statement_proto_goTypes,
		DependencyIndexes: file_npool_ledger_mw_v2_ledger_statement_statement_proto_depIdxs,
		MessageInfos:      file_npool_ledger_mw_v2_ledger_statement_statement_proto_msgTypes,
	}.Build()
	File_npool_ledger_mw_v2_ledger_statement_statement_proto = out.File
	file_npool_ledger_mw_v2_ledger_statement_statement_proto_rawDesc = nil
	file_npool_ledger_mw_v2_ledger_statement_statement_proto_goTypes = nil
	file_npool_ledger_mw_v2_ledger_statement_statement_proto_depIdxs = nil
}
