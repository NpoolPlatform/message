syntax = "proto3";

package ledger.middleware.ledger.v2;

option go_package = "github.com/NpoolPlatform/message/npool/ledger/mw/v2/ledger";

import "npool/basetypes/v1/conds.proto";
import "npool/basetypes/ledger/v1/enums.proto";

// Service Name
service Middleware {
    rpc GetLedger        (GetLedgerRequest)        returns (GetLedgerResponse)        {}
    rpc GetLedgerOnly    (GetLedgerOnlyRequest)    returns (GetLedgerOnlyResponse)    {}
    rpc GetLedgers       (GetLedgersRequest)       returns (GetLedgersResponse)       {}
    rpc AddBalance       (AddBalanceRequest)       returns (AddBalanceResponse)      {}
    rpc SubBalance       (SubBalanceRequest)       returns (SubBalanceResponse)    {}
}

message LedgerReq {
    optional string ID         = 10;
    optional string AppID      = 20;
    optional string UserID     = 30;
    optional string CoinTypeID = 40;
    optional string Incoming   = 50;
    optional string Locked     = 60;
    optional string Outcoming  = 70;
    optional string Spendable  = 80;
}

message Ledger {
    // @inject_tag: sql:"id"
    string      ID                             = 10;
    // @inject_tag: sql:"app_id"
    string      AppID                          = 20;
    // @inject_tag: sql:"user_id"
    string      UserID                         = 30;
    // @inject_tag: sql:"coin_type_id"
    string      CoinTypeID                     = 40;
    // @inject_tag: sql:"incoming"
    string      Incoming                       = 50;
    // @inject_tag: sql:"outcoming"
    string      Outcoming                      = 60;
    // @inject_tag: sql:"locked"
    string      Locked                         = 70;
    // @inject_tag: sql:"spendable"
    string      Spendable                      = 80;
    // @inject_tag: sql:"created_at"
    uint32      CreatedAt                      = 90;
    // @inject_tag: sql:"updated_at"
    uint32      UpdatedAt                      = 100;
}

message Conds {
    optional basetypes.v1.StringVal ID          = 10;
    optional basetypes.v1.StringVal AppID       = 20;
    optional basetypes.v1.StringVal UserID      = 30;
    optional basetypes.v1.StringVal CoinTypeID  = 40;
    optional basetypes.v1.StringVal Incoming    = 50;
    optional basetypes.v1.StringVal Locked      = 60;
    optional basetypes.v1.StringVal Outcoming   = 70;
    optional basetypes.v1.StringVal Spendable   = 80;
    optional basetypes.v1.StringSliceVal CoinTypeIDs = 90;
}


message GetLedgerRequest {
    string ID = 10;
}

message GetLedgerResponse {
    Ledger Info = 10;
}

message GetLedgersRequest {
    Conds Conds     = 10;
    int32 Offset    = 20;
    int32 Limit     = 30;
}

message GetLedgersResponse {
    repeated Ledger Infos = 10;
    uint32           Total = 20;
}

message GetLedgerOnlyRequest {
    Conds Conds = 10;
}

message GetLedgerOnlyResponse {
    Ledger Info = 10;
}

message BalanceReq {
    optional string          ID          = 10;
    optional string          AppID       = 20;
    optional string          UserID      = 30;
    optional string          CoinTypeID  = 40;
    // Add
    optional string          Amount      = 50;
    // Sub
    optional basetypes.ledger.v1.IOSubType       IOSubType   = 60;
    optional string          Unlocked    = 70;
    optional string          Outcoming   = 80;
    optional string          IOExtra     = 90;
}

message AddBalanceRequest {
    BalanceReq Info = 10;
}

message AddBalanceResponse {
    .ledger.middleware.ledger.v2.Ledger Info = 10;
}

message SubBalanceRequest {
    BalanceReq Info = 10;
}

message SubBalanceResponse {
    .ledger.middleware.ledger.v2.Ledger Info = 10;
}
