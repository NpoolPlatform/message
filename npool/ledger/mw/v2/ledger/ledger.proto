syntax = "proto3";

package ledger.middleware.ledger.v2;

option go_package = "github.com/NpoolPlatform/message/npool/ledger/mw/v2/ledger";

import "google/api/annotations.proto";
import "npool/basetypes/v1/conds.proto";
import "npool/basetypes/ledger/v1/enums.proto";

// Service Name
service Middleware {
  rpc GetLedger(GetLedgerRequest) returns (GetLedgerResponse) {
    option (google.api.http) = {
      post : "/v1/ledger_GetLedger"
      body : "*"
    };
  }
  rpc GetLedgers(GetLedgersRequest) returns (GetLedgersResponse) {
    option (google.api.http) = {
      post : "/v1/ledger_GetLedgers"
      body : "*"
    };
  }
  rpc LockBalance(LockBalanceRequest) returns (LockBalanceResponse) {
    option (google.api.http) = {
      post : "/v1/ledger_LockBalance"
      body : "*"
    };
  }
  rpc UnlockBalance(UnlockBalanceRequest) returns (UnlockBalanceResponse) {
    option (google.api.http) = {
      post : "/v1/ledger_UnlockBalance"
      body : "*"
    };
  }
  rpc SettleBalance(SettleBalanceRequest) returns (SettleBalanceResponse) {
    option (google.api.http) = {
      post : "/v1/ledger_SettleBalance"
      body : "*"
    };
  }
  rpc LockBalances(LockBalancesRequest) returns (LockBalancesResponse) {
    option (google.api.http) = {
      post : "/v1/ledger_LockBalances"
      body : "*"
    };
  }
  rpc UnlockBalances(UnlockBalancesRequest) returns (UnlockBalancesResponse) {
    option (google.api.http) = {
      post : "/v1/ledger_UnlockBalances"
      body : "*"
    };
  }
  rpc SettleBalances(SettleBalancesRequest) returns (SettleBalancesResponse) {
    option (google.api.http) = {
      post : "/v1/ledger_SettleBalances"
      body : "*"
    };
  }
}

message Ledger {
  // @inject_tag: sql:"id"
  uint32 ID = 9;
  // @inject_tag: sql:"ent_id"
  string EntID = 10;
  // @inject_tag: sql:"app_id"
  string AppID = 20;
  // @inject_tag: sql:"user_id"
  string UserID = 30;
  // @inject_tag: sql:"coin_type_id"
  string CoinTypeID = 40;
  // @inject_tag: sql:"incoming"
  string Incoming = 50;
  // @inject_tag: sql:"outcoming"
  string Outcoming = 60;
  // @inject_tag: sql:"locked"
  string Locked = 70;
  // @inject_tag: sql:"spendable"
  string Spendable = 80;
  // @inject_tag: sql:"created_at"
  uint32 CreatedAt = 90;
  // @inject_tag: sql:"updated_at"
  uint32 UpdatedAt = 100;
}

message Conds {
  optional basetypes.v1.StringVal EntID = 10;
  optional basetypes.v1.StringVal AppID = 20;
  optional basetypes.v1.StringVal UserID = 30;
  optional basetypes.v1.StringVal CoinTypeID = 40;
  optional basetypes.v1.StringSliceVal CoinTypeIDs = 90;
}

message GetLedgerRequest { string EntID = 10; }

message GetLedgerResponse { Ledger Info = 10; }

message GetLedgersRequest {
  Conds Conds = 10;
  int32 Offset = 20;
  int32 Limit = 30;
}

message GetLedgersResponse {
  repeated Ledger Infos = 10;
  uint32 Total = 20;
}

message LockBalanceRequest {
  string AppID = 10;
  string UserID = 20;
  string CoinTypeID = 30;
  string Amount = 40;

  // Must same as unlock
  string LockID = 1000;
  bool Rollback = 1010;
}

message LockBalanceResponse { Ledger Info = 10; }

message UnlockBalanceRequest {
  // Must same as unlock
  string LockID = 1000;
  bool Rollback = 1010;
}

message UnlockBalanceResponse { Ledger Info = 10; }

message SettleBalanceRequest {
  string LockID = 10;
  basetypes.ledger.v1.IOSubType IOSubType = 20;
  string IOExtra = 30;
  string StatementID = 40;
}

message SettleBalanceResponse { Ledger Info = 10; }

message LockBalancesRequest {
  string AppID = 10;
  string UserID = 20;
  string LockID = 30;
  bool Rollback = 40;

  message _Balance {
    string CoinTypeID = 10;
    string Amount = 20;
  }
  repeated _Balance Balances = 50;
}

message LockBalancesResponse { repeated Ledger Infos = 10; }

message UnlockBalancesRequest {
  string LockID = 10;
  bool Rollback = 20;
}

message UnlockBalancesResponse { repeated Ledger Infos = 10; }

message SettleBalancesRequest {
  string LockID = 10;
  basetypes.ledger.v1.IOSubType IOSubType = 20;
  // Same count statement ids as balances
  message Statement {
    string StatementID = 10;
    string IOExtra = 20;
  }
  repeated Statement Statements = 30;
}

message SettleBalancesResponse { repeated Ledger Infos = 10; }
