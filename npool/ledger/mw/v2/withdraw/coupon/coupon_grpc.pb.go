// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/ledger/mw/v2/withdraw/coupon/coupon.proto

package coupon

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Middleware_CreateCouponWithdraw_FullMethodName = "/ledger.middleware.withdraw.coupon.v2.Middleware/CreateCouponWithdraw"
	Middleware_UpdateCouponWithdraw_FullMethodName = "/ledger.middleware.withdraw.coupon.v2.Middleware/UpdateCouponWithdraw"
	Middleware_DeleteCouponWithdraw_FullMethodName = "/ledger.middleware.withdraw.coupon.v2.Middleware/DeleteCouponWithdraw"
	Middleware_GetCouponWithdraw_FullMethodName    = "/ledger.middleware.withdraw.coupon.v2.Middleware/GetCouponWithdraw"
	Middleware_GetCouponWithdraws_FullMethodName   = "/ledger.middleware.withdraw.coupon.v2.Middleware/GetCouponWithdraws"
)

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
	CreateCouponWithdraw(ctx context.Context, in *CreateCouponWithdrawRequest, opts ...grpc.CallOption) (*CreateCouponWithdrawResponse, error)
	UpdateCouponWithdraw(ctx context.Context, in *UpdateCouponWithdrawRequest, opts ...grpc.CallOption) (*UpdateCouponWithdrawResponse, error)
	DeleteCouponWithdraw(ctx context.Context, in *DeleteCouponWithdrawRequest, opts ...grpc.CallOption) (*DeleteCouponWithdrawResponse, error)
	GetCouponWithdraw(ctx context.Context, in *GetCouponWithdrawRequest, opts ...grpc.CallOption) (*GetCouponWithdrawResponse, error)
	GetCouponWithdraws(ctx context.Context, in *GetCouponWithdrawsRequest, opts ...grpc.CallOption) (*GetCouponWithdrawsResponse, error)
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) CreateCouponWithdraw(ctx context.Context, in *CreateCouponWithdrawRequest, opts ...grpc.CallOption) (*CreateCouponWithdrawResponse, error) {
	out := new(CreateCouponWithdrawResponse)
	err := c.cc.Invoke(ctx, Middleware_CreateCouponWithdraw_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) UpdateCouponWithdraw(ctx context.Context, in *UpdateCouponWithdrawRequest, opts ...grpc.CallOption) (*UpdateCouponWithdrawResponse, error) {
	out := new(UpdateCouponWithdrawResponse)
	err := c.cc.Invoke(ctx, Middleware_UpdateCouponWithdraw_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) DeleteCouponWithdraw(ctx context.Context, in *DeleteCouponWithdrawRequest, opts ...grpc.CallOption) (*DeleteCouponWithdrawResponse, error) {
	out := new(DeleteCouponWithdrawResponse)
	err := c.cc.Invoke(ctx, Middleware_DeleteCouponWithdraw_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetCouponWithdraw(ctx context.Context, in *GetCouponWithdrawRequest, opts ...grpc.CallOption) (*GetCouponWithdrawResponse, error) {
	out := new(GetCouponWithdrawResponse)
	err := c.cc.Invoke(ctx, Middleware_GetCouponWithdraw_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetCouponWithdraws(ctx context.Context, in *GetCouponWithdrawsRequest, opts ...grpc.CallOption) (*GetCouponWithdrawsResponse, error) {
	out := new(GetCouponWithdrawsResponse)
	err := c.cc.Invoke(ctx, Middleware_GetCouponWithdraws_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
	CreateCouponWithdraw(context.Context, *CreateCouponWithdrawRequest) (*CreateCouponWithdrawResponse, error)
	UpdateCouponWithdraw(context.Context, *UpdateCouponWithdrawRequest) (*UpdateCouponWithdrawResponse, error)
	DeleteCouponWithdraw(context.Context, *DeleteCouponWithdrawRequest) (*DeleteCouponWithdrawResponse, error)
	GetCouponWithdraw(context.Context, *GetCouponWithdrawRequest) (*GetCouponWithdrawResponse, error)
	GetCouponWithdraws(context.Context, *GetCouponWithdrawsRequest) (*GetCouponWithdrawsResponse, error)
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) CreateCouponWithdraw(context.Context, *CreateCouponWithdrawRequest) (*CreateCouponWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCouponWithdraw not implemented")
}
func (UnimplementedMiddlewareServer) UpdateCouponWithdraw(context.Context, *UpdateCouponWithdrawRequest) (*UpdateCouponWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCouponWithdraw not implemented")
}
func (UnimplementedMiddlewareServer) DeleteCouponWithdraw(context.Context, *DeleteCouponWithdrawRequest) (*DeleteCouponWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCouponWithdraw not implemented")
}
func (UnimplementedMiddlewareServer) GetCouponWithdraw(context.Context, *GetCouponWithdrawRequest) (*GetCouponWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCouponWithdraw not implemented")
}
func (UnimplementedMiddlewareServer) GetCouponWithdraws(context.Context, *GetCouponWithdrawsRequest) (*GetCouponWithdrawsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCouponWithdraws not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_CreateCouponWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCouponWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateCouponWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_CreateCouponWithdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateCouponWithdraw(ctx, req.(*CreateCouponWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_UpdateCouponWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCouponWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).UpdateCouponWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_UpdateCouponWithdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).UpdateCouponWithdraw(ctx, req.(*UpdateCouponWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_DeleteCouponWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCouponWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).DeleteCouponWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_DeleteCouponWithdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).DeleteCouponWithdraw(ctx, req.(*DeleteCouponWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetCouponWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCouponWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetCouponWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetCouponWithdraw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetCouponWithdraw(ctx, req.(*GetCouponWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetCouponWithdraws_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCouponWithdrawsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetCouponWithdraws(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetCouponWithdraws_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetCouponWithdraws(ctx, req.(*GetCouponWithdrawsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ledger.middleware.withdraw.coupon.v2.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCouponWithdraw",
			Handler:    _Middleware_CreateCouponWithdraw_Handler,
		},
		{
			MethodName: "UpdateCouponWithdraw",
			Handler:    _Middleware_UpdateCouponWithdraw_Handler,
		},
		{
			MethodName: "DeleteCouponWithdraw",
			Handler:    _Middleware_DeleteCouponWithdraw_Handler,
		},
		{
			MethodName: "GetCouponWithdraw",
			Handler:    _Middleware_GetCouponWithdraw_Handler,
		},
		{
			MethodName: "GetCouponWithdraws",
			Handler:    _Middleware_GetCouponWithdraws_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/ledger/mw/v2/withdraw/coupon/coupon.proto",
}
