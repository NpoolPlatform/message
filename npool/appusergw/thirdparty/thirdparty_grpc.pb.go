// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/appusergw/thirdparty/thirdparty.proto

package thirdparty

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppUserGatewayThirdPartyClient is the client API for AppUserGatewayThirdParty service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppUserGatewayThirdPartyClient interface {
	CreateThirdParty(ctx context.Context, in *CreateThirdPartyRequest, opts ...grpc.CallOption) (*CreateThirdPartyResponse, error)
}

type appUserGatewayThirdPartyClient struct {
	cc grpc.ClientConnInterface
}

func NewAppUserGatewayThirdPartyClient(cc grpc.ClientConnInterface) AppUserGatewayThirdPartyClient {
	return &appUserGatewayThirdPartyClient{cc}
}

func (c *appUserGatewayThirdPartyClient) CreateThirdParty(ctx context.Context, in *CreateThirdPartyRequest, opts ...grpc.CallOption) (*CreateThirdPartyResponse, error) {
	out := new(CreateThirdPartyResponse)
	err := c.cc.Invoke(ctx, "/app.user.gateway.thirdparty.v1.AppUserGatewayThirdParty/CreateThirdParty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppUserGatewayThirdPartyServer is the server API for AppUserGatewayThirdParty service.
// All implementations must embed UnimplementedAppUserGatewayThirdPartyServer
// for forward compatibility
type AppUserGatewayThirdPartyServer interface {
	CreateThirdParty(context.Context, *CreateThirdPartyRequest) (*CreateThirdPartyResponse, error)
	mustEmbedUnimplementedAppUserGatewayThirdPartyServer()
}

// UnimplementedAppUserGatewayThirdPartyServer must be embedded to have forward compatible implementations.
type UnimplementedAppUserGatewayThirdPartyServer struct {
}

func (UnimplementedAppUserGatewayThirdPartyServer) CreateThirdParty(context.Context, *CreateThirdPartyRequest) (*CreateThirdPartyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateThirdParty not implemented")
}
func (UnimplementedAppUserGatewayThirdPartyServer) mustEmbedUnimplementedAppUserGatewayThirdPartyServer() {
}

// UnsafeAppUserGatewayThirdPartyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppUserGatewayThirdPartyServer will
// result in compilation errors.
type UnsafeAppUserGatewayThirdPartyServer interface {
	mustEmbedUnimplementedAppUserGatewayThirdPartyServer()
}

func RegisterAppUserGatewayThirdPartyServer(s grpc.ServiceRegistrar, srv AppUserGatewayThirdPartyServer) {
	s.RegisterService(&AppUserGatewayThirdParty_ServiceDesc, srv)
}

func _AppUserGatewayThirdParty_CreateThirdParty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateThirdPartyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserGatewayThirdPartyServer).CreateThirdParty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.gateway.thirdparty.v1.AppUserGatewayThirdParty/CreateThirdParty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserGatewayThirdPartyServer).CreateThirdParty(ctx, req.(*CreateThirdPartyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppUserGatewayThirdParty_ServiceDesc is the grpc.ServiceDesc for AppUserGatewayThirdParty service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppUserGatewayThirdParty_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app.user.gateway.thirdparty.v1.AppUserGatewayThirdParty",
	HandlerType: (*AppUserGatewayThirdPartyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateThirdParty",
			Handler:    _AppUserGatewayThirdParty_CreateThirdParty_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/appusergw/thirdparty/thirdparty.proto",
}
