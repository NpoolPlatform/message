// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/appusergw/banappuser/banappuser.proto

package banappuser

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppUserGatewayBanAppUserClient is the client API for AppUserGatewayBanAppUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppUserGatewayBanAppUserClient interface {
	CreateBanAppUser(ctx context.Context, in *CreateBanAppUserRequest, opts ...grpc.CallOption) (*CreateBanAppUserResponse, error)
	GetBanAppUser(ctx context.Context, in *GetBanAppUserRequest, opts ...grpc.CallOption) (*GetBanAppUserResponse, error)
	GetAppUserBanAppUser(ctx context.Context, in *GetAppUserBanAppUserRequest, opts ...grpc.CallOption) (*GetAppUserBanAppUserResponse, error)
	UpdateBanAppUser(ctx context.Context, in *UpdateBanAppUserRequest, opts ...grpc.CallOption) (*UpdateBanAppUserResponse, error)
	DeleteBanAppUser(ctx context.Context, in *DeleteBanAppUserRequest, opts ...grpc.CallOption) (*DeleteBanAppUserResponse, error)
}

type appUserGatewayBanAppUserClient struct {
	cc grpc.ClientConnInterface
}

func NewAppUserGatewayBanAppUserClient(cc grpc.ClientConnInterface) AppUserGatewayBanAppUserClient {
	return &appUserGatewayBanAppUserClient{cc}
}

func (c *appUserGatewayBanAppUserClient) CreateBanAppUser(ctx context.Context, in *CreateBanAppUserRequest, opts ...grpc.CallOption) (*CreateBanAppUserResponse, error) {
	out := new(CreateBanAppUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.gateway.banappuser.v1.AppUserGatewayBanAppUser/CreateBanAppUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserGatewayBanAppUserClient) GetBanAppUser(ctx context.Context, in *GetBanAppUserRequest, opts ...grpc.CallOption) (*GetBanAppUserResponse, error) {
	out := new(GetBanAppUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.gateway.banappuser.v1.AppUserGatewayBanAppUser/GetBanAppUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserGatewayBanAppUserClient) GetAppUserBanAppUser(ctx context.Context, in *GetAppUserBanAppUserRequest, opts ...grpc.CallOption) (*GetAppUserBanAppUserResponse, error) {
	out := new(GetAppUserBanAppUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.gateway.banappuser.v1.AppUserGatewayBanAppUser/GetAppUserBanAppUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserGatewayBanAppUserClient) UpdateBanAppUser(ctx context.Context, in *UpdateBanAppUserRequest, opts ...grpc.CallOption) (*UpdateBanAppUserResponse, error) {
	out := new(UpdateBanAppUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.gateway.banappuser.v1.AppUserGatewayBanAppUser/UpdateBanAppUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserGatewayBanAppUserClient) DeleteBanAppUser(ctx context.Context, in *DeleteBanAppUserRequest, opts ...grpc.CallOption) (*DeleteBanAppUserResponse, error) {
	out := new(DeleteBanAppUserResponse)
	err := c.cc.Invoke(ctx, "/app.user.gateway.banappuser.v1.AppUserGatewayBanAppUser/DeleteBanAppUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppUserGatewayBanAppUserServer is the server API for AppUserGatewayBanAppUser service.
// All implementations must embed UnimplementedAppUserGatewayBanAppUserServer
// for forward compatibility
type AppUserGatewayBanAppUserServer interface {
	CreateBanAppUser(context.Context, *CreateBanAppUserRequest) (*CreateBanAppUserResponse, error)
	GetBanAppUser(context.Context, *GetBanAppUserRequest) (*GetBanAppUserResponse, error)
	GetAppUserBanAppUser(context.Context, *GetAppUserBanAppUserRequest) (*GetAppUserBanAppUserResponse, error)
	UpdateBanAppUser(context.Context, *UpdateBanAppUserRequest) (*UpdateBanAppUserResponse, error)
	DeleteBanAppUser(context.Context, *DeleteBanAppUserRequest) (*DeleteBanAppUserResponse, error)
	mustEmbedUnimplementedAppUserGatewayBanAppUserServer()
}

// UnimplementedAppUserGatewayBanAppUserServer must be embedded to have forward compatible implementations.
type UnimplementedAppUserGatewayBanAppUserServer struct {
}

func (UnimplementedAppUserGatewayBanAppUserServer) CreateBanAppUser(context.Context, *CreateBanAppUserRequest) (*CreateBanAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBanAppUser not implemented")
}
func (UnimplementedAppUserGatewayBanAppUserServer) GetBanAppUser(context.Context, *GetBanAppUserRequest) (*GetBanAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBanAppUser not implemented")
}
func (UnimplementedAppUserGatewayBanAppUserServer) GetAppUserBanAppUser(context.Context, *GetAppUserBanAppUserRequest) (*GetAppUserBanAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppUserBanAppUser not implemented")
}
func (UnimplementedAppUserGatewayBanAppUserServer) UpdateBanAppUser(context.Context, *UpdateBanAppUserRequest) (*UpdateBanAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBanAppUser not implemented")
}
func (UnimplementedAppUserGatewayBanAppUserServer) DeleteBanAppUser(context.Context, *DeleteBanAppUserRequest) (*DeleteBanAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBanAppUser not implemented")
}
func (UnimplementedAppUserGatewayBanAppUserServer) mustEmbedUnimplementedAppUserGatewayBanAppUserServer() {
}

// UnsafeAppUserGatewayBanAppUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppUserGatewayBanAppUserServer will
// result in compilation errors.
type UnsafeAppUserGatewayBanAppUserServer interface {
	mustEmbedUnimplementedAppUserGatewayBanAppUserServer()
}

func RegisterAppUserGatewayBanAppUserServer(s grpc.ServiceRegistrar, srv AppUserGatewayBanAppUserServer) {
	s.RegisterService(&AppUserGatewayBanAppUser_ServiceDesc, srv)
}

func _AppUserGatewayBanAppUser_CreateBanAppUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBanAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserGatewayBanAppUserServer).CreateBanAppUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.gateway.banappuser.v1.AppUserGatewayBanAppUser/CreateBanAppUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserGatewayBanAppUserServer).CreateBanAppUser(ctx, req.(*CreateBanAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserGatewayBanAppUser_GetBanAppUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBanAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserGatewayBanAppUserServer).GetBanAppUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.gateway.banappuser.v1.AppUserGatewayBanAppUser/GetBanAppUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserGatewayBanAppUserServer).GetBanAppUser(ctx, req.(*GetBanAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserGatewayBanAppUser_GetAppUserBanAppUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppUserBanAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserGatewayBanAppUserServer).GetAppUserBanAppUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.gateway.banappuser.v1.AppUserGatewayBanAppUser/GetAppUserBanAppUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserGatewayBanAppUserServer).GetAppUserBanAppUser(ctx, req.(*GetAppUserBanAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserGatewayBanAppUser_UpdateBanAppUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBanAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserGatewayBanAppUserServer).UpdateBanAppUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.gateway.banappuser.v1.AppUserGatewayBanAppUser/UpdateBanAppUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserGatewayBanAppUserServer).UpdateBanAppUser(ctx, req.(*UpdateBanAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserGatewayBanAppUser_DeleteBanAppUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBanAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserGatewayBanAppUserServer).DeleteBanAppUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.gateway.banappuser.v1.AppUserGatewayBanAppUser/DeleteBanAppUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserGatewayBanAppUserServer).DeleteBanAppUser(ctx, req.(*DeleteBanAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppUserGatewayBanAppUser_ServiceDesc is the grpc.ServiceDesc for AppUserGatewayBanAppUser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppUserGatewayBanAppUser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app.user.gateway.banappuser.v1.AppUserGatewayBanAppUser",
	HandlerType: (*AppUserGatewayBanAppUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBanAppUser",
			Handler:    _AppUserGatewayBanAppUser_CreateBanAppUser_Handler,
		},
		{
			MethodName: "GetBanAppUser",
			Handler:    _AppUserGatewayBanAppUser_GetBanAppUser_Handler,
		},
		{
			MethodName: "GetAppUserBanAppUser",
			Handler:    _AppUserGatewayBanAppUser_GetAppUserBanAppUser_Handler,
		},
		{
			MethodName: "UpdateBanAppUser",
			Handler:    _AppUserGatewayBanAppUser_UpdateBanAppUser_Handler,
		},
		{
			MethodName: "DeleteBanAppUser",
			Handler:    _AppUserGatewayBanAppUser_DeleteBanAppUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/appusergw/banappuser/banappuser.proto",
}
