// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.18.1
// source: npool/good/mw/v1/delegatedstaking/delegatedstaking.proto

package delegatedstaking

import (
	v1 "github.com/NpoolPlatform/message/npool/basetypes/good/v1"
	v11 "github.com/NpoolPlatform/message/npool/basetypes/v1"
	coin "github.com/NpoolPlatform/message/npool/good/mw/v1/good/coin"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DelegatedStakingReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Base of delegated staking
	ID                       *uint32 `protobuf:"varint,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID                    *string `protobuf:"bytes,20,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	GoodID                   *string `protobuf:"bytes,30,opt,name=GoodID,proto3,oneof" json:"GoodID,omitempty"`
	NoStakeRedeemDelayHours  *uint32 `protobuf:"varint,40,opt,name=NoStakeRedeemDelayHours,proto3,oneof" json:"NoStakeRedeemDelayHours,omitempty"`
	MaxRedeemDelayHours      *uint32 `protobuf:"varint,50,opt,name=MaxRedeemDelayHours,proto3,oneof" json:"MaxRedeemDelayHours,omitempty"`
	ContractAddress          *string `protobuf:"bytes,60,opt,name=ContractAddress,proto3,oneof" json:"ContractAddress,omitempty"`
	NoStakeBenefitDelayHours *uint32 `protobuf:"varint,70,opt,name=NoStakeBenefitDelayHours,proto3,oneof" json:"NoStakeBenefitDelayHours,omitempty"`
	// Good information
	GoodType             *v1.GoodType      `protobuf:"varint,120,opt,name=GoodType,proto3,enum=basetypes.good.v1.GoodType,oneof" json:"GoodType,omitempty"`
	BenefitType          *v1.BenefitType   `protobuf:"varint,130,opt,name=BenefitType,proto3,enum=basetypes.good.v1.BenefitType,oneof" json:"BenefitType,omitempty"`
	Name                 *string           `protobuf:"bytes,140,opt,name=Name,proto3,oneof" json:"Name,omitempty"`
	ServiceStartAt       *uint32           `protobuf:"varint,150,opt,name=ServiceStartAt,proto3,oneof" json:"ServiceStartAt,omitempty"`
	StartMode            *v1.GoodStartMode `protobuf:"varint,160,opt,name=StartMode,proto3,enum=basetypes.good.v1.GoodStartMode,oneof" json:"StartMode,omitempty"`
	TestOnly             *bool             `protobuf:"varint,170,opt,name=TestOnly,proto3,oneof" json:"TestOnly,omitempty"`
	BenefitIntervalHours *uint32           `protobuf:"varint,180,opt,name=BenefitIntervalHours,proto3,oneof" json:"BenefitIntervalHours,omitempty"`
	Purchasable          *bool             `protobuf:"varint,190,opt,name=Purchasable,proto3,oneof" json:"Purchasable,omitempty"`
	Online               *bool             `protobuf:"varint,200,opt,name=Online,proto3,oneof" json:"Online,omitempty"`
	// Reward information
	RewardState           *v1.BenefitState `protobuf:"varint,260,opt,name=RewardState,proto3,enum=basetypes.good.v1.BenefitState,oneof" json:"RewardState,omitempty"`
	RewardAt              *uint32          `protobuf:"varint,270,opt,name=RewardAt,proto3,oneof" json:"RewardAt,omitempty"`
	RewardTID             *string          `protobuf:"bytes,280,opt,name=RewardTID,proto3,oneof" json:"RewardTID,omitempty"`
	NextRewardStartAmount *string          `protobuf:"bytes,290,opt,name=NextRewardStartAmount,proto3,oneof" json:"NextRewardStartAmount,omitempty"`
	RewardAmount          *string          `protobuf:"bytes,300,opt,name=RewardAmount,proto3,oneof" json:"RewardAmount,omitempty"`
}

func (x *DelegatedStakingReq) Reset() {
	*x = DelegatedStakingReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegatedStakingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegatedStakingReq) ProtoMessage() {}

func (x *DelegatedStakingReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegatedStakingReq.ProtoReflect.Descriptor instead.
func (*DelegatedStakingReq) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_rawDescGZIP(), []int{0}
}

func (x *DelegatedStakingReq) GetID() uint32 {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return 0
}

func (x *DelegatedStakingReq) GetEntID() string {
	if x != nil && x.EntID != nil {
		return *x.EntID
	}
	return ""
}

func (x *DelegatedStakingReq) GetGoodID() string {
	if x != nil && x.GoodID != nil {
		return *x.GoodID
	}
	return ""
}

func (x *DelegatedStakingReq) GetNoStakeRedeemDelayHours() uint32 {
	if x != nil && x.NoStakeRedeemDelayHours != nil {
		return *x.NoStakeRedeemDelayHours
	}
	return 0
}

func (x *DelegatedStakingReq) GetMaxRedeemDelayHours() uint32 {
	if x != nil && x.MaxRedeemDelayHours != nil {
		return *x.MaxRedeemDelayHours
	}
	return 0
}

func (x *DelegatedStakingReq) GetContractAddress() string {
	if x != nil && x.ContractAddress != nil {
		return *x.ContractAddress
	}
	return ""
}

func (x *DelegatedStakingReq) GetNoStakeBenefitDelayHours() uint32 {
	if x != nil && x.NoStakeBenefitDelayHours != nil {
		return *x.NoStakeBenefitDelayHours
	}
	return 0
}

func (x *DelegatedStakingReq) GetGoodType() v1.GoodType {
	if x != nil && x.GoodType != nil {
		return *x.GoodType
	}
	return v1.GoodType(0)
}

func (x *DelegatedStakingReq) GetBenefitType() v1.BenefitType {
	if x != nil && x.BenefitType != nil {
		return *x.BenefitType
	}
	return v1.BenefitType(0)
}

func (x *DelegatedStakingReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *DelegatedStakingReq) GetServiceStartAt() uint32 {
	if x != nil && x.ServiceStartAt != nil {
		return *x.ServiceStartAt
	}
	return 0
}

func (x *DelegatedStakingReq) GetStartMode() v1.GoodStartMode {
	if x != nil && x.StartMode != nil {
		return *x.StartMode
	}
	return v1.GoodStartMode(0)
}

func (x *DelegatedStakingReq) GetTestOnly() bool {
	if x != nil && x.TestOnly != nil {
		return *x.TestOnly
	}
	return false
}

func (x *DelegatedStakingReq) GetBenefitIntervalHours() uint32 {
	if x != nil && x.BenefitIntervalHours != nil {
		return *x.BenefitIntervalHours
	}
	return 0
}

func (x *DelegatedStakingReq) GetPurchasable() bool {
	if x != nil && x.Purchasable != nil {
		return *x.Purchasable
	}
	return false
}

func (x *DelegatedStakingReq) GetOnline() bool {
	if x != nil && x.Online != nil {
		return *x.Online
	}
	return false
}

func (x *DelegatedStakingReq) GetRewardState() v1.BenefitState {
	if x != nil && x.RewardState != nil {
		return *x.RewardState
	}
	return v1.BenefitState(0)
}

func (x *DelegatedStakingReq) GetRewardAt() uint32 {
	if x != nil && x.RewardAt != nil {
		return *x.RewardAt
	}
	return 0
}

func (x *DelegatedStakingReq) GetRewardTID() string {
	if x != nil && x.RewardTID != nil {
		return *x.RewardTID
	}
	return ""
}

func (x *DelegatedStakingReq) GetNextRewardStartAmount() string {
	if x != nil && x.NextRewardStartAmount != nil {
		return *x.NextRewardStartAmount
	}
	return ""
}

func (x *DelegatedStakingReq) GetRewardAmount() string {
	if x != nil && x.RewardAmount != nil {
		return *x.RewardAmount
	}
	return ""
}

type DelegatedStaking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: sql:"id"
	ID uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty" sql:"id"`
	// @inject_tag: sql:"ent_id"
	EntID string `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty" sql:"ent_id"`
	// @inject_tag: sql:"good_id"
	GoodID string `protobuf:"bytes,30,opt,name=GoodID,proto3" json:"GoodID,omitempty" sql:"good_id"`
	// @inject_tag: sql:"no_stake_redeem_delay_hours"
	NoStakeRedeemDelayHours string `protobuf:"bytes,40,opt,name=NoStakeRedeemDelayHours,proto3" json:"NoStakeRedeemDelayHours,omitempty" sql:"no_stake_redeem_delay_hours"`
	// @inject_tag: sql:"max_redeem_delay_hours"
	MaxRedeemDelayHours string `protobuf:"bytes,50,opt,name=MaxRedeemDelayHours,proto3" json:"MaxRedeemDelayHours,omitempty" sql:"max_redeem_delay_hours"`
	// @inject_tag: sql:"contract_address"
	ContractAddress string `protobuf:"bytes,60,opt,name=ContractAddress,proto3" json:"ContractAddress,omitempty" sql:"contract_address"`
	// @inject_tag: sql:"no_stake_benefit_delay_hours"
	NoStakeBenefitDelayHours string `protobuf:"bytes,70,opt,name=NoStakeBenefitDelayHours,proto3" json:"NoStakeBenefitDelayHours,omitempty" sql:"no_stake_benefit_delay_hours"`
	// @inject_tag: sql:"good_type"
	GoodTypeStr string      `protobuf:"bytes,220,opt,name=GoodTypeStr,proto3" json:"GoodTypeStr,omitempty" sql:"good_type"`
	GoodType    v1.GoodType `protobuf:"varint,230,opt,name=GoodType,proto3,enum=basetypes.good.v1.GoodType" json:"GoodType,omitempty"`
	// @inject_tag: sql:"benefit_type"
	BenefitTypeStr string         `protobuf:"bytes,240,opt,name=BenefitTypeStr,proto3" json:"BenefitTypeStr,omitempty" sql:"benefit_type"`
	BenefitType    v1.BenefitType `protobuf:"varint,250,opt,name=BenefitType,proto3,enum=basetypes.good.v1.BenefitType" json:"BenefitType,omitempty"`
	// @inject_tag: sql:"name"
	Name string `protobuf:"bytes,260,opt,name=Name,proto3" json:"Name,omitempty" sql:"name"`
	// @inject_tag: sql:"service_start_at"
	ServiceStartAt uint32 `protobuf:"varint,270,opt,name=ServiceStartAt,proto3" json:"ServiceStartAt,omitempty" sql:"service_start_at"`
	// @inject_tag: sql:"start_mode"
	StartModeStr string           `protobuf:"bytes,280,opt,name=StartModeStr,proto3" json:"StartModeStr,omitempty" sql:"start_mode"`
	StartMode    v1.GoodStartMode `protobuf:"varint,290,opt,name=StartMode,proto3,enum=basetypes.good.v1.GoodStartMode" json:"StartMode,omitempty"`
	// @inject_tag: sql:"test_only"
	TestOnly bool `protobuf:"varint,300,opt,name=TestOnly,proto3" json:"TestOnly,omitempty" sql:"test_only"`
	// @inject_tag: sql:"benefit_interval_hours"
	BenefitIntervalHours uint32 `protobuf:"varint,310,opt,name=BenefitIntervalHours,proto3" json:"BenefitIntervalHours,omitempty" sql:"benefit_interval_hours"`
	// @inject_tag: sql:"purchasable"
	Purchasable bool `protobuf:"varint,320,opt,name=Purchasable,proto3" json:"Purchasable,omitempty" sql:"purchasable"`
	// @inject_tag: sql:"online"
	Online bool `protobuf:"varint,330,opt,name=Online,proto3" json:"Online,omitempty" sql:"online"`
	// @inject_tag: sql:"state"
	StateStr string       `protobuf:"bytes,340,opt,name=StateStr,proto3" json:"StateStr,omitempty" sql:"state"`
	State    v1.GoodState `protobuf:"varint,341,opt,name=State,proto3,enum=basetypes.good.v1.GoodState" json:"State,omitempty"`
	// @inject_tag: sql:"reward_state"
	RewardStateStr string          `protobuf:"bytes,440,opt,name=RewardStateStr,proto3" json:"RewardStateStr,omitempty" sql:"reward_state"`
	RewardState    v1.BenefitState `protobuf:"varint,450,opt,name=RewardState,proto3,enum=basetypes.good.v1.BenefitState" json:"RewardState,omitempty"`
	// @inject_tag: sql:"last_reward_at"
	LastRewardAt uint32 `protobuf:"varint,460,opt,name=LastRewardAt,proto3" json:"LastRewardAt,omitempty" sql:"last_reward_at"`
	// @inject_tag: sql:"reward_tid"
	RewardTID string `protobuf:"bytes,470,opt,name=RewardTID,proto3" json:"RewardTID,omitempty" sql:"reward_tid"`
	// @inject_tag: sql:"next_reward_start_amount"
	NextRewardStartAmount string `protobuf:"bytes,480,opt,name=NextRewardStartAmount,proto3" json:"NextRewardStartAmount,omitempty" sql:"next_reward_start_amount"`
	// @inject_tag: sql:"last_reward_amount"
	LastRewardAmount string `protobuf:"bytes,490,opt,name=LastRewardAmount,proto3" json:"LastRewardAmount,omitempty" sql:"last_reward_amount"`
	// @inject_tag: sql:"last_unit_reward_amount"
	LastUnitRewardAmount string `protobuf:"bytes,500,opt,name=LastUnitRewardAmount,proto3" json:"LastUnitRewardAmount,omitempty" sql:"last_unit_reward_amount"`
	// @inject_tag: sql:"total_reward_amount"
	TotalRewardAmount string               `protobuf:"bytes,510,opt,name=TotalRewardAmount,proto3" json:"TotalRewardAmount,omitempty" sql:"total_reward_amount"`
	GoodCoins         []*coin.GoodCoinInfo `protobuf:"bytes,800,rep,name=GoodCoins,proto3" json:"GoodCoins,omitempty"`
	// @inject_tag: sql:"created_at"
	CreatedAt uint32 `protobuf:"varint,1000,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
	// @inject_tag: sql:"updated_at"
	UpdatedAt uint32 `protobuf:"varint,1010,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty" sql:"updated_at"`
}

func (x *DelegatedStaking) Reset() {
	*x = DelegatedStaking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegatedStaking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegatedStaking) ProtoMessage() {}

func (x *DelegatedStaking) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegatedStaking.ProtoReflect.Descriptor instead.
func (*DelegatedStaking) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_rawDescGZIP(), []int{1}
}

func (x *DelegatedStaking) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *DelegatedStaking) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *DelegatedStaking) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *DelegatedStaking) GetNoStakeRedeemDelayHours() string {
	if x != nil {
		return x.NoStakeRedeemDelayHours
	}
	return ""
}

func (x *DelegatedStaking) GetMaxRedeemDelayHours() string {
	if x != nil {
		return x.MaxRedeemDelayHours
	}
	return ""
}

func (x *DelegatedStaking) GetContractAddress() string {
	if x != nil {
		return x.ContractAddress
	}
	return ""
}

func (x *DelegatedStaking) GetNoStakeBenefitDelayHours() string {
	if x != nil {
		return x.NoStakeBenefitDelayHours
	}
	return ""
}

func (x *DelegatedStaking) GetGoodTypeStr() string {
	if x != nil {
		return x.GoodTypeStr
	}
	return ""
}

func (x *DelegatedStaking) GetGoodType() v1.GoodType {
	if x != nil {
		return x.GoodType
	}
	return v1.GoodType(0)
}

func (x *DelegatedStaking) GetBenefitTypeStr() string {
	if x != nil {
		return x.BenefitTypeStr
	}
	return ""
}

func (x *DelegatedStaking) GetBenefitType() v1.BenefitType {
	if x != nil {
		return x.BenefitType
	}
	return v1.BenefitType(0)
}

func (x *DelegatedStaking) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DelegatedStaking) GetServiceStartAt() uint32 {
	if x != nil {
		return x.ServiceStartAt
	}
	return 0
}

func (x *DelegatedStaking) GetStartModeStr() string {
	if x != nil {
		return x.StartModeStr
	}
	return ""
}

func (x *DelegatedStaking) GetStartMode() v1.GoodStartMode {
	if x != nil {
		return x.StartMode
	}
	return v1.GoodStartMode(0)
}

func (x *DelegatedStaking) GetTestOnly() bool {
	if x != nil {
		return x.TestOnly
	}
	return false
}

func (x *DelegatedStaking) GetBenefitIntervalHours() uint32 {
	if x != nil {
		return x.BenefitIntervalHours
	}
	return 0
}

func (x *DelegatedStaking) GetPurchasable() bool {
	if x != nil {
		return x.Purchasable
	}
	return false
}

func (x *DelegatedStaking) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

func (x *DelegatedStaking) GetStateStr() string {
	if x != nil {
		return x.StateStr
	}
	return ""
}

func (x *DelegatedStaking) GetState() v1.GoodState {
	if x != nil {
		return x.State
	}
	return v1.GoodState(0)
}

func (x *DelegatedStaking) GetRewardStateStr() string {
	if x != nil {
		return x.RewardStateStr
	}
	return ""
}

func (x *DelegatedStaking) GetRewardState() v1.BenefitState {
	if x != nil {
		return x.RewardState
	}
	return v1.BenefitState(0)
}

func (x *DelegatedStaking) GetLastRewardAt() uint32 {
	if x != nil {
		return x.LastRewardAt
	}
	return 0
}

func (x *DelegatedStaking) GetRewardTID() string {
	if x != nil {
		return x.RewardTID
	}
	return ""
}

func (x *DelegatedStaking) GetNextRewardStartAmount() string {
	if x != nil {
		return x.NextRewardStartAmount
	}
	return ""
}

func (x *DelegatedStaking) GetLastRewardAmount() string {
	if x != nil {
		return x.LastRewardAmount
	}
	return ""
}

func (x *DelegatedStaking) GetLastUnitRewardAmount() string {
	if x != nil {
		return x.LastUnitRewardAmount
	}
	return ""
}

func (x *DelegatedStaking) GetTotalRewardAmount() string {
	if x != nil {
		return x.TotalRewardAmount
	}
	return ""
}

func (x *DelegatedStaking) GetGoodCoins() []*coin.GoodCoinInfo {
	if x != nil {
		return x.GoodCoins
	}
	return nil
}

func (x *DelegatedStaking) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *DelegatedStaking) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          *v11.Uint32Val      `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID       *v11.StringVal      `protobuf:"bytes,20,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	GoodID      *v11.StringVal      `protobuf:"bytes,30,opt,name=GoodID,proto3,oneof" json:"GoodID,omitempty"`
	GoodIDs     *v11.StringSliceVal `protobuf:"bytes,40,opt,name=GoodIDs,proto3,oneof" json:"GoodIDs,omitempty"`
	GoodType    *v11.Uint32Val      `protobuf:"bytes,50,opt,name=GoodType,proto3,oneof" json:"GoodType,omitempty"`
	GoodTypes   *v11.Uint32SliceVal `protobuf:"bytes,60,opt,name=GoodTypes,proto3,oneof" json:"GoodTypes,omitempty"`
	CoinTypeID  *v11.StringVal      `protobuf:"bytes,70,opt,name=CoinTypeID,proto3,oneof" json:"CoinTypeID,omitempty"`
	CoinTypeIDs *v11.StringSliceVal `protobuf:"bytes,80,opt,name=CoinTypeIDs,proto3,oneof" json:"CoinTypeIDs,omitempty"`
	RewardState *v11.Uint32Val      `protobuf:"bytes,90,opt,name=RewardState,proto3,oneof" json:"RewardState,omitempty"`
	RewardAt    *v11.Uint32Val      `protobuf:"bytes,100,opt,name=RewardAt,proto3,oneof" json:"RewardAt,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *v11.Uint32Val {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetEntID() *v11.StringVal {
	if x != nil {
		return x.EntID
	}
	return nil
}

func (x *Conds) GetGoodID() *v11.StringVal {
	if x != nil {
		return x.GoodID
	}
	return nil
}

func (x *Conds) GetGoodIDs() *v11.StringSliceVal {
	if x != nil {
		return x.GoodIDs
	}
	return nil
}

func (x *Conds) GetGoodType() *v11.Uint32Val {
	if x != nil {
		return x.GoodType
	}
	return nil
}

func (x *Conds) GetGoodTypes() *v11.Uint32SliceVal {
	if x != nil {
		return x.GoodTypes
	}
	return nil
}

func (x *Conds) GetCoinTypeID() *v11.StringVal {
	if x != nil {
		return x.CoinTypeID
	}
	return nil
}

func (x *Conds) GetCoinTypeIDs() *v11.StringSliceVal {
	if x != nil {
		return x.CoinTypeIDs
	}
	return nil
}

func (x *Conds) GetRewardState() *v11.Uint32Val {
	if x != nil {
		return x.RewardState
	}
	return nil
}

func (x *Conds) GetRewardAt() *v11.Uint32Val {
	if x != nil {
		return x.RewardAt
	}
	return nil
}

type CreateDelegatedStakingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *DelegatedStakingReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateDelegatedStakingRequest) Reset() {
	*x = CreateDelegatedStakingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDelegatedStakingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDelegatedStakingRequest) ProtoMessage() {}

func (x *CreateDelegatedStakingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDelegatedStakingRequest.ProtoReflect.Descriptor instead.
func (*CreateDelegatedStakingRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_rawDescGZIP(), []int{3}
}

func (x *CreateDelegatedStakingRequest) GetInfo() *DelegatedStakingReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateDelegatedStakingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *DelegatedStaking `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateDelegatedStakingResponse) Reset() {
	*x = CreateDelegatedStakingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDelegatedStakingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDelegatedStakingResponse) ProtoMessage() {}

func (x *CreateDelegatedStakingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDelegatedStakingResponse.ProtoReflect.Descriptor instead.
func (*CreateDelegatedStakingResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_rawDescGZIP(), []int{4}
}

func (x *CreateDelegatedStakingResponse) GetInfo() *DelegatedStaking {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateDelegatedStakingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *DelegatedStakingReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateDelegatedStakingRequest) Reset() {
	*x = UpdateDelegatedStakingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDelegatedStakingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDelegatedStakingRequest) ProtoMessage() {}

func (x *UpdateDelegatedStakingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDelegatedStakingRequest.ProtoReflect.Descriptor instead.
func (*UpdateDelegatedStakingRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateDelegatedStakingRequest) GetInfo() *DelegatedStakingReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateDelegatedStakingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *DelegatedStaking `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateDelegatedStakingResponse) Reset() {
	*x = UpdateDelegatedStakingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDelegatedStakingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDelegatedStakingResponse) ProtoMessage() {}

func (x *UpdateDelegatedStakingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDelegatedStakingResponse.ProtoReflect.Descriptor instead.
func (*UpdateDelegatedStakingResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateDelegatedStakingResponse) GetInfo() *DelegatedStaking {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetDelegatedStakingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoodID string `protobuf:"bytes,10,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
}

func (x *GetDelegatedStakingRequest) Reset() {
	*x = GetDelegatedStakingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDelegatedStakingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDelegatedStakingRequest) ProtoMessage() {}

func (x *GetDelegatedStakingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDelegatedStakingRequest.ProtoReflect.Descriptor instead.
func (*GetDelegatedStakingRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_rawDescGZIP(), []int{7}
}

func (x *GetDelegatedStakingRequest) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

type GetDelegatedStakingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *DelegatedStaking `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetDelegatedStakingResponse) Reset() {
	*x = GetDelegatedStakingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDelegatedStakingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDelegatedStakingResponse) ProtoMessage() {}

func (x *GetDelegatedStakingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDelegatedStakingResponse.ProtoReflect.Descriptor instead.
func (*GetDelegatedStakingResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_rawDescGZIP(), []int{8}
}

func (x *GetDelegatedStakingResponse) GetInfo() *DelegatedStaking {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetDelegatedStakingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetDelegatedStakingsRequest) Reset() {
	*x = GetDelegatedStakingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDelegatedStakingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDelegatedStakingsRequest) ProtoMessage() {}

func (x *GetDelegatedStakingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDelegatedStakingsRequest.ProtoReflect.Descriptor instead.
func (*GetDelegatedStakingsRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_rawDescGZIP(), []int{9}
}

func (x *GetDelegatedStakingsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetDelegatedStakingsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetDelegatedStakingsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetDelegatedStakingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*DelegatedStaking `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32              `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetDelegatedStakingsResponse) Reset() {
	*x = GetDelegatedStakingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDelegatedStakingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDelegatedStakingsResponse) ProtoMessage() {}

func (x *GetDelegatedStakingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDelegatedStakingsResponse.ProtoReflect.Descriptor instead.
func (*GetDelegatedStakingsResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_rawDescGZIP(), []int{10}
}

func (x *GetDelegatedStakingsResponse) GetInfos() []*DelegatedStaking {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetDelegatedStakingsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type DeleteDelegatedStakingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *DelegatedStakingReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteDelegatedStakingRequest) Reset() {
	*x = DeleteDelegatedStakingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDelegatedStakingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDelegatedStakingRequest) ProtoMessage() {}

func (x *DeleteDelegatedStakingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDelegatedStakingRequest.ProtoReflect.Descriptor instead.
func (*DeleteDelegatedStakingRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteDelegatedStakingRequest) GetInfo() *DelegatedStakingReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type DeleteDelegatedStakingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *DelegatedStaking `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteDelegatedStakingResponse) Reset() {
	*x = DeleteDelegatedStakingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDelegatedStakingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDelegatedStakingResponse) ProtoMessage() {}

func (x *DeleteDelegatedStakingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDelegatedStakingResponse.ProtoReflect.Descriptor instead.
func (*DeleteDelegatedStakingResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteDelegatedStakingResponse) GetInfo() *DelegatedStaking {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto protoreflect.FileDescriptor

var file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_rawDesc = []byte{
	0x0a, 0x38, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x6d, 0x77, 0x2f,
	0x76, 0x31, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x73, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x73, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x23, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x64, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x64, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x1a,
	0x1e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x23, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64,
	0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x63, 0x6f, 0x69, 0x6e,
	0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd2, 0x0a, 0x0a, 0x13,
	0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x88, 0x01, 0x01,
	0x12, 0x3d, 0x0a, 0x17, 0x4e, 0x6f, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x64, 0x65, 0x65,
	0x6d, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x03, 0x52, 0x17, 0x4e, 0x6f, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x64, 0x65,
	0x65, 0x6d, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x35, 0x0a, 0x13, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x13,
	0x4d, 0x61, 0x78, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x48, 0x6f,
	0x75, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x05, 0x52, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x18, 0x4e, 0x6f, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x48, 0x6f, 0x75, 0x72,
	0x73, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x06, 0x52, 0x18, 0x4e, 0x6f, 0x53, 0x74, 0x61,
	0x6b, 0x65, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x48, 0x6f,
	0x75, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x48, 0x07, 0x52, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x0b, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x08, 0x52, 0x0b, 0x42, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x0a, 0x52, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x0b, 0x52, 0x09, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x08, 0x54, 0x65,
	0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0c, 0x52,
	0x08, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x14,
	0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x48,
	0x6f, 0x75, 0x72, 0x73, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0d, 0x52, 0x14, 0x42,
	0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x48, 0x6f,
	0x75, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0b, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0e, 0x52, 0x0b,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c,
	0x0a, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x0f, 0x52, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x0b,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x84, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x48, 0x10, 0x52, 0x0b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x08, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41,
	0x74, 0x18, 0x8e, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x11, 0x52, 0x08, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x09, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x54, 0x49, 0x44, 0x18, 0x98, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x12, 0x52, 0x09, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x15, 0x4e,
	0x65, 0x78, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0xa2, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x15, 0x4e,
	0x65, 0x78, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0c, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xac, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14,
	0x52, 0x0c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x74,
	0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x42, 0x1a, 0x0a,
	0x18, 0x5f, 0x4e, 0x6f, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x44,
	0x65, 0x6c, 0x61, 0x79, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x4d, 0x61,
	0x78, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x48, 0x6f, 0x75, 0x72,
	0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x4e, 0x6f, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x48, 0x6f, 0x75,
	0x72, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x54, 0x65,
	0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x42, 0x65, 0x6e, 0x65, 0x66,
	0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x54, 0x49, 0x44, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xf2, 0x0a, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x47,
	0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f,
	0x64, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x17, 0x4e, 0x6f, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65,
	0x64, 0x65, 0x65, 0x6d, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x4e, 0x6f, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x64,
	0x65, 0x65, 0x6d, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x30, 0x0a,
	0x13, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x48,
	0x6f, 0x75, 0x72, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x4d, 0x61, 0x78, 0x52,
	0x65, 0x64, 0x65, 0x65, 0x6d, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12,
	0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x18, 0x4e, 0x6f, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x48, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x4e, 0x6f, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0b, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x53, 0x74, 0x72, 0x18, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x47, 0x6f, 0x6f,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x12, 0x38, 0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x18, 0xe6, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x53, 0x74, 0x72, 0x18, 0xf0, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x42, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x12, 0x41, 0x0a, 0x0b, 0x42,
	0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0xfa, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0b, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x84, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x8e, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x23, 0x0a, 0x0c,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x72, 0x18, 0x98, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74,
	0x72, 0x12, 0x3f, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0xa2,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0xac,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x12,
	0x33, 0x0a, 0x14, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x18, 0xb6, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14,
	0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x48,
	0x6f, 0x75, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0b, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0xc0, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0xca, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x1b, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x18, 0xd4, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x12, 0x33, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0xd5, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x72, 0x18, 0xb8, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x12, 0x42, 0x0a, 0x0b, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0xc2, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x0b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x23, 0x0a, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x74, 0x18,
	0xcc, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x49,
	0x44, 0x18, 0xd6, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x54, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x15, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xe0, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x10, 0x4c, 0x61,
	0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xea,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x14, 0x4c, 0x61, 0x73, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0xf4, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x11,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0xfe, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x09, 0x47,
	0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0xa0, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x47, 0x6f,
	0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0xf2, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xd3, 0x05, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x2c, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a,
	0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x34, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x02, 0x52, 0x06, 0x47, 0x6f,
	0x6f, 0x64, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x07, 0x47, 0x6f, 0x6f, 0x64, 0x49,
	0x44, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c,
	0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x07, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48,
	0x04, 0x52, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3f,
	0x0a, 0x09, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48,
	0x05, 0x52, 0x09, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x3c, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x46, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x06, 0x52, 0x0a,
	0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a,
	0x0b, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x73, 0x18, 0x50, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c,
	0x48, 0x07, 0x52, 0x0b, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x48, 0x08, 0x52, 0x0b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x38, 0x0a, 0x08, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x74, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x09, 0x52,
	0x08, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03,
	0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x47, 0x6f, 0x6f,
	0x64, 0x49, 0x44, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x73, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x74, 0x22, 0x6d, 0x0a, 0x1d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x64, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6b, 0x0a, 0x1e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x64, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6d, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6b, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x34, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x22, 0x68, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x8d, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x73, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05,
	0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x73,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x6d, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6b, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x32, 0xbb, 0x06, 0x0a, 0x0a, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x12, 0xa3, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x42, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x43, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x73, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa3, 0x01, 0x0a, 0x16, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x12, 0x42, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x73,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x64, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9a,
	0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x64, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9d, 0x01, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa3, 0x01, 0x0a, 0x16,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x42, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x64, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x42, 0x44, 0x5a, 0x42, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64,
	0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_rawDescOnce sync.Once
	file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_rawDescData = file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_rawDesc
)

func file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_rawDescGZIP() []byte {
	file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_rawDescOnce.Do(func() {
		file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_rawDescData)
	})
	return file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_rawDescData
}

var file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_goTypes = []interface{}{
	(*DelegatedStakingReq)(nil),            // 0: good.middleware.delegatedstaking.v1.DelegatedStakingReq
	(*DelegatedStaking)(nil),               // 1: good.middleware.delegatedstaking.v1.DelegatedStaking
	(*Conds)(nil),                          // 2: good.middleware.delegatedstaking.v1.Conds
	(*CreateDelegatedStakingRequest)(nil),  // 3: good.middleware.delegatedstaking.v1.CreateDelegatedStakingRequest
	(*CreateDelegatedStakingResponse)(nil), // 4: good.middleware.delegatedstaking.v1.CreateDelegatedStakingResponse
	(*UpdateDelegatedStakingRequest)(nil),  // 5: good.middleware.delegatedstaking.v1.UpdateDelegatedStakingRequest
	(*UpdateDelegatedStakingResponse)(nil), // 6: good.middleware.delegatedstaking.v1.UpdateDelegatedStakingResponse
	(*GetDelegatedStakingRequest)(nil),     // 7: good.middleware.delegatedstaking.v1.GetDelegatedStakingRequest
	(*GetDelegatedStakingResponse)(nil),    // 8: good.middleware.delegatedstaking.v1.GetDelegatedStakingResponse
	(*GetDelegatedStakingsRequest)(nil),    // 9: good.middleware.delegatedstaking.v1.GetDelegatedStakingsRequest
	(*GetDelegatedStakingsResponse)(nil),   // 10: good.middleware.delegatedstaking.v1.GetDelegatedStakingsResponse
	(*DeleteDelegatedStakingRequest)(nil),  // 11: good.middleware.delegatedstaking.v1.DeleteDelegatedStakingRequest
	(*DeleteDelegatedStakingResponse)(nil), // 12: good.middleware.delegatedstaking.v1.DeleteDelegatedStakingResponse
	(v1.GoodType)(0),                       // 13: basetypes.good.v1.GoodType
	(v1.BenefitType)(0),                    // 14: basetypes.good.v1.BenefitType
	(v1.GoodStartMode)(0),                  // 15: basetypes.good.v1.GoodStartMode
	(v1.BenefitState)(0),                   // 16: basetypes.good.v1.BenefitState
	(v1.GoodState)(0),                      // 17: basetypes.good.v1.GoodState
	(*coin.GoodCoinInfo)(nil),              // 18: good.middleware.good1.coin.v1.GoodCoinInfo
	(*v11.Uint32Val)(nil),                  // 19: basetypes.v1.Uint32Val
	(*v11.StringVal)(nil),                  // 20: basetypes.v1.StringVal
	(*v11.StringSliceVal)(nil),             // 21: basetypes.v1.StringSliceVal
	(*v11.Uint32SliceVal)(nil),             // 22: basetypes.v1.Uint32SliceVal
}
var file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_depIdxs = []int32{
	13, // 0: good.middleware.delegatedstaking.v1.DelegatedStakingReq.GoodType:type_name -> basetypes.good.v1.GoodType
	14, // 1: good.middleware.delegatedstaking.v1.DelegatedStakingReq.BenefitType:type_name -> basetypes.good.v1.BenefitType
	15, // 2: good.middleware.delegatedstaking.v1.DelegatedStakingReq.StartMode:type_name -> basetypes.good.v1.GoodStartMode
	16, // 3: good.middleware.delegatedstaking.v1.DelegatedStakingReq.RewardState:type_name -> basetypes.good.v1.BenefitState
	13, // 4: good.middleware.delegatedstaking.v1.DelegatedStaking.GoodType:type_name -> basetypes.good.v1.GoodType
	14, // 5: good.middleware.delegatedstaking.v1.DelegatedStaking.BenefitType:type_name -> basetypes.good.v1.BenefitType
	15, // 6: good.middleware.delegatedstaking.v1.DelegatedStaking.StartMode:type_name -> basetypes.good.v1.GoodStartMode
	17, // 7: good.middleware.delegatedstaking.v1.DelegatedStaking.State:type_name -> basetypes.good.v1.GoodState
	16, // 8: good.middleware.delegatedstaking.v1.DelegatedStaking.RewardState:type_name -> basetypes.good.v1.BenefitState
	18, // 9: good.middleware.delegatedstaking.v1.DelegatedStaking.GoodCoins:type_name -> good.middleware.good1.coin.v1.GoodCoinInfo
	19, // 10: good.middleware.delegatedstaking.v1.Conds.ID:type_name -> basetypes.v1.Uint32Val
	20, // 11: good.middleware.delegatedstaking.v1.Conds.EntID:type_name -> basetypes.v1.StringVal
	20, // 12: good.middleware.delegatedstaking.v1.Conds.GoodID:type_name -> basetypes.v1.StringVal
	21, // 13: good.middleware.delegatedstaking.v1.Conds.GoodIDs:type_name -> basetypes.v1.StringSliceVal
	19, // 14: good.middleware.delegatedstaking.v1.Conds.GoodType:type_name -> basetypes.v1.Uint32Val
	22, // 15: good.middleware.delegatedstaking.v1.Conds.GoodTypes:type_name -> basetypes.v1.Uint32SliceVal
	20, // 16: good.middleware.delegatedstaking.v1.Conds.CoinTypeID:type_name -> basetypes.v1.StringVal
	21, // 17: good.middleware.delegatedstaking.v1.Conds.CoinTypeIDs:type_name -> basetypes.v1.StringSliceVal
	19, // 18: good.middleware.delegatedstaking.v1.Conds.RewardState:type_name -> basetypes.v1.Uint32Val
	19, // 19: good.middleware.delegatedstaking.v1.Conds.RewardAt:type_name -> basetypes.v1.Uint32Val
	0,  // 20: good.middleware.delegatedstaking.v1.CreateDelegatedStakingRequest.Info:type_name -> good.middleware.delegatedstaking.v1.DelegatedStakingReq
	1,  // 21: good.middleware.delegatedstaking.v1.CreateDelegatedStakingResponse.Info:type_name -> good.middleware.delegatedstaking.v1.DelegatedStaking
	0,  // 22: good.middleware.delegatedstaking.v1.UpdateDelegatedStakingRequest.Info:type_name -> good.middleware.delegatedstaking.v1.DelegatedStakingReq
	1,  // 23: good.middleware.delegatedstaking.v1.UpdateDelegatedStakingResponse.Info:type_name -> good.middleware.delegatedstaking.v1.DelegatedStaking
	1,  // 24: good.middleware.delegatedstaking.v1.GetDelegatedStakingResponse.Info:type_name -> good.middleware.delegatedstaking.v1.DelegatedStaking
	2,  // 25: good.middleware.delegatedstaking.v1.GetDelegatedStakingsRequest.Conds:type_name -> good.middleware.delegatedstaking.v1.Conds
	1,  // 26: good.middleware.delegatedstaking.v1.GetDelegatedStakingsResponse.Infos:type_name -> good.middleware.delegatedstaking.v1.DelegatedStaking
	0,  // 27: good.middleware.delegatedstaking.v1.DeleteDelegatedStakingRequest.Info:type_name -> good.middleware.delegatedstaking.v1.DelegatedStakingReq
	1,  // 28: good.middleware.delegatedstaking.v1.DeleteDelegatedStakingResponse.Info:type_name -> good.middleware.delegatedstaking.v1.DelegatedStaking
	3,  // 29: good.middleware.delegatedstaking.v1.Middleware.CreateDelegatedStaking:input_type -> good.middleware.delegatedstaking.v1.CreateDelegatedStakingRequest
	5,  // 30: good.middleware.delegatedstaking.v1.Middleware.UpdateDelegatedStaking:input_type -> good.middleware.delegatedstaking.v1.UpdateDelegatedStakingRequest
	7,  // 31: good.middleware.delegatedstaking.v1.Middleware.GetDelegatedStaking:input_type -> good.middleware.delegatedstaking.v1.GetDelegatedStakingRequest
	9,  // 32: good.middleware.delegatedstaking.v1.Middleware.GetDelegatedStakings:input_type -> good.middleware.delegatedstaking.v1.GetDelegatedStakingsRequest
	11, // 33: good.middleware.delegatedstaking.v1.Middleware.DeleteDelegatedStaking:input_type -> good.middleware.delegatedstaking.v1.DeleteDelegatedStakingRequest
	4,  // 34: good.middleware.delegatedstaking.v1.Middleware.CreateDelegatedStaking:output_type -> good.middleware.delegatedstaking.v1.CreateDelegatedStakingResponse
	6,  // 35: good.middleware.delegatedstaking.v1.Middleware.UpdateDelegatedStaking:output_type -> good.middleware.delegatedstaking.v1.UpdateDelegatedStakingResponse
	8,  // 36: good.middleware.delegatedstaking.v1.Middleware.GetDelegatedStaking:output_type -> good.middleware.delegatedstaking.v1.GetDelegatedStakingResponse
	10, // 37: good.middleware.delegatedstaking.v1.Middleware.GetDelegatedStakings:output_type -> good.middleware.delegatedstaking.v1.GetDelegatedStakingsResponse
	12, // 38: good.middleware.delegatedstaking.v1.Middleware.DeleteDelegatedStaking:output_type -> good.middleware.delegatedstaking.v1.DeleteDelegatedStakingResponse
	34, // [34:39] is the sub-list for method output_type
	29, // [29:34] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_init() }
func file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_init() {
	if File_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegatedStakingReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegatedStaking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDelegatedStakingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDelegatedStakingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDelegatedStakingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDelegatedStakingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDelegatedStakingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDelegatedStakingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDelegatedStakingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDelegatedStakingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDelegatedStakingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDelegatedStakingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_goTypes,
		DependencyIndexes: file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_depIdxs,
		MessageInfos:      file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_msgTypes,
	}.Build()
	File_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto = out.File
	file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_rawDesc = nil
	file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_goTypes = nil
	file_npool_good_mw_v1_delegatedstaking_delegatedstaking_proto_depIdxs = nil
}
