syntax = "proto3";

package good.middleware.app.powerrental.v1;

option go_package = "github.com/NpoolPlatform/message/npool/good/mw/v1/app/powerrental";

import "npool/basetypes/v1/conds.proto";
import "npool/basetypes/good/v1/enums.proto";
import "npool/good/mw/v1/good/coin/coin.proto";
import "npool/good/mw/v1/app/good/description/description.proto";
import "npool/good/mw/v1/app/good/poster/poster.proto";
import "npool/good/mw/v1/app/good/label/label.proto";
import "npool/good/mw/v1/app/good/display/name/name.proto";
import "npool/good/mw/v1/app/good/display/color/color.proto";
import "npool/good/mw/v1/app/good/stock/mining/mining.proto";
import "npool/good/mw/v1/good/stock/stock.proto";

service Middleware {
    rpc CreatePowerRental (CreatePowerRentalRequest) returns (CreatePowerRentalResponse) {}
    rpc UpdatePowerRental (UpdatePowerRentalRequest) returns (UpdatePowerRentalResponse) {}
    rpc GetPowerRental (GetPowerRentalRequest) returns (GetPowerRentalResponse) {}
    rpc GetPowerRentals (GetPowerRentalsRequest) returns (GetPowerRentalsResponse) {}
    rpc ExistPowerRentalConds (ExistPowerRentalCondsRequest) returns (ExistPowerRentalCondsResponse) {}
    rpc DeletePowerRental (DeletePowerRentalRequest) returns (DeletePowerRentalResponse) {}
}

message PowerRentalReq {
    // Base of power rental
    optional uint32 ID = 10;
    optional string EntID = 20;
    optional string AppID = 30;
    optional string GoodID = 40;
    optional string AppGoodID = 50;
    optional bool Purchasable = 60;
    optional bool EnableProductPage = 70;
    optional string ProductPage = 80;
    optional bool Online = 90;
    optional bool Visible = 100;
    optional string Name = 110;
    optional int32 DisplayIndex = 120;
    optional string Banner = 130;

    // Good information
    optional uint32 ServiceStartAt = 140;
    optional basetypes.good.v1.CancelMode CancelMode = 150;
    optional uint32 CancelableBeforeStartSeconds = 160;
    optional bool EnableSetCommission =170;
    optional string MinOrderAmount = 180;
    optional string MaxOrderAmount = 190;
    optional string MaxUserAmount = 200;
    optional uint32 MinOrderDurationSeconds = 210;
    optional uint32 MaxOrderDurationSeconds = 220;
    optional string UnitPrice = 230;
    optional uint32 SaleStartAt = 240;
    optional uint32 SaleEndAt = 250;
    optional basetypes.good.v1.GoodSaleMode SaleMode = 260;
    optional bool FixedDuration = 270;
    optional bool PackageWithRequireds = 280;

    // Good stock
    optional string AppGoodStockID = 290;
}

message PowerRental {
    // @inject_tag: sql:"id"
    uint32 ID = 10;
    // @inject_tag: sql:"ent_id"
    string EntID = 20;
    // @inject_tag: sql:"app_id"
    string AppID = 30;
    // @inject_tag: sql:"good_id"
    string GoodID = 40;
    // @inject_tag: sql:"app_good_id"
    string AppGoodID = 41;

    // @inject_tag: sql:"device_type_id"
    string DeviceTypeID = 50;
    // @inject_tag: sql:"device_type"
    string DeviceType = 60;
    // @inject_tag: sql:"device_manufacturer_name"
    string DeviceManufacturerName = 70;
    // @inject_tag: sql:"device_manufacturer_logo"
    string DeviceManufacturerLogo = 80;
    // @inject_tag: sql:"device_power_consumption"
    uint32 DevicePowerConsumption = 90;
    // @inject_tag: sql:"device_shipment_at"
    uint32 DeviceShipmentAt = 100;

    // @inject_tag: sql:"vendor_location_id"
    string VendorLocationID = 110;
    // @inject_tag: sql:"vendor_brand"
    string VendorBrand = 120;
    // @inject_tag: sql:"vendor_logo"
    string VendorLogo = 130;
    // @inject_tag: sql:"vendor_country"
    string VendorCountry = 140;
    // @inject_tag: sql:"vendor_province"
    string VendorProvince = 150;

    // @inject_tag: sql:"unit_price"
    string UnitPrice = 160;
    // @inject_tag: sql:"quantity_unit"
    string QuantityUnit = 170;
    // @inject_tag: sql:"quantity_unit_amount"
    string QuantityUnitAmount = 180;
    // @inject_tag: sql:"delivery_at"
    uint32 DeliveryAt = 190;
    // @inject_tag: sql:"unit_lock_deposit"
    string UnitLockDeposit = 200;
    // @inject_tag: sql:"duration_display_type"
    string DurationDisplayTypeStr = 210;
    basetypes.good.v1.GoodDurationType DurationDisplayType = 220;

    // @inject_tag: sql:"good_type"
    string GoodTypeStr = 230;
    basetypes.good.v1.GoodType GoodType = 240;
    // @inject_tag: sql:"benefit_type"
    string BenefitTypeStr = 250;
    basetypes.good.v1.BenefitType BenefitType = 260;
    // @inject_tag: sql:"good_name"
    string GoodName = 270;
    // @inject_tag: sql:"service_start_at"
    uint32 ServiceStartAt = 280;
    // @inject_tag: sql:"start_mode"
    string StartModeStr = 290;
    basetypes.good.v1.GoodStartMode StartMode = 300;
    // @inject_tag: sql:"test_only"
    bool TestOnly = 310;
    // @inject_tag: sql:"benefit_interval_hours"
    uint32 BenefitIntervalHours = 320;
    // @inject_tag: sql:"good_purchasable"
    bool GoodPurchasable = 330;
    // @inject_tag: sql:"good_online"
    bool GoodOnline = 340;
    // @inject_tag: sql:"stock_mode"
    string StockModeStr = 350;
    basetypes.good.v1.GoodStockMode StockMode = 360;

    // @inject_tag: sql:"app_good_purchasable"
    bool AppGoodPurchasable = 370;
    // @inject_tag: sql:"app_good_online"
    bool AppGoodOnline = 380;
    // @inject_tag: sql:"enable_product_page"
    bool EnableProductPage = 390;
    // @inject_tag: sql:"product_page"
    string ProductPage = 400;
    // @inject_tag: sql:"visible"
    bool Visible = 410;
    // @inject_tag: sql:"app_good_name"
    string AppGoodName = 420;
    // @inject_tag: sql:"display_index"
    int32 DisplayIndex = 430;
    // @inject_tag: sql:"banner"
    string Banner = 440;
    // @inject_tag: sql:"cancel_mode"
    string CancelModeStr = 450;
    basetypes.good.v1.CancelMode CancelMode = 460;
    // @inject_tag: sql:"cancelable_before_start_seconds"
    uint32 CancelableBeforeStartSeconds = 470;
    // @inject_tag: sql:"enable_set_commission"
    bool EnableSetCommission = 480;
    // @inject_tag: sql:"min_order_amount"
    string MinOrderAmount = 490;
    // @inject_tag: sql:"max_order_amount"
    string MaxOrderAmount = 500;
    // @inject_tag: sql:"max_user_amount"
    string MaxUserAmount = 510;
    // @inject_tag: sql:"min_order_duration_seconds"
    uint32 MinOrderDurationSeconds = 520;
    // @inject_tag: sql:"max_order_duration_seconds"
    uint32 MaxOrderDurationSeconds = 530;
    // @inject_tag: sql:"sale_start_at"
    uint32 SaleStartAt = 540;
    // @inject_tag: sql:"sale_end_at"
    uint32 SaleEndAt = 550;
    // @inject_tag: sql:"sale_mode"
    string SaleModeStr = 560;
    basetypes.good.v1.GoodSaleMode SaleMode  = 570;
    // @inject_tag: sql:"fixed_duration"
    bool FixedDuration = 580;
    // @inject_tag: sql:"package_with_requireds"
    bool PackageWithRequireds = 590;

    // Only for legacy good
    // @inject_tag: sql:"technique_fee_ratio"
    string TechniqueFeeRatio = 600;

    // Good information
    // @inject_tag: sql:"good_stock_id"
    string GoodStockID = 610;
    // @inject_tag: sql:"good_total"
    string GoodTotal = 620;
    // @inject_tag: sql:"good_spot_quantity"
    string GoodSpotQuantity = 630;

    // @inject_tag: sql:"app_good_stock_id"
    string AppGoodStockID = 640;
    // @inject_tag: sql:"app_good_reserved"
    string AppGoodReserved = 650;
    // @inject_tag: sql:"app_good_spot_quantity"
    string AppGoodSpotQuantity = 660;
    // @inject_tag: sql:"app_good_locked"
    string AppGoodLocked = 670;
    // @inject_tag: sql:"app_good_in_service"
    string AppGoodInService = 680;
    // @inject_tag: sql:"app_good_wait_start"
    string AppGoodWaitStart = 690;
    // @inject_tag: sql:"app_good_sold"
    string AppGoodSold = 700;

    // @inject_tag: sql:"likes"
    uint32 Likes = 710;
    // @inject_tag: sql:"dislikes"
    uint32 Dislikes = 720;
    // @inject_tag: sql:"score"
    string Score = 730;
    // @inject_tag: sql:"score_count"
    uint32 ScoreCount = 740;
    // @inject_tag: sql:"recommend_count"
    uint32 RecommendCount = 750;
    // @inject_tag: sql:"comment_count"
    uint32 CommentCount = 760;

    // @inject_tag: sql:"last_reward_at"
    uint32 LastRewardAt = 770;
    // @inject_tag: sql:"last_reward_amount"
    string LastRewardAmount = 780;
    // @inject_tag: sql:"total_reward_amount"
    string TotalRewardAmount  = 790;
    // @inject_tag: sql:"last_unit_reward_amount"
    string LastUnitRewardAmount = 800;

    repeated good.middleware.good1.coin.v1.GoodCoinInfo GoodCoins = 900;
    repeated good.middleware.app.good1.description.v1.DescriptionInfo Descriptions = 910;
    repeated good.middleware.app.good1.poster.v1.PosterInfo Posters = 920;
    repeated good.middleware.app.good1.display.name.v1.DisplayNameInfo DisplayNames = 930;
    repeated good.middleware.app.good1.display.color.v1.DisplayColorInfo DisplayColors = 940;
    repeated good.middleware.app.good1.stock.mining.v1.StockInfo AppMiningGoodStocks = 950;
    repeated good.middleware.good1.stock.v1.MiningGoodStockInfo MiningGoodStocks = 960;
    repeated good.middleware.app.good1.label.v1.LabelInfo Labels = 970;

    // @inject_tag: sql:"created_at"
    uint32 CreatedAt = 1000;
    // @inject_tag: sql:"updated_at"
    uint32 UpdatedAt = 1010;
}

message Conds {
    optional basetypes.v1.Uint32Val ID = 10;
    optional basetypes.v1.StringVal EntID = 20;
    optional basetypes.v1.StringVal AppID = 30;
    optional basetypes.v1.StringVal GoodID = 40;
    optional basetypes.v1.StringSliceVal GoodIDs = 50;
    optional basetypes.v1.StringVal AppGoodID = 60;
    optional basetypes.v1.StringSliceVal AppGoodIDs = 70;
    optional basetypes.v1.Uint32Val GoodType = 80;
    optional basetypes.v1.Uint32SliceVal GoodTypes = 90;
    optional basetypes.v1.StringVal CoinTypeID = 100;
    optional basetypes.v1.StringSliceVal CoinTypeIDs = 110;
}

message CreatePowerRentalRequest {
    PowerRentalReq Info = 10;
}

message CreatePowerRentalResponse {
    PowerRental Info = 10;
}

message UpdatePowerRentalRequest {
    PowerRentalReq Info = 10;
}

message UpdatePowerRentalResponse {
    PowerRental Info = 10;
}

message GetPowerRentalRequest {
    string AppGoodID = 10;
}

message GetPowerRentalResponse {
    PowerRental Info = 10;
}

message GetPowerRentalsRequest {
    Conds Conds = 10;
    int32 Offset = 20;
    int32 Limit = 30;
}

message GetPowerRentalsResponse {
    repeated PowerRental Infos = 10;
    uint32 Total = 20;
}

message ExistPowerRentalCondsRequest {
    Conds Conds = 10;
}

message ExistPowerRentalCondsResponse {
    bool Info = 10;
}

message DeletePowerRentalRequest {
    PowerRentalReq Info = 10;
}

message DeletePowerRentalResponse {
    PowerRental Info = 10;
}
