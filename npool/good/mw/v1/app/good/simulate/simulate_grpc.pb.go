// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/good/mw/v1/app/good/simulate/simulate.proto

package simulate

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Middleware_CreateSimulate_FullMethodName     = "/good.middleware.app.good1.simulate.v1.Middleware/CreateSimulate"
	Middleware_GetSimulate_FullMethodName        = "/good.middleware.app.good1.simulate.v1.Middleware/GetSimulate"
	Middleware_UpdateSimulate_FullMethodName     = "/good.middleware.app.good1.simulate.v1.Middleware/UpdateSimulate"
	Middleware_ExistSimulateConds_FullMethodName = "/good.middleware.app.good1.simulate.v1.Middleware/ExistSimulateConds"
	Middleware_GetSimulates_FullMethodName       = "/good.middleware.app.good1.simulate.v1.Middleware/GetSimulates"
	Middleware_DeleteSimulate_FullMethodName     = "/good.middleware.app.good1.simulate.v1.Middleware/DeleteSimulate"
)

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
	CreateSimulate(ctx context.Context, in *CreateSimulateRequest, opts ...grpc.CallOption) (*CreateSimulateResponse, error)
	GetSimulate(ctx context.Context, in *GetSimulateRequest, opts ...grpc.CallOption) (*GetSimulateResponse, error)
	UpdateSimulate(ctx context.Context, in *UpdateSimulateRequest, opts ...grpc.CallOption) (*UpdateSimulateResponse, error)
	ExistSimulateConds(ctx context.Context, in *ExistSimulateCondsRequest, opts ...grpc.CallOption) (*ExistSimulateCondsResponse, error)
	GetSimulates(ctx context.Context, in *GetSimulatesRequest, opts ...grpc.CallOption) (*GetSimulatesResponse, error)
	DeleteSimulate(ctx context.Context, in *DeleteSimulateRequest, opts ...grpc.CallOption) (*DeleteSimulateResponse, error)
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) CreateSimulate(ctx context.Context, in *CreateSimulateRequest, opts ...grpc.CallOption) (*CreateSimulateResponse, error) {
	out := new(CreateSimulateResponse)
	err := c.cc.Invoke(ctx, Middleware_CreateSimulate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetSimulate(ctx context.Context, in *GetSimulateRequest, opts ...grpc.CallOption) (*GetSimulateResponse, error) {
	out := new(GetSimulateResponse)
	err := c.cc.Invoke(ctx, Middleware_GetSimulate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) UpdateSimulate(ctx context.Context, in *UpdateSimulateRequest, opts ...grpc.CallOption) (*UpdateSimulateResponse, error) {
	out := new(UpdateSimulateResponse)
	err := c.cc.Invoke(ctx, Middleware_UpdateSimulate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ExistSimulateConds(ctx context.Context, in *ExistSimulateCondsRequest, opts ...grpc.CallOption) (*ExistSimulateCondsResponse, error) {
	out := new(ExistSimulateCondsResponse)
	err := c.cc.Invoke(ctx, Middleware_ExistSimulateConds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetSimulates(ctx context.Context, in *GetSimulatesRequest, opts ...grpc.CallOption) (*GetSimulatesResponse, error) {
	out := new(GetSimulatesResponse)
	err := c.cc.Invoke(ctx, Middleware_GetSimulates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) DeleteSimulate(ctx context.Context, in *DeleteSimulateRequest, opts ...grpc.CallOption) (*DeleteSimulateResponse, error) {
	out := new(DeleteSimulateResponse)
	err := c.cc.Invoke(ctx, Middleware_DeleteSimulate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
	CreateSimulate(context.Context, *CreateSimulateRequest) (*CreateSimulateResponse, error)
	GetSimulate(context.Context, *GetSimulateRequest) (*GetSimulateResponse, error)
	UpdateSimulate(context.Context, *UpdateSimulateRequest) (*UpdateSimulateResponse, error)
	ExistSimulateConds(context.Context, *ExistSimulateCondsRequest) (*ExistSimulateCondsResponse, error)
	GetSimulates(context.Context, *GetSimulatesRequest) (*GetSimulatesResponse, error)
	DeleteSimulate(context.Context, *DeleteSimulateRequest) (*DeleteSimulateResponse, error)
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) CreateSimulate(context.Context, *CreateSimulateRequest) (*CreateSimulateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSimulate not implemented")
}
func (UnimplementedMiddlewareServer) GetSimulate(context.Context, *GetSimulateRequest) (*GetSimulateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSimulate not implemented")
}
func (UnimplementedMiddlewareServer) UpdateSimulate(context.Context, *UpdateSimulateRequest) (*UpdateSimulateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSimulate not implemented")
}
func (UnimplementedMiddlewareServer) ExistSimulateConds(context.Context, *ExistSimulateCondsRequest) (*ExistSimulateCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistSimulateConds not implemented")
}
func (UnimplementedMiddlewareServer) GetSimulates(context.Context, *GetSimulatesRequest) (*GetSimulatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSimulates not implemented")
}
func (UnimplementedMiddlewareServer) DeleteSimulate(context.Context, *DeleteSimulateRequest) (*DeleteSimulateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSimulate not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_CreateSimulate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSimulateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateSimulate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_CreateSimulate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateSimulate(ctx, req.(*CreateSimulateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetSimulate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSimulateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetSimulate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetSimulate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetSimulate(ctx, req.(*GetSimulateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_UpdateSimulate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSimulateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).UpdateSimulate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_UpdateSimulate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).UpdateSimulate(ctx, req.(*UpdateSimulateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ExistSimulateConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistSimulateCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ExistSimulateConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_ExistSimulateConds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ExistSimulateConds(ctx, req.(*ExistSimulateCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetSimulates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSimulatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetSimulates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetSimulates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetSimulates(ctx, req.(*GetSimulatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_DeleteSimulate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSimulateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).DeleteSimulate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_DeleteSimulate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).DeleteSimulate(ctx, req.(*DeleteSimulateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "good.middleware.app.good1.simulate.v1.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSimulate",
			Handler:    _Middleware_CreateSimulate_Handler,
		},
		{
			MethodName: "GetSimulate",
			Handler:    _Middleware_GetSimulate_Handler,
		},
		{
			MethodName: "UpdateSimulate",
			Handler:    _Middleware_UpdateSimulate_Handler,
		},
		{
			MethodName: "ExistSimulateConds",
			Handler:    _Middleware_ExistSimulateConds_Handler,
		},
		{
			MethodName: "GetSimulates",
			Handler:    _Middleware_GetSimulates_Handler,
		},
		{
			MethodName: "DeleteSimulate",
			Handler:    _Middleware_DeleteSimulate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/good/mw/v1/app/good/simulate/simulate.proto",
}
