// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.18.1
// source: npool/good/mw/v1/app/good/display/color/color.proto

package color

import (
	_ "github.com/NpoolPlatform/message/npool/basetypes/good/v1"
	v1 "github.com/NpoolPlatform/message/npool/basetypes/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DisplayColorReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        *uint32 `protobuf:"varint,9,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID     *string `protobuf:"bytes,10,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	AppGoodID *string `protobuf:"bytes,20,opt,name=AppGoodID,proto3,oneof" json:"AppGoodID,omitempty"`
	Color     *string `protobuf:"bytes,30,opt,name=Color,proto3,oneof" json:"Color,omitempty"`
	Index     *uint32 `protobuf:"varint,40,opt,name=Index,proto3,oneof" json:"Index,omitempty"`
}

func (x *DisplayColorReq) Reset() {
	*x = DisplayColorReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_good_display_color_color_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisplayColorReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisplayColorReq) ProtoMessage() {}

func (x *DisplayColorReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_good_display_color_color_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisplayColorReq.ProtoReflect.Descriptor instead.
func (*DisplayColorReq) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_good_display_color_color_proto_rawDescGZIP(), []int{0}
}

func (x *DisplayColorReq) GetID() uint32 {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return 0
}

func (x *DisplayColorReq) GetEntID() string {
	if x != nil && x.EntID != nil {
		return *x.EntID
	}
	return ""
}

func (x *DisplayColorReq) GetAppGoodID() string {
	if x != nil && x.AppGoodID != nil {
		return *x.AppGoodID
	}
	return ""
}

func (x *DisplayColorReq) GetColor() string {
	if x != nil && x.Color != nil {
		return *x.Color
	}
	return ""
}

func (x *DisplayColorReq) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

type DisplayColor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: sql:"id"
	ID uint32 `protobuf:"varint,9,opt,name=ID,proto3" json:"ID,omitempty" sql:"id"`
	// @inject_tag: sql:"ent_id"
	EntID string `protobuf:"bytes,10,opt,name=EntID,proto3" json:"EntID,omitempty" sql:"ent_id"`
	// @inject_tag: sql:"app_id"
	AppID string `protobuf:"bytes,20,opt,name=AppID,proto3" json:"AppID,omitempty" sql:"app_id"`
	// @inject_tag: sql:"good_id"
	GoodID string `protobuf:"bytes,30,opt,name=GoodID,proto3" json:"GoodID,omitempty" sql:"good_id"`
	// @inject_tag: sql:"good_name"
	GoodName string `protobuf:"bytes,40,opt,name=GoodName,proto3" json:"GoodName,omitempty" sql:"good_name"`
	// @inject_tag: sql:"app_good_id"
	AppGoodID string `protobuf:"bytes,50,opt,name=AppGoodID,proto3" json:"AppGoodID,omitempty" sql:"app_good_id"`
	// @inject_tag: sql:"app_good_name"
	AppGoodName string `protobuf:"bytes,60,opt,name=AppGoodName,proto3" json:"AppGoodName,omitempty" sql:"app_good_name"`
	// @inject_tag: sql:"color"
	Color string `protobuf:"bytes,70,opt,name=Color,proto3" json:"Color,omitempty" sql:"color"`
	// @inject_tag: sql:"good_type"
	GoodType string `protobuf:"bytes,80,opt,name=GoodType,proto3" json:"GoodType,omitempty" sql:"good_type"`
	// @inject_tag: sql:"index"
	Index uint32 `protobuf:"varint,90,opt,name=Index,proto3" json:"Index,omitempty" sql:"index"`
	// @inject_tag: sql:"created_at"
	CreatedAt uint32 `protobuf:"varint,1000,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
	// @inject_tag: sql:"updated_at"
	UpdatedAt uint32 `protobuf:"varint,1010,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty" sql:"updated_at"`
}

func (x *DisplayColor) Reset() {
	*x = DisplayColor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_good_display_color_color_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisplayColor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisplayColor) ProtoMessage() {}

func (x *DisplayColor) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_good_display_color_color_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisplayColor.ProtoReflect.Descriptor instead.
func (*DisplayColor) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_good_display_color_color_proto_rawDescGZIP(), []int{1}
}

func (x *DisplayColor) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *DisplayColor) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *DisplayColor) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *DisplayColor) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *DisplayColor) GetGoodName() string {
	if x != nil {
		return x.GoodName
	}
	return ""
}

func (x *DisplayColor) GetAppGoodID() string {
	if x != nil {
		return x.AppGoodID
	}
	return ""
}

func (x *DisplayColor) GetAppGoodName() string {
	if x != nil {
		return x.AppGoodName
	}
	return ""
}

func (x *DisplayColor) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *DisplayColor) GetGoodType() string {
	if x != nil {
		return x.GoodType
	}
	return ""
}

func (x *DisplayColor) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *DisplayColor) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *DisplayColor) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         *v1.Uint32Val      `protobuf:"bytes,9,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID      *v1.StringVal      `protobuf:"bytes,10,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	AppID      *v1.StringVal      `protobuf:"bytes,20,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	GoodID     *v1.StringVal      `protobuf:"bytes,30,opt,name=GoodID,proto3,oneof" json:"GoodID,omitempty"`
	GoodIDs    *v1.StringSliceVal `protobuf:"bytes,40,opt,name=GoodIDs,proto3,oneof" json:"GoodIDs,omitempty"`
	AppGoodID  *v1.StringVal      `protobuf:"bytes,50,opt,name=AppGoodID,proto3,oneof" json:"AppGoodID,omitempty"`
	AppGoodIDs *v1.StringSliceVal `protobuf:"bytes,60,opt,name=AppGoodIDs,proto3,oneof" json:"AppGoodIDs,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_good_display_color_color_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_good_display_color_color_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_good_display_color_color_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *v1.Uint32Val {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetEntID() *v1.StringVal {
	if x != nil {
		return x.EntID
	}
	return nil
}

func (x *Conds) GetAppID() *v1.StringVal {
	if x != nil {
		return x.AppID
	}
	return nil
}

func (x *Conds) GetGoodID() *v1.StringVal {
	if x != nil {
		return x.GoodID
	}
	return nil
}

func (x *Conds) GetGoodIDs() *v1.StringSliceVal {
	if x != nil {
		return x.GoodIDs
	}
	return nil
}

func (x *Conds) GetAppGoodID() *v1.StringVal {
	if x != nil {
		return x.AppGoodID
	}
	return nil
}

func (x *Conds) GetAppGoodIDs() *v1.StringSliceVal {
	if x != nil {
		return x.AppGoodIDs
	}
	return nil
}

type CreateDisplayColorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *DisplayColorReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateDisplayColorRequest) Reset() {
	*x = CreateDisplayColorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_good_display_color_color_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDisplayColorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDisplayColorRequest) ProtoMessage() {}

func (x *CreateDisplayColorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_good_display_color_color_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDisplayColorRequest.ProtoReflect.Descriptor instead.
func (*CreateDisplayColorRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_good_display_color_color_proto_rawDescGZIP(), []int{3}
}

func (x *CreateDisplayColorRequest) GetInfo() *DisplayColorReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateDisplayColorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *DisplayColor `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateDisplayColorResponse) Reset() {
	*x = CreateDisplayColorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_good_display_color_color_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDisplayColorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDisplayColorResponse) ProtoMessage() {}

func (x *CreateDisplayColorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_good_display_color_color_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDisplayColorResponse.ProtoReflect.Descriptor instead.
func (*CreateDisplayColorResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_good_display_color_color_proto_rawDescGZIP(), []int{4}
}

func (x *CreateDisplayColorResponse) GetInfo() *DisplayColor {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateDisplayColorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *DisplayColorReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateDisplayColorRequest) Reset() {
	*x = UpdateDisplayColorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_good_display_color_color_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDisplayColorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDisplayColorRequest) ProtoMessage() {}

func (x *UpdateDisplayColorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_good_display_color_color_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDisplayColorRequest.ProtoReflect.Descriptor instead.
func (*UpdateDisplayColorRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_good_display_color_color_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateDisplayColorRequest) GetInfo() *DisplayColorReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateDisplayColorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *DisplayColor `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateDisplayColorResponse) Reset() {
	*x = UpdateDisplayColorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_good_display_color_color_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDisplayColorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDisplayColorResponse) ProtoMessage() {}

func (x *UpdateDisplayColorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_good_display_color_color_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDisplayColorResponse.ProtoReflect.Descriptor instead.
func (*UpdateDisplayColorResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_good_display_color_color_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateDisplayColorResponse) GetInfo() *DisplayColor {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetDisplayColorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntID string `protobuf:"bytes,10,opt,name=EntID,proto3" json:"EntID,omitempty"`
}

func (x *GetDisplayColorRequest) Reset() {
	*x = GetDisplayColorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_good_display_color_color_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDisplayColorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDisplayColorRequest) ProtoMessage() {}

func (x *GetDisplayColorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_good_display_color_color_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDisplayColorRequest.ProtoReflect.Descriptor instead.
func (*GetDisplayColorRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_good_display_color_color_proto_rawDescGZIP(), []int{7}
}

func (x *GetDisplayColorRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

type GetDisplayColorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *DisplayColor `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetDisplayColorResponse) Reset() {
	*x = GetDisplayColorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_good_display_color_color_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDisplayColorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDisplayColorResponse) ProtoMessage() {}

func (x *GetDisplayColorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_good_display_color_color_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDisplayColorResponse.ProtoReflect.Descriptor instead.
func (*GetDisplayColorResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_good_display_color_color_proto_rawDescGZIP(), []int{8}
}

func (x *GetDisplayColorResponse) GetInfo() *DisplayColor {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetDisplayColorsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetDisplayColorsRequest) Reset() {
	*x = GetDisplayColorsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_good_display_color_color_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDisplayColorsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDisplayColorsRequest) ProtoMessage() {}

func (x *GetDisplayColorsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_good_display_color_color_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDisplayColorsRequest.ProtoReflect.Descriptor instead.
func (*GetDisplayColorsRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_good_display_color_color_proto_rawDescGZIP(), []int{9}
}

func (x *GetDisplayColorsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetDisplayColorsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetDisplayColorsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetDisplayColorsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*DisplayColor `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32          `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetDisplayColorsResponse) Reset() {
	*x = GetDisplayColorsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_good_display_color_color_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDisplayColorsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDisplayColorsResponse) ProtoMessage() {}

func (x *GetDisplayColorsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_good_display_color_color_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDisplayColorsResponse.ProtoReflect.Descriptor instead.
func (*GetDisplayColorsResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_good_display_color_color_proto_rawDescGZIP(), []int{10}
}

func (x *GetDisplayColorsResponse) GetInfos() []*DisplayColor {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetDisplayColorsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type DeleteDisplayColorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *DisplayColorReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteDisplayColorRequest) Reset() {
	*x = DeleteDisplayColorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_good_display_color_color_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDisplayColorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDisplayColorRequest) ProtoMessage() {}

func (x *DeleteDisplayColorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_good_display_color_color_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDisplayColorRequest.ProtoReflect.Descriptor instead.
func (*DeleteDisplayColorRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_good_display_color_color_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteDisplayColorRequest) GetInfo() *DisplayColorReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type DeleteDisplayColorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *DisplayColor `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteDisplayColorResponse) Reset() {
	*x = DeleteDisplayColorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_good_display_color_color_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDisplayColorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDisplayColorResponse) ProtoMessage() {}

func (x *DeleteDisplayColorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_good_display_color_color_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDisplayColorResponse.ProtoReflect.Descriptor instead.
func (*DeleteDisplayColorResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_good_display_color_color_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteDisplayColorResponse) GetInfo() *DisplayColor {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_good_mw_v1_app_good_display_color_color_proto protoreflect.FileDescriptor

var file_npool_good_mw_v1_app_good_display_color_color_proto_rawDesc = []byte{
	0x0a, 0x33, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x6d, 0x77, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x2f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2a, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31,
	0x2e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x76,
	0x31, 0x1a, 0x1e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x23, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcd, 0x01, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x41, 0x70,
	0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x05,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45,
	0x6e, 0x74, 0x49, 0x44, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64,
	0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xc4, 0x02, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a,
	0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x47,
	0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x47,
	0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f,
	0x6f, 0x64, 0x49, 0x44, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x70, 0x70, 0x47,
	0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x70, 0x70, 0x47,
	0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x1d, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xe8, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xf2, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xde, 0x03,
	0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x02,
	0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x01, 0x52,
	0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x48, 0x02, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a,
	0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44,
	0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x07, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x73, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56,
	0x61, 0x6c, 0x48, 0x04, 0x52, 0x07, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x3a, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x05, 0x52, 0x09,
	0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x0a,
	0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x06,
	0x52, 0x0a, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x41, 0x70, 0x70, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x47,
	0x6f, 0x6f, 0x64, 0x49, 0x44, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44,
	0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x73, 0x22, 0x6c,
	0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6a, 0x0a, 0x1a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6c, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6a, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x2e, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74,
	0x49, 0x44, 0x22, 0x67, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x2e,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x90, 0x01, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x31, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x80,
	0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x05, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x22, 0x6c, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x6a, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x2e,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0xc5, 0x06, 0x0a, 0x0a,
	0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x12, 0xa5, 0x01, 0x0a, 0x12, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x45, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0xa5, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x45, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x46, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9c, 0x01, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x42,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x43, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9f, 0x01, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x43,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa5, 0x01, 0x0a, 0x12,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x12, 0x45, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x42, 0x4a, 0x5a, 0x48, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f,
	0x6f, 0x64, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67, 0x6f, 0x6f,
	0x64, 0x2f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x2f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_good_mw_v1_app_good_display_color_color_proto_rawDescOnce sync.Once
	file_npool_good_mw_v1_app_good_display_color_color_proto_rawDescData = file_npool_good_mw_v1_app_good_display_color_color_proto_rawDesc
)

func file_npool_good_mw_v1_app_good_display_color_color_proto_rawDescGZIP() []byte {
	file_npool_good_mw_v1_app_good_display_color_color_proto_rawDescOnce.Do(func() {
		file_npool_good_mw_v1_app_good_display_color_color_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_good_mw_v1_app_good_display_color_color_proto_rawDescData)
	})
	return file_npool_good_mw_v1_app_good_display_color_color_proto_rawDescData
}

var file_npool_good_mw_v1_app_good_display_color_color_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_npool_good_mw_v1_app_good_display_color_color_proto_goTypes = []interface{}{
	(*DisplayColorReq)(nil),            // 0: good.middleware.app.good1.display.color.v1.DisplayColorReq
	(*DisplayColor)(nil),               // 1: good.middleware.app.good1.display.color.v1.DisplayColor
	(*Conds)(nil),                      // 2: good.middleware.app.good1.display.color.v1.Conds
	(*CreateDisplayColorRequest)(nil),  // 3: good.middleware.app.good1.display.color.v1.CreateDisplayColorRequest
	(*CreateDisplayColorResponse)(nil), // 4: good.middleware.app.good1.display.color.v1.CreateDisplayColorResponse
	(*UpdateDisplayColorRequest)(nil),  // 5: good.middleware.app.good1.display.color.v1.UpdateDisplayColorRequest
	(*UpdateDisplayColorResponse)(nil), // 6: good.middleware.app.good1.display.color.v1.UpdateDisplayColorResponse
	(*GetDisplayColorRequest)(nil),     // 7: good.middleware.app.good1.display.color.v1.GetDisplayColorRequest
	(*GetDisplayColorResponse)(nil),    // 8: good.middleware.app.good1.display.color.v1.GetDisplayColorResponse
	(*GetDisplayColorsRequest)(nil),    // 9: good.middleware.app.good1.display.color.v1.GetDisplayColorsRequest
	(*GetDisplayColorsResponse)(nil),   // 10: good.middleware.app.good1.display.color.v1.GetDisplayColorsResponse
	(*DeleteDisplayColorRequest)(nil),  // 11: good.middleware.app.good1.display.color.v1.DeleteDisplayColorRequest
	(*DeleteDisplayColorResponse)(nil), // 12: good.middleware.app.good1.display.color.v1.DeleteDisplayColorResponse
	(*v1.Uint32Val)(nil),               // 13: basetypes.v1.Uint32Val
	(*v1.StringVal)(nil),               // 14: basetypes.v1.StringVal
	(*v1.StringSliceVal)(nil),          // 15: basetypes.v1.StringSliceVal
}
var file_npool_good_mw_v1_app_good_display_color_color_proto_depIdxs = []int32{
	13, // 0: good.middleware.app.good1.display.color.v1.Conds.ID:type_name -> basetypes.v1.Uint32Val
	14, // 1: good.middleware.app.good1.display.color.v1.Conds.EntID:type_name -> basetypes.v1.StringVal
	14, // 2: good.middleware.app.good1.display.color.v1.Conds.AppID:type_name -> basetypes.v1.StringVal
	14, // 3: good.middleware.app.good1.display.color.v1.Conds.GoodID:type_name -> basetypes.v1.StringVal
	15, // 4: good.middleware.app.good1.display.color.v1.Conds.GoodIDs:type_name -> basetypes.v1.StringSliceVal
	14, // 5: good.middleware.app.good1.display.color.v1.Conds.AppGoodID:type_name -> basetypes.v1.StringVal
	15, // 6: good.middleware.app.good1.display.color.v1.Conds.AppGoodIDs:type_name -> basetypes.v1.StringSliceVal
	0,  // 7: good.middleware.app.good1.display.color.v1.CreateDisplayColorRequest.Info:type_name -> good.middleware.app.good1.display.color.v1.DisplayColorReq
	1,  // 8: good.middleware.app.good1.display.color.v1.CreateDisplayColorResponse.Info:type_name -> good.middleware.app.good1.display.color.v1.DisplayColor
	0,  // 9: good.middleware.app.good1.display.color.v1.UpdateDisplayColorRequest.Info:type_name -> good.middleware.app.good1.display.color.v1.DisplayColorReq
	1,  // 10: good.middleware.app.good1.display.color.v1.UpdateDisplayColorResponse.Info:type_name -> good.middleware.app.good1.display.color.v1.DisplayColor
	1,  // 11: good.middleware.app.good1.display.color.v1.GetDisplayColorResponse.Info:type_name -> good.middleware.app.good1.display.color.v1.DisplayColor
	2,  // 12: good.middleware.app.good1.display.color.v1.GetDisplayColorsRequest.Conds:type_name -> good.middleware.app.good1.display.color.v1.Conds
	1,  // 13: good.middleware.app.good1.display.color.v1.GetDisplayColorsResponse.Infos:type_name -> good.middleware.app.good1.display.color.v1.DisplayColor
	0,  // 14: good.middleware.app.good1.display.color.v1.DeleteDisplayColorRequest.Info:type_name -> good.middleware.app.good1.display.color.v1.DisplayColorReq
	1,  // 15: good.middleware.app.good1.display.color.v1.DeleteDisplayColorResponse.Info:type_name -> good.middleware.app.good1.display.color.v1.DisplayColor
	3,  // 16: good.middleware.app.good1.display.color.v1.Middleware.CreateDisplayColor:input_type -> good.middleware.app.good1.display.color.v1.CreateDisplayColorRequest
	5,  // 17: good.middleware.app.good1.display.color.v1.Middleware.UpdateDisplayColor:input_type -> good.middleware.app.good1.display.color.v1.UpdateDisplayColorRequest
	7,  // 18: good.middleware.app.good1.display.color.v1.Middleware.GetDisplayColor:input_type -> good.middleware.app.good1.display.color.v1.GetDisplayColorRequest
	9,  // 19: good.middleware.app.good1.display.color.v1.Middleware.GetDisplayColors:input_type -> good.middleware.app.good1.display.color.v1.GetDisplayColorsRequest
	11, // 20: good.middleware.app.good1.display.color.v1.Middleware.DeleteDisplayColor:input_type -> good.middleware.app.good1.display.color.v1.DeleteDisplayColorRequest
	4,  // 21: good.middleware.app.good1.display.color.v1.Middleware.CreateDisplayColor:output_type -> good.middleware.app.good1.display.color.v1.CreateDisplayColorResponse
	6,  // 22: good.middleware.app.good1.display.color.v1.Middleware.UpdateDisplayColor:output_type -> good.middleware.app.good1.display.color.v1.UpdateDisplayColorResponse
	8,  // 23: good.middleware.app.good1.display.color.v1.Middleware.GetDisplayColor:output_type -> good.middleware.app.good1.display.color.v1.GetDisplayColorResponse
	10, // 24: good.middleware.app.good1.display.color.v1.Middleware.GetDisplayColors:output_type -> good.middleware.app.good1.display.color.v1.GetDisplayColorsResponse
	12, // 25: good.middleware.app.good1.display.color.v1.Middleware.DeleteDisplayColor:output_type -> good.middleware.app.good1.display.color.v1.DeleteDisplayColorResponse
	21, // [21:26] is the sub-list for method output_type
	16, // [16:21] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_npool_good_mw_v1_app_good_display_color_color_proto_init() }
func file_npool_good_mw_v1_app_good_display_color_color_proto_init() {
	if File_npool_good_mw_v1_app_good_display_color_color_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_good_mw_v1_app_good_display_color_color_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisplayColorReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_good_display_color_color_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisplayColor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_good_display_color_color_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_good_display_color_color_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDisplayColorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_good_display_color_color_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDisplayColorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_good_display_color_color_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDisplayColorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_good_display_color_color_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDisplayColorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_good_display_color_color_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDisplayColorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_good_display_color_color_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDisplayColorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_good_display_color_color_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDisplayColorsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_good_display_color_color_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDisplayColorsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_good_display_color_color_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDisplayColorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_good_display_color_color_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDisplayColorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_good_mw_v1_app_good_display_color_color_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_npool_good_mw_v1_app_good_display_color_color_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_good_mw_v1_app_good_display_color_color_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_good_mw_v1_app_good_display_color_color_proto_goTypes,
		DependencyIndexes: file_npool_good_mw_v1_app_good_display_color_color_proto_depIdxs,
		MessageInfos:      file_npool_good_mw_v1_app_good_display_color_color_proto_msgTypes,
	}.Build()
	File_npool_good_mw_v1_app_good_display_color_color_proto = out.File
	file_npool_good_mw_v1_app_good_display_color_color_proto_rawDesc = nil
	file_npool_good_mw_v1_app_good_display_color_color_proto_goTypes = nil
	file_npool_good_mw_v1_app_good_display_color_color_proto_depIdxs = nil
}
