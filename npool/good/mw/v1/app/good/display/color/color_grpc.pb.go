// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/good/mw/v1/app/good/display/color/color.proto

package color

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Middleware_CreateDisplayColor_FullMethodName     = "/good.middleware.app.good1.display.color.v1.Middleware/CreateDisplayColor"
	Middleware_UpdateDisplayColor_FullMethodName     = "/good.middleware.app.good1.display.color.v1.Middleware/UpdateDisplayColor"
	Middleware_GetDisplayColor_FullMethodName        = "/good.middleware.app.good1.display.color.v1.Middleware/GetDisplayColor"
	Middleware_GetDisplayColors_FullMethodName       = "/good.middleware.app.good1.display.color.v1.Middleware/GetDisplayColors"
	Middleware_ExistDisplayColorConds_FullMethodName = "/good.middleware.app.good1.display.color.v1.Middleware/ExistDisplayColorConds"
	Middleware_DeleteDisplayColor_FullMethodName     = "/good.middleware.app.good1.display.color.v1.Middleware/DeleteDisplayColor"
)

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
	CreateDisplayColor(ctx context.Context, in *CreateDisplayColorRequest, opts ...grpc.CallOption) (*CreateDisplayColorResponse, error)
	UpdateDisplayColor(ctx context.Context, in *UpdateDisplayColorRequest, opts ...grpc.CallOption) (*UpdateDisplayColorResponse, error)
	GetDisplayColor(ctx context.Context, in *GetDisplayColorRequest, opts ...grpc.CallOption) (*GetDisplayColorResponse, error)
	GetDisplayColors(ctx context.Context, in *GetDisplayColorsRequest, opts ...grpc.CallOption) (*GetDisplayColorsResponse, error)
	ExistDisplayColorConds(ctx context.Context, in *ExistDisplayColorCondsRequest, opts ...grpc.CallOption) (*ExistDisplayColorCondsResponse, error)
	DeleteDisplayColor(ctx context.Context, in *DeleteDisplayColorRequest, opts ...grpc.CallOption) (*DeleteDisplayColorResponse, error)
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) CreateDisplayColor(ctx context.Context, in *CreateDisplayColorRequest, opts ...grpc.CallOption) (*CreateDisplayColorResponse, error) {
	out := new(CreateDisplayColorResponse)
	err := c.cc.Invoke(ctx, Middleware_CreateDisplayColor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) UpdateDisplayColor(ctx context.Context, in *UpdateDisplayColorRequest, opts ...grpc.CallOption) (*UpdateDisplayColorResponse, error) {
	out := new(UpdateDisplayColorResponse)
	err := c.cc.Invoke(ctx, Middleware_UpdateDisplayColor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetDisplayColor(ctx context.Context, in *GetDisplayColorRequest, opts ...grpc.CallOption) (*GetDisplayColorResponse, error) {
	out := new(GetDisplayColorResponse)
	err := c.cc.Invoke(ctx, Middleware_GetDisplayColor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetDisplayColors(ctx context.Context, in *GetDisplayColorsRequest, opts ...grpc.CallOption) (*GetDisplayColorsResponse, error) {
	out := new(GetDisplayColorsResponse)
	err := c.cc.Invoke(ctx, Middleware_GetDisplayColors_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ExistDisplayColorConds(ctx context.Context, in *ExistDisplayColorCondsRequest, opts ...grpc.CallOption) (*ExistDisplayColorCondsResponse, error) {
	out := new(ExistDisplayColorCondsResponse)
	err := c.cc.Invoke(ctx, Middleware_ExistDisplayColorConds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) DeleteDisplayColor(ctx context.Context, in *DeleteDisplayColorRequest, opts ...grpc.CallOption) (*DeleteDisplayColorResponse, error) {
	out := new(DeleteDisplayColorResponse)
	err := c.cc.Invoke(ctx, Middleware_DeleteDisplayColor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
	CreateDisplayColor(context.Context, *CreateDisplayColorRequest) (*CreateDisplayColorResponse, error)
	UpdateDisplayColor(context.Context, *UpdateDisplayColorRequest) (*UpdateDisplayColorResponse, error)
	GetDisplayColor(context.Context, *GetDisplayColorRequest) (*GetDisplayColorResponse, error)
	GetDisplayColors(context.Context, *GetDisplayColorsRequest) (*GetDisplayColorsResponse, error)
	ExistDisplayColorConds(context.Context, *ExistDisplayColorCondsRequest) (*ExistDisplayColorCondsResponse, error)
	DeleteDisplayColor(context.Context, *DeleteDisplayColorRequest) (*DeleteDisplayColorResponse, error)
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) CreateDisplayColor(context.Context, *CreateDisplayColorRequest) (*CreateDisplayColorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDisplayColor not implemented")
}
func (UnimplementedMiddlewareServer) UpdateDisplayColor(context.Context, *UpdateDisplayColorRequest) (*UpdateDisplayColorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDisplayColor not implemented")
}
func (UnimplementedMiddlewareServer) GetDisplayColor(context.Context, *GetDisplayColorRequest) (*GetDisplayColorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDisplayColor not implemented")
}
func (UnimplementedMiddlewareServer) GetDisplayColors(context.Context, *GetDisplayColorsRequest) (*GetDisplayColorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDisplayColors not implemented")
}
func (UnimplementedMiddlewareServer) ExistDisplayColorConds(context.Context, *ExistDisplayColorCondsRequest) (*ExistDisplayColorCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistDisplayColorConds not implemented")
}
func (UnimplementedMiddlewareServer) DeleteDisplayColor(context.Context, *DeleteDisplayColorRequest) (*DeleteDisplayColorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDisplayColor not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_CreateDisplayColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDisplayColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateDisplayColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_CreateDisplayColor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateDisplayColor(ctx, req.(*CreateDisplayColorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_UpdateDisplayColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDisplayColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).UpdateDisplayColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_UpdateDisplayColor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).UpdateDisplayColor(ctx, req.(*UpdateDisplayColorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetDisplayColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDisplayColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetDisplayColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetDisplayColor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetDisplayColor(ctx, req.(*GetDisplayColorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetDisplayColors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDisplayColorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetDisplayColors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetDisplayColors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetDisplayColors(ctx, req.(*GetDisplayColorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ExistDisplayColorConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistDisplayColorCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ExistDisplayColorConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_ExistDisplayColorConds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ExistDisplayColorConds(ctx, req.(*ExistDisplayColorCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_DeleteDisplayColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDisplayColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).DeleteDisplayColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_DeleteDisplayColor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).DeleteDisplayColor(ctx, req.(*DeleteDisplayColorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "good.middleware.app.good1.display.color.v1.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDisplayColor",
			Handler:    _Middleware_CreateDisplayColor_Handler,
		},
		{
			MethodName: "UpdateDisplayColor",
			Handler:    _Middleware_UpdateDisplayColor_Handler,
		},
		{
			MethodName: "GetDisplayColor",
			Handler:    _Middleware_GetDisplayColor_Handler,
		},
		{
			MethodName: "GetDisplayColors",
			Handler:    _Middleware_GetDisplayColors_Handler,
		},
		{
			MethodName: "ExistDisplayColorConds",
			Handler:    _Middleware_ExistDisplayColorConds_Handler,
		},
		{
			MethodName: "DeleteDisplayColor",
			Handler:    _Middleware_DeleteDisplayColor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/good/mw/v1/app/good/display/color/color.proto",
}
