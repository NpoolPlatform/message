// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/good/mw/v1/app/good/topmost/topmost.proto

package topmost

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Middleware_CreateTopMost_FullMethodName = "/good.middleware.app.good1.topmost.v1.Middleware/CreateTopMost"
	Middleware_UpdateTopMost_FullMethodName = "/good.middleware.app.good1.topmost.v1.Middleware/UpdateTopMost"
	Middleware_GetTopMost_FullMethodName    = "/good.middleware.app.good1.topmost.v1.Middleware/GetTopMost"
	Middleware_GetTopMosts_FullMethodName   = "/good.middleware.app.good1.topmost.v1.Middleware/GetTopMosts"
	Middleware_DeleteTopMost_FullMethodName = "/good.middleware.app.good1.topmost.v1.Middleware/DeleteTopMost"
)

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
	CreateTopMost(ctx context.Context, in *CreateTopMostRequest, opts ...grpc.CallOption) (*CreateTopMostResponse, error)
	UpdateTopMost(ctx context.Context, in *UpdateTopMostRequest, opts ...grpc.CallOption) (*UpdateTopMostResponse, error)
	GetTopMost(ctx context.Context, in *GetTopMostRequest, opts ...grpc.CallOption) (*GetTopMostResponse, error)
	GetTopMosts(ctx context.Context, in *GetTopMostsRequest, opts ...grpc.CallOption) (*GetTopMostsResponse, error)
	DeleteTopMost(ctx context.Context, in *DeleteTopMostRequest, opts ...grpc.CallOption) (*DeleteTopMostResponse, error)
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) CreateTopMost(ctx context.Context, in *CreateTopMostRequest, opts ...grpc.CallOption) (*CreateTopMostResponse, error) {
	out := new(CreateTopMostResponse)
	err := c.cc.Invoke(ctx, Middleware_CreateTopMost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) UpdateTopMost(ctx context.Context, in *UpdateTopMostRequest, opts ...grpc.CallOption) (*UpdateTopMostResponse, error) {
	out := new(UpdateTopMostResponse)
	err := c.cc.Invoke(ctx, Middleware_UpdateTopMost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetTopMost(ctx context.Context, in *GetTopMostRequest, opts ...grpc.CallOption) (*GetTopMostResponse, error) {
	out := new(GetTopMostResponse)
	err := c.cc.Invoke(ctx, Middleware_GetTopMost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetTopMosts(ctx context.Context, in *GetTopMostsRequest, opts ...grpc.CallOption) (*GetTopMostsResponse, error) {
	out := new(GetTopMostsResponse)
	err := c.cc.Invoke(ctx, Middleware_GetTopMosts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) DeleteTopMost(ctx context.Context, in *DeleteTopMostRequest, opts ...grpc.CallOption) (*DeleteTopMostResponse, error) {
	out := new(DeleteTopMostResponse)
	err := c.cc.Invoke(ctx, Middleware_DeleteTopMost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
	CreateTopMost(context.Context, *CreateTopMostRequest) (*CreateTopMostResponse, error)
	UpdateTopMost(context.Context, *UpdateTopMostRequest) (*UpdateTopMostResponse, error)
	GetTopMost(context.Context, *GetTopMostRequest) (*GetTopMostResponse, error)
	GetTopMosts(context.Context, *GetTopMostsRequest) (*GetTopMostsResponse, error)
	DeleteTopMost(context.Context, *DeleteTopMostRequest) (*DeleteTopMostResponse, error)
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) CreateTopMost(context.Context, *CreateTopMostRequest) (*CreateTopMostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTopMost not implemented")
}
func (UnimplementedMiddlewareServer) UpdateTopMost(context.Context, *UpdateTopMostRequest) (*UpdateTopMostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTopMost not implemented")
}
func (UnimplementedMiddlewareServer) GetTopMost(context.Context, *GetTopMostRequest) (*GetTopMostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopMost not implemented")
}
func (UnimplementedMiddlewareServer) GetTopMosts(context.Context, *GetTopMostsRequest) (*GetTopMostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopMosts not implemented")
}
func (UnimplementedMiddlewareServer) DeleteTopMost(context.Context, *DeleteTopMostRequest) (*DeleteTopMostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTopMost not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_CreateTopMost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTopMostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateTopMost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_CreateTopMost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateTopMost(ctx, req.(*CreateTopMostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_UpdateTopMost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTopMostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).UpdateTopMost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_UpdateTopMost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).UpdateTopMost(ctx, req.(*UpdateTopMostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetTopMost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopMostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetTopMost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetTopMost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetTopMost(ctx, req.(*GetTopMostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetTopMosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopMostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetTopMosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetTopMosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetTopMosts(ctx, req.(*GetTopMostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_DeleteTopMost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTopMostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).DeleteTopMost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_DeleteTopMost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).DeleteTopMost(ctx, req.(*DeleteTopMostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "good.middleware.app.good1.topmost.v1.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTopMost",
			Handler:    _Middleware_CreateTopMost_Handler,
		},
		{
			MethodName: "UpdateTopMost",
			Handler:    _Middleware_UpdateTopMost_Handler,
		},
		{
			MethodName: "GetTopMost",
			Handler:    _Middleware_GetTopMost_Handler,
		},
		{
			MethodName: "GetTopMosts",
			Handler:    _Middleware_GetTopMosts_Handler,
		},
		{
			MethodName: "DeleteTopMost",
			Handler:    _Middleware_DeleteTopMost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/good/mw/v1/app/good/topmost/topmost.proto",
}
