// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/good/mw/v1/app/good/topmost/good/constraint/constraint.proto

package constraint

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
	CreateTopMostGoodConstraint(ctx context.Context, in *CreateTopMostGoodConstraintRequest, opts ...grpc.CallOption) (*CreateTopMostGoodConstraintResponse, error)
	UpdateTopMostGoodConstraint(ctx context.Context, in *UpdateTopMostGoodConstraintRequest, opts ...grpc.CallOption) (*UpdateTopMostGoodConstraintResponse, error)
	GetTopMostGoodConstraint(ctx context.Context, in *GetTopMostGoodConstraintRequest, opts ...grpc.CallOption) (*GetTopMostGoodConstraintResponse, error)
	GetTopMostGoodConstraints(ctx context.Context, in *GetTopMostGoodConstraintsRequest, opts ...grpc.CallOption) (*GetTopMostGoodConstraintsResponse, error)
	ExistTopMostGoodConstraintConds(ctx context.Context, in *ExistTopMostGoodConstraintCondsRequest, opts ...grpc.CallOption) (*ExistTopMostGoodConstraintCondsResponse, error)
	DeleteTopMostGoodConstraint(ctx context.Context, in *DeleteTopMostGoodConstraintRequest, opts ...grpc.CallOption) (*DeleteTopMostGoodConstraintResponse, error)
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) CreateTopMostGoodConstraint(ctx context.Context, in *CreateTopMostGoodConstraintRequest, opts ...grpc.CallOption) (*CreateTopMostGoodConstraintResponse, error) {
	out := new(CreateTopMostGoodConstraintResponse)
	err := c.cc.Invoke(ctx, "/good.middleware.app.good1.topmost.good2.constraint.v1.Middleware/CreateTopMostGoodConstraint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) UpdateTopMostGoodConstraint(ctx context.Context, in *UpdateTopMostGoodConstraintRequest, opts ...grpc.CallOption) (*UpdateTopMostGoodConstraintResponse, error) {
	out := new(UpdateTopMostGoodConstraintResponse)
	err := c.cc.Invoke(ctx, "/good.middleware.app.good1.topmost.good2.constraint.v1.Middleware/UpdateTopMostGoodConstraint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetTopMostGoodConstraint(ctx context.Context, in *GetTopMostGoodConstraintRequest, opts ...grpc.CallOption) (*GetTopMostGoodConstraintResponse, error) {
	out := new(GetTopMostGoodConstraintResponse)
	err := c.cc.Invoke(ctx, "/good.middleware.app.good1.topmost.good2.constraint.v1.Middleware/GetTopMostGoodConstraint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetTopMostGoodConstraints(ctx context.Context, in *GetTopMostGoodConstraintsRequest, opts ...grpc.CallOption) (*GetTopMostGoodConstraintsResponse, error) {
	out := new(GetTopMostGoodConstraintsResponse)
	err := c.cc.Invoke(ctx, "/good.middleware.app.good1.topmost.good2.constraint.v1.Middleware/GetTopMostGoodConstraints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ExistTopMostGoodConstraintConds(ctx context.Context, in *ExistTopMostGoodConstraintCondsRequest, opts ...grpc.CallOption) (*ExistTopMostGoodConstraintCondsResponse, error) {
	out := new(ExistTopMostGoodConstraintCondsResponse)
	err := c.cc.Invoke(ctx, "/good.middleware.app.good1.topmost.good2.constraint.v1.Middleware/ExistTopMostGoodConstraintConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) DeleteTopMostGoodConstraint(ctx context.Context, in *DeleteTopMostGoodConstraintRequest, opts ...grpc.CallOption) (*DeleteTopMostGoodConstraintResponse, error) {
	out := new(DeleteTopMostGoodConstraintResponse)
	err := c.cc.Invoke(ctx, "/good.middleware.app.good1.topmost.good2.constraint.v1.Middleware/DeleteTopMostGoodConstraint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
	CreateTopMostGoodConstraint(context.Context, *CreateTopMostGoodConstraintRequest) (*CreateTopMostGoodConstraintResponse, error)
	UpdateTopMostGoodConstraint(context.Context, *UpdateTopMostGoodConstraintRequest) (*UpdateTopMostGoodConstraintResponse, error)
	GetTopMostGoodConstraint(context.Context, *GetTopMostGoodConstraintRequest) (*GetTopMostGoodConstraintResponse, error)
	GetTopMostGoodConstraints(context.Context, *GetTopMostGoodConstraintsRequest) (*GetTopMostGoodConstraintsResponse, error)
	ExistTopMostGoodConstraintConds(context.Context, *ExistTopMostGoodConstraintCondsRequest) (*ExistTopMostGoodConstraintCondsResponse, error)
	DeleteTopMostGoodConstraint(context.Context, *DeleteTopMostGoodConstraintRequest) (*DeleteTopMostGoodConstraintResponse, error)
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) CreateTopMostGoodConstraint(context.Context, *CreateTopMostGoodConstraintRequest) (*CreateTopMostGoodConstraintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTopMostGoodConstraint not implemented")
}
func (UnimplementedMiddlewareServer) UpdateTopMostGoodConstraint(context.Context, *UpdateTopMostGoodConstraintRequest) (*UpdateTopMostGoodConstraintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTopMostGoodConstraint not implemented")
}
func (UnimplementedMiddlewareServer) GetTopMostGoodConstraint(context.Context, *GetTopMostGoodConstraintRequest) (*GetTopMostGoodConstraintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopMostGoodConstraint not implemented")
}
func (UnimplementedMiddlewareServer) GetTopMostGoodConstraints(context.Context, *GetTopMostGoodConstraintsRequest) (*GetTopMostGoodConstraintsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopMostGoodConstraints not implemented")
}
func (UnimplementedMiddlewareServer) ExistTopMostGoodConstraintConds(context.Context, *ExistTopMostGoodConstraintCondsRequest) (*ExistTopMostGoodConstraintCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistTopMostGoodConstraintConds not implemented")
}
func (UnimplementedMiddlewareServer) DeleteTopMostGoodConstraint(context.Context, *DeleteTopMostGoodConstraintRequest) (*DeleteTopMostGoodConstraintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTopMostGoodConstraint not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_CreateTopMostGoodConstraint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTopMostGoodConstraintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateTopMostGoodConstraint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.middleware.app.good1.topmost.good2.constraint.v1.Middleware/CreateTopMostGoodConstraint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateTopMostGoodConstraint(ctx, req.(*CreateTopMostGoodConstraintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_UpdateTopMostGoodConstraint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTopMostGoodConstraintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).UpdateTopMostGoodConstraint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.middleware.app.good1.topmost.good2.constraint.v1.Middleware/UpdateTopMostGoodConstraint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).UpdateTopMostGoodConstraint(ctx, req.(*UpdateTopMostGoodConstraintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetTopMostGoodConstraint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopMostGoodConstraintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetTopMostGoodConstraint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.middleware.app.good1.topmost.good2.constraint.v1.Middleware/GetTopMostGoodConstraint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetTopMostGoodConstraint(ctx, req.(*GetTopMostGoodConstraintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetTopMostGoodConstraints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopMostGoodConstraintsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetTopMostGoodConstraints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.middleware.app.good1.topmost.good2.constraint.v1.Middleware/GetTopMostGoodConstraints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetTopMostGoodConstraints(ctx, req.(*GetTopMostGoodConstraintsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ExistTopMostGoodConstraintConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistTopMostGoodConstraintCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ExistTopMostGoodConstraintConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.middleware.app.good1.topmost.good2.constraint.v1.Middleware/ExistTopMostGoodConstraintConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ExistTopMostGoodConstraintConds(ctx, req.(*ExistTopMostGoodConstraintCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_DeleteTopMostGoodConstraint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTopMostGoodConstraintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).DeleteTopMostGoodConstraint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.middleware.app.good1.topmost.good2.constraint.v1.Middleware/DeleteTopMostGoodConstraint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).DeleteTopMostGoodConstraint(ctx, req.(*DeleteTopMostGoodConstraintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "good.middleware.app.good1.topmost.good2.constraint.v1.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTopMostGoodConstraint",
			Handler:    _Middleware_CreateTopMostGoodConstraint_Handler,
		},
		{
			MethodName: "UpdateTopMostGoodConstraint",
			Handler:    _Middleware_UpdateTopMostGoodConstraint_Handler,
		},
		{
			MethodName: "GetTopMostGoodConstraint",
			Handler:    _Middleware_GetTopMostGoodConstraint_Handler,
		},
		{
			MethodName: "GetTopMostGoodConstraints",
			Handler:    _Middleware_GetTopMostGoodConstraints_Handler,
		},
		{
			MethodName: "ExistTopMostGoodConstraintConds",
			Handler:    _Middleware_ExistTopMostGoodConstraintConds_Handler,
		},
		{
			MethodName: "DeleteTopMostGoodConstraint",
			Handler:    _Middleware_DeleteTopMostGoodConstraint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/good/mw/v1/app/good/topmost/good/constraint/constraint.proto",
}
