// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.18.1
// source: npool/good/mw/v1/app/good/topmost/good/constraint/constraint.proto

package constraint

import (
	v1 "github.com/NpoolPlatform/message/npool/basetypes/good/v1"
	v11 "github.com/NpoolPlatform/message/npool/basetypes/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TopMostGoodConstraintReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          *uint32                   `protobuf:"varint,9,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID       *string                   `protobuf:"bytes,10,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	TopMostID   *string                   `protobuf:"bytes,20,opt,name=TopMostID,proto3,oneof" json:"TopMostID,omitempty"`
	Constraint  *v1.GoodTopMostConstraint `protobuf:"varint,30,opt,name=Constraint,proto3,enum=basetypes.good.v1.GoodTopMostConstraint,oneof" json:"Constraint,omitempty"`
	TargetValue *string                   `protobuf:"bytes,40,opt,name=TargetValue,proto3,oneof" json:"TargetValue,omitempty"`
	Index       *uint32                   `protobuf:"varint,50,opt,name=Index,proto3,oneof" json:"Index,omitempty"`
}

func (x *TopMostGoodConstraintReq) Reset() {
	*x = TopMostGoodConstraintReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopMostGoodConstraintReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopMostGoodConstraintReq) ProtoMessage() {}

func (x *TopMostGoodConstraintReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopMostGoodConstraintReq.ProtoReflect.Descriptor instead.
func (*TopMostGoodConstraintReq) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_rawDescGZIP(), []int{0}
}

func (x *TopMostGoodConstraintReq) GetID() uint32 {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return 0
}

func (x *TopMostGoodConstraintReq) GetEntID() string {
	if x != nil && x.EntID != nil {
		return *x.EntID
	}
	return ""
}

func (x *TopMostGoodConstraintReq) GetTopMostID() string {
	if x != nil && x.TopMostID != nil {
		return *x.TopMostID
	}
	return ""
}

func (x *TopMostGoodConstraintReq) GetConstraint() v1.GoodTopMostConstraint {
	if x != nil && x.Constraint != nil {
		return *x.Constraint
	}
	return v1.GoodTopMostConstraint(0)
}

func (x *TopMostGoodConstraintReq) GetTargetValue() string {
	if x != nil && x.TargetValue != nil {
		return *x.TargetValue
	}
	return ""
}

func (x *TopMostGoodConstraintReq) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

type TopMostGoodConstraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: sql:"id"
	ID uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty" sql:"id"`
	// @inject_tag: sql:"ent_id"
	EntID string `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty" sql:"ent_id"`
	// @inject_tag: sql:"app_id"
	AppID string `protobuf:"bytes,30,opt,name=AppID,proto3" json:"AppID,omitempty" sql:"app_id"`
	// @inject_tag: sql:"top_most_id"
	TopMostID string `protobuf:"bytes,40,opt,name=TopMostID,proto3" json:"TopMostID,omitempty" sql:"top_most_id"`
	// @inject_tag: sql:"top_most_type"
	TopMostTypeStr string             `protobuf:"bytes,50,opt,name=TopMostTypeStr,proto3" json:"TopMostTypeStr,omitempty" sql:"top_most_type"`
	TopMostType    v1.GoodTopMostType `protobuf:"varint,60,opt,name=TopMostType,proto3,enum=basetypes.good.v1.GoodTopMostType" json:"TopMostType,omitempty"`
	// @inject_tag: sql:"top_most_title"
	TopMostTitle string `protobuf:"bytes,70,opt,name=TopMostTitle,proto3" json:"TopMostTitle,omitempty" sql:"top_most_title"`
	// @inject_tag: sql:"top_most_message"
	TopMostMessage string `protobuf:"bytes,80,opt,name=TopMostMessage,proto3" json:"TopMostMessage,omitempty" sql:"top_most_message"`
	// @inject_tag: sql:"top_most_target_url"
	TopMostTargetUrl string `protobuf:"bytes,90,opt,name=TopMostTargetUrl,proto3" json:"TopMostTargetUrl,omitempty" sql:"top_most_target_url"`
	// @inject_tag: sql:"constraint"
	ConstraintStr string                   `protobuf:"bytes,100,opt,name=ConstraintStr,proto3" json:"ConstraintStr,omitempty" sql:"constraint"`
	Constraint    v1.GoodTopMostConstraint `protobuf:"varint,110,opt,name=Constraint,proto3,enum=basetypes.good.v1.GoodTopMostConstraint" json:"Constraint,omitempty"`
	// @inject_tag: sql:"app_good_id"
	AppGoodID string `protobuf:"bytes,120,opt,name=AppGoodID,proto3" json:"AppGoodID,omitempty" sql:"app_good_id"`
	// @inject_tag: sql:"app_good_name"
	AppGoodName string `protobuf:"bytes,130,opt,name=AppGoodName,proto3" json:"AppGoodName,omitempty" sql:"app_good_name"`
	// @inject_tag: sql:"target_value"
	TargetValue string `protobuf:"bytes,140,opt,name=TargetValue,proto3" json:"TargetValue,omitempty" sql:"target_value"`
	// @inject_tag: sql:"index"
	Index uint32 `protobuf:"varint,150,opt,name=Index,proto3" json:"Index,omitempty" sql:"index"`
	// @inject_tag: sql:"created_at"
	CreatedAt uint32 `protobuf:"varint,1000,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
	// @inject_tag: sql:"updated_at"
	UpdatedAt uint32 `protobuf:"varint,1010,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty" sql:"updated_at"`
}

func (x *TopMostGoodConstraint) Reset() {
	*x = TopMostGoodConstraint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopMostGoodConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopMostGoodConstraint) ProtoMessage() {}

func (x *TopMostGoodConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopMostGoodConstraint.ProtoReflect.Descriptor instead.
func (*TopMostGoodConstraint) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_rawDescGZIP(), []int{1}
}

func (x *TopMostGoodConstraint) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *TopMostGoodConstraint) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *TopMostGoodConstraint) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *TopMostGoodConstraint) GetTopMostID() string {
	if x != nil {
		return x.TopMostID
	}
	return ""
}

func (x *TopMostGoodConstraint) GetTopMostTypeStr() string {
	if x != nil {
		return x.TopMostTypeStr
	}
	return ""
}

func (x *TopMostGoodConstraint) GetTopMostType() v1.GoodTopMostType {
	if x != nil {
		return x.TopMostType
	}
	return v1.GoodTopMostType(0)
}

func (x *TopMostGoodConstraint) GetTopMostTitle() string {
	if x != nil {
		return x.TopMostTitle
	}
	return ""
}

func (x *TopMostGoodConstraint) GetTopMostMessage() string {
	if x != nil {
		return x.TopMostMessage
	}
	return ""
}

func (x *TopMostGoodConstraint) GetTopMostTargetUrl() string {
	if x != nil {
		return x.TopMostTargetUrl
	}
	return ""
}

func (x *TopMostGoodConstraint) GetConstraintStr() string {
	if x != nil {
		return x.ConstraintStr
	}
	return ""
}

func (x *TopMostGoodConstraint) GetConstraint() v1.GoodTopMostConstraint {
	if x != nil {
		return x.Constraint
	}
	return v1.GoodTopMostConstraint(0)
}

func (x *TopMostGoodConstraint) GetAppGoodID() string {
	if x != nil {
		return x.AppGoodID
	}
	return ""
}

func (x *TopMostGoodConstraint) GetAppGoodName() string {
	if x != nil {
		return x.AppGoodName
	}
	return ""
}

func (x *TopMostGoodConstraint) GetTargetValue() string {
	if x != nil {
		return x.TargetValue
	}
	return ""
}

func (x *TopMostGoodConstraint) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *TopMostGoodConstraint) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *TopMostGoodConstraint) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          *v11.Uint32Val `protobuf:"bytes,9,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID       *v11.StringVal `protobuf:"bytes,10,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	AppID       *v11.StringVal `protobuf:"bytes,20,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	TopMostID   *v11.StringVal `protobuf:"bytes,30,opt,name=TopMostID,proto3,oneof" json:"TopMostID,omitempty"`
	TopMostType *v11.Uint32Val `protobuf:"bytes,40,opt,name=TopMostType,proto3,oneof" json:"TopMostType,omitempty"`
	AppGoodID   *v11.StringVal `protobuf:"bytes,50,opt,name=AppGoodID,proto3,oneof" json:"AppGoodID,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *v11.Uint32Val {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetEntID() *v11.StringVal {
	if x != nil {
		return x.EntID
	}
	return nil
}

func (x *Conds) GetAppID() *v11.StringVal {
	if x != nil {
		return x.AppID
	}
	return nil
}

func (x *Conds) GetTopMostID() *v11.StringVal {
	if x != nil {
		return x.TopMostID
	}
	return nil
}

func (x *Conds) GetTopMostType() *v11.Uint32Val {
	if x != nil {
		return x.TopMostType
	}
	return nil
}

func (x *Conds) GetAppGoodID() *v11.StringVal {
	if x != nil {
		return x.AppGoodID
	}
	return nil
}

type CreateTopMostGoodConstraintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *TopMostGoodConstraintReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateTopMostGoodConstraintRequest) Reset() {
	*x = CreateTopMostGoodConstraintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTopMostGoodConstraintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTopMostGoodConstraintRequest) ProtoMessage() {}

func (x *CreateTopMostGoodConstraintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTopMostGoodConstraintRequest.ProtoReflect.Descriptor instead.
func (*CreateTopMostGoodConstraintRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_rawDescGZIP(), []int{3}
}

func (x *CreateTopMostGoodConstraintRequest) GetInfo() *TopMostGoodConstraintReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateTopMostGoodConstraintResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *TopMostGoodConstraint `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateTopMostGoodConstraintResponse) Reset() {
	*x = CreateTopMostGoodConstraintResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTopMostGoodConstraintResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTopMostGoodConstraintResponse) ProtoMessage() {}

func (x *CreateTopMostGoodConstraintResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTopMostGoodConstraintResponse.ProtoReflect.Descriptor instead.
func (*CreateTopMostGoodConstraintResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_rawDescGZIP(), []int{4}
}

func (x *CreateTopMostGoodConstraintResponse) GetInfo() *TopMostGoodConstraint {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateTopMostGoodConstraintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *TopMostGoodConstraintReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateTopMostGoodConstraintRequest) Reset() {
	*x = UpdateTopMostGoodConstraintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTopMostGoodConstraintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTopMostGoodConstraintRequest) ProtoMessage() {}

func (x *UpdateTopMostGoodConstraintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTopMostGoodConstraintRequest.ProtoReflect.Descriptor instead.
func (*UpdateTopMostGoodConstraintRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateTopMostGoodConstraintRequest) GetInfo() *TopMostGoodConstraintReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateTopMostGoodConstraintResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *TopMostGoodConstraint `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateTopMostGoodConstraintResponse) Reset() {
	*x = UpdateTopMostGoodConstraintResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTopMostGoodConstraintResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTopMostGoodConstraintResponse) ProtoMessage() {}

func (x *UpdateTopMostGoodConstraintResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTopMostGoodConstraintResponse.ProtoReflect.Descriptor instead.
func (*UpdateTopMostGoodConstraintResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateTopMostGoodConstraintResponse) GetInfo() *TopMostGoodConstraint {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetTopMostGoodConstraintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntID string `protobuf:"bytes,10,opt,name=EntID,proto3" json:"EntID,omitempty"`
}

func (x *GetTopMostGoodConstraintRequest) Reset() {
	*x = GetTopMostGoodConstraintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTopMostGoodConstraintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopMostGoodConstraintRequest) ProtoMessage() {}

func (x *GetTopMostGoodConstraintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopMostGoodConstraintRequest.ProtoReflect.Descriptor instead.
func (*GetTopMostGoodConstraintRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_rawDescGZIP(), []int{7}
}

func (x *GetTopMostGoodConstraintRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

type GetTopMostGoodConstraintResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *TopMostGoodConstraint `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetTopMostGoodConstraintResponse) Reset() {
	*x = GetTopMostGoodConstraintResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTopMostGoodConstraintResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopMostGoodConstraintResponse) ProtoMessage() {}

func (x *GetTopMostGoodConstraintResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopMostGoodConstraintResponse.ProtoReflect.Descriptor instead.
func (*GetTopMostGoodConstraintResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_rawDescGZIP(), []int{8}
}

func (x *GetTopMostGoodConstraintResponse) GetInfo() *TopMostGoodConstraint {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetTopMostGoodConstraintsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetTopMostGoodConstraintsRequest) Reset() {
	*x = GetTopMostGoodConstraintsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTopMostGoodConstraintsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopMostGoodConstraintsRequest) ProtoMessage() {}

func (x *GetTopMostGoodConstraintsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopMostGoodConstraintsRequest.ProtoReflect.Descriptor instead.
func (*GetTopMostGoodConstraintsRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_rawDescGZIP(), []int{9}
}

func (x *GetTopMostGoodConstraintsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetTopMostGoodConstraintsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetTopMostGoodConstraintsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetTopMostGoodConstraintsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*TopMostGoodConstraint `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32                   `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetTopMostGoodConstraintsResponse) Reset() {
	*x = GetTopMostGoodConstraintsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTopMostGoodConstraintsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopMostGoodConstraintsResponse) ProtoMessage() {}

func (x *GetTopMostGoodConstraintsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopMostGoodConstraintsResponse.ProtoReflect.Descriptor instead.
func (*GetTopMostGoodConstraintsResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_rawDescGZIP(), []int{10}
}

func (x *GetTopMostGoodConstraintsResponse) GetInfos() []*TopMostGoodConstraint {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetTopMostGoodConstraintsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type DeleteTopMostGoodConstraintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *TopMostGoodConstraintReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteTopMostGoodConstraintRequest) Reset() {
	*x = DeleteTopMostGoodConstraintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTopMostGoodConstraintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTopMostGoodConstraintRequest) ProtoMessage() {}

func (x *DeleteTopMostGoodConstraintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTopMostGoodConstraintRequest.ProtoReflect.Descriptor instead.
func (*DeleteTopMostGoodConstraintRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteTopMostGoodConstraintRequest) GetInfo() *TopMostGoodConstraintReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type DeleteTopMostGoodConstraintResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *TopMostGoodConstraint `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteTopMostGoodConstraintResponse) Reset() {
	*x = DeleteTopMostGoodConstraintResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTopMostGoodConstraintResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTopMostGoodConstraintResponse) ProtoMessage() {}

func (x *DeleteTopMostGoodConstraintResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTopMostGoodConstraintResponse.ProtoReflect.Descriptor instead.
func (*DeleteTopMostGoodConstraintResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteTopMostGoodConstraintResponse) GetInfo() *TopMostGoodConstraint {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto protoreflect.FileDescriptor

var file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_rawDesc = []byte{
	0x0a, 0x42, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x6d, 0x77, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x74, 0x6f, 0x70, 0x6d,
	0x6f, 0x73, 0x74, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x35, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e,
	0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x23, 0x6e, 0x70, 0x6f,
	0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x67, 0x6f, 0x6f,
	0x64, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xc6, 0x02, 0x0a, 0x18, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a,
	0x09, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x09, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01,
	0x12, 0x4d, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x6f, 0x70,
	0x4d, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x48, 0x03,
	0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x05, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01,
	0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x74,
	0x49, 0x44, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x49, 0x44,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x80, 0x05, 0x0a, 0x15, 0x54, 0x6f,
	0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x12, 0x26, 0x0a,
	0x0e, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x53, 0x74, 0x72, 0x12, 0x44, 0x0a, 0x0b, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x64, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x54,
	0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x26, 0x0a, 0x0e, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x6f, 0x70, 0x4d, 0x6f,
	0x73, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x5a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x55, 0x72, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x53, 0x74, 0x72, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x12, 0x48, 0x0a, 0x0a, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44,
	0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49,
	0x44, 0x12, 0x21, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x15, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d,
	0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xe8, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a,
	0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xf2, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x9c, 0x03, 0x0a,
	0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x02, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x05,
	0x45, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x48, 0x02, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x09,
	0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x09, 0x54, 0x6f, 0x70, 0x4d,
	0x6f, 0x73, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0b, 0x54, 0x6f, 0x70, 0x4d,
	0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x04, 0x52, 0x0b, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x47,
	0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x48, 0x05, 0x52, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x45, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x41, 0x70, 0x70, 0x49, 0x44, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x22, 0x89, 0x01, 0x0a, 0x22,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f,
	0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x63, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x4f, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x74, 0x6f, 0x70,
	0x6d, 0x6f, 0x73, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74,
	0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x87, 0x01, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x60, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73,
	0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f,
	0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x89, 0x01, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x4d,
	0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x63, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x31, 0x2e, 0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x32,
	0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x87, 0x01,
	0x0a, 0x23, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47,
	0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e,
	0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x4d,
	0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x37, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44,
	0x22, 0x84, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47,
	0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e,
	0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x4d,
	0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xa4, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x54,
	0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x05,
	0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x9d,
	0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f,
	0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e,
	0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x4d,
	0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x89,
	0x01, 0x0a, 0x22, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74,
	0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x63, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e,
	0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x4d,
	0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x87, 0x01, 0x0a, 0x23, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x60, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x4c, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x74, 0x6f, 0x70,
	0x6d, 0x6f, 0x73, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74,
	0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x32, 0xba, 0x08, 0x0a, 0x0a, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x12, 0xd6, 0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f,
	0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x12, 0x59, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e,
	0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x5a,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x74, 0x6f, 0x70, 0x6d, 0x6f,
	0x73, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70,
	0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xd6, 0x01, 0x0a,
	0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f,
	0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x59, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x4d, 0x6f,
	0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x5a, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x31, 0x2e, 0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x32, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f,
	0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xcd, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70,
	0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x12, 0x56, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x74,
	0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x57, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f,
	0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xd0, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70,
	0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x57, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e,
	0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x58, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47,
	0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xd6, 0x01, 0x0a, 0x1b, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x59, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x32, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f,
	0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x5a, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e,
	0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x42, 0x54, 0x5a, 0x52, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64,
	0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f,
	0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_rawDescOnce sync.Once
	file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_rawDescData = file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_rawDesc
)

func file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_rawDescGZIP() []byte {
	file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_rawDescOnce.Do(func() {
		file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_rawDescData)
	})
	return file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_rawDescData
}

var file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_goTypes = []interface{}{
	(*TopMostGoodConstraintReq)(nil),            // 0: good.middleware.app.good1.topmost.good2.constraint.v1.TopMostGoodConstraintReq
	(*TopMostGoodConstraint)(nil),               // 1: good.middleware.app.good1.topmost.good2.constraint.v1.TopMostGoodConstraint
	(*Conds)(nil),                               // 2: good.middleware.app.good1.topmost.good2.constraint.v1.Conds
	(*CreateTopMostGoodConstraintRequest)(nil),  // 3: good.middleware.app.good1.topmost.good2.constraint.v1.CreateTopMostGoodConstraintRequest
	(*CreateTopMostGoodConstraintResponse)(nil), // 4: good.middleware.app.good1.topmost.good2.constraint.v1.CreateTopMostGoodConstraintResponse
	(*UpdateTopMostGoodConstraintRequest)(nil),  // 5: good.middleware.app.good1.topmost.good2.constraint.v1.UpdateTopMostGoodConstraintRequest
	(*UpdateTopMostGoodConstraintResponse)(nil), // 6: good.middleware.app.good1.topmost.good2.constraint.v1.UpdateTopMostGoodConstraintResponse
	(*GetTopMostGoodConstraintRequest)(nil),     // 7: good.middleware.app.good1.topmost.good2.constraint.v1.GetTopMostGoodConstraintRequest
	(*GetTopMostGoodConstraintResponse)(nil),    // 8: good.middleware.app.good1.topmost.good2.constraint.v1.GetTopMostGoodConstraintResponse
	(*GetTopMostGoodConstraintsRequest)(nil),    // 9: good.middleware.app.good1.topmost.good2.constraint.v1.GetTopMostGoodConstraintsRequest
	(*GetTopMostGoodConstraintsResponse)(nil),   // 10: good.middleware.app.good1.topmost.good2.constraint.v1.GetTopMostGoodConstraintsResponse
	(*DeleteTopMostGoodConstraintRequest)(nil),  // 11: good.middleware.app.good1.topmost.good2.constraint.v1.DeleteTopMostGoodConstraintRequest
	(*DeleteTopMostGoodConstraintResponse)(nil), // 12: good.middleware.app.good1.topmost.good2.constraint.v1.DeleteTopMostGoodConstraintResponse
	(v1.GoodTopMostConstraint)(0),               // 13: basetypes.good.v1.GoodTopMostConstraint
	(v1.GoodTopMostType)(0),                     // 14: basetypes.good.v1.GoodTopMostType
	(*v11.Uint32Val)(nil),                       // 15: basetypes.v1.Uint32Val
	(*v11.StringVal)(nil),                       // 16: basetypes.v1.StringVal
}
var file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_depIdxs = []int32{
	13, // 0: good.middleware.app.good1.topmost.good2.constraint.v1.TopMostGoodConstraintReq.Constraint:type_name -> basetypes.good.v1.GoodTopMostConstraint
	14, // 1: good.middleware.app.good1.topmost.good2.constraint.v1.TopMostGoodConstraint.TopMostType:type_name -> basetypes.good.v1.GoodTopMostType
	13, // 2: good.middleware.app.good1.topmost.good2.constraint.v1.TopMostGoodConstraint.Constraint:type_name -> basetypes.good.v1.GoodTopMostConstraint
	15, // 3: good.middleware.app.good1.topmost.good2.constraint.v1.Conds.ID:type_name -> basetypes.v1.Uint32Val
	16, // 4: good.middleware.app.good1.topmost.good2.constraint.v1.Conds.EntID:type_name -> basetypes.v1.StringVal
	16, // 5: good.middleware.app.good1.topmost.good2.constraint.v1.Conds.AppID:type_name -> basetypes.v1.StringVal
	16, // 6: good.middleware.app.good1.topmost.good2.constraint.v1.Conds.TopMostID:type_name -> basetypes.v1.StringVal
	15, // 7: good.middleware.app.good1.topmost.good2.constraint.v1.Conds.TopMostType:type_name -> basetypes.v1.Uint32Val
	16, // 8: good.middleware.app.good1.topmost.good2.constraint.v1.Conds.AppGoodID:type_name -> basetypes.v1.StringVal
	0,  // 9: good.middleware.app.good1.topmost.good2.constraint.v1.CreateTopMostGoodConstraintRequest.Info:type_name -> good.middleware.app.good1.topmost.good2.constraint.v1.TopMostGoodConstraintReq
	1,  // 10: good.middleware.app.good1.topmost.good2.constraint.v1.CreateTopMostGoodConstraintResponse.Info:type_name -> good.middleware.app.good1.topmost.good2.constraint.v1.TopMostGoodConstraint
	0,  // 11: good.middleware.app.good1.topmost.good2.constraint.v1.UpdateTopMostGoodConstraintRequest.Info:type_name -> good.middleware.app.good1.topmost.good2.constraint.v1.TopMostGoodConstraintReq
	1,  // 12: good.middleware.app.good1.topmost.good2.constraint.v1.UpdateTopMostGoodConstraintResponse.Info:type_name -> good.middleware.app.good1.topmost.good2.constraint.v1.TopMostGoodConstraint
	1,  // 13: good.middleware.app.good1.topmost.good2.constraint.v1.GetTopMostGoodConstraintResponse.Info:type_name -> good.middleware.app.good1.topmost.good2.constraint.v1.TopMostGoodConstraint
	2,  // 14: good.middleware.app.good1.topmost.good2.constraint.v1.GetTopMostGoodConstraintsRequest.Conds:type_name -> good.middleware.app.good1.topmost.good2.constraint.v1.Conds
	1,  // 15: good.middleware.app.good1.topmost.good2.constraint.v1.GetTopMostGoodConstraintsResponse.Infos:type_name -> good.middleware.app.good1.topmost.good2.constraint.v1.TopMostGoodConstraint
	0,  // 16: good.middleware.app.good1.topmost.good2.constraint.v1.DeleteTopMostGoodConstraintRequest.Info:type_name -> good.middleware.app.good1.topmost.good2.constraint.v1.TopMostGoodConstraintReq
	1,  // 17: good.middleware.app.good1.topmost.good2.constraint.v1.DeleteTopMostGoodConstraintResponse.Info:type_name -> good.middleware.app.good1.topmost.good2.constraint.v1.TopMostGoodConstraint
	3,  // 18: good.middleware.app.good1.topmost.good2.constraint.v1.Middleware.CreateTopMostGoodConstraint:input_type -> good.middleware.app.good1.topmost.good2.constraint.v1.CreateTopMostGoodConstraintRequest
	5,  // 19: good.middleware.app.good1.topmost.good2.constraint.v1.Middleware.UpdateTopMostGoodConstraint:input_type -> good.middleware.app.good1.topmost.good2.constraint.v1.UpdateTopMostGoodConstraintRequest
	7,  // 20: good.middleware.app.good1.topmost.good2.constraint.v1.Middleware.GetTopMostGoodConstraint:input_type -> good.middleware.app.good1.topmost.good2.constraint.v1.GetTopMostGoodConstraintRequest
	9,  // 21: good.middleware.app.good1.topmost.good2.constraint.v1.Middleware.GetTopMostGoodConstraints:input_type -> good.middleware.app.good1.topmost.good2.constraint.v1.GetTopMostGoodConstraintsRequest
	11, // 22: good.middleware.app.good1.topmost.good2.constraint.v1.Middleware.DeleteTopMostGoodConstraint:input_type -> good.middleware.app.good1.topmost.good2.constraint.v1.DeleteTopMostGoodConstraintRequest
	4,  // 23: good.middleware.app.good1.topmost.good2.constraint.v1.Middleware.CreateTopMostGoodConstraint:output_type -> good.middleware.app.good1.topmost.good2.constraint.v1.CreateTopMostGoodConstraintResponse
	6,  // 24: good.middleware.app.good1.topmost.good2.constraint.v1.Middleware.UpdateTopMostGoodConstraint:output_type -> good.middleware.app.good1.topmost.good2.constraint.v1.UpdateTopMostGoodConstraintResponse
	8,  // 25: good.middleware.app.good1.topmost.good2.constraint.v1.Middleware.GetTopMostGoodConstraint:output_type -> good.middleware.app.good1.topmost.good2.constraint.v1.GetTopMostGoodConstraintResponse
	10, // 26: good.middleware.app.good1.topmost.good2.constraint.v1.Middleware.GetTopMostGoodConstraints:output_type -> good.middleware.app.good1.topmost.good2.constraint.v1.GetTopMostGoodConstraintsResponse
	12, // 27: good.middleware.app.good1.topmost.good2.constraint.v1.Middleware.DeleteTopMostGoodConstraint:output_type -> good.middleware.app.good1.topmost.good2.constraint.v1.DeleteTopMostGoodConstraintResponse
	23, // [23:28] is the sub-list for method output_type
	18, // [18:23] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_init() }
func file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_init() {
	if File_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopMostGoodConstraintReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopMostGoodConstraint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTopMostGoodConstraintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTopMostGoodConstraintResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTopMostGoodConstraintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTopMostGoodConstraintResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTopMostGoodConstraintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTopMostGoodConstraintResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTopMostGoodConstraintsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTopMostGoodConstraintsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTopMostGoodConstraintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTopMostGoodConstraintResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_goTypes,
		DependencyIndexes: file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_depIdxs,
		MessageInfos:      file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes,
	}.Build()
	File_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto = out.File
	file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_rawDesc = nil
	file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_goTypes = nil
	file_npool_good_mw_v1_app_good_topmost_good_constraint_constraint_proto_depIdxs = nil
}
