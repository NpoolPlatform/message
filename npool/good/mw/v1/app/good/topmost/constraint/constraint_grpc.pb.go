// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/good/mw/v1/app/good/topmost/constraint/constraint.proto

package constraint

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Middleware_CreateTopMostConstraint_FullMethodName    = "/good.middleware.app.good1.topmost.constraint.v1.Middleware/CreateTopMostConstraint"
	Middleware_UpdateTopMostConstraint_FullMethodName    = "/good.middleware.app.good1.topmost.constraint.v1.Middleware/UpdateTopMostConstraint"
	Middleware_GetTopMostConstraint_FullMethodName       = "/good.middleware.app.good1.topmost.constraint.v1.Middleware/GetTopMostConstraint"
	Middleware_GetTopMostConstraints_FullMethodName      = "/good.middleware.app.good1.topmost.constraint.v1.Middleware/GetTopMostConstraints"
	Middleware_ExitTopMostConstraintConds_FullMethodName = "/good.middleware.app.good1.topmost.constraint.v1.Middleware/ExitTopMostConstraintConds"
	Middleware_DeleteTopMostConstraint_FullMethodName    = "/good.middleware.app.good1.topmost.constraint.v1.Middleware/DeleteTopMostConstraint"
)

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
	CreateTopMostConstraint(ctx context.Context, in *CreateTopMostConstraintRequest, opts ...grpc.CallOption) (*CreateTopMostConstraintResponse, error)
	UpdateTopMostConstraint(ctx context.Context, in *UpdateTopMostConstraintRequest, opts ...grpc.CallOption) (*UpdateTopMostConstraintResponse, error)
	GetTopMostConstraint(ctx context.Context, in *GetTopMostConstraintRequest, opts ...grpc.CallOption) (*GetTopMostConstraintResponse, error)
	GetTopMostConstraints(ctx context.Context, in *GetTopMostConstraintsRequest, opts ...grpc.CallOption) (*GetTopMostConstraintsResponse, error)
	ExitTopMostConstraintConds(ctx context.Context, in *ExitTopMostConstraintCondsRequest, opts ...grpc.CallOption) (*ExitTopMostConstraintCondsResponse, error)
	DeleteTopMostConstraint(ctx context.Context, in *DeleteTopMostConstraintRequest, opts ...grpc.CallOption) (*DeleteTopMostConstraintResponse, error)
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) CreateTopMostConstraint(ctx context.Context, in *CreateTopMostConstraintRequest, opts ...grpc.CallOption) (*CreateTopMostConstraintResponse, error) {
	out := new(CreateTopMostConstraintResponse)
	err := c.cc.Invoke(ctx, Middleware_CreateTopMostConstraint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) UpdateTopMostConstraint(ctx context.Context, in *UpdateTopMostConstraintRequest, opts ...grpc.CallOption) (*UpdateTopMostConstraintResponse, error) {
	out := new(UpdateTopMostConstraintResponse)
	err := c.cc.Invoke(ctx, Middleware_UpdateTopMostConstraint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetTopMostConstraint(ctx context.Context, in *GetTopMostConstraintRequest, opts ...grpc.CallOption) (*GetTopMostConstraintResponse, error) {
	out := new(GetTopMostConstraintResponse)
	err := c.cc.Invoke(ctx, Middleware_GetTopMostConstraint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetTopMostConstraints(ctx context.Context, in *GetTopMostConstraintsRequest, opts ...grpc.CallOption) (*GetTopMostConstraintsResponse, error) {
	out := new(GetTopMostConstraintsResponse)
	err := c.cc.Invoke(ctx, Middleware_GetTopMostConstraints_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ExitTopMostConstraintConds(ctx context.Context, in *ExitTopMostConstraintCondsRequest, opts ...grpc.CallOption) (*ExitTopMostConstraintCondsResponse, error) {
	out := new(ExitTopMostConstraintCondsResponse)
	err := c.cc.Invoke(ctx, Middleware_ExitTopMostConstraintConds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) DeleteTopMostConstraint(ctx context.Context, in *DeleteTopMostConstraintRequest, opts ...grpc.CallOption) (*DeleteTopMostConstraintResponse, error) {
	out := new(DeleteTopMostConstraintResponse)
	err := c.cc.Invoke(ctx, Middleware_DeleteTopMostConstraint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
	CreateTopMostConstraint(context.Context, *CreateTopMostConstraintRequest) (*CreateTopMostConstraintResponse, error)
	UpdateTopMostConstraint(context.Context, *UpdateTopMostConstraintRequest) (*UpdateTopMostConstraintResponse, error)
	GetTopMostConstraint(context.Context, *GetTopMostConstraintRequest) (*GetTopMostConstraintResponse, error)
	GetTopMostConstraints(context.Context, *GetTopMostConstraintsRequest) (*GetTopMostConstraintsResponse, error)
	ExitTopMostConstraintConds(context.Context, *ExitTopMostConstraintCondsRequest) (*ExitTopMostConstraintCondsResponse, error)
	DeleteTopMostConstraint(context.Context, *DeleteTopMostConstraintRequest) (*DeleteTopMostConstraintResponse, error)
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) CreateTopMostConstraint(context.Context, *CreateTopMostConstraintRequest) (*CreateTopMostConstraintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTopMostConstraint not implemented")
}
func (UnimplementedMiddlewareServer) UpdateTopMostConstraint(context.Context, *UpdateTopMostConstraintRequest) (*UpdateTopMostConstraintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTopMostConstraint not implemented")
}
func (UnimplementedMiddlewareServer) GetTopMostConstraint(context.Context, *GetTopMostConstraintRequest) (*GetTopMostConstraintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopMostConstraint not implemented")
}
func (UnimplementedMiddlewareServer) GetTopMostConstraints(context.Context, *GetTopMostConstraintsRequest) (*GetTopMostConstraintsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopMostConstraints not implemented")
}
func (UnimplementedMiddlewareServer) ExitTopMostConstraintConds(context.Context, *ExitTopMostConstraintCondsRequest) (*ExitTopMostConstraintCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExitTopMostConstraintConds not implemented")
}
func (UnimplementedMiddlewareServer) DeleteTopMostConstraint(context.Context, *DeleteTopMostConstraintRequest) (*DeleteTopMostConstraintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTopMostConstraint not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_CreateTopMostConstraint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTopMostConstraintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateTopMostConstraint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_CreateTopMostConstraint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateTopMostConstraint(ctx, req.(*CreateTopMostConstraintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_UpdateTopMostConstraint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTopMostConstraintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).UpdateTopMostConstraint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_UpdateTopMostConstraint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).UpdateTopMostConstraint(ctx, req.(*UpdateTopMostConstraintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetTopMostConstraint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopMostConstraintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetTopMostConstraint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetTopMostConstraint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetTopMostConstraint(ctx, req.(*GetTopMostConstraintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetTopMostConstraints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopMostConstraintsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetTopMostConstraints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetTopMostConstraints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetTopMostConstraints(ctx, req.(*GetTopMostConstraintsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ExitTopMostConstraintConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExitTopMostConstraintCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ExitTopMostConstraintConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_ExitTopMostConstraintConds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ExitTopMostConstraintConds(ctx, req.(*ExitTopMostConstraintCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_DeleteTopMostConstraint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTopMostConstraintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).DeleteTopMostConstraint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_DeleteTopMostConstraint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).DeleteTopMostConstraint(ctx, req.(*DeleteTopMostConstraintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "good.middleware.app.good1.topmost.constraint.v1.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTopMostConstraint",
			Handler:    _Middleware_CreateTopMostConstraint_Handler,
		},
		{
			MethodName: "UpdateTopMostConstraint",
			Handler:    _Middleware_UpdateTopMostConstraint_Handler,
		},
		{
			MethodName: "GetTopMostConstraint",
			Handler:    _Middleware_GetTopMostConstraint_Handler,
		},
		{
			MethodName: "GetTopMostConstraints",
			Handler:    _Middleware_GetTopMostConstraints_Handler,
		},
		{
			MethodName: "ExitTopMostConstraintConds",
			Handler:    _Middleware_ExitTopMostConstraintConds_Handler,
		},
		{
			MethodName: "DeleteTopMostConstraint",
			Handler:    _Middleware_DeleteTopMostConstraint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/good/mw/v1/app/good/topmost/constraint/constraint.proto",
}
