// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.18.1
// source: npool/good/mw/v1/app/good/good.proto

package good

import (
	v1 "github.com/NpoolPlatform/message/npool/basetypes/good/v1"
	v11 "github.com/NpoolPlatform/message/npool/basetypes/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GoodReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                     *uint32        `protobuf:"varint,9,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID                  *string        `protobuf:"bytes,10,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	AppID                  *string        `protobuf:"bytes,20,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	GoodID                 *string        `protobuf:"bytes,30,opt,name=GoodID,proto3,oneof" json:"GoodID,omitempty"`
	Online                 *bool          `protobuf:"varint,40,opt,name=Online,proto3,oneof" json:"Online,omitempty"`
	Visible                *bool          `protobuf:"varint,50,opt,name=Visible,proto3,oneof" json:"Visible,omitempty"`
	GoodName               *string        `protobuf:"bytes,60,opt,name=GoodName,proto3,oneof" json:"GoodName,omitempty"`
	UnitPrice              *string        `protobuf:"bytes,70,opt,name=UnitPrice,proto3,oneof" json:"UnitPrice,omitempty"`
	PackagePrice           *string        `protobuf:"bytes,71,opt,name=PackagePrice,proto3,oneof" json:"PackagePrice,omitempty"`
	DisplayIndex           *int32         `protobuf:"varint,80,opt,name=DisplayIndex,proto3,oneof" json:"DisplayIndex,omitempty"`
	SaleStartAt            *uint32        `protobuf:"varint,110,opt,name=SaleStartAt,proto3,oneof" json:"SaleStartAt,omitempty"`
	SaleEndAt              *uint32        `protobuf:"varint,120,opt,name=SaleEndAt,proto3,oneof" json:"SaleEndAt,omitempty"`
	ServiceStartAt         *uint32        `protobuf:"varint,130,opt,name=ServiceStartAt,proto3,oneof" json:"ServiceStartAt,omitempty"`
	TechnicalFeeRatio      *string        `protobuf:"bytes,140,opt,name=TechnicalFeeRatio,proto3,oneof" json:"TechnicalFeeRatio,omitempty"`
	ElectricityFeeRatio    *string        `protobuf:"bytes,150,opt,name=ElectricityFeeRatio,proto3,oneof" json:"ElectricityFeeRatio,omitempty"`
	Descriptions           []string       `protobuf:"bytes,180,rep,name=Descriptions,proto3" json:"Descriptions,omitempty"`
	GoodBanner             *string        `protobuf:"bytes,190,opt,name=GoodBanner,proto3,oneof" json:"GoodBanner,omitempty"`
	DisplayNames           []string       `protobuf:"bytes,200,rep,name=DisplayNames,proto3" json:"DisplayNames,omitempty"`
	EnablePurchase         *bool          `protobuf:"varint,210,opt,name=EnablePurchase,proto3,oneof" json:"EnablePurchase,omitempty"`
	EnableProductPage      *bool          `protobuf:"varint,220,opt,name=EnableProductPage,proto3,oneof" json:"EnableProductPage,omitempty"`
	CancelMode             *v1.CancelMode `protobuf:"varint,230,opt,name=CancelMode,proto3,enum=basetypes.good.v1.CancelMode,oneof" json:"CancelMode,omitempty"`
	DisplayColors          []string       `protobuf:"bytes,250,rep,name=DisplayColors,proto3" json:"DisplayColors,omitempty"`
	CancellableBeforeStart *uint32        `protobuf:"varint,260,opt,name=CancellableBeforeStart,proto3,oneof" json:"CancellableBeforeStart,omitempty"`
	ProductPage            *string        `protobuf:"bytes,270,opt,name=ProductPage,proto3,oneof" json:"ProductPage,omitempty"`
	EnableSetCommission    *bool          `protobuf:"varint,310,opt,name=EnableSetCommission,proto3,oneof" json:"EnableSetCommission,omitempty"`
	Posters                []string       `protobuf:"bytes,320,rep,name=Posters,proto3" json:"Posters,omitempty"`
	MinOrderAmount         *string        `protobuf:"bytes,330,opt,name=MinOrderAmount,proto3,oneof" json:"MinOrderAmount,omitempty"`
	MaxOrderAmount         *string        `protobuf:"bytes,340,opt,name=MaxOrderAmount,proto3,oneof" json:"MaxOrderAmount,omitempty"`
	MaxUserAmount          *string        `protobuf:"bytes,350,opt,name=MaxUserAmount,proto3,oneof" json:"MaxUserAmount,omitempty"`
	MinOrderDuration       *uint32        `protobuf:"varint,360,opt,name=MinOrderDuration,proto3,oneof" json:"MinOrderDuration,omitempty"`
	MaxOrderDuration       *uint32        `protobuf:"varint,370,opt,name=MaxOrderDuration,proto3,oneof" json:"MaxOrderDuration,omitempty"`
	PackageWithRequireds   *bool          `protobuf:"varint,380,opt,name=PackageWithRequireds,proto3,oneof" json:"PackageWithRequireds,omitempty"`
}

func (x *GoodReq) Reset() {
	*x = GoodReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_good_good_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodReq) ProtoMessage() {}

func (x *GoodReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_good_good_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodReq.ProtoReflect.Descriptor instead.
func (*GoodReq) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_good_good_proto_rawDescGZIP(), []int{0}
}

func (x *GoodReq) GetID() uint32 {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return 0
}

func (x *GoodReq) GetEntID() string {
	if x != nil && x.EntID != nil {
		return *x.EntID
	}
	return ""
}

func (x *GoodReq) GetAppID() string {
	if x != nil && x.AppID != nil {
		return *x.AppID
	}
	return ""
}

func (x *GoodReq) GetGoodID() string {
	if x != nil && x.GoodID != nil {
		return *x.GoodID
	}
	return ""
}

func (x *GoodReq) GetOnline() bool {
	if x != nil && x.Online != nil {
		return *x.Online
	}
	return false
}

func (x *GoodReq) GetVisible() bool {
	if x != nil && x.Visible != nil {
		return *x.Visible
	}
	return false
}

func (x *GoodReq) GetGoodName() string {
	if x != nil && x.GoodName != nil {
		return *x.GoodName
	}
	return ""
}

func (x *GoodReq) GetUnitPrice() string {
	if x != nil && x.UnitPrice != nil {
		return *x.UnitPrice
	}
	return ""
}

func (x *GoodReq) GetPackagePrice() string {
	if x != nil && x.PackagePrice != nil {
		return *x.PackagePrice
	}
	return ""
}

func (x *GoodReq) GetDisplayIndex() int32 {
	if x != nil && x.DisplayIndex != nil {
		return *x.DisplayIndex
	}
	return 0
}

func (x *GoodReq) GetSaleStartAt() uint32 {
	if x != nil && x.SaleStartAt != nil {
		return *x.SaleStartAt
	}
	return 0
}

func (x *GoodReq) GetSaleEndAt() uint32 {
	if x != nil && x.SaleEndAt != nil {
		return *x.SaleEndAt
	}
	return 0
}

func (x *GoodReq) GetServiceStartAt() uint32 {
	if x != nil && x.ServiceStartAt != nil {
		return *x.ServiceStartAt
	}
	return 0
}

func (x *GoodReq) GetTechnicalFeeRatio() string {
	if x != nil && x.TechnicalFeeRatio != nil {
		return *x.TechnicalFeeRatio
	}
	return ""
}

func (x *GoodReq) GetElectricityFeeRatio() string {
	if x != nil && x.ElectricityFeeRatio != nil {
		return *x.ElectricityFeeRatio
	}
	return ""
}

func (x *GoodReq) GetDescriptions() []string {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *GoodReq) GetGoodBanner() string {
	if x != nil && x.GoodBanner != nil {
		return *x.GoodBanner
	}
	return ""
}

func (x *GoodReq) GetDisplayNames() []string {
	if x != nil {
		return x.DisplayNames
	}
	return nil
}

func (x *GoodReq) GetEnablePurchase() bool {
	if x != nil && x.EnablePurchase != nil {
		return *x.EnablePurchase
	}
	return false
}

func (x *GoodReq) GetEnableProductPage() bool {
	if x != nil && x.EnableProductPage != nil {
		return *x.EnableProductPage
	}
	return false
}

func (x *GoodReq) GetCancelMode() v1.CancelMode {
	if x != nil && x.CancelMode != nil {
		return *x.CancelMode
	}
	return v1.CancelMode(0)
}

func (x *GoodReq) GetDisplayColors() []string {
	if x != nil {
		return x.DisplayColors
	}
	return nil
}

func (x *GoodReq) GetCancellableBeforeStart() uint32 {
	if x != nil && x.CancellableBeforeStart != nil {
		return *x.CancellableBeforeStart
	}
	return 0
}

func (x *GoodReq) GetProductPage() string {
	if x != nil && x.ProductPage != nil {
		return *x.ProductPage
	}
	return ""
}

func (x *GoodReq) GetEnableSetCommission() bool {
	if x != nil && x.EnableSetCommission != nil {
		return *x.EnableSetCommission
	}
	return false
}

func (x *GoodReq) GetPosters() []string {
	if x != nil {
		return x.Posters
	}
	return nil
}

func (x *GoodReq) GetMinOrderAmount() string {
	if x != nil && x.MinOrderAmount != nil {
		return *x.MinOrderAmount
	}
	return ""
}

func (x *GoodReq) GetMaxOrderAmount() string {
	if x != nil && x.MaxOrderAmount != nil {
		return *x.MaxOrderAmount
	}
	return ""
}

func (x *GoodReq) GetMaxUserAmount() string {
	if x != nil && x.MaxUserAmount != nil {
		return *x.MaxUserAmount
	}
	return ""
}

func (x *GoodReq) GetMinOrderDuration() uint32 {
	if x != nil && x.MinOrderDuration != nil {
		return *x.MinOrderDuration
	}
	return 0
}

func (x *GoodReq) GetMaxOrderDuration() uint32 {
	if x != nil && x.MaxOrderDuration != nil {
		return *x.MaxOrderDuration
	}
	return 0
}

func (x *GoodReq) GetPackageWithRequireds() bool {
	if x != nil && x.PackageWithRequireds != nil {
		return *x.PackageWithRequireds
	}
	return false
}

type Good struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: sql:"id"
	ID uint32 `protobuf:"varint,9,opt,name=ID,proto3" json:"ID,omitempty" sql:"id"`
	// @inject_tag: sql:"ent_id"
	EntID string `protobuf:"bytes,10,opt,name=EntID,proto3" json:"EntID,omitempty" sql:"ent_id"`
	// @inject_tag: sql:"app_id"
	AppID string `protobuf:"bytes,20,opt,name=AppID,proto3" json:"AppID,omitempty" sql:"app_id"`
	// @inject_tag: sql:"good_id"
	GoodID string `protobuf:"bytes,30,opt,name=GoodID,proto3" json:"GoodID,omitempty" sql:"good_id"`
	// @inject_tag: sql:"online"
	Online bool `protobuf:"varint,40,opt,name=Online,proto3" json:"Online,omitempty" sql:"online"`
	// @inject_tag: sql:"visible"
	Visible bool `protobuf:"varint,50,opt,name=Visible,proto3" json:"Visible,omitempty" sql:"visible"`
	// @inject_tag: sql:"unit_price"
	UnitPrice string `protobuf:"bytes,60,opt,name=UnitPrice,proto3" json:"UnitPrice,omitempty" sql:"unit_price"`
	// @inject_tag: sql:"package_price"
	PackagePrice string `protobuf:"bytes,61,opt,name=PackagePrice,proto3" json:"PackagePrice,omitempty" sql:"package_price"`
	// @inject_tag: sql:"display_index"
	DisplayIndex int32 `protobuf:"varint,70,opt,name=DisplayIndex,proto3" json:"DisplayIndex,omitempty" sql:"display_index"`
	// @inject_tag: sql:"device_info_id"
	DeviceInfoID string `protobuf:"bytes,170,opt,name=DeviceInfoID,proto3" json:"DeviceInfoID,omitempty" sql:"device_info_id"`
	// @inject_tag: sql:"device_type"
	DeviceType string `protobuf:"bytes,180,opt,name=DeviceType,proto3" json:"DeviceType,omitempty" sql:"device_type"`
	// @inject_tag: sql:"device_manufacturer"
	DeviceManufacturer string `protobuf:"bytes,190,opt,name=DeviceManufacturer,proto3" json:"DeviceManufacturer,omitempty" sql:"device_manufacturer"`
	// @inject_tag: sql:"device_power_consumption"
	DevicePowerConsumption uint32 `protobuf:"varint,200,opt,name=DevicePowerConsumption,proto3" json:"DevicePowerConsumption,omitempty" sql:"device_power_consumption"`
	// @inject_tag: sql:"device_shipment_at"
	DeviceShipmentAt uint32   `protobuf:"varint,210,opt,name=DeviceShipmentAt,proto3" json:"DeviceShipmentAt,omitempty" sql:"device_shipment_at"`
	DevicePosters    []string `protobuf:"bytes,220,rep,name=DevicePosters,proto3" json:"DevicePosters,omitempty"`
	// @inject_tag: sql:"device_posters"
	DevicePostersStr string `protobuf:"bytes,221,opt,name=DevicePostersStr,proto3" json:"DevicePostersStr,omitempty" sql:"device_posters"`
	// @inject_tag: sql:"coin_type_id"
	CoinTypeID string `protobuf:"bytes,240,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty" sql:"coin_type_id"`
	// @inject_tag: sql:"vendor_location_id"
	VendorLocationID string `protobuf:"bytes,249,opt,name=VendorLocationID,proto3" json:"VendorLocationID,omitempty" sql:"vendor_location_id"`
	// @inject_tag: sql:"vendor_location_country"
	VendorLocationCountry string `protobuf:"bytes,250,opt,name=VendorLocationCountry,proto3" json:"VendorLocationCountry,omitempty" sql:"vendor_location_country"`
	// @inject_tag: sql:"vendor_brand_name"
	VendorBrandName string `protobuf:"bytes,251,opt,name=VendorBrandName,proto3" json:"VendorBrandName,omitempty" sql:"vendor_brand_name"`
	// @inject_tag: sql:"vendor_brand_logo"
	VendorBrandLogo string      `protobuf:"bytes,252,opt,name=VendorBrandLogo,proto3" json:"VendorBrandLogo,omitempty" sql:"vendor_brand_logo"`
	GoodType        v1.GoodType `protobuf:"varint,260,opt,name=GoodType,proto3,enum=basetypes.good.v1.GoodType" json:"GoodType,omitempty"`
	// @inject_tag: sql:"good_type"
	GoodTypeStr string         `protobuf:"bytes,261,opt,name=GoodTypeStr,proto3" json:"GoodTypeStr,omitempty" sql:"good_type"`
	BenefitType v1.BenefitType `protobuf:"varint,270,opt,name=BenefitType,proto3,enum=basetypes.good.v1.BenefitType" json:"BenefitType,omitempty"`
	// @inject_tag: sql:"benefit_type"
	BenefitTypeStr string `protobuf:"bytes,271,opt,name=BenefitTypeStr,proto3" json:"BenefitTypeStr,omitempty" sql:"benefit_type"`
	// @inject_tag: sql:"good_name"
	GoodName string `protobuf:"bytes,280,opt,name=GoodName,proto3" json:"GoodName,omitempty" sql:"good_name"`
	// @inject_tag: sql:"quantity_unit"
	QuantityUnit string `protobuf:"bytes,290,opt,name=QuantityUnit,proto3" json:"QuantityUnit,omitempty" sql:"quantity_unit"`
	// @inject_tag: sql:"quantity_unit_amount"
	QuantityUnitAmount string `protobuf:"bytes,300,opt,name=QuantityUnitAmount,proto3" json:"QuantityUnitAmount,omitempty" sql:"quantity_unit_amount"`
	// @inject_tag: sql:"test_only"
	TestOnly bool     `protobuf:"varint,320,opt,name=TestOnly,proto3" json:"TestOnly,omitempty" sql:"test_only"`
	Posters  []string `protobuf:"bytes,330,rep,name=Posters,proto3" json:"Posters,omitempty"`
	// @inject_tag: sql:"posters"
	PostersStr string         `protobuf:"bytes,331,opt,name=PostersStr,proto3" json:"PostersStr,omitempty" sql:"posters"`
	Labels     []v1.GoodLabel `protobuf:"varint,340,rep,packed,name=Labels,proto3,enum=basetypes.good.v1.GoodLabel" json:"Labels,omitempty"`
	// @inject_tag: sql:"labels"
	LabelsStr string `protobuf:"bytes,341,opt,name=LabelsStr,proto3" json:"LabelsStr,omitempty" sql:"labels"`
	// @inject_tag: sql:"benefit_interval_hours"
	BenefitIntervalHours uint32 `protobuf:"varint,361,opt,name=BenefitIntervalHours,proto3" json:"BenefitIntervalHours,omitempty" sql:"benefit_interval_hours"`
	// @inject_tag: sql:"good_total"
	GoodTotal string `protobuf:"bytes,370,opt,name=GoodTotal,proto3" json:"GoodTotal,omitempty" sql:"good_total"`
	// @inject_tag: sql:"good_spot_quantity"
	GoodSpotQuantity string `protobuf:"bytes,380,opt,name=GoodSpotQuantity,proto3" json:"GoodSpotQuantity,omitempty" sql:"good_spot_quantity"`
	// @inject_tag: sql:"good_in_service"
	GoodInService string `protobuf:"bytes,390,opt,name=GoodInService,proto3" json:"GoodInService,omitempty" sql:"good_in_service"`
	// @inject_tag: sql:"good_sold"
	GoodSold string `protobuf:"bytes,400,opt,name=GoodSold,proto3" json:"GoodSold,omitempty" sql:"good_sold"`
	// @inject_tag: sql:"start_at"
	StartAt uint32 `protobuf:"varint,410,opt,name=StartAt,proto3" json:"StartAt,omitempty" sql:"start_at"`
	// @inject_tag: sql:"start_mode"
	StartModeStr string           `protobuf:"bytes,411,opt,name=StartModeStr,proto3" json:"StartModeStr,omitempty" sql:"start_mode"`
	StartMode    v1.GoodStartMode `protobuf:"varint,412,opt,name=StartMode,proto3,enum=basetypes.good.v1.GoodStartMode" json:"StartMode,omitempty"`
	// @inject_tag: sql:"sale_start_at"
	SaleStartAt uint32 `protobuf:"varint,430,opt,name=SaleStartAt,proto3" json:"SaleStartAt,omitempty" sql:"sale_start_at"`
	// @inject_tag: sql:"sale_end_at"
	SaleEndAt uint32 `protobuf:"varint,440,opt,name=SaleEndAt,proto3" json:"SaleEndAt,omitempty" sql:"sale_end_at"`
	// @inject_tag: sql:"service_start_at"
	ServiceStartAt uint32 `protobuf:"varint,450,opt,name=ServiceStartAt,proto3" json:"ServiceStartAt,omitempty" sql:"service_start_at"`
	// @inject_tag: sql:"technical_fee_ratio"
	TechnicalFeeRatio string `protobuf:"bytes,460,opt,name=TechnicalFeeRatio,proto3" json:"TechnicalFeeRatio,omitempty" sql:"technical_fee_ratio"`
	// @inject_tag: sql:"electricity_fee_ratio"
	ElectricityFeeRatio string `protobuf:"bytes,470,opt,name=ElectricityFeeRatio,proto3" json:"ElectricityFeeRatio,omitempty" sql:"electricity_fee_ratio"`
	// @inject_tag: sql:"descriptions"
	DescriptionsStr string   `protobuf:"bytes,510,opt,name=DescriptionsStr,proto3" json:"DescriptionsStr,omitempty" sql:"descriptions"`
	Descriptions    []string `protobuf:"bytes,520,rep,name=Descriptions,proto3" json:"Descriptions,omitempty"`
	// @inject_tag: sql:"good_banner"
	GoodBanner string `protobuf:"bytes,530,opt,name=GoodBanner,proto3" json:"GoodBanner,omitempty" sql:"good_banner"`
	// @inject_tag: sql:"display_names"
	DisplayNamesStr string   `protobuf:"bytes,540,opt,name=DisplayNamesStr,proto3" json:"DisplayNamesStr,omitempty" sql:"display_names"`
	DisplayNames    []string `protobuf:"bytes,550,rep,name=DisplayNames,proto3" json:"DisplayNames,omitempty"`
	// @inject_tag: sql:"enable_purchase"
	EnablePurchase bool `protobuf:"varint,560,opt,name=EnablePurchase,proto3" json:"EnablePurchase,omitempty" sql:"enable_purchase"`
	// @inject_tag: sql:"enable_product_page"
	EnableProductPage bool `protobuf:"varint,570,opt,name=EnableProductPage,proto3" json:"EnableProductPage,omitempty" sql:"enable_product_page"`
	// @inject_tag: sql:"cancel_mode"
	CancelModeStr string        `protobuf:"bytes,580,opt,name=CancelModeStr,proto3" json:"CancelModeStr,omitempty" sql:"cancel_mode"`
	CancelMode    v1.CancelMode `protobuf:"varint,590,opt,name=CancelMode,proto3,enum=basetypes.good.v1.CancelMode" json:"CancelMode,omitempty"`
	// @inject_tag: sql:"display_colors"
	DisplayColorsStr string   `protobuf:"bytes,610,opt,name=DisplayColorsStr,proto3" json:"DisplayColorsStr,omitempty" sql:"display_colors"`
	DisplayColors    []string `protobuf:"bytes,620,rep,name=DisplayColors,proto3" json:"DisplayColors,omitempty"`
	// @inject_tag: sql:"cancellable_before_start"
	CancellableBeforeStart uint32 `protobuf:"varint,630,opt,name=CancellableBeforeStart,proto3" json:"CancellableBeforeStart,omitempty" sql:"cancellable_before_start"`
	// @inject_tag: sql:"product_page"
	ProductPage string `protobuf:"bytes,640,opt,name=ProductPage,proto3" json:"ProductPage,omitempty" sql:"product_page"`
	// @inject_tag: sql:"enable_set_commission"
	EnableSetCommission bool `protobuf:"varint,650,opt,name=EnableSetCommission,proto3" json:"EnableSetCommission,omitempty" sql:"enable_set_commission"`
	// @inject_tag: sql:"likes"
	Likes uint32 `protobuf:"varint,660,opt,name=Likes,proto3" json:"Likes,omitempty" sql:"likes"`
	// @inject_tag: sql:"dislikes"
	Dislikes uint32 `protobuf:"varint,670,opt,name=Dislikes,proto3" json:"Dislikes,omitempty" sql:"dislikes"`
	// @inject_tag: sql:"score"
	Score string `protobuf:"bytes,680,opt,name=Score,proto3" json:"Score,omitempty" sql:"score"`
	// @inject_tag: sql:"score_count"
	ScoreCount uint32 `protobuf:"varint,690,opt,name=ScoreCount,proto3" json:"ScoreCount,omitempty" sql:"score_count"`
	// @inject_tag: sql:"recommend_count"
	RecommendCount uint32 `protobuf:"varint,700,opt,name=RecommendCount,proto3" json:"RecommendCount,omitempty" sql:"recommend_count"`
	// @inject_tag: sql:"comment_count"
	CommentCount uint32 `protobuf:"varint,710,opt,name=CommentCount,proto3" json:"CommentCount,omitempty" sql:"comment_count"`
	// @inject_tag: sql:"app_good_stock_id"
	AppGoodStockID string `protobuf:"bytes,730,opt,name=AppGoodStockID,proto3" json:"AppGoodStockID,omitempty" sql:"app_good_stock_id"`
	// @inject_tag: sql:"app_good_reserved"
	AppGoodReserved string `protobuf:"bytes,740,opt,name=AppGoodReserved,proto3" json:"AppGoodReserved,omitempty" sql:"app_good_reserved"`
	// @inject_tag: sql:"app_spot_quantity"
	AppSpotQuantity string `protobuf:"bytes,750,opt,name=AppSpotQuantity,proto3" json:"AppSpotQuantity,omitempty" sql:"app_spot_quantity"`
	// @inject_tag: sql:"app_good_locked"
	AppGoodLocked string `protobuf:"bytes,760,opt,name=AppGoodLocked,proto3" json:"AppGoodLocked,omitempty" sql:"app_good_locked"`
	// @inject_tag: sql:"app_good_wait_start"
	AppGoodWaitStart string `protobuf:"bytes,770,opt,name=AppGoodWaitStart,proto3" json:"AppGoodWaitStart,omitempty" sql:"app_good_wait_start"`
	// @inject_tag: sql:"app_good_in_service"
	AppGoodInService string `protobuf:"bytes,780,opt,name=AppGoodInService,proto3" json:"AppGoodInService,omitempty" sql:"app_good_in_service"`
	// @inject_tag: sql:"app_good_sold"
	AppGoodSold string `protobuf:"bytes,790,opt,name=AppGoodSold,proto3" json:"AppGoodSold,omitempty" sql:"app_good_sold"`
	// @inject_tag: sql:"last_reward_at"
	LastRewardAt uint32 `protobuf:"varint,800,opt,name=LastRewardAt,proto3" json:"LastRewardAt,omitempty" sql:"last_reward_at"`
	// @inject_tag: sql:"last_reward_amount"
	LastRewardAmount string `protobuf:"bytes,810,opt,name=LastRewardAmount,proto3" json:"LastRewardAmount,omitempty" sql:"last_reward_amount"`
	// @inject_tag: sql:"total_reward_amount"
	TotalRewardAmount string `protobuf:"bytes,820,opt,name=TotalRewardAmount,proto3" json:"TotalRewardAmount,omitempty" sql:"total_reward_amount"`
	// @inject_tag: sql:"last_unit_reward_amount"
	LastUnitRewardAmount string `protobuf:"bytes,830,opt,name=LastUnitRewardAmount,proto3" json:"LastUnitRewardAmount,omitempty" sql:"last_unit_reward_amount"`
	// @inject_tag: sql:"app_good_posters"
	AppGoodPostersStr string   `protobuf:"bytes,840,opt,name=AppGoodPostersStr,proto3" json:"AppGoodPostersStr,omitempty" sql:"app_good_posters"`
	AppGoodPosters    []string `protobuf:"bytes,850,rep,name=AppGoodPosters,proto3" json:"AppGoodPosters,omitempty"`
	// @inject_tag: sql:"min_order_amount"
	MinOrderAmount string `protobuf:"bytes,860,opt,name=MinOrderAmount,proto3" json:"MinOrderAmount,omitempty" sql:"min_order_amount"`
	// @inject_tag: sql:"max_order_amount"
	MaxOrderAmount string `protobuf:"bytes,870,opt,name=MaxOrderAmount,proto3" json:"MaxOrderAmount,omitempty" sql:"max_order_amount"`
	// @inject_tag: sql:"max_user_amount"
	MaxUserAmount string `protobuf:"bytes,880,opt,name=MaxUserAmount,proto3" json:"MaxUserAmount,omitempty" sql:"max_user_amount"`
	// @inject_tag: sql:"min_order_duration"
	MinOrderDuration uint32 `protobuf:"varint,890,opt,name=MinOrderDuration,proto3" json:"MinOrderDuration,omitempty" sql:"min_order_duration"`
	// @inject_tag: sql:"max_order_duration"
	MaxOrderDuration uint32 `protobuf:"varint,900,opt,name=MaxOrderDuration,proto3" json:"MaxOrderDuration,omitempty" sql:"max_order_duration"`
	// @inject_tag: sql:"unit_type"
	UnitTypeStr string          `protobuf:"bytes,910,opt,name=UnitTypeStr,proto3" json:"UnitTypeStr,omitempty" sql:"unit_type"`
	UnitType    v1.GoodUnitType `protobuf:"varint,920,opt,name=UnitType,proto3,enum=basetypes.good.v1.GoodUnitType" json:"UnitType,omitempty"`
	// @inject_tag: sql:"quantity_calculate_type"
	QuantityCalculateTypeStr string                   `protobuf:"bytes,930,opt,name=QuantityCalculateTypeStr,proto3" json:"QuantityCalculateTypeStr,omitempty" sql:"quantity_calculate_type"`
	QuantityCalculateType    v1.GoodUnitCalculateType `protobuf:"varint,940,opt,name=QuantityCalculateType,proto3,enum=basetypes.good.v1.GoodUnitCalculateType" json:"QuantityCalculateType,omitempty"`
	// @inject_tag: sql:"duration_type"
	DurationTypeStr string              `protobuf:"bytes,950,opt,name=DurationTypeStr,proto3" json:"DurationTypeStr,omitempty" sql:"duration_type"`
	DurationType    v1.GoodDurationType `protobuf:"varint,960,opt,name=DurationType,proto3,enum=basetypes.good.v1.GoodDurationType" json:"DurationType,omitempty"`
	// @inject_tag: sql:"duration_calculate_type"
	DurationCalculateTypeStr string                   `protobuf:"bytes,970,opt,name=DurationCalculateTypeStr,proto3" json:"DurationCalculateTypeStr,omitempty" sql:"duration_calculate_type"`
	DurationCalculateType    v1.GoodUnitCalculateType `protobuf:"varint,980,opt,name=DurationCalculateType,proto3,enum=basetypes.good.v1.GoodUnitCalculateType" json:"DurationCalculateType,omitempty"`
	// @inject_tag: sql:"settlement_type"
	SettlementTypeStr string                `protobuf:"bytes,990,opt,name=SettlementTypeStr,proto3" json:"SettlementTypeStr,omitempty" sql:"settlement_type"`
	SettlementType    v1.GoodSettlementType `protobuf:"varint,1000,opt,name=SettlementType,proto3,enum=basetypes.good.v1.GoodSettlementType" json:"SettlementType,omitempty"`
	// @inject_tag: sql:"package_with_requireds"
	PackageWithRequireds bool `protobuf:"varint,1010,opt,name=PackageWithRequireds,proto3" json:"PackageWithRequireds,omitempty" sql:"package_with_requireds"`
	// @inject_tag: sql:"created_at"
	CreatedAt uint32 `protobuf:"varint,2000,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
	// @inject_tag: sql:"updated_at"
	UpdatedAt uint32 `protobuf:"varint,2100,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty" sql:"updated_at"`
}

func (x *Good) Reset() {
	*x = Good{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_good_good_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Good) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Good) ProtoMessage() {}

func (x *Good) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_good_good_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Good.ProtoReflect.Descriptor instead.
func (*Good) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_good_good_proto_rawDescGZIP(), []int{1}
}

func (x *Good) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Good) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *Good) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *Good) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *Good) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

func (x *Good) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

func (x *Good) GetUnitPrice() string {
	if x != nil {
		return x.UnitPrice
	}
	return ""
}

func (x *Good) GetPackagePrice() string {
	if x != nil {
		return x.PackagePrice
	}
	return ""
}

func (x *Good) GetDisplayIndex() int32 {
	if x != nil {
		return x.DisplayIndex
	}
	return 0
}

func (x *Good) GetDeviceInfoID() string {
	if x != nil {
		return x.DeviceInfoID
	}
	return ""
}

func (x *Good) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *Good) GetDeviceManufacturer() string {
	if x != nil {
		return x.DeviceManufacturer
	}
	return ""
}

func (x *Good) GetDevicePowerConsumption() uint32 {
	if x != nil {
		return x.DevicePowerConsumption
	}
	return 0
}

func (x *Good) GetDeviceShipmentAt() uint32 {
	if x != nil {
		return x.DeviceShipmentAt
	}
	return 0
}

func (x *Good) GetDevicePosters() []string {
	if x != nil {
		return x.DevicePosters
	}
	return nil
}

func (x *Good) GetDevicePostersStr() string {
	if x != nil {
		return x.DevicePostersStr
	}
	return ""
}

func (x *Good) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

func (x *Good) GetVendorLocationID() string {
	if x != nil {
		return x.VendorLocationID
	}
	return ""
}

func (x *Good) GetVendorLocationCountry() string {
	if x != nil {
		return x.VendorLocationCountry
	}
	return ""
}

func (x *Good) GetVendorBrandName() string {
	if x != nil {
		return x.VendorBrandName
	}
	return ""
}

func (x *Good) GetVendorBrandLogo() string {
	if x != nil {
		return x.VendorBrandLogo
	}
	return ""
}

func (x *Good) GetGoodType() v1.GoodType {
	if x != nil {
		return x.GoodType
	}
	return v1.GoodType(0)
}

func (x *Good) GetGoodTypeStr() string {
	if x != nil {
		return x.GoodTypeStr
	}
	return ""
}

func (x *Good) GetBenefitType() v1.BenefitType {
	if x != nil {
		return x.BenefitType
	}
	return v1.BenefitType(0)
}

func (x *Good) GetBenefitTypeStr() string {
	if x != nil {
		return x.BenefitTypeStr
	}
	return ""
}

func (x *Good) GetGoodName() string {
	if x != nil {
		return x.GoodName
	}
	return ""
}

func (x *Good) GetQuantityUnit() string {
	if x != nil {
		return x.QuantityUnit
	}
	return ""
}

func (x *Good) GetQuantityUnitAmount() string {
	if x != nil {
		return x.QuantityUnitAmount
	}
	return ""
}

func (x *Good) GetTestOnly() bool {
	if x != nil {
		return x.TestOnly
	}
	return false
}

func (x *Good) GetPosters() []string {
	if x != nil {
		return x.Posters
	}
	return nil
}

func (x *Good) GetPostersStr() string {
	if x != nil {
		return x.PostersStr
	}
	return ""
}

func (x *Good) GetLabels() []v1.GoodLabel {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Good) GetLabelsStr() string {
	if x != nil {
		return x.LabelsStr
	}
	return ""
}

func (x *Good) GetBenefitIntervalHours() uint32 {
	if x != nil {
		return x.BenefitIntervalHours
	}
	return 0
}

func (x *Good) GetGoodTotal() string {
	if x != nil {
		return x.GoodTotal
	}
	return ""
}

func (x *Good) GetGoodSpotQuantity() string {
	if x != nil {
		return x.GoodSpotQuantity
	}
	return ""
}

func (x *Good) GetGoodInService() string {
	if x != nil {
		return x.GoodInService
	}
	return ""
}

func (x *Good) GetGoodSold() string {
	if x != nil {
		return x.GoodSold
	}
	return ""
}

func (x *Good) GetStartAt() uint32 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *Good) GetStartModeStr() string {
	if x != nil {
		return x.StartModeStr
	}
	return ""
}

func (x *Good) GetStartMode() v1.GoodStartMode {
	if x != nil {
		return x.StartMode
	}
	return v1.GoodStartMode(0)
}

func (x *Good) GetSaleStartAt() uint32 {
	if x != nil {
		return x.SaleStartAt
	}
	return 0
}

func (x *Good) GetSaleEndAt() uint32 {
	if x != nil {
		return x.SaleEndAt
	}
	return 0
}

func (x *Good) GetServiceStartAt() uint32 {
	if x != nil {
		return x.ServiceStartAt
	}
	return 0
}

func (x *Good) GetTechnicalFeeRatio() string {
	if x != nil {
		return x.TechnicalFeeRatio
	}
	return ""
}

func (x *Good) GetElectricityFeeRatio() string {
	if x != nil {
		return x.ElectricityFeeRatio
	}
	return ""
}

func (x *Good) GetDescriptionsStr() string {
	if x != nil {
		return x.DescriptionsStr
	}
	return ""
}

func (x *Good) GetDescriptions() []string {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *Good) GetGoodBanner() string {
	if x != nil {
		return x.GoodBanner
	}
	return ""
}

func (x *Good) GetDisplayNamesStr() string {
	if x != nil {
		return x.DisplayNamesStr
	}
	return ""
}

func (x *Good) GetDisplayNames() []string {
	if x != nil {
		return x.DisplayNames
	}
	return nil
}

func (x *Good) GetEnablePurchase() bool {
	if x != nil {
		return x.EnablePurchase
	}
	return false
}

func (x *Good) GetEnableProductPage() bool {
	if x != nil {
		return x.EnableProductPage
	}
	return false
}

func (x *Good) GetCancelModeStr() string {
	if x != nil {
		return x.CancelModeStr
	}
	return ""
}

func (x *Good) GetCancelMode() v1.CancelMode {
	if x != nil {
		return x.CancelMode
	}
	return v1.CancelMode(0)
}

func (x *Good) GetDisplayColorsStr() string {
	if x != nil {
		return x.DisplayColorsStr
	}
	return ""
}

func (x *Good) GetDisplayColors() []string {
	if x != nil {
		return x.DisplayColors
	}
	return nil
}

func (x *Good) GetCancellableBeforeStart() uint32 {
	if x != nil {
		return x.CancellableBeforeStart
	}
	return 0
}

func (x *Good) GetProductPage() string {
	if x != nil {
		return x.ProductPage
	}
	return ""
}

func (x *Good) GetEnableSetCommission() bool {
	if x != nil {
		return x.EnableSetCommission
	}
	return false
}

func (x *Good) GetLikes() uint32 {
	if x != nil {
		return x.Likes
	}
	return 0
}

func (x *Good) GetDislikes() uint32 {
	if x != nil {
		return x.Dislikes
	}
	return 0
}

func (x *Good) GetScore() string {
	if x != nil {
		return x.Score
	}
	return ""
}

func (x *Good) GetScoreCount() uint32 {
	if x != nil {
		return x.ScoreCount
	}
	return 0
}

func (x *Good) GetRecommendCount() uint32 {
	if x != nil {
		return x.RecommendCount
	}
	return 0
}

func (x *Good) GetCommentCount() uint32 {
	if x != nil {
		return x.CommentCount
	}
	return 0
}

func (x *Good) GetAppGoodStockID() string {
	if x != nil {
		return x.AppGoodStockID
	}
	return ""
}

func (x *Good) GetAppGoodReserved() string {
	if x != nil {
		return x.AppGoodReserved
	}
	return ""
}

func (x *Good) GetAppSpotQuantity() string {
	if x != nil {
		return x.AppSpotQuantity
	}
	return ""
}

func (x *Good) GetAppGoodLocked() string {
	if x != nil {
		return x.AppGoodLocked
	}
	return ""
}

func (x *Good) GetAppGoodWaitStart() string {
	if x != nil {
		return x.AppGoodWaitStart
	}
	return ""
}

func (x *Good) GetAppGoodInService() string {
	if x != nil {
		return x.AppGoodInService
	}
	return ""
}

func (x *Good) GetAppGoodSold() string {
	if x != nil {
		return x.AppGoodSold
	}
	return ""
}

func (x *Good) GetLastRewardAt() uint32 {
	if x != nil {
		return x.LastRewardAt
	}
	return 0
}

func (x *Good) GetLastRewardAmount() string {
	if x != nil {
		return x.LastRewardAmount
	}
	return ""
}

func (x *Good) GetTotalRewardAmount() string {
	if x != nil {
		return x.TotalRewardAmount
	}
	return ""
}

func (x *Good) GetLastUnitRewardAmount() string {
	if x != nil {
		return x.LastUnitRewardAmount
	}
	return ""
}

func (x *Good) GetAppGoodPostersStr() string {
	if x != nil {
		return x.AppGoodPostersStr
	}
	return ""
}

func (x *Good) GetAppGoodPosters() []string {
	if x != nil {
		return x.AppGoodPosters
	}
	return nil
}

func (x *Good) GetMinOrderAmount() string {
	if x != nil {
		return x.MinOrderAmount
	}
	return ""
}

func (x *Good) GetMaxOrderAmount() string {
	if x != nil {
		return x.MaxOrderAmount
	}
	return ""
}

func (x *Good) GetMaxUserAmount() string {
	if x != nil {
		return x.MaxUserAmount
	}
	return ""
}

func (x *Good) GetMinOrderDuration() uint32 {
	if x != nil {
		return x.MinOrderDuration
	}
	return 0
}

func (x *Good) GetMaxOrderDuration() uint32 {
	if x != nil {
		return x.MaxOrderDuration
	}
	return 0
}

func (x *Good) GetUnitTypeStr() string {
	if x != nil {
		return x.UnitTypeStr
	}
	return ""
}

func (x *Good) GetUnitType() v1.GoodUnitType {
	if x != nil {
		return x.UnitType
	}
	return v1.GoodUnitType(0)
}

func (x *Good) GetQuantityCalculateTypeStr() string {
	if x != nil {
		return x.QuantityCalculateTypeStr
	}
	return ""
}

func (x *Good) GetQuantityCalculateType() v1.GoodUnitCalculateType {
	if x != nil {
		return x.QuantityCalculateType
	}
	return v1.GoodUnitCalculateType(0)
}

func (x *Good) GetDurationTypeStr() string {
	if x != nil {
		return x.DurationTypeStr
	}
	return ""
}

func (x *Good) GetDurationType() v1.GoodDurationType {
	if x != nil {
		return x.DurationType
	}
	return v1.GoodDurationType(0)
}

func (x *Good) GetDurationCalculateTypeStr() string {
	if x != nil {
		return x.DurationCalculateTypeStr
	}
	return ""
}

func (x *Good) GetDurationCalculateType() v1.GoodUnitCalculateType {
	if x != nil {
		return x.DurationCalculateType
	}
	return v1.GoodUnitCalculateType(0)
}

func (x *Good) GetSettlementTypeStr() string {
	if x != nil {
		return x.SettlementTypeStr
	}
	return ""
}

func (x *Good) GetSettlementType() v1.GoodSettlementType {
	if x != nil {
		return x.SettlementType
	}
	return v1.GoodSettlementType(0)
}

func (x *Good) GetPackageWithRequireds() bool {
	if x != nil {
		return x.PackageWithRequireds
	}
	return false
}

func (x *Good) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Good) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      *v11.Uint32Val      `protobuf:"bytes,9,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID   *v11.StringVal      `protobuf:"bytes,10,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	AppID   *v11.StringVal      `protobuf:"bytes,20,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	GoodID  *v11.StringVal      `protobuf:"bytes,30,opt,name=GoodID,proto3,oneof" json:"GoodID,omitempty"`
	GoodIDs *v11.StringSliceVal `protobuf:"bytes,40,opt,name=GoodIDs,proto3,oneof" json:"GoodIDs,omitempty"`
	AppIDs  *v11.StringSliceVal `protobuf:"bytes,50,opt,name=AppIDs,proto3,oneof" json:"AppIDs,omitempty"`
	IDs     *v11.Uint32SliceVal `protobuf:"bytes,60,opt,name=IDs,proto3,oneof" json:"IDs,omitempty"`
	EntIDs  *v11.StringSliceVal `protobuf:"bytes,70,opt,name=EntIDs,proto3,oneof" json:"EntIDs,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_good_good_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_good_good_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_good_good_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *v11.Uint32Val {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetEntID() *v11.StringVal {
	if x != nil {
		return x.EntID
	}
	return nil
}

func (x *Conds) GetAppID() *v11.StringVal {
	if x != nil {
		return x.AppID
	}
	return nil
}

func (x *Conds) GetGoodID() *v11.StringVal {
	if x != nil {
		return x.GoodID
	}
	return nil
}

func (x *Conds) GetGoodIDs() *v11.StringSliceVal {
	if x != nil {
		return x.GoodIDs
	}
	return nil
}

func (x *Conds) GetAppIDs() *v11.StringSliceVal {
	if x != nil {
		return x.AppIDs
	}
	return nil
}

func (x *Conds) GetIDs() *v11.Uint32SliceVal {
	if x != nil {
		return x.IDs
	}
	return nil
}

func (x *Conds) GetEntIDs() *v11.StringSliceVal {
	if x != nil {
		return x.EntIDs
	}
	return nil
}

type CreateGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *GoodReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateGoodRequest) Reset() {
	*x = CreateGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_good_good_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGoodRequest) ProtoMessage() {}

func (x *CreateGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_good_good_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGoodRequest.ProtoReflect.Descriptor instead.
func (*CreateGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_good_good_proto_rawDescGZIP(), []int{3}
}

func (x *CreateGoodRequest) GetInfo() *GoodReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Good `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateGoodResponse) Reset() {
	*x = CreateGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_good_good_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGoodResponse) ProtoMessage() {}

func (x *CreateGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_good_good_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGoodResponse.ProtoReflect.Descriptor instead.
func (*CreateGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_good_good_proto_rawDescGZIP(), []int{4}
}

func (x *CreateGoodResponse) GetInfo() *Good {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntID string `protobuf:"bytes,10,opt,name=EntID,proto3" json:"EntID,omitempty"`
}

func (x *GetGoodRequest) Reset() {
	*x = GetGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_good_good_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodRequest) ProtoMessage() {}

func (x *GetGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_good_good_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodRequest.ProtoReflect.Descriptor instead.
func (*GetGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_good_good_proto_rawDescGZIP(), []int{5}
}

func (x *GetGoodRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

type GetGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Good `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetGoodResponse) Reset() {
	*x = GetGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_good_good_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodResponse) ProtoMessage() {}

func (x *GetGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_good_good_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodResponse.ProtoReflect.Descriptor instead.
func (*GetGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_good_good_proto_rawDescGZIP(), []int{6}
}

func (x *GetGoodResponse) GetInfo() *Good {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetGoodsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetGoodsRequest) Reset() {
	*x = GetGoodsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_good_good_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodsRequest) ProtoMessage() {}

func (x *GetGoodsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_good_good_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodsRequest.ProtoReflect.Descriptor instead.
func (*GetGoodsRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_good_good_proto_rawDescGZIP(), []int{7}
}

func (x *GetGoodsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetGoodsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetGoodsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetGoodsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Good `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32  `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetGoodsResponse) Reset() {
	*x = GetGoodsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_good_good_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodsResponse) ProtoMessage() {}

func (x *GetGoodsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_good_good_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodsResponse.ProtoReflect.Descriptor instead.
func (*GetGoodsResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_good_good_proto_rawDescGZIP(), []int{8}
}

func (x *GetGoodsResponse) GetInfos() []*Good {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetGoodsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ExistGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntID string `protobuf:"bytes,10,opt,name=EntID,proto3" json:"EntID,omitempty"`
}

func (x *ExistGoodRequest) Reset() {
	*x = ExistGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_good_good_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistGoodRequest) ProtoMessage() {}

func (x *ExistGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_good_good_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistGoodRequest.ProtoReflect.Descriptor instead.
func (*ExistGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_good_good_proto_rawDescGZIP(), []int{9}
}

func (x *ExistGoodRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

type ExistGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistGoodResponse) Reset() {
	*x = ExistGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_good_good_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistGoodResponse) ProtoMessage() {}

func (x *ExistGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_good_good_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistGoodResponse.ProtoReflect.Descriptor instead.
func (*ExistGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_good_good_proto_rawDescGZIP(), []int{10}
}

func (x *ExistGoodResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type ExistGoodCondsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *ExistGoodCondsRequest) Reset() {
	*x = ExistGoodCondsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_good_good_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistGoodCondsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistGoodCondsRequest) ProtoMessage() {}

func (x *ExistGoodCondsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_good_good_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistGoodCondsRequest.ProtoReflect.Descriptor instead.
func (*ExistGoodCondsRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_good_good_proto_rawDescGZIP(), []int{11}
}

func (x *ExistGoodCondsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type ExistGoodCondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistGoodCondsResponse) Reset() {
	*x = ExistGoodCondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_good_good_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistGoodCondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistGoodCondsResponse) ProtoMessage() {}

func (x *ExistGoodCondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_good_good_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistGoodCondsResponse.ProtoReflect.Descriptor instead.
func (*ExistGoodCondsResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_good_good_proto_rawDescGZIP(), []int{12}
}

func (x *ExistGoodCondsResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type UpdateGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *GoodReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateGoodRequest) Reset() {
	*x = UpdateGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_good_good_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGoodRequest) ProtoMessage() {}

func (x *UpdateGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_good_good_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGoodRequest.ProtoReflect.Descriptor instead.
func (*UpdateGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_good_good_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateGoodRequest) GetInfo() *GoodReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Good `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateGoodResponse) Reset() {
	*x = UpdateGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_good_good_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGoodResponse) ProtoMessage() {}

func (x *UpdateGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_good_good_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGoodResponse.ProtoReflect.Descriptor instead.
func (*UpdateGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_good_good_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateGoodResponse) GetInfo() *Good {
	if x != nil {
		return x.Info
	}
	return nil
}

type DeleteGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *GoodReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteGoodRequest) Reset() {
	*x = DeleteGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_good_good_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGoodRequest) ProtoMessage() {}

func (x *DeleteGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_good_good_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGoodRequest.ProtoReflect.Descriptor instead.
func (*DeleteGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_good_good_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteGoodRequest) GetInfo() *GoodReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type DeleteGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Good `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteGoodResponse) Reset() {
	*x = DeleteGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_good_good_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGoodResponse) ProtoMessage() {}

func (x *DeleteGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_good_good_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGoodResponse.ProtoReflect.Descriptor instead.
func (*DeleteGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_good_good_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteGoodResponse) GetInfo() *Good {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_good_mw_v1_app_good_good_proto protoreflect.FileDescriptor

var file_npool_good_mw_v1_app_good_good_proto_rawDesc = []byte{
	0x0a, 0x24, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x6d, 0x77, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x31, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa2, 0x0e, 0x0a, 0x07, 0x47, 0x6f,
	0x6f, 0x64, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x45, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x45, 0x6e, 0x74,
	0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52,
	0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x56, 0x69,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x07, 0x56,
	0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x47, 0x6f, 0x6f,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x08, 0x47,
	0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x55, 0x6e,
	0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52,
	0x09, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a,
	0x0c, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x47, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0c, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x50, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x0c,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0b, 0x53, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x6e,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x0a, 0x52, 0x0b, 0x53, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x53, 0x61, 0x6c, 0x65, 0x45, 0x6e,
	0x64, 0x41, 0x74, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0b, 0x52, 0x09, 0x53, 0x61, 0x6c,
	0x65, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x82, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x0c, 0x52, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x11, 0x54, 0x65, 0x63, 0x68, 0x6e,
	0x69, 0x63, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x8c, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x11, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c,
	0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x13, 0x45,
	0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x13, 0x45, 0x6c, 0x65,
	0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0xb4, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0a, 0x47, 0x6f, 0x6f, 0x64,
	0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52,
	0x0a, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x23,
	0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0xc8,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x0e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x18, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x10, 0x52, 0x0e,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x32, 0x0a, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x18, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x11, 0x52,
	0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d,
	0x6f, 0x64, 0x65, 0x18, 0xe6, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x12, 0x52, 0x0a, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0d, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0xfa, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x73, 0x12, 0x3c, 0x0a, 0x16, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x84, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x13, 0x52, 0x16, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x18, 0x8e,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xb6,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x15, 0x52, 0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x07, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0xc0, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x0a, 0x0e, 0x4d, 0x69,
	0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xca, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x16, 0x52, 0x0e, 0x4d, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0e, 0x4d, 0x61, 0x78, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xd4, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x17, 0x52, 0x0e, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0d, 0x4d, 0x61, 0x78, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xde, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18,
	0x52, 0x0d, 0x4d, 0x61, 0x78, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x30, 0x0a, 0x10, 0x4d, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xe8, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x19, 0x52,
	0x10, 0x4d, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x10, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xf2, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x1a, 0x52, 0x10, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x14, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x73, 0x18, 0xfc,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x1b, 0x52, 0x14, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x73, 0x88, 0x01, 0x01,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x74, 0x49,
	0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x41, 0x70, 0x70, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x55,
	0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x53,
	0x61, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x53,
	0x61, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74,
	0x79, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x47, 0x6f,
	0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65,
	0x42, 0x19, 0x0a, 0x17, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x4d, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x4d, 0x61, 0x78, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x4d, 0x61,
	0x78, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x4d, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x73, 0x22, 0xa1,
	0x20, 0x0a, 0x04, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a,
	0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x46, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x23, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x49, 0x44, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x44, 0x12, 0x1f, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x12, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18,
	0xbe, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61,
	0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x16, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x68, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x18, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74,
	0x12, 0x25, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x18, 0xdc, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x0a, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x53, 0x74, 0x72, 0x18, 0xdd, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x53, 0x74, 0x72, 0x12, 0x1f, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x44, 0x18, 0xf0, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x10, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0xf9, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x12, 0x35, 0x0a, 0x15, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0xfa, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x29, 0x0a, 0x0f, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0xfb, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x42, 0x72,
	0x61, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0xfc, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x6f, 0x12,
	0x38, 0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x84, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x47, 0x6f, 0x6f,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x18, 0x85, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x12, 0x41, 0x0a, 0x0b,
	0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x8e, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x27, 0x0a, 0x0e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74,
	0x72, 0x18, 0x8f, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x12, 0x1b, 0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x98, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x47, 0x6f, 0x6f,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x55, 0x6e, 0x69, 0x74, 0x18, 0xa2, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x2f, 0x0a, 0x12, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0xac, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x08, 0x54,
	0x65, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0xc0, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x54, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x19, 0x0a, 0x07, 0x50, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x18, 0xca, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x50, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x53, 0x74,
	0x72, 0x18, 0xcb, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x53, 0x74, 0x72, 0x12, 0x35, 0x0a, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0xd4,
	0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x52, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x09, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x53, 0x74, 0x72, 0x18, 0xd5, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x53, 0x74, 0x72, 0x12, 0x33, 0x0a, 0x14, 0x42, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x48, 0x6f, 0x75,
	0x72, 0x73, 0x18, 0xe9, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x42, 0x65, 0x6e, 0x65, 0x66,
	0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12,
	0x1d, 0x0a, 0x09, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0xf2, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2b,
	0x0a, 0x10, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x70, 0x6f, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0xfc, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x47, 0x6f, 0x6f, 0x64, 0x53,
	0x70, 0x6f, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x0d, 0x47,
	0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x86, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x6f, 0x6c, 0x64, 0x18, 0x90,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x6f, 0x6c, 0x64, 0x12,
	0x19, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x9a, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x72, 0x18, 0x9b, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x72, 0x12,
	0x3f, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x9c, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x21, 0x0a, 0x0b, 0x53, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18,
	0xae, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x53, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x53, 0x61, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x74,
	0x18, 0xb8, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x53, 0x61, 0x6c, 0x65, 0x45, 0x6e, 0x64,
	0x41, 0x74, 0x12, 0x27, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x41, 0x74, 0x18, 0xc2, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x2d, 0x0a, 0x11, 0x54,
	0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x18, 0xcc, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63,
	0x61, 0x6c, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x31, 0x0a, 0x13, 0x45, 0x6c,
	0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x18, 0xd6, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72,
	0x69, 0x63, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x29, 0x0a,
	0x0f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x72,
	0x18, 0xfe, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x72, 0x12, 0x23, 0x0a, 0x0c, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x88, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a,
	0x0a, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x92, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x29,
	0x0a, 0x0f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x53, 0x74,
	0x72, 0x18, 0x9c, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x53, 0x74, 0x72, 0x12, 0x23, 0x0a, 0x0c, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0xa6, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x27,
	0x0a, 0x0e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x18, 0xb0, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x18, 0xba, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x72, 0x18, 0xc4, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x72, 0x12, 0x3e, 0x0a,
	0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0xce, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a,
	0x10, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x53, 0x74,
	0x72, 0x18, 0xe2, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x53, 0x74, 0x72, 0x12, 0x25, 0x0a, 0x0d, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0xec, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x73, 0x12, 0x37, 0x0a, 0x16, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0xf6, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x16, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0b, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x18, 0x80, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a,
	0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x8a, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x15, 0x0a, 0x05, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x18, 0x94, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x6c, 0x69,
	0x6b, 0x65, 0x73, 0x18, 0x9e, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x44, 0x69, 0x73, 0x6c,
	0x69, 0x6b, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0xa8, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xb2, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0e,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xbc,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xc6, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0e, 0x41, 0x70,
	0x70, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0xda, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0xe4, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x41,
	0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x29,
	0x0a, 0x0f, 0x41, 0x70, 0x70, 0x53, 0x70, 0x6f, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0xee, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x41, 0x70, 0x70, 0x53, 0x70, 0x6f,
	0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x0d, 0x41, 0x70, 0x70,
	0x47, 0x6f, 0x6f, 0x64, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0xf8, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x12, 0x2b, 0x0a, 0x10, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x57, 0x61, 0x69, 0x74, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x82, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x41, 0x70, 0x70,
	0x47, 0x6f, 0x6f, 0x64, 0x57, 0x61, 0x69, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2b, 0x0a,
	0x10, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x8c, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f,
	0x64, 0x49, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x41, 0x70,
	0x70, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x6f, 0x6c, 0x64, 0x18, 0x96, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x6f, 0x6c, 0x64, 0x12, 0x23, 0x0a,
	0x0c, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x74, 0x18, 0xa0, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x41, 0x74, 0x12, 0x2b, 0x0a, 0x10, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xaa, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4c,
	0x61, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2d, 0x0a, 0x11, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0xb4, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33,
	0x0a, 0x14, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xbe, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x4c,
	0x61, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x11, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x50, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x53, 0x74, 0x72, 0x18, 0xc8, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x53,
	0x74, 0x72, 0x12, 0x27, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x50, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x18, 0xd2, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x41, 0x70, 0x70,
	0x47, 0x6f, 0x6f, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x0e, 0x4d,
	0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xdc, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4d, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0e, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xe6, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4d,
	0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a,
	0x0d, 0x4d, 0x61, 0x78, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xf0,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4d, 0x61, 0x78, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x10, 0x4d, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xfa, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x4d, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2b, 0x0a, 0x10, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x84, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x4d, 0x61,
	0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x0b, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x18, 0x8e, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74,
	0x72, 0x12, 0x3c, 0x0a, 0x08, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x98, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x55, 0x6e, 0x69,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x3b, 0x0a, 0x18, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x18, 0xa2, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x18, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x12, 0x5f, 0x0a, 0x15,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0xac, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x15, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a,
	0x0f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72,
	0x18, 0xb6, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x12, 0x48, 0x0a, 0x0c, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0xc0, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x3b, 0x0a, 0x18, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x18, 0xca,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x12,
	0x5f, 0x0a, 0x15, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0xd4, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x28, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x15, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2d, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x53, 0x74, 0x72, 0x18, 0xde, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x12,
	0x4e, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x64, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x33, 0x0a, 0x14, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x73, 0x18, 0xf2, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0xd0, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0xb4, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x8b, 0x04, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x45, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x48, 0x01, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x32,
	0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x02, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x12, 0x34, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x06, 0x47,
	0x6f, 0x6f, 0x64, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x07, 0x47, 0x6f, 0x6f, 0x64,
	0x49, 0x44, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53,
	0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x04, 0x52, 0x07, 0x47, 0x6f, 0x6f, 0x64, 0x49,
	0x44, 0x73, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x06, 0x41, 0x70, 0x70, 0x49, 0x44, 0x73, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65,
	0x56, 0x61, 0x6c, 0x48, 0x05, 0x52, 0x06, 0x41, 0x70, 0x70, 0x49, 0x44, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x33, 0x0a, 0x03, 0x49, 0x44, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x06, 0x52, 0x03, 0x49,
	0x44, 0x73, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x06, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x18,
	0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65,
	0x56, 0x61, 0x6c, 0x48, 0x07, 0x52, 0x06, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x88, 0x01, 0x01,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x74, 0x49,
	0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x41, 0x70, 0x70, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x49,
	0x44, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x41, 0x70, 0x70, 0x49, 0x44, 0x73, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x49, 0x44, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x73,
	0x22, 0x4e, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x4c, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x26,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x49, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x7a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x62, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x38, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x64, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x22, 0x28, 0x0a, 0x10, 0x45, 0x78, 0x69, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x27, 0x0a, 0x11, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x52, 0x0a, 0x15, 0x45, 0x78, 0x69, 0x73, 0x74, 0x47, 0x6f, 0x6f,
	0x64, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a,
	0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x2c, 0x0a, 0x16, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4e, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4c, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4e, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x6f,
	0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4c, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x6f,
	0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x32, 0xab, 0x06, 0x0a, 0x0a, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x12, 0x71, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x12,
	0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x12,
	0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b,
	0x0a, 0x08, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x2d, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x09, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x47, 0x6f, 0x6f,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x47, 0x6f, 0x6f,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7d, 0x0a, 0x0e, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x33, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x0a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6f,
	0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47,
	0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a,
	0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x2f, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e,
	0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f,
	0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_good_mw_v1_app_good_good_proto_rawDescOnce sync.Once
	file_npool_good_mw_v1_app_good_good_proto_rawDescData = file_npool_good_mw_v1_app_good_good_proto_rawDesc
)

func file_npool_good_mw_v1_app_good_good_proto_rawDescGZIP() []byte {
	file_npool_good_mw_v1_app_good_good_proto_rawDescOnce.Do(func() {
		file_npool_good_mw_v1_app_good_good_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_good_mw_v1_app_good_good_proto_rawDescData)
	})
	return file_npool_good_mw_v1_app_good_good_proto_rawDescData
}

var file_npool_good_mw_v1_app_good_good_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_npool_good_mw_v1_app_good_good_proto_goTypes = []interface{}{
	(*GoodReq)(nil),                // 0: good.middleware.app.good1.v1.GoodReq
	(*Good)(nil),                   // 1: good.middleware.app.good1.v1.Good
	(*Conds)(nil),                  // 2: good.middleware.app.good1.v1.Conds
	(*CreateGoodRequest)(nil),      // 3: good.middleware.app.good1.v1.CreateGoodRequest
	(*CreateGoodResponse)(nil),     // 4: good.middleware.app.good1.v1.CreateGoodResponse
	(*GetGoodRequest)(nil),         // 5: good.middleware.app.good1.v1.GetGoodRequest
	(*GetGoodResponse)(nil),        // 6: good.middleware.app.good1.v1.GetGoodResponse
	(*GetGoodsRequest)(nil),        // 7: good.middleware.app.good1.v1.GetGoodsRequest
	(*GetGoodsResponse)(nil),       // 8: good.middleware.app.good1.v1.GetGoodsResponse
	(*ExistGoodRequest)(nil),       // 9: good.middleware.app.good1.v1.ExistGoodRequest
	(*ExistGoodResponse)(nil),      // 10: good.middleware.app.good1.v1.ExistGoodResponse
	(*ExistGoodCondsRequest)(nil),  // 11: good.middleware.app.good1.v1.ExistGoodCondsRequest
	(*ExistGoodCondsResponse)(nil), // 12: good.middleware.app.good1.v1.ExistGoodCondsResponse
	(*UpdateGoodRequest)(nil),      // 13: good.middleware.app.good1.v1.UpdateGoodRequest
	(*UpdateGoodResponse)(nil),     // 14: good.middleware.app.good1.v1.UpdateGoodResponse
	(*DeleteGoodRequest)(nil),      // 15: good.middleware.app.good1.v1.DeleteGoodRequest
	(*DeleteGoodResponse)(nil),     // 16: good.middleware.app.good1.v1.DeleteGoodResponse
	(v1.CancelMode)(0),             // 17: basetypes.good.v1.CancelMode
	(v1.GoodType)(0),               // 18: basetypes.good.v1.GoodType
	(v1.BenefitType)(0),            // 19: basetypes.good.v1.BenefitType
	(v1.GoodLabel)(0),              // 20: basetypes.good.v1.GoodLabel
	(v1.GoodStartMode)(0),          // 21: basetypes.good.v1.GoodStartMode
	(v1.GoodUnitType)(0),           // 22: basetypes.good.v1.GoodUnitType
	(v1.GoodUnitCalculateType)(0),  // 23: basetypes.good.v1.GoodUnitCalculateType
	(v1.GoodDurationType)(0),       // 24: basetypes.good.v1.GoodDurationType
	(v1.GoodSettlementType)(0),     // 25: basetypes.good.v1.GoodSettlementType
	(*v11.Uint32Val)(nil),          // 26: basetypes.v1.Uint32Val
	(*v11.StringVal)(nil),          // 27: basetypes.v1.StringVal
	(*v11.StringSliceVal)(nil),     // 28: basetypes.v1.StringSliceVal
	(*v11.Uint32SliceVal)(nil),     // 29: basetypes.v1.Uint32SliceVal
}
var file_npool_good_mw_v1_app_good_good_proto_depIdxs = []int32{
	17, // 0: good.middleware.app.good1.v1.GoodReq.CancelMode:type_name -> basetypes.good.v1.CancelMode
	18, // 1: good.middleware.app.good1.v1.Good.GoodType:type_name -> basetypes.good.v1.GoodType
	19, // 2: good.middleware.app.good1.v1.Good.BenefitType:type_name -> basetypes.good.v1.BenefitType
	20, // 3: good.middleware.app.good1.v1.Good.Labels:type_name -> basetypes.good.v1.GoodLabel
	21, // 4: good.middleware.app.good1.v1.Good.StartMode:type_name -> basetypes.good.v1.GoodStartMode
	17, // 5: good.middleware.app.good1.v1.Good.CancelMode:type_name -> basetypes.good.v1.CancelMode
	22, // 6: good.middleware.app.good1.v1.Good.UnitType:type_name -> basetypes.good.v1.GoodUnitType
	23, // 7: good.middleware.app.good1.v1.Good.QuantityCalculateType:type_name -> basetypes.good.v1.GoodUnitCalculateType
	24, // 8: good.middleware.app.good1.v1.Good.DurationType:type_name -> basetypes.good.v1.GoodDurationType
	23, // 9: good.middleware.app.good1.v1.Good.DurationCalculateType:type_name -> basetypes.good.v1.GoodUnitCalculateType
	25, // 10: good.middleware.app.good1.v1.Good.SettlementType:type_name -> basetypes.good.v1.GoodSettlementType
	26, // 11: good.middleware.app.good1.v1.Conds.ID:type_name -> basetypes.v1.Uint32Val
	27, // 12: good.middleware.app.good1.v1.Conds.EntID:type_name -> basetypes.v1.StringVal
	27, // 13: good.middleware.app.good1.v1.Conds.AppID:type_name -> basetypes.v1.StringVal
	27, // 14: good.middleware.app.good1.v1.Conds.GoodID:type_name -> basetypes.v1.StringVal
	28, // 15: good.middleware.app.good1.v1.Conds.GoodIDs:type_name -> basetypes.v1.StringSliceVal
	28, // 16: good.middleware.app.good1.v1.Conds.AppIDs:type_name -> basetypes.v1.StringSliceVal
	29, // 17: good.middleware.app.good1.v1.Conds.IDs:type_name -> basetypes.v1.Uint32SliceVal
	28, // 18: good.middleware.app.good1.v1.Conds.EntIDs:type_name -> basetypes.v1.StringSliceVal
	0,  // 19: good.middleware.app.good1.v1.CreateGoodRequest.Info:type_name -> good.middleware.app.good1.v1.GoodReq
	1,  // 20: good.middleware.app.good1.v1.CreateGoodResponse.Info:type_name -> good.middleware.app.good1.v1.Good
	1,  // 21: good.middleware.app.good1.v1.GetGoodResponse.Info:type_name -> good.middleware.app.good1.v1.Good
	2,  // 22: good.middleware.app.good1.v1.GetGoodsRequest.Conds:type_name -> good.middleware.app.good1.v1.Conds
	1,  // 23: good.middleware.app.good1.v1.GetGoodsResponse.Infos:type_name -> good.middleware.app.good1.v1.Good
	2,  // 24: good.middleware.app.good1.v1.ExistGoodCondsRequest.Conds:type_name -> good.middleware.app.good1.v1.Conds
	0,  // 25: good.middleware.app.good1.v1.UpdateGoodRequest.Info:type_name -> good.middleware.app.good1.v1.GoodReq
	1,  // 26: good.middleware.app.good1.v1.UpdateGoodResponse.Info:type_name -> good.middleware.app.good1.v1.Good
	0,  // 27: good.middleware.app.good1.v1.DeleteGoodRequest.Info:type_name -> good.middleware.app.good1.v1.GoodReq
	1,  // 28: good.middleware.app.good1.v1.DeleteGoodResponse.Info:type_name -> good.middleware.app.good1.v1.Good
	3,  // 29: good.middleware.app.good1.v1.Middleware.CreateGood:input_type -> good.middleware.app.good1.v1.CreateGoodRequest
	5,  // 30: good.middleware.app.good1.v1.Middleware.GetGood:input_type -> good.middleware.app.good1.v1.GetGoodRequest
	7,  // 31: good.middleware.app.good1.v1.Middleware.GetGoods:input_type -> good.middleware.app.good1.v1.GetGoodsRequest
	9,  // 32: good.middleware.app.good1.v1.Middleware.ExistGood:input_type -> good.middleware.app.good1.v1.ExistGoodRequest
	11, // 33: good.middleware.app.good1.v1.Middleware.ExistGoodConds:input_type -> good.middleware.app.good1.v1.ExistGoodCondsRequest
	13, // 34: good.middleware.app.good1.v1.Middleware.UpdateGood:input_type -> good.middleware.app.good1.v1.UpdateGoodRequest
	15, // 35: good.middleware.app.good1.v1.Middleware.DeleteGood:input_type -> good.middleware.app.good1.v1.DeleteGoodRequest
	4,  // 36: good.middleware.app.good1.v1.Middleware.CreateGood:output_type -> good.middleware.app.good1.v1.CreateGoodResponse
	6,  // 37: good.middleware.app.good1.v1.Middleware.GetGood:output_type -> good.middleware.app.good1.v1.GetGoodResponse
	8,  // 38: good.middleware.app.good1.v1.Middleware.GetGoods:output_type -> good.middleware.app.good1.v1.GetGoodsResponse
	10, // 39: good.middleware.app.good1.v1.Middleware.ExistGood:output_type -> good.middleware.app.good1.v1.ExistGoodResponse
	12, // 40: good.middleware.app.good1.v1.Middleware.ExistGoodConds:output_type -> good.middleware.app.good1.v1.ExistGoodCondsResponse
	14, // 41: good.middleware.app.good1.v1.Middleware.UpdateGood:output_type -> good.middleware.app.good1.v1.UpdateGoodResponse
	16, // 42: good.middleware.app.good1.v1.Middleware.DeleteGood:output_type -> good.middleware.app.good1.v1.DeleteGoodResponse
	36, // [36:43] is the sub-list for method output_type
	29, // [29:36] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_npool_good_mw_v1_app_good_good_proto_init() }
func file_npool_good_mw_v1_app_good_good_proto_init() {
	if File_npool_good_mw_v1_app_good_good_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_good_mw_v1_app_good_good_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_good_good_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Good); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_good_good_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_good_good_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_good_good_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_good_good_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_good_good_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_good_good_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_good_good_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_good_good_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_good_good_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_good_good_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistGoodCondsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_good_good_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistGoodCondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_good_good_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_good_good_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_good_good_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_good_good_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_good_mw_v1_app_good_good_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_npool_good_mw_v1_app_good_good_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_good_mw_v1_app_good_good_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_good_mw_v1_app_good_good_proto_goTypes,
		DependencyIndexes: file_npool_good_mw_v1_app_good_good_proto_depIdxs,
		MessageInfos:      file_npool_good_mw_v1_app_good_good_proto_msgTypes,
	}.Build()
	File_npool_good_mw_v1_app_good_good_proto = out.File
	file_npool_good_mw_v1_app_good_good_proto_rawDesc = nil
	file_npool_good_mw_v1_app_good_good_proto_goTypes = nil
	file_npool_good_mw_v1_app_good_good_proto_depIdxs = nil
}
