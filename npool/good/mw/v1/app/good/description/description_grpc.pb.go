// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/good/mw/v1/app/good/description/description.proto

package description

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
	CreateDescription(ctx context.Context, in *CreateDescriptionRequest, opts ...grpc.CallOption) (*CreateDescriptionResponse, error)
	UpdateDescription(ctx context.Context, in *UpdateDescriptionRequest, opts ...grpc.CallOption) (*UpdateDescriptionResponse, error)
	GetDescription(ctx context.Context, in *GetDescriptionRequest, opts ...grpc.CallOption) (*GetDescriptionResponse, error)
	GetDescriptions(ctx context.Context, in *GetDescriptionsRequest, opts ...grpc.CallOption) (*GetDescriptionsResponse, error)
	ExistDescriptionConds(ctx context.Context, in *ExistDescriptionCondsRequest, opts ...grpc.CallOption) (*ExistDescriptionCondsResponse, error)
	DeleteDescription(ctx context.Context, in *DeleteDescriptionRequest, opts ...grpc.CallOption) (*DeleteDescriptionResponse, error)
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) CreateDescription(ctx context.Context, in *CreateDescriptionRequest, opts ...grpc.CallOption) (*CreateDescriptionResponse, error) {
	out := new(CreateDescriptionResponse)
	err := c.cc.Invoke(ctx, "/good.middleware.app.good1.description.v1.Middleware/CreateDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) UpdateDescription(ctx context.Context, in *UpdateDescriptionRequest, opts ...grpc.CallOption) (*UpdateDescriptionResponse, error) {
	out := new(UpdateDescriptionResponse)
	err := c.cc.Invoke(ctx, "/good.middleware.app.good1.description.v1.Middleware/UpdateDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetDescription(ctx context.Context, in *GetDescriptionRequest, opts ...grpc.CallOption) (*GetDescriptionResponse, error) {
	out := new(GetDescriptionResponse)
	err := c.cc.Invoke(ctx, "/good.middleware.app.good1.description.v1.Middleware/GetDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetDescriptions(ctx context.Context, in *GetDescriptionsRequest, opts ...grpc.CallOption) (*GetDescriptionsResponse, error) {
	out := new(GetDescriptionsResponse)
	err := c.cc.Invoke(ctx, "/good.middleware.app.good1.description.v1.Middleware/GetDescriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ExistDescriptionConds(ctx context.Context, in *ExistDescriptionCondsRequest, opts ...grpc.CallOption) (*ExistDescriptionCondsResponse, error) {
	out := new(ExistDescriptionCondsResponse)
	err := c.cc.Invoke(ctx, "/good.middleware.app.good1.description.v1.Middleware/ExistDescriptionConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) DeleteDescription(ctx context.Context, in *DeleteDescriptionRequest, opts ...grpc.CallOption) (*DeleteDescriptionResponse, error) {
	out := new(DeleteDescriptionResponse)
	err := c.cc.Invoke(ctx, "/good.middleware.app.good1.description.v1.Middleware/DeleteDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
	CreateDescription(context.Context, *CreateDescriptionRequest) (*CreateDescriptionResponse, error)
	UpdateDescription(context.Context, *UpdateDescriptionRequest) (*UpdateDescriptionResponse, error)
	GetDescription(context.Context, *GetDescriptionRequest) (*GetDescriptionResponse, error)
	GetDescriptions(context.Context, *GetDescriptionsRequest) (*GetDescriptionsResponse, error)
	ExistDescriptionConds(context.Context, *ExistDescriptionCondsRequest) (*ExistDescriptionCondsResponse, error)
	DeleteDescription(context.Context, *DeleteDescriptionRequest) (*DeleteDescriptionResponse, error)
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) CreateDescription(context.Context, *CreateDescriptionRequest) (*CreateDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDescription not implemented")
}
func (UnimplementedMiddlewareServer) UpdateDescription(context.Context, *UpdateDescriptionRequest) (*UpdateDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDescription not implemented")
}
func (UnimplementedMiddlewareServer) GetDescription(context.Context, *GetDescriptionRequest) (*GetDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDescription not implemented")
}
func (UnimplementedMiddlewareServer) GetDescriptions(context.Context, *GetDescriptionsRequest) (*GetDescriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDescriptions not implemented")
}
func (UnimplementedMiddlewareServer) ExistDescriptionConds(context.Context, *ExistDescriptionCondsRequest) (*ExistDescriptionCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistDescriptionConds not implemented")
}
func (UnimplementedMiddlewareServer) DeleteDescription(context.Context, *DeleteDescriptionRequest) (*DeleteDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDescription not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_CreateDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.middleware.app.good1.description.v1.Middleware/CreateDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateDescription(ctx, req.(*CreateDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_UpdateDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).UpdateDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.middleware.app.good1.description.v1.Middleware/UpdateDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).UpdateDescription(ctx, req.(*UpdateDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.middleware.app.good1.description.v1.Middleware/GetDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetDescription(ctx, req.(*GetDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetDescriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDescriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetDescriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.middleware.app.good1.description.v1.Middleware/GetDescriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetDescriptions(ctx, req.(*GetDescriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ExistDescriptionConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistDescriptionCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ExistDescriptionConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.middleware.app.good1.description.v1.Middleware/ExistDescriptionConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ExistDescriptionConds(ctx, req.(*ExistDescriptionCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_DeleteDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).DeleteDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.middleware.app.good1.description.v1.Middleware/DeleteDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).DeleteDescription(ctx, req.(*DeleteDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "good.middleware.app.good1.description.v1.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDescription",
			Handler:    _Middleware_CreateDescription_Handler,
		},
		{
			MethodName: "UpdateDescription",
			Handler:    _Middleware_UpdateDescription_Handler,
		},
		{
			MethodName: "GetDescription",
			Handler:    _Middleware_GetDescription_Handler,
		},
		{
			MethodName: "GetDescriptions",
			Handler:    _Middleware_GetDescriptions_Handler,
		},
		{
			MethodName: "ExistDescriptionConds",
			Handler:    _Middleware_ExistDescriptionConds_Handler,
		},
		{
			MethodName: "DeleteDescription",
			Handler:    _Middleware_DeleteDescription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/good/mw/v1/app/good/description/description.proto",
}
