// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/good/mw/v1/app/good/stock/stock.proto

package stock

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
	Reserve(ctx context.Context, in *ReserveRequest, opts ...grpc.CallOption) (*ReserveResponse, error)
	Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*LockResponse, error)
	Locks(ctx context.Context, in *LocksRequest, opts ...grpc.CallOption) (*LocksResponse, error)
	Unlock(ctx context.Context, in *UnlockRequest, opts ...grpc.CallOption) (*UnlockResponse, error)
	WaitStart(ctx context.Context, in *WaitStartRequest, opts ...grpc.CallOption) (*WaitStartResponse, error)
	InService(ctx context.Context, in *InServiceRequest, opts ...grpc.CallOption) (*InServiceResponse, error)
	ChargeBack(ctx context.Context, in *ChargeBackRequest, opts ...grpc.CallOption) (*ChargeBackResponse, error)
	Expire(ctx context.Context, in *ExpireRequest, opts ...grpc.CallOption) (*ExpireResponse, error)
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) Reserve(ctx context.Context, in *ReserveRequest, opts ...grpc.CallOption) (*ReserveResponse, error) {
	out := new(ReserveResponse)
	err := c.cc.Invoke(ctx, "/good.middleware.app.good1.stock.v1.Middleware/Reserve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*LockResponse, error) {
	out := new(LockResponse)
	err := c.cc.Invoke(ctx, "/good.middleware.app.good1.stock.v1.Middleware/Lock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) Locks(ctx context.Context, in *LocksRequest, opts ...grpc.CallOption) (*LocksResponse, error) {
	out := new(LocksResponse)
	err := c.cc.Invoke(ctx, "/good.middleware.app.good1.stock.v1.Middleware/Locks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) Unlock(ctx context.Context, in *UnlockRequest, opts ...grpc.CallOption) (*UnlockResponse, error) {
	out := new(UnlockResponse)
	err := c.cc.Invoke(ctx, "/good.middleware.app.good1.stock.v1.Middleware/Unlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) WaitStart(ctx context.Context, in *WaitStartRequest, opts ...grpc.CallOption) (*WaitStartResponse, error) {
	out := new(WaitStartResponse)
	err := c.cc.Invoke(ctx, "/good.middleware.app.good1.stock.v1.Middleware/WaitStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) InService(ctx context.Context, in *InServiceRequest, opts ...grpc.CallOption) (*InServiceResponse, error) {
	out := new(InServiceResponse)
	err := c.cc.Invoke(ctx, "/good.middleware.app.good1.stock.v1.Middleware/InService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ChargeBack(ctx context.Context, in *ChargeBackRequest, opts ...grpc.CallOption) (*ChargeBackResponse, error) {
	out := new(ChargeBackResponse)
	err := c.cc.Invoke(ctx, "/good.middleware.app.good1.stock.v1.Middleware/ChargeBack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) Expire(ctx context.Context, in *ExpireRequest, opts ...grpc.CallOption) (*ExpireResponse, error) {
	out := new(ExpireResponse)
	err := c.cc.Invoke(ctx, "/good.middleware.app.good1.stock.v1.Middleware/Expire", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
	Reserve(context.Context, *ReserveRequest) (*ReserveResponse, error)
	Lock(context.Context, *LockRequest) (*LockResponse, error)
	Locks(context.Context, *LocksRequest) (*LocksResponse, error)
	Unlock(context.Context, *UnlockRequest) (*UnlockResponse, error)
	WaitStart(context.Context, *WaitStartRequest) (*WaitStartResponse, error)
	InService(context.Context, *InServiceRequest) (*InServiceResponse, error)
	ChargeBack(context.Context, *ChargeBackRequest) (*ChargeBackResponse, error)
	Expire(context.Context, *ExpireRequest) (*ExpireResponse, error)
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) Reserve(context.Context, *ReserveRequest) (*ReserveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reserve not implemented")
}
func (UnimplementedMiddlewareServer) Lock(context.Context, *LockRequest) (*LockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lock not implemented")
}
func (UnimplementedMiddlewareServer) Locks(context.Context, *LocksRequest) (*LocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Locks not implemented")
}
func (UnimplementedMiddlewareServer) Unlock(context.Context, *UnlockRequest) (*UnlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unlock not implemented")
}
func (UnimplementedMiddlewareServer) WaitStart(context.Context, *WaitStartRequest) (*WaitStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WaitStart not implemented")
}
func (UnimplementedMiddlewareServer) InService(context.Context, *InServiceRequest) (*InServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InService not implemented")
}
func (UnimplementedMiddlewareServer) ChargeBack(context.Context, *ChargeBackRequest) (*ChargeBackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChargeBack not implemented")
}
func (UnimplementedMiddlewareServer) Expire(context.Context, *ExpireRequest) (*ExpireResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Expire not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_Reserve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).Reserve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.middleware.app.good1.stock.v1.Middleware/Reserve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).Reserve(ctx, req.(*ReserveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_Lock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).Lock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.middleware.app.good1.stock.v1.Middleware/Lock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).Lock(ctx, req.(*LockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_Locks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).Locks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.middleware.app.good1.stock.v1.Middleware/Locks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).Locks(ctx, req.(*LocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_Unlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).Unlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.middleware.app.good1.stock.v1.Middleware/Unlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).Unlock(ctx, req.(*UnlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_WaitStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).WaitStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.middleware.app.good1.stock.v1.Middleware/WaitStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).WaitStart(ctx, req.(*WaitStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_InService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).InService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.middleware.app.good1.stock.v1.Middleware/InService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).InService(ctx, req.(*InServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ChargeBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChargeBackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ChargeBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.middleware.app.good1.stock.v1.Middleware/ChargeBack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ChargeBack(ctx, req.(*ChargeBackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_Expire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpireRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).Expire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.middleware.app.good1.stock.v1.Middleware/Expire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).Expire(ctx, req.(*ExpireRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "good.middleware.app.good1.stock.v1.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Reserve",
			Handler:    _Middleware_Reserve_Handler,
		},
		{
			MethodName: "Lock",
			Handler:    _Middleware_Lock_Handler,
		},
		{
			MethodName: "Locks",
			Handler:    _Middleware_Locks_Handler,
		},
		{
			MethodName: "Unlock",
			Handler:    _Middleware_Unlock_Handler,
		},
		{
			MethodName: "WaitStart",
			Handler:    _Middleware_WaitStart_Handler,
		},
		{
			MethodName: "InService",
			Handler:    _Middleware_InService_Handler,
		},
		{
			MethodName: "ChargeBack",
			Handler:    _Middleware_ChargeBack_Handler,
		},
		{
			MethodName: "Expire",
			Handler:    _Middleware_Expire_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/good/mw/v1/app/good/stock/stock.proto",
}
