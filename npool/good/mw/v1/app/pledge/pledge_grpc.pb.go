// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/good/mw/v1/app/pledge/pledge.proto

package pledge

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Middleware_CreatePledge_FullMethodName     = "/good.middleware.app.pledge.v1.Middleware/CreatePledge"
	Middleware_UpdatePledge_FullMethodName     = "/good.middleware.app.pledge.v1.Middleware/UpdatePledge"
	Middleware_GetPledge_FullMethodName        = "/good.middleware.app.pledge.v1.Middleware/GetPledge"
	Middleware_GetPledges_FullMethodName       = "/good.middleware.app.pledge.v1.Middleware/GetPledges"
	Middleware_ExistPledgeConds_FullMethodName = "/good.middleware.app.pledge.v1.Middleware/ExistPledgeConds"
	Middleware_DeletePledge_FullMethodName     = "/good.middleware.app.pledge.v1.Middleware/DeletePledge"
)

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
	CreatePledge(ctx context.Context, in *CreatePledgeRequest, opts ...grpc.CallOption) (*CreatePledgeResponse, error)
	UpdatePledge(ctx context.Context, in *UpdatePledgeRequest, opts ...grpc.CallOption) (*UpdatePledgeResponse, error)
	GetPledge(ctx context.Context, in *GetPledgeRequest, opts ...grpc.CallOption) (*GetPledgeResponse, error)
	GetPledges(ctx context.Context, in *GetPledgesRequest, opts ...grpc.CallOption) (*GetPledgesResponse, error)
	ExistPledgeConds(ctx context.Context, in *ExistPledgeCondsRequest, opts ...grpc.CallOption) (*ExistPledgeCondsResponse, error)
	DeletePledge(ctx context.Context, in *DeletePledgeRequest, opts ...grpc.CallOption) (*DeletePledgeResponse, error)
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) CreatePledge(ctx context.Context, in *CreatePledgeRequest, opts ...grpc.CallOption) (*CreatePledgeResponse, error) {
	out := new(CreatePledgeResponse)
	err := c.cc.Invoke(ctx, Middleware_CreatePledge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) UpdatePledge(ctx context.Context, in *UpdatePledgeRequest, opts ...grpc.CallOption) (*UpdatePledgeResponse, error) {
	out := new(UpdatePledgeResponse)
	err := c.cc.Invoke(ctx, Middleware_UpdatePledge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetPledge(ctx context.Context, in *GetPledgeRequest, opts ...grpc.CallOption) (*GetPledgeResponse, error) {
	out := new(GetPledgeResponse)
	err := c.cc.Invoke(ctx, Middleware_GetPledge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetPledges(ctx context.Context, in *GetPledgesRequest, opts ...grpc.CallOption) (*GetPledgesResponse, error) {
	out := new(GetPledgesResponse)
	err := c.cc.Invoke(ctx, Middleware_GetPledges_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ExistPledgeConds(ctx context.Context, in *ExistPledgeCondsRequest, opts ...grpc.CallOption) (*ExistPledgeCondsResponse, error) {
	out := new(ExistPledgeCondsResponse)
	err := c.cc.Invoke(ctx, Middleware_ExistPledgeConds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) DeletePledge(ctx context.Context, in *DeletePledgeRequest, opts ...grpc.CallOption) (*DeletePledgeResponse, error) {
	out := new(DeletePledgeResponse)
	err := c.cc.Invoke(ctx, Middleware_DeletePledge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
	CreatePledge(context.Context, *CreatePledgeRequest) (*CreatePledgeResponse, error)
	UpdatePledge(context.Context, *UpdatePledgeRequest) (*UpdatePledgeResponse, error)
	GetPledge(context.Context, *GetPledgeRequest) (*GetPledgeResponse, error)
	GetPledges(context.Context, *GetPledgesRequest) (*GetPledgesResponse, error)
	ExistPledgeConds(context.Context, *ExistPledgeCondsRequest) (*ExistPledgeCondsResponse, error)
	DeletePledge(context.Context, *DeletePledgeRequest) (*DeletePledgeResponse, error)
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) CreatePledge(context.Context, *CreatePledgeRequest) (*CreatePledgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePledge not implemented")
}
func (UnimplementedMiddlewareServer) UpdatePledge(context.Context, *UpdatePledgeRequest) (*UpdatePledgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePledge not implemented")
}
func (UnimplementedMiddlewareServer) GetPledge(context.Context, *GetPledgeRequest) (*GetPledgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPledge not implemented")
}
func (UnimplementedMiddlewareServer) GetPledges(context.Context, *GetPledgesRequest) (*GetPledgesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPledges not implemented")
}
func (UnimplementedMiddlewareServer) ExistPledgeConds(context.Context, *ExistPledgeCondsRequest) (*ExistPledgeCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistPledgeConds not implemented")
}
func (UnimplementedMiddlewareServer) DeletePledge(context.Context, *DeletePledgeRequest) (*DeletePledgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePledge not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_CreatePledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePledgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreatePledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_CreatePledge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreatePledge(ctx, req.(*CreatePledgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_UpdatePledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePledgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).UpdatePledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_UpdatePledge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).UpdatePledge(ctx, req.(*UpdatePledgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetPledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPledgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetPledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetPledge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetPledge(ctx, req.(*GetPledgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetPledges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPledgesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetPledges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetPledges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetPledges(ctx, req.(*GetPledgesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ExistPledgeConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistPledgeCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ExistPledgeConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_ExistPledgeConds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ExistPledgeConds(ctx, req.(*ExistPledgeCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_DeletePledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePledgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).DeletePledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_DeletePledge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).DeletePledge(ctx, req.(*DeletePledgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "good.middleware.app.pledge.v1.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePledge",
			Handler:    _Middleware_CreatePledge_Handler,
		},
		{
			MethodName: "UpdatePledge",
			Handler:    _Middleware_UpdatePledge_Handler,
		},
		{
			MethodName: "GetPledge",
			Handler:    _Middleware_GetPledge_Handler,
		},
		{
			MethodName: "GetPledges",
			Handler:    _Middleware_GetPledges_Handler,
		},
		{
			MethodName: "ExistPledgeConds",
			Handler:    _Middleware_ExistPledgeConds_Handler,
		},
		{
			MethodName: "DeletePledge",
			Handler:    _Middleware_DeletePledge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/good/mw/v1/app/pledge/pledge.proto",
}
