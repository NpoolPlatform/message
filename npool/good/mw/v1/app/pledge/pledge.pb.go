// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.18.1
// source: npool/good/mw/v1/app/pledge/pledge.proto

package pledge

import (
	v1 "github.com/NpoolPlatform/message/npool/basetypes/good/v1"
	v11 "github.com/NpoolPlatform/message/npool/basetypes/v1"
	description "github.com/NpoolPlatform/message/npool/good/mw/v1/app/good/description"
	color "github.com/NpoolPlatform/message/npool/good/mw/v1/app/good/display/color"
	name "github.com/NpoolPlatform/message/npool/good/mw/v1/app/good/display/name"
	label "github.com/NpoolPlatform/message/npool/good/mw/v1/app/good/label"
	poster "github.com/NpoolPlatform/message/npool/good/mw/v1/app/good/poster"
	coin "github.com/NpoolPlatform/message/npool/good/mw/v1/good/coin"
	reward "github.com/NpoolPlatform/message/npool/good/mw/v1/good/coin/reward"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PledgeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Base of app good
	ID                *uint32 `protobuf:"varint,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID             *string `protobuf:"bytes,20,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	AppID             *string `protobuf:"bytes,30,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	GoodID            *string `protobuf:"bytes,40,opt,name=GoodID,proto3,oneof" json:"GoodID,omitempty"`
	AppGoodID         *string `protobuf:"bytes,50,opt,name=AppGoodID,proto3,oneof" json:"AppGoodID,omitempty"`
	Purchasable       *bool   `protobuf:"varint,60,opt,name=Purchasable,proto3,oneof" json:"Purchasable,omitempty"`
	EnableProductPage *bool   `protobuf:"varint,70,opt,name=EnableProductPage,proto3,oneof" json:"EnableProductPage,omitempty"`
	ProductPage       *string `protobuf:"bytes,80,opt,name=ProductPage,proto3,oneof" json:"ProductPage,omitempty"`
	Online            *bool   `protobuf:"varint,90,opt,name=Online,proto3,oneof" json:"Online,omitempty"`
	Visible           *bool   `protobuf:"varint,100,opt,name=Visible,proto3,oneof" json:"Visible,omitempty"`
	Name              *string `protobuf:"bytes,110,opt,name=Name,proto3,oneof" json:"Name,omitempty"`
	DisplayIndex      *int32  `protobuf:"varint,120,opt,name=DisplayIndex,proto3,oneof" json:"DisplayIndex,omitempty"`
	Banner            *string `protobuf:"bytes,130,opt,name=Banner,proto3,oneof" json:"Banner,omitempty"`
	// Good information
	ServiceStartAt      *uint32           `protobuf:"varint,140,opt,name=ServiceStartAt,proto3,oneof" json:"ServiceStartAt,omitempty"`
	StartMode           *v1.GoodStartMode `protobuf:"varint,150,opt,name=StartMode,proto3,enum=basetypes.good.v1.GoodStartMode,oneof" json:"StartMode,omitempty"`
	EnableSetCommission *bool             `protobuf:"varint,160,opt,name=EnableSetCommission,proto3,oneof" json:"EnableSetCommission,omitempty"`
}

func (x *PledgeReq) Reset() {
	*x = PledgeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_pledge_pledge_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PledgeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PledgeReq) ProtoMessage() {}

func (x *PledgeReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_pledge_pledge_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PledgeReq.ProtoReflect.Descriptor instead.
func (*PledgeReq) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_pledge_pledge_proto_rawDescGZIP(), []int{0}
}

func (x *PledgeReq) GetID() uint32 {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return 0
}

func (x *PledgeReq) GetEntID() string {
	if x != nil && x.EntID != nil {
		return *x.EntID
	}
	return ""
}

func (x *PledgeReq) GetAppID() string {
	if x != nil && x.AppID != nil {
		return *x.AppID
	}
	return ""
}

func (x *PledgeReq) GetGoodID() string {
	if x != nil && x.GoodID != nil {
		return *x.GoodID
	}
	return ""
}

func (x *PledgeReq) GetAppGoodID() string {
	if x != nil && x.AppGoodID != nil {
		return *x.AppGoodID
	}
	return ""
}

func (x *PledgeReq) GetPurchasable() bool {
	if x != nil && x.Purchasable != nil {
		return *x.Purchasable
	}
	return false
}

func (x *PledgeReq) GetEnableProductPage() bool {
	if x != nil && x.EnableProductPage != nil {
		return *x.EnableProductPage
	}
	return false
}

func (x *PledgeReq) GetProductPage() string {
	if x != nil && x.ProductPage != nil {
		return *x.ProductPage
	}
	return ""
}

func (x *PledgeReq) GetOnline() bool {
	if x != nil && x.Online != nil {
		return *x.Online
	}
	return false
}

func (x *PledgeReq) GetVisible() bool {
	if x != nil && x.Visible != nil {
		return *x.Visible
	}
	return false
}

func (x *PledgeReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *PledgeReq) GetDisplayIndex() int32 {
	if x != nil && x.DisplayIndex != nil {
		return *x.DisplayIndex
	}
	return 0
}

func (x *PledgeReq) GetBanner() string {
	if x != nil && x.Banner != nil {
		return *x.Banner
	}
	return ""
}

func (x *PledgeReq) GetServiceStartAt() uint32 {
	if x != nil && x.ServiceStartAt != nil {
		return *x.ServiceStartAt
	}
	return 0
}

func (x *PledgeReq) GetStartMode() v1.GoodStartMode {
	if x != nil && x.StartMode != nil {
		return *x.StartMode
	}
	return v1.GoodStartMode(0)
}

func (x *PledgeReq) GetEnableSetCommission() bool {
	if x != nil && x.EnableSetCommission != nil {
		return *x.EnableSetCommission
	}
	return false
}

type Pledge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: sql:"id"
	ID uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty" sql:"id"`
	// @inject_tag: sql:"ent_id"
	EntID string `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty" sql:"ent_id"`
	// @inject_tag: sql:"app_id"
	AppID string `protobuf:"bytes,30,opt,name=AppID,proto3" json:"AppID,omitempty" sql:"app_id"`
	// @inject_tag: sql:"good_id"
	GoodID string `protobuf:"bytes,40,opt,name=GoodID,proto3" json:"GoodID,omitempty" sql:"good_id"`
	// @inject_tag: sql:"app_good_id"
	AppGoodID string `protobuf:"bytes,41,opt,name=AppGoodID,proto3" json:"AppGoodID,omitempty" sql:"app_good_id"`
	// good_base
	// @inject_tag: sql:"good_type"
	GoodTypeStr string      `protobuf:"bytes,230,opt,name=GoodTypeStr,proto3" json:"GoodTypeStr,omitempty" sql:"good_type"`
	GoodType    v1.GoodType `protobuf:"varint,240,opt,name=GoodType,proto3,enum=basetypes.good.v1.GoodType" json:"GoodType,omitempty"`
	// @inject_tag: sql:"benefit_type"
	BenefitTypeStr string         `protobuf:"bytes,250,opt,name=BenefitTypeStr,proto3" json:"BenefitTypeStr,omitempty" sql:"benefit_type"`
	BenefitType    v1.BenefitType `protobuf:"varint,260,opt,name=BenefitType,proto3,enum=basetypes.good.v1.BenefitType" json:"BenefitType,omitempty"`
	// @inject_tag: sql:"good_name"
	GoodName string `protobuf:"bytes,270,opt,name=GoodName,proto3" json:"GoodName,omitempty" sql:"good_name"`
	// @inject_tag: sql:"good_service_start_at"
	GoodServiceStartAt uint32 `protobuf:"varint,280,opt,name=GoodServiceStartAt,proto3" json:"GoodServiceStartAt,omitempty" sql:"good_service_start_at"`
	// @inject_tag: sql:"good_start_mode"
	GoodStartModeStr string           `protobuf:"bytes,290,opt,name=GoodStartModeStr,proto3" json:"GoodStartModeStr,omitempty" sql:"good_start_mode"`
	GoodStartMode    v1.GoodStartMode `protobuf:"varint,300,opt,name=GoodStartMode,proto3,enum=basetypes.good.v1.GoodStartMode" json:"GoodStartMode,omitempty"`
	// @inject_tag: sql:"test_only"
	TestOnly bool `protobuf:"varint,310,opt,name=TestOnly,proto3" json:"TestOnly,omitempty" sql:"test_only"`
	// @inject_tag: sql:"benefit_interval_hours"
	BenefitIntervalHours uint32 `protobuf:"varint,320,opt,name=BenefitIntervalHours,proto3" json:"BenefitIntervalHours,omitempty" sql:"benefit_interval_hours"`
	// @inject_tag: sql:"good_purchasable"
	GoodPurchasable bool `protobuf:"varint,330,opt,name=GoodPurchasable,proto3" json:"GoodPurchasable,omitempty" sql:"good_purchasable"`
	// @inject_tag: sql:"good_online"
	GoodOnline bool `protobuf:"varint,340,opt,name=GoodOnline,proto3" json:"GoodOnline,omitempty" sql:"good_online"`
	// @inject_tag: sql:"state"
	StateStr string       `protobuf:"bytes,365,opt,name=StateStr,proto3" json:"StateStr,omitempty" sql:"state"`
	State    v1.GoodState `protobuf:"varint,366,opt,name=State,proto3,enum=basetypes.good.v1.GoodState" json:"State,omitempty"`
	// app_good
	// @inject_tag: sql:"app_good_purchasable"
	AppGoodPurchasable bool `protobuf:"varint,370,opt,name=AppGoodPurchasable,proto3" json:"AppGoodPurchasable,omitempty" sql:"app_good_purchasable"`
	// @inject_tag: sql:"app_good_online"
	AppGoodOnline bool `protobuf:"varint,380,opt,name=AppGoodOnline,proto3" json:"AppGoodOnline,omitempty" sql:"app_good_online"`
	// @inject_tag: sql:"enable_product_page"
	EnableProductPage bool `protobuf:"varint,390,opt,name=EnableProductPage,proto3" json:"EnableProductPage,omitempty" sql:"enable_product_page"`
	// @inject_tag: sql:"product_page"
	ProductPage string `protobuf:"bytes,400,opt,name=ProductPage,proto3" json:"ProductPage,omitempty" sql:"product_page"`
	// @inject_tag: sql:"visible"
	Visible bool `protobuf:"varint,410,opt,name=Visible,proto3" json:"Visible,omitempty" sql:"visible"`
	// @inject_tag: sql:"app_good_name"
	AppGoodName string `protobuf:"bytes,420,opt,name=AppGoodName,proto3" json:"AppGoodName,omitempty" sql:"app_good_name"`
	// @inject_tag: sql:"display_index"
	DisplayIndex int32 `protobuf:"varint,430,opt,name=DisplayIndex,proto3" json:"DisplayIndex,omitempty" sql:"display_index"`
	// @inject_tag: sql:"banner"
	Banner string `protobuf:"bytes,440,opt,name=Banner,proto3" json:"Banner,omitempty" sql:"banner"`
	// @inject_tag: sql:"enable_set_commission"
	EnableSetCommission bool `protobuf:"varint,480,opt,name=EnableSetCommission,proto3" json:"EnableSetCommission,omitempty" sql:"enable_set_commission"`
	// @inject_tag: sql:"app_good_service_start_at"
	AppGoodServiceStartAt uint32 `protobuf:"varint,600,opt,name=AppGoodServiceStartAt,proto3" json:"AppGoodServiceStartAt,omitempty" sql:"app_good_service_start_at"`
	// @inject_tag: sql:"app_good_start_mode"
	AppGoodStartModeStr string           `protobuf:"bytes,610,opt,name=AppGoodStartModeStr,proto3" json:"AppGoodStartModeStr,omitempty" sql:"app_good_start_mode"`
	AppGoodStartMode    v1.GoodStartMode `protobuf:"varint,620,opt,name=AppGoodStartMode,proto3,enum=basetypes.good.v1.GoodStartMode" json:"AppGoodStartMode,omitempty"`
	// extra_info
	// @inject_tag: sql:"likes"
	Likes uint32 `protobuf:"varint,630,opt,name=Likes,proto3" json:"Likes,omitempty" sql:"likes"`
	// @inject_tag: sql:"dislikes"
	Dislikes uint32 `protobuf:"varint,640,opt,name=Dislikes,proto3" json:"Dislikes,omitempty" sql:"dislikes"`
	// @inject_tag: sql:"score"
	Score string `protobuf:"bytes,650,opt,name=Score,proto3" json:"Score,omitempty" sql:"score"`
	// @inject_tag: sql:"score_count"
	ScoreCount uint32 `protobuf:"varint,660,opt,name=ScoreCount,proto3" json:"ScoreCount,omitempty" sql:"score_count"`
	// @inject_tag: sql:"recommend_count"
	RecommendCount uint32 `protobuf:"varint,670,opt,name=RecommendCount,proto3" json:"RecommendCount,omitempty" sql:"recommend_count"`
	// @inject_tag: sql:"comment_count"
	CommentCount uint32 `protobuf:"varint,680,opt,name=CommentCount,proto3" json:"CommentCount,omitempty" sql:"comment_count"`
	// good_reward
	// @inject_tag: sql:"last_reward_at"
	LastRewardAt  uint32                         `protobuf:"varint,690,opt,name=LastRewardAt,proto3" json:"LastRewardAt,omitempty" sql:"last_reward_at"`
	GoodCoins     []*coin.GoodCoinInfo           `protobuf:"bytes,700,rep,name=GoodCoins,proto3" json:"GoodCoins,omitempty"`
	Descriptions  []*description.DescriptionInfo `protobuf:"bytes,710,rep,name=Descriptions,proto3" json:"Descriptions,omitempty"`
	Posters       []*poster.PosterInfo           `protobuf:"bytes,720,rep,name=Posters,proto3" json:"Posters,omitempty"`
	DisplayNames  []*name.DisplayNameInfo        `protobuf:"bytes,730,rep,name=DisplayNames,proto3" json:"DisplayNames,omitempty"`
	DisplayColors []*color.DisplayColorInfo      `protobuf:"bytes,740,rep,name=DisplayColors,proto3" json:"DisplayColors,omitempty"`
	Labels        []*label.LabelInfo             `protobuf:"bytes,750,rep,name=Labels,proto3" json:"Labels,omitempty"`
	Rewards       []*reward.RewardInfo           `protobuf:"bytes,760,rep,name=Rewards,proto3" json:"Rewards,omitempty"`
	// @inject_tag: sql:"contract_code_url"
	ContractCodeURL string `protobuf:"bytes,780,opt,name=ContractCodeURL,proto3" json:"ContractCodeURL,omitempty" sql:"contract_code_url"`
	// @inject_tag: sql:"contract_code_branch"
	ContractCodeBranch string `protobuf:"bytes,790,opt,name=ContractCodeBranch,proto3" json:"ContractCodeBranch,omitempty" sql:"contract_code_branch"`
	// @inject_tag: sql:"contract_state"
	ContractStateStr string           `protobuf:"bytes,800,opt,name=ContractStateStr,proto3" json:"ContractStateStr,omitempty" sql:"contract_state"`
	ContractState    v1.ContractState `protobuf:"varint,810,opt,name=ContractState,proto3,enum=basetypes.good.v1.ContractState" json:"ContractState,omitempty"`
	// @inject_tag: sql:"created_at"
	CreatedAt uint32 `protobuf:"varint,2000,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
	// @inject_tag: sql:"updated_at"
	UpdatedAt uint32 `protobuf:"varint,2010,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty" sql:"updated_at"`
}

func (x *Pledge) Reset() {
	*x = Pledge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_pledge_pledge_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pledge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pledge) ProtoMessage() {}

func (x *Pledge) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_pledge_pledge_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pledge.ProtoReflect.Descriptor instead.
func (*Pledge) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_pledge_pledge_proto_rawDescGZIP(), []int{1}
}

func (x *Pledge) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Pledge) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *Pledge) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *Pledge) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *Pledge) GetAppGoodID() string {
	if x != nil {
		return x.AppGoodID
	}
	return ""
}

func (x *Pledge) GetGoodTypeStr() string {
	if x != nil {
		return x.GoodTypeStr
	}
	return ""
}

func (x *Pledge) GetGoodType() v1.GoodType {
	if x != nil {
		return x.GoodType
	}
	return v1.GoodType(0)
}

func (x *Pledge) GetBenefitTypeStr() string {
	if x != nil {
		return x.BenefitTypeStr
	}
	return ""
}

func (x *Pledge) GetBenefitType() v1.BenefitType {
	if x != nil {
		return x.BenefitType
	}
	return v1.BenefitType(0)
}

func (x *Pledge) GetGoodName() string {
	if x != nil {
		return x.GoodName
	}
	return ""
}

func (x *Pledge) GetGoodServiceStartAt() uint32 {
	if x != nil {
		return x.GoodServiceStartAt
	}
	return 0
}

func (x *Pledge) GetGoodStartModeStr() string {
	if x != nil {
		return x.GoodStartModeStr
	}
	return ""
}

func (x *Pledge) GetGoodStartMode() v1.GoodStartMode {
	if x != nil {
		return x.GoodStartMode
	}
	return v1.GoodStartMode(0)
}

func (x *Pledge) GetTestOnly() bool {
	if x != nil {
		return x.TestOnly
	}
	return false
}

func (x *Pledge) GetBenefitIntervalHours() uint32 {
	if x != nil {
		return x.BenefitIntervalHours
	}
	return 0
}

func (x *Pledge) GetGoodPurchasable() bool {
	if x != nil {
		return x.GoodPurchasable
	}
	return false
}

func (x *Pledge) GetGoodOnline() bool {
	if x != nil {
		return x.GoodOnline
	}
	return false
}

func (x *Pledge) GetStateStr() string {
	if x != nil {
		return x.StateStr
	}
	return ""
}

func (x *Pledge) GetState() v1.GoodState {
	if x != nil {
		return x.State
	}
	return v1.GoodState(0)
}

func (x *Pledge) GetAppGoodPurchasable() bool {
	if x != nil {
		return x.AppGoodPurchasable
	}
	return false
}

func (x *Pledge) GetAppGoodOnline() bool {
	if x != nil {
		return x.AppGoodOnline
	}
	return false
}

func (x *Pledge) GetEnableProductPage() bool {
	if x != nil {
		return x.EnableProductPage
	}
	return false
}

func (x *Pledge) GetProductPage() string {
	if x != nil {
		return x.ProductPage
	}
	return ""
}

func (x *Pledge) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

func (x *Pledge) GetAppGoodName() string {
	if x != nil {
		return x.AppGoodName
	}
	return ""
}

func (x *Pledge) GetDisplayIndex() int32 {
	if x != nil {
		return x.DisplayIndex
	}
	return 0
}

func (x *Pledge) GetBanner() string {
	if x != nil {
		return x.Banner
	}
	return ""
}

func (x *Pledge) GetEnableSetCommission() bool {
	if x != nil {
		return x.EnableSetCommission
	}
	return false
}

func (x *Pledge) GetAppGoodServiceStartAt() uint32 {
	if x != nil {
		return x.AppGoodServiceStartAt
	}
	return 0
}

func (x *Pledge) GetAppGoodStartModeStr() string {
	if x != nil {
		return x.AppGoodStartModeStr
	}
	return ""
}

func (x *Pledge) GetAppGoodStartMode() v1.GoodStartMode {
	if x != nil {
		return x.AppGoodStartMode
	}
	return v1.GoodStartMode(0)
}

func (x *Pledge) GetLikes() uint32 {
	if x != nil {
		return x.Likes
	}
	return 0
}

func (x *Pledge) GetDislikes() uint32 {
	if x != nil {
		return x.Dislikes
	}
	return 0
}

func (x *Pledge) GetScore() string {
	if x != nil {
		return x.Score
	}
	return ""
}

func (x *Pledge) GetScoreCount() uint32 {
	if x != nil {
		return x.ScoreCount
	}
	return 0
}

func (x *Pledge) GetRecommendCount() uint32 {
	if x != nil {
		return x.RecommendCount
	}
	return 0
}

func (x *Pledge) GetCommentCount() uint32 {
	if x != nil {
		return x.CommentCount
	}
	return 0
}

func (x *Pledge) GetLastRewardAt() uint32 {
	if x != nil {
		return x.LastRewardAt
	}
	return 0
}

func (x *Pledge) GetGoodCoins() []*coin.GoodCoinInfo {
	if x != nil {
		return x.GoodCoins
	}
	return nil
}

func (x *Pledge) GetDescriptions() []*description.DescriptionInfo {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *Pledge) GetPosters() []*poster.PosterInfo {
	if x != nil {
		return x.Posters
	}
	return nil
}

func (x *Pledge) GetDisplayNames() []*name.DisplayNameInfo {
	if x != nil {
		return x.DisplayNames
	}
	return nil
}

func (x *Pledge) GetDisplayColors() []*color.DisplayColorInfo {
	if x != nil {
		return x.DisplayColors
	}
	return nil
}

func (x *Pledge) GetLabels() []*label.LabelInfo {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Pledge) GetRewards() []*reward.RewardInfo {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *Pledge) GetContractCodeURL() string {
	if x != nil {
		return x.ContractCodeURL
	}
	return ""
}

func (x *Pledge) GetContractCodeBranch() string {
	if x != nil {
		return x.ContractCodeBranch
	}
	return ""
}

func (x *Pledge) GetContractStateStr() string {
	if x != nil {
		return x.ContractStateStr
	}
	return ""
}

func (x *Pledge) GetContractState() v1.ContractState {
	if x != nil {
		return x.ContractState
	}
	return v1.ContractState(0)
}

func (x *Pledge) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Pledge) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          *v11.Uint32Val      `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID       *v11.StringVal      `protobuf:"bytes,20,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	AppID       *v11.StringVal      `protobuf:"bytes,30,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	GoodID      *v11.StringVal      `protobuf:"bytes,40,opt,name=GoodID,proto3,oneof" json:"GoodID,omitempty"`
	GoodIDs     *v11.StringSliceVal `protobuf:"bytes,50,opt,name=GoodIDs,proto3,oneof" json:"GoodIDs,omitempty"`
	AppGoodID   *v11.StringVal      `protobuf:"bytes,60,opt,name=AppGoodID,proto3,oneof" json:"AppGoodID,omitempty"`
	AppGoodIDs  *v11.StringSliceVal `protobuf:"bytes,70,opt,name=AppGoodIDs,proto3,oneof" json:"AppGoodIDs,omitempty"`
	CoinTypeID  *v11.StringVal      `protobuf:"bytes,100,opt,name=CoinTypeID,proto3,oneof" json:"CoinTypeID,omitempty"`
	CoinTypeIDs *v11.StringSliceVal `protobuf:"bytes,110,opt,name=CoinTypeIDs,proto3,oneof" json:"CoinTypeIDs,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_pledge_pledge_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_pledge_pledge_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_pledge_pledge_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *v11.Uint32Val {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetEntID() *v11.StringVal {
	if x != nil {
		return x.EntID
	}
	return nil
}

func (x *Conds) GetAppID() *v11.StringVal {
	if x != nil {
		return x.AppID
	}
	return nil
}

func (x *Conds) GetGoodID() *v11.StringVal {
	if x != nil {
		return x.GoodID
	}
	return nil
}

func (x *Conds) GetGoodIDs() *v11.StringSliceVal {
	if x != nil {
		return x.GoodIDs
	}
	return nil
}

func (x *Conds) GetAppGoodID() *v11.StringVal {
	if x != nil {
		return x.AppGoodID
	}
	return nil
}

func (x *Conds) GetAppGoodIDs() *v11.StringSliceVal {
	if x != nil {
		return x.AppGoodIDs
	}
	return nil
}

func (x *Conds) GetCoinTypeID() *v11.StringVal {
	if x != nil {
		return x.CoinTypeID
	}
	return nil
}

func (x *Conds) GetCoinTypeIDs() *v11.StringSliceVal {
	if x != nil {
		return x.CoinTypeIDs
	}
	return nil
}

type CreatePledgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PledgeReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreatePledgeRequest) Reset() {
	*x = CreatePledgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_pledge_pledge_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePledgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePledgeRequest) ProtoMessage() {}

func (x *CreatePledgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_pledge_pledge_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePledgeRequest.ProtoReflect.Descriptor instead.
func (*CreatePledgeRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_pledge_pledge_proto_rawDescGZIP(), []int{3}
}

func (x *CreatePledgeRequest) GetInfo() *PledgeReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreatePledgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Pledge `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreatePledgeResponse) Reset() {
	*x = CreatePledgeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_pledge_pledge_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePledgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePledgeResponse) ProtoMessage() {}

func (x *CreatePledgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_pledge_pledge_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePledgeResponse.ProtoReflect.Descriptor instead.
func (*CreatePledgeResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_pledge_pledge_proto_rawDescGZIP(), []int{4}
}

func (x *CreatePledgeResponse) GetInfo() *Pledge {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdatePledgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PledgeReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdatePledgeRequest) Reset() {
	*x = UpdatePledgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_pledge_pledge_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePledgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePledgeRequest) ProtoMessage() {}

func (x *UpdatePledgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_pledge_pledge_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePledgeRequest.ProtoReflect.Descriptor instead.
func (*UpdatePledgeRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_pledge_pledge_proto_rawDescGZIP(), []int{5}
}

func (x *UpdatePledgeRequest) GetInfo() *PledgeReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdatePledgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Pledge `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdatePledgeResponse) Reset() {
	*x = UpdatePledgeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_pledge_pledge_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePledgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePledgeResponse) ProtoMessage() {}

func (x *UpdatePledgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_pledge_pledge_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePledgeResponse.ProtoReflect.Descriptor instead.
func (*UpdatePledgeResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_pledge_pledge_proto_rawDescGZIP(), []int{6}
}

func (x *UpdatePledgeResponse) GetInfo() *Pledge {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetPledgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppGoodID string `protobuf:"bytes,10,opt,name=AppGoodID,proto3" json:"AppGoodID,omitempty"`
}

func (x *GetPledgeRequest) Reset() {
	*x = GetPledgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_pledge_pledge_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPledgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPledgeRequest) ProtoMessage() {}

func (x *GetPledgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_pledge_pledge_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPledgeRequest.ProtoReflect.Descriptor instead.
func (*GetPledgeRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_pledge_pledge_proto_rawDescGZIP(), []int{7}
}

func (x *GetPledgeRequest) GetAppGoodID() string {
	if x != nil {
		return x.AppGoodID
	}
	return ""
}

type GetPledgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Pledge `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetPledgeResponse) Reset() {
	*x = GetPledgeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_pledge_pledge_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPledgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPledgeResponse) ProtoMessage() {}

func (x *GetPledgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_pledge_pledge_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPledgeResponse.ProtoReflect.Descriptor instead.
func (*GetPledgeResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_pledge_pledge_proto_rawDescGZIP(), []int{8}
}

func (x *GetPledgeResponse) GetInfo() *Pledge {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetPledgesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetPledgesRequest) Reset() {
	*x = GetPledgesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_pledge_pledge_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPledgesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPledgesRequest) ProtoMessage() {}

func (x *GetPledgesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_pledge_pledge_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPledgesRequest.ProtoReflect.Descriptor instead.
func (*GetPledgesRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_pledge_pledge_proto_rawDescGZIP(), []int{9}
}

func (x *GetPledgesRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetPledgesRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetPledgesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetPledgesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Pledge `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32    `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetPledgesResponse) Reset() {
	*x = GetPledgesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_pledge_pledge_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPledgesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPledgesResponse) ProtoMessage() {}

func (x *GetPledgesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_pledge_pledge_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPledgesResponse.ProtoReflect.Descriptor instead.
func (*GetPledgesResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_pledge_pledge_proto_rawDescGZIP(), []int{10}
}

func (x *GetPledgesResponse) GetInfos() []*Pledge {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetPledgesResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ExistPledgeCondsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *ExistPledgeCondsRequest) Reset() {
	*x = ExistPledgeCondsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_pledge_pledge_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistPledgeCondsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistPledgeCondsRequest) ProtoMessage() {}

func (x *ExistPledgeCondsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_pledge_pledge_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistPledgeCondsRequest.ProtoReflect.Descriptor instead.
func (*ExistPledgeCondsRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_pledge_pledge_proto_rawDescGZIP(), []int{11}
}

func (x *ExistPledgeCondsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type ExistPledgeCondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistPledgeCondsResponse) Reset() {
	*x = ExistPledgeCondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_pledge_pledge_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistPledgeCondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistPledgeCondsResponse) ProtoMessage() {}

func (x *ExistPledgeCondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_pledge_pledge_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistPledgeCondsResponse.ProtoReflect.Descriptor instead.
func (*ExistPledgeCondsResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_pledge_pledge_proto_rawDescGZIP(), []int{12}
}

func (x *ExistPledgeCondsResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type DeletePledgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PledgeReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeletePledgeRequest) Reset() {
	*x = DeletePledgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_pledge_pledge_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePledgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePledgeRequest) ProtoMessage() {}

func (x *DeletePledgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_pledge_pledge_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePledgeRequest.ProtoReflect.Descriptor instead.
func (*DeletePledgeRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_pledge_pledge_proto_rawDescGZIP(), []int{13}
}

func (x *DeletePledgeRequest) GetInfo() *PledgeReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type DeletePledgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Pledge `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeletePledgeResponse) Reset() {
	*x = DeletePledgeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_app_pledge_pledge_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePledgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePledgeResponse) ProtoMessage() {}

func (x *DeletePledgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_app_pledge_pledge_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePledgeResponse.ProtoReflect.Descriptor instead.
func (*DeletePledgeResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_app_pledge_pledge_proto_rawDescGZIP(), []int{14}
}

func (x *DeletePledgeResponse) GetInfo() *Pledge {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_good_mw_v1_app_pledge_pledge_proto protoreflect.FileDescriptor

var file_npool_good_mw_v1_app_pledge_pledge_proto_rawDesc = []byte{
	0x0a, 0x28, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x6d, 0x77, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x70, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c,
	0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x6e, 0x70, 0x6f, 0x6f, 0x6c,
	0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f,
	0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25,
	0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31,
	0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f,
	0x64, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67, 0x6f, 0x6f, 0x64,
	0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d,
	0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x2f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x6e,
	0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x70, 0x70, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x6e, 0x70, 0x6f, 0x6f,
	0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70,
	0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x2f, 0x6e, 0x61,
	0x6d, 0x65, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x6e,
	0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x70, 0x70, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x2f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x6d,
	0x77, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xbe, 0x06, 0x0a, 0x09, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x13, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x02,
	0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x47,
	0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x47,
	0x6f, 0x6f, 0x64, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x47,
	0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x09, 0x41,
	0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x05, 0x52, 0x0b, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x31, 0x0a, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52,
	0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0b, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x08, 0x52, 0x06,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x56, 0x69, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x08, 0x48, 0x09, 0x52, 0x07, 0x56, 0x69,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x27, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x78, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x06, 0x42, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x06, 0x42,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x0d, 0x52, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x0e, 0x52, 0x09,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x13,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0f, 0x52, 0x13, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x45, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x41, 0x70, 0x70, 0x49, 0x44, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x41,
	0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x56, 0x69,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0xcb, 0x12, 0x0a, 0x06, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x6f,
	0x6f, 0x64, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44,
	0x12, 0x21, 0x0a, 0x0b, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x18,
	0xe6, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x53, 0x74, 0x72, 0x12, 0x38, 0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18,
	0xf0, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a,
	0x0e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x18,
	0xfa, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x12, 0x41, 0x0a, 0x0b, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x84, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x42, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x47, 0x6f, 0x6f,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x8e, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x47, 0x6f,
	0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x12, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x98, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x2b, 0x0a, 0x10, 0x47, 0x6f, 0x6f, 0x64, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x72, 0x18, 0xa2, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x53, 0x74, 0x72, 0x12, 0x47, 0x0a, 0x0d, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0xac, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0d,
	0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a,
	0x08, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0xb6, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x33, 0x0a, 0x14, 0x42, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x48, 0x6f, 0x75,
	0x72, 0x73, 0x18, 0xc0, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x42, 0x65, 0x6e, 0x65, 0x66,
	0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12,
	0x29, 0x0a, 0x0f, 0x47, 0x6f, 0x6f, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0xca, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x47, 0x6f, 0x6f, 0x64, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x47, 0x6f,
	0x6f, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0xd4, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x47, 0x6f, 0x6f, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x18, 0xed, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x12, 0x33, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0xee, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a,
	0x12, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0xf2, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x41, 0x70, 0x70, 0x47,
	0x6f, 0x6f, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x25,
	0x0a, 0x0d, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0xfc, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x2d, 0x0a, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x18, 0x86, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x18, 0x90, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x07, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x18, 0x9a, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0xa4, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xae, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x17, 0x0a, 0x06, 0x42, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x18, 0xb8, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xe0, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x15, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18,
	0xd8, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x31, 0x0a,
	0x13, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x53, 0x74, 0x72, 0x18, 0xe2, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x41, 0x70, 0x70,
	0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x72,
	0x12, 0x4d, 0x0a, 0x10, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x18, 0xec, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x10, 0x41,
	0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x15, 0x0a, 0x05, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x18, 0xf6, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x6c, 0x69, 0x6b,
	0x65, 0x73, 0x18, 0x80, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x44, 0x69, 0x73, 0x6c, 0x69,
	0x6b, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x8a, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x94, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0e, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x9e, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0xa8, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x4c, 0x61, 0x73,
	0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x74, 0x18, 0xb2, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x74, 0x12, 0x4a,
	0x0a, 0x09, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0xbc, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x09, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x5e, 0x0a, 0x0c, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xc6, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4a, 0x0a, 0x07, 0x50, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0xd0, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x50,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x5f, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0xda, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x63, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0xe4, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x46, 0x0a, 0x06,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0xee, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x4b, 0x0a, 0x07, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18,
	0xf8, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x12, 0x29, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x55, 0x52, 0x4c, 0x18, 0x8c, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x2f, 0x0a, 0x12,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x18, 0x96, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x2b, 0x0a,
	0x10, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x72, 0x18, 0xa0, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x12, 0x47, 0x0a, 0x0d, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0xaa, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0xd0, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0xda, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0x80, 0x05, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x45, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x48, 0x01, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a,
	0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x02, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x34, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x06, 0x47, 0x6f,
	0x6f, 0x64, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x07, 0x47, 0x6f, 0x6f, 0x64, 0x49,
	0x44, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c,
	0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x04, 0x52, 0x07, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49,
	0x44, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x48, 0x05, 0x52, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x88, 0x01, 0x01,
	0x12, 0x41, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x73, 0x18, 0x46,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56,
	0x61, 0x6c, 0x48, 0x06, 0x52, 0x0a, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x44, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x48, 0x07, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x43, 0x0a, 0x0b, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x73,
	0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63,
	0x65, 0x56, 0x61, 0x6c, 0x48, 0x08, 0x52, 0x0b, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x41, 0x70, 0x70,
	0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x41, 0x70, 0x70, 0x47, 0x6f,
	0x6f, 0x64, 0x49, 0x44, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x44, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x44, 0x73, 0x22, 0x53, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x51, 0x0a, 0x14, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x39, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x53, 0x0a, 0x13,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x51, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x30, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x47,
	0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x70, 0x70,
	0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x22, 0x4e, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x7d, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x05, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x67, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x55,
	0x0a, 0x17, 0x45, 0x78, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x05, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05,
	0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x2e, 0x0a, 0x18, 0x45, 0x78, 0x69, 0x73, 0x74, 0x50, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x53, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x51, 0x0a, 0x14, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0xec, 0x05,
	0x0a, 0x0a, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x12, 0x79, 0x0a, 0x0c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x12, 0x32, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x12, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x70, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x12,
	0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x73, 0x12, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x10, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x36,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x79, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x12, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3e, 0x5a, 0x3c,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x6d, 0x77, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_good_mw_v1_app_pledge_pledge_proto_rawDescOnce sync.Once
	file_npool_good_mw_v1_app_pledge_pledge_proto_rawDescData = file_npool_good_mw_v1_app_pledge_pledge_proto_rawDesc
)

func file_npool_good_mw_v1_app_pledge_pledge_proto_rawDescGZIP() []byte {
	file_npool_good_mw_v1_app_pledge_pledge_proto_rawDescOnce.Do(func() {
		file_npool_good_mw_v1_app_pledge_pledge_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_good_mw_v1_app_pledge_pledge_proto_rawDescData)
	})
	return file_npool_good_mw_v1_app_pledge_pledge_proto_rawDescData
}

var file_npool_good_mw_v1_app_pledge_pledge_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_npool_good_mw_v1_app_pledge_pledge_proto_goTypes = []interface{}{
	(*PledgeReq)(nil),                   // 0: good.middleware.app.pledge.v1.PledgeReq
	(*Pledge)(nil),                      // 1: good.middleware.app.pledge.v1.Pledge
	(*Conds)(nil),                       // 2: good.middleware.app.pledge.v1.Conds
	(*CreatePledgeRequest)(nil),         // 3: good.middleware.app.pledge.v1.CreatePledgeRequest
	(*CreatePledgeResponse)(nil),        // 4: good.middleware.app.pledge.v1.CreatePledgeResponse
	(*UpdatePledgeRequest)(nil),         // 5: good.middleware.app.pledge.v1.UpdatePledgeRequest
	(*UpdatePledgeResponse)(nil),        // 6: good.middleware.app.pledge.v1.UpdatePledgeResponse
	(*GetPledgeRequest)(nil),            // 7: good.middleware.app.pledge.v1.GetPledgeRequest
	(*GetPledgeResponse)(nil),           // 8: good.middleware.app.pledge.v1.GetPledgeResponse
	(*GetPledgesRequest)(nil),           // 9: good.middleware.app.pledge.v1.GetPledgesRequest
	(*GetPledgesResponse)(nil),          // 10: good.middleware.app.pledge.v1.GetPledgesResponse
	(*ExistPledgeCondsRequest)(nil),     // 11: good.middleware.app.pledge.v1.ExistPledgeCondsRequest
	(*ExistPledgeCondsResponse)(nil),    // 12: good.middleware.app.pledge.v1.ExistPledgeCondsResponse
	(*DeletePledgeRequest)(nil),         // 13: good.middleware.app.pledge.v1.DeletePledgeRequest
	(*DeletePledgeResponse)(nil),        // 14: good.middleware.app.pledge.v1.DeletePledgeResponse
	(v1.GoodStartMode)(0),               // 15: basetypes.good.v1.GoodStartMode
	(v1.GoodType)(0),                    // 16: basetypes.good.v1.GoodType
	(v1.BenefitType)(0),                 // 17: basetypes.good.v1.BenefitType
	(v1.GoodState)(0),                   // 18: basetypes.good.v1.GoodState
	(*coin.GoodCoinInfo)(nil),           // 19: good.middleware.good1.coin.v1.GoodCoinInfo
	(*description.DescriptionInfo)(nil), // 20: good.middleware.app.good1.description.v1.DescriptionInfo
	(*poster.PosterInfo)(nil),           // 21: good.middleware.app.good1.poster.v1.PosterInfo
	(*name.DisplayNameInfo)(nil),        // 22: good.middleware.app.good1.display.name.v1.DisplayNameInfo
	(*color.DisplayColorInfo)(nil),      // 23: good.middleware.app.good1.display.color.v1.DisplayColorInfo
	(*label.LabelInfo)(nil),             // 24: good.middleware.app.good1.label.v1.LabelInfo
	(*reward.RewardInfo)(nil),           // 25: good.middleware.good1.coin.reward.v1.RewardInfo
	(v1.ContractState)(0),               // 26: basetypes.good.v1.ContractState
	(*v11.Uint32Val)(nil),               // 27: basetypes.v1.Uint32Val
	(*v11.StringVal)(nil),               // 28: basetypes.v1.StringVal
	(*v11.StringSliceVal)(nil),          // 29: basetypes.v1.StringSliceVal
}
var file_npool_good_mw_v1_app_pledge_pledge_proto_depIdxs = []int32{
	15, // 0: good.middleware.app.pledge.v1.PledgeReq.StartMode:type_name -> basetypes.good.v1.GoodStartMode
	16, // 1: good.middleware.app.pledge.v1.Pledge.GoodType:type_name -> basetypes.good.v1.GoodType
	17, // 2: good.middleware.app.pledge.v1.Pledge.BenefitType:type_name -> basetypes.good.v1.BenefitType
	15, // 3: good.middleware.app.pledge.v1.Pledge.GoodStartMode:type_name -> basetypes.good.v1.GoodStartMode
	18, // 4: good.middleware.app.pledge.v1.Pledge.State:type_name -> basetypes.good.v1.GoodState
	15, // 5: good.middleware.app.pledge.v1.Pledge.AppGoodStartMode:type_name -> basetypes.good.v1.GoodStartMode
	19, // 6: good.middleware.app.pledge.v1.Pledge.GoodCoins:type_name -> good.middleware.good1.coin.v1.GoodCoinInfo
	20, // 7: good.middleware.app.pledge.v1.Pledge.Descriptions:type_name -> good.middleware.app.good1.description.v1.DescriptionInfo
	21, // 8: good.middleware.app.pledge.v1.Pledge.Posters:type_name -> good.middleware.app.good1.poster.v1.PosterInfo
	22, // 9: good.middleware.app.pledge.v1.Pledge.DisplayNames:type_name -> good.middleware.app.good1.display.name.v1.DisplayNameInfo
	23, // 10: good.middleware.app.pledge.v1.Pledge.DisplayColors:type_name -> good.middleware.app.good1.display.color.v1.DisplayColorInfo
	24, // 11: good.middleware.app.pledge.v1.Pledge.Labels:type_name -> good.middleware.app.good1.label.v1.LabelInfo
	25, // 12: good.middleware.app.pledge.v1.Pledge.Rewards:type_name -> good.middleware.good1.coin.reward.v1.RewardInfo
	26, // 13: good.middleware.app.pledge.v1.Pledge.ContractState:type_name -> basetypes.good.v1.ContractState
	27, // 14: good.middleware.app.pledge.v1.Conds.ID:type_name -> basetypes.v1.Uint32Val
	28, // 15: good.middleware.app.pledge.v1.Conds.EntID:type_name -> basetypes.v1.StringVal
	28, // 16: good.middleware.app.pledge.v1.Conds.AppID:type_name -> basetypes.v1.StringVal
	28, // 17: good.middleware.app.pledge.v1.Conds.GoodID:type_name -> basetypes.v1.StringVal
	29, // 18: good.middleware.app.pledge.v1.Conds.GoodIDs:type_name -> basetypes.v1.StringSliceVal
	28, // 19: good.middleware.app.pledge.v1.Conds.AppGoodID:type_name -> basetypes.v1.StringVal
	29, // 20: good.middleware.app.pledge.v1.Conds.AppGoodIDs:type_name -> basetypes.v1.StringSliceVal
	28, // 21: good.middleware.app.pledge.v1.Conds.CoinTypeID:type_name -> basetypes.v1.StringVal
	29, // 22: good.middleware.app.pledge.v1.Conds.CoinTypeIDs:type_name -> basetypes.v1.StringSliceVal
	0,  // 23: good.middleware.app.pledge.v1.CreatePledgeRequest.Info:type_name -> good.middleware.app.pledge.v1.PledgeReq
	1,  // 24: good.middleware.app.pledge.v1.CreatePledgeResponse.Info:type_name -> good.middleware.app.pledge.v1.Pledge
	0,  // 25: good.middleware.app.pledge.v1.UpdatePledgeRequest.Info:type_name -> good.middleware.app.pledge.v1.PledgeReq
	1,  // 26: good.middleware.app.pledge.v1.UpdatePledgeResponse.Info:type_name -> good.middleware.app.pledge.v1.Pledge
	1,  // 27: good.middleware.app.pledge.v1.GetPledgeResponse.Info:type_name -> good.middleware.app.pledge.v1.Pledge
	2,  // 28: good.middleware.app.pledge.v1.GetPledgesRequest.Conds:type_name -> good.middleware.app.pledge.v1.Conds
	1,  // 29: good.middleware.app.pledge.v1.GetPledgesResponse.Infos:type_name -> good.middleware.app.pledge.v1.Pledge
	2,  // 30: good.middleware.app.pledge.v1.ExistPledgeCondsRequest.Conds:type_name -> good.middleware.app.pledge.v1.Conds
	0,  // 31: good.middleware.app.pledge.v1.DeletePledgeRequest.Info:type_name -> good.middleware.app.pledge.v1.PledgeReq
	1,  // 32: good.middleware.app.pledge.v1.DeletePledgeResponse.Info:type_name -> good.middleware.app.pledge.v1.Pledge
	3,  // 33: good.middleware.app.pledge.v1.Middleware.CreatePledge:input_type -> good.middleware.app.pledge.v1.CreatePledgeRequest
	5,  // 34: good.middleware.app.pledge.v1.Middleware.UpdatePledge:input_type -> good.middleware.app.pledge.v1.UpdatePledgeRequest
	7,  // 35: good.middleware.app.pledge.v1.Middleware.GetPledge:input_type -> good.middleware.app.pledge.v1.GetPledgeRequest
	9,  // 36: good.middleware.app.pledge.v1.Middleware.GetPledges:input_type -> good.middleware.app.pledge.v1.GetPledgesRequest
	11, // 37: good.middleware.app.pledge.v1.Middleware.ExistPledgeConds:input_type -> good.middleware.app.pledge.v1.ExistPledgeCondsRequest
	13, // 38: good.middleware.app.pledge.v1.Middleware.DeletePledge:input_type -> good.middleware.app.pledge.v1.DeletePledgeRequest
	4,  // 39: good.middleware.app.pledge.v1.Middleware.CreatePledge:output_type -> good.middleware.app.pledge.v1.CreatePledgeResponse
	6,  // 40: good.middleware.app.pledge.v1.Middleware.UpdatePledge:output_type -> good.middleware.app.pledge.v1.UpdatePledgeResponse
	8,  // 41: good.middleware.app.pledge.v1.Middleware.GetPledge:output_type -> good.middleware.app.pledge.v1.GetPledgeResponse
	10, // 42: good.middleware.app.pledge.v1.Middleware.GetPledges:output_type -> good.middleware.app.pledge.v1.GetPledgesResponse
	12, // 43: good.middleware.app.pledge.v1.Middleware.ExistPledgeConds:output_type -> good.middleware.app.pledge.v1.ExistPledgeCondsResponse
	14, // 44: good.middleware.app.pledge.v1.Middleware.DeletePledge:output_type -> good.middleware.app.pledge.v1.DeletePledgeResponse
	39, // [39:45] is the sub-list for method output_type
	33, // [33:39] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_npool_good_mw_v1_app_pledge_pledge_proto_init() }
func file_npool_good_mw_v1_app_pledge_pledge_proto_init() {
	if File_npool_good_mw_v1_app_pledge_pledge_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_good_mw_v1_app_pledge_pledge_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PledgeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_pledge_pledge_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pledge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_pledge_pledge_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_pledge_pledge_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePledgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_pledge_pledge_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePledgeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_pledge_pledge_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePledgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_pledge_pledge_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePledgeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_pledge_pledge_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPledgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_pledge_pledge_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPledgeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_pledge_pledge_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPledgesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_pledge_pledge_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPledgesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_pledge_pledge_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistPledgeCondsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_pledge_pledge_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistPledgeCondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_pledge_pledge_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePledgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_app_pledge_pledge_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePledgeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_good_mw_v1_app_pledge_pledge_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_npool_good_mw_v1_app_pledge_pledge_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_good_mw_v1_app_pledge_pledge_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_good_mw_v1_app_pledge_pledge_proto_goTypes,
		DependencyIndexes: file_npool_good_mw_v1_app_pledge_pledge_proto_depIdxs,
		MessageInfos:      file_npool_good_mw_v1_app_pledge_pledge_proto_msgTypes,
	}.Build()
	File_npool_good_mw_v1_app_pledge_pledge_proto = out.File
	file_npool_good_mw_v1_app_pledge_pledge_proto_rawDesc = nil
	file_npool_good_mw_v1_app_pledge_pledge_proto_goTypes = nil
	file_npool_good_mw_v1_app_pledge_pledge_proto_depIdxs = nil
}
