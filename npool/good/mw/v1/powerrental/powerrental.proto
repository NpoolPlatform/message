syntax = "proto3";

package good.middleware.powerrental.v1;

option go_package = "github.com/NpoolPlatform/message/npool/good/mw/v1/powerrental";

import "npool/basetypes/v1/conds.proto";
import "npool/basetypes/good/v1/enums.proto";
import "npool/good/mw/v1/good/coin/coin.proto";
import "npool/good/mw/v1/good/stock/stock.proto";

service Middleware {
    rpc CreatePowerRental (CreatePowerRentalRequest) returns (CreatePowerRentalResponse) {}
    rpc UpdatePowerRental (UpdatePowerRentalRequest) returns (UpdatePowerRentalResponse) {}
    rpc GetPowerRental (GetPowerRentalRequest) returns (GetPowerRentalResponse) {}
    rpc GetPowerRentals (GetPowerRentalsRequest) returns (GetPowerRentalsResponse) {}
    rpc DeletePowerRental (DeletePowerRentalRequest) returns (DeletePowerRentalResponse) {}
}

message PowerRentalReq {
    // Base of power rental
    optional uint32 ID = 10;
    optional string EntID = 20;
    optional string GoodID = 30;
    optional string DeviceTypeID = 40;
    optional string VendorLocationID = 50;
    optional string UnitPrice = 60;
    optional string QuantityUnit = 70;
    optional string QuantityUnitAmount = 80;
    optional uint32 DeliveryAt = 90;
    optional string UnitLockDeposit = 100;
    optional basetypes.good.v1.GoodDurationType DurationType = 110;

    // Good information
    optional basetypes.good.v1.GoodType GoodType = 120;
    optional basetypes.good.v1.BenefitType BenefitType = 130;
    optional string Name = 140;
    optional uint32 ServiceStartAt = 150;
    optional basetypes.good.v1.GoodStartMode StartMode = 160;
    optional bool TestOnly = 170;
    optional uint32 BenefitIntervalHours = 180;
    optional bool Purchasable = 190;
    optional bool Online = 200;

    // Good stock
    optional string Total = 210;
    repeated good.middleware.good1.stock.v1.MiningGoodStockReq MiningPoolStocks = 220;
}

message PowerRental {
    // @inject_tag: sql:"id"
    uint32 ID = 10;
    // @inject_tag: sql:"ent_id"
    string EntID = 20;
    // @inject_tag: sql:"good_id"
    string GoodID = 30;

    // @inject_tag: sql:"device_type_id"
    string DeviceTypeID = 40;
    // @inject_tag: sql:"device_type"
    string DeviceType = 50;
    // @inject_tag: sql:"device_manufacturer_name"
    string DeviceManufacturerName = 60;
    // @inject_tag: sql:"device_manufacturer_logo"
    string DeviceManufacturerLogo = 70;
    // @inject_tag: sql:"device_power_consumption"
    uint32 DevicePowerConsumption = 80;
    // @inject_tag: sql:"device_shipment_at"
    uint32 DeviceShipmentAt = 90;

    // @inject_tag: sql:"vendor_location_id"
    string VendorLocationID = 100;
    // @inject_tag: sql:"vendor_brand"
    string VendorBrand = 110;
    // @inject_tag: sql:"vendor_logo"
    string VendorLogo = 120;
    // @inject_tag: sql:"vendor_country"
    string VendorCountry = 130;
    // @inject_tag: sql:"vendor_province"
    string VendorProvince = 140;

    // @inject_tag: sql:"unit_price"
    string UnitPrice = 150;
    // @inject_tag: sql:"quantity_unit"
    string QuantityUnit = 160;
    // @inject_tag: sql:"quantity_unit_amount"
    string QuantityUnitAmount = 170;
    // @inject_tag: sql:"delivery_at"
    uint32 DeliveryAt = 180;
    // @inject_tag: sql:"unit_lock_deposit"
    string UnitLockDeposit = 190;
    // @inject_tag: sql:"duration_type"
    string DurationTypeStr = 200;
    basetypes.good.v1.GoodDurationType DurationType = 210;

    // @inject_tag: sql:"good_type"
    string GoodTypeStr = 220;
    basetypes.good.v1.GoodType GoodType = 230;
    // @inject_tag: sql:"benefit_type"
    string BenefitTypeStr = 240;
    basetypes.good.v1.BenefitType BenefitType = 250;
    // @inject_tag: sql:"name"
    string Name = 260;
    // @inject_tag: sql:"service_start_at"
    uint32 ServiceStartAt = 270;
    // @inject_tag: sql:"start_mode"
    string StartModeStr = 280;
    basetypes.good.v1.GoodStartMode StartMode = 290;
    // @inject_tag: sql:"test_only"
    bool TestOnly = 300;
    // @inject_tag: sql:"benefit_interval_hours"
    uint32 BenefitIntervalHours = 310;
    // @inject_tag: sql:"purchasable"
    bool Purchasable = 320;
    // @inject_tag: sql:"online"
    bool Online = 330;

    // @inject_tag: sql:"good_stock_id"
    string GoodStockID = 340;
    // @inject_tag: sql:"good_total"
    string GoodTotal = 350;
    // @inject_tag: sql:"good_spot_quantity"
    string GoodSpotQuantity = 360;
    // @inject_tag: sql:"good_locked"
    string GoodLocked = 370;
    // @inject_tag: sql:"good_in_service"
    string GoodInService = 380;
    // @inject_tag: sql:"good_wait_start"
    string GoodWaitStart = 390;
    // @inject_tag: sql:"good_sold"
    string GoodSold = 400;
    // @inject_tag: sql:"good_app_reserved"
    string GoodAppReserved = 410;

    repeated good.middleware.good1.coin.v1.GoodCoinInfo GoodCoins = 800;
    repeated good.middleware.good1.stock.v1.MiningGoodStock MiningPoolStocks = 810;

    // @inject_tag: sql:"created_at"
    uint32 CreatedAt = 1000;
    // @inject_tag: sql:"updated_at"
    uint32 UpdatedAt = 1010;
}

message Conds {
    optional basetypes.v1.Uint32Val      ID        = 10;
    optional basetypes.v1.StringVal      EntID     = 20;
    optional basetypes.v1.StringVal      GoodID    = 30;
    optional basetypes.v1.StringSliceVal GoodIDs   = 40;
    optional basetypes.v1.Uint32Val      GoodType  = 50;
    optional basetypes.v1.Uint32SliceVal GoodTypes = 60;
    optional basetypes.v1.StringVal      CoinTypeID = 70;
    optional basetypes.v1.StringSliceVal CoinTypeIDs = 80;
}

message CreatePowerRentalRequest {
    PowerRentalReq Info = 10;
}

message CreatePowerRentalResponse {
    PowerRental Info = 10;
}

message UpdatePowerRentalRequest {
    PowerRentalReq Info = 10;
}

message UpdatePowerRentalResponse {
    PowerRental Info = 10;
}

message GetPowerRentalRequest {
    string GoodID = 10;
}

message GetPowerRentalResponse {
    PowerRental Info = 10;
}

message GetPowerRentalsRequest {
    Conds Conds  = 10;
    int32 Offset = 20;
    int32 Limit  = 30;
}

message GetPowerRentalsResponse {
    repeated PowerRental Infos = 10;
    uint32               Total = 20;
}

message DeletePowerRentalRequest {
    PowerRentalReq Info = 10;
}

message DeletePowerRentalResponse {
    PowerRental Info = 10;
}
