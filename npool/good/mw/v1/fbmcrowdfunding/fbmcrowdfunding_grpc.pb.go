// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/good/mw/v1/fbmcrowdfunding/fbmcrowdfunding.proto

package fbmcrowdfunding

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Middleware_CreateFbmCrowdFunding_FullMethodName = "/good.middleware.fbmcrowdfunding.v1.Middleware/CreateFbmCrowdFunding"
	Middleware_UpdateFbmCrowdFunding_FullMethodName = "/good.middleware.fbmcrowdfunding.v1.Middleware/UpdateFbmCrowdFunding"
	Middleware_GetFbmCrowdFunding_FullMethodName    = "/good.middleware.fbmcrowdfunding.v1.Middleware/GetFbmCrowdFunding"
	Middleware_GetFbmCrowdFundings_FullMethodName   = "/good.middleware.fbmcrowdfunding.v1.Middleware/GetFbmCrowdFundings"
	Middleware_DeleteFbmCrowdFunding_FullMethodName = "/good.middleware.fbmcrowdfunding.v1.Middleware/DeleteFbmCrowdFunding"
)

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
	CreateFbmCrowdFunding(ctx context.Context, in *CreateFbmCrowdFundingRequest, opts ...grpc.CallOption) (*CreateFbmCrowdFundingResponse, error)
	UpdateFbmCrowdFunding(ctx context.Context, in *UpdateFbmCrowdFundingRequest, opts ...grpc.CallOption) (*UpdateFbmCrowdFundingResponse, error)
	GetFbmCrowdFunding(ctx context.Context, in *GetFbmCrowdFundingRequest, opts ...grpc.CallOption) (*GetFbmCrowdFundingResponse, error)
	GetFbmCrowdFundings(ctx context.Context, in *GetFbmCrowdFundingsRequest, opts ...grpc.CallOption) (*GetFbmCrowdFundingsResponse, error)
	DeleteFbmCrowdFunding(ctx context.Context, in *DeleteFbmCrowdFundingRequest, opts ...grpc.CallOption) (*DeleteFbmCrowdFundingResponse, error)
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) CreateFbmCrowdFunding(ctx context.Context, in *CreateFbmCrowdFundingRequest, opts ...grpc.CallOption) (*CreateFbmCrowdFundingResponse, error) {
	out := new(CreateFbmCrowdFundingResponse)
	err := c.cc.Invoke(ctx, Middleware_CreateFbmCrowdFunding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) UpdateFbmCrowdFunding(ctx context.Context, in *UpdateFbmCrowdFundingRequest, opts ...grpc.CallOption) (*UpdateFbmCrowdFundingResponse, error) {
	out := new(UpdateFbmCrowdFundingResponse)
	err := c.cc.Invoke(ctx, Middleware_UpdateFbmCrowdFunding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetFbmCrowdFunding(ctx context.Context, in *GetFbmCrowdFundingRequest, opts ...grpc.CallOption) (*GetFbmCrowdFundingResponse, error) {
	out := new(GetFbmCrowdFundingResponse)
	err := c.cc.Invoke(ctx, Middleware_GetFbmCrowdFunding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetFbmCrowdFundings(ctx context.Context, in *GetFbmCrowdFundingsRequest, opts ...grpc.CallOption) (*GetFbmCrowdFundingsResponse, error) {
	out := new(GetFbmCrowdFundingsResponse)
	err := c.cc.Invoke(ctx, Middleware_GetFbmCrowdFundings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) DeleteFbmCrowdFunding(ctx context.Context, in *DeleteFbmCrowdFundingRequest, opts ...grpc.CallOption) (*DeleteFbmCrowdFundingResponse, error) {
	out := new(DeleteFbmCrowdFundingResponse)
	err := c.cc.Invoke(ctx, Middleware_DeleteFbmCrowdFunding_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
	CreateFbmCrowdFunding(context.Context, *CreateFbmCrowdFundingRequest) (*CreateFbmCrowdFundingResponse, error)
	UpdateFbmCrowdFunding(context.Context, *UpdateFbmCrowdFundingRequest) (*UpdateFbmCrowdFundingResponse, error)
	GetFbmCrowdFunding(context.Context, *GetFbmCrowdFundingRequest) (*GetFbmCrowdFundingResponse, error)
	GetFbmCrowdFundings(context.Context, *GetFbmCrowdFundingsRequest) (*GetFbmCrowdFundingsResponse, error)
	DeleteFbmCrowdFunding(context.Context, *DeleteFbmCrowdFundingRequest) (*DeleteFbmCrowdFundingResponse, error)
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) CreateFbmCrowdFunding(context.Context, *CreateFbmCrowdFundingRequest) (*CreateFbmCrowdFundingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFbmCrowdFunding not implemented")
}
func (UnimplementedMiddlewareServer) UpdateFbmCrowdFunding(context.Context, *UpdateFbmCrowdFundingRequest) (*UpdateFbmCrowdFundingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFbmCrowdFunding not implemented")
}
func (UnimplementedMiddlewareServer) GetFbmCrowdFunding(context.Context, *GetFbmCrowdFundingRequest) (*GetFbmCrowdFundingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFbmCrowdFunding not implemented")
}
func (UnimplementedMiddlewareServer) GetFbmCrowdFundings(context.Context, *GetFbmCrowdFundingsRequest) (*GetFbmCrowdFundingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFbmCrowdFundings not implemented")
}
func (UnimplementedMiddlewareServer) DeleteFbmCrowdFunding(context.Context, *DeleteFbmCrowdFundingRequest) (*DeleteFbmCrowdFundingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFbmCrowdFunding not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_CreateFbmCrowdFunding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFbmCrowdFundingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateFbmCrowdFunding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_CreateFbmCrowdFunding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateFbmCrowdFunding(ctx, req.(*CreateFbmCrowdFundingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_UpdateFbmCrowdFunding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFbmCrowdFundingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).UpdateFbmCrowdFunding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_UpdateFbmCrowdFunding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).UpdateFbmCrowdFunding(ctx, req.(*UpdateFbmCrowdFundingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetFbmCrowdFunding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFbmCrowdFundingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetFbmCrowdFunding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetFbmCrowdFunding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetFbmCrowdFunding(ctx, req.(*GetFbmCrowdFundingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetFbmCrowdFundings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFbmCrowdFundingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetFbmCrowdFundings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetFbmCrowdFundings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetFbmCrowdFundings(ctx, req.(*GetFbmCrowdFundingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_DeleteFbmCrowdFunding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFbmCrowdFundingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).DeleteFbmCrowdFunding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_DeleteFbmCrowdFunding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).DeleteFbmCrowdFunding(ctx, req.(*DeleteFbmCrowdFundingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "good.middleware.fbmcrowdfunding.v1.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFbmCrowdFunding",
			Handler:    _Middleware_CreateFbmCrowdFunding_Handler,
		},
		{
			MethodName: "UpdateFbmCrowdFunding",
			Handler:    _Middleware_UpdateFbmCrowdFunding_Handler,
		},
		{
			MethodName: "GetFbmCrowdFunding",
			Handler:    _Middleware_GetFbmCrowdFunding_Handler,
		},
		{
			MethodName: "GetFbmCrowdFundings",
			Handler:    _Middleware_GetFbmCrowdFundings_Handler,
		},
		{
			MethodName: "DeleteFbmCrowdFunding",
			Handler:    _Middleware_DeleteFbmCrowdFunding_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/good/mw/v1/fbmcrowdfunding/fbmcrowdfunding.proto",
}
