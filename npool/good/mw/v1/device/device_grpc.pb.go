// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/good/mw/v1/device/device.proto

package device

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Middleware_CreateDeviceType_FullMethodName = "/good.middleware.device.v1.Middleware/CreateDeviceType"
	Middleware_UpdateDeviceType_FullMethodName = "/good.middleware.device.v1.Middleware/UpdateDeviceType"
	Middleware_GetDeviceType_FullMethodName    = "/good.middleware.device.v1.Middleware/GetDeviceType"
	Middleware_GetDeviceTypes_FullMethodName   = "/good.middleware.device.v1.Middleware/GetDeviceTypes"
	Middleware_DeleteDeviceType_FullMethodName = "/good.middleware.device.v1.Middleware/DeleteDeviceType"
)

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
	CreateDeviceType(ctx context.Context, in *CreateDeviceTypeRequest, opts ...grpc.CallOption) (*CreateDeviceTypeResponse, error)
	UpdateDeviceType(ctx context.Context, in *UpdateDeviceTypeRequest, opts ...grpc.CallOption) (*UpdateDeviceTypeResponse, error)
	GetDeviceType(ctx context.Context, in *GetDeviceTypeRequest, opts ...grpc.CallOption) (*GetDeviceTypeResponse, error)
	GetDeviceTypes(ctx context.Context, in *GetDeviceTypesRequest, opts ...grpc.CallOption) (*GetDeviceTypesResponse, error)
	DeleteDeviceType(ctx context.Context, in *DeleteDeviceTypeRequest, opts ...grpc.CallOption) (*DeleteDeviceTypeResponse, error)
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) CreateDeviceType(ctx context.Context, in *CreateDeviceTypeRequest, opts ...grpc.CallOption) (*CreateDeviceTypeResponse, error) {
	out := new(CreateDeviceTypeResponse)
	err := c.cc.Invoke(ctx, Middleware_CreateDeviceType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) UpdateDeviceType(ctx context.Context, in *UpdateDeviceTypeRequest, opts ...grpc.CallOption) (*UpdateDeviceTypeResponse, error) {
	out := new(UpdateDeviceTypeResponse)
	err := c.cc.Invoke(ctx, Middleware_UpdateDeviceType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetDeviceType(ctx context.Context, in *GetDeviceTypeRequest, opts ...grpc.CallOption) (*GetDeviceTypeResponse, error) {
	out := new(GetDeviceTypeResponse)
	err := c.cc.Invoke(ctx, Middleware_GetDeviceType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetDeviceTypes(ctx context.Context, in *GetDeviceTypesRequest, opts ...grpc.CallOption) (*GetDeviceTypesResponse, error) {
	out := new(GetDeviceTypesResponse)
	err := c.cc.Invoke(ctx, Middleware_GetDeviceTypes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) DeleteDeviceType(ctx context.Context, in *DeleteDeviceTypeRequest, opts ...grpc.CallOption) (*DeleteDeviceTypeResponse, error) {
	out := new(DeleteDeviceTypeResponse)
	err := c.cc.Invoke(ctx, Middleware_DeleteDeviceType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
	CreateDeviceType(context.Context, *CreateDeviceTypeRequest) (*CreateDeviceTypeResponse, error)
	UpdateDeviceType(context.Context, *UpdateDeviceTypeRequest) (*UpdateDeviceTypeResponse, error)
	GetDeviceType(context.Context, *GetDeviceTypeRequest) (*GetDeviceTypeResponse, error)
	GetDeviceTypes(context.Context, *GetDeviceTypesRequest) (*GetDeviceTypesResponse, error)
	DeleteDeviceType(context.Context, *DeleteDeviceTypeRequest) (*DeleteDeviceTypeResponse, error)
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) CreateDeviceType(context.Context, *CreateDeviceTypeRequest) (*CreateDeviceTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeviceType not implemented")
}
func (UnimplementedMiddlewareServer) UpdateDeviceType(context.Context, *UpdateDeviceTypeRequest) (*UpdateDeviceTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeviceType not implemented")
}
func (UnimplementedMiddlewareServer) GetDeviceType(context.Context, *GetDeviceTypeRequest) (*GetDeviceTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceType not implemented")
}
func (UnimplementedMiddlewareServer) GetDeviceTypes(context.Context, *GetDeviceTypesRequest) (*GetDeviceTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceTypes not implemented")
}
func (UnimplementedMiddlewareServer) DeleteDeviceType(context.Context, *DeleteDeviceTypeRequest) (*DeleteDeviceTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeviceType not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_CreateDeviceType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateDeviceType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_CreateDeviceType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateDeviceType(ctx, req.(*CreateDeviceTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_UpdateDeviceType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).UpdateDeviceType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_UpdateDeviceType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).UpdateDeviceType(ctx, req.(*UpdateDeviceTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetDeviceType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetDeviceType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetDeviceType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetDeviceType(ctx, req.(*GetDeviceTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetDeviceTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetDeviceTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetDeviceTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetDeviceTypes(ctx, req.(*GetDeviceTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_DeleteDeviceType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).DeleteDeviceType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_DeleteDeviceType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).DeleteDeviceType(ctx, req.(*DeleteDeviceTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "good.middleware.device.v1.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDeviceType",
			Handler:    _Middleware_CreateDeviceType_Handler,
		},
		{
			MethodName: "UpdateDeviceType",
			Handler:    _Middleware_UpdateDeviceType_Handler,
		},
		{
			MethodName: "GetDeviceType",
			Handler:    _Middleware_GetDeviceType_Handler,
		},
		{
			MethodName: "GetDeviceTypes",
			Handler:    _Middleware_GetDeviceTypes_Handler,
		},
		{
			MethodName: "DeleteDeviceType",
			Handler:    _Middleware_DeleteDeviceType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/good/mw/v1/device/device.proto",
}
