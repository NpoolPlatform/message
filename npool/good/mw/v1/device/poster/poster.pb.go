// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.18.1
// source: npool/good/mw/v1/device/poster/poster.proto

package poster

import (
	v1 "github.com/NpoolPlatform/message/npool/basetypes/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PosterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           *uint32 `protobuf:"varint,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID        *string `protobuf:"bytes,20,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	DeviceTypeID *string `protobuf:"bytes,30,opt,name=DeviceTypeID,proto3,oneof" json:"DeviceTypeID,omitempty"`
	Poster       *string `protobuf:"bytes,40,opt,name=Poster,proto3,oneof" json:"Poster,omitempty"`
	Index        *uint32 `protobuf:"varint,50,opt,name=Index,proto3,oneof" json:"Index,omitempty"`
}

func (x *PosterReq) Reset() {
	*x = PosterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_device_poster_poster_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PosterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PosterReq) ProtoMessage() {}

func (x *PosterReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_device_poster_poster_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PosterReq.ProtoReflect.Descriptor instead.
func (*PosterReq) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_device_poster_poster_proto_rawDescGZIP(), []int{0}
}

func (x *PosterReq) GetID() uint32 {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return 0
}

func (x *PosterReq) GetEntID() string {
	if x != nil && x.EntID != nil {
		return *x.EntID
	}
	return ""
}

func (x *PosterReq) GetDeviceTypeID() string {
	if x != nil && x.DeviceTypeID != nil {
		return *x.DeviceTypeID
	}
	return ""
}

func (x *PosterReq) GetPoster() string {
	if x != nil && x.Poster != nil {
		return *x.Poster
	}
	return ""
}

func (x *PosterReq) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

type Poster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: sql:"id"
	ID uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty" sql:"id"`
	// @inject_tag: sql:"ent_id"
	EntID string `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty" sql:"ent_id"`
	// @inject_tag: sql:"device_type_id"
	DeviceTypeID string `protobuf:"bytes,30,opt,name=DeviceTypeID,proto3" json:"DeviceTypeID,omitempty" sql:"device_type_id"`
	// @inject_tag: sql:"device_type"
	DeviceType string `protobuf:"bytes,40,opt,name=DeviceType,proto3" json:"DeviceType,omitempty" sql:"device_type"`
	// @inject_tag: sql:"manufacturer"
	Manufacturer string `protobuf:"bytes,50,opt,name=Manufacturer,proto3" json:"Manufacturer,omitempty" sql:"manufacturer"`
	// @inject_tag: sql:"poster"
	Poster string `protobuf:"bytes,70,opt,name=Poster,proto3" json:"Poster,omitempty" sql:"poster"`
	// @inject_tag: sql:"index"
	Index uint32 `protobuf:"varint,90,opt,name=Index,proto3" json:"Index,omitempty" sql:"index"`
	// @inject_tag: sql:"created_at"
	CreatedAt uint32 `protobuf:"varint,1000,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
	// @inject_tag: sql:"updated_at"
	UpdatedAt uint32 `protobuf:"varint,1010,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty" sql:"updated_at"`
}

func (x *Poster) Reset() {
	*x = Poster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_device_poster_poster_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Poster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Poster) ProtoMessage() {}

func (x *Poster) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_device_poster_poster_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Poster.ProtoReflect.Descriptor instead.
func (*Poster) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_device_poster_poster_proto_rawDescGZIP(), []int{1}
}

func (x *Poster) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Poster) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *Poster) GetDeviceTypeID() string {
	if x != nil {
		return x.DeviceTypeID
	}
	return ""
}

func (x *Poster) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *Poster) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *Poster) GetPoster() string {
	if x != nil {
		return x.Poster
	}
	return ""
}

func (x *Poster) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Poster) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Poster) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type PosterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: sql:"poster"
	Poster string `protobuf:"bytes,70,opt,name=Poster,proto3" json:"Poster,omitempty" sql:"poster"`
	// @inject_tag: sql:"index"
	Index uint32 `protobuf:"varint,90,opt,name=Index,proto3" json:"Index,omitempty" sql:"index"`
}

func (x *PosterInfo) Reset() {
	*x = PosterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_device_poster_poster_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PosterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PosterInfo) ProtoMessage() {}

func (x *PosterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_device_poster_poster_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PosterInfo.ProtoReflect.Descriptor instead.
func (*PosterInfo) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_device_poster_poster_proto_rawDescGZIP(), []int{2}
}

func (x *PosterInfo) GetPoster() string {
	if x != nil {
		return x.Poster
	}
	return ""
}

func (x *PosterInfo) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            *v1.Uint32Val      `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID         *v1.StringVal      `protobuf:"bytes,20,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	DeviceTypeID  *v1.StringVal      `protobuf:"bytes,30,opt,name=DeviceTypeID,proto3,oneof" json:"DeviceTypeID,omitempty"`
	DeviceTypeIDs *v1.StringSliceVal `protobuf:"bytes,40,opt,name=DeviceTypeIDs,proto3,oneof" json:"DeviceTypeIDs,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_device_poster_poster_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_device_poster_poster_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_device_poster_poster_proto_rawDescGZIP(), []int{3}
}

func (x *Conds) GetID() *v1.Uint32Val {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetEntID() *v1.StringVal {
	if x != nil {
		return x.EntID
	}
	return nil
}

func (x *Conds) GetDeviceTypeID() *v1.StringVal {
	if x != nil {
		return x.DeviceTypeID
	}
	return nil
}

func (x *Conds) GetDeviceTypeIDs() *v1.StringSliceVal {
	if x != nil {
		return x.DeviceTypeIDs
	}
	return nil
}

type CreatePosterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PosterReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreatePosterRequest) Reset() {
	*x = CreatePosterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_device_poster_poster_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePosterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePosterRequest) ProtoMessage() {}

func (x *CreatePosterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_device_poster_poster_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePosterRequest.ProtoReflect.Descriptor instead.
func (*CreatePosterRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_device_poster_poster_proto_rawDescGZIP(), []int{4}
}

func (x *CreatePosterRequest) GetInfo() *PosterReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreatePosterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Poster `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreatePosterResponse) Reset() {
	*x = CreatePosterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_device_poster_poster_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePosterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePosterResponse) ProtoMessage() {}

func (x *CreatePosterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_device_poster_poster_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePosterResponse.ProtoReflect.Descriptor instead.
func (*CreatePosterResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_device_poster_poster_proto_rawDescGZIP(), []int{5}
}

func (x *CreatePosterResponse) GetInfo() *Poster {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdatePosterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PosterReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdatePosterRequest) Reset() {
	*x = UpdatePosterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_device_poster_poster_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePosterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePosterRequest) ProtoMessage() {}

func (x *UpdatePosterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_device_poster_poster_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePosterRequest.ProtoReflect.Descriptor instead.
func (*UpdatePosterRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_device_poster_poster_proto_rawDescGZIP(), []int{6}
}

func (x *UpdatePosterRequest) GetInfo() *PosterReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdatePosterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Poster `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdatePosterResponse) Reset() {
	*x = UpdatePosterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_device_poster_poster_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePosterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePosterResponse) ProtoMessage() {}

func (x *UpdatePosterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_device_poster_poster_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePosterResponse.ProtoReflect.Descriptor instead.
func (*UpdatePosterResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_device_poster_poster_proto_rawDescGZIP(), []int{7}
}

func (x *UpdatePosterResponse) GetInfo() *Poster {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetPosterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntID string `protobuf:"bytes,10,opt,name=EntID,proto3" json:"EntID,omitempty"`
}

func (x *GetPosterRequest) Reset() {
	*x = GetPosterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_device_poster_poster_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPosterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPosterRequest) ProtoMessage() {}

func (x *GetPosterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_device_poster_poster_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPosterRequest.ProtoReflect.Descriptor instead.
func (*GetPosterRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_device_poster_poster_proto_rawDescGZIP(), []int{8}
}

func (x *GetPosterRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

type GetPosterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Poster `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetPosterResponse) Reset() {
	*x = GetPosterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_device_poster_poster_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPosterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPosterResponse) ProtoMessage() {}

func (x *GetPosterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_device_poster_poster_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPosterResponse.ProtoReflect.Descriptor instead.
func (*GetPosterResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_device_poster_poster_proto_rawDescGZIP(), []int{9}
}

func (x *GetPosterResponse) GetInfo() *Poster {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetPostersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetPostersRequest) Reset() {
	*x = GetPostersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_device_poster_poster_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPostersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPostersRequest) ProtoMessage() {}

func (x *GetPostersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_device_poster_poster_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPostersRequest.ProtoReflect.Descriptor instead.
func (*GetPostersRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_device_poster_poster_proto_rawDescGZIP(), []int{10}
}

func (x *GetPostersRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetPostersRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetPostersRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetPostersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Poster `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32    `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetPostersResponse) Reset() {
	*x = GetPostersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_device_poster_poster_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPostersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPostersResponse) ProtoMessage() {}

func (x *GetPostersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_device_poster_poster_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPostersResponse.ProtoReflect.Descriptor instead.
func (*GetPostersResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_device_poster_poster_proto_rawDescGZIP(), []int{11}
}

func (x *GetPostersResponse) GetInfos() []*Poster {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetPostersResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ExistPosterCondsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *ExistPosterCondsRequest) Reset() {
	*x = ExistPosterCondsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_device_poster_poster_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistPosterCondsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistPosterCondsRequest) ProtoMessage() {}

func (x *ExistPosterCondsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_device_poster_poster_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistPosterCondsRequest.ProtoReflect.Descriptor instead.
func (*ExistPosterCondsRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_device_poster_poster_proto_rawDescGZIP(), []int{12}
}

func (x *ExistPosterCondsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type ExistPosterCondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistPosterCondsResponse) Reset() {
	*x = ExistPosterCondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_device_poster_poster_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistPosterCondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistPosterCondsResponse) ProtoMessage() {}

func (x *ExistPosterCondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_device_poster_poster_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistPosterCondsResponse.ProtoReflect.Descriptor instead.
func (*ExistPosterCondsResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_device_poster_poster_proto_rawDescGZIP(), []int{13}
}

func (x *ExistPosterCondsResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type DeletePosterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PosterReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeletePosterRequest) Reset() {
	*x = DeletePosterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_device_poster_poster_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePosterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePosterRequest) ProtoMessage() {}

func (x *DeletePosterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_device_poster_poster_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePosterRequest.ProtoReflect.Descriptor instead.
func (*DeletePosterRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_device_poster_poster_proto_rawDescGZIP(), []int{14}
}

func (x *DeletePosterRequest) GetInfo() *PosterReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type DeletePosterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Poster `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeletePosterResponse) Reset() {
	*x = DeletePosterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_device_poster_poster_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePosterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePosterResponse) ProtoMessage() {}

func (x *DeletePosterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_device_poster_poster_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePosterResponse.ProtoReflect.Descriptor instead.
func (*DeletePosterResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_device_poster_poster_proto_rawDescGZIP(), []int{15}
}

func (x *DeletePosterResponse) GetInfo() *Poster {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_good_mw_v1_device_poster_poster_proto protoreflect.FileDescriptor

var file_npool_good_mw_v1_device_poster_poster_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x6d, 0x77, 0x2f,
	0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x2f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x67,
	0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a,
	0x1e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xd3, 0x01, 0x0a, 0x09, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a,
	0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x04, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x42, 0x05,
	0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x82, 0x02, 0x0a, 0x06, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61,
	0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x5a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xf2, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x3a, 0x0a, 0x0a, 0x50, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xa8, 0x02, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x2c, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x32,
	0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x12, 0x40, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x48, 0x02, 0x52, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x44, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x0d, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44,
	0x73, 0x22, 0x56, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x54, 0x0a, 0x14, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3c, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x56, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x54, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3c, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x28, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x51, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x80, 0x01, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3d, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x6a, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x05, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x58, 0x0a, 0x17, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x22, 0x2e, 0x0a, 0x18, 0x45, 0x78, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x56, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x54, 0x0a, 0x14, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x32, 0x90, 0x06, 0x0a, 0x0a, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x12, 0x7f, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x12, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x7f, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x76, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8b, 0x01, 0x0a, 0x10, 0x45, 0x78, 0x69, 0x73, 0x74, 0x50,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x39, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x50, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x41, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67,
	0x6f, 0x6f, 0x64, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_good_mw_v1_device_poster_poster_proto_rawDescOnce sync.Once
	file_npool_good_mw_v1_device_poster_poster_proto_rawDescData = file_npool_good_mw_v1_device_poster_poster_proto_rawDesc
)

func file_npool_good_mw_v1_device_poster_poster_proto_rawDescGZIP() []byte {
	file_npool_good_mw_v1_device_poster_poster_proto_rawDescOnce.Do(func() {
		file_npool_good_mw_v1_device_poster_poster_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_good_mw_v1_device_poster_poster_proto_rawDescData)
	})
	return file_npool_good_mw_v1_device_poster_poster_proto_rawDescData
}

var file_npool_good_mw_v1_device_poster_poster_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_npool_good_mw_v1_device_poster_poster_proto_goTypes = []interface{}{
	(*PosterReq)(nil),                // 0: good.middleware.device.poster.v1.PosterReq
	(*Poster)(nil),                   // 1: good.middleware.device.poster.v1.Poster
	(*PosterInfo)(nil),               // 2: good.middleware.device.poster.v1.PosterInfo
	(*Conds)(nil),                    // 3: good.middleware.device.poster.v1.Conds
	(*CreatePosterRequest)(nil),      // 4: good.middleware.device.poster.v1.CreatePosterRequest
	(*CreatePosterResponse)(nil),     // 5: good.middleware.device.poster.v1.CreatePosterResponse
	(*UpdatePosterRequest)(nil),      // 6: good.middleware.device.poster.v1.UpdatePosterRequest
	(*UpdatePosterResponse)(nil),     // 7: good.middleware.device.poster.v1.UpdatePosterResponse
	(*GetPosterRequest)(nil),         // 8: good.middleware.device.poster.v1.GetPosterRequest
	(*GetPosterResponse)(nil),        // 9: good.middleware.device.poster.v1.GetPosterResponse
	(*GetPostersRequest)(nil),        // 10: good.middleware.device.poster.v1.GetPostersRequest
	(*GetPostersResponse)(nil),       // 11: good.middleware.device.poster.v1.GetPostersResponse
	(*ExistPosterCondsRequest)(nil),  // 12: good.middleware.device.poster.v1.ExistPosterCondsRequest
	(*ExistPosterCondsResponse)(nil), // 13: good.middleware.device.poster.v1.ExistPosterCondsResponse
	(*DeletePosterRequest)(nil),      // 14: good.middleware.device.poster.v1.DeletePosterRequest
	(*DeletePosterResponse)(nil),     // 15: good.middleware.device.poster.v1.DeletePosterResponse
	(*v1.Uint32Val)(nil),             // 16: basetypes.v1.Uint32Val
	(*v1.StringVal)(nil),             // 17: basetypes.v1.StringVal
	(*v1.StringSliceVal)(nil),        // 18: basetypes.v1.StringSliceVal
}
var file_npool_good_mw_v1_device_poster_poster_proto_depIdxs = []int32{
	16, // 0: good.middleware.device.poster.v1.Conds.ID:type_name -> basetypes.v1.Uint32Val
	17, // 1: good.middleware.device.poster.v1.Conds.EntID:type_name -> basetypes.v1.StringVal
	17, // 2: good.middleware.device.poster.v1.Conds.DeviceTypeID:type_name -> basetypes.v1.StringVal
	18, // 3: good.middleware.device.poster.v1.Conds.DeviceTypeIDs:type_name -> basetypes.v1.StringSliceVal
	0,  // 4: good.middleware.device.poster.v1.CreatePosterRequest.Info:type_name -> good.middleware.device.poster.v1.PosterReq
	1,  // 5: good.middleware.device.poster.v1.CreatePosterResponse.Info:type_name -> good.middleware.device.poster.v1.Poster
	0,  // 6: good.middleware.device.poster.v1.UpdatePosterRequest.Info:type_name -> good.middleware.device.poster.v1.PosterReq
	1,  // 7: good.middleware.device.poster.v1.UpdatePosterResponse.Info:type_name -> good.middleware.device.poster.v1.Poster
	1,  // 8: good.middleware.device.poster.v1.GetPosterResponse.Info:type_name -> good.middleware.device.poster.v1.Poster
	3,  // 9: good.middleware.device.poster.v1.GetPostersRequest.Conds:type_name -> good.middleware.device.poster.v1.Conds
	1,  // 10: good.middleware.device.poster.v1.GetPostersResponse.Infos:type_name -> good.middleware.device.poster.v1.Poster
	3,  // 11: good.middleware.device.poster.v1.ExistPosterCondsRequest.Conds:type_name -> good.middleware.device.poster.v1.Conds
	0,  // 12: good.middleware.device.poster.v1.DeletePosterRequest.Info:type_name -> good.middleware.device.poster.v1.PosterReq
	1,  // 13: good.middleware.device.poster.v1.DeletePosterResponse.Info:type_name -> good.middleware.device.poster.v1.Poster
	4,  // 14: good.middleware.device.poster.v1.Middleware.CreatePoster:input_type -> good.middleware.device.poster.v1.CreatePosterRequest
	6,  // 15: good.middleware.device.poster.v1.Middleware.UpdatePoster:input_type -> good.middleware.device.poster.v1.UpdatePosterRequest
	8,  // 16: good.middleware.device.poster.v1.Middleware.GetPoster:input_type -> good.middleware.device.poster.v1.GetPosterRequest
	10, // 17: good.middleware.device.poster.v1.Middleware.GetPosters:input_type -> good.middleware.device.poster.v1.GetPostersRequest
	12, // 18: good.middleware.device.poster.v1.Middleware.ExistPosterConds:input_type -> good.middleware.device.poster.v1.ExistPosterCondsRequest
	14, // 19: good.middleware.device.poster.v1.Middleware.DeletePoster:input_type -> good.middleware.device.poster.v1.DeletePosterRequest
	5,  // 20: good.middleware.device.poster.v1.Middleware.CreatePoster:output_type -> good.middleware.device.poster.v1.CreatePosterResponse
	7,  // 21: good.middleware.device.poster.v1.Middleware.UpdatePoster:output_type -> good.middleware.device.poster.v1.UpdatePosterResponse
	9,  // 22: good.middleware.device.poster.v1.Middleware.GetPoster:output_type -> good.middleware.device.poster.v1.GetPosterResponse
	11, // 23: good.middleware.device.poster.v1.Middleware.GetPosters:output_type -> good.middleware.device.poster.v1.GetPostersResponse
	13, // 24: good.middleware.device.poster.v1.Middleware.ExistPosterConds:output_type -> good.middleware.device.poster.v1.ExistPosterCondsResponse
	15, // 25: good.middleware.device.poster.v1.Middleware.DeletePoster:output_type -> good.middleware.device.poster.v1.DeletePosterResponse
	20, // [20:26] is the sub-list for method output_type
	14, // [14:20] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_npool_good_mw_v1_device_poster_poster_proto_init() }
func file_npool_good_mw_v1_device_poster_poster_proto_init() {
	if File_npool_good_mw_v1_device_poster_poster_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_good_mw_v1_device_poster_poster_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PosterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_device_poster_poster_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Poster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_device_poster_poster_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PosterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_device_poster_poster_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_device_poster_poster_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePosterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_device_poster_poster_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePosterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_device_poster_poster_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePosterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_device_poster_poster_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePosterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_device_poster_poster_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPosterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_device_poster_poster_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPosterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_device_poster_poster_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPostersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_device_poster_poster_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPostersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_device_poster_poster_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistPosterCondsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_device_poster_poster_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistPosterCondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_device_poster_poster_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePosterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_device_poster_poster_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePosterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_good_mw_v1_device_poster_poster_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_npool_good_mw_v1_device_poster_poster_proto_msgTypes[3].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_good_mw_v1_device_poster_poster_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_good_mw_v1_device_poster_poster_proto_goTypes,
		DependencyIndexes: file_npool_good_mw_v1_device_poster_poster_proto_depIdxs,
		MessageInfos:      file_npool_good_mw_v1_device_poster_poster_proto_msgTypes,
	}.Build()
	File_npool_good_mw_v1_device_poster_poster_proto = out.File
	file_npool_good_mw_v1_device_poster_poster_proto_rawDesc = nil
	file_npool_good_mw_v1_device_poster_poster_proto_goTypes = nil
	file_npool_good_mw_v1_device_poster_poster_proto_depIdxs = nil
}
