// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/good/mw/v1/good/coin/coin.proto

package coin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
	CreateGoodCoin(ctx context.Context, in *CreateGoodCoinRequest, opts ...grpc.CallOption) (*CreateGoodCoinResponse, error)
	UpdateGoodCoin(ctx context.Context, in *UpdateGoodCoinRequest, opts ...grpc.CallOption) (*UpdateGoodCoinResponse, error)
	GetGoodCoin(ctx context.Context, in *GetGoodCoinRequest, opts ...grpc.CallOption) (*GetGoodCoinResponse, error)
	GetGoodCoins(ctx context.Context, in *GetGoodCoinsRequest, opts ...grpc.CallOption) (*GetGoodCoinsResponse, error)
	ExistGoodCoinConds(ctx context.Context, in *ExistGoodCoinCondsRequest, opts ...grpc.CallOption) (*ExistGoodCoinCondsResponse, error)
	DeleteGoodCoin(ctx context.Context, in *DeleteGoodCoinRequest, opts ...grpc.CallOption) (*DeleteGoodCoinResponse, error)
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) CreateGoodCoin(ctx context.Context, in *CreateGoodCoinRequest, opts ...grpc.CallOption) (*CreateGoodCoinResponse, error) {
	out := new(CreateGoodCoinResponse)
	err := c.cc.Invoke(ctx, "/good.middleware.good1.coin.v1.Middleware/CreateGoodCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) UpdateGoodCoin(ctx context.Context, in *UpdateGoodCoinRequest, opts ...grpc.CallOption) (*UpdateGoodCoinResponse, error) {
	out := new(UpdateGoodCoinResponse)
	err := c.cc.Invoke(ctx, "/good.middleware.good1.coin.v1.Middleware/UpdateGoodCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetGoodCoin(ctx context.Context, in *GetGoodCoinRequest, opts ...grpc.CallOption) (*GetGoodCoinResponse, error) {
	out := new(GetGoodCoinResponse)
	err := c.cc.Invoke(ctx, "/good.middleware.good1.coin.v1.Middleware/GetGoodCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetGoodCoins(ctx context.Context, in *GetGoodCoinsRequest, opts ...grpc.CallOption) (*GetGoodCoinsResponse, error) {
	out := new(GetGoodCoinsResponse)
	err := c.cc.Invoke(ctx, "/good.middleware.good1.coin.v1.Middleware/GetGoodCoins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ExistGoodCoinConds(ctx context.Context, in *ExistGoodCoinCondsRequest, opts ...grpc.CallOption) (*ExistGoodCoinCondsResponse, error) {
	out := new(ExistGoodCoinCondsResponse)
	err := c.cc.Invoke(ctx, "/good.middleware.good1.coin.v1.Middleware/ExistGoodCoinConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) DeleteGoodCoin(ctx context.Context, in *DeleteGoodCoinRequest, opts ...grpc.CallOption) (*DeleteGoodCoinResponse, error) {
	out := new(DeleteGoodCoinResponse)
	err := c.cc.Invoke(ctx, "/good.middleware.good1.coin.v1.Middleware/DeleteGoodCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
	CreateGoodCoin(context.Context, *CreateGoodCoinRequest) (*CreateGoodCoinResponse, error)
	UpdateGoodCoin(context.Context, *UpdateGoodCoinRequest) (*UpdateGoodCoinResponse, error)
	GetGoodCoin(context.Context, *GetGoodCoinRequest) (*GetGoodCoinResponse, error)
	GetGoodCoins(context.Context, *GetGoodCoinsRequest) (*GetGoodCoinsResponse, error)
	ExistGoodCoinConds(context.Context, *ExistGoodCoinCondsRequest) (*ExistGoodCoinCondsResponse, error)
	DeleteGoodCoin(context.Context, *DeleteGoodCoinRequest) (*DeleteGoodCoinResponse, error)
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) CreateGoodCoin(context.Context, *CreateGoodCoinRequest) (*CreateGoodCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGoodCoin not implemented")
}
func (UnimplementedMiddlewareServer) UpdateGoodCoin(context.Context, *UpdateGoodCoinRequest) (*UpdateGoodCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGoodCoin not implemented")
}
func (UnimplementedMiddlewareServer) GetGoodCoin(context.Context, *GetGoodCoinRequest) (*GetGoodCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodCoin not implemented")
}
func (UnimplementedMiddlewareServer) GetGoodCoins(context.Context, *GetGoodCoinsRequest) (*GetGoodCoinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodCoins not implemented")
}
func (UnimplementedMiddlewareServer) ExistGoodCoinConds(context.Context, *ExistGoodCoinCondsRequest) (*ExistGoodCoinCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistGoodCoinConds not implemented")
}
func (UnimplementedMiddlewareServer) DeleteGoodCoin(context.Context, *DeleteGoodCoinRequest) (*DeleteGoodCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGoodCoin not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_CreateGoodCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGoodCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateGoodCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.middleware.good1.coin.v1.Middleware/CreateGoodCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateGoodCoin(ctx, req.(*CreateGoodCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_UpdateGoodCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGoodCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).UpdateGoodCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.middleware.good1.coin.v1.Middleware/UpdateGoodCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).UpdateGoodCoin(ctx, req.(*UpdateGoodCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetGoodCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoodCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetGoodCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.middleware.good1.coin.v1.Middleware/GetGoodCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetGoodCoin(ctx, req.(*GetGoodCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetGoodCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoodCoinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetGoodCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.middleware.good1.coin.v1.Middleware/GetGoodCoins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetGoodCoins(ctx, req.(*GetGoodCoinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ExistGoodCoinConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistGoodCoinCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ExistGoodCoinConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.middleware.good1.coin.v1.Middleware/ExistGoodCoinConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ExistGoodCoinConds(ctx, req.(*ExistGoodCoinCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_DeleteGoodCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGoodCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).DeleteGoodCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.middleware.good1.coin.v1.Middleware/DeleteGoodCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).DeleteGoodCoin(ctx, req.(*DeleteGoodCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "good.middleware.good1.coin.v1.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGoodCoin",
			Handler:    _Middleware_CreateGoodCoin_Handler,
		},
		{
			MethodName: "UpdateGoodCoin",
			Handler:    _Middleware_UpdateGoodCoin_Handler,
		},
		{
			MethodName: "GetGoodCoin",
			Handler:    _Middleware_GetGoodCoin_Handler,
		},
		{
			MethodName: "GetGoodCoins",
			Handler:    _Middleware_GetGoodCoins_Handler,
		},
		{
			MethodName: "ExistGoodCoinConds",
			Handler:    _Middleware_ExistGoodCoinConds_Handler,
		},
		{
			MethodName: "DeleteGoodCoin",
			Handler:    _Middleware_DeleteGoodCoin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/good/mw/v1/good/coin/coin.proto",
}
