// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.18.1
// source: npool/good/mw/v1/good/coin/coin.proto

package coin

import (
	v1 "github.com/NpoolPlatform/message/npool/basetypes/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GoodCoinReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         *uint32 `protobuf:"varint,9,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID      *string `protobuf:"bytes,10,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	GoodID     *string `protobuf:"bytes,30,opt,name=GoodID,proto3,oneof" json:"GoodID,omitempty"`
	CoinTypeID *string `protobuf:"bytes,40,opt,name=CoinTypeID,proto3,oneof" json:"CoinTypeID,omitempty"`
	Main       *bool   `protobuf:"varint,50,opt,name=Main,proto3,oneof" json:"Main,omitempty"`
	Index      *int32  `protobuf:"varint,60,opt,name=Index,proto3,oneof" json:"Index,omitempty"`
}

func (x *GoodCoinReq) Reset() {
	*x = GoodCoinReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_good_coin_coin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodCoinReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodCoinReq) ProtoMessage() {}

func (x *GoodCoinReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_good_coin_coin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodCoinReq.ProtoReflect.Descriptor instead.
func (*GoodCoinReq) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_good_coin_coin_proto_rawDescGZIP(), []int{0}
}

func (x *GoodCoinReq) GetID() uint32 {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return 0
}

func (x *GoodCoinReq) GetEntID() string {
	if x != nil && x.EntID != nil {
		return *x.EntID
	}
	return ""
}

func (x *GoodCoinReq) GetGoodID() string {
	if x != nil && x.GoodID != nil {
		return *x.GoodID
	}
	return ""
}

func (x *GoodCoinReq) GetCoinTypeID() string {
	if x != nil && x.CoinTypeID != nil {
		return *x.CoinTypeID
	}
	return ""
}

func (x *GoodCoinReq) GetMain() bool {
	if x != nil && x.Main != nil {
		return *x.Main
	}
	return false
}

func (x *GoodCoinReq) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

type GoodCoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: sql:"id"
	ID uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty" sql:"id"`
	// @inject_tag: sql:"ent_id"
	EntID string `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty" sql:"ent_id"`
	// @inject_tag: sql:"good_id"
	GoodID string `protobuf:"bytes,30,opt,name=GoodID,proto3" json:"GoodID,omitempty" sql:"good_id"`
	// @inject_tag: sql:"good_name"
	GoodName string `protobuf:"bytes,40,opt,name=GoodName,proto3" json:"GoodName,omitempty" sql:"good_name"`
	// @inject_tag: sql:"main"
	Main bool `protobuf:"varint,50,opt,name=Main,proto3" json:"Main,omitempty" sql:"main"`
	// @inject_tag: sql:"index"
	Index int32 `protobuf:"varint,60,opt,name=Index,proto3" json:"Index,omitempty" sql:"index"`
	// @inject_tag: sql:"created_at"
	CreatedAt uint32 `protobuf:"varint,1000,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
	// @inject_tag: sql:"updated_at"
	UpdatedAt uint32 `protobuf:"varint,1010,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty" sql:"updated_at"`
}

func (x *GoodCoin) Reset() {
	*x = GoodCoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_good_coin_coin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodCoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodCoin) ProtoMessage() {}

func (x *GoodCoin) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_good_coin_coin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodCoin.ProtoReflect.Descriptor instead.
func (*GoodCoin) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_good_coin_coin_proto_rawDescGZIP(), []int{1}
}

func (x *GoodCoin) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *GoodCoin) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *GoodCoin) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *GoodCoin) GetGoodName() string {
	if x != nil {
		return x.GoodName
	}
	return ""
}

func (x *GoodCoin) GetMain() bool {
	if x != nil {
		return x.Main
	}
	return false
}

func (x *GoodCoin) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *GoodCoin) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *GoodCoin) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      *v1.Uint32Val      `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID   *v1.StringVal      `protobuf:"bytes,30,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	GoodID  *v1.StringVal      `protobuf:"bytes,40,opt,name=GoodID,proto3,oneof" json:"GoodID,omitempty"`
	GoodIDs *v1.StringSliceVal `protobuf:"bytes,50,opt,name=GoodIDs,proto3,oneof" json:"GoodIDs,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_good_coin_coin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_good_coin_coin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_good_coin_coin_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *v1.Uint32Val {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetEntID() *v1.StringVal {
	if x != nil {
		return x.EntID
	}
	return nil
}

func (x *Conds) GetGoodID() *v1.StringVal {
	if x != nil {
		return x.GoodID
	}
	return nil
}

func (x *Conds) GetGoodIDs() *v1.StringSliceVal {
	if x != nil {
		return x.GoodIDs
	}
	return nil
}

type CreateGoodCoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *GoodCoinReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateGoodCoinRequest) Reset() {
	*x = CreateGoodCoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_good_coin_coin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGoodCoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGoodCoinRequest) ProtoMessage() {}

func (x *CreateGoodCoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_good_coin_coin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGoodCoinRequest.ProtoReflect.Descriptor instead.
func (*CreateGoodCoinRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_good_coin_coin_proto_rawDescGZIP(), []int{3}
}

func (x *CreateGoodCoinRequest) GetInfo() *GoodCoinReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateGoodCoinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *GoodCoin `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateGoodCoinResponse) Reset() {
	*x = CreateGoodCoinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_good_coin_coin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGoodCoinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGoodCoinResponse) ProtoMessage() {}

func (x *CreateGoodCoinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_good_coin_coin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGoodCoinResponse.ProtoReflect.Descriptor instead.
func (*CreateGoodCoinResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_good_coin_coin_proto_rawDescGZIP(), []int{4}
}

func (x *CreateGoodCoinResponse) GetInfo() *GoodCoin {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateGoodCoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *GoodCoinReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateGoodCoinRequest) Reset() {
	*x = UpdateGoodCoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_good_coin_coin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGoodCoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGoodCoinRequest) ProtoMessage() {}

func (x *UpdateGoodCoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_good_coin_coin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGoodCoinRequest.ProtoReflect.Descriptor instead.
func (*UpdateGoodCoinRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_good_coin_coin_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateGoodCoinRequest) GetInfo() *GoodCoinReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateGoodCoinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *GoodCoin `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateGoodCoinResponse) Reset() {
	*x = UpdateGoodCoinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_good_coin_coin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGoodCoinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGoodCoinResponse) ProtoMessage() {}

func (x *UpdateGoodCoinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_good_coin_coin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGoodCoinResponse.ProtoReflect.Descriptor instead.
func (*UpdateGoodCoinResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_good_coin_coin_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateGoodCoinResponse) GetInfo() *GoodCoin {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetGoodCoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntID string `protobuf:"bytes,10,opt,name=EntID,proto3" json:"EntID,omitempty"`
}

func (x *GetGoodCoinRequest) Reset() {
	*x = GetGoodCoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_good_coin_coin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodCoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodCoinRequest) ProtoMessage() {}

func (x *GetGoodCoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_good_coin_coin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodCoinRequest.ProtoReflect.Descriptor instead.
func (*GetGoodCoinRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_good_coin_coin_proto_rawDescGZIP(), []int{7}
}

func (x *GetGoodCoinRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

type GetGoodCoinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *GoodCoin `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetGoodCoinResponse) Reset() {
	*x = GetGoodCoinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_good_coin_coin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodCoinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodCoinResponse) ProtoMessage() {}

func (x *GetGoodCoinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_good_coin_coin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodCoinResponse.ProtoReflect.Descriptor instead.
func (*GetGoodCoinResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_good_coin_coin_proto_rawDescGZIP(), []int{8}
}

func (x *GetGoodCoinResponse) GetInfo() *GoodCoin {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetGoodCoinsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetGoodCoinsRequest) Reset() {
	*x = GetGoodCoinsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_good_coin_coin_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodCoinsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodCoinsRequest) ProtoMessage() {}

func (x *GetGoodCoinsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_good_coin_coin_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodCoinsRequest.ProtoReflect.Descriptor instead.
func (*GetGoodCoinsRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_good_coin_coin_proto_rawDescGZIP(), []int{9}
}

func (x *GetGoodCoinsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetGoodCoinsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetGoodCoinsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetGoodCoinsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*GoodCoin `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32      `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetGoodCoinsResponse) Reset() {
	*x = GetGoodCoinsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_good_coin_coin_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodCoinsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodCoinsResponse) ProtoMessage() {}

func (x *GetGoodCoinsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_good_coin_coin_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodCoinsResponse.ProtoReflect.Descriptor instead.
func (*GetGoodCoinsResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_good_coin_coin_proto_rawDescGZIP(), []int{10}
}

func (x *GetGoodCoinsResponse) GetInfos() []*GoodCoin {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetGoodCoinsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ExistGoodCoinCondsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *ExistGoodCoinCondsRequest) Reset() {
	*x = ExistGoodCoinCondsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_good_coin_coin_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistGoodCoinCondsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistGoodCoinCondsRequest) ProtoMessage() {}

func (x *ExistGoodCoinCondsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_good_coin_coin_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistGoodCoinCondsRequest.ProtoReflect.Descriptor instead.
func (*ExistGoodCoinCondsRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_good_coin_coin_proto_rawDescGZIP(), []int{11}
}

func (x *ExistGoodCoinCondsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type ExistGoodCoinCondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistGoodCoinCondsResponse) Reset() {
	*x = ExistGoodCoinCondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_good_coin_coin_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistGoodCoinCondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistGoodCoinCondsResponse) ProtoMessage() {}

func (x *ExistGoodCoinCondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_good_coin_coin_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistGoodCoinCondsResponse.ProtoReflect.Descriptor instead.
func (*ExistGoodCoinCondsResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_good_coin_coin_proto_rawDescGZIP(), []int{12}
}

func (x *ExistGoodCoinCondsResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type DeleteGoodCoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *GoodCoinReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteGoodCoinRequest) Reset() {
	*x = DeleteGoodCoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_good_coin_coin_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGoodCoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGoodCoinRequest) ProtoMessage() {}

func (x *DeleteGoodCoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_good_coin_coin_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGoodCoinRequest.ProtoReflect.Descriptor instead.
func (*DeleteGoodCoinRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_good_coin_coin_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteGoodCoinRequest) GetInfo() *GoodCoinReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type DeleteGoodCoinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *GoodCoin `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteGoodCoinResponse) Reset() {
	*x = DeleteGoodCoinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_good_coin_coin_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGoodCoinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGoodCoinResponse) ProtoMessage() {}

func (x *DeleteGoodCoinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_good_coin_coin_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGoodCoinResponse.ProtoReflect.Descriptor instead.
func (*DeleteGoodCoinResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_good_coin_coin_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteGoodCoinResponse) GetInfo() *GoodCoin {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_good_mw_v1_good_coin_coin_proto protoreflect.FileDescriptor

var file_npool_good_mw_v1_good_coin_coin_proto_rawDesc = []byte{
	0x0a, 0x25, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x6d, 0x77, 0x2f,
	0x76, 0x31, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x63, 0x6f, 0x69,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf1, 0x01, 0x0a, 0x0b, 0x47, 0x6f, 0x6f, 0x64, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x45,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x45, 0x6e,
	0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44,
	0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x4d, 0x61, 0x69, 0x6e,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x04, 0x4d, 0x61, 0x69, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x05, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03,
	0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x43, 0x6f, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x4d, 0x61, 0x69, 0x6e,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xcc, 0x01, 0x0a, 0x08, 0x47,
	0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47,
	0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x61, 0x69, 0x6e, 0x18, 0x32, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x4d, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x3c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xf2, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x84, 0x02, 0x0a, 0x05, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x32, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x05, 0x45, 0x6e, 0x74,
	0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x02,
	0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x07, 0x47,
	0x6f, 0x6f, 0x64, 0x49, 0x44, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x07, 0x47, 0x6f,
	0x6f, 0x64, 0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x47, 0x6f,
	0x6f, 0x64, 0x49, 0x44, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x73,
	0x22, 0x57, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e,
	0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x55, 0x0a, 0x16, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x57, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e,
	0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x55, 0x0a, 0x16, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x2a, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x52, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x7f, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0x6b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69,
	0x6e, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x57,
	0x0a, 0x19, 0x45, 0x78, 0x69, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x05, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x31, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x30, 0x0a, 0x1a, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x57, 0x0a, 0x15, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x55, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64,
	0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x31, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x90, 0x06, 0x0a, 0x0a, 0x4d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x12, 0x7f, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x34, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x31, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x0e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x34, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x31, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x31, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f,
	0x64, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x79, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69,
	0x6e, 0x73, 0x12, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f,
	0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8b, 0x01,
	0x0a, 0x12, 0x45, 0x78, 0x69, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f,
	0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x0e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x34, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3d, 0x5a, 0x3b,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x6d, 0x77, 0x2f, 0x76,
	0x31, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_npool_good_mw_v1_good_coin_coin_proto_rawDescOnce sync.Once
	file_npool_good_mw_v1_good_coin_coin_proto_rawDescData = file_npool_good_mw_v1_good_coin_coin_proto_rawDesc
)

func file_npool_good_mw_v1_good_coin_coin_proto_rawDescGZIP() []byte {
	file_npool_good_mw_v1_good_coin_coin_proto_rawDescOnce.Do(func() {
		file_npool_good_mw_v1_good_coin_coin_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_good_mw_v1_good_coin_coin_proto_rawDescData)
	})
	return file_npool_good_mw_v1_good_coin_coin_proto_rawDescData
}

var file_npool_good_mw_v1_good_coin_coin_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_npool_good_mw_v1_good_coin_coin_proto_goTypes = []interface{}{
	(*GoodCoinReq)(nil),                // 0: good.middleware.good1.coin.v1.GoodCoinReq
	(*GoodCoin)(nil),                   // 1: good.middleware.good1.coin.v1.GoodCoin
	(*Conds)(nil),                      // 2: good.middleware.good1.coin.v1.Conds
	(*CreateGoodCoinRequest)(nil),      // 3: good.middleware.good1.coin.v1.CreateGoodCoinRequest
	(*CreateGoodCoinResponse)(nil),     // 4: good.middleware.good1.coin.v1.CreateGoodCoinResponse
	(*UpdateGoodCoinRequest)(nil),      // 5: good.middleware.good1.coin.v1.UpdateGoodCoinRequest
	(*UpdateGoodCoinResponse)(nil),     // 6: good.middleware.good1.coin.v1.UpdateGoodCoinResponse
	(*GetGoodCoinRequest)(nil),         // 7: good.middleware.good1.coin.v1.GetGoodCoinRequest
	(*GetGoodCoinResponse)(nil),        // 8: good.middleware.good1.coin.v1.GetGoodCoinResponse
	(*GetGoodCoinsRequest)(nil),        // 9: good.middleware.good1.coin.v1.GetGoodCoinsRequest
	(*GetGoodCoinsResponse)(nil),       // 10: good.middleware.good1.coin.v1.GetGoodCoinsResponse
	(*ExistGoodCoinCondsRequest)(nil),  // 11: good.middleware.good1.coin.v1.ExistGoodCoinCondsRequest
	(*ExistGoodCoinCondsResponse)(nil), // 12: good.middleware.good1.coin.v1.ExistGoodCoinCondsResponse
	(*DeleteGoodCoinRequest)(nil),      // 13: good.middleware.good1.coin.v1.DeleteGoodCoinRequest
	(*DeleteGoodCoinResponse)(nil),     // 14: good.middleware.good1.coin.v1.DeleteGoodCoinResponse
	(*v1.Uint32Val)(nil),               // 15: basetypes.v1.Uint32Val
	(*v1.StringVal)(nil),               // 16: basetypes.v1.StringVal
	(*v1.StringSliceVal)(nil),          // 17: basetypes.v1.StringSliceVal
}
var file_npool_good_mw_v1_good_coin_coin_proto_depIdxs = []int32{
	15, // 0: good.middleware.good1.coin.v1.Conds.ID:type_name -> basetypes.v1.Uint32Val
	16, // 1: good.middleware.good1.coin.v1.Conds.EntID:type_name -> basetypes.v1.StringVal
	16, // 2: good.middleware.good1.coin.v1.Conds.GoodID:type_name -> basetypes.v1.StringVal
	17, // 3: good.middleware.good1.coin.v1.Conds.GoodIDs:type_name -> basetypes.v1.StringSliceVal
	0,  // 4: good.middleware.good1.coin.v1.CreateGoodCoinRequest.Info:type_name -> good.middleware.good1.coin.v1.GoodCoinReq
	1,  // 5: good.middleware.good1.coin.v1.CreateGoodCoinResponse.Info:type_name -> good.middleware.good1.coin.v1.GoodCoin
	0,  // 6: good.middleware.good1.coin.v1.UpdateGoodCoinRequest.Info:type_name -> good.middleware.good1.coin.v1.GoodCoinReq
	1,  // 7: good.middleware.good1.coin.v1.UpdateGoodCoinResponse.Info:type_name -> good.middleware.good1.coin.v1.GoodCoin
	1,  // 8: good.middleware.good1.coin.v1.GetGoodCoinResponse.Info:type_name -> good.middleware.good1.coin.v1.GoodCoin
	2,  // 9: good.middleware.good1.coin.v1.GetGoodCoinsRequest.Conds:type_name -> good.middleware.good1.coin.v1.Conds
	1,  // 10: good.middleware.good1.coin.v1.GetGoodCoinsResponse.Infos:type_name -> good.middleware.good1.coin.v1.GoodCoin
	2,  // 11: good.middleware.good1.coin.v1.ExistGoodCoinCondsRequest.Conds:type_name -> good.middleware.good1.coin.v1.Conds
	0,  // 12: good.middleware.good1.coin.v1.DeleteGoodCoinRequest.Info:type_name -> good.middleware.good1.coin.v1.GoodCoinReq
	1,  // 13: good.middleware.good1.coin.v1.DeleteGoodCoinResponse.Info:type_name -> good.middleware.good1.coin.v1.GoodCoin
	3,  // 14: good.middleware.good1.coin.v1.Middleware.CreateGoodCoin:input_type -> good.middleware.good1.coin.v1.CreateGoodCoinRequest
	5,  // 15: good.middleware.good1.coin.v1.Middleware.UpdateGoodCoin:input_type -> good.middleware.good1.coin.v1.UpdateGoodCoinRequest
	7,  // 16: good.middleware.good1.coin.v1.Middleware.GetGoodCoin:input_type -> good.middleware.good1.coin.v1.GetGoodCoinRequest
	9,  // 17: good.middleware.good1.coin.v1.Middleware.GetGoodCoins:input_type -> good.middleware.good1.coin.v1.GetGoodCoinsRequest
	11, // 18: good.middleware.good1.coin.v1.Middleware.ExistGoodCoinConds:input_type -> good.middleware.good1.coin.v1.ExistGoodCoinCondsRequest
	13, // 19: good.middleware.good1.coin.v1.Middleware.DeleteGoodCoin:input_type -> good.middleware.good1.coin.v1.DeleteGoodCoinRequest
	4,  // 20: good.middleware.good1.coin.v1.Middleware.CreateGoodCoin:output_type -> good.middleware.good1.coin.v1.CreateGoodCoinResponse
	6,  // 21: good.middleware.good1.coin.v1.Middleware.UpdateGoodCoin:output_type -> good.middleware.good1.coin.v1.UpdateGoodCoinResponse
	8,  // 22: good.middleware.good1.coin.v1.Middleware.GetGoodCoin:output_type -> good.middleware.good1.coin.v1.GetGoodCoinResponse
	10, // 23: good.middleware.good1.coin.v1.Middleware.GetGoodCoins:output_type -> good.middleware.good1.coin.v1.GetGoodCoinsResponse
	12, // 24: good.middleware.good1.coin.v1.Middleware.ExistGoodCoinConds:output_type -> good.middleware.good1.coin.v1.ExistGoodCoinCondsResponse
	14, // 25: good.middleware.good1.coin.v1.Middleware.DeleteGoodCoin:output_type -> good.middleware.good1.coin.v1.DeleteGoodCoinResponse
	20, // [20:26] is the sub-list for method output_type
	14, // [14:20] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_npool_good_mw_v1_good_coin_coin_proto_init() }
func file_npool_good_mw_v1_good_coin_coin_proto_init() {
	if File_npool_good_mw_v1_good_coin_coin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_good_mw_v1_good_coin_coin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodCoinReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_good_coin_coin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodCoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_good_coin_coin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_good_coin_coin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGoodCoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_good_coin_coin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGoodCoinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_good_coin_coin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGoodCoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_good_coin_coin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGoodCoinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_good_coin_coin_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodCoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_good_coin_coin_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodCoinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_good_coin_coin_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodCoinsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_good_coin_coin_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodCoinsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_good_coin_coin_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistGoodCoinCondsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_good_coin_coin_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistGoodCoinCondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_good_coin_coin_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGoodCoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_good_coin_coin_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGoodCoinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_good_mw_v1_good_coin_coin_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_npool_good_mw_v1_good_coin_coin_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_good_mw_v1_good_coin_coin_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_good_mw_v1_good_coin_coin_proto_goTypes,
		DependencyIndexes: file_npool_good_mw_v1_good_coin_coin_proto_depIdxs,
		MessageInfos:      file_npool_good_mw_v1_good_coin_coin_proto_msgTypes,
	}.Build()
	File_npool_good_mw_v1_good_coin_coin_proto = out.File
	file_npool_good_mw_v1_good_coin_coin_proto_rawDesc = nil
	file_npool_good_mw_v1_good_coin_coin_proto_goTypes = nil
	file_npool_good_mw_v1_good_coin_coin_proto_depIdxs = nil
}
