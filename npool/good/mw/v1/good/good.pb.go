// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.18.1
// source: npool/good/mw/v1/good/good.proto

package good

import (
	v1 "github.com/NpoolPlatform/message/npool/basetypes/good/v1"
	v11 "github.com/NpoolPlatform/message/npool/basetypes/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GoodReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                    *string          `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	DeviceInfoID          *string          `protobuf:"bytes,20,opt,name=DeviceInfoID,proto3,oneof" json:"DeviceInfoID,omitempty"`
	DurationDays          *int32           `protobuf:"varint,30,opt,name=DurationDays,proto3,oneof" json:"DurationDays,omitempty"`
	CoinTypeID            *string          `protobuf:"bytes,40,opt,name=CoinTypeID,proto3,oneof" json:"CoinTypeID,omitempty"`
	VendorLocationID      *string          `protobuf:"bytes,60,opt,name=VendorLocationID,proto3,oneof" json:"VendorLocationID,omitempty"`
	Price                 *string          `protobuf:"bytes,70,opt,name=Price,proto3,oneof" json:"Price,omitempty"`
	BenefitType           *v1.BenefitType  `protobuf:"varint,80,opt,name=BenefitType,proto3,enum=basetypes.good.v1.BenefitType,oneof" json:"BenefitType,omitempty"`
	GoodType              *v1.GoodType     `protobuf:"varint,90,opt,name=GoodType,proto3,enum=basetypes.good.v1.GoodType,oneof" json:"GoodType,omitempty"`
	Title                 *string          `protobuf:"bytes,100,opt,name=Title,proto3,oneof" json:"Title,omitempty"`
	Unit                  *string          `protobuf:"bytes,110,opt,name=Unit,proto3,oneof" json:"Unit,omitempty"`
	UnitAmount            *int32           `protobuf:"varint,120,opt,name=UnitAmount,proto3,oneof" json:"UnitAmount,omitempty"`
	SupportCoinTypeIDs    []string         `protobuf:"bytes,130,rep,name=SupportCoinTypeIDs,proto3" json:"SupportCoinTypeIDs,omitempty"`
	DeliveryAt            *uint32          `protobuf:"varint,140,opt,name=DeliveryAt,proto3,oneof" json:"DeliveryAt,omitempty"`
	StartAt               *uint32          `protobuf:"varint,150,opt,name=StartAt,proto3,oneof" json:"StartAt,omitempty"`
	TestOnly              *bool            `protobuf:"varint,160,opt,name=TestOnly,proto3,oneof" json:"TestOnly,omitempty"`
	Total                 *string          `protobuf:"bytes,170,opt,name=Total,proto3,oneof" json:"Total,omitempty"`
	Locked                *string          `protobuf:"bytes,180,opt,name=Locked,proto3,oneof" json:"Locked,omitempty"`
	InService             *string          `protobuf:"bytes,190,opt,name=InService,proto3,oneof" json:"InService,omitempty"`
	WaitStart             *string          `protobuf:"bytes,191,opt,name=WaitStart,proto3,oneof" json:"WaitStart,omitempty"`
	Posters               []string         `protobuf:"bytes,210,rep,name=Posters,proto3" json:"Posters,omitempty"`
	Labels                []v1.GoodLabel   `protobuf:"varint,220,rep,packed,name=Labels,proto3,enum=basetypes.good.v1.GoodLabel" json:"Labels,omitempty"`
	BenefitIntervalHours  *uint32          `protobuf:"varint,230,opt,name=BenefitIntervalHours,proto3,oneof" json:"BenefitIntervalHours,omitempty"`
	UnitLockDeposit       *string          `protobuf:"bytes,240,opt,name=UnitLockDeposit,proto3,oneof" json:"UnitLockDeposit,omitempty"`
	AppLocked             *string          `protobuf:"bytes,250,opt,name=AppLocked,proto3,oneof" json:"AppLocked,omitempty"`
	RewardState           *v1.BenefitState `protobuf:"varint,260,opt,name=RewardState,proto3,enum=basetypes.good.v1.BenefitState,oneof" json:"RewardState,omitempty"`
	RewardAt              *uint32          `protobuf:"varint,270,opt,name=RewardAt,proto3,oneof" json:"RewardAt,omitempty"`
	RewardTID             *string          `protobuf:"bytes,280,opt,name=RewardTID,proto3,oneof" json:"RewardTID,omitempty"`
	NextRewardStartAmount *string          `protobuf:"bytes,290,opt,name=NextRewardStartAmount,proto3,oneof" json:"NextRewardStartAmount,omitempty"`
	RewardAmount          *string          `protobuf:"bytes,300,opt,name=RewardAmount,proto3,oneof" json:"RewardAmount,omitempty"`
	UnitRewardAmount      *string          `protobuf:"bytes,310,opt,name=UnitRewardAmount,proto3,oneof" json:"UnitRewardAmount,omitempty"`
}

func (x *GoodReq) Reset() {
	*x = GoodReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_good_good_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodReq) ProtoMessage() {}

func (x *GoodReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_good_good_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodReq.ProtoReflect.Descriptor instead.
func (*GoodReq) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_good_good_proto_rawDescGZIP(), []int{0}
}

func (x *GoodReq) GetID() string {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return ""
}

func (x *GoodReq) GetDeviceInfoID() string {
	if x != nil && x.DeviceInfoID != nil {
		return *x.DeviceInfoID
	}
	return ""
}

func (x *GoodReq) GetDurationDays() int32 {
	if x != nil && x.DurationDays != nil {
		return *x.DurationDays
	}
	return 0
}

func (x *GoodReq) GetCoinTypeID() string {
	if x != nil && x.CoinTypeID != nil {
		return *x.CoinTypeID
	}
	return ""
}

func (x *GoodReq) GetVendorLocationID() string {
	if x != nil && x.VendorLocationID != nil {
		return *x.VendorLocationID
	}
	return ""
}

func (x *GoodReq) GetPrice() string {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return ""
}

func (x *GoodReq) GetBenefitType() v1.BenefitType {
	if x != nil && x.BenefitType != nil {
		return *x.BenefitType
	}
	return v1.BenefitType(0)
}

func (x *GoodReq) GetGoodType() v1.GoodType {
	if x != nil && x.GoodType != nil {
		return *x.GoodType
	}
	return v1.GoodType(0)
}

func (x *GoodReq) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *GoodReq) GetUnit() string {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return ""
}

func (x *GoodReq) GetUnitAmount() int32 {
	if x != nil && x.UnitAmount != nil {
		return *x.UnitAmount
	}
	return 0
}

func (x *GoodReq) GetSupportCoinTypeIDs() []string {
	if x != nil {
		return x.SupportCoinTypeIDs
	}
	return nil
}

func (x *GoodReq) GetDeliveryAt() uint32 {
	if x != nil && x.DeliveryAt != nil {
		return *x.DeliveryAt
	}
	return 0
}

func (x *GoodReq) GetStartAt() uint32 {
	if x != nil && x.StartAt != nil {
		return *x.StartAt
	}
	return 0
}

func (x *GoodReq) GetTestOnly() bool {
	if x != nil && x.TestOnly != nil {
		return *x.TestOnly
	}
	return false
}

func (x *GoodReq) GetTotal() string {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return ""
}

func (x *GoodReq) GetLocked() string {
	if x != nil && x.Locked != nil {
		return *x.Locked
	}
	return ""
}

func (x *GoodReq) GetInService() string {
	if x != nil && x.InService != nil {
		return *x.InService
	}
	return ""
}

func (x *GoodReq) GetWaitStart() string {
	if x != nil && x.WaitStart != nil {
		return *x.WaitStart
	}
	return ""
}

func (x *GoodReq) GetPosters() []string {
	if x != nil {
		return x.Posters
	}
	return nil
}

func (x *GoodReq) GetLabels() []v1.GoodLabel {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *GoodReq) GetBenefitIntervalHours() uint32 {
	if x != nil && x.BenefitIntervalHours != nil {
		return *x.BenefitIntervalHours
	}
	return 0
}

func (x *GoodReq) GetUnitLockDeposit() string {
	if x != nil && x.UnitLockDeposit != nil {
		return *x.UnitLockDeposit
	}
	return ""
}

func (x *GoodReq) GetAppLocked() string {
	if x != nil && x.AppLocked != nil {
		return *x.AppLocked
	}
	return ""
}

func (x *GoodReq) GetRewardState() v1.BenefitState {
	if x != nil && x.RewardState != nil {
		return *x.RewardState
	}
	return v1.BenefitState(0)
}

func (x *GoodReq) GetRewardAt() uint32 {
	if x != nil && x.RewardAt != nil {
		return *x.RewardAt
	}
	return 0
}

func (x *GoodReq) GetRewardTID() string {
	if x != nil && x.RewardTID != nil {
		return *x.RewardTID
	}
	return ""
}

func (x *GoodReq) GetNextRewardStartAmount() string {
	if x != nil && x.NextRewardStartAmount != nil {
		return *x.NextRewardStartAmount
	}
	return ""
}

func (x *GoodReq) GetRewardAmount() string {
	if x != nil && x.RewardAmount != nil {
		return *x.RewardAmount
	}
	return ""
}

func (x *GoodReq) GetUnitRewardAmount() string {
	if x != nil && x.UnitRewardAmount != nil {
		return *x.UnitRewardAmount
	}
	return ""
}

type Good struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: sql:"id"
	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty" sql:"id"`
	// @inject_tag: sql:"device_info_id"
	DeviceInfoID string `protobuf:"bytes,20,opt,name=DeviceInfoID,proto3" json:"DeviceInfoID,omitempty" sql:"device_info_id"`
	// @inject_tag: sql:"device_type"
	DeviceType string `protobuf:"bytes,30,opt,name=DeviceType,proto3" json:"DeviceType,omitempty" sql:"device_type"`
	// @inject_tag: sql:"device_manufacturer"
	DeviceManufacturer string `protobuf:"bytes,40,opt,name=DeviceManufacturer,proto3" json:"DeviceManufacturer,omitempty" sql:"device_manufacturer"`
	// @inject_tag: sql:"device_power_comsuption"
	DevicePowerComsuption uint32 `protobuf:"varint,50,opt,name=DevicePowerComsuption,proto3" json:"DevicePowerComsuption,omitempty" sql:"device_power_comsuption"`
	// @inject_tag: sql:"device_shipment_at"
	DeviceShipmentAt uint32   `protobuf:"varint,60,opt,name=DeviceShipmentAt,proto3" json:"DeviceShipmentAt,omitempty" sql:"device_shipment_at"`
	DevicePosters    []string `protobuf:"bytes,70,rep,name=DevicePosters,proto3" json:"DevicePosters,omitempty"`
	// @inject_tag: sql:"device_posters"
	DevicePostersStr string `protobuf:"bytes,71,opt,name=DevicePostersStr,proto3" json:"DevicePostersStr,omitempty" sql:"device_posters"`
	// @inject_tag: sql:"duration_days"
	DurationDays int32 `protobuf:"varint,80,opt,name=DurationDays,proto3" json:"DurationDays,omitempty" sql:"duration_days"`
	// @inject_tag: sql:"coin_type_id"
	CoinTypeID string `protobuf:"bytes,90,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty" sql:"coin_type_id"`
	// @inject_tag: sql:"vendor_location_id"
	VendorLocationID string `protobuf:"bytes,140,opt,name=VendorLocationID,proto3" json:"VendorLocationID,omitempty" sql:"vendor_location_id"`
	// @inject_tag: sql:"vendor_location_country"
	VendorLocationCountry string `protobuf:"bytes,150,opt,name=VendorLocationCountry,proto3" json:"VendorLocationCountry,omitempty" sql:"vendor_location_country"`
	// @inject_tag: sql:"vendor_location_province"
	VendorLocationProvince string `protobuf:"bytes,160,opt,name=VendorLocationProvince,proto3" json:"VendorLocationProvince,omitempty" sql:"vendor_location_province"`
	// @inject_tag: sql:"vendor_location_city"
	VendorLocationCity string `protobuf:"bytes,170,opt,name=VendorLocationCity,proto3" json:"VendorLocationCity,omitempty" sql:"vendor_location_city"`
	// @inject_tag: sql:"vendor_location_address"
	VendorLocationAddress string `protobuf:"bytes,180,opt,name=VendorLocationAddress,proto3" json:"VendorLocationAddress,omitempty" sql:"vendor_location_address"`
	// @inject_tag: sql:"vendor_brand_name"
	VendorBrandName string `protobuf:"bytes,181,opt,name=VendorBrandName,proto3" json:"VendorBrandName,omitempty" sql:"vendor_brand_name"`
	// @inject_tag: sql:"vendor_brand_logo"
	VendorBrandLogo string      `protobuf:"bytes,182,opt,name=VendorBrandLogo,proto3" json:"VendorBrandLogo,omitempty" sql:"vendor_brand_logo"`
	GoodType        v1.GoodType `protobuf:"varint,190,opt,name=GoodType,proto3,enum=basetypes.good.v1.GoodType" json:"GoodType,omitempty"`
	// @inject_tag: sql:"good_type"
	GoodTypeStr string         `protobuf:"bytes,191,opt,name=GoodTypeStr,proto3" json:"GoodTypeStr,omitempty" sql:"good_type"`
	BenefitType v1.BenefitType `protobuf:"varint,200,opt,name=BenefitType,proto3,enum=basetypes.good.v1.BenefitType" json:"BenefitType,omitempty"`
	// @inject_tag: sql:"benefit_type"
	BenefitTypeStr string `protobuf:"bytes,201,opt,name=BenefitTypeStr,proto3" json:"BenefitTypeStr,omitempty" sql:"benefit_type"`
	// @inject_tag: sql:"price"
	Price string `protobuf:"bytes,210,opt,name=Price,proto3" json:"Price,omitempty" sql:"price"`
	// @inject_tag: sql:"title"
	Title string `protobuf:"bytes,220,opt,name=Title,proto3" json:"Title,omitempty" sql:"title"`
	// @inject_tag: sql:"unit"
	Unit string `protobuf:"bytes,230,opt,name=Unit,proto3" json:"Unit,omitempty" sql:"unit"`
	// @inject_tag: sql:"unit_amount"
	UnitAmount         int32    `protobuf:"varint,240,opt,name=UnitAmount,proto3" json:"UnitAmount,omitempty" sql:"unit_amount"`
	SupportCoinTypeIDs []string `protobuf:"bytes,250,rep,name=SupportCoinTypeIDs,proto3" json:"SupportCoinTypeIDs,omitempty"`
	// @inject_tag: sql:"support_coin_type_ids"
	SupportCoinTypeIDsStr string `protobuf:"bytes,251,opt,name=SupportCoinTypeIDsStr,proto3" json:"SupportCoinTypeIDsStr,omitempty" sql:"support_coin_type_ids"`
	// @inject_tag: sql:"test_only"
	TestOnly bool     `protobuf:"varint,260,opt,name=TestOnly,proto3" json:"TestOnly,omitempty" sql:"test_only"`
	Posters  []string `protobuf:"bytes,270,rep,name=Posters,proto3" json:"Posters,omitempty"`
	// @inject_tag: sql:"posters"
	PostersStr string         `protobuf:"bytes,271,opt,name=PostersStr,proto3" json:"PostersStr,omitempty" sql:"posters"`
	Labels     []v1.GoodLabel `protobuf:"varint,280,rep,packed,name=Labels,proto3,enum=basetypes.good.v1.GoodLabel" json:"Labels,omitempty"`
	// @inject_tag: sql:"labels"
	LabelsStr string `protobuf:"bytes,281,opt,name=LabelsStr,proto3" json:"LabelsStr,omitempty" sql:"labels"`
	// @inject_tag: sql:"likes"
	Likes uint32 `protobuf:"varint,290,opt,name=Likes,proto3" json:"Likes,omitempty" sql:"likes"`
	// @inject_tag: sql:"dislikes"
	Dislikes uint32 `protobuf:"varint,291,opt,name=Dislikes,proto3" json:"Dislikes,omitempty" sql:"dislikes"`
	// @inject_tag: sql:"score"
	Score string `protobuf:"bytes,300,opt,name=Score,proto3" json:"Score,omitempty" sql:"score"`
	// @inject_tag: sql:"score_count"
	ScoreCount uint32 `protobuf:"varint,301,opt,name=ScoreCount,proto3" json:"ScoreCount,omitempty" sql:"score_count"`
	// @inject_tag: sql:"recommend_count"
	RecommendCount uint32 `protobuf:"varint,302,opt,name=RecommendCount,proto3" json:"RecommendCount,omitempty" sql:"recommend_count"`
	// @inject_tag: sql:"comment_count"
	CommentCount uint32 `protobuf:"varint,303,opt,name=CommentCount,proto3" json:"CommentCount,omitempty" sql:"comment_count"`
	// @inject_tag: sql:"good_stock_id"
	GoodStockID string `protobuf:"bytes,310,opt,name=GoodStockID,proto3" json:"GoodStockID,omitempty" sql:"good_stock_id"`
	// @inject_tag: sql:"good_total"
	GoodTotal string `protobuf:"bytes,320,opt,name=GoodTotal,proto3" json:"GoodTotal,omitempty" sql:"good_total"`
	// @inject_tag: sql:"good_locked"
	GoodLocked string `protobuf:"bytes,330,opt,name=GoodLocked,proto3" json:"GoodLocked,omitempty" sql:"good_locked"`
	// @inject_tag: sql:"good_in_service"
	GoodInService string `protobuf:"bytes,340,opt,name=GoodInService,proto3" json:"GoodInService,omitempty" sql:"good_in_service"`
	// @inject_tag: sql:"good_wait_start"
	GoodWaitStart string `protobuf:"bytes,341,opt,name=GoodWaitStart,proto3" json:"GoodWaitStart,omitempty" sql:"good_wait_start"`
	// @inject_tag: sql:"good_sold"
	GoodSold string `protobuf:"bytes,350,opt,name=GoodSold,proto3" json:"GoodSold,omitempty" sql:"good_sold"`
	// @inject_tag: sql:"delivery_at"
	DeliveryAt uint32 `protobuf:"varint,360,opt,name=DeliveryAt,proto3" json:"DeliveryAt,omitempty" sql:"delivery_at"`
	// @inject_tag: sql:"start_at"
	StartAt uint32 `protobuf:"varint,370,opt,name=StartAt,proto3" json:"StartAt,omitempty" sql:"start_at"`
	// @inject_tag: sql:"created_at"
	CreatedAt uint32 `protobuf:"varint,380,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
	// @inject_tag: sql:"updated_at"
	UpdatedAt uint32 `protobuf:"varint,390,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty" sql:"updated_at"`
	// @inject_tag: sql:"benefit_interval_hours"
	BenefitIntervalHours uint32 `protobuf:"varint,400,opt,name=BenefitIntervalHours,proto3" json:"BenefitIntervalHours,omitempty" sql:"benefit_interval_hours"`
	// @inject_tag: sql:"unit_lock_deposit"
	UnitLockDeposit string `protobuf:"bytes,410,opt,name=UnitLockDeposit,proto3" json:"UnitLockDeposit,omitempty" sql:"unit_lock_deposit"`
	// @inject_tag: sql:"good_app_locked"
	GoodAppLocked string `protobuf:"bytes,420,opt,name=GoodAppLocked,proto3" json:"GoodAppLocked,omitempty" sql:"good_app_locked"`
	// @inject_tag: sql:"reward_state"
	RewardStateStr string          `protobuf:"bytes,430,opt,name=RewardStateStr,proto3" json:"RewardStateStr,omitempty" sql:"reward_state"`
	RewardState    v1.BenefitState `protobuf:"varint,440,opt,name=RewardState,proto3,enum=basetypes.good.v1.BenefitState" json:"RewardState,omitempty"`
	// @inject_tag: sql:"last_reward_at"
	LastRewardAt uint32 `protobuf:"varint,450,opt,name=LastRewardAt,proto3" json:"LastRewardAt,omitempty" sql:"last_reward_at"`
	// @inject_tag: sql:"reward_tid"
	RewardTID string `protobuf:"bytes,460,opt,name=RewardTID,proto3" json:"RewardTID,omitempty" sql:"reward_tid"`
	// @inject_tag: sql:"next_reward_start_amount"
	NextRewardStartAmount string `protobuf:"bytes,470,opt,name=NextRewardStartAmount,proto3" json:"NextRewardStartAmount,omitempty" sql:"next_reward_start_amount"`
	// @inject_tag: sql:"last_reward_amount"
	LastRewardAmount string `protobuf:"bytes,480,opt,name=LastRewardAmount,proto3" json:"LastRewardAmount,omitempty" sql:"last_reward_amount"`
}

func (x *Good) Reset() {
	*x = Good{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_good_good_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Good) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Good) ProtoMessage() {}

func (x *Good) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_good_good_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Good.ProtoReflect.Descriptor instead.
func (*Good) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_good_good_proto_rawDescGZIP(), []int{1}
}

func (x *Good) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Good) GetDeviceInfoID() string {
	if x != nil {
		return x.DeviceInfoID
	}
	return ""
}

func (x *Good) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *Good) GetDeviceManufacturer() string {
	if x != nil {
		return x.DeviceManufacturer
	}
	return ""
}

func (x *Good) GetDevicePowerComsuption() uint32 {
	if x != nil {
		return x.DevicePowerComsuption
	}
	return 0
}

func (x *Good) GetDeviceShipmentAt() uint32 {
	if x != nil {
		return x.DeviceShipmentAt
	}
	return 0
}

func (x *Good) GetDevicePosters() []string {
	if x != nil {
		return x.DevicePosters
	}
	return nil
}

func (x *Good) GetDevicePostersStr() string {
	if x != nil {
		return x.DevicePostersStr
	}
	return ""
}

func (x *Good) GetDurationDays() int32 {
	if x != nil {
		return x.DurationDays
	}
	return 0
}

func (x *Good) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

func (x *Good) GetVendorLocationID() string {
	if x != nil {
		return x.VendorLocationID
	}
	return ""
}

func (x *Good) GetVendorLocationCountry() string {
	if x != nil {
		return x.VendorLocationCountry
	}
	return ""
}

func (x *Good) GetVendorLocationProvince() string {
	if x != nil {
		return x.VendorLocationProvince
	}
	return ""
}

func (x *Good) GetVendorLocationCity() string {
	if x != nil {
		return x.VendorLocationCity
	}
	return ""
}

func (x *Good) GetVendorLocationAddress() string {
	if x != nil {
		return x.VendorLocationAddress
	}
	return ""
}

func (x *Good) GetVendorBrandName() string {
	if x != nil {
		return x.VendorBrandName
	}
	return ""
}

func (x *Good) GetVendorBrandLogo() string {
	if x != nil {
		return x.VendorBrandLogo
	}
	return ""
}

func (x *Good) GetGoodType() v1.GoodType {
	if x != nil {
		return x.GoodType
	}
	return v1.GoodType(0)
}

func (x *Good) GetGoodTypeStr() string {
	if x != nil {
		return x.GoodTypeStr
	}
	return ""
}

func (x *Good) GetBenefitType() v1.BenefitType {
	if x != nil {
		return x.BenefitType
	}
	return v1.BenefitType(0)
}

func (x *Good) GetBenefitTypeStr() string {
	if x != nil {
		return x.BenefitTypeStr
	}
	return ""
}

func (x *Good) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *Good) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Good) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *Good) GetUnitAmount() int32 {
	if x != nil {
		return x.UnitAmount
	}
	return 0
}

func (x *Good) GetSupportCoinTypeIDs() []string {
	if x != nil {
		return x.SupportCoinTypeIDs
	}
	return nil
}

func (x *Good) GetSupportCoinTypeIDsStr() string {
	if x != nil {
		return x.SupportCoinTypeIDsStr
	}
	return ""
}

func (x *Good) GetTestOnly() bool {
	if x != nil {
		return x.TestOnly
	}
	return false
}

func (x *Good) GetPosters() []string {
	if x != nil {
		return x.Posters
	}
	return nil
}

func (x *Good) GetPostersStr() string {
	if x != nil {
		return x.PostersStr
	}
	return ""
}

func (x *Good) GetLabels() []v1.GoodLabel {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Good) GetLabelsStr() string {
	if x != nil {
		return x.LabelsStr
	}
	return ""
}

func (x *Good) GetLikes() uint32 {
	if x != nil {
		return x.Likes
	}
	return 0
}

func (x *Good) GetDislikes() uint32 {
	if x != nil {
		return x.Dislikes
	}
	return 0
}

func (x *Good) GetScore() string {
	if x != nil {
		return x.Score
	}
	return ""
}

func (x *Good) GetScoreCount() uint32 {
	if x != nil {
		return x.ScoreCount
	}
	return 0
}

func (x *Good) GetRecommendCount() uint32 {
	if x != nil {
		return x.RecommendCount
	}
	return 0
}

func (x *Good) GetCommentCount() uint32 {
	if x != nil {
		return x.CommentCount
	}
	return 0
}

func (x *Good) GetGoodStockID() string {
	if x != nil {
		return x.GoodStockID
	}
	return ""
}

func (x *Good) GetGoodTotal() string {
	if x != nil {
		return x.GoodTotal
	}
	return ""
}

func (x *Good) GetGoodLocked() string {
	if x != nil {
		return x.GoodLocked
	}
	return ""
}

func (x *Good) GetGoodInService() string {
	if x != nil {
		return x.GoodInService
	}
	return ""
}

func (x *Good) GetGoodWaitStart() string {
	if x != nil {
		return x.GoodWaitStart
	}
	return ""
}

func (x *Good) GetGoodSold() string {
	if x != nil {
		return x.GoodSold
	}
	return ""
}

func (x *Good) GetDeliveryAt() uint32 {
	if x != nil {
		return x.DeliveryAt
	}
	return 0
}

func (x *Good) GetStartAt() uint32 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *Good) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Good) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Good) GetBenefitIntervalHours() uint32 {
	if x != nil {
		return x.BenefitIntervalHours
	}
	return 0
}

func (x *Good) GetUnitLockDeposit() string {
	if x != nil {
		return x.UnitLockDeposit
	}
	return ""
}

func (x *Good) GetGoodAppLocked() string {
	if x != nil {
		return x.GoodAppLocked
	}
	return ""
}

func (x *Good) GetRewardStateStr() string {
	if x != nil {
		return x.RewardStateStr
	}
	return ""
}

func (x *Good) GetRewardState() v1.BenefitState {
	if x != nil {
		return x.RewardState
	}
	return v1.BenefitState(0)
}

func (x *Good) GetLastRewardAt() uint32 {
	if x != nil {
		return x.LastRewardAt
	}
	return 0
}

func (x *Good) GetRewardTID() string {
	if x != nil {
		return x.RewardTID
	}
	return ""
}

func (x *Good) GetNextRewardStartAmount() string {
	if x != nil {
		return x.NextRewardStartAmount
	}
	return ""
}

func (x *Good) GetLastRewardAmount() string {
	if x != nil {
		return x.LastRewardAmount
	}
	return ""
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               *v11.StringVal      `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	DeviceInfoID     *v11.StringVal      `protobuf:"bytes,20,opt,name=DeviceInfoID,proto3,oneof" json:"DeviceInfoID,omitempty"`
	CoinTypeID       *v11.StringVal      `protobuf:"bytes,30,opt,name=CoinTypeID,proto3,oneof" json:"CoinTypeID,omitempty"`
	VendorLocationID *v11.StringVal      `protobuf:"bytes,40,opt,name=VendorLocationID,proto3,oneof" json:"VendorLocationID,omitempty"`
	BenefitType      *v11.Uint32Val      `protobuf:"bytes,50,opt,name=BenefitType,proto3,oneof" json:"BenefitType,omitempty"`
	GoodType         *v11.Uint32Val      `protobuf:"bytes,60,opt,name=GoodType,proto3,oneof" json:"GoodType,omitempty"`
	IDs              *v11.StringSliceVal `protobuf:"bytes,70,opt,name=IDs,proto3,oneof" json:"IDs,omitempty"`
	RewardState      *v11.Uint32Val      `protobuf:"bytes,80,opt,name=RewardState,proto3,oneof" json:"RewardState,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_good_good_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_good_good_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_good_good_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *v11.StringVal {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetDeviceInfoID() *v11.StringVal {
	if x != nil {
		return x.DeviceInfoID
	}
	return nil
}

func (x *Conds) GetCoinTypeID() *v11.StringVal {
	if x != nil {
		return x.CoinTypeID
	}
	return nil
}

func (x *Conds) GetVendorLocationID() *v11.StringVal {
	if x != nil {
		return x.VendorLocationID
	}
	return nil
}

func (x *Conds) GetBenefitType() *v11.Uint32Val {
	if x != nil {
		return x.BenefitType
	}
	return nil
}

func (x *Conds) GetGoodType() *v11.Uint32Val {
	if x != nil {
		return x.GoodType
	}
	return nil
}

func (x *Conds) GetIDs() *v11.StringSliceVal {
	if x != nil {
		return x.IDs
	}
	return nil
}

func (x *Conds) GetRewardState() *v11.Uint32Val {
	if x != nil {
		return x.RewardState
	}
	return nil
}

type CreateGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *GoodReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateGoodRequest) Reset() {
	*x = CreateGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_good_good_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGoodRequest) ProtoMessage() {}

func (x *CreateGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_good_good_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGoodRequest.ProtoReflect.Descriptor instead.
func (*CreateGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_good_good_proto_rawDescGZIP(), []int{3}
}

func (x *CreateGoodRequest) GetInfo() *GoodReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Good `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateGoodResponse) Reset() {
	*x = CreateGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_good_good_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGoodResponse) ProtoMessage() {}

func (x *CreateGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_good_good_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGoodResponse.ProtoReflect.Descriptor instead.
func (*CreateGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_good_good_proto_rawDescGZIP(), []int{4}
}

func (x *CreateGoodResponse) GetInfo() *Good {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetGoodRequest) Reset() {
	*x = GetGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_good_good_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodRequest) ProtoMessage() {}

func (x *GetGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_good_good_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodRequest.ProtoReflect.Descriptor instead.
func (*GetGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_good_good_proto_rawDescGZIP(), []int{5}
}

func (x *GetGoodRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Good `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetGoodResponse) Reset() {
	*x = GetGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_good_good_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodResponse) ProtoMessage() {}

func (x *GetGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_good_good_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodResponse.ProtoReflect.Descriptor instead.
func (*GetGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_good_good_proto_rawDescGZIP(), []int{6}
}

func (x *GetGoodResponse) GetInfo() *Good {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetGoodsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetGoodsRequest) Reset() {
	*x = GetGoodsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_good_good_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodsRequest) ProtoMessage() {}

func (x *GetGoodsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_good_good_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodsRequest.ProtoReflect.Descriptor instead.
func (*GetGoodsRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_good_good_proto_rawDescGZIP(), []int{7}
}

func (x *GetGoodsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetGoodsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetGoodsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetGoodsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Good `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32  `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetGoodsResponse) Reset() {
	*x = GetGoodsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_good_good_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodsResponse) ProtoMessage() {}

func (x *GetGoodsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_good_good_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodsResponse.ProtoReflect.Descriptor instead.
func (*GetGoodsResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_good_good_proto_rawDescGZIP(), []int{8}
}

func (x *GetGoodsResponse) GetInfos() []*Good {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetGoodsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type UpdateGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *GoodReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateGoodRequest) Reset() {
	*x = UpdateGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_good_good_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGoodRequest) ProtoMessage() {}

func (x *UpdateGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_good_good_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGoodRequest.ProtoReflect.Descriptor instead.
func (*UpdateGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_good_good_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateGoodRequest) GetInfo() *GoodReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Good `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateGoodResponse) Reset() {
	*x = UpdateGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_good_good_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGoodResponse) ProtoMessage() {}

func (x *UpdateGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_good_good_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGoodResponse.ProtoReflect.Descriptor instead.
func (*UpdateGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_good_good_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateGoodResponse) GetInfo() *Good {
	if x != nil {
		return x.Info
	}
	return nil
}

type DeleteGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *GoodReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteGoodRequest) Reset() {
	*x = DeleteGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_good_good_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGoodRequest) ProtoMessage() {}

func (x *DeleteGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_good_good_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGoodRequest.ProtoReflect.Descriptor instead.
func (*DeleteGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_good_good_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteGoodRequest) GetInfo() *GoodReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type DeleteGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Good `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteGoodResponse) Reset() {
	*x = DeleteGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mw_v1_good_good_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGoodResponse) ProtoMessage() {}

func (x *DeleteGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mw_v1_good_good_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGoodResponse.ProtoReflect.Descriptor instead.
func (*DeleteGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mw_v1_good_good_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteGoodResponse) GetInfo() *Good {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_good_mw_v1_good_good_proto protoreflect.FileDescriptor

var file_npool_good_mw_v1_good_good_proto_rawDesc = []byte{
	0x0a, 0x20, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x6d, 0x77, 0x2f,
	0x76, 0x31, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x18, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x6e, 0x70,
	0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x6e, 0x70,
	0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x67, 0x6f,
	0x6f, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xf6, 0x0c, 0x0a, 0x07, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x02, 0x52, 0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x3c, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x10, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x05, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x0b, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x06, 0x52, 0x0b, 0x42, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x08,
	0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x48, 0x07, 0x52, 0x08, 0x47,
	0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x05, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x6e, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23,
	0x0a, 0x0a, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x78, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x0a, 0x52, 0x0a, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x12, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x73, 0x18, 0x82, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x12, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x44, 0x73, 0x12, 0x24, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x41, 0x74, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0b, 0x52, 0x0a, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x07, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0c, 0x52, 0x07,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x08, 0x54, 0x65,
	0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0d, 0x52,
	0x08, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x06, 0x4c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x06, 0x4c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x09, 0x49, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x10, 0x52, 0x09, 0x49, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x09, 0x57, 0x61,
	0x69, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0xbf, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11,
	0x52, 0x09, 0x57, 0x61, 0x69, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x07, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0xd2, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x06, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0xdc, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x38, 0x0a, 0x14, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x18, 0xe6, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x12, 0x52, 0x14, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0f, 0x55, 0x6e,
	0x69, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0xf0, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x13, 0x52, 0x0f, 0x55, 0x6e, 0x69, 0x74, 0x4c, 0x6f, 0x63, 0x6b,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x09, 0x41, 0x70,
	0x70, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14,
	0x52, 0x09, 0x41, 0x70, 0x70, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x47,
	0x0a, 0x0b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x84, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x15, 0x52, 0x0b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x08, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x41, 0x74, 0x18, 0x8e, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x16, 0x52, 0x08, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x09, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x54, 0x49, 0x44, 0x18, 0x98, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x17, 0x52,
	0x09, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a,
	0x15, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xa2, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x18, 0x52,
	0x15, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0c, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xac, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x19, 0x52, 0x0c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x10, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xb6, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x1a,
	0x52, 0x10, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x44, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x54, 0x65, 0x73, 0x74, 0x4f,
	0x6e, 0x6c, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x49, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x57, 0x61, 0x69, 0x74, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x42, 0x12, 0x0a,
	0x10, 0x5f, 0x55, 0x6e, 0x69, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x41, 0x70, 0x70, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x74, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x49, 0x44, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x4e,
	0x65, 0x78, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xbf, 0x11, 0x0a, 0x04, 0x47,
	0x6f, 0x6f, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x66,
	0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x15, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x73, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x73, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a,
	0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x41,
	0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x46, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x2a, 0x0a, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x53, 0x74, 0x72, 0x18, 0x47, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x53, 0x74, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x18, 0x50, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x5a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12,
	0x2b, 0x0a, 0x10, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x15,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x16, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0xa0, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x12,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x69,
	0x74, 0x79, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x69, 0x74, 0x79, 0x12, 0x35, 0x0a,
	0x15, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x56,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x0f, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x42, 0x72,
	0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0xb5, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x29, 0x0a, 0x0f, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x6f,
	0x67, 0x6f, 0x18, 0xb6, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x38, 0x0a, 0x08, 0x47, 0x6f,
	0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x47, 0x6f, 0x6f, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x53, 0x74, 0x72, 0x18, 0xbf, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x47, 0x6f, 0x6f, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x12, 0x41, 0x0a, 0x0b, 0x42, 0x65, 0x6e, 0x65, 0x66,
	0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x42,
	0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x42, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x18, 0xc9, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x53, 0x74, 0x72, 0x12, 0x15, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0xd2, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x15, 0x0a, 0x05, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x13, 0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x18, 0xe6, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0a, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0xf0, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x55, 0x6e, 0x69,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x12, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x73, 0x18, 0xfa, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x73, 0x12, 0x35, 0x0a, 0x15, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x73, 0x53, 0x74,
	0x72, 0x18, 0xfb, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x73, 0x53, 0x74, 0x72, 0x12,
	0x1b, 0x0a, 0x08, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x84, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x19, 0x0a, 0x07,
	0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x8e, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x53, 0x74, 0x72, 0x18, 0x8f, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x53, 0x74, 0x72, 0x12, 0x35, 0x0a, 0x06, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x98, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x1d, 0x0a, 0x09, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x53, 0x74, 0x72, 0x18, 0x99, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x53, 0x74, 0x72, 0x12, 0x15,
	0x0a, 0x05, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x18, 0xa2, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x4c, 0x69, 0x6b, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x6c, 0x69, 0x6b, 0x65,
	0x73, 0x18, 0xa3, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x44, 0x69, 0x73, 0x6c, 0x69, 0x6b,
	0x65, 0x73, 0x12, 0x15, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0xac, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xad, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0e, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xae, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0xaf, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0b, 0x47, 0x6f, 0x6f, 0x64,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0xb6, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x09, 0x47,
	0x6f, 0x6f, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0xc0, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0a, 0x47, 0x6f,
	0x6f, 0x64, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0xca, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x47, 0x6f, 0x6f, 0x64, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0d, 0x47,
	0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0xd4, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x47, 0x6f, 0x6f, 0x64, 0x57, 0x61, 0x69, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x18, 0xd5, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x47, 0x6f, 0x6f, 0x64,
	0x57, 0x61, 0x69, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x08, 0x47, 0x6f, 0x6f,
	0x64, 0x53, 0x6f, 0x6c, 0x64, 0x18, 0xde, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x47, 0x6f,
	0x6f, 0x64, 0x53, 0x6f, 0x6c, 0x64, 0x12, 0x1f, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x41, 0x74, 0x18, 0xe8, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x74, 0x12, 0x19, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x74, 0x18, 0xf2, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0xfc, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x86,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x33, 0x0a, 0x14, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x90, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x0f, 0x55, 0x6e, 0x69, 0x74, 0x4c, 0x6f, 0x63,
	0x6b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x9a, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x55, 0x6e, 0x69, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x12, 0x25, 0x0a, 0x0d, 0x47, 0x6f, 0x6f, 0x64, 0x41, 0x70, 0x70, 0x4c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x18, 0xa4, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x47, 0x6f, 0x6f, 0x64, 0x41, 0x70,
	0x70, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0e, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x18, 0xae, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72,
	0x12, 0x42, 0x0a, 0x0b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18,
	0xb8, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65, 0x6e, 0x65, 0x66,
	0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x41, 0x74, 0x18, 0xc2, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x4c, 0x61, 0x73,
	0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x54, 0x49, 0x44, 0x18, 0xcc, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x15, 0x4e, 0x65, 0x78, 0x74,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0xd6, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2b, 0x0a, 0x10, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0xe0, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4c, 0x61, 0x73, 0x74,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xdf, 0x04, 0x0a,
	0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x02, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x48, 0x02, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x10, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x10, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x3e,
	0x0a, 0x0b, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x04, 0x52, 0x0b,
	0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x38,
	0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x05, 0x52, 0x08, 0x47, 0x6f, 0x6f,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x03, 0x49, 0x44, 0x73, 0x18,
	0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65,
	0x56, 0x61, 0x6c, 0x48, 0x06, 0x52, 0x03, 0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a,
	0x0b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x50, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x07, 0x52, 0x0b, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x49, 0x44, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x49, 0x44, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x44, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x42, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x47, 0x6f,
	0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x49, 0x44, 0x73, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x4a,
	0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x64, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x48, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x32, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x20, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x45, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x76, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x35, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x5e, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x4a, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47,
	0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x48, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4a, 0x0a, 0x11, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x35, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65,
	0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x48, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x32, 0x94, 0x04, 0x0a, 0x0a, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x12, 0x69, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x2b,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x07, 0x47,
	0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47,
	0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a,
	0x08, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x31, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x69, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64,
	0x12, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47,
	0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a,
	0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x2b, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x6f, 0x6f,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f,
	0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x6f,
	0x6f, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_good_mw_v1_good_good_proto_rawDescOnce sync.Once
	file_npool_good_mw_v1_good_good_proto_rawDescData = file_npool_good_mw_v1_good_good_proto_rawDesc
)

func file_npool_good_mw_v1_good_good_proto_rawDescGZIP() []byte {
	file_npool_good_mw_v1_good_good_proto_rawDescOnce.Do(func() {
		file_npool_good_mw_v1_good_good_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_good_mw_v1_good_good_proto_rawDescData)
	})
	return file_npool_good_mw_v1_good_good_proto_rawDescData
}

var file_npool_good_mw_v1_good_good_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_npool_good_mw_v1_good_good_proto_goTypes = []interface{}{
	(*GoodReq)(nil),            // 0: good.middleware.good1.v1.GoodReq
	(*Good)(nil),               // 1: good.middleware.good1.v1.Good
	(*Conds)(nil),              // 2: good.middleware.good1.v1.Conds
	(*CreateGoodRequest)(nil),  // 3: good.middleware.good1.v1.CreateGoodRequest
	(*CreateGoodResponse)(nil), // 4: good.middleware.good1.v1.CreateGoodResponse
	(*GetGoodRequest)(nil),     // 5: good.middleware.good1.v1.GetGoodRequest
	(*GetGoodResponse)(nil),    // 6: good.middleware.good1.v1.GetGoodResponse
	(*GetGoodsRequest)(nil),    // 7: good.middleware.good1.v1.GetGoodsRequest
	(*GetGoodsResponse)(nil),   // 8: good.middleware.good1.v1.GetGoodsResponse
	(*UpdateGoodRequest)(nil),  // 9: good.middleware.good1.v1.UpdateGoodRequest
	(*UpdateGoodResponse)(nil), // 10: good.middleware.good1.v1.UpdateGoodResponse
	(*DeleteGoodRequest)(nil),  // 11: good.middleware.good1.v1.DeleteGoodRequest
	(*DeleteGoodResponse)(nil), // 12: good.middleware.good1.v1.DeleteGoodResponse
	(v1.BenefitType)(0),        // 13: basetypes.good.v1.BenefitType
	(v1.GoodType)(0),           // 14: basetypes.good.v1.GoodType
	(v1.GoodLabel)(0),          // 15: basetypes.good.v1.GoodLabel
	(v1.BenefitState)(0),       // 16: basetypes.good.v1.BenefitState
	(*v11.StringVal)(nil),      // 17: basetypes.v1.StringVal
	(*v11.Uint32Val)(nil),      // 18: basetypes.v1.Uint32Val
	(*v11.StringSliceVal)(nil), // 19: basetypes.v1.StringSliceVal
}
var file_npool_good_mw_v1_good_good_proto_depIdxs = []int32{
	13, // 0: good.middleware.good1.v1.GoodReq.BenefitType:type_name -> basetypes.good.v1.BenefitType
	14, // 1: good.middleware.good1.v1.GoodReq.GoodType:type_name -> basetypes.good.v1.GoodType
	15, // 2: good.middleware.good1.v1.GoodReq.Labels:type_name -> basetypes.good.v1.GoodLabel
	16, // 3: good.middleware.good1.v1.GoodReq.RewardState:type_name -> basetypes.good.v1.BenefitState
	14, // 4: good.middleware.good1.v1.Good.GoodType:type_name -> basetypes.good.v1.GoodType
	13, // 5: good.middleware.good1.v1.Good.BenefitType:type_name -> basetypes.good.v1.BenefitType
	15, // 6: good.middleware.good1.v1.Good.Labels:type_name -> basetypes.good.v1.GoodLabel
	16, // 7: good.middleware.good1.v1.Good.RewardState:type_name -> basetypes.good.v1.BenefitState
	17, // 8: good.middleware.good1.v1.Conds.ID:type_name -> basetypes.v1.StringVal
	17, // 9: good.middleware.good1.v1.Conds.DeviceInfoID:type_name -> basetypes.v1.StringVal
	17, // 10: good.middleware.good1.v1.Conds.CoinTypeID:type_name -> basetypes.v1.StringVal
	17, // 11: good.middleware.good1.v1.Conds.VendorLocationID:type_name -> basetypes.v1.StringVal
	18, // 12: good.middleware.good1.v1.Conds.BenefitType:type_name -> basetypes.v1.Uint32Val
	18, // 13: good.middleware.good1.v1.Conds.GoodType:type_name -> basetypes.v1.Uint32Val
	19, // 14: good.middleware.good1.v1.Conds.IDs:type_name -> basetypes.v1.StringSliceVal
	18, // 15: good.middleware.good1.v1.Conds.RewardState:type_name -> basetypes.v1.Uint32Val
	0,  // 16: good.middleware.good1.v1.CreateGoodRequest.Info:type_name -> good.middleware.good1.v1.GoodReq
	1,  // 17: good.middleware.good1.v1.CreateGoodResponse.Info:type_name -> good.middleware.good1.v1.Good
	1,  // 18: good.middleware.good1.v1.GetGoodResponse.Info:type_name -> good.middleware.good1.v1.Good
	2,  // 19: good.middleware.good1.v1.GetGoodsRequest.Conds:type_name -> good.middleware.good1.v1.Conds
	1,  // 20: good.middleware.good1.v1.GetGoodsResponse.Infos:type_name -> good.middleware.good1.v1.Good
	0,  // 21: good.middleware.good1.v1.UpdateGoodRequest.Info:type_name -> good.middleware.good1.v1.GoodReq
	1,  // 22: good.middleware.good1.v1.UpdateGoodResponse.Info:type_name -> good.middleware.good1.v1.Good
	0,  // 23: good.middleware.good1.v1.DeleteGoodRequest.Info:type_name -> good.middleware.good1.v1.GoodReq
	1,  // 24: good.middleware.good1.v1.DeleteGoodResponse.Info:type_name -> good.middleware.good1.v1.Good
	3,  // 25: good.middleware.good1.v1.Middleware.CreateGood:input_type -> good.middleware.good1.v1.CreateGoodRequest
	5,  // 26: good.middleware.good1.v1.Middleware.GetGood:input_type -> good.middleware.good1.v1.GetGoodRequest
	7,  // 27: good.middleware.good1.v1.Middleware.GetGoods:input_type -> good.middleware.good1.v1.GetGoodsRequest
	9,  // 28: good.middleware.good1.v1.Middleware.UpdateGood:input_type -> good.middleware.good1.v1.UpdateGoodRequest
	11, // 29: good.middleware.good1.v1.Middleware.DeleteGood:input_type -> good.middleware.good1.v1.DeleteGoodRequest
	4,  // 30: good.middleware.good1.v1.Middleware.CreateGood:output_type -> good.middleware.good1.v1.CreateGoodResponse
	6,  // 31: good.middleware.good1.v1.Middleware.GetGood:output_type -> good.middleware.good1.v1.GetGoodResponse
	8,  // 32: good.middleware.good1.v1.Middleware.GetGoods:output_type -> good.middleware.good1.v1.GetGoodsResponse
	10, // 33: good.middleware.good1.v1.Middleware.UpdateGood:output_type -> good.middleware.good1.v1.UpdateGoodResponse
	12, // 34: good.middleware.good1.v1.Middleware.DeleteGood:output_type -> good.middleware.good1.v1.DeleteGoodResponse
	30, // [30:35] is the sub-list for method output_type
	25, // [25:30] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_npool_good_mw_v1_good_good_proto_init() }
func file_npool_good_mw_v1_good_good_proto_init() {
	if File_npool_good_mw_v1_good_good_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_good_mw_v1_good_good_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_good_good_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Good); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_good_good_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_good_good_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_good_good_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_good_good_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_good_good_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_good_good_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_good_good_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_good_good_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_good_good_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_good_good_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mw_v1_good_good_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_good_mw_v1_good_good_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_npool_good_mw_v1_good_good_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_good_mw_v1_good_good_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_good_mw_v1_good_good_proto_goTypes,
		DependencyIndexes: file_npool_good_mw_v1_good_good_proto_depIdxs,
		MessageInfos:      file_npool_good_mw_v1_good_good_proto_msgTypes,
	}.Build()
	File_npool_good_mw_v1_good_good_proto = out.File
	file_npool_good_mw_v1_good_good_proto_rawDesc = nil
	file_npool_good_mw_v1_good_good_proto_goTypes = nil
	file_npool_good_mw_v1_good_good_proto_depIdxs = nil
}
