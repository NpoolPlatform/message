// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/good/mgr/v1/recommend/recommend.proto

package recommend

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateRecommend(ctx context.Context, in *CreateRecommendRequest, opts ...grpc.CallOption) (*CreateRecommendResponse, error)
	CreateRecommends(ctx context.Context, in *CreateRecommendsRequest, opts ...grpc.CallOption) (*CreateRecommendsResponse, error)
	GetRecommend(ctx context.Context, in *GetRecommendRequest, opts ...grpc.CallOption) (*GetRecommendResponse, error)
	GetRecommendOnly(ctx context.Context, in *GetRecommendOnlyRequest, opts ...grpc.CallOption) (*GetRecommendOnlyResponse, error)
	GetRecommends(ctx context.Context, in *GetRecommendsRequest, opts ...grpc.CallOption) (*GetRecommendsResponse, error)
	ExistRecommend(ctx context.Context, in *ExistRecommendRequest, opts ...grpc.CallOption) (*ExistRecommendResponse, error)
	ExistRecommendConds(ctx context.Context, in *ExistRecommendCondsRequest, opts ...grpc.CallOption) (*ExistRecommendCondsResponse, error)
	CountRecommends(ctx context.Context, in *CountRecommendsRequest, opts ...grpc.CallOption) (*CountRecommendsResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateRecommend(ctx context.Context, in *CreateRecommendRequest, opts ...grpc.CallOption) (*CreateRecommendResponse, error) {
	out := new(CreateRecommendResponse)
	err := c.cc.Invoke(ctx, "/good.manager.recommend.v1.Manager/CreateRecommend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateRecommends(ctx context.Context, in *CreateRecommendsRequest, opts ...grpc.CallOption) (*CreateRecommendsResponse, error) {
	out := new(CreateRecommendsResponse)
	err := c.cc.Invoke(ctx, "/good.manager.recommend.v1.Manager/CreateRecommends", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetRecommend(ctx context.Context, in *GetRecommendRequest, opts ...grpc.CallOption) (*GetRecommendResponse, error) {
	out := new(GetRecommendResponse)
	err := c.cc.Invoke(ctx, "/good.manager.recommend.v1.Manager/GetRecommend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetRecommendOnly(ctx context.Context, in *GetRecommendOnlyRequest, opts ...grpc.CallOption) (*GetRecommendOnlyResponse, error) {
	out := new(GetRecommendOnlyResponse)
	err := c.cc.Invoke(ctx, "/good.manager.recommend.v1.Manager/GetRecommendOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetRecommends(ctx context.Context, in *GetRecommendsRequest, opts ...grpc.CallOption) (*GetRecommendsResponse, error) {
	out := new(GetRecommendsResponse)
	err := c.cc.Invoke(ctx, "/good.manager.recommend.v1.Manager/GetRecommends", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistRecommend(ctx context.Context, in *ExistRecommendRequest, opts ...grpc.CallOption) (*ExistRecommendResponse, error) {
	out := new(ExistRecommendResponse)
	err := c.cc.Invoke(ctx, "/good.manager.recommend.v1.Manager/ExistRecommend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistRecommendConds(ctx context.Context, in *ExistRecommendCondsRequest, opts ...grpc.CallOption) (*ExistRecommendCondsResponse, error) {
	out := new(ExistRecommendCondsResponse)
	err := c.cc.Invoke(ctx, "/good.manager.recommend.v1.Manager/ExistRecommendConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountRecommends(ctx context.Context, in *CountRecommendsRequest, opts ...grpc.CallOption) (*CountRecommendsResponse, error) {
	out := new(CountRecommendsResponse)
	err := c.cc.Invoke(ctx, "/good.manager.recommend.v1.Manager/CountRecommends", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateRecommend(context.Context, *CreateRecommendRequest) (*CreateRecommendResponse, error)
	CreateRecommends(context.Context, *CreateRecommendsRequest) (*CreateRecommendsResponse, error)
	GetRecommend(context.Context, *GetRecommendRequest) (*GetRecommendResponse, error)
	GetRecommendOnly(context.Context, *GetRecommendOnlyRequest) (*GetRecommendOnlyResponse, error)
	GetRecommends(context.Context, *GetRecommendsRequest) (*GetRecommendsResponse, error)
	ExistRecommend(context.Context, *ExistRecommendRequest) (*ExistRecommendResponse, error)
	ExistRecommendConds(context.Context, *ExistRecommendCondsRequest) (*ExistRecommendCondsResponse, error)
	CountRecommends(context.Context, *CountRecommendsRequest) (*CountRecommendsResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateRecommend(context.Context, *CreateRecommendRequest) (*CreateRecommendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecommend not implemented")
}
func (UnimplementedManagerServer) CreateRecommends(context.Context, *CreateRecommendsRequest) (*CreateRecommendsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecommends not implemented")
}
func (UnimplementedManagerServer) GetRecommend(context.Context, *GetRecommendRequest) (*GetRecommendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommend not implemented")
}
func (UnimplementedManagerServer) GetRecommendOnly(context.Context, *GetRecommendOnlyRequest) (*GetRecommendOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendOnly not implemented")
}
func (UnimplementedManagerServer) GetRecommends(context.Context, *GetRecommendsRequest) (*GetRecommendsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommends not implemented")
}
func (UnimplementedManagerServer) ExistRecommend(context.Context, *ExistRecommendRequest) (*ExistRecommendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistRecommend not implemented")
}
func (UnimplementedManagerServer) ExistRecommendConds(context.Context, *ExistRecommendCondsRequest) (*ExistRecommendCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistRecommendConds not implemented")
}
func (UnimplementedManagerServer) CountRecommends(context.Context, *CountRecommendsRequest) (*CountRecommendsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountRecommends not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateRecommend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRecommendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateRecommend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.manager.recommend.v1.Manager/CreateRecommend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateRecommend(ctx, req.(*CreateRecommendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateRecommends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRecommendsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateRecommends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.manager.recommend.v1.Manager/CreateRecommends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateRecommends(ctx, req.(*CreateRecommendsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetRecommend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetRecommend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.manager.recommend.v1.Manager/GetRecommend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetRecommend(ctx, req.(*GetRecommendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetRecommendOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetRecommendOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.manager.recommend.v1.Manager/GetRecommendOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetRecommendOnly(ctx, req.(*GetRecommendOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetRecommends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetRecommends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.manager.recommend.v1.Manager/GetRecommends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetRecommends(ctx, req.(*GetRecommendsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistRecommend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistRecommendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistRecommend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.manager.recommend.v1.Manager/ExistRecommend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistRecommend(ctx, req.(*ExistRecommendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistRecommendConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistRecommendCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistRecommendConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.manager.recommend.v1.Manager/ExistRecommendConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistRecommendConds(ctx, req.(*ExistRecommendCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountRecommends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountRecommendsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountRecommends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.manager.recommend.v1.Manager/CountRecommends",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountRecommends(ctx, req.(*CountRecommendsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "good.manager.recommend.v1.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRecommend",
			Handler:    _Manager_CreateRecommend_Handler,
		},
		{
			MethodName: "CreateRecommends",
			Handler:    _Manager_CreateRecommends_Handler,
		},
		{
			MethodName: "GetRecommend",
			Handler:    _Manager_GetRecommend_Handler,
		},
		{
			MethodName: "GetRecommendOnly",
			Handler:    _Manager_GetRecommendOnly_Handler,
		},
		{
			MethodName: "GetRecommends",
			Handler:    _Manager_GetRecommends_Handler,
		},
		{
			MethodName: "ExistRecommend",
			Handler:    _Manager_ExistRecommend_Handler,
		},
		{
			MethodName: "ExistRecommendConds",
			Handler:    _Manager_ExistRecommendConds_Handler,
		},
		{
			MethodName: "CountRecommends",
			Handler:    _Manager_CountRecommends_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/good/mgr/v1/recommend/recommend.proto",
}
