// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/good/mgr/v1/comment/comment.proto

package comment

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Manager_CreateComment_FullMethodName     = "/good.manager.comment.v1.Manager/CreateComment"
	Manager_CreateComments_FullMethodName    = "/good.manager.comment.v1.Manager/CreateComments"
	Manager_UpdateComment_FullMethodName     = "/good.manager.comment.v1.Manager/UpdateComment"
	Manager_GetComment_FullMethodName        = "/good.manager.comment.v1.Manager/GetComment"
	Manager_GetCommentOnly_FullMethodName    = "/good.manager.comment.v1.Manager/GetCommentOnly"
	Manager_GetComments_FullMethodName       = "/good.manager.comment.v1.Manager/GetComments"
	Manager_ExistComment_FullMethodName      = "/good.manager.comment.v1.Manager/ExistComment"
	Manager_ExistCommentConds_FullMethodName = "/good.manager.comment.v1.Manager/ExistCommentConds"
	Manager_CountComments_FullMethodName     = "/good.manager.comment.v1.Manager/CountComments"
	Manager_DeleteComment_FullMethodName     = "/good.manager.comment.v1.Manager/DeleteComment"
)

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CreateCommentResponse, error)
	CreateComments(ctx context.Context, in *CreateCommentsRequest, opts ...grpc.CallOption) (*CreateCommentsResponse, error)
	UpdateComment(ctx context.Context, in *UpdateCommentRequest, opts ...grpc.CallOption) (*UpdateCommentResponse, error)
	GetComment(ctx context.Context, in *GetCommentRequest, opts ...grpc.CallOption) (*GetCommentResponse, error)
	GetCommentOnly(ctx context.Context, in *GetCommentOnlyRequest, opts ...grpc.CallOption) (*GetCommentOnlyResponse, error)
	GetComments(ctx context.Context, in *GetCommentsRequest, opts ...grpc.CallOption) (*GetCommentsResponse, error)
	ExistComment(ctx context.Context, in *ExistCommentRequest, opts ...grpc.CallOption) (*ExistCommentResponse, error)
	ExistCommentConds(ctx context.Context, in *ExistCommentCondsRequest, opts ...grpc.CallOption) (*ExistCommentCondsResponse, error)
	CountComments(ctx context.Context, in *CountCommentsRequest, opts ...grpc.CallOption) (*CountCommentsResponse, error)
	DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CreateCommentResponse, error) {
	out := new(CreateCommentResponse)
	err := c.cc.Invoke(ctx, Manager_CreateComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateComments(ctx context.Context, in *CreateCommentsRequest, opts ...grpc.CallOption) (*CreateCommentsResponse, error) {
	out := new(CreateCommentsResponse)
	err := c.cc.Invoke(ctx, Manager_CreateComments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateComment(ctx context.Context, in *UpdateCommentRequest, opts ...grpc.CallOption) (*UpdateCommentResponse, error) {
	out := new(UpdateCommentResponse)
	err := c.cc.Invoke(ctx, Manager_UpdateComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetComment(ctx context.Context, in *GetCommentRequest, opts ...grpc.CallOption) (*GetCommentResponse, error) {
	out := new(GetCommentResponse)
	err := c.cc.Invoke(ctx, Manager_GetComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetCommentOnly(ctx context.Context, in *GetCommentOnlyRequest, opts ...grpc.CallOption) (*GetCommentOnlyResponse, error) {
	out := new(GetCommentOnlyResponse)
	err := c.cc.Invoke(ctx, Manager_GetCommentOnly_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetComments(ctx context.Context, in *GetCommentsRequest, opts ...grpc.CallOption) (*GetCommentsResponse, error) {
	out := new(GetCommentsResponse)
	err := c.cc.Invoke(ctx, Manager_GetComments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistComment(ctx context.Context, in *ExistCommentRequest, opts ...grpc.CallOption) (*ExistCommentResponse, error) {
	out := new(ExistCommentResponse)
	err := c.cc.Invoke(ctx, Manager_ExistComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistCommentConds(ctx context.Context, in *ExistCommentCondsRequest, opts ...grpc.CallOption) (*ExistCommentCondsResponse, error) {
	out := new(ExistCommentCondsResponse)
	err := c.cc.Invoke(ctx, Manager_ExistCommentConds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountComments(ctx context.Context, in *CountCommentsRequest, opts ...grpc.CallOption) (*CountCommentsResponse, error) {
	out := new(CountCommentsResponse)
	err := c.cc.Invoke(ctx, Manager_CountComments_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*DeleteCommentResponse, error) {
	out := new(DeleteCommentResponse)
	err := c.cc.Invoke(ctx, Manager_DeleteComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateComment(context.Context, *CreateCommentRequest) (*CreateCommentResponse, error)
	CreateComments(context.Context, *CreateCommentsRequest) (*CreateCommentsResponse, error)
	UpdateComment(context.Context, *UpdateCommentRequest) (*UpdateCommentResponse, error)
	GetComment(context.Context, *GetCommentRequest) (*GetCommentResponse, error)
	GetCommentOnly(context.Context, *GetCommentOnlyRequest) (*GetCommentOnlyResponse, error)
	GetComments(context.Context, *GetCommentsRequest) (*GetCommentsResponse, error)
	ExistComment(context.Context, *ExistCommentRequest) (*ExistCommentResponse, error)
	ExistCommentConds(context.Context, *ExistCommentCondsRequest) (*ExistCommentCondsResponse, error)
	CountComments(context.Context, *CountCommentsRequest) (*CountCommentsResponse, error)
	DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateComment(context.Context, *CreateCommentRequest) (*CreateCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedManagerServer) CreateComments(context.Context, *CreateCommentsRequest) (*CreateCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComments not implemented")
}
func (UnimplementedManagerServer) UpdateComment(context.Context, *UpdateCommentRequest) (*UpdateCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateComment not implemented")
}
func (UnimplementedManagerServer) GetComment(context.Context, *GetCommentRequest) (*GetCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComment not implemented")
}
func (UnimplementedManagerServer) GetCommentOnly(context.Context, *GetCommentOnlyRequest) (*GetCommentOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentOnly not implemented")
}
func (UnimplementedManagerServer) GetComments(context.Context, *GetCommentsRequest) (*GetCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComments not implemented")
}
func (UnimplementedManagerServer) ExistComment(context.Context, *ExistCommentRequest) (*ExistCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistComment not implemented")
}
func (UnimplementedManagerServer) ExistCommentConds(context.Context, *ExistCommentCondsRequest) (*ExistCommentCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistCommentConds not implemented")
}
func (UnimplementedManagerServer) CountComments(context.Context, *CountCommentsRequest) (*CountCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountComments not implemented")
}
func (UnimplementedManagerServer) DeleteComment(context.Context, *DeleteCommentRequest) (*DeleteCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteComment not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_CreateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateComment(ctx, req.(*CreateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_CreateComments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateComments(ctx, req.(*CreateCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_UpdateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateComment(ctx, req.(*UpdateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetComment(ctx, req.(*GetCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetCommentOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetCommentOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetCommentOnly_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetCommentOnly(ctx, req.(*GetCommentOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetComments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetComments(ctx, req.(*GetCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_ExistComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistComment(ctx, req.(*ExistCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistCommentConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistCommentCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistCommentConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_ExistCommentConds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistCommentConds(ctx, req.(*ExistCommentCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_CountComments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountComments(ctx, req.(*CountCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_DeleteComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteComment(ctx, req.(*DeleteCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "good.manager.comment.v1.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateComment",
			Handler:    _Manager_CreateComment_Handler,
		},
		{
			MethodName: "CreateComments",
			Handler:    _Manager_CreateComments_Handler,
		},
		{
			MethodName: "UpdateComment",
			Handler:    _Manager_UpdateComment_Handler,
		},
		{
			MethodName: "GetComment",
			Handler:    _Manager_GetComment_Handler,
		},
		{
			MethodName: "GetCommentOnly",
			Handler:    _Manager_GetCommentOnly_Handler,
		},
		{
			MethodName: "GetComments",
			Handler:    _Manager_GetComments_Handler,
		},
		{
			MethodName: "ExistComment",
			Handler:    _Manager_ExistComment_Handler,
		},
		{
			MethodName: "ExistCommentConds",
			Handler:    _Manager_ExistCommentConds_Handler,
		},
		{
			MethodName: "CountComments",
			Handler:    _Manager_CountComments_Handler,
		},
		{
			MethodName: "DeleteComment",
			Handler:    _Manager_DeleteComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/good/mgr/v1/comment/comment.proto",
}
