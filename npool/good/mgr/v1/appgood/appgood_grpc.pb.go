// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/good/mgr/v1/appgood/appgood.proto

package appgood

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateAppGood(ctx context.Context, in *CreateAppGoodRequest, opts ...grpc.CallOption) (*CreateAppGoodResponse, error)
	CreateAppGoods(ctx context.Context, in *CreateAppGoodsRequest, opts ...grpc.CallOption) (*CreateAppGoodsResponse, error)
	GetAppGood(ctx context.Context, in *GetAppGoodRequest, opts ...grpc.CallOption) (*GetAppGoodResponse, error)
	GetAppGoodOnly(ctx context.Context, in *GetAppGoodOnlyRequest, opts ...grpc.CallOption) (*GetAppGoodOnlyResponse, error)
	GetAppGoods(ctx context.Context, in *GetAppGoodsRequest, opts ...grpc.CallOption) (*GetAppGoodsResponse, error)
	ExistAppGood(ctx context.Context, in *ExistAppGoodRequest, opts ...grpc.CallOption) (*ExistAppGoodResponse, error)
	ExistAppGoodConds(ctx context.Context, in *ExistAppGoodCondsRequest, opts ...grpc.CallOption) (*ExistAppGoodCondsResponse, error)
	CountAppGoods(ctx context.Context, in *CountAppGoodsRequest, opts ...grpc.CallOption) (*CountAppGoodsResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateAppGood(ctx context.Context, in *CreateAppGoodRequest, opts ...grpc.CallOption) (*CreateAppGoodResponse, error) {
	out := new(CreateAppGoodResponse)
	err := c.cc.Invoke(ctx, "/good.manager.appgood.v1.Manager/CreateAppGood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateAppGoods(ctx context.Context, in *CreateAppGoodsRequest, opts ...grpc.CallOption) (*CreateAppGoodsResponse, error) {
	out := new(CreateAppGoodsResponse)
	err := c.cc.Invoke(ctx, "/good.manager.appgood.v1.Manager/CreateAppGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetAppGood(ctx context.Context, in *GetAppGoodRequest, opts ...grpc.CallOption) (*GetAppGoodResponse, error) {
	out := new(GetAppGoodResponse)
	err := c.cc.Invoke(ctx, "/good.manager.appgood.v1.Manager/GetAppGood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetAppGoodOnly(ctx context.Context, in *GetAppGoodOnlyRequest, opts ...grpc.CallOption) (*GetAppGoodOnlyResponse, error) {
	out := new(GetAppGoodOnlyResponse)
	err := c.cc.Invoke(ctx, "/good.manager.appgood.v1.Manager/GetAppGoodOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetAppGoods(ctx context.Context, in *GetAppGoodsRequest, opts ...grpc.CallOption) (*GetAppGoodsResponse, error) {
	out := new(GetAppGoodsResponse)
	err := c.cc.Invoke(ctx, "/good.manager.appgood.v1.Manager/GetAppGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistAppGood(ctx context.Context, in *ExistAppGoodRequest, opts ...grpc.CallOption) (*ExistAppGoodResponse, error) {
	out := new(ExistAppGoodResponse)
	err := c.cc.Invoke(ctx, "/good.manager.appgood.v1.Manager/ExistAppGood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistAppGoodConds(ctx context.Context, in *ExistAppGoodCondsRequest, opts ...grpc.CallOption) (*ExistAppGoodCondsResponse, error) {
	out := new(ExistAppGoodCondsResponse)
	err := c.cc.Invoke(ctx, "/good.manager.appgood.v1.Manager/ExistAppGoodConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountAppGoods(ctx context.Context, in *CountAppGoodsRequest, opts ...grpc.CallOption) (*CountAppGoodsResponse, error) {
	out := new(CountAppGoodsResponse)
	err := c.cc.Invoke(ctx, "/good.manager.appgood.v1.Manager/CountAppGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateAppGood(context.Context, *CreateAppGoodRequest) (*CreateAppGoodResponse, error)
	CreateAppGoods(context.Context, *CreateAppGoodsRequest) (*CreateAppGoodsResponse, error)
	GetAppGood(context.Context, *GetAppGoodRequest) (*GetAppGoodResponse, error)
	GetAppGoodOnly(context.Context, *GetAppGoodOnlyRequest) (*GetAppGoodOnlyResponse, error)
	GetAppGoods(context.Context, *GetAppGoodsRequest) (*GetAppGoodsResponse, error)
	ExistAppGood(context.Context, *ExistAppGoodRequest) (*ExistAppGoodResponse, error)
	ExistAppGoodConds(context.Context, *ExistAppGoodCondsRequest) (*ExistAppGoodCondsResponse, error)
	CountAppGoods(context.Context, *CountAppGoodsRequest) (*CountAppGoodsResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateAppGood(context.Context, *CreateAppGoodRequest) (*CreateAppGoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppGood not implemented")
}
func (UnimplementedManagerServer) CreateAppGoods(context.Context, *CreateAppGoodsRequest) (*CreateAppGoodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppGoods not implemented")
}
func (UnimplementedManagerServer) GetAppGood(context.Context, *GetAppGoodRequest) (*GetAppGoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppGood not implemented")
}
func (UnimplementedManagerServer) GetAppGoodOnly(context.Context, *GetAppGoodOnlyRequest) (*GetAppGoodOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppGoodOnly not implemented")
}
func (UnimplementedManagerServer) GetAppGoods(context.Context, *GetAppGoodsRequest) (*GetAppGoodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppGoods not implemented")
}
func (UnimplementedManagerServer) ExistAppGood(context.Context, *ExistAppGoodRequest) (*ExistAppGoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistAppGood not implemented")
}
func (UnimplementedManagerServer) ExistAppGoodConds(context.Context, *ExistAppGoodCondsRequest) (*ExistAppGoodCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistAppGoodConds not implemented")
}
func (UnimplementedManagerServer) CountAppGoods(context.Context, *CountAppGoodsRequest) (*CountAppGoodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAppGoods not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateAppGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateAppGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.manager.appgood.v1.Manager/CreateAppGood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateAppGood(ctx, req.(*CreateAppGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateAppGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppGoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateAppGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.manager.appgood.v1.Manager/CreateAppGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateAppGoods(ctx, req.(*CreateAppGoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetAppGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetAppGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.manager.appgood.v1.Manager/GetAppGood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetAppGood(ctx, req.(*GetAppGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetAppGoodOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppGoodOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetAppGoodOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.manager.appgood.v1.Manager/GetAppGoodOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetAppGoodOnly(ctx, req.(*GetAppGoodOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetAppGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppGoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetAppGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.manager.appgood.v1.Manager/GetAppGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetAppGoods(ctx, req.(*GetAppGoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistAppGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistAppGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistAppGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.manager.appgood.v1.Manager/ExistAppGood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistAppGood(ctx, req.(*ExistAppGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistAppGoodConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistAppGoodCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistAppGoodConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.manager.appgood.v1.Manager/ExistAppGoodConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistAppGoodConds(ctx, req.(*ExistAppGoodCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountAppGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAppGoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountAppGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.manager.appgood.v1.Manager/CountAppGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountAppGoods(ctx, req.(*CountAppGoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "good.manager.appgood.v1.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAppGood",
			Handler:    _Manager_CreateAppGood_Handler,
		},
		{
			MethodName: "CreateAppGoods",
			Handler:    _Manager_CreateAppGoods_Handler,
		},
		{
			MethodName: "GetAppGood",
			Handler:    _Manager_GetAppGood_Handler,
		},
		{
			MethodName: "GetAppGoodOnly",
			Handler:    _Manager_GetAppGoodOnly_Handler,
		},
		{
			MethodName: "GetAppGoods",
			Handler:    _Manager_GetAppGoods_Handler,
		},
		{
			MethodName: "ExistAppGood",
			Handler:    _Manager_ExistAppGood_Handler,
		},
		{
			MethodName: "ExistAppGoodConds",
			Handler:    _Manager_ExistAppGoodConds_Handler,
		},
		{
			MethodName: "CountAppGoods",
			Handler:    _Manager_CountAppGoods_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/good/mgr/v1/appgood/appgood.proto",
}
