// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.18.1
// source: npool/good/mgr/v1/appgood/appgood.proto

package appgood

import (
	npool "github.com/NpoolPlatform/message/npool"
	commission "github.com/NpoolPlatform/message/npool/inspire/mgr/v1/commission"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CancelMode int32

const (
	CancelMode_CancelModeDefault        CancelMode = 0
	CancelMode_CancellableBeforeStart   CancelMode = 10
	CancelMode_CancellableBeforeBenefit CancelMode = 20
	CancelMode_Uncalcellable            CancelMode = 30
)

// Enum value maps for CancelMode.
var (
	CancelMode_name = map[int32]string{
		0:  "CancelModeDefault",
		10: "CancellableBeforeStart",
		20: "CancellableBeforeBenefit",
		30: "Uncalcellable",
	}
	CancelMode_value = map[string]int32{
		"CancelModeDefault":        0,
		"CancellableBeforeStart":   10,
		"CancellableBeforeBenefit": 20,
		"Uncalcellable":            30,
	}
)

func (x CancelMode) Enum() *CancelMode {
	p := new(CancelMode)
	*p = x
	return p
}

func (x CancelMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CancelMode) Descriptor() protoreflect.EnumDescriptor {
	return file_npool_good_mgr_v1_appgood_appgood_proto_enumTypes[0].Descriptor()
}

func (CancelMode) Type() protoreflect.EnumType {
	return &file_npool_good_mgr_v1_appgood_appgood_proto_enumTypes[0]
}

func (x CancelMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CancelMode.Descriptor instead.
func (CancelMode) EnumDescriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_appgood_appgood_proto_rawDescGZIP(), []int{0}
}

type AppGoodReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                   *string                `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	AppID                *string                `protobuf:"bytes,20,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	GoodID               *string                `protobuf:"bytes,30,opt,name=GoodID,proto3,oneof" json:"GoodID,omitempty"`
	Online               *bool                  `protobuf:"varint,40,opt,name=Online,proto3,oneof" json:"Online,omitempty"`
	Visible              *bool                  `protobuf:"varint,50,opt,name=Visible,proto3,oneof" json:"Visible,omitempty"`
	GoodName             *string                `protobuf:"bytes,60,opt,name=GoodName,proto3,oneof" json:"GoodName,omitempty"`
	Price                *string                `protobuf:"bytes,70,opt,name=Price,proto3,oneof" json:"Price,omitempty"`
	DisplayIndex         *int32                 `protobuf:"varint,80,opt,name=DisplayIndex,proto3,oneof" json:"DisplayIndex,omitempty"`
	PurchaseLimit        *int32                 `protobuf:"varint,90,opt,name=PurchaseLimit,proto3,oneof" json:"PurchaseLimit,omitempty"`
	CommissionPercent    *int32                 `protobuf:"varint,100,opt,name=CommissionPercent,proto3,oneof" json:"CommissionPercent,omitempty"`
	SaleStartAt          *uint32                `protobuf:"varint,110,opt,name=SaleStartAt,proto3,oneof" json:"SaleStartAt,omitempty"`
	SaleEndAt            *uint32                `protobuf:"varint,120,opt,name=SaleEndAt,proto3,oneof" json:"SaleEndAt,omitempty"`
	ServiceStartAt       *uint32                `protobuf:"varint,130,opt,name=ServiceStartAt,proto3,oneof" json:"ServiceStartAt,omitempty"`
	TechnicalFeeRatio    *uint32                `protobuf:"varint,140,opt,name=TechnicalFeeRatio,proto3,oneof" json:"TechnicalFeeRatio,omitempty"`
	ElectricityFeeRatio  *uint32                `protobuf:"varint,150,opt,name=ElectricityFeeRatio,proto3,oneof" json:"ElectricityFeeRatio,omitempty"`
	DailyRewardAmount    *string                `protobuf:"bytes,160,opt,name=DailyRewardAmount,proto3,oneof" json:"DailyRewardAmount,omitempty"`
	CommissionSettleType *commission.SettleType `protobuf:"varint,170,opt,name=CommissionSettleType,proto3,enum=inspire.manager.commission.v1.SettleType,oneof" json:"CommissionSettleType,omitempty"`
	Descriptions         []string               `protobuf:"bytes,180,rep,name=Descriptions,proto3" json:"Descriptions,omitempty"`
	GoodBanner           *string                `protobuf:"bytes,190,opt,name=GoodBanner,proto3,oneof" json:"GoodBanner,omitempty"`
	DisplayNames         []string               `protobuf:"bytes,200,rep,name=DisplayNames,proto3" json:"DisplayNames,omitempty"`
	EnablePurchase       *bool                  `protobuf:"varint,210,opt,name=EnablePurchase,proto3,oneof" json:"EnablePurchase,omitempty"`
	EnableProductPage    *bool                  `protobuf:"varint,220,opt,name=EnableProductPage,proto3,oneof" json:"EnableProductPage,omitempty"`
	CancelMode           *CancelMode            `protobuf:"varint,230,opt,name=CancelMode,proto3,enum=good.manager.appgood.v1.CancelMode,oneof" json:"CancelMode,omitempty"`
	UserPurchaseLimit    *string                `protobuf:"bytes,240,opt,name=UserPurchaseLimit,proto3,oneof" json:"UserPurchaseLimit,omitempty"`
}

func (x *AppGoodReq) Reset() {
	*x = AppGoodReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppGoodReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppGoodReq) ProtoMessage() {}

func (x *AppGoodReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppGoodReq.ProtoReflect.Descriptor instead.
func (*AppGoodReq) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_appgood_appgood_proto_rawDescGZIP(), []int{0}
}

func (x *AppGoodReq) GetID() string {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return ""
}

func (x *AppGoodReq) GetAppID() string {
	if x != nil && x.AppID != nil {
		return *x.AppID
	}
	return ""
}

func (x *AppGoodReq) GetGoodID() string {
	if x != nil && x.GoodID != nil {
		return *x.GoodID
	}
	return ""
}

func (x *AppGoodReq) GetOnline() bool {
	if x != nil && x.Online != nil {
		return *x.Online
	}
	return false
}

func (x *AppGoodReq) GetVisible() bool {
	if x != nil && x.Visible != nil {
		return *x.Visible
	}
	return false
}

func (x *AppGoodReq) GetGoodName() string {
	if x != nil && x.GoodName != nil {
		return *x.GoodName
	}
	return ""
}

func (x *AppGoodReq) GetPrice() string {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return ""
}

func (x *AppGoodReq) GetDisplayIndex() int32 {
	if x != nil && x.DisplayIndex != nil {
		return *x.DisplayIndex
	}
	return 0
}

func (x *AppGoodReq) GetPurchaseLimit() int32 {
	if x != nil && x.PurchaseLimit != nil {
		return *x.PurchaseLimit
	}
	return 0
}

func (x *AppGoodReq) GetCommissionPercent() int32 {
	if x != nil && x.CommissionPercent != nil {
		return *x.CommissionPercent
	}
	return 0
}

func (x *AppGoodReq) GetSaleStartAt() uint32 {
	if x != nil && x.SaleStartAt != nil {
		return *x.SaleStartAt
	}
	return 0
}

func (x *AppGoodReq) GetSaleEndAt() uint32 {
	if x != nil && x.SaleEndAt != nil {
		return *x.SaleEndAt
	}
	return 0
}

func (x *AppGoodReq) GetServiceStartAt() uint32 {
	if x != nil && x.ServiceStartAt != nil {
		return *x.ServiceStartAt
	}
	return 0
}

func (x *AppGoodReq) GetTechnicalFeeRatio() uint32 {
	if x != nil && x.TechnicalFeeRatio != nil {
		return *x.TechnicalFeeRatio
	}
	return 0
}

func (x *AppGoodReq) GetElectricityFeeRatio() uint32 {
	if x != nil && x.ElectricityFeeRatio != nil {
		return *x.ElectricityFeeRatio
	}
	return 0
}

func (x *AppGoodReq) GetDailyRewardAmount() string {
	if x != nil && x.DailyRewardAmount != nil {
		return *x.DailyRewardAmount
	}
	return ""
}

func (x *AppGoodReq) GetCommissionSettleType() commission.SettleType {
	if x != nil && x.CommissionSettleType != nil {
		return *x.CommissionSettleType
	}
	return commission.SettleType(0)
}

func (x *AppGoodReq) GetDescriptions() []string {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *AppGoodReq) GetGoodBanner() string {
	if x != nil && x.GoodBanner != nil {
		return *x.GoodBanner
	}
	return ""
}

func (x *AppGoodReq) GetDisplayNames() []string {
	if x != nil {
		return x.DisplayNames
	}
	return nil
}

func (x *AppGoodReq) GetEnablePurchase() bool {
	if x != nil && x.EnablePurchase != nil {
		return *x.EnablePurchase
	}
	return false
}

func (x *AppGoodReq) GetEnableProductPage() bool {
	if x != nil && x.EnableProductPage != nil {
		return *x.EnableProductPage
	}
	return false
}

func (x *AppGoodReq) GetCancelMode() CancelMode {
	if x != nil && x.CancelMode != nil {
		return *x.CancelMode
	}
	return CancelMode_CancelModeDefault
}

func (x *AppGoodReq) GetUserPurchaseLimit() string {
	if x != nil && x.UserPurchaseLimit != nil {
		return *x.UserPurchaseLimit
	}
	return ""
}

type AppGood struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                   string                `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID                string                `protobuf:"bytes,20,opt,name=AppID,proto3" json:"AppID,omitempty"`
	GoodID               string                `protobuf:"bytes,30,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
	Online               bool                  `protobuf:"varint,40,opt,name=Online,proto3" json:"Online,omitempty"`
	Visible              bool                  `protobuf:"varint,50,opt,name=Visible,proto3" json:"Visible,omitempty"`
	GoodName             string                `protobuf:"bytes,60,opt,name=GoodName,proto3" json:"GoodName,omitempty"`
	Price                string                `protobuf:"bytes,70,opt,name=Price,proto3" json:"Price,omitempty"`
	DisplayIndex         int32                 `protobuf:"varint,80,opt,name=DisplayIndex,proto3" json:"DisplayIndex,omitempty"`
	PurchaseLimit        int32                 `protobuf:"varint,90,opt,name=PurchaseLimit,proto3" json:"PurchaseLimit,omitempty"`
	CommissionPercent    int32                 `protobuf:"varint,100,opt,name=CommissionPercent,proto3" json:"CommissionPercent,omitempty"`
	CreatedAt            uint32                `protobuf:"varint,110,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt            uint32                `protobuf:"varint,120,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	DeletedAt            uint32                `protobuf:"varint,130,opt,name=DeletedAt,proto3" json:"DeletedAt,omitempty"`
	SaleStartAt          uint32                `protobuf:"varint,140,opt,name=SaleStartAt,proto3" json:"SaleStartAt,omitempty"`
	SaleEndAt            uint32                `protobuf:"varint,150,opt,name=SaleEndAt,proto3" json:"SaleEndAt,omitempty"`
	ServiceStartAt       uint32                `protobuf:"varint,160,opt,name=ServiceStartAt,proto3" json:"ServiceStartAt,omitempty"`
	TechnicalFeeRatio    uint32                `protobuf:"varint,170,opt,name=TechnicalFeeRatio,proto3" json:"TechnicalFeeRatio,omitempty"`
	ElectricityFeeRatio  uint32                `protobuf:"varint,180,opt,name=ElectricityFeeRatio,proto3" json:"ElectricityFeeRatio,omitempty"`
	DailyRewardAmount    string                `protobuf:"bytes,190,opt,name=DailyRewardAmount,proto3" json:"DailyRewardAmount,omitempty"`
	CommissionSettleType commission.SettleType `protobuf:"varint,200,opt,name=CommissionSettleType,proto3,enum=inspire.manager.commission.v1.SettleType" json:"CommissionSettleType,omitempty"`
	Descriptions         []string              `protobuf:"bytes,210,rep,name=Descriptions,proto3" json:"Descriptions,omitempty"`
	GoodBanner           string                `protobuf:"bytes,220,opt,name=GoodBanner,proto3" json:"GoodBanner,omitempty"`
	DisplayNames         []string              `protobuf:"bytes,230,rep,name=DisplayNames,proto3" json:"DisplayNames,omitempty"`
	EnablePurchase       bool                  `protobuf:"varint,240,opt,name=EnablePurchase,proto3" json:"EnablePurchase,omitempty"`
	EnableProductPage    bool                  `protobuf:"varint,250,opt,name=EnableProductPage,proto3" json:"EnableProductPage,omitempty"`
	CancelMode           CancelMode            `protobuf:"varint,260,opt,name=CancelMode,proto3,enum=good.manager.appgood.v1.CancelMode" json:"CancelMode,omitempty"`
	UserPurchaseLimit    string                `protobuf:"bytes,270,opt,name=UserPurchaseLimit,proto3" json:"UserPurchaseLimit,omitempty"`
}

func (x *AppGood) Reset() {
	*x = AppGood{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppGood) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppGood) ProtoMessage() {}

func (x *AppGood) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppGood.ProtoReflect.Descriptor instead.
func (*AppGood) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_appgood_appgood_proto_rawDescGZIP(), []int{1}
}

func (x *AppGood) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *AppGood) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *AppGood) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *AppGood) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

func (x *AppGood) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

func (x *AppGood) GetGoodName() string {
	if x != nil {
		return x.GoodName
	}
	return ""
}

func (x *AppGood) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *AppGood) GetDisplayIndex() int32 {
	if x != nil {
		return x.DisplayIndex
	}
	return 0
}

func (x *AppGood) GetPurchaseLimit() int32 {
	if x != nil {
		return x.PurchaseLimit
	}
	return 0
}

func (x *AppGood) GetCommissionPercent() int32 {
	if x != nil {
		return x.CommissionPercent
	}
	return 0
}

func (x *AppGood) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *AppGood) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *AppGood) GetDeletedAt() uint32 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

func (x *AppGood) GetSaleStartAt() uint32 {
	if x != nil {
		return x.SaleStartAt
	}
	return 0
}

func (x *AppGood) GetSaleEndAt() uint32 {
	if x != nil {
		return x.SaleEndAt
	}
	return 0
}

func (x *AppGood) GetServiceStartAt() uint32 {
	if x != nil {
		return x.ServiceStartAt
	}
	return 0
}

func (x *AppGood) GetTechnicalFeeRatio() uint32 {
	if x != nil {
		return x.TechnicalFeeRatio
	}
	return 0
}

func (x *AppGood) GetElectricityFeeRatio() uint32 {
	if x != nil {
		return x.ElectricityFeeRatio
	}
	return 0
}

func (x *AppGood) GetDailyRewardAmount() string {
	if x != nil {
		return x.DailyRewardAmount
	}
	return ""
}

func (x *AppGood) GetCommissionSettleType() commission.SettleType {
	if x != nil {
		return x.CommissionSettleType
	}
	return commission.SettleType(0)
}

func (x *AppGood) GetDescriptions() []string {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *AppGood) GetGoodBanner() string {
	if x != nil {
		return x.GoodBanner
	}
	return ""
}

func (x *AppGood) GetDisplayNames() []string {
	if x != nil {
		return x.DisplayNames
	}
	return nil
}

func (x *AppGood) GetEnablePurchase() bool {
	if x != nil {
		return x.EnablePurchase
	}
	return false
}

func (x *AppGood) GetEnableProductPage() bool {
	if x != nil {
		return x.EnableProductPage
	}
	return false
}

func (x *AppGood) GetCancelMode() CancelMode {
	if x != nil {
		return x.CancelMode
	}
	return CancelMode_CancelModeDefault
}

func (x *AppGood) GetUserPurchaseLimit() string {
	if x != nil {
		return x.UserPurchaseLimit
	}
	return ""
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      *npool.StringVal      `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	AppID   *npool.StringVal      `protobuf:"bytes,20,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	GoodID  *npool.StringVal      `protobuf:"bytes,30,opt,name=GoodID,proto3,oneof" json:"GoodID,omitempty"`
	GoodIDs *npool.StringSliceVal `protobuf:"bytes,40,opt,name=GoodIDs,proto3,oneof" json:"GoodIDs,omitempty"`
	AppIDs  *npool.StringSliceVal `protobuf:"bytes,50,opt,name=AppIDs,proto3,oneof" json:"AppIDs,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_appgood_appgood_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *npool.StringVal {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetAppID() *npool.StringVal {
	if x != nil {
		return x.AppID
	}
	return nil
}

func (x *Conds) GetGoodID() *npool.StringVal {
	if x != nil {
		return x.GoodID
	}
	return nil
}

func (x *Conds) GetGoodIDs() *npool.StringSliceVal {
	if x != nil {
		return x.GoodIDs
	}
	return nil
}

func (x *Conds) GetAppIDs() *npool.StringSliceVal {
	if x != nil {
		return x.AppIDs
	}
	return nil
}

type CreateAppGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppGoodReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateAppGoodRequest) Reset() {
	*x = CreateAppGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAppGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAppGoodRequest) ProtoMessage() {}

func (x *CreateAppGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAppGoodRequest.ProtoReflect.Descriptor instead.
func (*CreateAppGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_appgood_appgood_proto_rawDescGZIP(), []int{3}
}

func (x *CreateAppGoodRequest) GetInfo() *AppGoodReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateAppGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppGood `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateAppGoodResponse) Reset() {
	*x = CreateAppGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAppGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAppGoodResponse) ProtoMessage() {}

func (x *CreateAppGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAppGoodResponse.ProtoReflect.Descriptor instead.
func (*CreateAppGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_appgood_appgood_proto_rawDescGZIP(), []int{4}
}

func (x *CreateAppGoodResponse) GetInfo() *AppGood {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateAppGoodsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*AppGoodReq `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateAppGoodsRequest) Reset() {
	*x = CreateAppGoodsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAppGoodsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAppGoodsRequest) ProtoMessage() {}

func (x *CreateAppGoodsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAppGoodsRequest.ProtoReflect.Descriptor instead.
func (*CreateAppGoodsRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_appgood_appgood_proto_rawDescGZIP(), []int{5}
}

func (x *CreateAppGoodsRequest) GetInfos() []*AppGoodReq {
	if x != nil {
		return x.Infos
	}
	return nil
}

type CreateAppGoodsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*AppGood `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateAppGoodsResponse) Reset() {
	*x = CreateAppGoodsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAppGoodsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAppGoodsResponse) ProtoMessage() {}

func (x *CreateAppGoodsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAppGoodsResponse.ProtoReflect.Descriptor instead.
func (*CreateAppGoodsResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_appgood_appgood_proto_rawDescGZIP(), []int{6}
}

func (x *CreateAppGoodsResponse) GetInfos() []*AppGood {
	if x != nil {
		return x.Infos
	}
	return nil
}

type UpdateAppGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppGoodReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateAppGoodRequest) Reset() {
	*x = UpdateAppGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppGoodRequest) ProtoMessage() {}

func (x *UpdateAppGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppGoodRequest.ProtoReflect.Descriptor instead.
func (*UpdateAppGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_appgood_appgood_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateAppGoodRequest) GetInfo() *AppGoodReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateAppGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppGood `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateAppGoodResponse) Reset() {
	*x = UpdateAppGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppGoodResponse) ProtoMessage() {}

func (x *UpdateAppGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppGoodResponse.ProtoReflect.Descriptor instead.
func (*UpdateAppGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_appgood_appgood_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateAppGoodResponse) GetInfo() *AppGood {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetAppGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetAppGoodRequest) Reset() {
	*x = GetAppGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppGoodRequest) ProtoMessage() {}

func (x *GetAppGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppGoodRequest.ProtoReflect.Descriptor instead.
func (*GetAppGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_appgood_appgood_proto_rawDescGZIP(), []int{9}
}

func (x *GetAppGoodRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetAppGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppGood `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetAppGoodResponse) Reset() {
	*x = GetAppGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppGoodResponse) ProtoMessage() {}

func (x *GetAppGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppGoodResponse.ProtoReflect.Descriptor instead.
func (*GetAppGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_appgood_appgood_proto_rawDescGZIP(), []int{10}
}

func (x *GetAppGoodResponse) GetInfo() *AppGood {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetAppGoodsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetAppGoodsRequest) Reset() {
	*x = GetAppGoodsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppGoodsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppGoodsRequest) ProtoMessage() {}

func (x *GetAppGoodsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppGoodsRequest.ProtoReflect.Descriptor instead.
func (*GetAppGoodsRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_appgood_appgood_proto_rawDescGZIP(), []int{11}
}

func (x *GetAppGoodsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetAppGoodsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetAppGoodsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetAppGoodsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*AppGood `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32     `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetAppGoodsResponse) Reset() {
	*x = GetAppGoodsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppGoodsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppGoodsResponse) ProtoMessage() {}

func (x *GetAppGoodsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppGoodsResponse.ProtoReflect.Descriptor instead.
func (*GetAppGoodsResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_appgood_appgood_proto_rawDescGZIP(), []int{12}
}

func (x *GetAppGoodsResponse) GetInfos() []*AppGood {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetAppGoodsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetAppGoodOnlyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *GetAppGoodOnlyRequest) Reset() {
	*x = GetAppGoodOnlyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppGoodOnlyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppGoodOnlyRequest) ProtoMessage() {}

func (x *GetAppGoodOnlyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppGoodOnlyRequest.ProtoReflect.Descriptor instead.
func (*GetAppGoodOnlyRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_appgood_appgood_proto_rawDescGZIP(), []int{13}
}

func (x *GetAppGoodOnlyRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type GetAppGoodOnlyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppGood `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetAppGoodOnlyResponse) Reset() {
	*x = GetAppGoodOnlyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppGoodOnlyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppGoodOnlyResponse) ProtoMessage() {}

func (x *GetAppGoodOnlyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppGoodOnlyResponse.ProtoReflect.Descriptor instead.
func (*GetAppGoodOnlyResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_appgood_appgood_proto_rawDescGZIP(), []int{14}
}

func (x *GetAppGoodOnlyResponse) GetInfo() *AppGood {
	if x != nil {
		return x.Info
	}
	return nil
}

type ExistAppGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ExistAppGoodRequest) Reset() {
	*x = ExistAppGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistAppGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistAppGoodRequest) ProtoMessage() {}

func (x *ExistAppGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistAppGoodRequest.ProtoReflect.Descriptor instead.
func (*ExistAppGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_appgood_appgood_proto_rawDescGZIP(), []int{15}
}

func (x *ExistAppGoodRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ExistAppGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistAppGoodResponse) Reset() {
	*x = ExistAppGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistAppGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistAppGoodResponse) ProtoMessage() {}

func (x *ExistAppGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistAppGoodResponse.ProtoReflect.Descriptor instead.
func (*ExistAppGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_appgood_appgood_proto_rawDescGZIP(), []int{16}
}

func (x *ExistAppGoodResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type ExistAppGoodCondsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *ExistAppGoodCondsRequest) Reset() {
	*x = ExistAppGoodCondsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistAppGoodCondsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistAppGoodCondsRequest) ProtoMessage() {}

func (x *ExistAppGoodCondsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistAppGoodCondsRequest.ProtoReflect.Descriptor instead.
func (*ExistAppGoodCondsRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_appgood_appgood_proto_rawDescGZIP(), []int{17}
}

func (x *ExistAppGoodCondsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type ExistAppGoodCondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistAppGoodCondsResponse) Reset() {
	*x = ExistAppGoodCondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistAppGoodCondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistAppGoodCondsResponse) ProtoMessage() {}

func (x *ExistAppGoodCondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistAppGoodCondsResponse.ProtoReflect.Descriptor instead.
func (*ExistAppGoodCondsResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_appgood_appgood_proto_rawDescGZIP(), []int{18}
}

func (x *ExistAppGoodCondsResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type CountAppGoodsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *CountAppGoodsRequest) Reset() {
	*x = CountAppGoodsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAppGoodsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAppGoodsRequest) ProtoMessage() {}

func (x *CountAppGoodsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAppGoodsRequest.ProtoReflect.Descriptor instead.
func (*CountAppGoodsRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_appgood_appgood_proto_rawDescGZIP(), []int{19}
}

func (x *CountAppGoodsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type CountAppGoodsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info uint32 `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CountAppGoodsResponse) Reset() {
	*x = CountAppGoodsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAppGoodsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAppGoodsResponse) ProtoMessage() {}

func (x *CountAppGoodsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAppGoodsResponse.ProtoReflect.Descriptor instead.
func (*CountAppGoodsResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_appgood_appgood_proto_rawDescGZIP(), []int{20}
}

func (x *CountAppGoodsResponse) GetInfo() uint32 {
	if x != nil {
		return x.Info
	}
	return 0
}

type DeleteAppGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *DeleteAppGoodRequest) Reset() {
	*x = DeleteAppGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAppGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAppGoodRequest) ProtoMessage() {}

func (x *DeleteAppGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAppGoodRequest.ProtoReflect.Descriptor instead.
func (*DeleteAppGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_appgood_appgood_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteAppGoodRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type DeleteAppGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppGood `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteAppGoodResponse) Reset() {
	*x = DeleteAppGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAppGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAppGoodResponse) ProtoMessage() {}

func (x *DeleteAppGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAppGoodResponse.ProtoReflect.Descriptor instead.
func (*DeleteAppGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_appgood_appgood_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteAppGoodResponse) GetInfo() *AppGood {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_good_mgr_v1_appgood_appgood_proto protoreflect.FileDescriptor

var file_npool_good_mgr_v1_appgood_appgood_proto_rawDesc = []byte{
	0x0a, 0x27, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x6d, 0x67, 0x72,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x61, 0x70, 0x70, 0x67,
	0x6f, 0x6f, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x30, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f, 0x6d,
	0x67, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x11, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x94, 0x0b, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x03, 0x52, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x07, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04,
	0x52, 0x07, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05,
	0x52, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x05,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x50, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07,
	0x52, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01,
	0x01, 0x12, 0x29, 0x0a, 0x0d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08, 0x52, 0x0d, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x25, 0x0a, 0x0b, 0x53, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x6e,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x0a, 0x52, 0x0b, 0x53, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x53, 0x61, 0x6c, 0x65, 0x45, 0x6e,
	0x64, 0x41, 0x74, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0b, 0x52, 0x09, 0x53, 0x61, 0x6c,
	0x65, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x82, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x0c, 0x52, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x11, 0x54, 0x65, 0x63, 0x68, 0x6e,
	0x69, 0x63, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x8c, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x0d, 0x52, 0x11, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c,
	0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x13, 0x45,
	0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0e, 0x52, 0x13, 0x45, 0x6c, 0x65,
	0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x11, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0f, 0x52, 0x11, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x63, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0xaa, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x48, 0x10, 0x52, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0c,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xb4, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x24, 0x0a, 0x0a, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18,
	0xbe, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x0a, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0xc8, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x0e,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x18, 0xd2,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x12, 0x52, 0x0e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x11, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x18,
	0xdc, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x13, 0x52, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x49,
	0x0a, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0xe6, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x14, 0x52, 0x0a, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x11, 0x55, 0x73, 0x65,
	0x72, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xf0,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x15, 0x52, 0x11, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x41, 0x70, 0x70, 0x49, 0x44, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x53, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x53, 0x61, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x46,
	0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x45, 0x6c, 0x65, 0x63,
	0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x92, 0x08, 0x0a, 0x07,
	0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47,
	0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x46, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x50, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a,
	0x0d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x5a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x6e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x78, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a,
	0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x21, 0x0a, 0x0b,
	0x53, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x8c, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x53, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12,
	0x1d, 0x0a, 0x09, 0x53, 0x61, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x96, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x53, 0x61, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x27,
	0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74,
	0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x2d, 0x0a, 0x11, 0x54, 0x65, 0x63, 0x68, 0x6e,
	0x69, 0x63, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0xaa, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x11, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x46, 0x65,
	0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x31, 0x0a, 0x13, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72,
	0x69, 0x63, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0xb4, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74,
	0x79, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x2d, 0x0a, 0x11, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xbe,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5e, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xd2, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a,
	0x0a, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0xdc, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x23,
	0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0xe6,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x18, 0xf0, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x11,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x18, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x84, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x2d, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x8e, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0xb6, 0x02, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x02, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x02, 0x52, 0x06, 0x47, 0x6f, 0x6f,
	0x64, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x07, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44,
	0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61,
	0x6c, 0x48, 0x03, 0x52, 0x07, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x35, 0x0a, 0x06, 0x41, 0x70, 0x70, 0x49, 0x44, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x04, 0x52, 0x06, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x41, 0x70, 0x70, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x47, 0x6f, 0x6f, 0x64,
	0x49, 0x44, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x73, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x41, 0x70, 0x70, 0x49, 0x44, 0x73, 0x22, 0x4f, 0x0a, 0x14, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x37, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61,
	0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f,
	0x64, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4d, 0x0a, 0x15, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x47,
	0x6f, 0x6f, 0x64, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x52, 0x0a, 0x15, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x39, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x47,
	0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x50, 0x0a,
	0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22,
	0x4f, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x4d, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x23, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x44, 0x22, 0x4a, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x47, 0x6f,
	0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x78, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x63, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x36, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x47, 0x6f,
	0x6f, 0x64, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22,
	0x4d, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x4f, 0x6e, 0x6c,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x4e,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x4f, 0x6e, 0x6c, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x25,
	0x0a, 0x13, 0x45, 0x78, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x2a, 0x0a, 0x14, 0x45, 0x78, 0x69, 0x73, 0x74, 0x41, 0x70,
	0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x50, 0x0a, 0x18, 0x45, 0x78, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f,
	0x64, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a,
	0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x67,
	0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x22, 0x2f, 0x0a, 0x19, 0x45, 0x78, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x47,
	0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4c, 0x0a, 0x14, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x70, 0x70,
	0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x05,
	0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x22, 0x2b, 0x0a, 0x15, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x26, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x4d, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x34, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70,
	0x70, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x2a, 0x70, 0x0a, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x6f,
	0x64, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0x0a, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x42, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x74, 0x10, 0x14, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x6e, 0x63, 0x61, 0x6c, 0x63, 0x65,
	0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x1e, 0x32, 0xfd, 0x08, 0x0a, 0x07, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x12, 0x70, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70,
	0x70, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x0d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x2d, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x67,
	0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70,
	0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x47,
	0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x2a, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70,
	0x47, 0x6f, 0x6f, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x4f, 0x6e, 0x6c,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x4f, 0x6e, 0x6c,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x2b, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x0c, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x11, 0x45, 0x78, 0x69, 0x73, 0x74, 0x41,
	0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x31, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x41, 0x70, 0x70, 0x47, 0x6f,
	0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70,
	0x70, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x41, 0x70,
	0x70, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x0d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x70, 0x70,
	0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f,
	0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x6d, 0x67, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_good_mgr_v1_appgood_appgood_proto_rawDescOnce sync.Once
	file_npool_good_mgr_v1_appgood_appgood_proto_rawDescData = file_npool_good_mgr_v1_appgood_appgood_proto_rawDesc
)

func file_npool_good_mgr_v1_appgood_appgood_proto_rawDescGZIP() []byte {
	file_npool_good_mgr_v1_appgood_appgood_proto_rawDescOnce.Do(func() {
		file_npool_good_mgr_v1_appgood_appgood_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_good_mgr_v1_appgood_appgood_proto_rawDescData)
	})
	return file_npool_good_mgr_v1_appgood_appgood_proto_rawDescData
}

var file_npool_good_mgr_v1_appgood_appgood_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_npool_good_mgr_v1_appgood_appgood_proto_goTypes = []interface{}{
	(CancelMode)(0),                   // 0: good.manager.appgood.v1.CancelMode
	(*AppGoodReq)(nil),                // 1: good.manager.appgood.v1.AppGoodReq
	(*AppGood)(nil),                   // 2: good.manager.appgood.v1.AppGood
	(*Conds)(nil),                     // 3: good.manager.appgood.v1.Conds
	(*CreateAppGoodRequest)(nil),      // 4: good.manager.appgood.v1.CreateAppGoodRequest
	(*CreateAppGoodResponse)(nil),     // 5: good.manager.appgood.v1.CreateAppGoodResponse
	(*CreateAppGoodsRequest)(nil),     // 6: good.manager.appgood.v1.CreateAppGoodsRequest
	(*CreateAppGoodsResponse)(nil),    // 7: good.manager.appgood.v1.CreateAppGoodsResponse
	(*UpdateAppGoodRequest)(nil),      // 8: good.manager.appgood.v1.UpdateAppGoodRequest
	(*UpdateAppGoodResponse)(nil),     // 9: good.manager.appgood.v1.UpdateAppGoodResponse
	(*GetAppGoodRequest)(nil),         // 10: good.manager.appgood.v1.GetAppGoodRequest
	(*GetAppGoodResponse)(nil),        // 11: good.manager.appgood.v1.GetAppGoodResponse
	(*GetAppGoodsRequest)(nil),        // 12: good.manager.appgood.v1.GetAppGoodsRequest
	(*GetAppGoodsResponse)(nil),       // 13: good.manager.appgood.v1.GetAppGoodsResponse
	(*GetAppGoodOnlyRequest)(nil),     // 14: good.manager.appgood.v1.GetAppGoodOnlyRequest
	(*GetAppGoodOnlyResponse)(nil),    // 15: good.manager.appgood.v1.GetAppGoodOnlyResponse
	(*ExistAppGoodRequest)(nil),       // 16: good.manager.appgood.v1.ExistAppGoodRequest
	(*ExistAppGoodResponse)(nil),      // 17: good.manager.appgood.v1.ExistAppGoodResponse
	(*ExistAppGoodCondsRequest)(nil),  // 18: good.manager.appgood.v1.ExistAppGoodCondsRequest
	(*ExistAppGoodCondsResponse)(nil), // 19: good.manager.appgood.v1.ExistAppGoodCondsResponse
	(*CountAppGoodsRequest)(nil),      // 20: good.manager.appgood.v1.CountAppGoodsRequest
	(*CountAppGoodsResponse)(nil),     // 21: good.manager.appgood.v1.CountAppGoodsResponse
	(*DeleteAppGoodRequest)(nil),      // 22: good.manager.appgood.v1.DeleteAppGoodRequest
	(*DeleteAppGoodResponse)(nil),     // 23: good.manager.appgood.v1.DeleteAppGoodResponse
	(commission.SettleType)(0),        // 24: inspire.manager.commission.v1.SettleType
	(*npool.StringVal)(nil),           // 25: npool.v1.StringVal
	(*npool.StringSliceVal)(nil),      // 26: npool.v1.StringSliceVal
}
var file_npool_good_mgr_v1_appgood_appgood_proto_depIdxs = []int32{
	24, // 0: good.manager.appgood.v1.AppGoodReq.CommissionSettleType:type_name -> inspire.manager.commission.v1.SettleType
	0,  // 1: good.manager.appgood.v1.AppGoodReq.CancelMode:type_name -> good.manager.appgood.v1.CancelMode
	24, // 2: good.manager.appgood.v1.AppGood.CommissionSettleType:type_name -> inspire.manager.commission.v1.SettleType
	0,  // 3: good.manager.appgood.v1.AppGood.CancelMode:type_name -> good.manager.appgood.v1.CancelMode
	25, // 4: good.manager.appgood.v1.Conds.ID:type_name -> npool.v1.StringVal
	25, // 5: good.manager.appgood.v1.Conds.AppID:type_name -> npool.v1.StringVal
	25, // 6: good.manager.appgood.v1.Conds.GoodID:type_name -> npool.v1.StringVal
	26, // 7: good.manager.appgood.v1.Conds.GoodIDs:type_name -> npool.v1.StringSliceVal
	26, // 8: good.manager.appgood.v1.Conds.AppIDs:type_name -> npool.v1.StringSliceVal
	1,  // 9: good.manager.appgood.v1.CreateAppGoodRequest.Info:type_name -> good.manager.appgood.v1.AppGoodReq
	2,  // 10: good.manager.appgood.v1.CreateAppGoodResponse.Info:type_name -> good.manager.appgood.v1.AppGood
	1,  // 11: good.manager.appgood.v1.CreateAppGoodsRequest.Infos:type_name -> good.manager.appgood.v1.AppGoodReq
	2,  // 12: good.manager.appgood.v1.CreateAppGoodsResponse.Infos:type_name -> good.manager.appgood.v1.AppGood
	1,  // 13: good.manager.appgood.v1.UpdateAppGoodRequest.Info:type_name -> good.manager.appgood.v1.AppGoodReq
	2,  // 14: good.manager.appgood.v1.UpdateAppGoodResponse.Info:type_name -> good.manager.appgood.v1.AppGood
	2,  // 15: good.manager.appgood.v1.GetAppGoodResponse.Info:type_name -> good.manager.appgood.v1.AppGood
	3,  // 16: good.manager.appgood.v1.GetAppGoodsRequest.Conds:type_name -> good.manager.appgood.v1.Conds
	2,  // 17: good.manager.appgood.v1.GetAppGoodsResponse.Infos:type_name -> good.manager.appgood.v1.AppGood
	3,  // 18: good.manager.appgood.v1.GetAppGoodOnlyRequest.Conds:type_name -> good.manager.appgood.v1.Conds
	2,  // 19: good.manager.appgood.v1.GetAppGoodOnlyResponse.Info:type_name -> good.manager.appgood.v1.AppGood
	3,  // 20: good.manager.appgood.v1.ExistAppGoodCondsRequest.Conds:type_name -> good.manager.appgood.v1.Conds
	3,  // 21: good.manager.appgood.v1.CountAppGoodsRequest.Conds:type_name -> good.manager.appgood.v1.Conds
	2,  // 22: good.manager.appgood.v1.DeleteAppGoodResponse.Info:type_name -> good.manager.appgood.v1.AppGood
	4,  // 23: good.manager.appgood.v1.Manager.CreateAppGood:input_type -> good.manager.appgood.v1.CreateAppGoodRequest
	6,  // 24: good.manager.appgood.v1.Manager.CreateAppGoods:input_type -> good.manager.appgood.v1.CreateAppGoodsRequest
	8,  // 25: good.manager.appgood.v1.Manager.UpdateAppGood:input_type -> good.manager.appgood.v1.UpdateAppGoodRequest
	10, // 26: good.manager.appgood.v1.Manager.GetAppGood:input_type -> good.manager.appgood.v1.GetAppGoodRequest
	14, // 27: good.manager.appgood.v1.Manager.GetAppGoodOnly:input_type -> good.manager.appgood.v1.GetAppGoodOnlyRequest
	12, // 28: good.manager.appgood.v1.Manager.GetAppGoods:input_type -> good.manager.appgood.v1.GetAppGoodsRequest
	16, // 29: good.manager.appgood.v1.Manager.ExistAppGood:input_type -> good.manager.appgood.v1.ExistAppGoodRequest
	18, // 30: good.manager.appgood.v1.Manager.ExistAppGoodConds:input_type -> good.manager.appgood.v1.ExistAppGoodCondsRequest
	20, // 31: good.manager.appgood.v1.Manager.CountAppGoods:input_type -> good.manager.appgood.v1.CountAppGoodsRequest
	22, // 32: good.manager.appgood.v1.Manager.DeleteAppGood:input_type -> good.manager.appgood.v1.DeleteAppGoodRequest
	5,  // 33: good.manager.appgood.v1.Manager.CreateAppGood:output_type -> good.manager.appgood.v1.CreateAppGoodResponse
	7,  // 34: good.manager.appgood.v1.Manager.CreateAppGoods:output_type -> good.manager.appgood.v1.CreateAppGoodsResponse
	9,  // 35: good.manager.appgood.v1.Manager.UpdateAppGood:output_type -> good.manager.appgood.v1.UpdateAppGoodResponse
	11, // 36: good.manager.appgood.v1.Manager.GetAppGood:output_type -> good.manager.appgood.v1.GetAppGoodResponse
	15, // 37: good.manager.appgood.v1.Manager.GetAppGoodOnly:output_type -> good.manager.appgood.v1.GetAppGoodOnlyResponse
	13, // 38: good.manager.appgood.v1.Manager.GetAppGoods:output_type -> good.manager.appgood.v1.GetAppGoodsResponse
	17, // 39: good.manager.appgood.v1.Manager.ExistAppGood:output_type -> good.manager.appgood.v1.ExistAppGoodResponse
	19, // 40: good.manager.appgood.v1.Manager.ExistAppGoodConds:output_type -> good.manager.appgood.v1.ExistAppGoodCondsResponse
	21, // 41: good.manager.appgood.v1.Manager.CountAppGoods:output_type -> good.manager.appgood.v1.CountAppGoodsResponse
	23, // 42: good.manager.appgood.v1.Manager.DeleteAppGood:output_type -> good.manager.appgood.v1.DeleteAppGoodResponse
	33, // [33:43] is the sub-list for method output_type
	23, // [23:33] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_npool_good_mgr_v1_appgood_appgood_proto_init() }
func file_npool_good_mgr_v1_appgood_appgood_proto_init() {
	if File_npool_good_mgr_v1_appgood_appgood_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppGoodReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppGood); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAppGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAppGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAppGoodsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAppGoodsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppGoodsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppGoodsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppGoodOnlyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppGoodOnlyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistAppGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistAppGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistAppGoodCondsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistAppGoodCondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAppGoodsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAppGoodsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAppGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAppGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_good_mgr_v1_appgood_appgood_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_good_mgr_v1_appgood_appgood_proto_goTypes,
		DependencyIndexes: file_npool_good_mgr_v1_appgood_appgood_proto_depIdxs,
		EnumInfos:         file_npool_good_mgr_v1_appgood_appgood_proto_enumTypes,
		MessageInfos:      file_npool_good_mgr_v1_appgood_appgood_proto_msgTypes,
	}.Build()
	File_npool_good_mgr_v1_appgood_appgood_proto = out.File
	file_npool_good_mgr_v1_appgood_appgood_proto_rawDesc = nil
	file_npool_good_mgr_v1_appgood_appgood_proto_goTypes = nil
	file_npool_good_mgr_v1_appgood_appgood_proto_depIdxs = nil
}
