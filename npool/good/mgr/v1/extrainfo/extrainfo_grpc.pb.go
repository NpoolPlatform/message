// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/good/mgr/v1/extrainfo/extrainfo.proto

package extrainfo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Manager_CreateExtraInfo_FullMethodName     = "/good.manager.extrainfo.v1.Manager/CreateExtraInfo"
	Manager_CreateExtraInfos_FullMethodName    = "/good.manager.extrainfo.v1.Manager/CreateExtraInfos"
	Manager_UpdateExtraInfo_FullMethodName     = "/good.manager.extrainfo.v1.Manager/UpdateExtraInfo"
	Manager_GetExtraInfo_FullMethodName        = "/good.manager.extrainfo.v1.Manager/GetExtraInfo"
	Manager_GetExtraInfoOnly_FullMethodName    = "/good.manager.extrainfo.v1.Manager/GetExtraInfoOnly"
	Manager_GetExtraInfos_FullMethodName       = "/good.manager.extrainfo.v1.Manager/GetExtraInfos"
	Manager_ExistExtraInfo_FullMethodName      = "/good.manager.extrainfo.v1.Manager/ExistExtraInfo"
	Manager_ExistExtraInfoConds_FullMethodName = "/good.manager.extrainfo.v1.Manager/ExistExtraInfoConds"
	Manager_CountExtraInfos_FullMethodName     = "/good.manager.extrainfo.v1.Manager/CountExtraInfos"
	Manager_DeleteExtraInfo_FullMethodName     = "/good.manager.extrainfo.v1.Manager/DeleteExtraInfo"
)

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateExtraInfo(ctx context.Context, in *CreateExtraInfoRequest, opts ...grpc.CallOption) (*CreateExtraInfoResponse, error)
	CreateExtraInfos(ctx context.Context, in *CreateExtraInfosRequest, opts ...grpc.CallOption) (*CreateExtraInfosResponse, error)
	UpdateExtraInfo(ctx context.Context, in *UpdateExtraInfoRequest, opts ...grpc.CallOption) (*UpdateExtraInfoResponse, error)
	GetExtraInfo(ctx context.Context, in *GetExtraInfoRequest, opts ...grpc.CallOption) (*GetExtraInfoResponse, error)
	GetExtraInfoOnly(ctx context.Context, in *GetExtraInfoOnlyRequest, opts ...grpc.CallOption) (*GetExtraInfoOnlyResponse, error)
	GetExtraInfos(ctx context.Context, in *GetExtraInfosRequest, opts ...grpc.CallOption) (*GetExtraInfosResponse, error)
	ExistExtraInfo(ctx context.Context, in *ExistExtraInfoRequest, opts ...grpc.CallOption) (*ExistExtraInfoResponse, error)
	ExistExtraInfoConds(ctx context.Context, in *ExistExtraInfoCondsRequest, opts ...grpc.CallOption) (*ExistExtraInfoCondsResponse, error)
	CountExtraInfos(ctx context.Context, in *CountExtraInfosRequest, opts ...grpc.CallOption) (*CountExtraInfosResponse, error)
	DeleteExtraInfo(ctx context.Context, in *DeleteExtraInfoRequest, opts ...grpc.CallOption) (*DeleteExtraInfoResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateExtraInfo(ctx context.Context, in *CreateExtraInfoRequest, opts ...grpc.CallOption) (*CreateExtraInfoResponse, error) {
	out := new(CreateExtraInfoResponse)
	err := c.cc.Invoke(ctx, Manager_CreateExtraInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateExtraInfos(ctx context.Context, in *CreateExtraInfosRequest, opts ...grpc.CallOption) (*CreateExtraInfosResponse, error) {
	out := new(CreateExtraInfosResponse)
	err := c.cc.Invoke(ctx, Manager_CreateExtraInfos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateExtraInfo(ctx context.Context, in *UpdateExtraInfoRequest, opts ...grpc.CallOption) (*UpdateExtraInfoResponse, error) {
	out := new(UpdateExtraInfoResponse)
	err := c.cc.Invoke(ctx, Manager_UpdateExtraInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetExtraInfo(ctx context.Context, in *GetExtraInfoRequest, opts ...grpc.CallOption) (*GetExtraInfoResponse, error) {
	out := new(GetExtraInfoResponse)
	err := c.cc.Invoke(ctx, Manager_GetExtraInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetExtraInfoOnly(ctx context.Context, in *GetExtraInfoOnlyRequest, opts ...grpc.CallOption) (*GetExtraInfoOnlyResponse, error) {
	out := new(GetExtraInfoOnlyResponse)
	err := c.cc.Invoke(ctx, Manager_GetExtraInfoOnly_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetExtraInfos(ctx context.Context, in *GetExtraInfosRequest, opts ...grpc.CallOption) (*GetExtraInfosResponse, error) {
	out := new(GetExtraInfosResponse)
	err := c.cc.Invoke(ctx, Manager_GetExtraInfos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistExtraInfo(ctx context.Context, in *ExistExtraInfoRequest, opts ...grpc.CallOption) (*ExistExtraInfoResponse, error) {
	out := new(ExistExtraInfoResponse)
	err := c.cc.Invoke(ctx, Manager_ExistExtraInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistExtraInfoConds(ctx context.Context, in *ExistExtraInfoCondsRequest, opts ...grpc.CallOption) (*ExistExtraInfoCondsResponse, error) {
	out := new(ExistExtraInfoCondsResponse)
	err := c.cc.Invoke(ctx, Manager_ExistExtraInfoConds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountExtraInfos(ctx context.Context, in *CountExtraInfosRequest, opts ...grpc.CallOption) (*CountExtraInfosResponse, error) {
	out := new(CountExtraInfosResponse)
	err := c.cc.Invoke(ctx, Manager_CountExtraInfos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteExtraInfo(ctx context.Context, in *DeleteExtraInfoRequest, opts ...grpc.CallOption) (*DeleteExtraInfoResponse, error) {
	out := new(DeleteExtraInfoResponse)
	err := c.cc.Invoke(ctx, Manager_DeleteExtraInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateExtraInfo(context.Context, *CreateExtraInfoRequest) (*CreateExtraInfoResponse, error)
	CreateExtraInfos(context.Context, *CreateExtraInfosRequest) (*CreateExtraInfosResponse, error)
	UpdateExtraInfo(context.Context, *UpdateExtraInfoRequest) (*UpdateExtraInfoResponse, error)
	GetExtraInfo(context.Context, *GetExtraInfoRequest) (*GetExtraInfoResponse, error)
	GetExtraInfoOnly(context.Context, *GetExtraInfoOnlyRequest) (*GetExtraInfoOnlyResponse, error)
	GetExtraInfos(context.Context, *GetExtraInfosRequest) (*GetExtraInfosResponse, error)
	ExistExtraInfo(context.Context, *ExistExtraInfoRequest) (*ExistExtraInfoResponse, error)
	ExistExtraInfoConds(context.Context, *ExistExtraInfoCondsRequest) (*ExistExtraInfoCondsResponse, error)
	CountExtraInfos(context.Context, *CountExtraInfosRequest) (*CountExtraInfosResponse, error)
	DeleteExtraInfo(context.Context, *DeleteExtraInfoRequest) (*DeleteExtraInfoResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateExtraInfo(context.Context, *CreateExtraInfoRequest) (*CreateExtraInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExtraInfo not implemented")
}
func (UnimplementedManagerServer) CreateExtraInfos(context.Context, *CreateExtraInfosRequest) (*CreateExtraInfosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExtraInfos not implemented")
}
func (UnimplementedManagerServer) UpdateExtraInfo(context.Context, *UpdateExtraInfoRequest) (*UpdateExtraInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExtraInfo not implemented")
}
func (UnimplementedManagerServer) GetExtraInfo(context.Context, *GetExtraInfoRequest) (*GetExtraInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExtraInfo not implemented")
}
func (UnimplementedManagerServer) GetExtraInfoOnly(context.Context, *GetExtraInfoOnlyRequest) (*GetExtraInfoOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExtraInfoOnly not implemented")
}
func (UnimplementedManagerServer) GetExtraInfos(context.Context, *GetExtraInfosRequest) (*GetExtraInfosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExtraInfos not implemented")
}
func (UnimplementedManagerServer) ExistExtraInfo(context.Context, *ExistExtraInfoRequest) (*ExistExtraInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistExtraInfo not implemented")
}
func (UnimplementedManagerServer) ExistExtraInfoConds(context.Context, *ExistExtraInfoCondsRequest) (*ExistExtraInfoCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistExtraInfoConds not implemented")
}
func (UnimplementedManagerServer) CountExtraInfos(context.Context, *CountExtraInfosRequest) (*CountExtraInfosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountExtraInfos not implemented")
}
func (UnimplementedManagerServer) DeleteExtraInfo(context.Context, *DeleteExtraInfoRequest) (*DeleteExtraInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExtraInfo not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateExtraInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExtraInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateExtraInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_CreateExtraInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateExtraInfo(ctx, req.(*CreateExtraInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateExtraInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExtraInfosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateExtraInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_CreateExtraInfos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateExtraInfos(ctx, req.(*CreateExtraInfosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateExtraInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExtraInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateExtraInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_UpdateExtraInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateExtraInfo(ctx, req.(*UpdateExtraInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetExtraInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExtraInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetExtraInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetExtraInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetExtraInfo(ctx, req.(*GetExtraInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetExtraInfoOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExtraInfoOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetExtraInfoOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetExtraInfoOnly_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetExtraInfoOnly(ctx, req.(*GetExtraInfoOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetExtraInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExtraInfosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetExtraInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetExtraInfos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetExtraInfos(ctx, req.(*GetExtraInfosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistExtraInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistExtraInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistExtraInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_ExistExtraInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistExtraInfo(ctx, req.(*ExistExtraInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistExtraInfoConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistExtraInfoCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistExtraInfoConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_ExistExtraInfoConds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistExtraInfoConds(ctx, req.(*ExistExtraInfoCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountExtraInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountExtraInfosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountExtraInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_CountExtraInfos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountExtraInfos(ctx, req.(*CountExtraInfosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteExtraInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExtraInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteExtraInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_DeleteExtraInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteExtraInfo(ctx, req.(*DeleteExtraInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "good.manager.extrainfo.v1.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateExtraInfo",
			Handler:    _Manager_CreateExtraInfo_Handler,
		},
		{
			MethodName: "CreateExtraInfos",
			Handler:    _Manager_CreateExtraInfos_Handler,
		},
		{
			MethodName: "UpdateExtraInfo",
			Handler:    _Manager_UpdateExtraInfo_Handler,
		},
		{
			MethodName: "GetExtraInfo",
			Handler:    _Manager_GetExtraInfo_Handler,
		},
		{
			MethodName: "GetExtraInfoOnly",
			Handler:    _Manager_GetExtraInfoOnly_Handler,
		},
		{
			MethodName: "GetExtraInfos",
			Handler:    _Manager_GetExtraInfos_Handler,
		},
		{
			MethodName: "ExistExtraInfo",
			Handler:    _Manager_ExistExtraInfo_Handler,
		},
		{
			MethodName: "ExistExtraInfoConds",
			Handler:    _Manager_ExistExtraInfoConds_Handler,
		},
		{
			MethodName: "CountExtraInfos",
			Handler:    _Manager_CountExtraInfos_Handler,
		},
		{
			MethodName: "DeleteExtraInfo",
			Handler:    _Manager_DeleteExtraInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/good/mgr/v1/extrainfo/extrainfo.proto",
}
