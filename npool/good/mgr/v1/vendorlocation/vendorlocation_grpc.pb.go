// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/good/mgr/v1/vendorlocation/vendorlocation.proto

package vendorlocation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateVendorLocation(ctx context.Context, in *CreateVendorLocationRequest, opts ...grpc.CallOption) (*CreateVendorLocationResponse, error)
	CreateVendorLocations(ctx context.Context, in *CreateVendorLocationsRequest, opts ...grpc.CallOption) (*CreateVendorLocationsResponse, error)
	GetVendorLocation(ctx context.Context, in *GetVendorLocationRequest, opts ...grpc.CallOption) (*GetVendorLocationResponse, error)
	GetVendorLocationOnly(ctx context.Context, in *GetVendorLocationOnlyRequest, opts ...grpc.CallOption) (*GetVendorLocationOnlyResponse, error)
	GetVendorLocations(ctx context.Context, in *GetVendorLocationsRequest, opts ...grpc.CallOption) (*GetVendorLocationsResponse, error)
	ExistVendorLocation(ctx context.Context, in *ExistVendorLocationRequest, opts ...grpc.CallOption) (*ExistVendorLocationResponse, error)
	ExistVendorLocationConds(ctx context.Context, in *ExistVendorLocationCondsRequest, opts ...grpc.CallOption) (*ExistVendorLocationCondsResponse, error)
	CountVendorLocations(ctx context.Context, in *CountVendorLocationsRequest, opts ...grpc.CallOption) (*CountVendorLocationsResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateVendorLocation(ctx context.Context, in *CreateVendorLocationRequest, opts ...grpc.CallOption) (*CreateVendorLocationResponse, error) {
	out := new(CreateVendorLocationResponse)
	err := c.cc.Invoke(ctx, "/good.manager.vendorlocation.v1.Manager/CreateVendorLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateVendorLocations(ctx context.Context, in *CreateVendorLocationsRequest, opts ...grpc.CallOption) (*CreateVendorLocationsResponse, error) {
	out := new(CreateVendorLocationsResponse)
	err := c.cc.Invoke(ctx, "/good.manager.vendorlocation.v1.Manager/CreateVendorLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetVendorLocation(ctx context.Context, in *GetVendorLocationRequest, opts ...grpc.CallOption) (*GetVendorLocationResponse, error) {
	out := new(GetVendorLocationResponse)
	err := c.cc.Invoke(ctx, "/good.manager.vendorlocation.v1.Manager/GetVendorLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetVendorLocationOnly(ctx context.Context, in *GetVendorLocationOnlyRequest, opts ...grpc.CallOption) (*GetVendorLocationOnlyResponse, error) {
	out := new(GetVendorLocationOnlyResponse)
	err := c.cc.Invoke(ctx, "/good.manager.vendorlocation.v1.Manager/GetVendorLocationOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetVendorLocations(ctx context.Context, in *GetVendorLocationsRequest, opts ...grpc.CallOption) (*GetVendorLocationsResponse, error) {
	out := new(GetVendorLocationsResponse)
	err := c.cc.Invoke(ctx, "/good.manager.vendorlocation.v1.Manager/GetVendorLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistVendorLocation(ctx context.Context, in *ExistVendorLocationRequest, opts ...grpc.CallOption) (*ExistVendorLocationResponse, error) {
	out := new(ExistVendorLocationResponse)
	err := c.cc.Invoke(ctx, "/good.manager.vendorlocation.v1.Manager/ExistVendorLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistVendorLocationConds(ctx context.Context, in *ExistVendorLocationCondsRequest, opts ...grpc.CallOption) (*ExistVendorLocationCondsResponse, error) {
	out := new(ExistVendorLocationCondsResponse)
	err := c.cc.Invoke(ctx, "/good.manager.vendorlocation.v1.Manager/ExistVendorLocationConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountVendorLocations(ctx context.Context, in *CountVendorLocationsRequest, opts ...grpc.CallOption) (*CountVendorLocationsResponse, error) {
	out := new(CountVendorLocationsResponse)
	err := c.cc.Invoke(ctx, "/good.manager.vendorlocation.v1.Manager/CountVendorLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateVendorLocation(context.Context, *CreateVendorLocationRequest) (*CreateVendorLocationResponse, error)
	CreateVendorLocations(context.Context, *CreateVendorLocationsRequest) (*CreateVendorLocationsResponse, error)
	GetVendorLocation(context.Context, *GetVendorLocationRequest) (*GetVendorLocationResponse, error)
	GetVendorLocationOnly(context.Context, *GetVendorLocationOnlyRequest) (*GetVendorLocationOnlyResponse, error)
	GetVendorLocations(context.Context, *GetVendorLocationsRequest) (*GetVendorLocationsResponse, error)
	ExistVendorLocation(context.Context, *ExistVendorLocationRequest) (*ExistVendorLocationResponse, error)
	ExistVendorLocationConds(context.Context, *ExistVendorLocationCondsRequest) (*ExistVendorLocationCondsResponse, error)
	CountVendorLocations(context.Context, *CountVendorLocationsRequest) (*CountVendorLocationsResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateVendorLocation(context.Context, *CreateVendorLocationRequest) (*CreateVendorLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVendorLocation not implemented")
}
func (UnimplementedManagerServer) CreateVendorLocations(context.Context, *CreateVendorLocationsRequest) (*CreateVendorLocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVendorLocations not implemented")
}
func (UnimplementedManagerServer) GetVendorLocation(context.Context, *GetVendorLocationRequest) (*GetVendorLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVendorLocation not implemented")
}
func (UnimplementedManagerServer) GetVendorLocationOnly(context.Context, *GetVendorLocationOnlyRequest) (*GetVendorLocationOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVendorLocationOnly not implemented")
}
func (UnimplementedManagerServer) GetVendorLocations(context.Context, *GetVendorLocationsRequest) (*GetVendorLocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVendorLocations not implemented")
}
func (UnimplementedManagerServer) ExistVendorLocation(context.Context, *ExistVendorLocationRequest) (*ExistVendorLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistVendorLocation not implemented")
}
func (UnimplementedManagerServer) ExistVendorLocationConds(context.Context, *ExistVendorLocationCondsRequest) (*ExistVendorLocationCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistVendorLocationConds not implemented")
}
func (UnimplementedManagerServer) CountVendorLocations(context.Context, *CountVendorLocationsRequest) (*CountVendorLocationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountVendorLocations not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateVendorLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVendorLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateVendorLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.manager.vendorlocation.v1.Manager/CreateVendorLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateVendorLocation(ctx, req.(*CreateVendorLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateVendorLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVendorLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateVendorLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.manager.vendorlocation.v1.Manager/CreateVendorLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateVendorLocations(ctx, req.(*CreateVendorLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetVendorLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVendorLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetVendorLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.manager.vendorlocation.v1.Manager/GetVendorLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetVendorLocation(ctx, req.(*GetVendorLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetVendorLocationOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVendorLocationOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetVendorLocationOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.manager.vendorlocation.v1.Manager/GetVendorLocationOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetVendorLocationOnly(ctx, req.(*GetVendorLocationOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetVendorLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVendorLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetVendorLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.manager.vendorlocation.v1.Manager/GetVendorLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetVendorLocations(ctx, req.(*GetVendorLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistVendorLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistVendorLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistVendorLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.manager.vendorlocation.v1.Manager/ExistVendorLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistVendorLocation(ctx, req.(*ExistVendorLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistVendorLocationConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistVendorLocationCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistVendorLocationConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.manager.vendorlocation.v1.Manager/ExistVendorLocationConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistVendorLocationConds(ctx, req.(*ExistVendorLocationCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountVendorLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountVendorLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountVendorLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.manager.vendorlocation.v1.Manager/CountVendorLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountVendorLocations(ctx, req.(*CountVendorLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "good.manager.vendorlocation.v1.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVendorLocation",
			Handler:    _Manager_CreateVendorLocation_Handler,
		},
		{
			MethodName: "CreateVendorLocations",
			Handler:    _Manager_CreateVendorLocations_Handler,
		},
		{
			MethodName: "GetVendorLocation",
			Handler:    _Manager_GetVendorLocation_Handler,
		},
		{
			MethodName: "GetVendorLocationOnly",
			Handler:    _Manager_GetVendorLocationOnly_Handler,
		},
		{
			MethodName: "GetVendorLocations",
			Handler:    _Manager_GetVendorLocations_Handler,
		},
		{
			MethodName: "ExistVendorLocation",
			Handler:    _Manager_ExistVendorLocation_Handler,
		},
		{
			MethodName: "ExistVendorLocationConds",
			Handler:    _Manager_ExistVendorLocationConds_Handler,
		},
		{
			MethodName: "CountVendorLocations",
			Handler:    _Manager_CountVendorLocations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/good/mgr/v1/vendorlocation/vendorlocation.proto",
}
