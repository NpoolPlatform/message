// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/good/mgr/v1/subgood/subgood.proto

package subgood

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateSubGood(ctx context.Context, in *CreateSubGoodRequest, opts ...grpc.CallOption) (*CreateSubGoodResponse, error)
	CreateSubGoods(ctx context.Context, in *CreateSubGoodsRequest, opts ...grpc.CallOption) (*CreateSubGoodsResponse, error)
	UpdateSubGood(ctx context.Context, in *UpdateSubGoodRequest, opts ...grpc.CallOption) (*UpdateSubGoodResponse, error)
	GetSubGood(ctx context.Context, in *GetSubGoodRequest, opts ...grpc.CallOption) (*GetSubGoodResponse, error)
	GetSubGoodOnly(ctx context.Context, in *GetSubGoodOnlyRequest, opts ...grpc.CallOption) (*GetSubGoodOnlyResponse, error)
	GetSubGoods(ctx context.Context, in *GetSubGoodsRequest, opts ...grpc.CallOption) (*GetSubGoodsResponse, error)
	ExistSubGood(ctx context.Context, in *ExistSubGoodRequest, opts ...grpc.CallOption) (*ExistSubGoodResponse, error)
	ExistSubGoodConds(ctx context.Context, in *ExistSubGoodCondsRequest, opts ...grpc.CallOption) (*ExistSubGoodCondsResponse, error)
	CountSubGoods(ctx context.Context, in *CountSubGoodsRequest, opts ...grpc.CallOption) (*CountSubGoodsResponse, error)
	DeleteSubGood(ctx context.Context, in *DeleteSubGoodRequest, opts ...grpc.CallOption) (*DeleteSubGoodResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateSubGood(ctx context.Context, in *CreateSubGoodRequest, opts ...grpc.CallOption) (*CreateSubGoodResponse, error) {
	out := new(CreateSubGoodResponse)
	err := c.cc.Invoke(ctx, "/good.manager.subgood.v1.Manager/CreateSubGood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateSubGoods(ctx context.Context, in *CreateSubGoodsRequest, opts ...grpc.CallOption) (*CreateSubGoodsResponse, error) {
	out := new(CreateSubGoodsResponse)
	err := c.cc.Invoke(ctx, "/good.manager.subgood.v1.Manager/CreateSubGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateSubGood(ctx context.Context, in *UpdateSubGoodRequest, opts ...grpc.CallOption) (*UpdateSubGoodResponse, error) {
	out := new(UpdateSubGoodResponse)
	err := c.cc.Invoke(ctx, "/good.manager.subgood.v1.Manager/UpdateSubGood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetSubGood(ctx context.Context, in *GetSubGoodRequest, opts ...grpc.CallOption) (*GetSubGoodResponse, error) {
	out := new(GetSubGoodResponse)
	err := c.cc.Invoke(ctx, "/good.manager.subgood.v1.Manager/GetSubGood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetSubGoodOnly(ctx context.Context, in *GetSubGoodOnlyRequest, opts ...grpc.CallOption) (*GetSubGoodOnlyResponse, error) {
	out := new(GetSubGoodOnlyResponse)
	err := c.cc.Invoke(ctx, "/good.manager.subgood.v1.Manager/GetSubGoodOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetSubGoods(ctx context.Context, in *GetSubGoodsRequest, opts ...grpc.CallOption) (*GetSubGoodsResponse, error) {
	out := new(GetSubGoodsResponse)
	err := c.cc.Invoke(ctx, "/good.manager.subgood.v1.Manager/GetSubGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistSubGood(ctx context.Context, in *ExistSubGoodRequest, opts ...grpc.CallOption) (*ExistSubGoodResponse, error) {
	out := new(ExistSubGoodResponse)
	err := c.cc.Invoke(ctx, "/good.manager.subgood.v1.Manager/ExistSubGood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistSubGoodConds(ctx context.Context, in *ExistSubGoodCondsRequest, opts ...grpc.CallOption) (*ExistSubGoodCondsResponse, error) {
	out := new(ExistSubGoodCondsResponse)
	err := c.cc.Invoke(ctx, "/good.manager.subgood.v1.Manager/ExistSubGoodConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountSubGoods(ctx context.Context, in *CountSubGoodsRequest, opts ...grpc.CallOption) (*CountSubGoodsResponse, error) {
	out := new(CountSubGoodsResponse)
	err := c.cc.Invoke(ctx, "/good.manager.subgood.v1.Manager/CountSubGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteSubGood(ctx context.Context, in *DeleteSubGoodRequest, opts ...grpc.CallOption) (*DeleteSubGoodResponse, error) {
	out := new(DeleteSubGoodResponse)
	err := c.cc.Invoke(ctx, "/good.manager.subgood.v1.Manager/DeleteSubGood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateSubGood(context.Context, *CreateSubGoodRequest) (*CreateSubGoodResponse, error)
	CreateSubGoods(context.Context, *CreateSubGoodsRequest) (*CreateSubGoodsResponse, error)
	UpdateSubGood(context.Context, *UpdateSubGoodRequest) (*UpdateSubGoodResponse, error)
	GetSubGood(context.Context, *GetSubGoodRequest) (*GetSubGoodResponse, error)
	GetSubGoodOnly(context.Context, *GetSubGoodOnlyRequest) (*GetSubGoodOnlyResponse, error)
	GetSubGoods(context.Context, *GetSubGoodsRequest) (*GetSubGoodsResponse, error)
	ExistSubGood(context.Context, *ExistSubGoodRequest) (*ExistSubGoodResponse, error)
	ExistSubGoodConds(context.Context, *ExistSubGoodCondsRequest) (*ExistSubGoodCondsResponse, error)
	CountSubGoods(context.Context, *CountSubGoodsRequest) (*CountSubGoodsResponse, error)
	DeleteSubGood(context.Context, *DeleteSubGoodRequest) (*DeleteSubGoodResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateSubGood(context.Context, *CreateSubGoodRequest) (*CreateSubGoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubGood not implemented")
}
func (UnimplementedManagerServer) CreateSubGoods(context.Context, *CreateSubGoodsRequest) (*CreateSubGoodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubGoods not implemented")
}
func (UnimplementedManagerServer) UpdateSubGood(context.Context, *UpdateSubGoodRequest) (*UpdateSubGoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubGood not implemented")
}
func (UnimplementedManagerServer) GetSubGood(context.Context, *GetSubGoodRequest) (*GetSubGoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubGood not implemented")
}
func (UnimplementedManagerServer) GetSubGoodOnly(context.Context, *GetSubGoodOnlyRequest) (*GetSubGoodOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubGoodOnly not implemented")
}
func (UnimplementedManagerServer) GetSubGoods(context.Context, *GetSubGoodsRequest) (*GetSubGoodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubGoods not implemented")
}
func (UnimplementedManagerServer) ExistSubGood(context.Context, *ExistSubGoodRequest) (*ExistSubGoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistSubGood not implemented")
}
func (UnimplementedManagerServer) ExistSubGoodConds(context.Context, *ExistSubGoodCondsRequest) (*ExistSubGoodCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistSubGoodConds not implemented")
}
func (UnimplementedManagerServer) CountSubGoods(context.Context, *CountSubGoodsRequest) (*CountSubGoodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountSubGoods not implemented")
}
func (UnimplementedManagerServer) DeleteSubGood(context.Context, *DeleteSubGoodRequest) (*DeleteSubGoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubGood not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateSubGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateSubGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.manager.subgood.v1.Manager/CreateSubGood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateSubGood(ctx, req.(*CreateSubGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateSubGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubGoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateSubGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.manager.subgood.v1.Manager/CreateSubGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateSubGoods(ctx, req.(*CreateSubGoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateSubGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateSubGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.manager.subgood.v1.Manager/UpdateSubGood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateSubGood(ctx, req.(*UpdateSubGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetSubGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetSubGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.manager.subgood.v1.Manager/GetSubGood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetSubGood(ctx, req.(*GetSubGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetSubGoodOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubGoodOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetSubGoodOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.manager.subgood.v1.Manager/GetSubGoodOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetSubGoodOnly(ctx, req.(*GetSubGoodOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetSubGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubGoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetSubGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.manager.subgood.v1.Manager/GetSubGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetSubGoods(ctx, req.(*GetSubGoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistSubGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistSubGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistSubGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.manager.subgood.v1.Manager/ExistSubGood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistSubGood(ctx, req.(*ExistSubGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistSubGoodConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistSubGoodCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistSubGoodConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.manager.subgood.v1.Manager/ExistSubGoodConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistSubGoodConds(ctx, req.(*ExistSubGoodCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountSubGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountSubGoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountSubGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.manager.subgood.v1.Manager/CountSubGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountSubGoods(ctx, req.(*CountSubGoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteSubGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteSubGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.manager.subgood.v1.Manager/DeleteSubGood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteSubGood(ctx, req.(*DeleteSubGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "good.manager.subgood.v1.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSubGood",
			Handler:    _Manager_CreateSubGood_Handler,
		},
		{
			MethodName: "CreateSubGoods",
			Handler:    _Manager_CreateSubGoods_Handler,
		},
		{
			MethodName: "UpdateSubGood",
			Handler:    _Manager_UpdateSubGood_Handler,
		},
		{
			MethodName: "GetSubGood",
			Handler:    _Manager_GetSubGood_Handler,
		},
		{
			MethodName: "GetSubGoodOnly",
			Handler:    _Manager_GetSubGoodOnly_Handler,
		},
		{
			MethodName: "GetSubGoods",
			Handler:    _Manager_GetSubGoods_Handler,
		},
		{
			MethodName: "ExistSubGood",
			Handler:    _Manager_ExistSubGood_Handler,
		},
		{
			MethodName: "ExistSubGoodConds",
			Handler:    _Manager_ExistSubGoodConds_Handler,
		},
		{
			MethodName: "CountSubGoods",
			Handler:    _Manager_CountSubGoods_Handler,
		},
		{
			MethodName: "DeleteSubGood",
			Handler:    _Manager_DeleteSubGood_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/good/mgr/v1/subgood/subgood.proto",
}
