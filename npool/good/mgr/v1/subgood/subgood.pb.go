// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.18.1
// source: npool/good/mgr/v1/subgood/subgood.proto

package subgood

import (
	npool "github.com/NpoolPlatform/message/npool"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SubGoodReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         *string `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	AppID      *string `protobuf:"bytes,20,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	MainGoodID *string `protobuf:"bytes,30,opt,name=MainGoodID,proto3,oneof" json:"MainGoodID,omitempty"`
	SubGoodID  *string `protobuf:"bytes,40,opt,name=SubGoodID,proto3,oneof" json:"SubGoodID,omitempty"`
	Must       *bool   `protobuf:"varint,50,opt,name=Must,proto3,oneof" json:"Must,omitempty"`
	Commission *bool   `protobuf:"varint,60,opt,name=Commission,proto3,oneof" json:"Commission,omitempty"`
	CreatedAt  *uint32 `protobuf:"varint,70,opt,name=CreatedAt,proto3,oneof" json:"CreatedAt,omitempty"`
}

func (x *SubGoodReq) Reset() {
	*x = SubGoodReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubGoodReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubGoodReq) ProtoMessage() {}

func (x *SubGoodReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubGoodReq.ProtoReflect.Descriptor instead.
func (*SubGoodReq) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_subgood_subgood_proto_rawDescGZIP(), []int{0}
}

func (x *SubGoodReq) GetID() string {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return ""
}

func (x *SubGoodReq) GetAppID() string {
	if x != nil && x.AppID != nil {
		return *x.AppID
	}
	return ""
}

func (x *SubGoodReq) GetMainGoodID() string {
	if x != nil && x.MainGoodID != nil {
		return *x.MainGoodID
	}
	return ""
}

func (x *SubGoodReq) GetSubGoodID() string {
	if x != nil && x.SubGoodID != nil {
		return *x.SubGoodID
	}
	return ""
}

func (x *SubGoodReq) GetMust() bool {
	if x != nil && x.Must != nil {
		return *x.Must
	}
	return false
}

func (x *SubGoodReq) GetCommission() bool {
	if x != nil && x.Commission != nil {
		return *x.Commission
	}
	return false
}

func (x *SubGoodReq) GetCreatedAt() uint32 {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return 0
}

type SubGood struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID      string `protobuf:"bytes,20,opt,name=AppID,proto3" json:"AppID,omitempty"`
	MainGoodID string `protobuf:"bytes,30,opt,name=MainGoodID,proto3" json:"MainGoodID,omitempty"`
	SubGoodID  string `protobuf:"bytes,40,opt,name=SubGoodID,proto3" json:"SubGoodID,omitempty"`
	Must       bool   `protobuf:"varint,50,opt,name=Must,proto3" json:"Must,omitempty"`
	Commission bool   `protobuf:"varint,60,opt,name=Commission,proto3" json:"Commission,omitempty"`
	CreatedAt  uint32 `protobuf:"varint,70,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt  uint32 `protobuf:"varint,80,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	DeletedAt  uint32 `protobuf:"varint,90,opt,name=DeletedAt,proto3" json:"DeletedAt,omitempty"`
}

func (x *SubGood) Reset() {
	*x = SubGood{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubGood) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubGood) ProtoMessage() {}

func (x *SubGood) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubGood.ProtoReflect.Descriptor instead.
func (*SubGood) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_subgood_subgood_proto_rawDescGZIP(), []int{1}
}

func (x *SubGood) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *SubGood) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *SubGood) GetMainGoodID() string {
	if x != nil {
		return x.MainGoodID
	}
	return ""
}

func (x *SubGood) GetSubGoodID() string {
	if x != nil {
		return x.SubGoodID
	}
	return ""
}

func (x *SubGood) GetMust() bool {
	if x != nil {
		return x.Must
	}
	return false
}

func (x *SubGood) GetCommission() bool {
	if x != nil {
		return x.Commission
	}
	return false
}

func (x *SubGood) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *SubGood) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *SubGood) GetDeletedAt() uint32 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          *npool.StringVal      `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	MainGoodID  *npool.StringVal      `protobuf:"bytes,20,opt,name=MainGoodID,proto3,oneof" json:"MainGoodID,omitempty"`
	SubGoodID   *npool.StringVal      `protobuf:"bytes,21,opt,name=SubGoodID,proto3,oneof" json:"SubGoodID,omitempty"`
	MainGoodIDs *npool.StringSliceVal `protobuf:"bytes,30,opt,name=MainGoodIDs,proto3,oneof" json:"MainGoodIDs,omitempty"`
	AppID       *npool.StringVal      `protobuf:"bytes,40,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_subgood_subgood_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *npool.StringVal {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetMainGoodID() *npool.StringVal {
	if x != nil {
		return x.MainGoodID
	}
	return nil
}

func (x *Conds) GetSubGoodID() *npool.StringVal {
	if x != nil {
		return x.SubGoodID
	}
	return nil
}

func (x *Conds) GetMainGoodIDs() *npool.StringSliceVal {
	if x != nil {
		return x.MainGoodIDs
	}
	return nil
}

func (x *Conds) GetAppID() *npool.StringVal {
	if x != nil {
		return x.AppID
	}
	return nil
}

type CreateSubGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *SubGoodReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateSubGoodRequest) Reset() {
	*x = CreateSubGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubGoodRequest) ProtoMessage() {}

func (x *CreateSubGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubGoodRequest.ProtoReflect.Descriptor instead.
func (*CreateSubGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_subgood_subgood_proto_rawDescGZIP(), []int{3}
}

func (x *CreateSubGoodRequest) GetInfo() *SubGoodReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateSubGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *SubGood `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateSubGoodResponse) Reset() {
	*x = CreateSubGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubGoodResponse) ProtoMessage() {}

func (x *CreateSubGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubGoodResponse.ProtoReflect.Descriptor instead.
func (*CreateSubGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_subgood_subgood_proto_rawDescGZIP(), []int{4}
}

func (x *CreateSubGoodResponse) GetInfo() *SubGood {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateSubGoodsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*SubGoodReq `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateSubGoodsRequest) Reset() {
	*x = CreateSubGoodsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubGoodsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubGoodsRequest) ProtoMessage() {}

func (x *CreateSubGoodsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubGoodsRequest.ProtoReflect.Descriptor instead.
func (*CreateSubGoodsRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_subgood_subgood_proto_rawDescGZIP(), []int{5}
}

func (x *CreateSubGoodsRequest) GetInfos() []*SubGoodReq {
	if x != nil {
		return x.Infos
	}
	return nil
}

type CreateSubGoodsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*SubGood `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateSubGoodsResponse) Reset() {
	*x = CreateSubGoodsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSubGoodsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSubGoodsResponse) ProtoMessage() {}

func (x *CreateSubGoodsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSubGoodsResponse.ProtoReflect.Descriptor instead.
func (*CreateSubGoodsResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_subgood_subgood_proto_rawDescGZIP(), []int{6}
}

func (x *CreateSubGoodsResponse) GetInfos() []*SubGood {
	if x != nil {
		return x.Infos
	}
	return nil
}

type UpdateSubGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *SubGoodReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateSubGoodRequest) Reset() {
	*x = UpdateSubGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubGoodRequest) ProtoMessage() {}

func (x *UpdateSubGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubGoodRequest.ProtoReflect.Descriptor instead.
func (*UpdateSubGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_subgood_subgood_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateSubGoodRequest) GetInfo() *SubGoodReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateSubGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *SubGood `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateSubGoodResponse) Reset() {
	*x = UpdateSubGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubGoodResponse) ProtoMessage() {}

func (x *UpdateSubGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubGoodResponse.ProtoReflect.Descriptor instead.
func (*UpdateSubGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_subgood_subgood_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateSubGoodResponse) GetInfo() *SubGood {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetSubGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetSubGoodRequest) Reset() {
	*x = GetSubGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubGoodRequest) ProtoMessage() {}

func (x *GetSubGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubGoodRequest.ProtoReflect.Descriptor instead.
func (*GetSubGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_subgood_subgood_proto_rawDescGZIP(), []int{9}
}

func (x *GetSubGoodRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetSubGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *SubGood `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetSubGoodResponse) Reset() {
	*x = GetSubGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubGoodResponse) ProtoMessage() {}

func (x *GetSubGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubGoodResponse.ProtoReflect.Descriptor instead.
func (*GetSubGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_subgood_subgood_proto_rawDescGZIP(), []int{10}
}

func (x *GetSubGoodResponse) GetInfo() *SubGood {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetSubGoodsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetSubGoodsRequest) Reset() {
	*x = GetSubGoodsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubGoodsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubGoodsRequest) ProtoMessage() {}

func (x *GetSubGoodsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubGoodsRequest.ProtoReflect.Descriptor instead.
func (*GetSubGoodsRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_subgood_subgood_proto_rawDescGZIP(), []int{11}
}

func (x *GetSubGoodsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetSubGoodsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetSubGoodsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetSubGoodsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*SubGood `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32     `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetSubGoodsResponse) Reset() {
	*x = GetSubGoodsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubGoodsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubGoodsResponse) ProtoMessage() {}

func (x *GetSubGoodsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubGoodsResponse.ProtoReflect.Descriptor instead.
func (*GetSubGoodsResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_subgood_subgood_proto_rawDescGZIP(), []int{12}
}

func (x *GetSubGoodsResponse) GetInfos() []*SubGood {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetSubGoodsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetSubGoodOnlyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *GetSubGoodOnlyRequest) Reset() {
	*x = GetSubGoodOnlyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubGoodOnlyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubGoodOnlyRequest) ProtoMessage() {}

func (x *GetSubGoodOnlyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubGoodOnlyRequest.ProtoReflect.Descriptor instead.
func (*GetSubGoodOnlyRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_subgood_subgood_proto_rawDescGZIP(), []int{13}
}

func (x *GetSubGoodOnlyRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type GetSubGoodOnlyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *SubGood `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetSubGoodOnlyResponse) Reset() {
	*x = GetSubGoodOnlyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubGoodOnlyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubGoodOnlyResponse) ProtoMessage() {}

func (x *GetSubGoodOnlyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubGoodOnlyResponse.ProtoReflect.Descriptor instead.
func (*GetSubGoodOnlyResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_subgood_subgood_proto_rawDescGZIP(), []int{14}
}

func (x *GetSubGoodOnlyResponse) GetInfo() *SubGood {
	if x != nil {
		return x.Info
	}
	return nil
}

type ExistSubGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ExistSubGoodRequest) Reset() {
	*x = ExistSubGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistSubGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistSubGoodRequest) ProtoMessage() {}

func (x *ExistSubGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistSubGoodRequest.ProtoReflect.Descriptor instead.
func (*ExistSubGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_subgood_subgood_proto_rawDescGZIP(), []int{15}
}

func (x *ExistSubGoodRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ExistSubGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistSubGoodResponse) Reset() {
	*x = ExistSubGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistSubGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistSubGoodResponse) ProtoMessage() {}

func (x *ExistSubGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistSubGoodResponse.ProtoReflect.Descriptor instead.
func (*ExistSubGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_subgood_subgood_proto_rawDescGZIP(), []int{16}
}

func (x *ExistSubGoodResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type ExistSubGoodCondsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *ExistSubGoodCondsRequest) Reset() {
	*x = ExistSubGoodCondsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistSubGoodCondsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistSubGoodCondsRequest) ProtoMessage() {}

func (x *ExistSubGoodCondsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistSubGoodCondsRequest.ProtoReflect.Descriptor instead.
func (*ExistSubGoodCondsRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_subgood_subgood_proto_rawDescGZIP(), []int{17}
}

func (x *ExistSubGoodCondsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type ExistSubGoodCondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistSubGoodCondsResponse) Reset() {
	*x = ExistSubGoodCondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistSubGoodCondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistSubGoodCondsResponse) ProtoMessage() {}

func (x *ExistSubGoodCondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistSubGoodCondsResponse.ProtoReflect.Descriptor instead.
func (*ExistSubGoodCondsResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_subgood_subgood_proto_rawDescGZIP(), []int{18}
}

func (x *ExistSubGoodCondsResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type CountSubGoodsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *CountSubGoodsRequest) Reset() {
	*x = CountSubGoodsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountSubGoodsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountSubGoodsRequest) ProtoMessage() {}

func (x *CountSubGoodsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountSubGoodsRequest.ProtoReflect.Descriptor instead.
func (*CountSubGoodsRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_subgood_subgood_proto_rawDescGZIP(), []int{19}
}

func (x *CountSubGoodsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type CountSubGoodsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info uint32 `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CountSubGoodsResponse) Reset() {
	*x = CountSubGoodsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountSubGoodsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountSubGoodsResponse) ProtoMessage() {}

func (x *CountSubGoodsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountSubGoodsResponse.ProtoReflect.Descriptor instead.
func (*CountSubGoodsResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_subgood_subgood_proto_rawDescGZIP(), []int{20}
}

func (x *CountSubGoodsResponse) GetInfo() uint32 {
	if x != nil {
		return x.Info
	}
	return 0
}

type DeleteSubGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *DeleteSubGoodRequest) Reset() {
	*x = DeleteSubGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubGoodRequest) ProtoMessage() {}

func (x *DeleteSubGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubGoodRequest.ProtoReflect.Descriptor instead.
func (*DeleteSubGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_subgood_subgood_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteSubGoodRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type DeleteSubGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *SubGood `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteSubGoodResponse) Reset() {
	*x = DeleteSubGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubGoodResponse) ProtoMessage() {}

func (x *DeleteSubGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubGoodResponse.ProtoReflect.Descriptor instead.
func (*DeleteSubGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_subgood_subgood_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteSubGoodResponse) GetInfo() *SubGood {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_good_mgr_v1_subgood_subgood_proto protoreflect.FileDescriptor

var file_npool_good_mgr_v1_subgood_subgood_proto_rawDesc = []byte{
	0x0a, 0x27, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x6d, 0x67, 0x72,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75, 0x62, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x73, 0x75, 0x62, 0x67,
	0x6f, 0x6f, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x73, 0x75, 0x62, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x11, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xb9, 0x02, 0x0a, 0x0a, 0x53, 0x75, 0x62, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65,
	0x71, 0x12, 0x13, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x23, 0x0a, 0x0a, 0x4d, 0x61, 0x69, 0x6e, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x4d, 0x61, 0x69, 0x6e, 0x47, 0x6f, 0x6f,
	0x64, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x47, 0x6f, 0x6f,
	0x64, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x53, 0x75, 0x62,
	0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x4d, 0x75, 0x73,
	0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x04, 0x4d, 0x75, 0x73, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x3c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x06, 0x52, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49,
	0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x41, 0x70, 0x70, 0x49, 0x44, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x4d, 0x61, 0x69, 0x6e, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x53,
	0x75, 0x62, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x4d, 0x75, 0x73,
	0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xfb,
	0x01, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x61, 0x69, 0x6e, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x61, 0x69, 0x6e, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x75, 0x62, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x4d, 0x75, 0x73, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x4d, 0x75,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x3c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x46, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x50, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x5a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xd2, 0x02, 0x0a,
	0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01,
	0x12, 0x38, 0x0a, 0x0a, 0x4d, 0x61, 0x69, 0x6e, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x0a, 0x4d, 0x61, 0x69,
	0x6e, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x09, 0x53, 0x75,
	0x62, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x48, 0x02, 0x52, 0x09, 0x53, 0x75, 0x62, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0b, 0x4d, 0x61, 0x69, 0x6e, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44,
	0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61,
	0x6c, 0x48, 0x03, 0x52, 0x0b, 0x4d, 0x61, 0x69, 0x6e, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x04, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x4d,
	0x61, 0x69, 0x6e, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x53, 0x75,
	0x62, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x4d, 0x61, 0x69, 0x6e,
	0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x22, 0x4f, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x47, 0x6f,
	0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x73, 0x75, 0x62, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x75, 0x62, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x4d, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x47,
	0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x73, 0x75, 0x62, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x52, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x05, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x73, 0x75, 0x62, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x52, 0x05,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x50, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x75, 0x62, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x36, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x73, 0x75,
	0x62, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x47, 0x6f, 0x6f, 0x64,
	0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x4f, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x75, 0x62, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x37, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x73, 0x75, 0x62,
	0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x47, 0x6f, 0x6f, 0x64, 0x52,
	0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4d, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x75, 0x62, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x34, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x73,
	0x75, 0x62, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x47, 0x6f, 0x6f,
	0x64, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x23, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x62, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x4a, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x73, 0x75, 0x62, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x47, 0x6f,
	0x6f, 0x64, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x78, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34,
	0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x73, 0x75, 0x62,
	0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0x63, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x73, 0x75, 0x62, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x4d, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x62, 0x47, 0x6f, 0x6f, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x34, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x73,
	0x75, 0x62, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52,
	0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x4e, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x47, 0x6f, 0x6f, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x34, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x73, 0x75,
	0x62, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x47, 0x6f, 0x6f, 0x64,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x25, 0x0a, 0x13, 0x45, 0x78, 0x69, 0x73, 0x74, 0x53,
	0x75, 0x62, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x2a, 0x0a,
	0x14, 0x45, 0x78, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x50, 0x0a, 0x18, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x53, 0x75, 0x62, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x73, 0x75, 0x62, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x2f, 0x0a, 0x19, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4c, 0x0a, 0x14,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x73, 0x75, 0x62, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x2b, 0x0a, 0x15, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x26, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x75, 0x62, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22,
	0x4d, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x47, 0x6f, 0x6f, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x73, 0x75, 0x62, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x75, 0x62, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0xfd,
	0x08, 0x0a, 0x07, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x70, 0x0a, 0x0d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x2d, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x73, 0x75, 0x62, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x47,
	0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x73, 0x75, 0x62, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x47, 0x6f,
	0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x0e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x2e,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x73, 0x75,
	0x62, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x75, 0x62, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x73, 0x75,
	0x62, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x75, 0x62, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x70, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x47, 0x6f,
	0x6f, 0x64, 0x12, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x73, 0x75, 0x62, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x73, 0x75, 0x62, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x75, 0x62, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x47, 0x6f, 0x6f,
	0x64, 0x12, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x73, 0x75, 0x62, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x73, 0x75, 0x62,
	0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x47, 0x6f,
	0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x47, 0x6f, 0x6f, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x2e,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x73, 0x75,
	0x62, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x47,
	0x6f, 0x6f, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x73, 0x75,
	0x62, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x47,
	0x6f, 0x6f, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x6a, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x12, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x73, 0x75, 0x62, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75,
	0x62, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x73, 0x75, 0x62,
	0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a,
	0x0c, 0x45, 0x78, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x2c, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x73, 0x75, 0x62,
	0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62,
	0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x73, 0x75, 0x62, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x47, 0x6f,
	0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x11,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x12, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x73, 0x75, 0x62, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x53, 0x75, 0x62, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x73, 0x75, 0x62, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x0d, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x2d, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x73, 0x75, 0x62, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x73, 0x75, 0x62, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x53, 0x75, 0x62, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x0d,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x2d, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x73, 0x75, 0x62,
	0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75,
	0x62, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x73, 0x75, 0x62, 0x67,
	0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62,
	0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3c,
	0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f,
	0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x6d, 0x67,
	0x72, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x75, 0x62, 0x67, 0x6f, 0x6f, 0x64, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_good_mgr_v1_subgood_subgood_proto_rawDescOnce sync.Once
	file_npool_good_mgr_v1_subgood_subgood_proto_rawDescData = file_npool_good_mgr_v1_subgood_subgood_proto_rawDesc
)

func file_npool_good_mgr_v1_subgood_subgood_proto_rawDescGZIP() []byte {
	file_npool_good_mgr_v1_subgood_subgood_proto_rawDescOnce.Do(func() {
		file_npool_good_mgr_v1_subgood_subgood_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_good_mgr_v1_subgood_subgood_proto_rawDescData)
	})
	return file_npool_good_mgr_v1_subgood_subgood_proto_rawDescData
}

var file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_npool_good_mgr_v1_subgood_subgood_proto_goTypes = []interface{}{
	(*SubGoodReq)(nil),                // 0: good.manager.subgood.v1.SubGoodReq
	(*SubGood)(nil),                   // 1: good.manager.subgood.v1.SubGood
	(*Conds)(nil),                     // 2: good.manager.subgood.v1.Conds
	(*CreateSubGoodRequest)(nil),      // 3: good.manager.subgood.v1.CreateSubGoodRequest
	(*CreateSubGoodResponse)(nil),     // 4: good.manager.subgood.v1.CreateSubGoodResponse
	(*CreateSubGoodsRequest)(nil),     // 5: good.manager.subgood.v1.CreateSubGoodsRequest
	(*CreateSubGoodsResponse)(nil),    // 6: good.manager.subgood.v1.CreateSubGoodsResponse
	(*UpdateSubGoodRequest)(nil),      // 7: good.manager.subgood.v1.UpdateSubGoodRequest
	(*UpdateSubGoodResponse)(nil),     // 8: good.manager.subgood.v1.UpdateSubGoodResponse
	(*GetSubGoodRequest)(nil),         // 9: good.manager.subgood.v1.GetSubGoodRequest
	(*GetSubGoodResponse)(nil),        // 10: good.manager.subgood.v1.GetSubGoodResponse
	(*GetSubGoodsRequest)(nil),        // 11: good.manager.subgood.v1.GetSubGoodsRequest
	(*GetSubGoodsResponse)(nil),       // 12: good.manager.subgood.v1.GetSubGoodsResponse
	(*GetSubGoodOnlyRequest)(nil),     // 13: good.manager.subgood.v1.GetSubGoodOnlyRequest
	(*GetSubGoodOnlyResponse)(nil),    // 14: good.manager.subgood.v1.GetSubGoodOnlyResponse
	(*ExistSubGoodRequest)(nil),       // 15: good.manager.subgood.v1.ExistSubGoodRequest
	(*ExistSubGoodResponse)(nil),      // 16: good.manager.subgood.v1.ExistSubGoodResponse
	(*ExistSubGoodCondsRequest)(nil),  // 17: good.manager.subgood.v1.ExistSubGoodCondsRequest
	(*ExistSubGoodCondsResponse)(nil), // 18: good.manager.subgood.v1.ExistSubGoodCondsResponse
	(*CountSubGoodsRequest)(nil),      // 19: good.manager.subgood.v1.CountSubGoodsRequest
	(*CountSubGoodsResponse)(nil),     // 20: good.manager.subgood.v1.CountSubGoodsResponse
	(*DeleteSubGoodRequest)(nil),      // 21: good.manager.subgood.v1.DeleteSubGoodRequest
	(*DeleteSubGoodResponse)(nil),     // 22: good.manager.subgood.v1.DeleteSubGoodResponse
	(*npool.StringVal)(nil),           // 23: npool.v1.StringVal
	(*npool.StringSliceVal)(nil),      // 24: npool.v1.StringSliceVal
}
var file_npool_good_mgr_v1_subgood_subgood_proto_depIdxs = []int32{
	23, // 0: good.manager.subgood.v1.Conds.ID:type_name -> npool.v1.StringVal
	23, // 1: good.manager.subgood.v1.Conds.MainGoodID:type_name -> npool.v1.StringVal
	23, // 2: good.manager.subgood.v1.Conds.SubGoodID:type_name -> npool.v1.StringVal
	24, // 3: good.manager.subgood.v1.Conds.MainGoodIDs:type_name -> npool.v1.StringSliceVal
	23, // 4: good.manager.subgood.v1.Conds.AppID:type_name -> npool.v1.StringVal
	0,  // 5: good.manager.subgood.v1.CreateSubGoodRequest.Info:type_name -> good.manager.subgood.v1.SubGoodReq
	1,  // 6: good.manager.subgood.v1.CreateSubGoodResponse.Info:type_name -> good.manager.subgood.v1.SubGood
	0,  // 7: good.manager.subgood.v1.CreateSubGoodsRequest.Infos:type_name -> good.manager.subgood.v1.SubGoodReq
	1,  // 8: good.manager.subgood.v1.CreateSubGoodsResponse.Infos:type_name -> good.manager.subgood.v1.SubGood
	0,  // 9: good.manager.subgood.v1.UpdateSubGoodRequest.Info:type_name -> good.manager.subgood.v1.SubGoodReq
	1,  // 10: good.manager.subgood.v1.UpdateSubGoodResponse.Info:type_name -> good.manager.subgood.v1.SubGood
	1,  // 11: good.manager.subgood.v1.GetSubGoodResponse.Info:type_name -> good.manager.subgood.v1.SubGood
	2,  // 12: good.manager.subgood.v1.GetSubGoodsRequest.Conds:type_name -> good.manager.subgood.v1.Conds
	1,  // 13: good.manager.subgood.v1.GetSubGoodsResponse.Infos:type_name -> good.manager.subgood.v1.SubGood
	2,  // 14: good.manager.subgood.v1.GetSubGoodOnlyRequest.Conds:type_name -> good.manager.subgood.v1.Conds
	1,  // 15: good.manager.subgood.v1.GetSubGoodOnlyResponse.Info:type_name -> good.manager.subgood.v1.SubGood
	2,  // 16: good.manager.subgood.v1.ExistSubGoodCondsRequest.Conds:type_name -> good.manager.subgood.v1.Conds
	2,  // 17: good.manager.subgood.v1.CountSubGoodsRequest.Conds:type_name -> good.manager.subgood.v1.Conds
	1,  // 18: good.manager.subgood.v1.DeleteSubGoodResponse.Info:type_name -> good.manager.subgood.v1.SubGood
	3,  // 19: good.manager.subgood.v1.Manager.CreateSubGood:input_type -> good.manager.subgood.v1.CreateSubGoodRequest
	5,  // 20: good.manager.subgood.v1.Manager.CreateSubGoods:input_type -> good.manager.subgood.v1.CreateSubGoodsRequest
	7,  // 21: good.manager.subgood.v1.Manager.UpdateSubGood:input_type -> good.manager.subgood.v1.UpdateSubGoodRequest
	9,  // 22: good.manager.subgood.v1.Manager.GetSubGood:input_type -> good.manager.subgood.v1.GetSubGoodRequest
	13, // 23: good.manager.subgood.v1.Manager.GetSubGoodOnly:input_type -> good.manager.subgood.v1.GetSubGoodOnlyRequest
	11, // 24: good.manager.subgood.v1.Manager.GetSubGoods:input_type -> good.manager.subgood.v1.GetSubGoodsRequest
	15, // 25: good.manager.subgood.v1.Manager.ExistSubGood:input_type -> good.manager.subgood.v1.ExistSubGoodRequest
	17, // 26: good.manager.subgood.v1.Manager.ExistSubGoodConds:input_type -> good.manager.subgood.v1.ExistSubGoodCondsRequest
	19, // 27: good.manager.subgood.v1.Manager.CountSubGoods:input_type -> good.manager.subgood.v1.CountSubGoodsRequest
	21, // 28: good.manager.subgood.v1.Manager.DeleteSubGood:input_type -> good.manager.subgood.v1.DeleteSubGoodRequest
	4,  // 29: good.manager.subgood.v1.Manager.CreateSubGood:output_type -> good.manager.subgood.v1.CreateSubGoodResponse
	6,  // 30: good.manager.subgood.v1.Manager.CreateSubGoods:output_type -> good.manager.subgood.v1.CreateSubGoodsResponse
	8,  // 31: good.manager.subgood.v1.Manager.UpdateSubGood:output_type -> good.manager.subgood.v1.UpdateSubGoodResponse
	10, // 32: good.manager.subgood.v1.Manager.GetSubGood:output_type -> good.manager.subgood.v1.GetSubGoodResponse
	14, // 33: good.manager.subgood.v1.Manager.GetSubGoodOnly:output_type -> good.manager.subgood.v1.GetSubGoodOnlyResponse
	12, // 34: good.manager.subgood.v1.Manager.GetSubGoods:output_type -> good.manager.subgood.v1.GetSubGoodsResponse
	16, // 35: good.manager.subgood.v1.Manager.ExistSubGood:output_type -> good.manager.subgood.v1.ExistSubGoodResponse
	18, // 36: good.manager.subgood.v1.Manager.ExistSubGoodConds:output_type -> good.manager.subgood.v1.ExistSubGoodCondsResponse
	20, // 37: good.manager.subgood.v1.Manager.CountSubGoods:output_type -> good.manager.subgood.v1.CountSubGoodsResponse
	22, // 38: good.manager.subgood.v1.Manager.DeleteSubGood:output_type -> good.manager.subgood.v1.DeleteSubGoodResponse
	29, // [29:39] is the sub-list for method output_type
	19, // [19:29] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_npool_good_mgr_v1_subgood_subgood_proto_init() }
func file_npool_good_mgr_v1_subgood_subgood_proto_init() {
	if File_npool_good_mgr_v1_subgood_subgood_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubGoodReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubGood); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSubGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSubGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSubGoodsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSubGoodsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubGoodsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubGoodsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubGoodOnlyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubGoodOnlyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistSubGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistSubGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistSubGoodCondsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistSubGoodCondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountSubGoodsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountSubGoodsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_good_mgr_v1_subgood_subgood_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_good_mgr_v1_subgood_subgood_proto_goTypes,
		DependencyIndexes: file_npool_good_mgr_v1_subgood_subgood_proto_depIdxs,
		MessageInfos:      file_npool_good_mgr_v1_subgood_subgood_proto_msgTypes,
	}.Build()
	File_npool_good_mgr_v1_subgood_subgood_proto = out.File
	file_npool_good_mgr_v1_subgood_subgood_proto_rawDesc = nil
	file_npool_good_mgr_v1_subgood_subgood_proto_goTypes = nil
	file_npool_good_mgr_v1_subgood_subgood_proto_depIdxs = nil
}
