// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: npool/good/mgr/v1/good/good.proto

package good

import (
	npool "github.com/NpoolPlatform/message/npool"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BenefitType int32

const (
	BenefitType_DefaultBenefitType BenefitType = 0
	// Platform receive benefit, then distribute benefit to user
	BenefitType_BenefitTypePlatform BenefitType = 10
	// User receive benefit from pool directly
	BenefitType_BenefitTypePool BenefitType = 20
)

// Enum value maps for BenefitType.
var (
	BenefitType_name = map[int32]string{
		0:  "DefaultBenefitType",
		10: "BenefitTypePlatform",
		20: "BenefitTypePool",
	}
	BenefitType_value = map[string]int32{
		"DefaultBenefitType":  0,
		"BenefitTypePlatform": 10,
		"BenefitTypePool":     20,
	}
)

func (x BenefitType) Enum() *BenefitType {
	p := new(BenefitType)
	*p = x
	return p
}

func (x BenefitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BenefitType) Descriptor() protoreflect.EnumDescriptor {
	return file_npool_good_mgr_v1_good_good_proto_enumTypes[0].Descriptor()
}

func (BenefitType) Type() protoreflect.EnumType {
	return &file_npool_good_mgr_v1_good_good_proto_enumTypes[0]
}

func (x BenefitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BenefitType.Descriptor instead.
func (BenefitType) EnumDescriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_good_good_proto_rawDescGZIP(), []int{0}
}

type GoodType int32

const (
	GoodType_DefaultGoodType GoodType = 0
	// Classic good: user pay for both device and other material, get all benefit
	GoodType_GoodTypeClassicMining GoodType = 10
	// Union good: user pay for a part of material, get part of benefit
	GoodType_GoodTypeUnionMining GoodType = 20
	// Fee good
	GoodType_GoodTypeTechniqueFee   GoodType = 30
	GoodType_GoodTypeElectricityFee GoodType = 40
)

// Enum value maps for GoodType.
var (
	GoodType_name = map[int32]string{
		0:  "DefaultGoodType",
		10: "GoodTypeClassicMining",
		20: "GoodTypeUnionMining",
		30: "GoodTypeTechniqueFee",
		40: "GoodTypeElectricityFee",
	}
	GoodType_value = map[string]int32{
		"DefaultGoodType":        0,
		"GoodTypeClassicMining":  10,
		"GoodTypeUnionMining":    20,
		"GoodTypeTechniqueFee":   30,
		"GoodTypeElectricityFee": 40,
	}
)

func (x GoodType) Enum() *GoodType {
	p := new(GoodType)
	*p = x
	return p
}

func (x GoodType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GoodType) Descriptor() protoreflect.EnumDescriptor {
	return file_npool_good_mgr_v1_good_good_proto_enumTypes[1].Descriptor()
}

func (GoodType) Type() protoreflect.EnumType {
	return &file_npool_good_mgr_v1_good_good_proto_enumTypes[1]
}

func (x GoodType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GoodType.Descriptor instead.
func (GoodType) EnumDescriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_good_good_proto_rawDescGZIP(), []int{1}
}

type GoodReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                *string      `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	DeviceInfoID      *string      `protobuf:"bytes,20,opt,name=DeviceInfoID,proto3,oneof" json:"DeviceInfoID,omitempty"`
	DurationDays      *int32       `protobuf:"varint,30,opt,name=DurationDays,proto3,oneof" json:"DurationDays,omitempty"`
	CoinTypeID        *string      `protobuf:"bytes,40,opt,name=CoinTypeID,proto3,oneof" json:"CoinTypeID,omitempty"`
	InheritFromGoodID *string      `protobuf:"bytes,50,opt,name=InheritFromGoodID,proto3,oneof" json:"InheritFromGoodID,omitempty"`
	VendorLocationID  *string      `protobuf:"bytes,60,opt,name=VendorLocationID,proto3,oneof" json:"VendorLocationID,omitempty"`
	Price             *string      `protobuf:"bytes,70,opt,name=Price,proto3,oneof" json:"Price,omitempty"`
	BenefitType       *BenefitType `protobuf:"varint,80,opt,name=BenefitType,proto3,enum=good.manager.good.v1.BenefitType,oneof" json:"BenefitType,omitempty"`
	GoodType          *GoodType    `protobuf:"varint,90,opt,name=GoodType,proto3,enum=good.manager.good.v1.GoodType,oneof" json:"GoodType,omitempty"`
	Title             *string      `protobuf:"bytes,100,opt,name=Title,proto3,oneof" json:"Title,omitempty"`
	Unit              *string      `protobuf:"bytes,110,opt,name=Unit,proto3,oneof" json:"Unit,omitempty"`
	// For normal good, it's unit amount, or a percent
	UnitAmount *int32 `protobuf:"varint,120,opt,name=UnitAmount,proto3,oneof" json:"UnitAmount,omitempty"`
	// Except the main coin type mining, this device also support multiple coin type mining
	SupportCoinTypeIDs []string `protobuf:"bytes,130,rep,name=SupportCoinTypeIDs,proto3" json:"SupportCoinTypeIDs,omitempty"`
	DeliveryAt         *uint32  `protobuf:"varint,140,opt,name=DeliveryAt,proto3,oneof" json:"DeliveryAt,omitempty"`
	StartAt            *uint32  `protobuf:"varint,150,opt,name=StartAt,proto3,oneof" json:"StartAt,omitempty"`
	TestOnly           *bool    `protobuf:"varint,160,opt,name=TestOnly,proto3,oneof" json:"TestOnly,omitempty"`
}

func (x *GoodReq) Reset() {
	*x = GoodReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_good_good_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodReq) ProtoMessage() {}

func (x *GoodReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_good_good_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodReq.ProtoReflect.Descriptor instead.
func (*GoodReq) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_good_good_proto_rawDescGZIP(), []int{0}
}

func (x *GoodReq) GetID() string {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return ""
}

func (x *GoodReq) GetDeviceInfoID() string {
	if x != nil && x.DeviceInfoID != nil {
		return *x.DeviceInfoID
	}
	return ""
}

func (x *GoodReq) GetDurationDays() int32 {
	if x != nil && x.DurationDays != nil {
		return *x.DurationDays
	}
	return 0
}

func (x *GoodReq) GetCoinTypeID() string {
	if x != nil && x.CoinTypeID != nil {
		return *x.CoinTypeID
	}
	return ""
}

func (x *GoodReq) GetInheritFromGoodID() string {
	if x != nil && x.InheritFromGoodID != nil {
		return *x.InheritFromGoodID
	}
	return ""
}

func (x *GoodReq) GetVendorLocationID() string {
	if x != nil && x.VendorLocationID != nil {
		return *x.VendorLocationID
	}
	return ""
}

func (x *GoodReq) GetPrice() string {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return ""
}

func (x *GoodReq) GetBenefitType() BenefitType {
	if x != nil && x.BenefitType != nil {
		return *x.BenefitType
	}
	return BenefitType_DefaultBenefitType
}

func (x *GoodReq) GetGoodType() GoodType {
	if x != nil && x.GoodType != nil {
		return *x.GoodType
	}
	return GoodType_DefaultGoodType
}

func (x *GoodReq) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *GoodReq) GetUnit() string {
	if x != nil && x.Unit != nil {
		return *x.Unit
	}
	return ""
}

func (x *GoodReq) GetUnitAmount() int32 {
	if x != nil && x.UnitAmount != nil {
		return *x.UnitAmount
	}
	return 0
}

func (x *GoodReq) GetSupportCoinTypeIDs() []string {
	if x != nil {
		return x.SupportCoinTypeIDs
	}
	return nil
}

func (x *GoodReq) GetDeliveryAt() uint32 {
	if x != nil && x.DeliveryAt != nil {
		return *x.DeliveryAt
	}
	return 0
}

func (x *GoodReq) GetStartAt() uint32 {
	if x != nil && x.StartAt != nil {
		return *x.StartAt
	}
	return 0
}

func (x *GoodReq) GetTestOnly() bool {
	if x != nil && x.TestOnly != nil {
		return *x.TestOnly
	}
	return false
}

type Good struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                 string      `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	DeviceInfoID       string      `protobuf:"bytes,20,opt,name=DeviceInfoID,proto3" json:"DeviceInfoID,omitempty"`
	DurationDays       int32       `protobuf:"varint,30,opt,name=DurationDays,proto3" json:"DurationDays,omitempty"`
	CoinTypeID         string      `protobuf:"bytes,40,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty"`
	InheritFromGoodID  string      `protobuf:"bytes,50,opt,name=InheritFromGoodID,proto3" json:"InheritFromGoodID,omitempty"`
	VendorLocationID   string      `protobuf:"bytes,60,opt,name=VendorLocationID,proto3" json:"VendorLocationID,omitempty"`
	Price              string      `protobuf:"bytes,70,opt,name=Price,proto3" json:"Price,omitempty"`
	BenefitType        BenefitType `protobuf:"varint,80,opt,name=BenefitType,proto3,enum=good.manager.good.v1.BenefitType" json:"BenefitType,omitempty"`
	GoodType           GoodType    `protobuf:"varint,90,opt,name=GoodType,proto3,enum=good.manager.good.v1.GoodType" json:"GoodType,omitempty"`
	Title              string      `protobuf:"bytes,100,opt,name=Title,proto3" json:"Title,omitempty"`
	Unit               string      `protobuf:"bytes,110,opt,name=Unit,proto3" json:"Unit,omitempty"`
	UnitAmount         int32       `protobuf:"varint,120,opt,name=UnitAmount,proto3" json:"UnitAmount,omitempty"`
	SupportCoinTypeIDs []string    `protobuf:"bytes,130,rep,name=SupportCoinTypeIDs,proto3" json:"SupportCoinTypeIDs,omitempty"`
	DeliveryAt         uint32      `protobuf:"varint,140,opt,name=DeliveryAt,proto3" json:"DeliveryAt,omitempty"`
	StartAt            uint32      `protobuf:"varint,150,opt,name=StartAt,proto3" json:"StartAt,omitempty"`
	TestOnly           bool        `protobuf:"varint,160,opt,name=TestOnly,proto3" json:"TestOnly,omitempty"`
	CreatedAt          uint32      `protobuf:"varint,170,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt          uint32      `protobuf:"varint,180,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	DeletedAt          uint32      `protobuf:"varint,190,opt,name=DeletedAt,proto3" json:"DeletedAt,omitempty"`
}

func (x *Good) Reset() {
	*x = Good{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_good_good_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Good) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Good) ProtoMessage() {}

func (x *Good) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_good_good_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Good.ProtoReflect.Descriptor instead.
func (*Good) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_good_good_proto_rawDescGZIP(), []int{1}
}

func (x *Good) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Good) GetDeviceInfoID() string {
	if x != nil {
		return x.DeviceInfoID
	}
	return ""
}

func (x *Good) GetDurationDays() int32 {
	if x != nil {
		return x.DurationDays
	}
	return 0
}

func (x *Good) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

func (x *Good) GetInheritFromGoodID() string {
	if x != nil {
		return x.InheritFromGoodID
	}
	return ""
}

func (x *Good) GetVendorLocationID() string {
	if x != nil {
		return x.VendorLocationID
	}
	return ""
}

func (x *Good) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *Good) GetBenefitType() BenefitType {
	if x != nil {
		return x.BenefitType
	}
	return BenefitType_DefaultBenefitType
}

func (x *Good) GetGoodType() GoodType {
	if x != nil {
		return x.GoodType
	}
	return GoodType_DefaultGoodType
}

func (x *Good) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Good) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *Good) GetUnitAmount() int32 {
	if x != nil {
		return x.UnitAmount
	}
	return 0
}

func (x *Good) GetSupportCoinTypeIDs() []string {
	if x != nil {
		return x.SupportCoinTypeIDs
	}
	return nil
}

func (x *Good) GetDeliveryAt() uint32 {
	if x != nil {
		return x.DeliveryAt
	}
	return 0
}

func (x *Good) GetStartAt() uint32 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *Good) GetTestOnly() bool {
	if x != nil {
		return x.TestOnly
	}
	return false
}

func (x *Good) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Good) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Good) GetDeletedAt() uint32 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               *npool.StringVal `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	DeviceInfoID     *npool.StringVal `protobuf:"bytes,20,opt,name=DeviceInfoID,proto3,oneof" json:"DeviceInfoID,omitempty"`
	CoinTypeID       *npool.StringVal `protobuf:"bytes,30,opt,name=CoinTypeID,proto3,oneof" json:"CoinTypeID,omitempty"`
	VendorLocationID *npool.StringVal `protobuf:"bytes,40,opt,name=VendorLocationID,proto3,oneof" json:"VendorLocationID,omitempty"`
	BenefitType      *npool.Int32Val  `protobuf:"bytes,50,opt,name=BenefitType,proto3,oneof" json:"BenefitType,omitempty"`
	GoodType         *npool.Int32Val  `protobuf:"bytes,60,opt,name=GoodType,proto3,oneof" json:"GoodType,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_good_good_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_good_good_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_good_good_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *npool.StringVal {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetDeviceInfoID() *npool.StringVal {
	if x != nil {
		return x.DeviceInfoID
	}
	return nil
}

func (x *Conds) GetCoinTypeID() *npool.StringVal {
	if x != nil {
		return x.CoinTypeID
	}
	return nil
}

func (x *Conds) GetVendorLocationID() *npool.StringVal {
	if x != nil {
		return x.VendorLocationID
	}
	return nil
}

func (x *Conds) GetBenefitType() *npool.Int32Val {
	if x != nil {
		return x.BenefitType
	}
	return nil
}

func (x *Conds) GetGoodType() *npool.Int32Val {
	if x != nil {
		return x.GoodType
	}
	return nil
}

type CreateGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *GoodReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateGoodRequest) Reset() {
	*x = CreateGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_good_good_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGoodRequest) ProtoMessage() {}

func (x *CreateGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_good_good_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGoodRequest.ProtoReflect.Descriptor instead.
func (*CreateGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_good_good_proto_rawDescGZIP(), []int{3}
}

func (x *CreateGoodRequest) GetInfo() *GoodReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Good `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateGoodResponse) Reset() {
	*x = CreateGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_good_good_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGoodResponse) ProtoMessage() {}

func (x *CreateGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_good_good_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGoodResponse.ProtoReflect.Descriptor instead.
func (*CreateGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_good_good_proto_rawDescGZIP(), []int{4}
}

func (x *CreateGoodResponse) GetInfo() *Good {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateGoodsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*GoodReq `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateGoodsRequest) Reset() {
	*x = CreateGoodsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_good_good_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGoodsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGoodsRequest) ProtoMessage() {}

func (x *CreateGoodsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_good_good_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGoodsRequest.ProtoReflect.Descriptor instead.
func (*CreateGoodsRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_good_good_proto_rawDescGZIP(), []int{5}
}

func (x *CreateGoodsRequest) GetInfos() []*GoodReq {
	if x != nil {
		return x.Infos
	}
	return nil
}

type CreateGoodsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Good `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateGoodsResponse) Reset() {
	*x = CreateGoodsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_good_good_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGoodsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGoodsResponse) ProtoMessage() {}

func (x *CreateGoodsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_good_good_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGoodsResponse.ProtoReflect.Descriptor instead.
func (*CreateGoodsResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_good_good_proto_rawDescGZIP(), []int{6}
}

func (x *CreateGoodsResponse) GetInfos() []*Good {
	if x != nil {
		return x.Infos
	}
	return nil
}

type GetGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetGoodRequest) Reset() {
	*x = GetGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_good_good_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodRequest) ProtoMessage() {}

func (x *GetGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_good_good_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodRequest.ProtoReflect.Descriptor instead.
func (*GetGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_good_good_proto_rawDescGZIP(), []int{7}
}

func (x *GetGoodRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Good `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetGoodResponse) Reset() {
	*x = GetGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_good_good_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodResponse) ProtoMessage() {}

func (x *GetGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_good_good_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodResponse.ProtoReflect.Descriptor instead.
func (*GetGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_good_good_proto_rawDescGZIP(), []int{8}
}

func (x *GetGoodResponse) GetInfo() *Good {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetGoodsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetGoodsRequest) Reset() {
	*x = GetGoodsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_good_good_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodsRequest) ProtoMessage() {}

func (x *GetGoodsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_good_good_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodsRequest.ProtoReflect.Descriptor instead.
func (*GetGoodsRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_good_good_proto_rawDescGZIP(), []int{9}
}

func (x *GetGoodsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetGoodsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetGoodsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetGoodsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Good `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32  `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetGoodsResponse) Reset() {
	*x = GetGoodsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_good_good_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodsResponse) ProtoMessage() {}

func (x *GetGoodsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_good_good_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodsResponse.ProtoReflect.Descriptor instead.
func (*GetGoodsResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_good_good_proto_rawDescGZIP(), []int{10}
}

func (x *GetGoodsResponse) GetInfos() []*Good {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetGoodsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetGoodOnlyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *GetGoodOnlyRequest) Reset() {
	*x = GetGoodOnlyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_good_good_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodOnlyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodOnlyRequest) ProtoMessage() {}

func (x *GetGoodOnlyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_good_good_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodOnlyRequest.ProtoReflect.Descriptor instead.
func (*GetGoodOnlyRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_good_good_proto_rawDescGZIP(), []int{11}
}

func (x *GetGoodOnlyRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type GetGoodOnlyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Good `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetGoodOnlyResponse) Reset() {
	*x = GetGoodOnlyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_good_good_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodOnlyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodOnlyResponse) ProtoMessage() {}

func (x *GetGoodOnlyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_good_good_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodOnlyResponse.ProtoReflect.Descriptor instead.
func (*GetGoodOnlyResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_good_good_proto_rawDescGZIP(), []int{12}
}

func (x *GetGoodOnlyResponse) GetInfo() *Good {
	if x != nil {
		return x.Info
	}
	return nil
}

type ExistGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ExistGoodRequest) Reset() {
	*x = ExistGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_good_good_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistGoodRequest) ProtoMessage() {}

func (x *ExistGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_good_good_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistGoodRequest.ProtoReflect.Descriptor instead.
func (*ExistGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_good_good_proto_rawDescGZIP(), []int{13}
}

func (x *ExistGoodRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ExistGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistGoodResponse) Reset() {
	*x = ExistGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_good_good_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistGoodResponse) ProtoMessage() {}

func (x *ExistGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_good_good_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistGoodResponse.ProtoReflect.Descriptor instead.
func (*ExistGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_good_good_proto_rawDescGZIP(), []int{14}
}

func (x *ExistGoodResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type ExistGoodCondsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *ExistGoodCondsRequest) Reset() {
	*x = ExistGoodCondsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_good_good_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistGoodCondsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistGoodCondsRequest) ProtoMessage() {}

func (x *ExistGoodCondsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_good_good_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistGoodCondsRequest.ProtoReflect.Descriptor instead.
func (*ExistGoodCondsRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_good_good_proto_rawDescGZIP(), []int{15}
}

func (x *ExistGoodCondsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type ExistGoodCondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistGoodCondsResponse) Reset() {
	*x = ExistGoodCondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_good_good_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistGoodCondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistGoodCondsResponse) ProtoMessage() {}

func (x *ExistGoodCondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_good_good_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistGoodCondsResponse.ProtoReflect.Descriptor instead.
func (*ExistGoodCondsResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_good_good_proto_rawDescGZIP(), []int{16}
}

func (x *ExistGoodCondsResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type CountGoodsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *CountGoodsRequest) Reset() {
	*x = CountGoodsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_good_good_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountGoodsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountGoodsRequest) ProtoMessage() {}

func (x *CountGoodsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_good_good_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountGoodsRequest.ProtoReflect.Descriptor instead.
func (*CountGoodsRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_good_good_proto_rawDescGZIP(), []int{17}
}

func (x *CountGoodsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type CountGoodsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info uint32 `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CountGoodsResponse) Reset() {
	*x = CountGoodsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_mgr_v1_good_good_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountGoodsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountGoodsResponse) ProtoMessage() {}

func (x *CountGoodsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_mgr_v1_good_good_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountGoodsResponse.ProtoReflect.Descriptor instead.
func (*CountGoodsResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_mgr_v1_good_good_proto_rawDescGZIP(), []int{18}
}

func (x *CountGoodsResponse) GetInfo() uint32 {
	if x != nil {
		return x.Info
	}
	return 0
}

var File_npool_good_mgr_v1_good_good_proto protoreflect.FileDescriptor

var file_npool_good_mgr_v1_good_good_proto_rawDesc = []byte{
	0x0a, 0x21, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x6d, 0x67, 0x72,
	0x2f, 0x76, 0x31, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x14, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6e, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe5, 0x06, 0x0a, 0x07, 0x47, 0x6f,
	0x6f, 0x64, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x44,
	0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x79, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x0c, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a,
	0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x31, 0x0a, 0x11, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x46, 0x72, 0x6f, 0x6d,
	0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x11,
	0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x6f, 0x6f, 0x64, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05,
	0x52, 0x10, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x46,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x48, 0x0a, 0x0b, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x50, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x07, 0x52, 0x0b, 0x42, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x08, 0x47, 0x6f,
	0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x48, 0x08, 0x52, 0x08,
	0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x05, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x6e,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x23, 0x0a, 0x0a, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x78, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x0b, 0x52, 0x0a, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x12, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43,
	0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x73, 0x18, 0x82, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x12, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x44, 0x73, 0x12, 0x24, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x41, 0x74, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0c, 0x52, 0x0a, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x07, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0d, 0x52,
	0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x08, 0x54,
	0x65, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0e,
	0x52, 0x08, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x49, 0x44, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x49, 0x44, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x44, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69,
	0x74, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x42,
	0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x47,
	0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x55,
	0x6e, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x41, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x6c,
	0x79, 0x22, 0xa0, 0x05, 0x0a, 0x04, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x44, 0x12, 0x22,
	0x0a, 0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x79, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x46, 0x72, 0x6f,
	0x6d, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x49,
	0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44,
	0x12, 0x2a, 0x0a, 0x10, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x42, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x6e, 0x69,
	0x74, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x78, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a,
	0x12, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x44, 0x73, 0x18, 0x82, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x73, 0x12, 0x1f,
	0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x74, 0x18, 0x8c, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x74, 0x12,
	0x19, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x08, 0x54, 0x65,
	0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x54,
	0x65, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x22, 0xb8, 0x03, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x28,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48,
	0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48,
	0x02, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01,
	0x12, 0x44, 0x0a, 0x10, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48,
	0x03, 0x52, 0x10, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0b, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48,
	0x04, 0x52, 0x0b, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x33, 0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x3c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x05, 0x52, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x44, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x42, 0x13, 0x0a,
	0x11, 0x5f, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x46, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65,
	0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x44, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x49, 0x0a,
	0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65,
	0x71, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x47, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x30, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x22, 0x20, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x44, 0x22, 0x41, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x72, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x05, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x5a, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30,
	0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x47, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f,
	0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x05,
	0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22,
	0x45, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x22, 0x0a, 0x10, 0x45, 0x78, 0x69, 0x73, 0x74, 0x47,
	0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x27, 0x0a, 0x11, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x4a, 0x0a, 0x15, 0x45, 0x78, 0x69, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64,
	0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x05,
	0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22,
	0x2c, 0x0a, 0x16, 0x45, 0x78, 0x69, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x46, 0x0a,
	0x11, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x31, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05,
	0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x28, 0x0a, 0x12, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x2a,
	0x53, 0x0a, 0x0b, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x12, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x10, 0x0a, 0x12,
	0x13, 0x0a, 0x0f, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x50, 0x6f,
	0x6f, 0x6c, 0x10, 0x14, 0x2a, 0x89, 0x01, 0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x6f, 0x6f, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x10,
	0x0a, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x69,
	0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x14, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x6f,
	0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x46,
	0x65, 0x65, 0x10, 0x1e, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x10, 0x28,
	0x32, 0xa1, 0x06, 0x0a, 0x07, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x61, 0x0a, 0x0a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x27, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x64, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x28,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64,
	0x12, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x64, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x28,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x4f, 0x6e, 0x6c,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x12, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x5e, 0x0a, 0x09, 0x45, 0x78, 0x69, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x12,
	0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x6d, 0x0a, 0x0e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x47, 0x6f,
	0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x61, 0x0a, 0x0a, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12,
	0x27, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x39, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67,
	0x6f, 0x6f, 0x64, 0x2f, 0x6d, 0x67, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_good_mgr_v1_good_good_proto_rawDescOnce sync.Once
	file_npool_good_mgr_v1_good_good_proto_rawDescData = file_npool_good_mgr_v1_good_good_proto_rawDesc
)

func file_npool_good_mgr_v1_good_good_proto_rawDescGZIP() []byte {
	file_npool_good_mgr_v1_good_good_proto_rawDescOnce.Do(func() {
		file_npool_good_mgr_v1_good_good_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_good_mgr_v1_good_good_proto_rawDescData)
	})
	return file_npool_good_mgr_v1_good_good_proto_rawDescData
}

var file_npool_good_mgr_v1_good_good_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_npool_good_mgr_v1_good_good_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_npool_good_mgr_v1_good_good_proto_goTypes = []interface{}{
	(BenefitType)(0),               // 0: good.manager.good.v1.BenefitType
	(GoodType)(0),                  // 1: good.manager.good.v1.GoodType
	(*GoodReq)(nil),                // 2: good.manager.good.v1.GoodReq
	(*Good)(nil),                   // 3: good.manager.good.v1.Good
	(*Conds)(nil),                  // 4: good.manager.good.v1.Conds
	(*CreateGoodRequest)(nil),      // 5: good.manager.good.v1.CreateGoodRequest
	(*CreateGoodResponse)(nil),     // 6: good.manager.good.v1.CreateGoodResponse
	(*CreateGoodsRequest)(nil),     // 7: good.manager.good.v1.CreateGoodsRequest
	(*CreateGoodsResponse)(nil),    // 8: good.manager.good.v1.CreateGoodsResponse
	(*GetGoodRequest)(nil),         // 9: good.manager.good.v1.GetGoodRequest
	(*GetGoodResponse)(nil),        // 10: good.manager.good.v1.GetGoodResponse
	(*GetGoodsRequest)(nil),        // 11: good.manager.good.v1.GetGoodsRequest
	(*GetGoodsResponse)(nil),       // 12: good.manager.good.v1.GetGoodsResponse
	(*GetGoodOnlyRequest)(nil),     // 13: good.manager.good.v1.GetGoodOnlyRequest
	(*GetGoodOnlyResponse)(nil),    // 14: good.manager.good.v1.GetGoodOnlyResponse
	(*ExistGoodRequest)(nil),       // 15: good.manager.good.v1.ExistGoodRequest
	(*ExistGoodResponse)(nil),      // 16: good.manager.good.v1.ExistGoodResponse
	(*ExistGoodCondsRequest)(nil),  // 17: good.manager.good.v1.ExistGoodCondsRequest
	(*ExistGoodCondsResponse)(nil), // 18: good.manager.good.v1.ExistGoodCondsResponse
	(*CountGoodsRequest)(nil),      // 19: good.manager.good.v1.CountGoodsRequest
	(*CountGoodsResponse)(nil),     // 20: good.manager.good.v1.CountGoodsResponse
	(*npool.StringVal)(nil),        // 21: npool.v1.StringVal
	(*npool.Int32Val)(nil),         // 22: npool.v1.Int32Val
}
var file_npool_good_mgr_v1_good_good_proto_depIdxs = []int32{
	0,  // 0: good.manager.good.v1.GoodReq.BenefitType:type_name -> good.manager.good.v1.BenefitType
	1,  // 1: good.manager.good.v1.GoodReq.GoodType:type_name -> good.manager.good.v1.GoodType
	0,  // 2: good.manager.good.v1.Good.BenefitType:type_name -> good.manager.good.v1.BenefitType
	1,  // 3: good.manager.good.v1.Good.GoodType:type_name -> good.manager.good.v1.GoodType
	21, // 4: good.manager.good.v1.Conds.ID:type_name -> npool.v1.StringVal
	21, // 5: good.manager.good.v1.Conds.DeviceInfoID:type_name -> npool.v1.StringVal
	21, // 6: good.manager.good.v1.Conds.CoinTypeID:type_name -> npool.v1.StringVal
	21, // 7: good.manager.good.v1.Conds.VendorLocationID:type_name -> npool.v1.StringVal
	22, // 8: good.manager.good.v1.Conds.BenefitType:type_name -> npool.v1.Int32Val
	22, // 9: good.manager.good.v1.Conds.GoodType:type_name -> npool.v1.Int32Val
	2,  // 10: good.manager.good.v1.CreateGoodRequest.Info:type_name -> good.manager.good.v1.GoodReq
	3,  // 11: good.manager.good.v1.CreateGoodResponse.Info:type_name -> good.manager.good.v1.Good
	2,  // 12: good.manager.good.v1.CreateGoodsRequest.Infos:type_name -> good.manager.good.v1.GoodReq
	3,  // 13: good.manager.good.v1.CreateGoodsResponse.Infos:type_name -> good.manager.good.v1.Good
	3,  // 14: good.manager.good.v1.GetGoodResponse.Info:type_name -> good.manager.good.v1.Good
	4,  // 15: good.manager.good.v1.GetGoodsRequest.Conds:type_name -> good.manager.good.v1.Conds
	3,  // 16: good.manager.good.v1.GetGoodsResponse.Infos:type_name -> good.manager.good.v1.Good
	4,  // 17: good.manager.good.v1.GetGoodOnlyRequest.Conds:type_name -> good.manager.good.v1.Conds
	3,  // 18: good.manager.good.v1.GetGoodOnlyResponse.Info:type_name -> good.manager.good.v1.Good
	4,  // 19: good.manager.good.v1.ExistGoodCondsRequest.Conds:type_name -> good.manager.good.v1.Conds
	4,  // 20: good.manager.good.v1.CountGoodsRequest.Conds:type_name -> good.manager.good.v1.Conds
	5,  // 21: good.manager.good.v1.Manager.CreateGood:input_type -> good.manager.good.v1.CreateGoodRequest
	7,  // 22: good.manager.good.v1.Manager.CreateGoods:input_type -> good.manager.good.v1.CreateGoodsRequest
	9,  // 23: good.manager.good.v1.Manager.GetGood:input_type -> good.manager.good.v1.GetGoodRequest
	13, // 24: good.manager.good.v1.Manager.GetGoodOnly:input_type -> good.manager.good.v1.GetGoodOnlyRequest
	11, // 25: good.manager.good.v1.Manager.GetGoods:input_type -> good.manager.good.v1.GetGoodsRequest
	15, // 26: good.manager.good.v1.Manager.ExistGood:input_type -> good.manager.good.v1.ExistGoodRequest
	17, // 27: good.manager.good.v1.Manager.ExistGoodConds:input_type -> good.manager.good.v1.ExistGoodCondsRequest
	19, // 28: good.manager.good.v1.Manager.CountGoods:input_type -> good.manager.good.v1.CountGoodsRequest
	6,  // 29: good.manager.good.v1.Manager.CreateGood:output_type -> good.manager.good.v1.CreateGoodResponse
	8,  // 30: good.manager.good.v1.Manager.CreateGoods:output_type -> good.manager.good.v1.CreateGoodsResponse
	10, // 31: good.manager.good.v1.Manager.GetGood:output_type -> good.manager.good.v1.GetGoodResponse
	14, // 32: good.manager.good.v1.Manager.GetGoodOnly:output_type -> good.manager.good.v1.GetGoodOnlyResponse
	12, // 33: good.manager.good.v1.Manager.GetGoods:output_type -> good.manager.good.v1.GetGoodsResponse
	16, // 34: good.manager.good.v1.Manager.ExistGood:output_type -> good.manager.good.v1.ExistGoodResponse
	18, // 35: good.manager.good.v1.Manager.ExistGoodConds:output_type -> good.manager.good.v1.ExistGoodCondsResponse
	20, // 36: good.manager.good.v1.Manager.CountGoods:output_type -> good.manager.good.v1.CountGoodsResponse
	29, // [29:37] is the sub-list for method output_type
	21, // [21:29] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_npool_good_mgr_v1_good_good_proto_init() }
func file_npool_good_mgr_v1_good_good_proto_init() {
	if File_npool_good_mgr_v1_good_good_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_good_mgr_v1_good_good_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_good_good_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Good); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_good_good_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_good_good_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_good_good_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_good_good_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGoodsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_good_good_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGoodsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_good_good_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_good_good_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_good_good_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_good_good_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_good_good_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodOnlyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_good_good_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodOnlyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_good_good_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_good_good_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_good_good_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistGoodCondsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_good_good_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistGoodCondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_good_good_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountGoodsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_mgr_v1_good_good_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountGoodsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_good_mgr_v1_good_good_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_npool_good_mgr_v1_good_good_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_good_mgr_v1_good_good_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_good_mgr_v1_good_good_proto_goTypes,
		DependencyIndexes: file_npool_good_mgr_v1_good_good_proto_depIdxs,
		EnumInfos:         file_npool_good_mgr_v1_good_good_proto_enumTypes,
		MessageInfos:      file_npool_good_mgr_v1_good_good_proto_msgTypes,
	}.Build()
	File_npool_good_mgr_v1_good_good_proto = out.File
	file_npool_good_mgr_v1_good_good_proto_rawDesc = nil
	file_npool_good_mgr_v1_good_good_proto_goTypes = nil
	file_npool_good_mgr_v1_good_good_proto_depIdxs = nil
}
