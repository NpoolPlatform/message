// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/good/mgr/v1/appdefaultgood/appdefaultgood.proto

package appdefaultgood

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateAppDefaultGood(ctx context.Context, in *CreateAppDefaultGoodRequest, opts ...grpc.CallOption) (*CreateAppDefaultGoodResponse, error)
	CreateAppDefaultGoods(ctx context.Context, in *CreateAppDefaultGoodsRequest, opts ...grpc.CallOption) (*CreateAppDefaultGoodsResponse, error)
	UpdateAppDefaultGood(ctx context.Context, in *UpdateAppDefaultGoodRequest, opts ...grpc.CallOption) (*UpdateAppDefaultGoodResponse, error)
	GetAppDefaultGood(ctx context.Context, in *GetAppDefaultGoodRequest, opts ...grpc.CallOption) (*GetAppDefaultGoodResponse, error)
	GetAppDefaultGoodOnly(ctx context.Context, in *GetAppDefaultGoodOnlyRequest, opts ...grpc.CallOption) (*GetAppDefaultGoodOnlyResponse, error)
	GetAppDefaultGoods(ctx context.Context, in *GetAppDefaultGoodsRequest, opts ...grpc.CallOption) (*GetAppDefaultGoodsResponse, error)
	ExistAppDefaultGood(ctx context.Context, in *ExistAppDefaultGoodRequest, opts ...grpc.CallOption) (*ExistAppDefaultGoodResponse, error)
	ExistAppDefaultGoodConds(ctx context.Context, in *ExistAppDefaultGoodCondsRequest, opts ...grpc.CallOption) (*ExistAppDefaultGoodCondsResponse, error)
	CountAppDefaultGoods(ctx context.Context, in *CountAppDefaultGoodsRequest, opts ...grpc.CallOption) (*CountAppDefaultGoodsResponse, error)
	DeleteAppDefaultGood(ctx context.Context, in *DeleteAppDefaultGoodRequest, opts ...grpc.CallOption) (*DeleteAppDefaultGoodResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateAppDefaultGood(ctx context.Context, in *CreateAppDefaultGoodRequest, opts ...grpc.CallOption) (*CreateAppDefaultGoodResponse, error) {
	out := new(CreateAppDefaultGoodResponse)
	err := c.cc.Invoke(ctx, "/good.manager.appdefaultgood.v1.Manager/CreateAppDefaultGood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateAppDefaultGoods(ctx context.Context, in *CreateAppDefaultGoodsRequest, opts ...grpc.CallOption) (*CreateAppDefaultGoodsResponse, error) {
	out := new(CreateAppDefaultGoodsResponse)
	err := c.cc.Invoke(ctx, "/good.manager.appdefaultgood.v1.Manager/CreateAppDefaultGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateAppDefaultGood(ctx context.Context, in *UpdateAppDefaultGoodRequest, opts ...grpc.CallOption) (*UpdateAppDefaultGoodResponse, error) {
	out := new(UpdateAppDefaultGoodResponse)
	err := c.cc.Invoke(ctx, "/good.manager.appdefaultgood.v1.Manager/UpdateAppDefaultGood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetAppDefaultGood(ctx context.Context, in *GetAppDefaultGoodRequest, opts ...grpc.CallOption) (*GetAppDefaultGoodResponse, error) {
	out := new(GetAppDefaultGoodResponse)
	err := c.cc.Invoke(ctx, "/good.manager.appdefaultgood.v1.Manager/GetAppDefaultGood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetAppDefaultGoodOnly(ctx context.Context, in *GetAppDefaultGoodOnlyRequest, opts ...grpc.CallOption) (*GetAppDefaultGoodOnlyResponse, error) {
	out := new(GetAppDefaultGoodOnlyResponse)
	err := c.cc.Invoke(ctx, "/good.manager.appdefaultgood.v1.Manager/GetAppDefaultGoodOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetAppDefaultGoods(ctx context.Context, in *GetAppDefaultGoodsRequest, opts ...grpc.CallOption) (*GetAppDefaultGoodsResponse, error) {
	out := new(GetAppDefaultGoodsResponse)
	err := c.cc.Invoke(ctx, "/good.manager.appdefaultgood.v1.Manager/GetAppDefaultGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistAppDefaultGood(ctx context.Context, in *ExistAppDefaultGoodRequest, opts ...grpc.CallOption) (*ExistAppDefaultGoodResponse, error) {
	out := new(ExistAppDefaultGoodResponse)
	err := c.cc.Invoke(ctx, "/good.manager.appdefaultgood.v1.Manager/ExistAppDefaultGood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistAppDefaultGoodConds(ctx context.Context, in *ExistAppDefaultGoodCondsRequest, opts ...grpc.CallOption) (*ExistAppDefaultGoodCondsResponse, error) {
	out := new(ExistAppDefaultGoodCondsResponse)
	err := c.cc.Invoke(ctx, "/good.manager.appdefaultgood.v1.Manager/ExistAppDefaultGoodConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountAppDefaultGoods(ctx context.Context, in *CountAppDefaultGoodsRequest, opts ...grpc.CallOption) (*CountAppDefaultGoodsResponse, error) {
	out := new(CountAppDefaultGoodsResponse)
	err := c.cc.Invoke(ctx, "/good.manager.appdefaultgood.v1.Manager/CountAppDefaultGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteAppDefaultGood(ctx context.Context, in *DeleteAppDefaultGoodRequest, opts ...grpc.CallOption) (*DeleteAppDefaultGoodResponse, error) {
	out := new(DeleteAppDefaultGoodResponse)
	err := c.cc.Invoke(ctx, "/good.manager.appdefaultgood.v1.Manager/DeleteAppDefaultGood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateAppDefaultGood(context.Context, *CreateAppDefaultGoodRequest) (*CreateAppDefaultGoodResponse, error)
	CreateAppDefaultGoods(context.Context, *CreateAppDefaultGoodsRequest) (*CreateAppDefaultGoodsResponse, error)
	UpdateAppDefaultGood(context.Context, *UpdateAppDefaultGoodRequest) (*UpdateAppDefaultGoodResponse, error)
	GetAppDefaultGood(context.Context, *GetAppDefaultGoodRequest) (*GetAppDefaultGoodResponse, error)
	GetAppDefaultGoodOnly(context.Context, *GetAppDefaultGoodOnlyRequest) (*GetAppDefaultGoodOnlyResponse, error)
	GetAppDefaultGoods(context.Context, *GetAppDefaultGoodsRequest) (*GetAppDefaultGoodsResponse, error)
	ExistAppDefaultGood(context.Context, *ExistAppDefaultGoodRequest) (*ExistAppDefaultGoodResponse, error)
	ExistAppDefaultGoodConds(context.Context, *ExistAppDefaultGoodCondsRequest) (*ExistAppDefaultGoodCondsResponse, error)
	CountAppDefaultGoods(context.Context, *CountAppDefaultGoodsRequest) (*CountAppDefaultGoodsResponse, error)
	DeleteAppDefaultGood(context.Context, *DeleteAppDefaultGoodRequest) (*DeleteAppDefaultGoodResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateAppDefaultGood(context.Context, *CreateAppDefaultGoodRequest) (*CreateAppDefaultGoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppDefaultGood not implemented")
}
func (UnimplementedManagerServer) CreateAppDefaultGoods(context.Context, *CreateAppDefaultGoodsRequest) (*CreateAppDefaultGoodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppDefaultGoods not implemented")
}
func (UnimplementedManagerServer) UpdateAppDefaultGood(context.Context, *UpdateAppDefaultGoodRequest) (*UpdateAppDefaultGoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppDefaultGood not implemented")
}
func (UnimplementedManagerServer) GetAppDefaultGood(context.Context, *GetAppDefaultGoodRequest) (*GetAppDefaultGoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppDefaultGood not implemented")
}
func (UnimplementedManagerServer) GetAppDefaultGoodOnly(context.Context, *GetAppDefaultGoodOnlyRequest) (*GetAppDefaultGoodOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppDefaultGoodOnly not implemented")
}
func (UnimplementedManagerServer) GetAppDefaultGoods(context.Context, *GetAppDefaultGoodsRequest) (*GetAppDefaultGoodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppDefaultGoods not implemented")
}
func (UnimplementedManagerServer) ExistAppDefaultGood(context.Context, *ExistAppDefaultGoodRequest) (*ExistAppDefaultGoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistAppDefaultGood not implemented")
}
func (UnimplementedManagerServer) ExistAppDefaultGoodConds(context.Context, *ExistAppDefaultGoodCondsRequest) (*ExistAppDefaultGoodCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistAppDefaultGoodConds not implemented")
}
func (UnimplementedManagerServer) CountAppDefaultGoods(context.Context, *CountAppDefaultGoodsRequest) (*CountAppDefaultGoodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAppDefaultGoods not implemented")
}
func (UnimplementedManagerServer) DeleteAppDefaultGood(context.Context, *DeleteAppDefaultGoodRequest) (*DeleteAppDefaultGoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppDefaultGood not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateAppDefaultGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppDefaultGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateAppDefaultGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.manager.appdefaultgood.v1.Manager/CreateAppDefaultGood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateAppDefaultGood(ctx, req.(*CreateAppDefaultGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateAppDefaultGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppDefaultGoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateAppDefaultGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.manager.appdefaultgood.v1.Manager/CreateAppDefaultGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateAppDefaultGoods(ctx, req.(*CreateAppDefaultGoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateAppDefaultGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppDefaultGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateAppDefaultGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.manager.appdefaultgood.v1.Manager/UpdateAppDefaultGood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateAppDefaultGood(ctx, req.(*UpdateAppDefaultGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetAppDefaultGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppDefaultGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetAppDefaultGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.manager.appdefaultgood.v1.Manager/GetAppDefaultGood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetAppDefaultGood(ctx, req.(*GetAppDefaultGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetAppDefaultGoodOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppDefaultGoodOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetAppDefaultGoodOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.manager.appdefaultgood.v1.Manager/GetAppDefaultGoodOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetAppDefaultGoodOnly(ctx, req.(*GetAppDefaultGoodOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetAppDefaultGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppDefaultGoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetAppDefaultGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.manager.appdefaultgood.v1.Manager/GetAppDefaultGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetAppDefaultGoods(ctx, req.(*GetAppDefaultGoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistAppDefaultGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistAppDefaultGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistAppDefaultGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.manager.appdefaultgood.v1.Manager/ExistAppDefaultGood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistAppDefaultGood(ctx, req.(*ExistAppDefaultGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistAppDefaultGoodConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistAppDefaultGoodCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistAppDefaultGoodConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.manager.appdefaultgood.v1.Manager/ExistAppDefaultGoodConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistAppDefaultGoodConds(ctx, req.(*ExistAppDefaultGoodCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountAppDefaultGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAppDefaultGoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountAppDefaultGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.manager.appdefaultgood.v1.Manager/CountAppDefaultGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountAppDefaultGoods(ctx, req.(*CountAppDefaultGoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteAppDefaultGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppDefaultGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteAppDefaultGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.manager.appdefaultgood.v1.Manager/DeleteAppDefaultGood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteAppDefaultGood(ctx, req.(*DeleteAppDefaultGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "good.manager.appdefaultgood.v1.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAppDefaultGood",
			Handler:    _Manager_CreateAppDefaultGood_Handler,
		},
		{
			MethodName: "CreateAppDefaultGoods",
			Handler:    _Manager_CreateAppDefaultGoods_Handler,
		},
		{
			MethodName: "UpdateAppDefaultGood",
			Handler:    _Manager_UpdateAppDefaultGood_Handler,
		},
		{
			MethodName: "GetAppDefaultGood",
			Handler:    _Manager_GetAppDefaultGood_Handler,
		},
		{
			MethodName: "GetAppDefaultGoodOnly",
			Handler:    _Manager_GetAppDefaultGoodOnly_Handler,
		},
		{
			MethodName: "GetAppDefaultGoods",
			Handler:    _Manager_GetAppDefaultGoods_Handler,
		},
		{
			MethodName: "ExistAppDefaultGood",
			Handler:    _Manager_ExistAppDefaultGood_Handler,
		},
		{
			MethodName: "ExistAppDefaultGoodConds",
			Handler:    _Manager_ExistAppDefaultGoodConds_Handler,
		},
		{
			MethodName: "CountAppDefaultGoods",
			Handler:    _Manager_CountAppDefaultGoods_Handler,
		},
		{
			MethodName: "DeleteAppDefaultGood",
			Handler:    _Manager_DeleteAppDefaultGood_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/good/mgr/v1/appdefaultgood/appdefaultgood.proto",
}
