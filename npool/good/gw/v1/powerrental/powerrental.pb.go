// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.18.1
// source: npool/good/gw/v1/powerrental/powerrental.proto

package powerrental

import (
	v1 "github.com/NpoolPlatform/message/npool/basetypes/good/v1"
	coin "github.com/NpoolPlatform/message/npool/good/mw/v1/good/coin"
	stock "github.com/NpoolPlatform/message/npool/good/mw/v1/good/stock"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PowerRental struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                     uint32                       `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID                  string                       `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty"`
	GoodID                 string                       `protobuf:"bytes,30,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
	DeviceTypeID           string                       `protobuf:"bytes,40,opt,name=DeviceTypeID,proto3" json:"DeviceTypeID,omitempty"`
	DeviceType             string                       `protobuf:"bytes,50,opt,name=DeviceType,proto3" json:"DeviceType,omitempty"`
	DeviceManufacturerName string                       `protobuf:"bytes,60,opt,name=DeviceManufacturerName,proto3" json:"DeviceManufacturerName,omitempty"`
	DeviceManufacturerLogo string                       `protobuf:"bytes,70,opt,name=DeviceManufacturerLogo,proto3" json:"DeviceManufacturerLogo,omitempty"`
	DevicePowerConsumption uint32                       `protobuf:"varint,80,opt,name=DevicePowerConsumption,proto3" json:"DevicePowerConsumption,omitempty"`
	DeviceShipmentAt       uint32                       `protobuf:"varint,90,opt,name=DeviceShipmentAt,proto3" json:"DeviceShipmentAt,omitempty"`
	VendorLocationID       string                       `protobuf:"bytes,100,opt,name=VendorLocationID,proto3" json:"VendorLocationID,omitempty"`
	VendorBrand            string                       `protobuf:"bytes,110,opt,name=VendorBrand,proto3" json:"VendorBrand,omitempty"`
	VendorLogo             string                       `protobuf:"bytes,120,opt,name=VendorLogo,proto3" json:"VendorLogo,omitempty"`
	VendorCountry          string                       `protobuf:"bytes,130,opt,name=VendorCountry,proto3" json:"VendorCountry,omitempty"`
	VendorProvince         string                       `protobuf:"bytes,140,opt,name=VendorProvince,proto3" json:"VendorProvince,omitempty"`
	UnitPrice              string                       `protobuf:"bytes,150,opt,name=UnitPrice,proto3" json:"UnitPrice,omitempty"`
	QuantityUnit           string                       `protobuf:"bytes,160,opt,name=QuantityUnit,proto3" json:"QuantityUnit,omitempty"`
	QuantityUnitAmount     string                       `protobuf:"bytes,170,opt,name=QuantityUnitAmount,proto3" json:"QuantityUnitAmount,omitempty"`
	DeliveryAt             uint32                       `protobuf:"varint,180,opt,name=DeliveryAt,proto3" json:"DeliveryAt,omitempty"`
	UnitLockDeposit        string                       `protobuf:"bytes,190,opt,name=UnitLockDeposit,proto3" json:"UnitLockDeposit,omitempty"`
	DurationDisplayType    v1.GoodDurationType          `protobuf:"varint,200,opt,name=DurationDisplayType,proto3,enum=basetypes.good.v1.GoodDurationType" json:"DurationDisplayType,omitempty"`
	GoodType               v1.GoodType                  `protobuf:"varint,210,opt,name=GoodType,proto3,enum=basetypes.good.v1.GoodType" json:"GoodType,omitempty"`
	BenefitType            v1.BenefitType               `protobuf:"varint,220,opt,name=BenefitType,proto3,enum=basetypes.good.v1.BenefitType" json:"BenefitType,omitempty"`
	GoodName               string                       `protobuf:"bytes,230,opt,name=GoodName,proto3" json:"GoodName,omitempty"`
	GoodServiceStartAt     uint32                       `protobuf:"varint,240,opt,name=GoodServiceStartAt,proto3" json:"GoodServiceStartAt,omitempty"`
	GoodStartMode          v1.GoodStartMode             `protobuf:"varint,250,opt,name=GoodStartMode,proto3,enum=basetypes.good.v1.GoodStartMode" json:"GoodStartMode,omitempty"`
	TestOnly               bool                         `protobuf:"varint,260,opt,name=TestOnly,proto3" json:"TestOnly,omitempty"`
	BenefitIntervalHours   uint32                       `protobuf:"varint,270,opt,name=BenefitIntervalHours,proto3" json:"BenefitIntervalHours,omitempty"`
	GoodPurchasable        bool                         `protobuf:"varint,280,opt,name=GoodPurchasable,proto3" json:"GoodPurchasable,omitempty"`
	GoodOnline             bool                         `protobuf:"varint,290,opt,name=GoodOnline,proto3" json:"GoodOnline,omitempty"`
	StockMode              v1.GoodStockMode             `protobuf:"varint,300,opt,name=StockMode,proto3,enum=basetypes.good.v1.GoodStockMode" json:"StockMode,omitempty"`
	GoodStockID            string                       `protobuf:"bytes,310,opt,name=GoodStockID,proto3" json:"GoodStockID,omitempty"`
	GoodTotal              string                       `protobuf:"bytes,320,opt,name=GoodTotal,proto3" json:"GoodTotal,omitempty"`
	GoodSpotQuantity       string                       `protobuf:"bytes,330,opt,name=GoodSpotQuantity,proto3" json:"GoodSpotQuantity,omitempty"`
	GoodLocked             string                       `protobuf:"bytes,340,opt,name=GoodLocked,proto3" json:"GoodLocked,omitempty"`
	GoodInService          string                       `protobuf:"bytes,350,opt,name=GoodInService,proto3" json:"GoodInService,omitempty"`
	GoodWaitStart          string                       `protobuf:"bytes,360,opt,name=GoodWaitStart,proto3" json:"GoodWaitStart,omitempty"`
	GoodSold               string                       `protobuf:"bytes,370,opt,name=GoodSold,proto3" json:"GoodSold,omitempty"`
	GoodAppReserved        string                       `protobuf:"bytes,380,opt,name=GoodAppReserved,proto3" json:"GoodAppReserved,omitempty"`
	RewardState            v1.BenefitState              `protobuf:"varint,390,opt,name=RewardState,proto3,enum=basetypes.good.v1.BenefitState" json:"RewardState,omitempty"`
	LastRewardAt           uint32                       `protobuf:"varint,400,opt,name=LastRewardAt,proto3" json:"LastRewardAt,omitempty"`
	RewardTID              string                       `protobuf:"bytes,410,opt,name=RewardTID,proto3" json:"RewardTID,omitempty"`
	NextRewardStartAmount  string                       `protobuf:"bytes,420,opt,name=NextRewardStartAmount,proto3" json:"NextRewardStartAmount,omitempty"`
	LastRewardAmount       string                       `protobuf:"bytes,430,opt,name=LastRewardAmount,proto3" json:"LastRewardAmount,omitempty"`
	LastUnitRewardAmount   string                       `protobuf:"bytes,440,opt,name=LastUnitRewardAmount,proto3" json:"LastUnitRewardAmount,omitempty"`
	TotalRewardAmount      string                       `protobuf:"bytes,450,opt,name=TotalRewardAmount,proto3" json:"TotalRewardAmount,omitempty"`
	GoodCoins              []*coin.GoodCoinInfo         `protobuf:"bytes,900,rep,name=GoodCoins,proto3" json:"GoodCoins,omitempty"`
	MiningGoodStocks       []*stock.MiningGoodStockInfo `protobuf:"bytes,960,rep,name=MiningGoodStocks,proto3" json:"MiningGoodStocks,omitempty"`
	CreatedAt              uint32                       `protobuf:"varint,1000,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt              uint32                       `protobuf:"varint,1010,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (x *PowerRental) Reset() {
	*x = PowerRental{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_powerrental_powerrental_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerRental) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerRental) ProtoMessage() {}

func (x *PowerRental) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_powerrental_powerrental_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerRental.ProtoReflect.Descriptor instead.
func (*PowerRental) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{0}
}

func (x *PowerRental) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *PowerRental) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *PowerRental) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *PowerRental) GetDeviceTypeID() string {
	if x != nil {
		return x.DeviceTypeID
	}
	return ""
}

func (x *PowerRental) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *PowerRental) GetDeviceManufacturerName() string {
	if x != nil {
		return x.DeviceManufacturerName
	}
	return ""
}

func (x *PowerRental) GetDeviceManufacturerLogo() string {
	if x != nil {
		return x.DeviceManufacturerLogo
	}
	return ""
}

func (x *PowerRental) GetDevicePowerConsumption() uint32 {
	if x != nil {
		return x.DevicePowerConsumption
	}
	return 0
}

func (x *PowerRental) GetDeviceShipmentAt() uint32 {
	if x != nil {
		return x.DeviceShipmentAt
	}
	return 0
}

func (x *PowerRental) GetVendorLocationID() string {
	if x != nil {
		return x.VendorLocationID
	}
	return ""
}

func (x *PowerRental) GetVendorBrand() string {
	if x != nil {
		return x.VendorBrand
	}
	return ""
}

func (x *PowerRental) GetVendorLogo() string {
	if x != nil {
		return x.VendorLogo
	}
	return ""
}

func (x *PowerRental) GetVendorCountry() string {
	if x != nil {
		return x.VendorCountry
	}
	return ""
}

func (x *PowerRental) GetVendorProvince() string {
	if x != nil {
		return x.VendorProvince
	}
	return ""
}

func (x *PowerRental) GetUnitPrice() string {
	if x != nil {
		return x.UnitPrice
	}
	return ""
}

func (x *PowerRental) GetQuantityUnit() string {
	if x != nil {
		return x.QuantityUnit
	}
	return ""
}

func (x *PowerRental) GetQuantityUnitAmount() string {
	if x != nil {
		return x.QuantityUnitAmount
	}
	return ""
}

func (x *PowerRental) GetDeliveryAt() uint32 {
	if x != nil {
		return x.DeliveryAt
	}
	return 0
}

func (x *PowerRental) GetUnitLockDeposit() string {
	if x != nil {
		return x.UnitLockDeposit
	}
	return ""
}

func (x *PowerRental) GetDurationDisplayType() v1.GoodDurationType {
	if x != nil {
		return x.DurationDisplayType
	}
	return v1.GoodDurationType(0)
}

func (x *PowerRental) GetGoodType() v1.GoodType {
	if x != nil {
		return x.GoodType
	}
	return v1.GoodType(0)
}

func (x *PowerRental) GetBenefitType() v1.BenefitType {
	if x != nil {
		return x.BenefitType
	}
	return v1.BenefitType(0)
}

func (x *PowerRental) GetGoodName() string {
	if x != nil {
		return x.GoodName
	}
	return ""
}

func (x *PowerRental) GetGoodServiceStartAt() uint32 {
	if x != nil {
		return x.GoodServiceStartAt
	}
	return 0
}

func (x *PowerRental) GetGoodStartMode() v1.GoodStartMode {
	if x != nil {
		return x.GoodStartMode
	}
	return v1.GoodStartMode(0)
}

func (x *PowerRental) GetTestOnly() bool {
	if x != nil {
		return x.TestOnly
	}
	return false
}

func (x *PowerRental) GetBenefitIntervalHours() uint32 {
	if x != nil {
		return x.BenefitIntervalHours
	}
	return 0
}

func (x *PowerRental) GetGoodPurchasable() bool {
	if x != nil {
		return x.GoodPurchasable
	}
	return false
}

func (x *PowerRental) GetGoodOnline() bool {
	if x != nil {
		return x.GoodOnline
	}
	return false
}

func (x *PowerRental) GetStockMode() v1.GoodStockMode {
	if x != nil {
		return x.StockMode
	}
	return v1.GoodStockMode(0)
}

func (x *PowerRental) GetGoodStockID() string {
	if x != nil {
		return x.GoodStockID
	}
	return ""
}

func (x *PowerRental) GetGoodTotal() string {
	if x != nil {
		return x.GoodTotal
	}
	return ""
}

func (x *PowerRental) GetGoodSpotQuantity() string {
	if x != nil {
		return x.GoodSpotQuantity
	}
	return ""
}

func (x *PowerRental) GetGoodLocked() string {
	if x != nil {
		return x.GoodLocked
	}
	return ""
}

func (x *PowerRental) GetGoodInService() string {
	if x != nil {
		return x.GoodInService
	}
	return ""
}

func (x *PowerRental) GetGoodWaitStart() string {
	if x != nil {
		return x.GoodWaitStart
	}
	return ""
}

func (x *PowerRental) GetGoodSold() string {
	if x != nil {
		return x.GoodSold
	}
	return ""
}

func (x *PowerRental) GetGoodAppReserved() string {
	if x != nil {
		return x.GoodAppReserved
	}
	return ""
}

func (x *PowerRental) GetRewardState() v1.BenefitState {
	if x != nil {
		return x.RewardState
	}
	return v1.BenefitState(0)
}

func (x *PowerRental) GetLastRewardAt() uint32 {
	if x != nil {
		return x.LastRewardAt
	}
	return 0
}

func (x *PowerRental) GetRewardTID() string {
	if x != nil {
		return x.RewardTID
	}
	return ""
}

func (x *PowerRental) GetNextRewardStartAmount() string {
	if x != nil {
		return x.NextRewardStartAmount
	}
	return ""
}

func (x *PowerRental) GetLastRewardAmount() string {
	if x != nil {
		return x.LastRewardAmount
	}
	return ""
}

func (x *PowerRental) GetLastUnitRewardAmount() string {
	if x != nil {
		return x.LastUnitRewardAmount
	}
	return ""
}

func (x *PowerRental) GetTotalRewardAmount() string {
	if x != nil {
		return x.TotalRewardAmount
	}
	return ""
}

func (x *PowerRental) GetGoodCoins() []*coin.GoodCoinInfo {
	if x != nil {
		return x.GoodCoins
	}
	return nil
}

func (x *PowerRental) GetMiningGoodStocks() []*stock.MiningGoodStockInfo {
	if x != nil {
		return x.MiningGoodStocks
	}
	return nil
}

func (x *PowerRental) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *PowerRental) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type AdminCreatePowerRentalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Base of power rental
	DeviceTypeID        string              `protobuf:"bytes,40,opt,name=DeviceTypeID,proto3" json:"DeviceTypeID,omitempty"`
	VendorLocationID    string              `protobuf:"bytes,50,opt,name=VendorLocationID,proto3" json:"VendorLocationID,omitempty"`
	UnitPrice           string              `protobuf:"bytes,60,opt,name=UnitPrice,proto3" json:"UnitPrice,omitempty"`
	QuantityUnit        string              `protobuf:"bytes,70,opt,name=QuantityUnit,proto3" json:"QuantityUnit,omitempty"`
	QuantityUnitAmount  string              `protobuf:"bytes,80,opt,name=QuantityUnitAmount,proto3" json:"QuantityUnitAmount,omitempty"`
	DeliveryAt          *uint32             `protobuf:"varint,90,opt,name=DeliveryAt,proto3,oneof" json:"DeliveryAt,omitempty"`
	UnitLockDeposit     *string             `protobuf:"bytes,100,opt,name=UnitLockDeposit,proto3,oneof" json:"UnitLockDeposit,omitempty"`
	DurationDisplayType v1.GoodDurationType `protobuf:"varint,110,opt,name=DurationDisplayType,proto3,enum=basetypes.good.v1.GoodDurationType" json:"DurationDisplayType,omitempty"`
	// Good information
	GoodType             v1.GoodType      `protobuf:"varint,120,opt,name=GoodType,proto3,enum=basetypes.good.v1.GoodType" json:"GoodType,omitempty"`
	Name                 string           `protobuf:"bytes,140,opt,name=Name,proto3" json:"Name,omitempty"`
	ServiceStartAt       *uint32          `protobuf:"varint,150,opt,name=ServiceStartAt,proto3,oneof" json:"ServiceStartAt,omitempty"`
	StartMode            v1.GoodStartMode `protobuf:"varint,160,opt,name=StartMode,proto3,enum=basetypes.good.v1.GoodStartMode" json:"StartMode,omitempty"`
	TestOnly             *bool            `protobuf:"varint,170,opt,name=TestOnly,proto3,oneof" json:"TestOnly,omitempty"`
	BenefitIntervalHours *uint32          `protobuf:"varint,180,opt,name=BenefitIntervalHours,proto3,oneof" json:"BenefitIntervalHours,omitempty"`
	Purchasable          *bool            `protobuf:"varint,190,opt,name=Purchasable,proto3,oneof" json:"Purchasable,omitempty"`
	Online               *bool            `protobuf:"varint,200,opt,name=Online,proto3,oneof" json:"Online,omitempty"`
	StockMode            v1.GoodStockMode `protobuf:"varint,210,opt,name=StockMode,proto3,enum=basetypes.good.v1.GoodStockMode" json:"StockMode,omitempty"`
	// Good stock
	Total            string                      `protobuf:"bytes,230,opt,name=Total,proto3" json:"Total,omitempty"`
	MiningGoodStocks []*stock.MiningGoodStockReq `protobuf:"bytes,240,rep,name=MiningGoodStocks,proto3" json:"MiningGoodStocks,omitempty"`
}

func (x *AdminCreatePowerRentalRequest) Reset() {
	*x = AdminCreatePowerRentalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_powerrental_powerrental_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminCreatePowerRentalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminCreatePowerRentalRequest) ProtoMessage() {}

func (x *AdminCreatePowerRentalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_powerrental_powerrental_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminCreatePowerRentalRequest.ProtoReflect.Descriptor instead.
func (*AdminCreatePowerRentalRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{1}
}

func (x *AdminCreatePowerRentalRequest) GetDeviceTypeID() string {
	if x != nil {
		return x.DeviceTypeID
	}
	return ""
}

func (x *AdminCreatePowerRentalRequest) GetVendorLocationID() string {
	if x != nil {
		return x.VendorLocationID
	}
	return ""
}

func (x *AdminCreatePowerRentalRequest) GetUnitPrice() string {
	if x != nil {
		return x.UnitPrice
	}
	return ""
}

func (x *AdminCreatePowerRentalRequest) GetQuantityUnit() string {
	if x != nil {
		return x.QuantityUnit
	}
	return ""
}

func (x *AdminCreatePowerRentalRequest) GetQuantityUnitAmount() string {
	if x != nil {
		return x.QuantityUnitAmount
	}
	return ""
}

func (x *AdminCreatePowerRentalRequest) GetDeliveryAt() uint32 {
	if x != nil && x.DeliveryAt != nil {
		return *x.DeliveryAt
	}
	return 0
}

func (x *AdminCreatePowerRentalRequest) GetUnitLockDeposit() string {
	if x != nil && x.UnitLockDeposit != nil {
		return *x.UnitLockDeposit
	}
	return ""
}

func (x *AdminCreatePowerRentalRequest) GetDurationDisplayType() v1.GoodDurationType {
	if x != nil {
		return x.DurationDisplayType
	}
	return v1.GoodDurationType(0)
}

func (x *AdminCreatePowerRentalRequest) GetGoodType() v1.GoodType {
	if x != nil {
		return x.GoodType
	}
	return v1.GoodType(0)
}

func (x *AdminCreatePowerRentalRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AdminCreatePowerRentalRequest) GetServiceStartAt() uint32 {
	if x != nil && x.ServiceStartAt != nil {
		return *x.ServiceStartAt
	}
	return 0
}

func (x *AdminCreatePowerRentalRequest) GetStartMode() v1.GoodStartMode {
	if x != nil {
		return x.StartMode
	}
	return v1.GoodStartMode(0)
}

func (x *AdminCreatePowerRentalRequest) GetTestOnly() bool {
	if x != nil && x.TestOnly != nil {
		return *x.TestOnly
	}
	return false
}

func (x *AdminCreatePowerRentalRequest) GetBenefitIntervalHours() uint32 {
	if x != nil && x.BenefitIntervalHours != nil {
		return *x.BenefitIntervalHours
	}
	return 0
}

func (x *AdminCreatePowerRentalRequest) GetPurchasable() bool {
	if x != nil && x.Purchasable != nil {
		return *x.Purchasable
	}
	return false
}

func (x *AdminCreatePowerRentalRequest) GetOnline() bool {
	if x != nil && x.Online != nil {
		return *x.Online
	}
	return false
}

func (x *AdminCreatePowerRentalRequest) GetStockMode() v1.GoodStockMode {
	if x != nil {
		return x.StockMode
	}
	return v1.GoodStockMode(0)
}

func (x *AdminCreatePowerRentalRequest) GetTotal() string {
	if x != nil {
		return x.Total
	}
	return ""
}

func (x *AdminCreatePowerRentalRequest) GetMiningGoodStocks() []*stock.MiningGoodStockReq {
	if x != nil {
		return x.MiningGoodStocks
	}
	return nil
}

type AdminCreatePowerRentalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PowerRental `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *AdminCreatePowerRentalResponse) Reset() {
	*x = AdminCreatePowerRentalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_powerrental_powerrental_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminCreatePowerRentalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminCreatePowerRentalResponse) ProtoMessage() {}

func (x *AdminCreatePowerRentalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_powerrental_powerrental_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminCreatePowerRentalResponse.ProtoReflect.Descriptor instead.
func (*AdminCreatePowerRentalResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{2}
}

func (x *AdminCreatePowerRentalResponse) GetInfo() *PowerRental {
	if x != nil {
		return x.Info
	}
	return nil
}

type AdminUpdatePowerRentalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                  uint32               `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID               string               `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty"`
	GoodID              string               `protobuf:"bytes,40,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
	DeviceTypeID        *string              `protobuf:"bytes,50,opt,name=DeviceTypeID,proto3,oneof" json:"DeviceTypeID,omitempty"`
	VendorLocationID    *string              `protobuf:"bytes,60,opt,name=VendorLocationID,proto3,oneof" json:"VendorLocationID,omitempty"`
	UnitPrice           *string              `protobuf:"bytes,70,opt,name=UnitPrice,proto3,oneof" json:"UnitPrice,omitempty"`
	QuantityUnit        *string              `protobuf:"bytes,80,opt,name=QuantityUnit,proto3,oneof" json:"QuantityUnit,omitempty"`
	QuantityUnitAmount  *string              `protobuf:"bytes,90,opt,name=QuantityUnitAmount,proto3,oneof" json:"QuantityUnitAmount,omitempty"`
	DeliveryAt          *uint32              `protobuf:"varint,100,opt,name=DeliveryAt,proto3,oneof" json:"DeliveryAt,omitempty"`
	UnitLockDeposit     *string              `protobuf:"bytes,110,opt,name=UnitLockDeposit,proto3,oneof" json:"UnitLockDeposit,omitempty"`
	DurationDisplayType *v1.GoodDurationType `protobuf:"varint,120,opt,name=DurationDisplayType,proto3,enum=basetypes.good.v1.GoodDurationType,oneof" json:"DurationDisplayType,omitempty"`
	// Good information
	GoodType             *v1.GoodType      `protobuf:"varint,130,opt,name=GoodType,proto3,enum=basetypes.good.v1.GoodType,oneof" json:"GoodType,omitempty"`
	Name                 *string           `protobuf:"bytes,150,opt,name=Name,proto3,oneof" json:"Name,omitempty"`
	ServiceStartAt       *uint32           `protobuf:"varint,160,opt,name=ServiceStartAt,proto3,oneof" json:"ServiceStartAt,omitempty"`
	StartMode            *v1.GoodStartMode `protobuf:"varint,170,opt,name=StartMode,proto3,enum=basetypes.good.v1.GoodStartMode,oneof" json:"StartMode,omitempty"`
	TestOnly             *bool             `protobuf:"varint,180,opt,name=TestOnly,proto3,oneof" json:"TestOnly,omitempty"`
	BenefitIntervalHours *uint32           `protobuf:"varint,190,opt,name=BenefitIntervalHours,proto3,oneof" json:"BenefitIntervalHours,omitempty"`
	Purchasable          *bool             `protobuf:"varint,200,opt,name=Purchasable,proto3,oneof" json:"Purchasable,omitempty"`
	Online               *bool             `protobuf:"varint,210,opt,name=Online,proto3,oneof" json:"Online,omitempty"`
	StockMode            *v1.GoodStockMode `protobuf:"varint,220,opt,name=StockMode,proto3,enum=basetypes.good.v1.GoodStockMode,oneof" json:"StockMode,omitempty"`
	// Good stock
	Total            *string                     `protobuf:"bytes,240,opt,name=Total,proto3,oneof" json:"Total,omitempty"`
	MiningGoodStocks []*stock.MiningGoodStockReq `protobuf:"bytes,250,rep,name=MiningGoodStocks,proto3" json:"MiningGoodStocks,omitempty"`
}

func (x *AdminUpdatePowerRentalRequest) Reset() {
	*x = AdminUpdatePowerRentalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_powerrental_powerrental_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminUpdatePowerRentalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminUpdatePowerRentalRequest) ProtoMessage() {}

func (x *AdminUpdatePowerRentalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_powerrental_powerrental_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminUpdatePowerRentalRequest.ProtoReflect.Descriptor instead.
func (*AdminUpdatePowerRentalRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{3}
}

func (x *AdminUpdatePowerRentalRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *AdminUpdatePowerRentalRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *AdminUpdatePowerRentalRequest) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *AdminUpdatePowerRentalRequest) GetDeviceTypeID() string {
	if x != nil && x.DeviceTypeID != nil {
		return *x.DeviceTypeID
	}
	return ""
}

func (x *AdminUpdatePowerRentalRequest) GetVendorLocationID() string {
	if x != nil && x.VendorLocationID != nil {
		return *x.VendorLocationID
	}
	return ""
}

func (x *AdminUpdatePowerRentalRequest) GetUnitPrice() string {
	if x != nil && x.UnitPrice != nil {
		return *x.UnitPrice
	}
	return ""
}

func (x *AdminUpdatePowerRentalRequest) GetQuantityUnit() string {
	if x != nil && x.QuantityUnit != nil {
		return *x.QuantityUnit
	}
	return ""
}

func (x *AdminUpdatePowerRentalRequest) GetQuantityUnitAmount() string {
	if x != nil && x.QuantityUnitAmount != nil {
		return *x.QuantityUnitAmount
	}
	return ""
}

func (x *AdminUpdatePowerRentalRequest) GetDeliveryAt() uint32 {
	if x != nil && x.DeliveryAt != nil {
		return *x.DeliveryAt
	}
	return 0
}

func (x *AdminUpdatePowerRentalRequest) GetUnitLockDeposit() string {
	if x != nil && x.UnitLockDeposit != nil {
		return *x.UnitLockDeposit
	}
	return ""
}

func (x *AdminUpdatePowerRentalRequest) GetDurationDisplayType() v1.GoodDurationType {
	if x != nil && x.DurationDisplayType != nil {
		return *x.DurationDisplayType
	}
	return v1.GoodDurationType(0)
}

func (x *AdminUpdatePowerRentalRequest) GetGoodType() v1.GoodType {
	if x != nil && x.GoodType != nil {
		return *x.GoodType
	}
	return v1.GoodType(0)
}

func (x *AdminUpdatePowerRentalRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *AdminUpdatePowerRentalRequest) GetServiceStartAt() uint32 {
	if x != nil && x.ServiceStartAt != nil {
		return *x.ServiceStartAt
	}
	return 0
}

func (x *AdminUpdatePowerRentalRequest) GetStartMode() v1.GoodStartMode {
	if x != nil && x.StartMode != nil {
		return *x.StartMode
	}
	return v1.GoodStartMode(0)
}

func (x *AdminUpdatePowerRentalRequest) GetTestOnly() bool {
	if x != nil && x.TestOnly != nil {
		return *x.TestOnly
	}
	return false
}

func (x *AdminUpdatePowerRentalRequest) GetBenefitIntervalHours() uint32 {
	if x != nil && x.BenefitIntervalHours != nil {
		return *x.BenefitIntervalHours
	}
	return 0
}

func (x *AdminUpdatePowerRentalRequest) GetPurchasable() bool {
	if x != nil && x.Purchasable != nil {
		return *x.Purchasable
	}
	return false
}

func (x *AdminUpdatePowerRentalRequest) GetOnline() bool {
	if x != nil && x.Online != nil {
		return *x.Online
	}
	return false
}

func (x *AdminUpdatePowerRentalRequest) GetStockMode() v1.GoodStockMode {
	if x != nil && x.StockMode != nil {
		return *x.StockMode
	}
	return v1.GoodStockMode(0)
}

func (x *AdminUpdatePowerRentalRequest) GetTotal() string {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return ""
}

func (x *AdminUpdatePowerRentalRequest) GetMiningGoodStocks() []*stock.MiningGoodStockReq {
	if x != nil {
		return x.MiningGoodStocks
	}
	return nil
}

type AdminUpdatePowerRentalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PowerRental `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *AdminUpdatePowerRentalResponse) Reset() {
	*x = AdminUpdatePowerRentalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_powerrental_powerrental_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminUpdatePowerRentalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminUpdatePowerRentalResponse) ProtoMessage() {}

func (x *AdminUpdatePowerRentalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_powerrental_powerrental_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminUpdatePowerRentalResponse.ProtoReflect.Descriptor instead.
func (*AdminUpdatePowerRentalResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{4}
}

func (x *AdminUpdatePowerRentalResponse) GetInfo() *PowerRental {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetPowerRentalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoodID string `protobuf:"bytes,10,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
}

func (x *GetPowerRentalRequest) Reset() {
	*x = GetPowerRentalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_powerrental_powerrental_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPowerRentalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPowerRentalRequest) ProtoMessage() {}

func (x *GetPowerRentalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_powerrental_powerrental_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPowerRentalRequest.ProtoReflect.Descriptor instead.
func (*GetPowerRentalRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{5}
}

func (x *GetPowerRentalRequest) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

type GetPowerRentalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PowerRental `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetPowerRentalResponse) Reset() {
	*x = GetPowerRentalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_powerrental_powerrental_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPowerRentalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPowerRentalResponse) ProtoMessage() {}

func (x *GetPowerRentalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_powerrental_powerrental_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPowerRentalResponse.ProtoReflect.Descriptor instead.
func (*GetPowerRentalResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{6}
}

func (x *GetPowerRentalResponse) GetInfo() *PowerRental {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetPowerRentalsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int32 `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32 `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetPowerRentalsRequest) Reset() {
	*x = GetPowerRentalsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_powerrental_powerrental_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPowerRentalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPowerRentalsRequest) ProtoMessage() {}

func (x *GetPowerRentalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_powerrental_powerrental_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPowerRentalsRequest.ProtoReflect.Descriptor instead.
func (*GetPowerRentalsRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{7}
}

func (x *GetPowerRentalsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetPowerRentalsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetPowerRentalsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*PowerRental `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32         `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetPowerRentalsResponse) Reset() {
	*x = GetPowerRentalsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_powerrental_powerrental_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPowerRentalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPowerRentalsResponse) ProtoMessage() {}

func (x *GetPowerRentalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_powerrental_powerrental_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPowerRentalsResponse.ProtoReflect.Descriptor instead.
func (*GetPowerRentalsResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{8}
}

func (x *GetPowerRentalsResponse) GetInfos() []*PowerRental {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetPowerRentalsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type AdminDeletePowerRentalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID     uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID  string `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty"`
	GoodID string `protobuf:"bytes,40,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
}

func (x *AdminDeletePowerRentalRequest) Reset() {
	*x = AdminDeletePowerRentalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_powerrental_powerrental_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminDeletePowerRentalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminDeletePowerRentalRequest) ProtoMessage() {}

func (x *AdminDeletePowerRentalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_powerrental_powerrental_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminDeletePowerRentalRequest.ProtoReflect.Descriptor instead.
func (*AdminDeletePowerRentalRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{9}
}

func (x *AdminDeletePowerRentalRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *AdminDeletePowerRentalRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *AdminDeletePowerRentalRequest) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

type AdminDeletePowerRentalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PowerRental `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *AdminDeletePowerRentalResponse) Reset() {
	*x = AdminDeletePowerRentalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_powerrental_powerrental_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminDeletePowerRentalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminDeletePowerRentalResponse) ProtoMessage() {}

func (x *AdminDeletePowerRentalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_powerrental_powerrental_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminDeletePowerRentalResponse.ProtoReflect.Descriptor instead.
func (*AdminDeletePowerRentalResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_powerrental_powerrental_proto_rawDescGZIP(), []int{10}
}

func (x *AdminDeletePowerRentalResponse) GetInfo() *PowerRental {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_good_gw_v1_powerrental_powerrental_proto protoreflect.FileDescriptor

var file_npool_good_gw_v1_powerrental_powerrental_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x67, 0x77, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2f, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1b, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x6e, 0x70, 0x6f,
	0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x67, 0x6f, 0x6f,
	0x64, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x25, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x6d, 0x77, 0x2f,
	0x76, 0x31, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x63, 0x6f, 0x69,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67,
	0x6f, 0x6f, 0x64, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x2f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x8f, 0x11, 0x0a, 0x0b, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x22,
	0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x75,
	0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x3c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x16, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72,
	0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x4c, 0x6f,
	0x67, 0x6f, 0x12, 0x36, 0x0a, 0x16, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x50, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x16, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x18, 0x5a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x42,
	0x72, 0x61, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f,
	0x67, 0x6f, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x25, 0x0a, 0x0d, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x0e, 0x56,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x8c, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55,
	0x6e, 0x69, 0x74, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x2f, 0x0a, 0x12, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xaa,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55,
	0x6e, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0a, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x74, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x74, 0x12, 0x29, 0x0a, 0x0f, 0x55, 0x6e,
	0x69, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0xbe, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x55, 0x6e, 0x69, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x56, 0x0a, 0x13, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0xc8, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x13, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a,
	0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x47,
	0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x42, 0x65, 0x6e, 0x65, 0x66,
	0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x42,
	0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x47, 0x6f,
	0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0xe6, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x47,
	0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x12, 0x47, 0x6f, 0x6f, 0x64, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0xf0, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x47, 0x0a, 0x0d, 0x47, 0x6f, 0x6f, 0x64,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x0d, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x1b, 0x0a, 0x08, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x84, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x33,
	0x0a, 0x14, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x8e, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x42,
	0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x48, 0x6f,
	0x75, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x0f, 0x47, 0x6f, 0x6f, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x98, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x47,
	0x6f, 0x6f, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1f,
	0x0a, 0x0a, 0x47, 0x6f, 0x6f, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0xa2, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x47, 0x6f, 0x6f, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12,
	0x3f, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0xac, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x21, 0x0a, 0x0b, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18,
	0xb6, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x09, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0xc0, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x10, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x70, 0x6f, 0x74, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0xca, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x47,
	0x6f, 0x6f, 0x64, 0x53, 0x70, 0x6f, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x1f, 0x0a, 0x0a, 0x47, 0x6f, 0x6f, 0x64, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0xd4, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x47, 0x6f, 0x6f, 0x64, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x12, 0x25, 0x0a, 0x0d, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x18, 0xde, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x47, 0x6f, 0x6f, 0x64, 0x57,
	0x61, 0x69, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0xe8, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x47, 0x6f, 0x6f, 0x64, 0x57, 0x61, 0x69, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1b,
	0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x6f, 0x6c, 0x64, 0x18, 0xf2, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x6f, 0x6c, 0x64, 0x12, 0x29, 0x0a, 0x0f, 0x47,
	0x6f, 0x6f, 0x64, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0xfc,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x47, 0x6f, 0x6f, 0x64, 0x41, 0x70, 0x70, 0x52, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x0b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x86, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x4c, 0x61,
	0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x74, 0x18, 0x90, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x74, 0x12,
	0x1d, 0x0a, 0x09, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x49, 0x44, 0x18, 0x9a, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x49, 0x44, 0x12, 0x35,
	0x0a, 0x15, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xa4, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x4e, 0x65, 0x78, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x10, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xae, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x33, 0x0a, 0x14, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xb8, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x11, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xc2, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x09, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f,
	0x69, 0x6e, 0x73, 0x18, 0x84, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x31, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x43,
	0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69,
	0x6e, 0x73, 0x12, 0x60, 0x0a, 0x10, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x47, 0x6f, 0x6f, 0x64,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0xc0, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x10, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x73, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0xf2, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x9b, 0x08, 0x0a, 0x1d, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x6e,
	0x69, 0x74, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x50, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x41, 0x74, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0a, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x55,
	0x6e, 0x69, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0f, 0x55, 0x6e, 0x69, 0x74, 0x4c, 0x6f, 0x63, 0x6b,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x55, 0x0a, 0x13, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x13, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x37, 0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x78, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2c, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x74, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x0e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a,
	0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x20,
	0x0a, 0x08, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x03, 0x52, 0x08, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x38, 0x0a, 0x14, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x04, 0x52, 0x14, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0b, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x05, 0x52, 0x0b, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1c, 0x0a, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0xc8, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x3f, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0xd2, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x15, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0xe6, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x5f, 0x0a, 0x10, 0x4d, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0xf0, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x47, 0x6f, 0x6f, 0x64, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x52, 0x10, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x47,
	0x6f, 0x6f, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x55, 0x6e, 0x69,
	0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x42, 0x17, 0x0a, 0x15,
	0x5f, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x48, 0x6f, 0x75, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x22, 0x5e, 0x0a, 0x1e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0xc1, 0x0a, 0x0a, 0x1d, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64,
	0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44,
	0x12, 0x27, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x3c, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x10, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x55, 0x6e,
	0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x09, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a,
	0x0c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x50, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55,
	0x6e, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x5a, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x12, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x6e,
	0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x05, 0x52, 0x0a, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x2d, 0x0a, 0x0f, 0x55, 0x6e, 0x69, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0f, 0x55, 0x6e, 0x69,
	0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x5a, 0x0a, 0x13, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x48, 0x07, 0x52, 0x13, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x08, 0x47,
	0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x48, 0x08, 0x52, 0x08, 0x47,
	0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0a, 0x52,
	0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x44, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18,
	0xaa, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x0b, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x08, 0x54, 0x65, 0x73, 0x74,
	0x4f, 0x6e, 0x6c, 0x79, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0c, 0x52, 0x08, 0x54,
	0x65, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x14, 0x42, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x48, 0x6f, 0x75,
	0x72, 0x73, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0d, 0x52, 0x14, 0x42, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x48, 0x6f, 0x75, 0x72,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0b, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0e, 0x52, 0x0b, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x06,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0f, 0x52,
	0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x09, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65,
	0x48, 0x10, 0x52, 0x09, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1a, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0xf0, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x11, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x5f, 0x0a, 0x10,
	0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73,
	0x18, 0xfa, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x47,
	0x6f, 0x6f, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x52, 0x10, 0x4d, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x6e,
	0x69, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55,
	0x6e, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x55, 0x6e, 0x69,
	0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x54, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x42, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x48, 0x6f, 0x75, 0x72,
	0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x22, 0x5e, 0x0a, 0x1e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2f, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47,
	0x6f, 0x6f, 0x64, 0x49, 0x44, 0x22, 0x56, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3c, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x46, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x6f, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3e, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x5d, 0x0a, 0x1d, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47,
	0x6f, 0x6f, 0x64, 0x49, 0x44, 0x22, 0x5e, 0x0a, 0x1e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0xfc, 0x06, 0x0a, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x12, 0xba, 0x01, 0x0a, 0x16, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x12, 0x3a, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a,
	0x22, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x12, 0xba,
	0x01, 0x0a, 0x16, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x12, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x12, 0x99, 0x01, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x12, 0x32,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a,
	0x01, 0x2a, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x12, 0x9d, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x73, 0x12, 0x33, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01,
	0x2a, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x73, 0x12, 0xba, 0x01, 0x0a, 0x16, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x12, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x42, 0x3f, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67,
	0x6f, 0x6f, 0x64, 0x2f, 0x67, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_good_gw_v1_powerrental_powerrental_proto_rawDescOnce sync.Once
	file_npool_good_gw_v1_powerrental_powerrental_proto_rawDescData = file_npool_good_gw_v1_powerrental_powerrental_proto_rawDesc
)

func file_npool_good_gw_v1_powerrental_powerrental_proto_rawDescGZIP() []byte {
	file_npool_good_gw_v1_powerrental_powerrental_proto_rawDescOnce.Do(func() {
		file_npool_good_gw_v1_powerrental_powerrental_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_good_gw_v1_powerrental_powerrental_proto_rawDescData)
	})
	return file_npool_good_gw_v1_powerrental_powerrental_proto_rawDescData
}

var file_npool_good_gw_v1_powerrental_powerrental_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_npool_good_gw_v1_powerrental_powerrental_proto_goTypes = []interface{}{
	(*PowerRental)(nil),                    // 0: good.gateway.powerrental.v1.PowerRental
	(*AdminCreatePowerRentalRequest)(nil),  // 1: good.gateway.powerrental.v1.AdminCreatePowerRentalRequest
	(*AdminCreatePowerRentalResponse)(nil), // 2: good.gateway.powerrental.v1.AdminCreatePowerRentalResponse
	(*AdminUpdatePowerRentalRequest)(nil),  // 3: good.gateway.powerrental.v1.AdminUpdatePowerRentalRequest
	(*AdminUpdatePowerRentalResponse)(nil), // 4: good.gateway.powerrental.v1.AdminUpdatePowerRentalResponse
	(*GetPowerRentalRequest)(nil),          // 5: good.gateway.powerrental.v1.GetPowerRentalRequest
	(*GetPowerRentalResponse)(nil),         // 6: good.gateway.powerrental.v1.GetPowerRentalResponse
	(*GetPowerRentalsRequest)(nil),         // 7: good.gateway.powerrental.v1.GetPowerRentalsRequest
	(*GetPowerRentalsResponse)(nil),        // 8: good.gateway.powerrental.v1.GetPowerRentalsResponse
	(*AdminDeletePowerRentalRequest)(nil),  // 9: good.gateway.powerrental.v1.AdminDeletePowerRentalRequest
	(*AdminDeletePowerRentalResponse)(nil), // 10: good.gateway.powerrental.v1.AdminDeletePowerRentalResponse
	(v1.GoodDurationType)(0),               // 11: basetypes.good.v1.GoodDurationType
	(v1.GoodType)(0),                       // 12: basetypes.good.v1.GoodType
	(v1.BenefitType)(0),                    // 13: basetypes.good.v1.BenefitType
	(v1.GoodStartMode)(0),                  // 14: basetypes.good.v1.GoodStartMode
	(v1.GoodStockMode)(0),                  // 15: basetypes.good.v1.GoodStockMode
	(v1.BenefitState)(0),                   // 16: basetypes.good.v1.BenefitState
	(*coin.GoodCoinInfo)(nil),              // 17: good.middleware.good1.coin.v1.GoodCoinInfo
	(*stock.MiningGoodStockInfo)(nil),      // 18: good.middleware.good1.stock.v1.MiningGoodStockInfo
	(*stock.MiningGoodStockReq)(nil),       // 19: good.middleware.good1.stock.v1.MiningGoodStockReq
}
var file_npool_good_gw_v1_powerrental_powerrental_proto_depIdxs = []int32{
	11, // 0: good.gateway.powerrental.v1.PowerRental.DurationDisplayType:type_name -> basetypes.good.v1.GoodDurationType
	12, // 1: good.gateway.powerrental.v1.PowerRental.GoodType:type_name -> basetypes.good.v1.GoodType
	13, // 2: good.gateway.powerrental.v1.PowerRental.BenefitType:type_name -> basetypes.good.v1.BenefitType
	14, // 3: good.gateway.powerrental.v1.PowerRental.GoodStartMode:type_name -> basetypes.good.v1.GoodStartMode
	15, // 4: good.gateway.powerrental.v1.PowerRental.StockMode:type_name -> basetypes.good.v1.GoodStockMode
	16, // 5: good.gateway.powerrental.v1.PowerRental.RewardState:type_name -> basetypes.good.v1.BenefitState
	17, // 6: good.gateway.powerrental.v1.PowerRental.GoodCoins:type_name -> good.middleware.good1.coin.v1.GoodCoinInfo
	18, // 7: good.gateway.powerrental.v1.PowerRental.MiningGoodStocks:type_name -> good.middleware.good1.stock.v1.MiningGoodStockInfo
	11, // 8: good.gateway.powerrental.v1.AdminCreatePowerRentalRequest.DurationDisplayType:type_name -> basetypes.good.v1.GoodDurationType
	12, // 9: good.gateway.powerrental.v1.AdminCreatePowerRentalRequest.GoodType:type_name -> basetypes.good.v1.GoodType
	14, // 10: good.gateway.powerrental.v1.AdminCreatePowerRentalRequest.StartMode:type_name -> basetypes.good.v1.GoodStartMode
	15, // 11: good.gateway.powerrental.v1.AdminCreatePowerRentalRequest.StockMode:type_name -> basetypes.good.v1.GoodStockMode
	19, // 12: good.gateway.powerrental.v1.AdminCreatePowerRentalRequest.MiningGoodStocks:type_name -> good.middleware.good1.stock.v1.MiningGoodStockReq
	0,  // 13: good.gateway.powerrental.v1.AdminCreatePowerRentalResponse.Info:type_name -> good.gateway.powerrental.v1.PowerRental
	11, // 14: good.gateway.powerrental.v1.AdminUpdatePowerRentalRequest.DurationDisplayType:type_name -> basetypes.good.v1.GoodDurationType
	12, // 15: good.gateway.powerrental.v1.AdminUpdatePowerRentalRequest.GoodType:type_name -> basetypes.good.v1.GoodType
	14, // 16: good.gateway.powerrental.v1.AdminUpdatePowerRentalRequest.StartMode:type_name -> basetypes.good.v1.GoodStartMode
	15, // 17: good.gateway.powerrental.v1.AdminUpdatePowerRentalRequest.StockMode:type_name -> basetypes.good.v1.GoodStockMode
	19, // 18: good.gateway.powerrental.v1.AdminUpdatePowerRentalRequest.MiningGoodStocks:type_name -> good.middleware.good1.stock.v1.MiningGoodStockReq
	0,  // 19: good.gateway.powerrental.v1.AdminUpdatePowerRentalResponse.Info:type_name -> good.gateway.powerrental.v1.PowerRental
	0,  // 20: good.gateway.powerrental.v1.GetPowerRentalResponse.Info:type_name -> good.gateway.powerrental.v1.PowerRental
	0,  // 21: good.gateway.powerrental.v1.GetPowerRentalsResponse.Infos:type_name -> good.gateway.powerrental.v1.PowerRental
	0,  // 22: good.gateway.powerrental.v1.AdminDeletePowerRentalResponse.Info:type_name -> good.gateway.powerrental.v1.PowerRental
	1,  // 23: good.gateway.powerrental.v1.Gateway.AdminCreatePowerRental:input_type -> good.gateway.powerrental.v1.AdminCreatePowerRentalRequest
	3,  // 24: good.gateway.powerrental.v1.Gateway.AdminUpdatePowerRental:input_type -> good.gateway.powerrental.v1.AdminUpdatePowerRentalRequest
	5,  // 25: good.gateway.powerrental.v1.Gateway.GetPowerRental:input_type -> good.gateway.powerrental.v1.GetPowerRentalRequest
	7,  // 26: good.gateway.powerrental.v1.Gateway.GetPowerRentals:input_type -> good.gateway.powerrental.v1.GetPowerRentalsRequest
	9,  // 27: good.gateway.powerrental.v1.Gateway.AdminDeletePowerRental:input_type -> good.gateway.powerrental.v1.AdminDeletePowerRentalRequest
	2,  // 28: good.gateway.powerrental.v1.Gateway.AdminCreatePowerRental:output_type -> good.gateway.powerrental.v1.AdminCreatePowerRentalResponse
	4,  // 29: good.gateway.powerrental.v1.Gateway.AdminUpdatePowerRental:output_type -> good.gateway.powerrental.v1.AdminUpdatePowerRentalResponse
	6,  // 30: good.gateway.powerrental.v1.Gateway.GetPowerRental:output_type -> good.gateway.powerrental.v1.GetPowerRentalResponse
	8,  // 31: good.gateway.powerrental.v1.Gateway.GetPowerRentals:output_type -> good.gateway.powerrental.v1.GetPowerRentalsResponse
	10, // 32: good.gateway.powerrental.v1.Gateway.AdminDeletePowerRental:output_type -> good.gateway.powerrental.v1.AdminDeletePowerRentalResponse
	28, // [28:33] is the sub-list for method output_type
	23, // [23:28] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_npool_good_gw_v1_powerrental_powerrental_proto_init() }
func file_npool_good_gw_v1_powerrental_powerrental_proto_init() {
	if File_npool_good_gw_v1_powerrental_powerrental_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_good_gw_v1_powerrental_powerrental_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PowerRental); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_powerrental_powerrental_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminCreatePowerRentalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_powerrental_powerrental_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminCreatePowerRentalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_powerrental_powerrental_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminUpdatePowerRentalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_powerrental_powerrental_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminUpdatePowerRentalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_powerrental_powerrental_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPowerRentalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_powerrental_powerrental_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPowerRentalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_powerrental_powerrental_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPowerRentalsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_powerrental_powerrental_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPowerRentalsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_powerrental_powerrental_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminDeletePowerRentalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_powerrental_powerrental_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminDeletePowerRentalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_good_gw_v1_powerrental_powerrental_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_npool_good_gw_v1_powerrental_powerrental_proto_msgTypes[3].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_good_gw_v1_powerrental_powerrental_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_good_gw_v1_powerrental_powerrental_proto_goTypes,
		DependencyIndexes: file_npool_good_gw_v1_powerrental_powerrental_proto_depIdxs,
		MessageInfos:      file_npool_good_gw_v1_powerrental_powerrental_proto_msgTypes,
	}.Build()
	File_npool_good_gw_v1_powerrental_powerrental_proto = out.File
	file_npool_good_gw_v1_powerrental_powerrental_proto_rawDesc = nil
	file_npool_good_gw_v1_powerrental_powerrental_proto_goTypes = nil
	file_npool_good_gw_v1_powerrental_powerrental_proto_depIdxs = nil
}
