syntax = "proto3";

package good.gateway.powerrental.v1;

option go_package = "github.com/NpoolPlatform/message/npool/good/gw/v1/powerrental";

import "google/api/annotations.proto";
import "npool/basetypes/good/v1/enums.proto";
import "npool/good/mw/v1/good/coin/coin.proto";
import "npool/good/mw/v1/good/stock/stock.proto";

service Gateway {
    rpc AdminCreatePowerRental (AdminCreatePowerRentalRequest) returns (AdminCreatePowerRentalResponse) {
        option (google.api.http) = {
            post: "/v1/admin/create/powerrental"
            body: "*"
        };
    }

    rpc AdminUpdatePowerRental (AdminUpdatePowerRentalRequest) returns (AdminUpdatePowerRentalResponse) {
        option (google.api.http) = {
            post: "/v1/admin/update/powerrental"
            body: "*"
        };
    }

    rpc GetPowerRental (GetPowerRentalRequest) returns (GetPowerRentalResponse) {
        option (google.api.http) = {
            post: "/v1/get/powerrental"
            body: "*"
        };
    }

    rpc GetPowerRentals (GetPowerRentalsRequest) returns (GetPowerRentalsResponse) {
        option (google.api.http) = {
            post: "/v1/get/powerrentals"
            body: "*"
        };
    }

    rpc AdminDeletePowerRental (AdminDeletePowerRentalRequest) returns (AdminDeletePowerRentalResponse) {
        option (google.api.http) = {
            post: "/v1/admin/delete/powerrental"
            body: "*"
        };
    }
}

message PowerRental {
    uint32 ID = 10;
    string EntID = 20;
    string GoodID = 30;

    string DeviceTypeID = 40;
    string DeviceType = 50;
    string DeviceManufacturerName = 60;
    string DeviceManufacturerLogo = 70;
    uint32 DevicePowerConsumption = 80;
    uint32 DeviceShipmentAt = 90;

    string VendorLocationID = 100;
    string VendorBrand = 110;
    string VendorLogo = 120;
    string VendorCountry = 130;
    string VendorProvince = 140;

    string UnitPrice = 150;
    string QuantityUnit = 160;
    string QuantityUnitAmount = 170;
    uint32 DeliveryAt = 180;
    string UnitLockDeposit = 190;
    basetypes.good.v1.GoodDurationType DurationDisplayType = 200;

    basetypes.good.v1.GoodType GoodType = 210;
    basetypes.good.v1.BenefitType BenefitType = 220;
    string GoodName = 230;
    uint32 GoodServiceStartAt = 240;
    basetypes.good.v1.GoodStartMode GoodStartMode = 250;
    bool TestOnly = 260;
    uint32 BenefitIntervalHours = 270;
    bool GoodPurchasable = 280;
    bool GoodOnline = 290;
    basetypes.good.v1.GoodStockMode StockMode = 300;

    string GoodStockID = 310;
    string GoodTotal = 320;
    string GoodSpotQuantity = 330;
    string GoodLocked = 340;
    string GoodInService = 350;
    string GoodWaitStart = 360;
    string GoodSold = 370;
    string GoodAppReserved = 380;

    basetypes.good.v1.BenefitState RewardState = 390;
    uint32 LastRewardAt = 400;
    string RewardTID = 410;
    string NextRewardStartAmount = 420;
    string LastRewardAmount = 430;
    string LastUnitRewardAmount = 440;
    string TotalRewardAmount = 450;

    uint32 AppGoodServiceStartAt = 460;
    basetypes.good.v1.GoodStartMode AppGoodStartMode = 470;

    repeated good.middleware.good1.coin.v1.GoodCoinInfo GoodCoins = 900;
    repeated good.middleware.good1.stock.v1.MiningGoodStockInfo MiningGoodStocks = 960;

    uint32 CreatedAt = 1000;
    uint32 UpdatedAt = 1010;
}

message AdminCreatePowerRentalRequest {
    // Base of power rental
    string DeviceTypeID = 40;
    string VendorLocationID = 50;
    string UnitPrice = 60;
    string QuantityUnit = 70;
    string QuantityUnitAmount = 80;
    optional uint32 DeliveryAt = 90;
    optional string UnitLockDeposit = 100;
    basetypes.good.v1.GoodDurationType DurationDisplayType = 110;

    // Good information
    basetypes.good.v1.GoodType GoodType = 120;
    basetypes.good.v1.BenefitType BenefitType = 130;
    string Name = 140;
    optional uint32 ServiceStartAt = 150;
    basetypes.good.v1.GoodStartMode StartMode = 160;
    optional bool TestOnly = 170;
    optional uint32 BenefitIntervalHours = 180;
    optional bool Purchasable = 190;
    optional bool Online = 200;
    basetypes.good.v1.GoodStockMode StockMode = 210;

    // Good stock
    string Total = 230;
    repeated good.middleware.good1.stock.v1.MiningGoodStockReq MiningGoodStocks = 240;
}

message AdminCreatePowerRentalResponse {
    PowerRental Info = 10;
}

message AdminUpdatePowerRentalRequest {
    uint32 ID = 10;
    string EntID = 20;
    string GoodID = 40;

    optional string DeviceTypeID = 50;
    optional string VendorLocationID = 60;
    optional string UnitPrice = 70;
    optional string QuantityUnit = 80;
    optional string QuantityUnitAmount = 90;
    optional uint32 DeliveryAt = 100;
    optional string UnitLockDeposit = 110;
    optional basetypes.good.v1.GoodDurationType DurationDisplayType = 120;

    // Good information
    optional basetypes.good.v1.GoodType GoodType = 130;
    optional basetypes.good.v1.BenefitType BenefitType = 140;
    optional string Name = 150;
    optional uint32 ServiceStartAt = 160;
    optional basetypes.good.v1.GoodStartMode StartMode = 170;
    optional bool TestOnly = 180;
    optional uint32 BenefitIntervalHours = 190;
    optional bool Purchasable = 200;
    optional bool Online = 210;
    optional basetypes.good.v1.GoodStockMode StockMode = 220;

    // Good stock
    optional string Total = 240;
    repeated good.middleware.good1.stock.v1.MiningGoodStockReq MiningGoodStocks = 250;
}

message AdminUpdatePowerRentalResponse {
    PowerRental Info = 10;
}

message GetPowerRentalRequest {
    string GoodID = 10;
}

message GetPowerRentalResponse {
    PowerRental Info = 10;
}

message GetPowerRentalsRequest {
    int32 Offset = 20;
    int32 Limit = 30;
}

message GetPowerRentalsResponse {
    repeated PowerRental Infos = 10;
    uint32 Total = 20;
}

message AdminDeletePowerRentalRequest {
    uint32 ID = 10;
    string EntID = 20;
    string GoodID = 40;
}

message AdminDeletePowerRentalResponse {
    PowerRental Info = 10;
}

