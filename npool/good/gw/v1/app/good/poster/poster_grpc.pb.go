// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/good/gw/v1/app/good/poster/poster.proto

package poster

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gateway_CreatePoster_FullMethodName      = "/good.gateway.app.good1.poster.v1.Gateway/CreatePoster"
	Gateway_UpdatePoster_FullMethodName      = "/good.gateway.app.good1.poster.v1.Gateway/UpdatePoster"
	Gateway_GetPosters_FullMethodName        = "/good.gateway.app.good1.poster.v1.Gateway/GetPosters"
	Gateway_DeletePoster_FullMethodName      = "/good.gateway.app.good1.poster.v1.Gateway/DeletePoster"
	Gateway_AdminCreatePoster_FullMethodName = "/good.gateway.app.good1.poster.v1.Gateway/AdminCreatePoster"
	Gateway_AdminUpdatePoster_FullMethodName = "/good.gateway.app.good1.poster.v1.Gateway/AdminUpdatePoster"
	Gateway_AdminGetPosters_FullMethodName   = "/good.gateway.app.good1.poster.v1.Gateway/AdminGetPosters"
	Gateway_AdminDeletePoster_FullMethodName = "/good.gateway.app.good1.poster.v1.Gateway/AdminDeletePoster"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	CreatePoster(ctx context.Context, in *CreatePosterRequest, opts ...grpc.CallOption) (*CreatePosterResponse, error)
	UpdatePoster(ctx context.Context, in *UpdatePosterRequest, opts ...grpc.CallOption) (*UpdatePosterResponse, error)
	GetPosters(ctx context.Context, in *GetPostersRequest, opts ...grpc.CallOption) (*GetPostersResponse, error)
	DeletePoster(ctx context.Context, in *DeletePosterRequest, opts ...grpc.CallOption) (*DeletePosterResponse, error)
	// Run by admin
	AdminCreatePoster(ctx context.Context, in *AdminCreatePosterRequest, opts ...grpc.CallOption) (*AdminCreatePosterResponse, error)
	AdminUpdatePoster(ctx context.Context, in *AdminUpdatePosterRequest, opts ...grpc.CallOption) (*AdminUpdatePosterResponse, error)
	AdminGetPosters(ctx context.Context, in *AdminGetPostersRequest, opts ...grpc.CallOption) (*AdminGetPostersResponse, error)
	AdminDeletePoster(ctx context.Context, in *AdminDeletePosterRequest, opts ...grpc.CallOption) (*AdminDeletePosterResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) CreatePoster(ctx context.Context, in *CreatePosterRequest, opts ...grpc.CallOption) (*CreatePosterResponse, error) {
	out := new(CreatePosterResponse)
	err := c.cc.Invoke(ctx, Gateway_CreatePoster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdatePoster(ctx context.Context, in *UpdatePosterRequest, opts ...grpc.CallOption) (*UpdatePosterResponse, error) {
	out := new(UpdatePosterResponse)
	err := c.cc.Invoke(ctx, Gateway_UpdatePoster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetPosters(ctx context.Context, in *GetPostersRequest, opts ...grpc.CallOption) (*GetPostersResponse, error) {
	out := new(GetPostersResponse)
	err := c.cc.Invoke(ctx, Gateway_GetPosters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) DeletePoster(ctx context.Context, in *DeletePosterRequest, opts ...grpc.CallOption) (*DeletePosterResponse, error) {
	out := new(DeletePosterResponse)
	err := c.cc.Invoke(ctx, Gateway_DeletePoster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminCreatePoster(ctx context.Context, in *AdminCreatePosterRequest, opts ...grpc.CallOption) (*AdminCreatePosterResponse, error) {
	out := new(AdminCreatePosterResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminCreatePoster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminUpdatePoster(ctx context.Context, in *AdminUpdatePosterRequest, opts ...grpc.CallOption) (*AdminUpdatePosterResponse, error) {
	out := new(AdminUpdatePosterResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminUpdatePoster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminGetPosters(ctx context.Context, in *AdminGetPostersRequest, opts ...grpc.CallOption) (*AdminGetPostersResponse, error) {
	out := new(AdminGetPostersResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminGetPosters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminDeletePoster(ctx context.Context, in *AdminDeletePosterRequest, opts ...grpc.CallOption) (*AdminDeletePosterResponse, error) {
	out := new(AdminDeletePosterResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminDeletePoster_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	CreatePoster(context.Context, *CreatePosterRequest) (*CreatePosterResponse, error)
	UpdatePoster(context.Context, *UpdatePosterRequest) (*UpdatePosterResponse, error)
	GetPosters(context.Context, *GetPostersRequest) (*GetPostersResponse, error)
	DeletePoster(context.Context, *DeletePosterRequest) (*DeletePosterResponse, error)
	// Run by admin
	AdminCreatePoster(context.Context, *AdminCreatePosterRequest) (*AdminCreatePosterResponse, error)
	AdminUpdatePoster(context.Context, *AdminUpdatePosterRequest) (*AdminUpdatePosterResponse, error)
	AdminGetPosters(context.Context, *AdminGetPostersRequest) (*AdminGetPostersResponse, error)
	AdminDeletePoster(context.Context, *AdminDeletePosterRequest) (*AdminDeletePosterResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) CreatePoster(context.Context, *CreatePosterRequest) (*CreatePosterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePoster not implemented")
}
func (UnimplementedGatewayServer) UpdatePoster(context.Context, *UpdatePosterRequest) (*UpdatePosterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePoster not implemented")
}
func (UnimplementedGatewayServer) GetPosters(context.Context, *GetPostersRequest) (*GetPostersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPosters not implemented")
}
func (UnimplementedGatewayServer) DeletePoster(context.Context, *DeletePosterRequest) (*DeletePosterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePoster not implemented")
}
func (UnimplementedGatewayServer) AdminCreatePoster(context.Context, *AdminCreatePosterRequest) (*AdminCreatePosterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCreatePoster not implemented")
}
func (UnimplementedGatewayServer) AdminUpdatePoster(context.Context, *AdminUpdatePosterRequest) (*AdminUpdatePosterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdatePoster not implemented")
}
func (UnimplementedGatewayServer) AdminGetPosters(context.Context, *AdminGetPostersRequest) (*AdminGetPostersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetPosters not implemented")
}
func (UnimplementedGatewayServer) AdminDeletePoster(context.Context, *AdminDeletePosterRequest) (*AdminDeletePosterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDeletePoster not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_CreatePoster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePosterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreatePoster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_CreatePoster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreatePoster(ctx, req.(*CreatePosterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdatePoster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePosterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdatePoster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_UpdatePoster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdatePoster(ctx, req.(*UpdatePosterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetPosters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetPosters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetPosters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetPosters(ctx, req.(*GetPostersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_DeletePoster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePosterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).DeletePoster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_DeletePoster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).DeletePoster(ctx, req.(*DeletePosterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminCreatePoster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCreatePosterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminCreatePoster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminCreatePoster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminCreatePoster(ctx, req.(*AdminCreatePosterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminUpdatePoster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdatePosterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminUpdatePoster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminUpdatePoster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminUpdatePoster(ctx, req.(*AdminUpdatePosterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminGetPosters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetPostersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminGetPosters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminGetPosters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminGetPosters(ctx, req.(*AdminGetPostersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminDeletePoster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDeletePosterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminDeletePoster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminDeletePoster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminDeletePoster(ctx, req.(*AdminDeletePosterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "good.gateway.app.good1.poster.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePoster",
			Handler:    _Gateway_CreatePoster_Handler,
		},
		{
			MethodName: "UpdatePoster",
			Handler:    _Gateway_UpdatePoster_Handler,
		},
		{
			MethodName: "GetPosters",
			Handler:    _Gateway_GetPosters_Handler,
		},
		{
			MethodName: "DeletePoster",
			Handler:    _Gateway_DeletePoster_Handler,
		},
		{
			MethodName: "AdminCreatePoster",
			Handler:    _Gateway_AdminCreatePoster_Handler,
		},
		{
			MethodName: "AdminUpdatePoster",
			Handler:    _Gateway_AdminUpdatePoster_Handler,
		},
		{
			MethodName: "AdminGetPosters",
			Handler:    _Gateway_AdminGetPosters_Handler,
		},
		{
			MethodName: "AdminDeletePoster",
			Handler:    _Gateway_AdminDeletePoster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/good/gw/v1/app/good/poster/poster.proto",
}
