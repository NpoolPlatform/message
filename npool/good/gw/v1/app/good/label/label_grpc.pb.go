// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/good/gw/v1/app/good/label/label.proto

package label

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	CreateLabel(ctx context.Context, in *CreateLabelRequest, opts ...grpc.CallOption) (*CreateLabelResponse, error)
	UpdateLabel(ctx context.Context, in *UpdateLabelRequest, opts ...grpc.CallOption) (*UpdateLabelResponse, error)
	GetLabels(ctx context.Context, in *GetLabelsRequest, opts ...grpc.CallOption) (*GetLabelsResponse, error)
	DeleteLabel(ctx context.Context, in *DeleteLabelRequest, opts ...grpc.CallOption) (*DeleteLabelResponse, error)
	// Run by admin
	AdminCreateLabel(ctx context.Context, in *AdminCreateLabelRequest, opts ...grpc.CallOption) (*AdminCreateLabelResponse, error)
	AdminUpdateLabel(ctx context.Context, in *AdminUpdateLabelRequest, opts ...grpc.CallOption) (*AdminUpdateLabelResponse, error)
	AdminGetLabels(ctx context.Context, in *AdminGetLabelsRequest, opts ...grpc.CallOption) (*AdminGetLabelsResponse, error)
	AdminDeleteLabel(ctx context.Context, in *AdminDeleteLabelRequest, opts ...grpc.CallOption) (*AdminDeleteLabelResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) CreateLabel(ctx context.Context, in *CreateLabelRequest, opts ...grpc.CallOption) (*CreateLabelResponse, error) {
	out := new(CreateLabelResponse)
	err := c.cc.Invoke(ctx, "/good.gateway.app.good1.label.v1.Gateway/CreateLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdateLabel(ctx context.Context, in *UpdateLabelRequest, opts ...grpc.CallOption) (*UpdateLabelResponse, error) {
	out := new(UpdateLabelResponse)
	err := c.cc.Invoke(ctx, "/good.gateway.app.good1.label.v1.Gateway/UpdateLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetLabels(ctx context.Context, in *GetLabelsRequest, opts ...grpc.CallOption) (*GetLabelsResponse, error) {
	out := new(GetLabelsResponse)
	err := c.cc.Invoke(ctx, "/good.gateway.app.good1.label.v1.Gateway/GetLabels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) DeleteLabel(ctx context.Context, in *DeleteLabelRequest, opts ...grpc.CallOption) (*DeleteLabelResponse, error) {
	out := new(DeleteLabelResponse)
	err := c.cc.Invoke(ctx, "/good.gateway.app.good1.label.v1.Gateway/DeleteLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminCreateLabel(ctx context.Context, in *AdminCreateLabelRequest, opts ...grpc.CallOption) (*AdminCreateLabelResponse, error) {
	out := new(AdminCreateLabelResponse)
	err := c.cc.Invoke(ctx, "/good.gateway.app.good1.label.v1.Gateway/AdminCreateLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminUpdateLabel(ctx context.Context, in *AdminUpdateLabelRequest, opts ...grpc.CallOption) (*AdminUpdateLabelResponse, error) {
	out := new(AdminUpdateLabelResponse)
	err := c.cc.Invoke(ctx, "/good.gateway.app.good1.label.v1.Gateway/AdminUpdateLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminGetLabels(ctx context.Context, in *AdminGetLabelsRequest, opts ...grpc.CallOption) (*AdminGetLabelsResponse, error) {
	out := new(AdminGetLabelsResponse)
	err := c.cc.Invoke(ctx, "/good.gateway.app.good1.label.v1.Gateway/AdminGetLabels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminDeleteLabel(ctx context.Context, in *AdminDeleteLabelRequest, opts ...grpc.CallOption) (*AdminDeleteLabelResponse, error) {
	out := new(AdminDeleteLabelResponse)
	err := c.cc.Invoke(ctx, "/good.gateway.app.good1.label.v1.Gateway/AdminDeleteLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	CreateLabel(context.Context, *CreateLabelRequest) (*CreateLabelResponse, error)
	UpdateLabel(context.Context, *UpdateLabelRequest) (*UpdateLabelResponse, error)
	GetLabels(context.Context, *GetLabelsRequest) (*GetLabelsResponse, error)
	DeleteLabel(context.Context, *DeleteLabelRequest) (*DeleteLabelResponse, error)
	// Run by admin
	AdminCreateLabel(context.Context, *AdminCreateLabelRequest) (*AdminCreateLabelResponse, error)
	AdminUpdateLabel(context.Context, *AdminUpdateLabelRequest) (*AdminUpdateLabelResponse, error)
	AdminGetLabels(context.Context, *AdminGetLabelsRequest) (*AdminGetLabelsResponse, error)
	AdminDeleteLabel(context.Context, *AdminDeleteLabelRequest) (*AdminDeleteLabelResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) CreateLabel(context.Context, *CreateLabelRequest) (*CreateLabelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLabel not implemented")
}
func (UnimplementedGatewayServer) UpdateLabel(context.Context, *UpdateLabelRequest) (*UpdateLabelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLabel not implemented")
}
func (UnimplementedGatewayServer) GetLabels(context.Context, *GetLabelsRequest) (*GetLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLabels not implemented")
}
func (UnimplementedGatewayServer) DeleteLabel(context.Context, *DeleteLabelRequest) (*DeleteLabelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLabel not implemented")
}
func (UnimplementedGatewayServer) AdminCreateLabel(context.Context, *AdminCreateLabelRequest) (*AdminCreateLabelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCreateLabel not implemented")
}
func (UnimplementedGatewayServer) AdminUpdateLabel(context.Context, *AdminUpdateLabelRequest) (*AdminUpdateLabelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateLabel not implemented")
}
func (UnimplementedGatewayServer) AdminGetLabels(context.Context, *AdminGetLabelsRequest) (*AdminGetLabelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetLabels not implemented")
}
func (UnimplementedGatewayServer) AdminDeleteLabel(context.Context, *AdminDeleteLabelRequest) (*AdminDeleteLabelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDeleteLabel not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_CreateLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.gateway.app.good1.label.v1.Gateway/CreateLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateLabel(ctx, req.(*CreateLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdateLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.gateway.app.good1.label.v1.Gateway/UpdateLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateLabel(ctx, req.(*UpdateLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.gateway.app.good1.label.v1.Gateway/GetLabels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetLabels(ctx, req.(*GetLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_DeleteLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).DeleteLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.gateway.app.good1.label.v1.Gateway/DeleteLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).DeleteLabel(ctx, req.(*DeleteLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminCreateLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCreateLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminCreateLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.gateway.app.good1.label.v1.Gateway/AdminCreateLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminCreateLabel(ctx, req.(*AdminCreateLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminUpdateLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminUpdateLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.gateway.app.good1.label.v1.Gateway/AdminUpdateLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminUpdateLabel(ctx, req.(*AdminUpdateLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminGetLabels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetLabelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminGetLabels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.gateway.app.good1.label.v1.Gateway/AdminGetLabels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminGetLabels(ctx, req.(*AdminGetLabelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminDeleteLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDeleteLabelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminDeleteLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.gateway.app.good1.label.v1.Gateway/AdminDeleteLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminDeleteLabel(ctx, req.(*AdminDeleteLabelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "good.gateway.app.good1.label.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLabel",
			Handler:    _Gateway_CreateLabel_Handler,
		},
		{
			MethodName: "UpdateLabel",
			Handler:    _Gateway_UpdateLabel_Handler,
		},
		{
			MethodName: "GetLabels",
			Handler:    _Gateway_GetLabels_Handler,
		},
		{
			MethodName: "DeleteLabel",
			Handler:    _Gateway_DeleteLabel_Handler,
		},
		{
			MethodName: "AdminCreateLabel",
			Handler:    _Gateway_AdminCreateLabel_Handler,
		},
		{
			MethodName: "AdminUpdateLabel",
			Handler:    _Gateway_AdminUpdateLabel_Handler,
		},
		{
			MethodName: "AdminGetLabels",
			Handler:    _Gateway_AdminGetLabels_Handler,
		},
		{
			MethodName: "AdminDeleteLabel",
			Handler:    _Gateway_AdminDeleteLabel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/good/gw/v1/app/good/label/label.proto",
}
