// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/good/gw/v1/app/good/simulate/simulate.proto

package simulate

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gateway_CreateSimulate_FullMethodName  = "/good.gateway.app.good1.simulate.v1.Gateway/CreateSimulate"
	Gateway_CreateNSimulate_FullMethodName = "/good.gateway.app.good1.simulate.v1.Gateway/CreateNSimulate"
	Gateway_GetSimulates_FullMethodName    = "/good.gateway.app.good1.simulate.v1.Gateway/GetSimulates"
	Gateway_GetNSimulates_FullMethodName   = "/good.gateway.app.good1.simulate.v1.Gateway/GetNSimulates"
	Gateway_DeleteSimulate_FullMethodName  = "/good.gateway.app.good1.simulate.v1.Gateway/DeleteSimulate"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	CreateSimulate(ctx context.Context, in *CreateSimulateRequest, opts ...grpc.CallOption) (*CreateSimulateResponse, error)
	CreateNSimulate(ctx context.Context, in *CreateNSimulateRequest, opts ...grpc.CallOption) (*CreateNSimulateResponse, error)
	GetSimulates(ctx context.Context, in *GetSimulatesRequest, opts ...grpc.CallOption) (*GetSimulatesResponse, error)
	GetNSimulates(ctx context.Context, in *GetNSimulatesRequest, opts ...grpc.CallOption) (*GetNSimulatesResponse, error)
	DeleteSimulate(ctx context.Context, in *DeleteSimulateRequest, opts ...grpc.CallOption) (*DeleteSimulateResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) CreateSimulate(ctx context.Context, in *CreateSimulateRequest, opts ...grpc.CallOption) (*CreateSimulateResponse, error) {
	out := new(CreateSimulateResponse)
	err := c.cc.Invoke(ctx, Gateway_CreateSimulate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) CreateNSimulate(ctx context.Context, in *CreateNSimulateRequest, opts ...grpc.CallOption) (*CreateNSimulateResponse, error) {
	out := new(CreateNSimulateResponse)
	err := c.cc.Invoke(ctx, Gateway_CreateNSimulate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetSimulates(ctx context.Context, in *GetSimulatesRequest, opts ...grpc.CallOption) (*GetSimulatesResponse, error) {
	out := new(GetSimulatesResponse)
	err := c.cc.Invoke(ctx, Gateway_GetSimulates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetNSimulates(ctx context.Context, in *GetNSimulatesRequest, opts ...grpc.CallOption) (*GetNSimulatesResponse, error) {
	out := new(GetNSimulatesResponse)
	err := c.cc.Invoke(ctx, Gateway_GetNSimulates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) DeleteSimulate(ctx context.Context, in *DeleteSimulateRequest, opts ...grpc.CallOption) (*DeleteSimulateResponse, error) {
	out := new(DeleteSimulateResponse)
	err := c.cc.Invoke(ctx, Gateway_DeleteSimulate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	CreateSimulate(context.Context, *CreateSimulateRequest) (*CreateSimulateResponse, error)
	CreateNSimulate(context.Context, *CreateNSimulateRequest) (*CreateNSimulateResponse, error)
	GetSimulates(context.Context, *GetSimulatesRequest) (*GetSimulatesResponse, error)
	GetNSimulates(context.Context, *GetNSimulatesRequest) (*GetNSimulatesResponse, error)
	DeleteSimulate(context.Context, *DeleteSimulateRequest) (*DeleteSimulateResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) CreateSimulate(context.Context, *CreateSimulateRequest) (*CreateSimulateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSimulate not implemented")
}
func (UnimplementedGatewayServer) CreateNSimulate(context.Context, *CreateNSimulateRequest) (*CreateNSimulateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNSimulate not implemented")
}
func (UnimplementedGatewayServer) GetSimulates(context.Context, *GetSimulatesRequest) (*GetSimulatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSimulates not implemented")
}
func (UnimplementedGatewayServer) GetNSimulates(context.Context, *GetNSimulatesRequest) (*GetNSimulatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNSimulates not implemented")
}
func (UnimplementedGatewayServer) DeleteSimulate(context.Context, *DeleteSimulateRequest) (*DeleteSimulateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSimulate not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_CreateSimulate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSimulateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateSimulate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_CreateSimulate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateSimulate(ctx, req.(*CreateSimulateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_CreateNSimulate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNSimulateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateNSimulate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_CreateNSimulate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateNSimulate(ctx, req.(*CreateNSimulateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetSimulates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSimulatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetSimulates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetSimulates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetSimulates(ctx, req.(*GetSimulatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetNSimulates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNSimulatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetNSimulates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetNSimulates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetNSimulates(ctx, req.(*GetNSimulatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_DeleteSimulate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSimulateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).DeleteSimulate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_DeleteSimulate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).DeleteSimulate(ctx, req.(*DeleteSimulateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "good.gateway.app.good1.simulate.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSimulate",
			Handler:    _Gateway_CreateSimulate_Handler,
		},
		{
			MethodName: "CreateNSimulate",
			Handler:    _Gateway_CreateNSimulate_Handler,
		},
		{
			MethodName: "GetSimulates",
			Handler:    _Gateway_GetSimulates_Handler,
		},
		{
			MethodName: "GetNSimulates",
			Handler:    _Gateway_GetNSimulates_Handler,
		},
		{
			MethodName: "DeleteSimulate",
			Handler:    _Gateway_DeleteSimulate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/good/gw/v1/app/good/simulate/simulate.proto",
}
