// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/good/gw/v1/app/good/description/description.proto

package description

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	CreateDescription(ctx context.Context, in *CreateDescriptionRequest, opts ...grpc.CallOption) (*CreateDescriptionResponse, error)
	UpdateDescription(ctx context.Context, in *UpdateDescriptionRequest, opts ...grpc.CallOption) (*UpdateDescriptionResponse, error)
	GetDescriptions(ctx context.Context, in *GetDescriptionsRequest, opts ...grpc.CallOption) (*GetDescriptionsResponse, error)
	DeleteDescription(ctx context.Context, in *DeleteDescriptionRequest, opts ...grpc.CallOption) (*DeleteDescriptionResponse, error)
	// Run by admin
	AdminCreateDescription(ctx context.Context, in *AdminCreateDescriptionRequest, opts ...grpc.CallOption) (*AdminCreateDescriptionResponse, error)
	AdminUpdateDescription(ctx context.Context, in *AdminUpdateDescriptionRequest, opts ...grpc.CallOption) (*AdminUpdateDescriptionResponse, error)
	AdminGetDescriptions(ctx context.Context, in *AdminGetDescriptionsRequest, opts ...grpc.CallOption) (*AdminGetDescriptionsResponse, error)
	AdminDeleteDescription(ctx context.Context, in *AdminDeleteDescriptionRequest, opts ...grpc.CallOption) (*AdminDeleteDescriptionResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) CreateDescription(ctx context.Context, in *CreateDescriptionRequest, opts ...grpc.CallOption) (*CreateDescriptionResponse, error) {
	out := new(CreateDescriptionResponse)
	err := c.cc.Invoke(ctx, "/good.gateway.app.good1.description.v1.Gateway/CreateDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdateDescription(ctx context.Context, in *UpdateDescriptionRequest, opts ...grpc.CallOption) (*UpdateDescriptionResponse, error) {
	out := new(UpdateDescriptionResponse)
	err := c.cc.Invoke(ctx, "/good.gateway.app.good1.description.v1.Gateway/UpdateDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetDescriptions(ctx context.Context, in *GetDescriptionsRequest, opts ...grpc.CallOption) (*GetDescriptionsResponse, error) {
	out := new(GetDescriptionsResponse)
	err := c.cc.Invoke(ctx, "/good.gateway.app.good1.description.v1.Gateway/GetDescriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) DeleteDescription(ctx context.Context, in *DeleteDescriptionRequest, opts ...grpc.CallOption) (*DeleteDescriptionResponse, error) {
	out := new(DeleteDescriptionResponse)
	err := c.cc.Invoke(ctx, "/good.gateway.app.good1.description.v1.Gateway/DeleteDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminCreateDescription(ctx context.Context, in *AdminCreateDescriptionRequest, opts ...grpc.CallOption) (*AdminCreateDescriptionResponse, error) {
	out := new(AdminCreateDescriptionResponse)
	err := c.cc.Invoke(ctx, "/good.gateway.app.good1.description.v1.Gateway/AdminCreateDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminUpdateDescription(ctx context.Context, in *AdminUpdateDescriptionRequest, opts ...grpc.CallOption) (*AdminUpdateDescriptionResponse, error) {
	out := new(AdminUpdateDescriptionResponse)
	err := c.cc.Invoke(ctx, "/good.gateway.app.good1.description.v1.Gateway/AdminUpdateDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminGetDescriptions(ctx context.Context, in *AdminGetDescriptionsRequest, opts ...grpc.CallOption) (*AdminGetDescriptionsResponse, error) {
	out := new(AdminGetDescriptionsResponse)
	err := c.cc.Invoke(ctx, "/good.gateway.app.good1.description.v1.Gateway/AdminGetDescriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminDeleteDescription(ctx context.Context, in *AdminDeleteDescriptionRequest, opts ...grpc.CallOption) (*AdminDeleteDescriptionResponse, error) {
	out := new(AdminDeleteDescriptionResponse)
	err := c.cc.Invoke(ctx, "/good.gateway.app.good1.description.v1.Gateway/AdminDeleteDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	CreateDescription(context.Context, *CreateDescriptionRequest) (*CreateDescriptionResponse, error)
	UpdateDescription(context.Context, *UpdateDescriptionRequest) (*UpdateDescriptionResponse, error)
	GetDescriptions(context.Context, *GetDescriptionsRequest) (*GetDescriptionsResponse, error)
	DeleteDescription(context.Context, *DeleteDescriptionRequest) (*DeleteDescriptionResponse, error)
	// Run by admin
	AdminCreateDescription(context.Context, *AdminCreateDescriptionRequest) (*AdminCreateDescriptionResponse, error)
	AdminUpdateDescription(context.Context, *AdminUpdateDescriptionRequest) (*AdminUpdateDescriptionResponse, error)
	AdminGetDescriptions(context.Context, *AdminGetDescriptionsRequest) (*AdminGetDescriptionsResponse, error)
	AdminDeleteDescription(context.Context, *AdminDeleteDescriptionRequest) (*AdminDeleteDescriptionResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) CreateDescription(context.Context, *CreateDescriptionRequest) (*CreateDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDescription not implemented")
}
func (UnimplementedGatewayServer) UpdateDescription(context.Context, *UpdateDescriptionRequest) (*UpdateDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDescription not implemented")
}
func (UnimplementedGatewayServer) GetDescriptions(context.Context, *GetDescriptionsRequest) (*GetDescriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDescriptions not implemented")
}
func (UnimplementedGatewayServer) DeleteDescription(context.Context, *DeleteDescriptionRequest) (*DeleteDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDescription not implemented")
}
func (UnimplementedGatewayServer) AdminCreateDescription(context.Context, *AdminCreateDescriptionRequest) (*AdminCreateDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCreateDescription not implemented")
}
func (UnimplementedGatewayServer) AdminUpdateDescription(context.Context, *AdminUpdateDescriptionRequest) (*AdminUpdateDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateDescription not implemented")
}
func (UnimplementedGatewayServer) AdminGetDescriptions(context.Context, *AdminGetDescriptionsRequest) (*AdminGetDescriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetDescriptions not implemented")
}
func (UnimplementedGatewayServer) AdminDeleteDescription(context.Context, *AdminDeleteDescriptionRequest) (*AdminDeleteDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDeleteDescription not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_CreateDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.gateway.app.good1.description.v1.Gateway/CreateDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateDescription(ctx, req.(*CreateDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdateDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.gateway.app.good1.description.v1.Gateway/UpdateDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateDescription(ctx, req.(*UpdateDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetDescriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDescriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetDescriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.gateway.app.good1.description.v1.Gateway/GetDescriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetDescriptions(ctx, req.(*GetDescriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_DeleteDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).DeleteDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.gateway.app.good1.description.v1.Gateway/DeleteDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).DeleteDescription(ctx, req.(*DeleteDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminCreateDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCreateDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminCreateDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.gateway.app.good1.description.v1.Gateway/AdminCreateDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminCreateDescription(ctx, req.(*AdminCreateDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminUpdateDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminUpdateDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.gateway.app.good1.description.v1.Gateway/AdminUpdateDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminUpdateDescription(ctx, req.(*AdminUpdateDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminGetDescriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetDescriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminGetDescriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.gateway.app.good1.description.v1.Gateway/AdminGetDescriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminGetDescriptions(ctx, req.(*AdminGetDescriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminDeleteDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDeleteDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminDeleteDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.gateway.app.good1.description.v1.Gateway/AdminDeleteDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminDeleteDescription(ctx, req.(*AdminDeleteDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "good.gateway.app.good1.description.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDescription",
			Handler:    _Gateway_CreateDescription_Handler,
		},
		{
			MethodName: "UpdateDescription",
			Handler:    _Gateway_UpdateDescription_Handler,
		},
		{
			MethodName: "GetDescriptions",
			Handler:    _Gateway_GetDescriptions_Handler,
		},
		{
			MethodName: "DeleteDescription",
			Handler:    _Gateway_DeleteDescription_Handler,
		},
		{
			MethodName: "AdminCreateDescription",
			Handler:    _Gateway_AdminCreateDescription_Handler,
		},
		{
			MethodName: "AdminUpdateDescription",
			Handler:    _Gateway_AdminUpdateDescription_Handler,
		},
		{
			MethodName: "AdminGetDescriptions",
			Handler:    _Gateway_AdminGetDescriptions_Handler,
		},
		{
			MethodName: "AdminDeleteDescription",
			Handler:    _Gateway_AdminDeleteDescription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/good/gw/v1/app/good/description/description.proto",
}
