// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.18.1
// source: npool/good/gw/v1/app/good/good.proto

package good

import (
	v1 "github.com/NpoolPlatform/message/npool/basetypes/good/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Good struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                     string           `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID                  string           `protobuf:"bytes,20,opt,name=AppID,proto3" json:"AppID,omitempty"`
	AppName                string           `protobuf:"bytes,21,opt,name=AppName,proto3" json:"AppName,omitempty"`
	GoodID                 string           `protobuf:"bytes,30,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
	Online                 bool             `protobuf:"varint,40,opt,name=Online,proto3" json:"Online,omitempty"`
	Visible                bool             `protobuf:"varint,50,opt,name=Visible,proto3" json:"Visible,omitempty"`
	Price                  string           `protobuf:"bytes,60,opt,name=Price,proto3" json:"Price,omitempty"`
	DisplayIndex           int32            `protobuf:"varint,70,opt,name=DisplayIndex,proto3" json:"DisplayIndex,omitempty"`
	PurchaseLimit          int32            `protobuf:"varint,80,opt,name=PurchaseLimit,proto3" json:"PurchaseLimit,omitempty"`
	DeviceType             string           `protobuf:"bytes,240,opt,name=DeviceType,proto3" json:"DeviceType,omitempty"`
	DeviceManufacturer     string           `protobuf:"bytes,250,opt,name=DeviceManufacturer,proto3" json:"DeviceManufacturer,omitempty"`
	DevicePowerConsumption uint32           `protobuf:"varint,260,opt,name=DevicePowerConsumption,proto3" json:"DevicePowerConsumption,omitempty"`
	DeviceShipmentAt       uint32           `protobuf:"varint,270,opt,name=DeviceShipmentAt,proto3" json:"DeviceShipmentAt,omitempty"`
	DevicePosters          []string         `protobuf:"bytes,280,rep,name=DevicePosters,proto3" json:"DevicePosters,omitempty"`
	DurationDays           int32            `protobuf:"varint,290,opt,name=DurationDays,proto3" json:"DurationDays,omitempty"`
	VendorLocationCountry  string           `protobuf:"bytes,300,opt,name=VendorLocationCountry,proto3" json:"VendorLocationCountry,omitempty"`
	VendorBrandName        string           `protobuf:"bytes,301,opt,name=VendorBrandName,proto3" json:"VendorBrandName,omitempty"`
	VendorBrandLogo        string           `protobuf:"bytes,302,opt,name=VendorBrandLogo,proto3" json:"VendorBrandLogo,omitempty"`
	CoinTypeID             string           `protobuf:"bytes,310,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty"`
	CoinLogo               string           `protobuf:"bytes,320,opt,name=CoinLogo,proto3" json:"CoinLogo,omitempty"`
	CoinName               string           `protobuf:"bytes,330,opt,name=CoinName,proto3" json:"CoinName,omitempty"`
	CoinUnit               string           `protobuf:"bytes,340,opt,name=CoinUnit,proto3" json:"CoinUnit,omitempty"`
	CoinPreSale            bool             `protobuf:"varint,350,opt,name=CoinPreSale,proto3" json:"CoinPreSale,omitempty"`
	CoinEnv                string           `protobuf:"bytes,351,opt,name=CoinEnv,proto3" json:"CoinEnv,omitempty"`
	CoinHomePage           string           `protobuf:"bytes,352,opt,name=CoinHomePage,proto3" json:"CoinHomePage,omitempty"`
	CoinSpecs              string           `protobuf:"bytes,353,opt,name=CoinSpecs,proto3" json:"CoinSpecs,omitempty"`
	GoodType               v1.GoodType      `protobuf:"varint,360,opt,name=GoodType,proto3,enum=basetypes.good.v1.GoodType" json:"GoodType,omitempty"`
	BenefitType            v1.BenefitType   `protobuf:"varint,370,opt,name=BenefitType,proto3,enum=basetypes.good.v1.BenefitType" json:"BenefitType,omitempty"`
	GoodName               string           `protobuf:"bytes,380,opt,name=GoodName,proto3" json:"GoodName,omitempty"`
	Unit                   string           `protobuf:"bytes,390,opt,name=Unit,proto3" json:"Unit,omitempty"`
	UnitAmount             int32            `protobuf:"varint,400,opt,name=UnitAmount,proto3" json:"UnitAmount,omitempty"`
	BenefitIntervalHours   uint32           `protobuf:"varint,401,opt,name=BenefitIntervalHours,proto3" json:"BenefitIntervalHours,omitempty"`
	TestOnly               bool             `protobuf:"varint,410,opt,name=TestOnly,proto3" json:"TestOnly,omitempty"`
	Posters                []string         `protobuf:"bytes,420,rep,name=Posters,proto3" json:"Posters,omitempty"`
	Labels                 []v1.GoodLabel   `protobuf:"varint,430,rep,packed,name=Labels,proto3,enum=basetypes.good.v1.GoodLabel" json:"Labels,omitempty"`
	SupportCoins           []*Good_CoinInfo `protobuf:"bytes,460,rep,name=SupportCoins,proto3" json:"SupportCoins,omitempty"`
	GoodTotal              string           `protobuf:"bytes,470,opt,name=GoodTotal,proto3" json:"GoodTotal,omitempty"`
	GoodSpotQuantity       string           `protobuf:"bytes,480,opt,name=GoodSpotQuantity,proto3" json:"GoodSpotQuantity,omitempty"`
	RequiredGoods          []*Good          `protobuf:"bytes,520,rep,name=RequiredGoods,proto3" json:"RequiredGoods,omitempty"`
	StartAt                uint32           `protobuf:"varint,550,opt,name=StartAt,proto3" json:"StartAt,omitempty"`
	StartMode              v1.GoodStartMode `protobuf:"varint,551,opt,name=StartMode,proto3,enum=basetypes.good.v1.GoodStartMode" json:"StartMode,omitempty"`
	CreatedAt              uint32           `protobuf:"varint,560,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	SaleStartAt            uint32           `protobuf:"varint,570,opt,name=SaleStartAt,proto3" json:"SaleStartAt,omitempty"`
	SaleEndAt              uint32           `protobuf:"varint,580,opt,name=SaleEndAt,proto3" json:"SaleEndAt,omitempty"`
	ServiceStartAt         uint32           `protobuf:"varint,590,opt,name=ServiceStartAt,proto3" json:"ServiceStartAt,omitempty"`
	TechnicalFeeRatio      string           `protobuf:"bytes,600,opt,name=TechnicalFeeRatio,proto3" json:"TechnicalFeeRatio,omitempty"`
	ElectricityFeeRatio    string           `protobuf:"bytes,610,opt,name=ElectricityFeeRatio,proto3" json:"ElectricityFeeRatio,omitempty"`
	Descriptions           []string         `protobuf:"bytes,640,rep,name=Descriptions,proto3" json:"Descriptions,omitempty"`
	GoodBanner             string           `protobuf:"bytes,650,opt,name=GoodBanner,proto3" json:"GoodBanner,omitempty"`
	DisplayNames           []string         `protobuf:"bytes,660,rep,name=DisplayNames,proto3" json:"DisplayNames,omitempty"`
	EnablePurchase         bool             `protobuf:"varint,670,opt,name=EnablePurchase,proto3" json:"EnablePurchase,omitempty"`
	EnableProductPage      bool             `protobuf:"varint,680,opt,name=EnableProductPage,proto3" json:"EnableProductPage,omitempty"`
	CancelMode             v1.CancelMode    `protobuf:"varint,690,opt,name=CancelMode,proto3,enum=basetypes.good.v1.CancelMode" json:"CancelMode,omitempty"`
	UserPurchaseLimit      string           `protobuf:"bytes,700,opt,name=UserPurchaseLimit,proto3" json:"UserPurchaseLimit,omitempty"`
	DisplayColors          []string         `protobuf:"bytes,710,rep,name=DisplayColors,proto3" json:"DisplayColors,omitempty"`
	CancellableBeforeStart uint32           `protobuf:"varint,720,opt,name=CancellableBeforeStart,proto3" json:"CancellableBeforeStart,omitempty"`
	ProductPage            string           `protobuf:"bytes,730,opt,name=ProductPage,proto3" json:"ProductPage,omitempty"`
	EnableSetCommission    bool             `protobuf:"varint,740,opt,name=EnableSetCommission,proto3" json:"EnableSetCommission,omitempty"`
	Likes                  uint32           `protobuf:"varint,750,opt,name=Likes,proto3" json:"Likes,omitempty"`
	Dislikes               uint32           `protobuf:"varint,760,opt,name=Dislikes,proto3" json:"Dislikes,omitempty"`
	Score                  string           `protobuf:"bytes,770,opt,name=Score,proto3" json:"Score,omitempty"`
	ScoreCount             uint32           `protobuf:"varint,780,opt,name=ScoreCount,proto3" json:"ScoreCount,omitempty"`
	RecommendCount         uint32           `protobuf:"varint,790,opt,name=RecommendCount,proto3" json:"RecommendCount,omitempty"`
	CommentCount           uint32           `protobuf:"varint,800,opt,name=CommentCount,proto3" json:"CommentCount,omitempty"`
	AppGoodStockID         string           `protobuf:"bytes,810,opt,name=AppGoodStockID,proto3" json:"AppGoodStockID,omitempty"`
	AppGoodReserved        string           `protobuf:"bytes,820,opt,name=AppGoodReserved,proto3" json:"AppGoodReserved,omitempty"`
	AppSpotQuantity        string           `protobuf:"bytes,830,opt,name=AppSpotQuantity,proto3" json:"AppSpotQuantity,omitempty"`
	AppGoodLocked          string           `protobuf:"bytes,840,opt,name=AppGoodLocked,proto3" json:"AppGoodLocked,omitempty"`
	AppGoodWaitStart       string           `protobuf:"bytes,850,opt,name=AppGoodWaitStart,proto3" json:"AppGoodWaitStart,omitempty"`
	AppGoodInService       string           `protobuf:"bytes,860,opt,name=AppGoodInService,proto3" json:"AppGoodInService,omitempty"`
	AppGoodSold            string           `protobuf:"bytes,870,opt,name=AppGoodSold,proto3" json:"AppGoodSold,omitempty"`
	LastRewardAt           uint32           `protobuf:"varint,880,opt,name=LastRewardAt,proto3" json:"LastRewardAt,omitempty"`
	LastRewardAmount       string           `protobuf:"bytes,890,opt,name=LastRewardAmount,proto3" json:"LastRewardAmount,omitempty"`
	LastUnitRewardAmount   string           `protobuf:"bytes,900,opt,name=LastUnitRewardAmount,proto3" json:"LastUnitRewardAmount,omitempty"`
	TotalRewardAmount      string           `protobuf:"bytes,910,opt,name=TotalRewardAmount,proto3" json:"TotalRewardAmount,omitempty"`
	AppGoodPosters         []string         `protobuf:"bytes,920,rep,name=AppGoodPosters,proto3" json:"AppGoodPosters,omitempty"`
}

func (x *Good) Reset() {
	*x = Good{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_good_good_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Good) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Good) ProtoMessage() {}

func (x *Good) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_good_good_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Good.ProtoReflect.Descriptor instead.
func (*Good) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_good_good_proto_rawDescGZIP(), []int{0}
}

func (x *Good) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Good) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *Good) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *Good) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *Good) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

func (x *Good) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

func (x *Good) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *Good) GetDisplayIndex() int32 {
	if x != nil {
		return x.DisplayIndex
	}
	return 0
}

func (x *Good) GetPurchaseLimit() int32 {
	if x != nil {
		return x.PurchaseLimit
	}
	return 0
}

func (x *Good) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *Good) GetDeviceManufacturer() string {
	if x != nil {
		return x.DeviceManufacturer
	}
	return ""
}

func (x *Good) GetDevicePowerConsumption() uint32 {
	if x != nil {
		return x.DevicePowerConsumption
	}
	return 0
}

func (x *Good) GetDeviceShipmentAt() uint32 {
	if x != nil {
		return x.DeviceShipmentAt
	}
	return 0
}

func (x *Good) GetDevicePosters() []string {
	if x != nil {
		return x.DevicePosters
	}
	return nil
}

func (x *Good) GetDurationDays() int32 {
	if x != nil {
		return x.DurationDays
	}
	return 0
}

func (x *Good) GetVendorLocationCountry() string {
	if x != nil {
		return x.VendorLocationCountry
	}
	return ""
}

func (x *Good) GetVendorBrandName() string {
	if x != nil {
		return x.VendorBrandName
	}
	return ""
}

func (x *Good) GetVendorBrandLogo() string {
	if x != nil {
		return x.VendorBrandLogo
	}
	return ""
}

func (x *Good) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

func (x *Good) GetCoinLogo() string {
	if x != nil {
		return x.CoinLogo
	}
	return ""
}

func (x *Good) GetCoinName() string {
	if x != nil {
		return x.CoinName
	}
	return ""
}

func (x *Good) GetCoinUnit() string {
	if x != nil {
		return x.CoinUnit
	}
	return ""
}

func (x *Good) GetCoinPreSale() bool {
	if x != nil {
		return x.CoinPreSale
	}
	return false
}

func (x *Good) GetCoinEnv() string {
	if x != nil {
		return x.CoinEnv
	}
	return ""
}

func (x *Good) GetCoinHomePage() string {
	if x != nil {
		return x.CoinHomePage
	}
	return ""
}

func (x *Good) GetCoinSpecs() string {
	if x != nil {
		return x.CoinSpecs
	}
	return ""
}

func (x *Good) GetGoodType() v1.GoodType {
	if x != nil {
		return x.GoodType
	}
	return v1.GoodType(0)
}

func (x *Good) GetBenefitType() v1.BenefitType {
	if x != nil {
		return x.BenefitType
	}
	return v1.BenefitType(0)
}

func (x *Good) GetGoodName() string {
	if x != nil {
		return x.GoodName
	}
	return ""
}

func (x *Good) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *Good) GetUnitAmount() int32 {
	if x != nil {
		return x.UnitAmount
	}
	return 0
}

func (x *Good) GetBenefitIntervalHours() uint32 {
	if x != nil {
		return x.BenefitIntervalHours
	}
	return 0
}

func (x *Good) GetTestOnly() bool {
	if x != nil {
		return x.TestOnly
	}
	return false
}

func (x *Good) GetPosters() []string {
	if x != nil {
		return x.Posters
	}
	return nil
}

func (x *Good) GetLabels() []v1.GoodLabel {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Good) GetSupportCoins() []*Good_CoinInfo {
	if x != nil {
		return x.SupportCoins
	}
	return nil
}

func (x *Good) GetGoodTotal() string {
	if x != nil {
		return x.GoodTotal
	}
	return ""
}

func (x *Good) GetGoodSpotQuantity() string {
	if x != nil {
		return x.GoodSpotQuantity
	}
	return ""
}

func (x *Good) GetRequiredGoods() []*Good {
	if x != nil {
		return x.RequiredGoods
	}
	return nil
}

func (x *Good) GetStartAt() uint32 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *Good) GetStartMode() v1.GoodStartMode {
	if x != nil {
		return x.StartMode
	}
	return v1.GoodStartMode(0)
}

func (x *Good) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Good) GetSaleStartAt() uint32 {
	if x != nil {
		return x.SaleStartAt
	}
	return 0
}

func (x *Good) GetSaleEndAt() uint32 {
	if x != nil {
		return x.SaleEndAt
	}
	return 0
}

func (x *Good) GetServiceStartAt() uint32 {
	if x != nil {
		return x.ServiceStartAt
	}
	return 0
}

func (x *Good) GetTechnicalFeeRatio() string {
	if x != nil {
		return x.TechnicalFeeRatio
	}
	return ""
}

func (x *Good) GetElectricityFeeRatio() string {
	if x != nil {
		return x.ElectricityFeeRatio
	}
	return ""
}

func (x *Good) GetDescriptions() []string {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *Good) GetGoodBanner() string {
	if x != nil {
		return x.GoodBanner
	}
	return ""
}

func (x *Good) GetDisplayNames() []string {
	if x != nil {
		return x.DisplayNames
	}
	return nil
}

func (x *Good) GetEnablePurchase() bool {
	if x != nil {
		return x.EnablePurchase
	}
	return false
}

func (x *Good) GetEnableProductPage() bool {
	if x != nil {
		return x.EnableProductPage
	}
	return false
}

func (x *Good) GetCancelMode() v1.CancelMode {
	if x != nil {
		return x.CancelMode
	}
	return v1.CancelMode(0)
}

func (x *Good) GetUserPurchaseLimit() string {
	if x != nil {
		return x.UserPurchaseLimit
	}
	return ""
}

func (x *Good) GetDisplayColors() []string {
	if x != nil {
		return x.DisplayColors
	}
	return nil
}

func (x *Good) GetCancellableBeforeStart() uint32 {
	if x != nil {
		return x.CancellableBeforeStart
	}
	return 0
}

func (x *Good) GetProductPage() string {
	if x != nil {
		return x.ProductPage
	}
	return ""
}

func (x *Good) GetEnableSetCommission() bool {
	if x != nil {
		return x.EnableSetCommission
	}
	return false
}

func (x *Good) GetLikes() uint32 {
	if x != nil {
		return x.Likes
	}
	return 0
}

func (x *Good) GetDislikes() uint32 {
	if x != nil {
		return x.Dislikes
	}
	return 0
}

func (x *Good) GetScore() string {
	if x != nil {
		return x.Score
	}
	return ""
}

func (x *Good) GetScoreCount() uint32 {
	if x != nil {
		return x.ScoreCount
	}
	return 0
}

func (x *Good) GetRecommendCount() uint32 {
	if x != nil {
		return x.RecommendCount
	}
	return 0
}

func (x *Good) GetCommentCount() uint32 {
	if x != nil {
		return x.CommentCount
	}
	return 0
}

func (x *Good) GetAppGoodStockID() string {
	if x != nil {
		return x.AppGoodStockID
	}
	return ""
}

func (x *Good) GetAppGoodReserved() string {
	if x != nil {
		return x.AppGoodReserved
	}
	return ""
}

func (x *Good) GetAppSpotQuantity() string {
	if x != nil {
		return x.AppSpotQuantity
	}
	return ""
}

func (x *Good) GetAppGoodLocked() string {
	if x != nil {
		return x.AppGoodLocked
	}
	return ""
}

func (x *Good) GetAppGoodWaitStart() string {
	if x != nil {
		return x.AppGoodWaitStart
	}
	return ""
}

func (x *Good) GetAppGoodInService() string {
	if x != nil {
		return x.AppGoodInService
	}
	return ""
}

func (x *Good) GetAppGoodSold() string {
	if x != nil {
		return x.AppGoodSold
	}
	return ""
}

func (x *Good) GetLastRewardAt() uint32 {
	if x != nil {
		return x.LastRewardAt
	}
	return 0
}

func (x *Good) GetLastRewardAmount() string {
	if x != nil {
		return x.LastRewardAmount
	}
	return ""
}

func (x *Good) GetLastUnitRewardAmount() string {
	if x != nil {
		return x.LastUnitRewardAmount
	}
	return ""
}

func (x *Good) GetTotalRewardAmount() string {
	if x != nil {
		return x.TotalRewardAmount
	}
	return ""
}

func (x *Good) GetAppGoodPosters() []string {
	if x != nil {
		return x.AppGoodPosters
	}
	return nil
}

type CreateGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetAppID            string         `protobuf:"bytes,10,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
	GoodID                 string         `protobuf:"bytes,20,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
	Online                 bool           `protobuf:"varint,30,opt,name=Online,proto3" json:"Online,omitempty"`
	Visible                bool           `protobuf:"varint,40,opt,name=Visible,proto3" json:"Visible,omitempty"`
	GoodName               string         `protobuf:"bytes,50,opt,name=GoodName,proto3" json:"GoodName,omitempty"`
	Price                  string         `protobuf:"bytes,60,opt,name=Price,proto3" json:"Price,omitempty"`
	DisplayIndex           int32          `protobuf:"varint,70,opt,name=DisplayIndex,proto3" json:"DisplayIndex,omitempty"`
	PurchaseLimit          int32          `protobuf:"varint,80,opt,name=PurchaseLimit,proto3" json:"PurchaseLimit,omitempty"`
	SaleStartAt            *uint32        `protobuf:"varint,100,opt,name=SaleStartAt,proto3,oneof" json:"SaleStartAt,omitempty"`
	SaleEndAt              *uint32        `protobuf:"varint,110,opt,name=SaleEndAt,proto3,oneof" json:"SaleEndAt,omitempty"`
	ServiceStartAt         *uint32        `protobuf:"varint,120,opt,name=ServiceStartAt,proto3,oneof" json:"ServiceStartAt,omitempty"`
	TechnicalFeeRatio      *string        `protobuf:"bytes,130,opt,name=TechnicalFeeRatio,proto3,oneof" json:"TechnicalFeeRatio,omitempty"`
	ElectricityFeeRatio    *string        `protobuf:"bytes,140,opt,name=ElectricityFeeRatio,proto3,oneof" json:"ElectricityFeeRatio,omitempty"`
	EnablePurchase         *bool          `protobuf:"varint,160,opt,name=EnablePurchase,proto3,oneof" json:"EnablePurchase,omitempty"`
	EnableProductPage      *bool          `protobuf:"varint,170,opt,name=EnableProductPage,proto3,oneof" json:"EnableProductPage,omitempty"`
	CancelMode             *v1.CancelMode `protobuf:"varint,180,opt,name=CancelMode,proto3,enum=basetypes.good.v1.CancelMode,oneof" json:"CancelMode,omitempty"`
	UserPurchaseLimit      *string        `protobuf:"bytes,190,opt,name=UserPurchaseLimit,proto3,oneof" json:"UserPurchaseLimit,omitempty"`
	DisplayColors          []string       `protobuf:"bytes,200,rep,name=DisplayColors,proto3" json:"DisplayColors,omitempty"`
	CancellableBeforeStart *uint32        `protobuf:"varint,210,opt,name=CancellableBeforeStart,proto3,oneof" json:"CancellableBeforeStart,omitempty"`
	ProductPage            *string        `protobuf:"bytes,220,opt,name=ProductPage,proto3,oneof" json:"ProductPage,omitempty"`
	EnableSetCommission    *bool          `protobuf:"varint,230,opt,name=EnableSetCommission,proto3,oneof" json:"EnableSetCommission,omitempty"`
	Posters                []string       `protobuf:"bytes,240,rep,name=Posters,proto3" json:"Posters,omitempty"`
	Descriptions           []string       `protobuf:"bytes,250,rep,name=Descriptions,proto3" json:"Descriptions,omitempty"`
	GoodBanner             *string        `protobuf:"bytes,260,opt,name=GoodBanner,proto3,oneof" json:"GoodBanner,omitempty"`
	DisplayNames           []string       `protobuf:"bytes,270,rep,name=DisplayNames,proto3" json:"DisplayNames,omitempty"`
}

func (x *CreateGoodRequest) Reset() {
	*x = CreateGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_good_good_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGoodRequest) ProtoMessage() {}

func (x *CreateGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_good_good_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGoodRequest.ProtoReflect.Descriptor instead.
func (*CreateGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_good_good_proto_rawDescGZIP(), []int{1}
}

func (x *CreateGoodRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

func (x *CreateGoodRequest) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *CreateGoodRequest) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

func (x *CreateGoodRequest) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

func (x *CreateGoodRequest) GetGoodName() string {
	if x != nil {
		return x.GoodName
	}
	return ""
}

func (x *CreateGoodRequest) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *CreateGoodRequest) GetDisplayIndex() int32 {
	if x != nil {
		return x.DisplayIndex
	}
	return 0
}

func (x *CreateGoodRequest) GetPurchaseLimit() int32 {
	if x != nil {
		return x.PurchaseLimit
	}
	return 0
}

func (x *CreateGoodRequest) GetSaleStartAt() uint32 {
	if x != nil && x.SaleStartAt != nil {
		return *x.SaleStartAt
	}
	return 0
}

func (x *CreateGoodRequest) GetSaleEndAt() uint32 {
	if x != nil && x.SaleEndAt != nil {
		return *x.SaleEndAt
	}
	return 0
}

func (x *CreateGoodRequest) GetServiceStartAt() uint32 {
	if x != nil && x.ServiceStartAt != nil {
		return *x.ServiceStartAt
	}
	return 0
}

func (x *CreateGoodRequest) GetTechnicalFeeRatio() string {
	if x != nil && x.TechnicalFeeRatio != nil {
		return *x.TechnicalFeeRatio
	}
	return ""
}

func (x *CreateGoodRequest) GetElectricityFeeRatio() string {
	if x != nil && x.ElectricityFeeRatio != nil {
		return *x.ElectricityFeeRatio
	}
	return ""
}

func (x *CreateGoodRequest) GetEnablePurchase() bool {
	if x != nil && x.EnablePurchase != nil {
		return *x.EnablePurchase
	}
	return false
}

func (x *CreateGoodRequest) GetEnableProductPage() bool {
	if x != nil && x.EnableProductPage != nil {
		return *x.EnableProductPage
	}
	return false
}

func (x *CreateGoodRequest) GetCancelMode() v1.CancelMode {
	if x != nil && x.CancelMode != nil {
		return *x.CancelMode
	}
	return v1.CancelMode(0)
}

func (x *CreateGoodRequest) GetUserPurchaseLimit() string {
	if x != nil && x.UserPurchaseLimit != nil {
		return *x.UserPurchaseLimit
	}
	return ""
}

func (x *CreateGoodRequest) GetDisplayColors() []string {
	if x != nil {
		return x.DisplayColors
	}
	return nil
}

func (x *CreateGoodRequest) GetCancellableBeforeStart() uint32 {
	if x != nil && x.CancellableBeforeStart != nil {
		return *x.CancellableBeforeStart
	}
	return 0
}

func (x *CreateGoodRequest) GetProductPage() string {
	if x != nil && x.ProductPage != nil {
		return *x.ProductPage
	}
	return ""
}

func (x *CreateGoodRequest) GetEnableSetCommission() bool {
	if x != nil && x.EnableSetCommission != nil {
		return *x.EnableSetCommission
	}
	return false
}

func (x *CreateGoodRequest) GetPosters() []string {
	if x != nil {
		return x.Posters
	}
	return nil
}

func (x *CreateGoodRequest) GetDescriptions() []string {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *CreateGoodRequest) GetGoodBanner() string {
	if x != nil && x.GoodBanner != nil {
		return *x.GoodBanner
	}
	return ""
}

func (x *CreateGoodRequest) GetDisplayNames() []string {
	if x != nil {
		return x.DisplayNames
	}
	return nil
}

type CreateGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Good `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateGoodResponse) Reset() {
	*x = CreateGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_good_good_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGoodResponse) ProtoMessage() {}

func (x *CreateGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_good_good_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGoodResponse.ProtoReflect.Descriptor instead.
func (*CreateGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_good_good_proto_rawDescGZIP(), []int{2}
}

func (x *CreateGoodResponse) GetInfo() *Good {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetGoodsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID  string `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetGoodsRequest) Reset() {
	*x = GetGoodsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_good_good_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodsRequest) ProtoMessage() {}

func (x *GetGoodsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_good_good_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodsRequest.ProtoReflect.Descriptor instead.
func (*GetGoodsRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_good_good_proto_rawDescGZIP(), []int{3}
}

func (x *GetGoodsRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetGoodsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetGoodsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetGoodsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Good `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32  `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetGoodsResponse) Reset() {
	*x = GetGoodsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_good_good_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodsResponse) ProtoMessage() {}

func (x *GetGoodsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_good_good_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodsResponse.ProtoReflect.Descriptor instead.
func (*GetGoodsResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_good_good_proto_rawDescGZIP(), []int{4}
}

func (x *GetGoodsResponse) GetInfos() []*Good {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetGoodsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID    string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID string `protobuf:"bytes,20,opt,name=AppID,proto3" json:"AppID,omitempty"`
}

func (x *GetGoodRequest) Reset() {
	*x = GetGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_good_good_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodRequest) ProtoMessage() {}

func (x *GetGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_good_good_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodRequest.ProtoReflect.Descriptor instead.
func (*GetGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_good_good_proto_rawDescGZIP(), []int{5}
}

func (x *GetGoodRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *GetGoodRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

type GetGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Good `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetGoodResponse) Reset() {
	*x = GetGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_good_good_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodResponse) ProtoMessage() {}

func (x *GetGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_good_good_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodResponse.ProtoReflect.Descriptor instead.
func (*GetGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_good_good_proto_rawDescGZIP(), []int{6}
}

func (x *GetGoodResponse) GetInfo() *Good {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetNGoodsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetAppID string `protobuf:"bytes,10,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
	Offset      int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit       int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetNGoodsRequest) Reset() {
	*x = GetNGoodsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_good_good_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNGoodsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNGoodsRequest) ProtoMessage() {}

func (x *GetNGoodsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_good_good_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNGoodsRequest.ProtoReflect.Descriptor instead.
func (*GetNGoodsRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_good_good_proto_rawDescGZIP(), []int{7}
}

func (x *GetNGoodsRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

func (x *GetNGoodsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetNGoodsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetNGoodsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Good `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32  `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetNGoodsResponse) Reset() {
	*x = GetNGoodsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_good_good_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNGoodsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNGoodsResponse) ProtoMessage() {}

func (x *GetNGoodsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_good_good_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNGoodsResponse.ProtoReflect.Descriptor instead.
func (*GetNGoodsResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_good_good_proto_rawDescGZIP(), []int{8}
}

func (x *GetNGoodsResponse) GetInfos() []*Good {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetNGoodsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type UpdateGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                     string         `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID                  string         `protobuf:"bytes,20,opt,name=AppID,proto3" json:"AppID,omitempty"`
	Online                 *bool          `protobuf:"varint,30,opt,name=Online,proto3,oneof" json:"Online,omitempty"`
	Visible                *bool          `protobuf:"varint,40,opt,name=Visible,proto3,oneof" json:"Visible,omitempty"`
	GoodName               *string        `protobuf:"bytes,50,opt,name=GoodName,proto3,oneof" json:"GoodName,omitempty"`
	Price                  *string        `protobuf:"bytes,60,opt,name=Price,proto3,oneof" json:"Price,omitempty"`
	DisplayIndex           *int32         `protobuf:"varint,70,opt,name=DisplayIndex,proto3,oneof" json:"DisplayIndex,omitempty"`
	PurchaseLimit          *int32         `protobuf:"varint,80,opt,name=PurchaseLimit,proto3,oneof" json:"PurchaseLimit,omitempty"`
	SaleStartAt            *uint32        `protobuf:"varint,100,opt,name=SaleStartAt,proto3,oneof" json:"SaleStartAt,omitempty"`
	SaleEndAt              *uint32        `protobuf:"varint,110,opt,name=SaleEndAt,proto3,oneof" json:"SaleEndAt,omitempty"`
	ServiceStartAt         *uint32        `protobuf:"varint,120,opt,name=ServiceStartAt,proto3,oneof" json:"ServiceStartAt,omitempty"`
	TechnicalFeeRatio      *string        `protobuf:"bytes,130,opt,name=TechnicalFeeRatio,proto3,oneof" json:"TechnicalFeeRatio,omitempty"`
	ElectricityFeeRatio    *string        `protobuf:"bytes,140,opt,name=ElectricityFeeRatio,proto3,oneof" json:"ElectricityFeeRatio,omitempty"`
	Descriptions           []string       `protobuf:"bytes,160,rep,name=Descriptions,proto3" json:"Descriptions,omitempty"`
	GoodBanner             *string        `protobuf:"bytes,170,opt,name=GoodBanner,proto3,oneof" json:"GoodBanner,omitempty"`
	DisplayNames           []string       `protobuf:"bytes,180,rep,name=DisplayNames,proto3" json:"DisplayNames,omitempty"`
	EnablePurchase         *bool          `protobuf:"varint,200,opt,name=EnablePurchase,proto3,oneof" json:"EnablePurchase,omitempty"`
	EnableProductPage      *bool          `protobuf:"varint,210,opt,name=EnableProductPage,proto3,oneof" json:"EnableProductPage,omitempty"`
	CancelMode             *v1.CancelMode `protobuf:"varint,220,opt,name=CancelMode,proto3,enum=basetypes.good.v1.CancelMode,oneof" json:"CancelMode,omitempty"`
	UserPurchaseLimit      *string        `protobuf:"bytes,230,opt,name=UserPurchaseLimit,proto3,oneof" json:"UserPurchaseLimit,omitempty"`
	DisplayColors          []string       `protobuf:"bytes,240,rep,name=DisplayColors,proto3" json:"DisplayColors,omitempty"`
	CancellableBeforeStart *uint32        `protobuf:"varint,250,opt,name=CancellableBeforeStart,proto3,oneof" json:"CancellableBeforeStart,omitempty"`
	ProductPage            *string        `protobuf:"bytes,260,opt,name=ProductPage,proto3,oneof" json:"ProductPage,omitempty"`
	EnableSetCommission    *bool          `protobuf:"varint,270,opt,name=EnableSetCommission,proto3,oneof" json:"EnableSetCommission,omitempty"`
	Posters                []string       `protobuf:"bytes,280,rep,name=Posters,proto3" json:"Posters,omitempty"`
}

func (x *UpdateGoodRequest) Reset() {
	*x = UpdateGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_good_good_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGoodRequest) ProtoMessage() {}

func (x *UpdateGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_good_good_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGoodRequest.ProtoReflect.Descriptor instead.
func (*UpdateGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_good_good_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateGoodRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *UpdateGoodRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *UpdateGoodRequest) GetOnline() bool {
	if x != nil && x.Online != nil {
		return *x.Online
	}
	return false
}

func (x *UpdateGoodRequest) GetVisible() bool {
	if x != nil && x.Visible != nil {
		return *x.Visible
	}
	return false
}

func (x *UpdateGoodRequest) GetGoodName() string {
	if x != nil && x.GoodName != nil {
		return *x.GoodName
	}
	return ""
}

func (x *UpdateGoodRequest) GetPrice() string {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return ""
}

func (x *UpdateGoodRequest) GetDisplayIndex() int32 {
	if x != nil && x.DisplayIndex != nil {
		return *x.DisplayIndex
	}
	return 0
}

func (x *UpdateGoodRequest) GetPurchaseLimit() int32 {
	if x != nil && x.PurchaseLimit != nil {
		return *x.PurchaseLimit
	}
	return 0
}

func (x *UpdateGoodRequest) GetSaleStartAt() uint32 {
	if x != nil && x.SaleStartAt != nil {
		return *x.SaleStartAt
	}
	return 0
}

func (x *UpdateGoodRequest) GetSaleEndAt() uint32 {
	if x != nil && x.SaleEndAt != nil {
		return *x.SaleEndAt
	}
	return 0
}

func (x *UpdateGoodRequest) GetServiceStartAt() uint32 {
	if x != nil && x.ServiceStartAt != nil {
		return *x.ServiceStartAt
	}
	return 0
}

func (x *UpdateGoodRequest) GetTechnicalFeeRatio() string {
	if x != nil && x.TechnicalFeeRatio != nil {
		return *x.TechnicalFeeRatio
	}
	return ""
}

func (x *UpdateGoodRequest) GetElectricityFeeRatio() string {
	if x != nil && x.ElectricityFeeRatio != nil {
		return *x.ElectricityFeeRatio
	}
	return ""
}

func (x *UpdateGoodRequest) GetDescriptions() []string {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *UpdateGoodRequest) GetGoodBanner() string {
	if x != nil && x.GoodBanner != nil {
		return *x.GoodBanner
	}
	return ""
}

func (x *UpdateGoodRequest) GetDisplayNames() []string {
	if x != nil {
		return x.DisplayNames
	}
	return nil
}

func (x *UpdateGoodRequest) GetEnablePurchase() bool {
	if x != nil && x.EnablePurchase != nil {
		return *x.EnablePurchase
	}
	return false
}

func (x *UpdateGoodRequest) GetEnableProductPage() bool {
	if x != nil && x.EnableProductPage != nil {
		return *x.EnableProductPage
	}
	return false
}

func (x *UpdateGoodRequest) GetCancelMode() v1.CancelMode {
	if x != nil && x.CancelMode != nil {
		return *x.CancelMode
	}
	return v1.CancelMode(0)
}

func (x *UpdateGoodRequest) GetUserPurchaseLimit() string {
	if x != nil && x.UserPurchaseLimit != nil {
		return *x.UserPurchaseLimit
	}
	return ""
}

func (x *UpdateGoodRequest) GetDisplayColors() []string {
	if x != nil {
		return x.DisplayColors
	}
	return nil
}

func (x *UpdateGoodRequest) GetCancellableBeforeStart() uint32 {
	if x != nil && x.CancellableBeforeStart != nil {
		return *x.CancellableBeforeStart
	}
	return 0
}

func (x *UpdateGoodRequest) GetProductPage() string {
	if x != nil && x.ProductPage != nil {
		return *x.ProductPage
	}
	return ""
}

func (x *UpdateGoodRequest) GetEnableSetCommission() bool {
	if x != nil && x.EnableSetCommission != nil {
		return *x.EnableSetCommission
	}
	return false
}

func (x *UpdateGoodRequest) GetPosters() []string {
	if x != nil {
		return x.Posters
	}
	return nil
}

type UpdateGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Good `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateGoodResponse) Reset() {
	*x = UpdateGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_good_good_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGoodResponse) ProtoMessage() {}

func (x *UpdateGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_good_good_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGoodResponse.ProtoReflect.Descriptor instead.
func (*UpdateGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_good_good_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateGoodResponse) GetInfo() *Good {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateNGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                     string         `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	TargetAppID            string         `protobuf:"bytes,20,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
	Online                 *bool          `protobuf:"varint,30,opt,name=Online,proto3,oneof" json:"Online,omitempty"`
	Visible                *bool          `protobuf:"varint,40,opt,name=Visible,proto3,oneof" json:"Visible,omitempty"`
	GoodName               *string        `protobuf:"bytes,50,opt,name=GoodName,proto3,oneof" json:"GoodName,omitempty"`
	Price                  *string        `protobuf:"bytes,60,opt,name=Price,proto3,oneof" json:"Price,omitempty"`
	DisplayIndex           *int32         `protobuf:"varint,70,opt,name=DisplayIndex,proto3,oneof" json:"DisplayIndex,omitempty"`
	PurchaseLimit          *int32         `protobuf:"varint,80,opt,name=PurchaseLimit,proto3,oneof" json:"PurchaseLimit,omitempty"`
	ServiceStartAt         *uint32        `protobuf:"varint,100,opt,name=ServiceStartAt,proto3,oneof" json:"ServiceStartAt,omitempty"`
	TechnicalFeeRatio      *string        `protobuf:"bytes,110,opt,name=TechnicalFeeRatio,proto3,oneof" json:"TechnicalFeeRatio,omitempty"`
	ElectricityFeeRatio    *string        `protobuf:"bytes,120,opt,name=ElectricityFeeRatio,proto3,oneof" json:"ElectricityFeeRatio,omitempty"`
	Descriptions           []string       `protobuf:"bytes,160,rep,name=Descriptions,proto3" json:"Descriptions,omitempty"`
	GoodBanner             *string        `protobuf:"bytes,170,opt,name=GoodBanner,proto3,oneof" json:"GoodBanner,omitempty"`
	DisplayNames           []string       `protobuf:"bytes,180,rep,name=DisplayNames,proto3" json:"DisplayNames,omitempty"`
	EnablePurchase         *bool          `protobuf:"varint,190,opt,name=EnablePurchase,proto3,oneof" json:"EnablePurchase,omitempty"`
	EnableProductPage      *bool          `protobuf:"varint,200,opt,name=EnableProductPage,proto3,oneof" json:"EnableProductPage,omitempty"`
	CancelMode             *v1.CancelMode `protobuf:"varint,210,opt,name=CancelMode,proto3,enum=basetypes.good.v1.CancelMode,oneof" json:"CancelMode,omitempty"`
	UserPurchaseLimit      *string        `protobuf:"bytes,220,opt,name=UserPurchaseLimit,proto3,oneof" json:"UserPurchaseLimit,omitempty"`
	DisplayColors          []string       `protobuf:"bytes,230,rep,name=DisplayColors,proto3" json:"DisplayColors,omitempty"`
	CancellableBeforeStart *uint32        `protobuf:"varint,240,opt,name=CancellableBeforeStart,proto3,oneof" json:"CancellableBeforeStart,omitempty"`
	ProductPage            *string        `protobuf:"bytes,250,opt,name=ProductPage,proto3,oneof" json:"ProductPage,omitempty"`
	EnableSetCommission    *bool          `protobuf:"varint,270,opt,name=EnableSetCommission,proto3,oneof" json:"EnableSetCommission,omitempty"`
	Posters                []string       `protobuf:"bytes,280,rep,name=Posters,proto3" json:"Posters,omitempty"`
}

func (x *UpdateNGoodRequest) Reset() {
	*x = UpdateNGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_good_good_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNGoodRequest) ProtoMessage() {}

func (x *UpdateNGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_good_good_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNGoodRequest.ProtoReflect.Descriptor instead.
func (*UpdateNGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_good_good_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateNGoodRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *UpdateNGoodRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

func (x *UpdateNGoodRequest) GetOnline() bool {
	if x != nil && x.Online != nil {
		return *x.Online
	}
	return false
}

func (x *UpdateNGoodRequest) GetVisible() bool {
	if x != nil && x.Visible != nil {
		return *x.Visible
	}
	return false
}

func (x *UpdateNGoodRequest) GetGoodName() string {
	if x != nil && x.GoodName != nil {
		return *x.GoodName
	}
	return ""
}

func (x *UpdateNGoodRequest) GetPrice() string {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return ""
}

func (x *UpdateNGoodRequest) GetDisplayIndex() int32 {
	if x != nil && x.DisplayIndex != nil {
		return *x.DisplayIndex
	}
	return 0
}

func (x *UpdateNGoodRequest) GetPurchaseLimit() int32 {
	if x != nil && x.PurchaseLimit != nil {
		return *x.PurchaseLimit
	}
	return 0
}

func (x *UpdateNGoodRequest) GetServiceStartAt() uint32 {
	if x != nil && x.ServiceStartAt != nil {
		return *x.ServiceStartAt
	}
	return 0
}

func (x *UpdateNGoodRequest) GetTechnicalFeeRatio() string {
	if x != nil && x.TechnicalFeeRatio != nil {
		return *x.TechnicalFeeRatio
	}
	return ""
}

func (x *UpdateNGoodRequest) GetElectricityFeeRatio() string {
	if x != nil && x.ElectricityFeeRatio != nil {
		return *x.ElectricityFeeRatio
	}
	return ""
}

func (x *UpdateNGoodRequest) GetDescriptions() []string {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *UpdateNGoodRequest) GetGoodBanner() string {
	if x != nil && x.GoodBanner != nil {
		return *x.GoodBanner
	}
	return ""
}

func (x *UpdateNGoodRequest) GetDisplayNames() []string {
	if x != nil {
		return x.DisplayNames
	}
	return nil
}

func (x *UpdateNGoodRequest) GetEnablePurchase() bool {
	if x != nil && x.EnablePurchase != nil {
		return *x.EnablePurchase
	}
	return false
}

func (x *UpdateNGoodRequest) GetEnableProductPage() bool {
	if x != nil && x.EnableProductPage != nil {
		return *x.EnableProductPage
	}
	return false
}

func (x *UpdateNGoodRequest) GetCancelMode() v1.CancelMode {
	if x != nil && x.CancelMode != nil {
		return *x.CancelMode
	}
	return v1.CancelMode(0)
}

func (x *UpdateNGoodRequest) GetUserPurchaseLimit() string {
	if x != nil && x.UserPurchaseLimit != nil {
		return *x.UserPurchaseLimit
	}
	return ""
}

func (x *UpdateNGoodRequest) GetDisplayColors() []string {
	if x != nil {
		return x.DisplayColors
	}
	return nil
}

func (x *UpdateNGoodRequest) GetCancellableBeforeStart() uint32 {
	if x != nil && x.CancellableBeforeStart != nil {
		return *x.CancellableBeforeStart
	}
	return 0
}

func (x *UpdateNGoodRequest) GetProductPage() string {
	if x != nil && x.ProductPage != nil {
		return *x.ProductPage
	}
	return ""
}

func (x *UpdateNGoodRequest) GetEnableSetCommission() bool {
	if x != nil && x.EnableSetCommission != nil {
		return *x.EnableSetCommission
	}
	return false
}

func (x *UpdateNGoodRequest) GetPosters() []string {
	if x != nil {
		return x.Posters
	}
	return nil
}

type UpdateNGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Good `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateNGoodResponse) Reset() {
	*x = UpdateNGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_good_good_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNGoodResponse) ProtoMessage() {}

func (x *UpdateNGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_good_good_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNGoodResponse.ProtoReflect.Descriptor instead.
func (*UpdateNGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_good_good_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateNGoodResponse) GetInfo() *Good {
	if x != nil {
		return x.Info
	}
	return nil
}

type Good_CoinInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinTypeID   string `protobuf:"bytes,10,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty"`
	CoinLogo     string `protobuf:"bytes,20,opt,name=CoinLogo,proto3" json:"CoinLogo,omitempty"`
	CoinName     string `protobuf:"bytes,30,opt,name=CoinName,proto3" json:"CoinName,omitempty"`
	CoinUnit     string `protobuf:"bytes,40,opt,name=CoinUnit,proto3" json:"CoinUnit,omitempty"`
	CoinPreSale  bool   `protobuf:"varint,50,opt,name=CoinPreSale,proto3" json:"CoinPreSale,omitempty"`
	CoinEnv      string `protobuf:"bytes,60,opt,name=CoinEnv,proto3" json:"CoinEnv,omitempty"`
	CoinHomePage string `protobuf:"bytes,70,opt,name=CoinHomePage,proto3" json:"CoinHomePage,omitempty"`
	CoinSpecs    string `protobuf:"bytes,80,opt,name=CoinSpecs,proto3" json:"CoinSpecs,omitempty"`
}

func (x *Good_CoinInfo) Reset() {
	*x = Good_CoinInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_good_good_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Good_CoinInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Good_CoinInfo) ProtoMessage() {}

func (x *Good_CoinInfo) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_good_good_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Good_CoinInfo.ProtoReflect.Descriptor instead.
func (*Good_CoinInfo) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_good_good_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Good_CoinInfo) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

func (x *Good_CoinInfo) GetCoinLogo() string {
	if x != nil {
		return x.CoinLogo
	}
	return ""
}

func (x *Good_CoinInfo) GetCoinName() string {
	if x != nil {
		return x.CoinName
	}
	return ""
}

func (x *Good_CoinInfo) GetCoinUnit() string {
	if x != nil {
		return x.CoinUnit
	}
	return ""
}

func (x *Good_CoinInfo) GetCoinPreSale() bool {
	if x != nil {
		return x.CoinPreSale
	}
	return false
}

func (x *Good_CoinInfo) GetCoinEnv() string {
	if x != nil {
		return x.CoinEnv
	}
	return ""
}

func (x *Good_CoinInfo) GetCoinHomePage() string {
	if x != nil {
		return x.CoinHomePage
	}
	return ""
}

func (x *Good_CoinInfo) GetCoinSpecs() string {
	if x != nil {
		return x.CoinSpecs
	}
	return ""
}

var File_npool_good_gw_v1_app_good_good_proto protoreflect.FileDescriptor

var file_npool_good_gw_v1_app_good_good_proto_rawDesc = []byte{
	0x0a, 0x24, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x67, 0x77, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76,
	0x31, 0x1a, 0x23, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbd, 0x19, 0x0a, 0x04, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a,
	0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47,
	0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x46, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x50, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0xf0, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x12, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0xfa,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e,
	0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x16, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x84, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x68, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x18, 0x8e, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x12,
	0x25, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x98, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x18, 0xa2, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x35, 0x0a, 0x15, 0x56,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0xac, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x29, 0x0a, 0x0f, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x42, 0x72, 0x61, 0x6e,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0xad, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a,
	0x0f, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x6f,
	0x18, 0xae, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x42,
	0x72, 0x61, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x1f, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0xb6, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43,
	0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x08, 0x43, 0x6f, 0x69,
	0x6e, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0xc0, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f,
	0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x1b, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0xca, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x18,
	0xd4, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x6e, 0x69, 0x74,
	0x12, 0x21, 0x0a, 0x0b, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x18,
	0xde, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x65, 0x53,
	0x61, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x07, 0x43, 0x6f, 0x69, 0x6e, 0x45, 0x6e, 0x76, 0x18, 0xdf,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x69, 0x6e, 0x45, 0x6e, 0x76, 0x12, 0x23,
	0x0a, 0x0c, 0x43, 0x6f, 0x69, 0x6e, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x18, 0xe0,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x6f, 0x69, 0x6e, 0x48, 0x6f, 0x6d, 0x65, 0x50,
	0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x73,
	0x18, 0xe1, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x70, 0x65,
	0x63, 0x73, 0x12, 0x38, 0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0xe8,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0b,
	0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0xf2, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1b, 0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0xfc, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x13, 0x0a, 0x04,
	0x55, 0x6e, 0x69, 0x74, 0x18, 0x86, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x1f, 0x0a, 0x0a, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x90, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x33, 0x0a, 0x14, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x91, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x08, 0x54, 0x65, 0x73, 0x74, 0x4f,
	0x6e, 0x6c, 0x79, 0x18, 0x9a, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x54, 0x65, 0x73, 0x74,
	0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x19, 0x0a, 0x07, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18,
	0xa4, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x35, 0x0a, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0xae, 0x03, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x06,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x4d, 0x0a, 0x0c, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0xcc, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x2e, 0x43,
	0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x09, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0xd6, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x47, 0x6f, 0x6f, 0x64, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x10, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x70, 0x6f, 0x74,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0xe0, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x70, 0x6f, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x46, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x18, 0x88, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x0d, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x07, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x41, 0x74, 0x18, 0xa6, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x41, 0x74, 0x12, 0x3f, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x18, 0xa7, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0xb0, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x21, 0x0a, 0x0b, 0x53, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x74, 0x18, 0xba, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x53, 0x61, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x53, 0x61, 0x6c, 0x65, 0x45,
	0x6e, 0x64, 0x41, 0x74, 0x18, 0xc4, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x53, 0x61, 0x6c,
	0x65, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x27, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0xce, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12,
	0x2d, 0x0a, 0x11, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x18, 0xd8, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x54, 0x65, 0x63,
	0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x31,
	0x0a, 0x13, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0xe2, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x45, 0x6c,
	0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x12, 0x23, 0x0a, 0x0c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x80, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0a, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x18, 0x8a, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x47, 0x6f, 0x6f,
	0x64, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x94, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0e,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x18, 0x9e,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x18, 0xa8, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x6f,
	0x64, 0x65, 0x18, 0xb2, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xbc, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x25, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x73, 0x18, 0xc6, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x37, 0x0a, 0x16, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x18, 0xd0, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x18, 0xda, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xe4, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x05, 0x4c, 0x69, 0x6b,
	0x65, 0x73, 0x18, 0xee, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4c, 0x69, 0x6b, 0x65, 0x73,
	0x12, 0x1b, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x6c, 0x69, 0x6b, 0x65, 0x73, 0x18, 0xf8, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x44, 0x69, 0x73, 0x6c, 0x69, 0x6b, 0x65, 0x73, 0x12, 0x15, 0x0a,
	0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x82, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x8c, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x53, 0x63, 0x6f, 0x72, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x96, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23,
	0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xa0,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0xaa, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x41, 0x70,
	0x70, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x0f,
	0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x18,
	0xb4, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x53, 0x70,
	0x6f, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0xbe, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x41, 0x70, 0x70, 0x53, 0x70, 0x6f, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x25, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x4c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x18, 0xc8, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x41, 0x70, 0x70, 0x47,
	0x6f, 0x6f, 0x64, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x10, 0x41, 0x70, 0x70,
	0x47, 0x6f, 0x6f, 0x64, 0x57, 0x61, 0x69, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0xd2, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x57, 0x61, 0x69,
	0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2b, 0x0a, 0x10, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f,
	0x64, 0x49, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0xdc, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x6f,
	0x6c, 0x64, 0x18, 0xe6, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x70, 0x70, 0x47, 0x6f,
	0x6f, 0x64, 0x53, 0x6f, 0x6c, 0x64, 0x12, 0x23, 0x0a, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x41, 0x74, 0x18, 0xf0, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x4c,
	0x61, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x74, 0x12, 0x2b, 0x0a, 0x10, 0x4c,
	0x61, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0xfa, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33, 0x0a, 0x14, 0x4c, 0x61, 0x73, 0x74,
	0x55, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x84, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a,
	0x11, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x8e, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0e,
	0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x98,
	0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x50, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x1a, 0xfc, 0x01, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f,
	0x69, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f,
	0x69, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72,
	0x65, 0x53, 0x61, 0x6c, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x43, 0x6f, 0x69,
	0x6e, 0x50, 0x72, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x69, 0x6e,
	0x45, 0x6e, 0x76, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x69, 0x6e, 0x45,
	0x6e, 0x76, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x69, 0x6e, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61,
	0x67, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x6f, 0x69, 0x6e, 0x48, 0x6f,
	0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x70,
	0x65, 0x63, 0x73, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6f, 0x69, 0x6e, 0x53,
	0x70, 0x65, 0x63, 0x73, 0x22, 0x88, 0x0a, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47,
	0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f,
	0x6f, 0x64, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x56,
	0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x46, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x0d,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x50, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x25, 0x0a, 0x0b, 0x53, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0b, 0x53, 0x61, 0x6c, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x53, 0x61, 0x6c,
	0x65, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x09,
	0x53, 0x61, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x78,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x11, 0x54, 0x65, 0x63,
	0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x82,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x11, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63,
	0x61, 0x6c, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a,
	0x13, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x52,
	0x61, 0x74, 0x69, 0x6f, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x13, 0x45,
	0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x05,
	0x52, 0x0e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x06, 0x52, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x07, 0x52, 0x0a, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x11,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x11, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x25, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x73, 0x18, 0xc8, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x3c, 0x0a, 0x16, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x18, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x09, 0x52, 0x16, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x18, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0b, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a,
	0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0xe6, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0b, 0x52, 0x13, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x07, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x18, 0xf0, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x23, 0x0a, 0x0c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0xfa, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0a, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x18, 0x84, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0a, 0x47, 0x6f,
	0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0c, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x8e, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x53, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x53, 0x61, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x46,
	0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x45, 0x6c, 0x65, 0x63,
	0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x19, 0x0a,
	0x17, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x22,
	0x49, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x64, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x55, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0x5f, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0x36, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x22, 0x46, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x62, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x60, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4e, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x05, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xe3, 0x0a, 0x0a, 0x11, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x01, 0x52, 0x07, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x46, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x04, 0x52, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x50, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x0d,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x25, 0x0a, 0x0b, 0x53, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x06, 0x52, 0x0b, 0x53, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x53, 0x61, 0x6c, 0x65, 0x45,
	0x6e, 0x64, 0x41, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x07, 0x52, 0x09, 0x53, 0x61,
	0x6c, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x78, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x08, 0x52, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x11, 0x54, 0x65, 0x63, 0x68, 0x6e,
	0x69, 0x63, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x82, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x11, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c,
	0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x13, 0x45,
	0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x13, 0x45, 0x6c, 0x65,
	0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0xa0, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0a, 0x47, 0x6f, 0x6f, 0x64,
	0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52,
	0x0a, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x23,
	0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0xb4,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x0e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0c, 0x52, 0x0e,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x32, 0x0a, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x18, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0d, 0x52,
	0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d,
	0x6f, 0x64, 0x65, 0x18, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x0e, 0x52, 0x0a, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x11, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0xe6, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x11, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x25,
	0x0a, 0x0d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18,
	0xf0, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x3c, 0x0a, 0x16, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18,
	0xfa, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x10, 0x52, 0x16, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x18, 0x84, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x0b, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x13, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x8e, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x12, 0x52, 0x13, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x07, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x98,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x56, 0x69,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x53, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x53, 0x61, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x46, 0x65,
	0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x45, 0x6c, 0x65, 0x63, 0x74,
	0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x19, 0x0a, 0x17, 0x5f,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x49,
	0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x64, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x86, 0x0a, 0x0a, 0x12, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4e, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x12, 0x1b, 0x0a, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x07, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x01, 0x52, 0x07, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f,
	0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x46, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x04, 0x52, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x50, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x0d, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b,
	0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x06, 0x52, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11, 0x54,
	0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f,
	0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x11, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69,
	0x63, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x35,
	0x0a, 0x13, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x13, 0x45,
	0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xa0, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0a, 0x47, 0x6f,
	0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x09, 0x52, 0x0a, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x23, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0xb4, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x0e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0a,
	0x52, 0x0e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x0b, 0x52, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x0c, 0x52, 0x0a, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x11,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x11, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x25, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x73, 0x18, 0xe6, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x3c, 0x0a, 0x16, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x18, 0xf0, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0e, 0x52, 0x16, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x18, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0f, 0x52, 0x0b, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a,
	0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x8e, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x10, 0x52, 0x13, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x07, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x98, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x47, 0x6f, 0x6f, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x41, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63,
	0x61, 0x6c, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x45,
	0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42,
	0x19, 0x0a, 0x17, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0x4a, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x47, 0x6f, 0x6f,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0xb8,
	0x06, 0x0a, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x88, 0x01, 0x0a, 0x0a, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a, 0x01,
	0x2a, 0x22, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x70,
	0x70, 0x67, 0x6f, 0x6f, 0x64, 0x12, 0x80, 0x01, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x12, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f,
	0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x7c, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x47,
	0x6f, 0x6f, 0x64, 0x12, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6f,
	0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x14, 0x3a, 0x01, 0x2a, 0x22, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x61,
	0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x12, 0x85, 0x01, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4e, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x12, 0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4e, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a, 0x01, 0x2a, 0x22, 0x12, 0x2f, 0x76, 0x31, 0x2f,
	0x67, 0x65, 0x74, 0x2f, 0x6e, 0x2f, 0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x88,
	0x01, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x2c, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6f,
	0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x17, 0x3a, 0x01, 0x2a, 0x22, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x12, 0x8d, 0x01, 0x0a, 0x0b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4e, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x47, 0x6f, 0x6f,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x31, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x47, 0x6f, 0x6f, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19,
	0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x6e, 0x2f, 0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70,
	0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x67, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x70, 0x70, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_good_gw_v1_app_good_good_proto_rawDescOnce sync.Once
	file_npool_good_gw_v1_app_good_good_proto_rawDescData = file_npool_good_gw_v1_app_good_good_proto_rawDesc
)

func file_npool_good_gw_v1_app_good_good_proto_rawDescGZIP() []byte {
	file_npool_good_gw_v1_app_good_good_proto_rawDescOnce.Do(func() {
		file_npool_good_gw_v1_app_good_good_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_good_gw_v1_app_good_good_proto_rawDescData)
	})
	return file_npool_good_gw_v1_app_good_good_proto_rawDescData
}

var file_npool_good_gw_v1_app_good_good_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_npool_good_gw_v1_app_good_good_proto_goTypes = []interface{}{
	(*Good)(nil),                // 0: good.gateway.app.good1.v1.Good
	(*CreateGoodRequest)(nil),   // 1: good.gateway.app.good1.v1.CreateGoodRequest
	(*CreateGoodResponse)(nil),  // 2: good.gateway.app.good1.v1.CreateGoodResponse
	(*GetGoodsRequest)(nil),     // 3: good.gateway.app.good1.v1.GetGoodsRequest
	(*GetGoodsResponse)(nil),    // 4: good.gateway.app.good1.v1.GetGoodsResponse
	(*GetGoodRequest)(nil),      // 5: good.gateway.app.good1.v1.GetGoodRequest
	(*GetGoodResponse)(nil),     // 6: good.gateway.app.good1.v1.GetGoodResponse
	(*GetNGoodsRequest)(nil),    // 7: good.gateway.app.good1.v1.GetNGoodsRequest
	(*GetNGoodsResponse)(nil),   // 8: good.gateway.app.good1.v1.GetNGoodsResponse
	(*UpdateGoodRequest)(nil),   // 9: good.gateway.app.good1.v1.UpdateGoodRequest
	(*UpdateGoodResponse)(nil),  // 10: good.gateway.app.good1.v1.UpdateGoodResponse
	(*UpdateNGoodRequest)(nil),  // 11: good.gateway.app.good1.v1.UpdateNGoodRequest
	(*UpdateNGoodResponse)(nil), // 12: good.gateway.app.good1.v1.UpdateNGoodResponse
	(*Good_CoinInfo)(nil),       // 13: good.gateway.app.good1.v1.Good.CoinInfo
	(v1.GoodType)(0),            // 14: basetypes.good.v1.GoodType
	(v1.BenefitType)(0),         // 15: basetypes.good.v1.BenefitType
	(v1.GoodLabel)(0),           // 16: basetypes.good.v1.GoodLabel
	(v1.GoodStartMode)(0),       // 17: basetypes.good.v1.GoodStartMode
	(v1.CancelMode)(0),          // 18: basetypes.good.v1.CancelMode
}
var file_npool_good_gw_v1_app_good_good_proto_depIdxs = []int32{
	14, // 0: good.gateway.app.good1.v1.Good.GoodType:type_name -> basetypes.good.v1.GoodType
	15, // 1: good.gateway.app.good1.v1.Good.BenefitType:type_name -> basetypes.good.v1.BenefitType
	16, // 2: good.gateway.app.good1.v1.Good.Labels:type_name -> basetypes.good.v1.GoodLabel
	13, // 3: good.gateway.app.good1.v1.Good.SupportCoins:type_name -> good.gateway.app.good1.v1.Good.CoinInfo
	0,  // 4: good.gateway.app.good1.v1.Good.RequiredGoods:type_name -> good.gateway.app.good1.v1.Good
	17, // 5: good.gateway.app.good1.v1.Good.StartMode:type_name -> basetypes.good.v1.GoodStartMode
	18, // 6: good.gateway.app.good1.v1.Good.CancelMode:type_name -> basetypes.good.v1.CancelMode
	18, // 7: good.gateway.app.good1.v1.CreateGoodRequest.CancelMode:type_name -> basetypes.good.v1.CancelMode
	0,  // 8: good.gateway.app.good1.v1.CreateGoodResponse.Info:type_name -> good.gateway.app.good1.v1.Good
	0,  // 9: good.gateway.app.good1.v1.GetGoodsResponse.Infos:type_name -> good.gateway.app.good1.v1.Good
	0,  // 10: good.gateway.app.good1.v1.GetGoodResponse.Info:type_name -> good.gateway.app.good1.v1.Good
	0,  // 11: good.gateway.app.good1.v1.GetNGoodsResponse.Infos:type_name -> good.gateway.app.good1.v1.Good
	18, // 12: good.gateway.app.good1.v1.UpdateGoodRequest.CancelMode:type_name -> basetypes.good.v1.CancelMode
	0,  // 13: good.gateway.app.good1.v1.UpdateGoodResponse.Info:type_name -> good.gateway.app.good1.v1.Good
	18, // 14: good.gateway.app.good1.v1.UpdateNGoodRequest.CancelMode:type_name -> basetypes.good.v1.CancelMode
	0,  // 15: good.gateway.app.good1.v1.UpdateNGoodResponse.Info:type_name -> good.gateway.app.good1.v1.Good
	1,  // 16: good.gateway.app.good1.v1.Gateway.CreateGood:input_type -> good.gateway.app.good1.v1.CreateGoodRequest
	3,  // 17: good.gateway.app.good1.v1.Gateway.GetGoods:input_type -> good.gateway.app.good1.v1.GetGoodsRequest
	5,  // 18: good.gateway.app.good1.v1.Gateway.GetGood:input_type -> good.gateway.app.good1.v1.GetGoodRequest
	7,  // 19: good.gateway.app.good1.v1.Gateway.GetNGoods:input_type -> good.gateway.app.good1.v1.GetNGoodsRequest
	9,  // 20: good.gateway.app.good1.v1.Gateway.UpdateGood:input_type -> good.gateway.app.good1.v1.UpdateGoodRequest
	11, // 21: good.gateway.app.good1.v1.Gateway.UpdateNGood:input_type -> good.gateway.app.good1.v1.UpdateNGoodRequest
	2,  // 22: good.gateway.app.good1.v1.Gateway.CreateGood:output_type -> good.gateway.app.good1.v1.CreateGoodResponse
	4,  // 23: good.gateway.app.good1.v1.Gateway.GetGoods:output_type -> good.gateway.app.good1.v1.GetGoodsResponse
	6,  // 24: good.gateway.app.good1.v1.Gateway.GetGood:output_type -> good.gateway.app.good1.v1.GetGoodResponse
	8,  // 25: good.gateway.app.good1.v1.Gateway.GetNGoods:output_type -> good.gateway.app.good1.v1.GetNGoodsResponse
	10, // 26: good.gateway.app.good1.v1.Gateway.UpdateGood:output_type -> good.gateway.app.good1.v1.UpdateGoodResponse
	12, // 27: good.gateway.app.good1.v1.Gateway.UpdateNGood:output_type -> good.gateway.app.good1.v1.UpdateNGoodResponse
	22, // [22:28] is the sub-list for method output_type
	16, // [16:22] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_npool_good_gw_v1_app_good_good_proto_init() }
func file_npool_good_gw_v1_app_good_good_proto_init() {
	if File_npool_good_gw_v1_app_good_good_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_good_gw_v1_app_good_good_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Good); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_good_good_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_good_good_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_good_good_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_good_good_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_good_good_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_good_good_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_good_good_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNGoodsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_good_good_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNGoodsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_good_good_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_good_good_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_good_good_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_good_good_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_good_good_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Good_CoinInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_good_gw_v1_app_good_good_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_npool_good_gw_v1_app_good_good_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_npool_good_gw_v1_app_good_good_proto_msgTypes[11].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_good_gw_v1_app_good_good_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_good_gw_v1_app_good_good_proto_goTypes,
		DependencyIndexes: file_npool_good_gw_v1_app_good_good_proto_depIdxs,
		MessageInfos:      file_npool_good_gw_v1_app_good_good_proto_msgTypes,
	}.Build()
	File_npool_good_gw_v1_app_good_good_proto = out.File
	file_npool_good_gw_v1_app_good_good_proto_rawDesc = nil
	file_npool_good_gw_v1_app_good_good_proto_goTypes = nil
	file_npool_good_gw_v1_app_good_good_proto_depIdxs = nil
}
