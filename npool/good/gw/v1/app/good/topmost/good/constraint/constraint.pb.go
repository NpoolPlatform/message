// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.18.1
// source: npool/good/gw/v1/app/good/topmost/good/constraint/constraint.proto

package constraint

import (
	v1 "github.com/NpoolPlatform/message/npool/basetypes/good/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TopMostGoodConstraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               uint32                   `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID            string                   `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty"`
	AppID            string                   `protobuf:"bytes,30,opt,name=AppID,proto3" json:"AppID,omitempty"`
	AppName          string                   `protobuf:"bytes,40,opt,name=AppName,proto3" json:"AppName,omitempty"`
	TopMostID        string                   `protobuf:"bytes,50,opt,name=TopMostID,proto3" json:"TopMostID,omitempty"`
	TopMostType      v1.GoodTopMostType       `protobuf:"varint,60,opt,name=TopMostType,proto3,enum=basetypes.good.v1.GoodTopMostType" json:"TopMostType,omitempty"`
	TopMostTitle     string                   `protobuf:"bytes,70,opt,name=TopMostTitle,proto3" json:"TopMostTitle,omitempty"`
	TopMostMessage   string                   `protobuf:"bytes,80,opt,name=TopMostMessage,proto3" json:"TopMostMessage,omitempty"`
	TopMostTargetUrl string                   `protobuf:"bytes,90,opt,name=TopMostTargetUrl,proto3" json:"TopMostTargetUrl,omitempty"`
	Constraint       v1.GoodTopMostConstraint `protobuf:"varint,100,opt,name=Constraint,proto3,enum=basetypes.good.v1.GoodTopMostConstraint" json:"Constraint,omitempty"`
	TopMostGoodID    string                   `protobuf:"bytes,120,opt,name=TopMostGoodID,proto3" json:"TopMostGoodID,omitempty"`
	AppGoodID        string                   `protobuf:"bytes,130,opt,name=AppGoodID,proto3" json:"AppGoodID,omitempty"`
	AppGoodName      string                   `protobuf:"bytes,140,opt,name=AppGoodName,proto3" json:"AppGoodName,omitempty"`
	TargetValue      string                   `protobuf:"bytes,150,opt,name=TargetValue,proto3" json:"TargetValue,omitempty"`
	Index            uint32                   `protobuf:"varint,160,opt,name=Index,proto3" json:"Index,omitempty"`
	CreatedAt        uint32                   `protobuf:"varint,1000,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt        uint32                   `protobuf:"varint,1010,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (x *TopMostGoodConstraint) Reset() {
	*x = TopMostGoodConstraint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopMostGoodConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopMostGoodConstraint) ProtoMessage() {}

func (x *TopMostGoodConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopMostGoodConstraint.ProtoReflect.Descriptor instead.
func (*TopMostGoodConstraint) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_rawDescGZIP(), []int{0}
}

func (x *TopMostGoodConstraint) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *TopMostGoodConstraint) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *TopMostGoodConstraint) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *TopMostGoodConstraint) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *TopMostGoodConstraint) GetTopMostID() string {
	if x != nil {
		return x.TopMostID
	}
	return ""
}

func (x *TopMostGoodConstraint) GetTopMostType() v1.GoodTopMostType {
	if x != nil {
		return x.TopMostType
	}
	return v1.GoodTopMostType(0)
}

func (x *TopMostGoodConstraint) GetTopMostTitle() string {
	if x != nil {
		return x.TopMostTitle
	}
	return ""
}

func (x *TopMostGoodConstraint) GetTopMostMessage() string {
	if x != nil {
		return x.TopMostMessage
	}
	return ""
}

func (x *TopMostGoodConstraint) GetTopMostTargetUrl() string {
	if x != nil {
		return x.TopMostTargetUrl
	}
	return ""
}

func (x *TopMostGoodConstraint) GetConstraint() v1.GoodTopMostConstraint {
	if x != nil {
		return x.Constraint
	}
	return v1.GoodTopMostConstraint(0)
}

func (x *TopMostGoodConstraint) GetTopMostGoodID() string {
	if x != nil {
		return x.TopMostGoodID
	}
	return ""
}

func (x *TopMostGoodConstraint) GetAppGoodID() string {
	if x != nil {
		return x.AppGoodID
	}
	return ""
}

func (x *TopMostGoodConstraint) GetAppGoodName() string {
	if x != nil {
		return x.AppGoodName
	}
	return ""
}

func (x *TopMostGoodConstraint) GetTargetValue() string {
	if x != nil {
		return x.TargetValue
	}
	return ""
}

func (x *TopMostGoodConstraint) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *TopMostGoodConstraint) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *TopMostGoodConstraint) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type CreateTopMostGoodConstraintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID         string  `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	TopMostGoodID string  `protobuf:"bytes,20,opt,name=TopMostGoodID,proto3" json:"TopMostGoodID,omitempty"`
	TargetValue   string  `protobuf:"bytes,30,opt,name=TargetValue,proto3" json:"TargetValue,omitempty"`
	Index         *uint32 `protobuf:"varint,40,opt,name=Index,proto3,oneof" json:"Index,omitempty"`
}

func (x *CreateTopMostGoodConstraintRequest) Reset() {
	*x = CreateTopMostGoodConstraintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTopMostGoodConstraintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTopMostGoodConstraintRequest) ProtoMessage() {}

func (x *CreateTopMostGoodConstraintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTopMostGoodConstraintRequest.ProtoReflect.Descriptor instead.
func (*CreateTopMostGoodConstraintRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_rawDescGZIP(), []int{1}
}

func (x *CreateTopMostGoodConstraintRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *CreateTopMostGoodConstraintRequest) GetTopMostGoodID() string {
	if x != nil {
		return x.TopMostGoodID
	}
	return ""
}

func (x *CreateTopMostGoodConstraintRequest) GetTargetValue() string {
	if x != nil {
		return x.TargetValue
	}
	return ""
}

func (x *CreateTopMostGoodConstraintRequest) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

type CreateTopMostGoodConstraintResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *TopMostGoodConstraint `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateTopMostGoodConstraintResponse) Reset() {
	*x = CreateTopMostGoodConstraintResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTopMostGoodConstraintResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTopMostGoodConstraintResponse) ProtoMessage() {}

func (x *CreateTopMostGoodConstraintResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTopMostGoodConstraintResponse.ProtoReflect.Descriptor instead.
func (*CreateTopMostGoodConstraintResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_rawDescGZIP(), []int{2}
}

func (x *CreateTopMostGoodConstraintResponse) GetInfo() *TopMostGoodConstraint {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateTopMostGoodConstraintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          uint32  `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID       string  `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty"`
	AppID       string  `protobuf:"bytes,30,opt,name=AppID,proto3" json:"AppID,omitempty"`
	TargetValue *string `protobuf:"bytes,40,opt,name=TargetValue,proto3,oneof" json:"TargetValue,omitempty"`
	Index       *uint32 `protobuf:"varint,50,opt,name=Index,proto3,oneof" json:"Index,omitempty"`
}

func (x *UpdateTopMostGoodConstraintRequest) Reset() {
	*x = UpdateTopMostGoodConstraintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTopMostGoodConstraintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTopMostGoodConstraintRequest) ProtoMessage() {}

func (x *UpdateTopMostGoodConstraintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTopMostGoodConstraintRequest.ProtoReflect.Descriptor instead.
func (*UpdateTopMostGoodConstraintRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateTopMostGoodConstraintRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *UpdateTopMostGoodConstraintRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *UpdateTopMostGoodConstraintRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *UpdateTopMostGoodConstraintRequest) GetTargetValue() string {
	if x != nil && x.TargetValue != nil {
		return *x.TargetValue
	}
	return ""
}

func (x *UpdateTopMostGoodConstraintRequest) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

type UpdateTopMostGoodConstraintResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *TopMostGoodConstraint `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateTopMostGoodConstraintResponse) Reset() {
	*x = UpdateTopMostGoodConstraintResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTopMostGoodConstraintResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTopMostGoodConstraintResponse) ProtoMessage() {}

func (x *UpdateTopMostGoodConstraintResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTopMostGoodConstraintResponse.ProtoReflect.Descriptor instead.
func (*UpdateTopMostGoodConstraintResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateTopMostGoodConstraintResponse) GetInfo() *TopMostGoodConstraint {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetTopMostGoodConstraintsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID         string  `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	TopMostGoodID *string `protobuf:"bytes,20,opt,name=TopMostGoodID,proto3,oneof" json:"TopMostGoodID,omitempty"`
	Offset        int32   `protobuf:"varint,30,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit         int32   `protobuf:"varint,40,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetTopMostGoodConstraintsRequest) Reset() {
	*x = GetTopMostGoodConstraintsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTopMostGoodConstraintsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopMostGoodConstraintsRequest) ProtoMessage() {}

func (x *GetTopMostGoodConstraintsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopMostGoodConstraintsRequest.ProtoReflect.Descriptor instead.
func (*GetTopMostGoodConstraintsRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_rawDescGZIP(), []int{5}
}

func (x *GetTopMostGoodConstraintsRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetTopMostGoodConstraintsRequest) GetTopMostGoodID() string {
	if x != nil && x.TopMostGoodID != nil {
		return *x.TopMostGoodID
	}
	return ""
}

func (x *GetTopMostGoodConstraintsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetTopMostGoodConstraintsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetTopMostGoodConstraintsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*TopMostGoodConstraint `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32                   `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetTopMostGoodConstraintsResponse) Reset() {
	*x = GetTopMostGoodConstraintsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTopMostGoodConstraintsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopMostGoodConstraintsResponse) ProtoMessage() {}

func (x *GetTopMostGoodConstraintsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopMostGoodConstraintsResponse.ProtoReflect.Descriptor instead.
func (*GetTopMostGoodConstraintsResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_rawDescGZIP(), []int{6}
}

func (x *GetTopMostGoodConstraintsResponse) GetInfos() []*TopMostGoodConstraint {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetTopMostGoodConstraintsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type DeleteTopMostGoodConstraintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID    uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID string `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty"`
	AppID string `protobuf:"bytes,30,opt,name=AppID,proto3" json:"AppID,omitempty"`
}

func (x *DeleteTopMostGoodConstraintRequest) Reset() {
	*x = DeleteTopMostGoodConstraintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTopMostGoodConstraintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTopMostGoodConstraintRequest) ProtoMessage() {}

func (x *DeleteTopMostGoodConstraintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTopMostGoodConstraintRequest.ProtoReflect.Descriptor instead.
func (*DeleteTopMostGoodConstraintRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteTopMostGoodConstraintRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *DeleteTopMostGoodConstraintRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *DeleteTopMostGoodConstraintRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

type DeleteTopMostGoodConstraintResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *TopMostGoodConstraint `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteTopMostGoodConstraintResponse) Reset() {
	*x = DeleteTopMostGoodConstraintResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTopMostGoodConstraintResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTopMostGoodConstraintResponse) ProtoMessage() {}

func (x *DeleteTopMostGoodConstraintResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTopMostGoodConstraintResponse.ProtoReflect.Descriptor instead.
func (*DeleteTopMostGoodConstraintResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteTopMostGoodConstraintResponse) GetInfo() *TopMostGoodConstraint {
	if x != nil {
		return x.Info
	}
	return nil
}

type AdminCreateTopMostGoodConstraintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetAppID   string  `protobuf:"bytes,10,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
	TopMostGoodID string  `protobuf:"bytes,20,opt,name=TopMostGoodID,proto3" json:"TopMostGoodID,omitempty"`
	TargetValue   string  `protobuf:"bytes,30,opt,name=TargetValue,proto3" json:"TargetValue,omitempty"`
	Index         *uint32 `protobuf:"varint,40,opt,name=Index,proto3,oneof" json:"Index,omitempty"`
}

func (x *AdminCreateTopMostGoodConstraintRequest) Reset() {
	*x = AdminCreateTopMostGoodConstraintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminCreateTopMostGoodConstraintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminCreateTopMostGoodConstraintRequest) ProtoMessage() {}

func (x *AdminCreateTopMostGoodConstraintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminCreateTopMostGoodConstraintRequest.ProtoReflect.Descriptor instead.
func (*AdminCreateTopMostGoodConstraintRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_rawDescGZIP(), []int{9}
}

func (x *AdminCreateTopMostGoodConstraintRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

func (x *AdminCreateTopMostGoodConstraintRequest) GetTopMostGoodID() string {
	if x != nil {
		return x.TopMostGoodID
	}
	return ""
}

func (x *AdminCreateTopMostGoodConstraintRequest) GetTargetValue() string {
	if x != nil {
		return x.TargetValue
	}
	return ""
}

func (x *AdminCreateTopMostGoodConstraintRequest) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

type AdminCreateTopMostGoodConstraintResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *TopMostGoodConstraint `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *AdminCreateTopMostGoodConstraintResponse) Reset() {
	*x = AdminCreateTopMostGoodConstraintResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminCreateTopMostGoodConstraintResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminCreateTopMostGoodConstraintResponse) ProtoMessage() {}

func (x *AdminCreateTopMostGoodConstraintResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminCreateTopMostGoodConstraintResponse.ProtoReflect.Descriptor instead.
func (*AdminCreateTopMostGoodConstraintResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_rawDescGZIP(), []int{10}
}

func (x *AdminCreateTopMostGoodConstraintResponse) GetInfo() *TopMostGoodConstraint {
	if x != nil {
		return x.Info
	}
	return nil
}

type AdminGetTopMostGoodConstraintsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetAppID string `protobuf:"bytes,10,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
	Offset      int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit       int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *AdminGetTopMostGoodConstraintsRequest) Reset() {
	*x = AdminGetTopMostGoodConstraintsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminGetTopMostGoodConstraintsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminGetTopMostGoodConstraintsRequest) ProtoMessage() {}

func (x *AdminGetTopMostGoodConstraintsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminGetTopMostGoodConstraintsRequest.ProtoReflect.Descriptor instead.
func (*AdminGetTopMostGoodConstraintsRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_rawDescGZIP(), []int{11}
}

func (x *AdminGetTopMostGoodConstraintsRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

func (x *AdminGetTopMostGoodConstraintsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *AdminGetTopMostGoodConstraintsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type AdminGetTopMostGoodConstraintsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*TopMostGoodConstraint `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32                   `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *AdminGetTopMostGoodConstraintsResponse) Reset() {
	*x = AdminGetTopMostGoodConstraintsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminGetTopMostGoodConstraintsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminGetTopMostGoodConstraintsResponse) ProtoMessage() {}

func (x *AdminGetTopMostGoodConstraintsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminGetTopMostGoodConstraintsResponse.ProtoReflect.Descriptor instead.
func (*AdminGetTopMostGoodConstraintsResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_rawDescGZIP(), []int{12}
}

func (x *AdminGetTopMostGoodConstraintsResponse) GetInfos() []*TopMostGoodConstraint {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *AdminGetTopMostGoodConstraintsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type AdminUpdateTopMostGoodConstraintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          uint32  `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID       string  `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty"`
	TargetAppID string  `protobuf:"bytes,30,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
	TargetValue *string `protobuf:"bytes,40,opt,name=TargetValue,proto3,oneof" json:"TargetValue,omitempty"`
	Index       *uint32 `protobuf:"varint,50,opt,name=Index,proto3,oneof" json:"Index,omitempty"`
}

func (x *AdminUpdateTopMostGoodConstraintRequest) Reset() {
	*x = AdminUpdateTopMostGoodConstraintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminUpdateTopMostGoodConstraintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminUpdateTopMostGoodConstraintRequest) ProtoMessage() {}

func (x *AdminUpdateTopMostGoodConstraintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminUpdateTopMostGoodConstraintRequest.ProtoReflect.Descriptor instead.
func (*AdminUpdateTopMostGoodConstraintRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_rawDescGZIP(), []int{13}
}

func (x *AdminUpdateTopMostGoodConstraintRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *AdminUpdateTopMostGoodConstraintRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *AdminUpdateTopMostGoodConstraintRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

func (x *AdminUpdateTopMostGoodConstraintRequest) GetTargetValue() string {
	if x != nil && x.TargetValue != nil {
		return *x.TargetValue
	}
	return ""
}

func (x *AdminUpdateTopMostGoodConstraintRequest) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

type AdminUpdateTopMostGoodConstraintResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *TopMostGoodConstraint `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *AdminUpdateTopMostGoodConstraintResponse) Reset() {
	*x = AdminUpdateTopMostGoodConstraintResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminUpdateTopMostGoodConstraintResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminUpdateTopMostGoodConstraintResponse) ProtoMessage() {}

func (x *AdminUpdateTopMostGoodConstraintResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminUpdateTopMostGoodConstraintResponse.ProtoReflect.Descriptor instead.
func (*AdminUpdateTopMostGoodConstraintResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_rawDescGZIP(), []int{14}
}

func (x *AdminUpdateTopMostGoodConstraintResponse) GetInfo() *TopMostGoodConstraint {
	if x != nil {
		return x.Info
	}
	return nil
}

type AdminDeleteTopMostGoodConstraintRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID       string `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty"`
	TargetAppID string `protobuf:"bytes,30,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
}

func (x *AdminDeleteTopMostGoodConstraintRequest) Reset() {
	*x = AdminDeleteTopMostGoodConstraintRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminDeleteTopMostGoodConstraintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminDeleteTopMostGoodConstraintRequest) ProtoMessage() {}

func (x *AdminDeleteTopMostGoodConstraintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminDeleteTopMostGoodConstraintRequest.ProtoReflect.Descriptor instead.
func (*AdminDeleteTopMostGoodConstraintRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_rawDescGZIP(), []int{15}
}

func (x *AdminDeleteTopMostGoodConstraintRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *AdminDeleteTopMostGoodConstraintRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *AdminDeleteTopMostGoodConstraintRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

type AdminDeleteTopMostGoodConstraintResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *TopMostGoodConstraint `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *AdminDeleteTopMostGoodConstraintResponse) Reset() {
	*x = AdminDeleteTopMostGoodConstraintResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminDeleteTopMostGoodConstraintResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminDeleteTopMostGoodConstraintResponse) ProtoMessage() {}

func (x *AdminDeleteTopMostGoodConstraintResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminDeleteTopMostGoodConstraintResponse.ProtoReflect.Descriptor instead.
func (*AdminDeleteTopMostGoodConstraintResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_rawDescGZIP(), []int{16}
}

func (x *AdminDeleteTopMostGoodConstraintResponse) GetInfo() *TopMostGoodConstraint {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto protoreflect.FileDescriptor

var file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_rawDesc = []byte{
	0x0a, 0x42, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x67, 0x77, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x74, 0x6f, 0x70, 0x6d,
	0x6f, 0x73, 0x74, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x32, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x74, 0x6f, 0x70,
	0x6d, 0x6f, 0x73, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x76, 0x31, 0x2f,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf3, 0x04, 0x0a, 0x15,
	0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54,
	0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x12, 0x44, 0x0a, 0x0b, 0x54, 0x6f, 0x70,
	0x4d, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x54, 0x6f, 0x70,
	0x4d, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x54,
	0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x18,
	0x5a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x48, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x64, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64,
	0x49, 0x44, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73,
	0x74, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f,
	0x6f, 0x64, 0x49, 0x44, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x70, 0x70,
	0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x70,
	0x70, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x15, 0x0a, 0x05,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0xf2, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0xa7, 0x01, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x4d,
	0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x24,
	0x0a, 0x0d, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f,
	0x6f, 0x64, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x84, 0x01, 0x0a, 0x23,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f,
	0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x49, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x74, 0x6f, 0x70, 0x6d, 0x6f,
	0x73, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f,
	0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0xbc, 0x01, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70,
	0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x05, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0x84, 0x01, 0x0a, 0x23, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x4d,
	0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31,
	0x2e, 0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70,
	0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xa3, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74,
	0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x0d, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f,
	0x6f, 0x64, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x54, 0x6f,
	0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x16,
	0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x22, 0x9a,
	0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f,
	0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x74, 0x6f, 0x70,
	0x6d, 0x6f, 0x73, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74,
	0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x05,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x60, 0x0a, 0x22, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x22, 0x84, 0x01,
	0x0a, 0x23, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47,
	0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x74, 0x6f, 0x70,
	0x6d, 0x6f, 0x73, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74,
	0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0xb8, 0x01, 0x0a, 0x27, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f,
	0x64, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x6f, 0x70, 0x4d, 0x6f,
	0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x05, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22,
	0x89, 0x01, 0x0a, 0x28, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x31, 0x2e, 0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x32, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x77, 0x0a, 0x25, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f,
	0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x22, 0x9f, 0x01, 0x0a, 0x26, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65,
	0x74, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5f, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xcd, 0x01, 0x0a, 0x27, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f,
	0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x0b, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x01, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x89, 0x01, 0x0a, 0x28, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f,
	0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5d, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x49, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x74, 0x6f, 0x70, 0x6d, 0x6f,
	0x73, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f,
	0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x71, 0x0a, 0x27, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a,
	0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x22, 0x89, 0x01, 0x0a, 0x28, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5d, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x49, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73,
	0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f,
	0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x32, 0xdd, 0x10, 0x0a, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0xff, 0x01,
	0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47,
	0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x56, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74,
	0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x57, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x74,
	0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73,
	0x74, 0x67, 0x6f, 0x6f, 0x64, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12,
	0xff, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73,
	0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12,
	0x56, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x4d, 0x6f,
	0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x57, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31,
	0x2e, 0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f, 0x76, 0x31,
	0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x74, 0x6f, 0x70, 0x6d,
	0x6f, 0x73, 0x74, 0x67, 0x6f, 0x6f, 0x64, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x12, 0xf7, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74,
	0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x54, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47,
	0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x55, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x74,
	0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74,
	0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x67, 0x6f, 0x6f, 0x64,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0xff, 0x01, 0x0a, 0x1b,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f,
	0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x56, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x32, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f,
	0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x57, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x74, 0x6f, 0x70,
	0x6d, 0x6f, 0x73, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x29, 0x3a, 0x01, 0x2a, 0x22, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x67,
	0x6f, 0x6f, 0x64, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x94, 0x02,
	0x0a, 0x20, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70,
	0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x12, 0x5b, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x74, 0x6f, 0x70, 0x6d,
	0x6f, 0x73, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x5c, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x74,
	0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x67, 0x6f, 0x6f, 0x64, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x12, 0x94, 0x02, 0x0a, 0x20, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x5b, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x31, 0x2e, 0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x32,
	0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73,
	0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x5c, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e,
	0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f,
	0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22,
	0x2a, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x67, 0x6f, 0x6f,
	0x64, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x8c, 0x02, 0x0a, 0x1e,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47,
	0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x59,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x4d,
	0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x5a, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x31, 0x2e, 0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x32,
	0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f,
	0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a,
	0x22, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x67, 0x65, 0x74, 0x2f,
	0x67, 0x6f, 0x6f, 0x64, 0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x67, 0x6f, 0x6f, 0x64, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x94, 0x02, 0x0a, 0x20, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73,
	0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12,
	0x5b, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x5c, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x32, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x70,
	0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x74, 0x6f, 0x70, 0x6d,
	0x6f, 0x73, 0x74, 0x67, 0x6f, 0x6f, 0x64, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x42, 0x54, 0x5a, 0x52, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64,
	0x2f, 0x67, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f,
	0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_rawDescOnce sync.Once
	file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_rawDescData = file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_rawDesc
)

func file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_rawDescGZIP() []byte {
	file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_rawDescOnce.Do(func() {
		file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_rawDescData)
	})
	return file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_rawDescData
}

var file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_goTypes = []interface{}{
	(*TopMostGoodConstraint)(nil),                    // 0: good.gateway.app.good1.topmost.good2.constraint.v1.TopMostGoodConstraint
	(*CreateTopMostGoodConstraintRequest)(nil),       // 1: good.gateway.app.good1.topmost.good2.constraint.v1.CreateTopMostGoodConstraintRequest
	(*CreateTopMostGoodConstraintResponse)(nil),      // 2: good.gateway.app.good1.topmost.good2.constraint.v1.CreateTopMostGoodConstraintResponse
	(*UpdateTopMostGoodConstraintRequest)(nil),       // 3: good.gateway.app.good1.topmost.good2.constraint.v1.UpdateTopMostGoodConstraintRequest
	(*UpdateTopMostGoodConstraintResponse)(nil),      // 4: good.gateway.app.good1.topmost.good2.constraint.v1.UpdateTopMostGoodConstraintResponse
	(*GetTopMostGoodConstraintsRequest)(nil),         // 5: good.gateway.app.good1.topmost.good2.constraint.v1.GetTopMostGoodConstraintsRequest
	(*GetTopMostGoodConstraintsResponse)(nil),        // 6: good.gateway.app.good1.topmost.good2.constraint.v1.GetTopMostGoodConstraintsResponse
	(*DeleteTopMostGoodConstraintRequest)(nil),       // 7: good.gateway.app.good1.topmost.good2.constraint.v1.DeleteTopMostGoodConstraintRequest
	(*DeleteTopMostGoodConstraintResponse)(nil),      // 8: good.gateway.app.good1.topmost.good2.constraint.v1.DeleteTopMostGoodConstraintResponse
	(*AdminCreateTopMostGoodConstraintRequest)(nil),  // 9: good.gateway.app.good1.topmost.good2.constraint.v1.AdminCreateTopMostGoodConstraintRequest
	(*AdminCreateTopMostGoodConstraintResponse)(nil), // 10: good.gateway.app.good1.topmost.good2.constraint.v1.AdminCreateTopMostGoodConstraintResponse
	(*AdminGetTopMostGoodConstraintsRequest)(nil),    // 11: good.gateway.app.good1.topmost.good2.constraint.v1.AdminGetTopMostGoodConstraintsRequest
	(*AdminGetTopMostGoodConstraintsResponse)(nil),   // 12: good.gateway.app.good1.topmost.good2.constraint.v1.AdminGetTopMostGoodConstraintsResponse
	(*AdminUpdateTopMostGoodConstraintRequest)(nil),  // 13: good.gateway.app.good1.topmost.good2.constraint.v1.AdminUpdateTopMostGoodConstraintRequest
	(*AdminUpdateTopMostGoodConstraintResponse)(nil), // 14: good.gateway.app.good1.topmost.good2.constraint.v1.AdminUpdateTopMostGoodConstraintResponse
	(*AdminDeleteTopMostGoodConstraintRequest)(nil),  // 15: good.gateway.app.good1.topmost.good2.constraint.v1.AdminDeleteTopMostGoodConstraintRequest
	(*AdminDeleteTopMostGoodConstraintResponse)(nil), // 16: good.gateway.app.good1.topmost.good2.constraint.v1.AdminDeleteTopMostGoodConstraintResponse
	(v1.GoodTopMostType)(0),                          // 17: basetypes.good.v1.GoodTopMostType
	(v1.GoodTopMostConstraint)(0),                    // 18: basetypes.good.v1.GoodTopMostConstraint
}
var file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_depIdxs = []int32{
	17, // 0: good.gateway.app.good1.topmost.good2.constraint.v1.TopMostGoodConstraint.TopMostType:type_name -> basetypes.good.v1.GoodTopMostType
	18, // 1: good.gateway.app.good1.topmost.good2.constraint.v1.TopMostGoodConstraint.Constraint:type_name -> basetypes.good.v1.GoodTopMostConstraint
	0,  // 2: good.gateway.app.good1.topmost.good2.constraint.v1.CreateTopMostGoodConstraintResponse.Info:type_name -> good.gateway.app.good1.topmost.good2.constraint.v1.TopMostGoodConstraint
	0,  // 3: good.gateway.app.good1.topmost.good2.constraint.v1.UpdateTopMostGoodConstraintResponse.Info:type_name -> good.gateway.app.good1.topmost.good2.constraint.v1.TopMostGoodConstraint
	0,  // 4: good.gateway.app.good1.topmost.good2.constraint.v1.GetTopMostGoodConstraintsResponse.Infos:type_name -> good.gateway.app.good1.topmost.good2.constraint.v1.TopMostGoodConstraint
	0,  // 5: good.gateway.app.good1.topmost.good2.constraint.v1.DeleteTopMostGoodConstraintResponse.Info:type_name -> good.gateway.app.good1.topmost.good2.constraint.v1.TopMostGoodConstraint
	0,  // 6: good.gateway.app.good1.topmost.good2.constraint.v1.AdminCreateTopMostGoodConstraintResponse.Info:type_name -> good.gateway.app.good1.topmost.good2.constraint.v1.TopMostGoodConstraint
	0,  // 7: good.gateway.app.good1.topmost.good2.constraint.v1.AdminGetTopMostGoodConstraintsResponse.Infos:type_name -> good.gateway.app.good1.topmost.good2.constraint.v1.TopMostGoodConstraint
	0,  // 8: good.gateway.app.good1.topmost.good2.constraint.v1.AdminUpdateTopMostGoodConstraintResponse.Info:type_name -> good.gateway.app.good1.topmost.good2.constraint.v1.TopMostGoodConstraint
	0,  // 9: good.gateway.app.good1.topmost.good2.constraint.v1.AdminDeleteTopMostGoodConstraintResponse.Info:type_name -> good.gateway.app.good1.topmost.good2.constraint.v1.TopMostGoodConstraint
	1,  // 10: good.gateway.app.good1.topmost.good2.constraint.v1.Gateway.CreateTopMostGoodConstraint:input_type -> good.gateway.app.good1.topmost.good2.constraint.v1.CreateTopMostGoodConstraintRequest
	3,  // 11: good.gateway.app.good1.topmost.good2.constraint.v1.Gateway.UpdateTopMostGoodConstraint:input_type -> good.gateway.app.good1.topmost.good2.constraint.v1.UpdateTopMostGoodConstraintRequest
	5,  // 12: good.gateway.app.good1.topmost.good2.constraint.v1.Gateway.GetTopMostGoodConstraints:input_type -> good.gateway.app.good1.topmost.good2.constraint.v1.GetTopMostGoodConstraintsRequest
	7,  // 13: good.gateway.app.good1.topmost.good2.constraint.v1.Gateway.DeleteTopMostGoodConstraint:input_type -> good.gateway.app.good1.topmost.good2.constraint.v1.DeleteTopMostGoodConstraintRequest
	9,  // 14: good.gateway.app.good1.topmost.good2.constraint.v1.Gateway.AdminCreateTopMostGoodConstraint:input_type -> good.gateway.app.good1.topmost.good2.constraint.v1.AdminCreateTopMostGoodConstraintRequest
	13, // 15: good.gateway.app.good1.topmost.good2.constraint.v1.Gateway.AdminUpdateTopMostGoodConstraint:input_type -> good.gateway.app.good1.topmost.good2.constraint.v1.AdminUpdateTopMostGoodConstraintRequest
	11, // 16: good.gateway.app.good1.topmost.good2.constraint.v1.Gateway.AdminGetTopMostGoodConstraints:input_type -> good.gateway.app.good1.topmost.good2.constraint.v1.AdminGetTopMostGoodConstraintsRequest
	15, // 17: good.gateway.app.good1.topmost.good2.constraint.v1.Gateway.AdminDeleteTopMostGoodConstraint:input_type -> good.gateway.app.good1.topmost.good2.constraint.v1.AdminDeleteTopMostGoodConstraintRequest
	2,  // 18: good.gateway.app.good1.topmost.good2.constraint.v1.Gateway.CreateTopMostGoodConstraint:output_type -> good.gateway.app.good1.topmost.good2.constraint.v1.CreateTopMostGoodConstraintResponse
	4,  // 19: good.gateway.app.good1.topmost.good2.constraint.v1.Gateway.UpdateTopMostGoodConstraint:output_type -> good.gateway.app.good1.topmost.good2.constraint.v1.UpdateTopMostGoodConstraintResponse
	6,  // 20: good.gateway.app.good1.topmost.good2.constraint.v1.Gateway.GetTopMostGoodConstraints:output_type -> good.gateway.app.good1.topmost.good2.constraint.v1.GetTopMostGoodConstraintsResponse
	8,  // 21: good.gateway.app.good1.topmost.good2.constraint.v1.Gateway.DeleteTopMostGoodConstraint:output_type -> good.gateway.app.good1.topmost.good2.constraint.v1.DeleteTopMostGoodConstraintResponse
	10, // 22: good.gateway.app.good1.topmost.good2.constraint.v1.Gateway.AdminCreateTopMostGoodConstraint:output_type -> good.gateway.app.good1.topmost.good2.constraint.v1.AdminCreateTopMostGoodConstraintResponse
	14, // 23: good.gateway.app.good1.topmost.good2.constraint.v1.Gateway.AdminUpdateTopMostGoodConstraint:output_type -> good.gateway.app.good1.topmost.good2.constraint.v1.AdminUpdateTopMostGoodConstraintResponse
	12, // 24: good.gateway.app.good1.topmost.good2.constraint.v1.Gateway.AdminGetTopMostGoodConstraints:output_type -> good.gateway.app.good1.topmost.good2.constraint.v1.AdminGetTopMostGoodConstraintsResponse
	16, // 25: good.gateway.app.good1.topmost.good2.constraint.v1.Gateway.AdminDeleteTopMostGoodConstraint:output_type -> good.gateway.app.good1.topmost.good2.constraint.v1.AdminDeleteTopMostGoodConstraintResponse
	18, // [18:26] is the sub-list for method output_type
	10, // [10:18] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_init() }
func file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_init() {
	if File_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopMostGoodConstraint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTopMostGoodConstraintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTopMostGoodConstraintResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTopMostGoodConstraintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTopMostGoodConstraintResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTopMostGoodConstraintsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTopMostGoodConstraintsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTopMostGoodConstraintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTopMostGoodConstraintResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminCreateTopMostGoodConstraintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminCreateTopMostGoodConstraintResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminGetTopMostGoodConstraintsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminGetTopMostGoodConstraintsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminUpdateTopMostGoodConstraintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminUpdateTopMostGoodConstraintResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminDeleteTopMostGoodConstraintRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminDeleteTopMostGoodConstraintResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes[13].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_goTypes,
		DependencyIndexes: file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_depIdxs,
		MessageInfos:      file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_msgTypes,
	}.Build()
	File_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto = out.File
	file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_rawDesc = nil
	file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_goTypes = nil
	file_npool_good_gw_v1_app_good_topmost_good_constraint_constraint_proto_depIdxs = nil
}
