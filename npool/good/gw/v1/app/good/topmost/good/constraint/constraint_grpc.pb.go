// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/good/gw/v1/app/good/topmost/good/constraint/constraint.proto

package constraint

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gateway_CreateTopMostGoodConstraint_FullMethodName      = "/good.gateway.app.good1.topmost.good2.constraint.v1.Gateway/CreateTopMostGoodConstraint"
	Gateway_UpdateTopMostGoodConstraint_FullMethodName      = "/good.gateway.app.good1.topmost.good2.constraint.v1.Gateway/UpdateTopMostGoodConstraint"
	Gateway_GetTopMostGoodConstraints_FullMethodName        = "/good.gateway.app.good1.topmost.good2.constraint.v1.Gateway/GetTopMostGoodConstraints"
	Gateway_DeleteTopMostGoodConstraint_FullMethodName      = "/good.gateway.app.good1.topmost.good2.constraint.v1.Gateway/DeleteTopMostGoodConstraint"
	Gateway_AdminCreateTopMostGoodConstraint_FullMethodName = "/good.gateway.app.good1.topmost.good2.constraint.v1.Gateway/AdminCreateTopMostGoodConstraint"
	Gateway_AdminUpdateTopMostGoodConstraint_FullMethodName = "/good.gateway.app.good1.topmost.good2.constraint.v1.Gateway/AdminUpdateTopMostGoodConstraint"
	Gateway_AdminGetTopMostGoodConstraints_FullMethodName   = "/good.gateway.app.good1.topmost.good2.constraint.v1.Gateway/AdminGetTopMostGoodConstraints"
	Gateway_AdminDeleteTopMostGoodConstraint_FullMethodName = "/good.gateway.app.good1.topmost.good2.constraint.v1.Gateway/AdminDeleteTopMostGoodConstraint"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	CreateTopMostGoodConstraint(ctx context.Context, in *CreateTopMostGoodConstraintRequest, opts ...grpc.CallOption) (*CreateTopMostGoodConstraintResponse, error)
	UpdateTopMostGoodConstraint(ctx context.Context, in *UpdateTopMostGoodConstraintRequest, opts ...grpc.CallOption) (*UpdateTopMostGoodConstraintResponse, error)
	GetTopMostGoodConstraints(ctx context.Context, in *GetTopMostGoodConstraintsRequest, opts ...grpc.CallOption) (*GetTopMostGoodConstraintsResponse, error)
	DeleteTopMostGoodConstraint(ctx context.Context, in *DeleteTopMostGoodConstraintRequest, opts ...grpc.CallOption) (*DeleteTopMostGoodConstraintResponse, error)
	// Run by admin
	AdminCreateTopMostGoodConstraint(ctx context.Context, in *AdminCreateTopMostGoodConstraintRequest, opts ...grpc.CallOption) (*AdminCreateTopMostGoodConstraintResponse, error)
	AdminUpdateTopMostGoodConstraint(ctx context.Context, in *AdminUpdateTopMostGoodConstraintRequest, opts ...grpc.CallOption) (*AdminUpdateTopMostGoodConstraintResponse, error)
	AdminGetTopMostGoodConstraints(ctx context.Context, in *AdminGetTopMostGoodConstraintsRequest, opts ...grpc.CallOption) (*AdminGetTopMostGoodConstraintsResponse, error)
	AdminDeleteTopMostGoodConstraint(ctx context.Context, in *AdminDeleteTopMostGoodConstraintRequest, opts ...grpc.CallOption) (*AdminDeleteTopMostGoodConstraintResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) CreateTopMostGoodConstraint(ctx context.Context, in *CreateTopMostGoodConstraintRequest, opts ...grpc.CallOption) (*CreateTopMostGoodConstraintResponse, error) {
	out := new(CreateTopMostGoodConstraintResponse)
	err := c.cc.Invoke(ctx, Gateway_CreateTopMostGoodConstraint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdateTopMostGoodConstraint(ctx context.Context, in *UpdateTopMostGoodConstraintRequest, opts ...grpc.CallOption) (*UpdateTopMostGoodConstraintResponse, error) {
	out := new(UpdateTopMostGoodConstraintResponse)
	err := c.cc.Invoke(ctx, Gateway_UpdateTopMostGoodConstraint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetTopMostGoodConstraints(ctx context.Context, in *GetTopMostGoodConstraintsRequest, opts ...grpc.CallOption) (*GetTopMostGoodConstraintsResponse, error) {
	out := new(GetTopMostGoodConstraintsResponse)
	err := c.cc.Invoke(ctx, Gateway_GetTopMostGoodConstraints_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) DeleteTopMostGoodConstraint(ctx context.Context, in *DeleteTopMostGoodConstraintRequest, opts ...grpc.CallOption) (*DeleteTopMostGoodConstraintResponse, error) {
	out := new(DeleteTopMostGoodConstraintResponse)
	err := c.cc.Invoke(ctx, Gateway_DeleteTopMostGoodConstraint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminCreateTopMostGoodConstraint(ctx context.Context, in *AdminCreateTopMostGoodConstraintRequest, opts ...grpc.CallOption) (*AdminCreateTopMostGoodConstraintResponse, error) {
	out := new(AdminCreateTopMostGoodConstraintResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminCreateTopMostGoodConstraint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminUpdateTopMostGoodConstraint(ctx context.Context, in *AdminUpdateTopMostGoodConstraintRequest, opts ...grpc.CallOption) (*AdminUpdateTopMostGoodConstraintResponse, error) {
	out := new(AdminUpdateTopMostGoodConstraintResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminUpdateTopMostGoodConstraint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminGetTopMostGoodConstraints(ctx context.Context, in *AdminGetTopMostGoodConstraintsRequest, opts ...grpc.CallOption) (*AdminGetTopMostGoodConstraintsResponse, error) {
	out := new(AdminGetTopMostGoodConstraintsResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminGetTopMostGoodConstraints_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminDeleteTopMostGoodConstraint(ctx context.Context, in *AdminDeleteTopMostGoodConstraintRequest, opts ...grpc.CallOption) (*AdminDeleteTopMostGoodConstraintResponse, error) {
	out := new(AdminDeleteTopMostGoodConstraintResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminDeleteTopMostGoodConstraint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	CreateTopMostGoodConstraint(context.Context, *CreateTopMostGoodConstraintRequest) (*CreateTopMostGoodConstraintResponse, error)
	UpdateTopMostGoodConstraint(context.Context, *UpdateTopMostGoodConstraintRequest) (*UpdateTopMostGoodConstraintResponse, error)
	GetTopMostGoodConstraints(context.Context, *GetTopMostGoodConstraintsRequest) (*GetTopMostGoodConstraintsResponse, error)
	DeleteTopMostGoodConstraint(context.Context, *DeleteTopMostGoodConstraintRequest) (*DeleteTopMostGoodConstraintResponse, error)
	// Run by admin
	AdminCreateTopMostGoodConstraint(context.Context, *AdminCreateTopMostGoodConstraintRequest) (*AdminCreateTopMostGoodConstraintResponse, error)
	AdminUpdateTopMostGoodConstraint(context.Context, *AdminUpdateTopMostGoodConstraintRequest) (*AdminUpdateTopMostGoodConstraintResponse, error)
	AdminGetTopMostGoodConstraints(context.Context, *AdminGetTopMostGoodConstraintsRequest) (*AdminGetTopMostGoodConstraintsResponse, error)
	AdminDeleteTopMostGoodConstraint(context.Context, *AdminDeleteTopMostGoodConstraintRequest) (*AdminDeleteTopMostGoodConstraintResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) CreateTopMostGoodConstraint(context.Context, *CreateTopMostGoodConstraintRequest) (*CreateTopMostGoodConstraintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTopMostGoodConstraint not implemented")
}
func (UnimplementedGatewayServer) UpdateTopMostGoodConstraint(context.Context, *UpdateTopMostGoodConstraintRequest) (*UpdateTopMostGoodConstraintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTopMostGoodConstraint not implemented")
}
func (UnimplementedGatewayServer) GetTopMostGoodConstraints(context.Context, *GetTopMostGoodConstraintsRequest) (*GetTopMostGoodConstraintsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopMostGoodConstraints not implemented")
}
func (UnimplementedGatewayServer) DeleteTopMostGoodConstraint(context.Context, *DeleteTopMostGoodConstraintRequest) (*DeleteTopMostGoodConstraintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTopMostGoodConstraint not implemented")
}
func (UnimplementedGatewayServer) AdminCreateTopMostGoodConstraint(context.Context, *AdminCreateTopMostGoodConstraintRequest) (*AdminCreateTopMostGoodConstraintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCreateTopMostGoodConstraint not implemented")
}
func (UnimplementedGatewayServer) AdminUpdateTopMostGoodConstraint(context.Context, *AdminUpdateTopMostGoodConstraintRequest) (*AdminUpdateTopMostGoodConstraintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateTopMostGoodConstraint not implemented")
}
func (UnimplementedGatewayServer) AdminGetTopMostGoodConstraints(context.Context, *AdminGetTopMostGoodConstraintsRequest) (*AdminGetTopMostGoodConstraintsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetTopMostGoodConstraints not implemented")
}
func (UnimplementedGatewayServer) AdminDeleteTopMostGoodConstraint(context.Context, *AdminDeleteTopMostGoodConstraintRequest) (*AdminDeleteTopMostGoodConstraintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDeleteTopMostGoodConstraint not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_CreateTopMostGoodConstraint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTopMostGoodConstraintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateTopMostGoodConstraint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_CreateTopMostGoodConstraint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateTopMostGoodConstraint(ctx, req.(*CreateTopMostGoodConstraintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdateTopMostGoodConstraint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTopMostGoodConstraintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateTopMostGoodConstraint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_UpdateTopMostGoodConstraint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateTopMostGoodConstraint(ctx, req.(*UpdateTopMostGoodConstraintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetTopMostGoodConstraints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopMostGoodConstraintsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetTopMostGoodConstraints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetTopMostGoodConstraints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetTopMostGoodConstraints(ctx, req.(*GetTopMostGoodConstraintsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_DeleteTopMostGoodConstraint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTopMostGoodConstraintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).DeleteTopMostGoodConstraint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_DeleteTopMostGoodConstraint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).DeleteTopMostGoodConstraint(ctx, req.(*DeleteTopMostGoodConstraintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminCreateTopMostGoodConstraint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCreateTopMostGoodConstraintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminCreateTopMostGoodConstraint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminCreateTopMostGoodConstraint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminCreateTopMostGoodConstraint(ctx, req.(*AdminCreateTopMostGoodConstraintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminUpdateTopMostGoodConstraint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateTopMostGoodConstraintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminUpdateTopMostGoodConstraint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminUpdateTopMostGoodConstraint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminUpdateTopMostGoodConstraint(ctx, req.(*AdminUpdateTopMostGoodConstraintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminGetTopMostGoodConstraints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetTopMostGoodConstraintsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminGetTopMostGoodConstraints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminGetTopMostGoodConstraints_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminGetTopMostGoodConstraints(ctx, req.(*AdminGetTopMostGoodConstraintsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminDeleteTopMostGoodConstraint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDeleteTopMostGoodConstraintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminDeleteTopMostGoodConstraint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminDeleteTopMostGoodConstraint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminDeleteTopMostGoodConstraint(ctx, req.(*AdminDeleteTopMostGoodConstraintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "good.gateway.app.good1.topmost.good2.constraint.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTopMostGoodConstraint",
			Handler:    _Gateway_CreateTopMostGoodConstraint_Handler,
		},
		{
			MethodName: "UpdateTopMostGoodConstraint",
			Handler:    _Gateway_UpdateTopMostGoodConstraint_Handler,
		},
		{
			MethodName: "GetTopMostGoodConstraints",
			Handler:    _Gateway_GetTopMostGoodConstraints_Handler,
		},
		{
			MethodName: "DeleteTopMostGoodConstraint",
			Handler:    _Gateway_DeleteTopMostGoodConstraint_Handler,
		},
		{
			MethodName: "AdminCreateTopMostGoodConstraint",
			Handler:    _Gateway_AdminCreateTopMostGoodConstraint_Handler,
		},
		{
			MethodName: "AdminUpdateTopMostGoodConstraint",
			Handler:    _Gateway_AdminUpdateTopMostGoodConstraint_Handler,
		},
		{
			MethodName: "AdminGetTopMostGoodConstraints",
			Handler:    _Gateway_AdminGetTopMostGoodConstraints_Handler,
		},
		{
			MethodName: "AdminDeleteTopMostGoodConstraint",
			Handler:    _Gateway_AdminDeleteTopMostGoodConstraint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/good/gw/v1/app/good/topmost/good/constraint/constraint.proto",
}
