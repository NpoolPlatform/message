// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.18.1
// source: npool/good/gw/v1/app/good/topmost/good/good.proto

package good

import (
	v1 "github.com/NpoolPlatform/message/npool/basetypes/good/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TopMostGood struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             uint32             `protobuf:"varint,9,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID          string             `protobuf:"bytes,10,opt,name=EntID,proto3" json:"EntID,omitempty"`
	AppID          string             `protobuf:"bytes,20,opt,name=AppID,proto3" json:"AppID,omitempty"`
	AppName        string             `protobuf:"bytes,30,opt,name=AppName,proto3" json:"AppName,omitempty"`
	GoodID         string             `protobuf:"bytes,40,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
	GoodName       string             `protobuf:"bytes,50,opt,name=GoodName,proto3" json:"GoodName,omitempty"`
	AppGoodID      string             `protobuf:"bytes,60,opt,name=AppGoodID,proto3" json:"AppGoodID,omitempty"`
	AppGoodName    string             `protobuf:"bytes,70,opt,name=AppGoodName,proto3" json:"AppGoodName,omitempty"`
	CoinTypeID     string             `protobuf:"bytes,80,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty"`
	CoinName       string             `protobuf:"bytes,90,opt,name=CoinName,proto3" json:"CoinName,omitempty"`
	CoinLogo       string             `protobuf:"bytes,100,opt,name=CoinLogo,proto3" json:"CoinLogo,omitempty"`
	CoinEnv        string             `protobuf:"bytes,110,opt,name=CoinEnv,proto3" json:"CoinEnv,omitempty"`
	CoinUnit       string             `protobuf:"bytes,120,opt,name=CoinUnit,proto3" json:"CoinUnit,omitempty"`
	TopMostID      string             `protobuf:"bytes,130,opt,name=TopMostID,proto3" json:"TopMostID,omitempty"`
	TopMostType    v1.GoodTopMostType `protobuf:"varint,140,opt,name=TopMostType,proto3,enum=basetypes.good.v1.GoodTopMostType" json:"TopMostType,omitempty"`
	TopMostTitle   string             `protobuf:"bytes,150,opt,name=TopMostTitle,proto3" json:"TopMostTitle,omitempty"`
	TopMostMessage string             `protobuf:"bytes,160,opt,name=TopMostMessage,proto3" json:"TopMostMessage,omitempty"`
	Posters        []string           `protobuf:"bytes,170,rep,name=Posters,proto3" json:"Posters,omitempty"`
	UnitPrice      string             `protobuf:"bytes,180,opt,name=UnitPrice,proto3" json:"UnitPrice,omitempty"`
	PackagePrice   string             `protobuf:"bytes,190,opt,name=PackagePrice,proto3" json:"PackagePrice,omitempty"`
	CreatedAt      uint32             `protobuf:"varint,1000,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt      uint32             `protobuf:"varint,1010,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (x *TopMostGood) Reset() {
	*x = TopMostGood{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_good_topmost_good_good_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopMostGood) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopMostGood) ProtoMessage() {}

func (x *TopMostGood) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_good_topmost_good_good_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopMostGood.ProtoReflect.Descriptor instead.
func (*TopMostGood) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_good_topmost_good_good_proto_rawDescGZIP(), []int{0}
}

func (x *TopMostGood) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *TopMostGood) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *TopMostGood) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *TopMostGood) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *TopMostGood) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *TopMostGood) GetGoodName() string {
	if x != nil {
		return x.GoodName
	}
	return ""
}

func (x *TopMostGood) GetAppGoodID() string {
	if x != nil {
		return x.AppGoodID
	}
	return ""
}

func (x *TopMostGood) GetAppGoodName() string {
	if x != nil {
		return x.AppGoodName
	}
	return ""
}

func (x *TopMostGood) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

func (x *TopMostGood) GetCoinName() string {
	if x != nil {
		return x.CoinName
	}
	return ""
}

func (x *TopMostGood) GetCoinLogo() string {
	if x != nil {
		return x.CoinLogo
	}
	return ""
}

func (x *TopMostGood) GetCoinEnv() string {
	if x != nil {
		return x.CoinEnv
	}
	return ""
}

func (x *TopMostGood) GetCoinUnit() string {
	if x != nil {
		return x.CoinUnit
	}
	return ""
}

func (x *TopMostGood) GetTopMostID() string {
	if x != nil {
		return x.TopMostID
	}
	return ""
}

func (x *TopMostGood) GetTopMostType() v1.GoodTopMostType {
	if x != nil {
		return x.TopMostType
	}
	return v1.GoodTopMostType(0)
}

func (x *TopMostGood) GetTopMostTitle() string {
	if x != nil {
		return x.TopMostTitle
	}
	return ""
}

func (x *TopMostGood) GetTopMostMessage() string {
	if x != nil {
		return x.TopMostMessage
	}
	return ""
}

func (x *TopMostGood) GetPosters() []string {
	if x != nil {
		return x.Posters
	}
	return nil
}

func (x *TopMostGood) GetUnitPrice() string {
	if x != nil {
		return x.UnitPrice
	}
	return ""
}

func (x *TopMostGood) GetPackagePrice() string {
	if x != nil {
		return x.PackagePrice
	}
	return ""
}

func (x *TopMostGood) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *TopMostGood) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type CreateTopMostGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID        string   `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	TopMostID    string   `protobuf:"bytes,20,opt,name=TopMostID,proto3" json:"TopMostID,omitempty"`
	AppGoodID    string   `protobuf:"bytes,30,opt,name=AppGoodID,proto3" json:"AppGoodID,omitempty"`
	Posters      []string `protobuf:"bytes,40,rep,name=Posters,proto3" json:"Posters,omitempty"`
	UnitPrice    *string  `protobuf:"bytes,50,opt,name=UnitPrice,proto3,oneof" json:"UnitPrice,omitempty"`
	PackagePrice *string  `protobuf:"bytes,60,opt,name=PackagePrice,proto3,oneof" json:"PackagePrice,omitempty"`
}

func (x *CreateTopMostGoodRequest) Reset() {
	*x = CreateTopMostGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_good_topmost_good_good_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTopMostGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTopMostGoodRequest) ProtoMessage() {}

func (x *CreateTopMostGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_good_topmost_good_good_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTopMostGoodRequest.ProtoReflect.Descriptor instead.
func (*CreateTopMostGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_good_topmost_good_good_proto_rawDescGZIP(), []int{1}
}

func (x *CreateTopMostGoodRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *CreateTopMostGoodRequest) GetTopMostID() string {
	if x != nil {
		return x.TopMostID
	}
	return ""
}

func (x *CreateTopMostGoodRequest) GetAppGoodID() string {
	if x != nil {
		return x.AppGoodID
	}
	return ""
}

func (x *CreateTopMostGoodRequest) GetPosters() []string {
	if x != nil {
		return x.Posters
	}
	return nil
}

func (x *CreateTopMostGoodRequest) GetUnitPrice() string {
	if x != nil && x.UnitPrice != nil {
		return *x.UnitPrice
	}
	return ""
}

func (x *CreateTopMostGoodRequest) GetPackagePrice() string {
	if x != nil && x.PackagePrice != nil {
		return *x.PackagePrice
	}
	return ""
}

type CreateTopMostGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *TopMostGood `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateTopMostGoodResponse) Reset() {
	*x = CreateTopMostGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_good_topmost_good_good_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTopMostGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTopMostGoodResponse) ProtoMessage() {}

func (x *CreateTopMostGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_good_topmost_good_good_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTopMostGoodResponse.ProtoReflect.Descriptor instead.
func (*CreateTopMostGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_good_topmost_good_good_proto_rawDescGZIP(), []int{2}
}

func (x *CreateTopMostGoodResponse) GetInfo() *TopMostGood {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateNTopMostGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetAppID  string   `protobuf:"bytes,10,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
	TopMostID    string   `protobuf:"bytes,20,opt,name=TopMostID,proto3" json:"TopMostID,omitempty"`
	AppGoodID    string   `protobuf:"bytes,30,opt,name=AppGoodID,proto3" json:"AppGoodID,omitempty"`
	Posters      []string `protobuf:"bytes,40,rep,name=Posters,proto3" json:"Posters,omitempty"`
	UnitPrice    *string  `protobuf:"bytes,50,opt,name=UnitPrice,proto3,oneof" json:"UnitPrice,omitempty"`
	PackagePrice *string  `protobuf:"bytes,60,opt,name=PackagePrice,proto3,oneof" json:"PackagePrice,omitempty"`
}

func (x *CreateNTopMostGoodRequest) Reset() {
	*x = CreateNTopMostGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_good_topmost_good_good_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNTopMostGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNTopMostGoodRequest) ProtoMessage() {}

func (x *CreateNTopMostGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_good_topmost_good_good_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNTopMostGoodRequest.ProtoReflect.Descriptor instead.
func (*CreateNTopMostGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_good_topmost_good_good_proto_rawDescGZIP(), []int{3}
}

func (x *CreateNTopMostGoodRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

func (x *CreateNTopMostGoodRequest) GetTopMostID() string {
	if x != nil {
		return x.TopMostID
	}
	return ""
}

func (x *CreateNTopMostGoodRequest) GetAppGoodID() string {
	if x != nil {
		return x.AppGoodID
	}
	return ""
}

func (x *CreateNTopMostGoodRequest) GetPosters() []string {
	if x != nil {
		return x.Posters
	}
	return nil
}

func (x *CreateNTopMostGoodRequest) GetUnitPrice() string {
	if x != nil && x.UnitPrice != nil {
		return *x.UnitPrice
	}
	return ""
}

func (x *CreateNTopMostGoodRequest) GetPackagePrice() string {
	if x != nil && x.PackagePrice != nil {
		return *x.PackagePrice
	}
	return ""
}

type CreateNTopMostGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *TopMostGood `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateNTopMostGoodResponse) Reset() {
	*x = CreateNTopMostGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_good_topmost_good_good_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNTopMostGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNTopMostGoodResponse) ProtoMessage() {}

func (x *CreateNTopMostGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_good_topmost_good_good_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNTopMostGoodResponse.ProtoReflect.Descriptor instead.
func (*CreateNTopMostGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_good_topmost_good_good_proto_rawDescGZIP(), []int{4}
}

func (x *CreateNTopMostGoodResponse) GetInfo() *TopMostGood {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetTopMostGoodsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID  string `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetTopMostGoodsRequest) Reset() {
	*x = GetTopMostGoodsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_good_topmost_good_good_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTopMostGoodsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopMostGoodsRequest) ProtoMessage() {}

func (x *GetTopMostGoodsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_good_topmost_good_good_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopMostGoodsRequest.ProtoReflect.Descriptor instead.
func (*GetTopMostGoodsRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_good_topmost_good_good_proto_rawDescGZIP(), []int{5}
}

func (x *GetTopMostGoodsRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetTopMostGoodsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetTopMostGoodsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetTopMostGoodsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*TopMostGood `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32         `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetTopMostGoodsResponse) Reset() {
	*x = GetTopMostGoodsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_good_topmost_good_good_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTopMostGoodsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopMostGoodsResponse) ProtoMessage() {}

func (x *GetTopMostGoodsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_good_topmost_good_good_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopMostGoodsResponse.ProtoReflect.Descriptor instead.
func (*GetTopMostGoodsResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_good_topmost_good_good_proto_rawDescGZIP(), []int{6}
}

func (x *GetTopMostGoodsResponse) GetInfos() []*TopMostGood {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetTopMostGoodsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetNTopMostGoodsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetAppID string `protobuf:"bytes,10,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
	Offset      int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit       int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetNTopMostGoodsRequest) Reset() {
	*x = GetNTopMostGoodsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_good_topmost_good_good_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNTopMostGoodsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNTopMostGoodsRequest) ProtoMessage() {}

func (x *GetNTopMostGoodsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_good_topmost_good_good_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNTopMostGoodsRequest.ProtoReflect.Descriptor instead.
func (*GetNTopMostGoodsRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_good_topmost_good_good_proto_rawDescGZIP(), []int{7}
}

func (x *GetNTopMostGoodsRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

func (x *GetNTopMostGoodsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetNTopMostGoodsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetNTopMostGoodsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*TopMostGood `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32         `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetNTopMostGoodsResponse) Reset() {
	*x = GetNTopMostGoodsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_good_topmost_good_good_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNTopMostGoodsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNTopMostGoodsResponse) ProtoMessage() {}

func (x *GetNTopMostGoodsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_good_topmost_good_good_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNTopMostGoodsResponse.ProtoReflect.Descriptor instead.
func (*GetNTopMostGoodsResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_good_topmost_good_good_proto_rawDescGZIP(), []int{8}
}

func (x *GetNTopMostGoodsResponse) GetInfos() []*TopMostGood {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetNTopMostGoodsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type DeleteTopMostGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID    uint32 `protobuf:"varint,9,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID string `protobuf:"bytes,10,opt,name=EntID,proto3" json:"EntID,omitempty"`
	AppID string `protobuf:"bytes,20,opt,name=AppID,proto3" json:"AppID,omitempty"`
}

func (x *DeleteTopMostGoodRequest) Reset() {
	*x = DeleteTopMostGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_good_topmost_good_good_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTopMostGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTopMostGoodRequest) ProtoMessage() {}

func (x *DeleteTopMostGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_good_topmost_good_good_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTopMostGoodRequest.ProtoReflect.Descriptor instead.
func (*DeleteTopMostGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_good_topmost_good_good_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteTopMostGoodRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *DeleteTopMostGoodRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *DeleteTopMostGoodRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

type DeleteTopMostGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *TopMostGood `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteTopMostGoodResponse) Reset() {
	*x = DeleteTopMostGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_good_topmost_good_good_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTopMostGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTopMostGoodResponse) ProtoMessage() {}

func (x *DeleteTopMostGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_good_topmost_good_good_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTopMostGoodResponse.ProtoReflect.Descriptor instead.
func (*DeleteTopMostGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_good_topmost_good_good_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteTopMostGoodResponse) GetInfo() *TopMostGood {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateTopMostGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           uint32   `protobuf:"varint,9,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID        string   `protobuf:"bytes,10,opt,name=EntID,proto3" json:"EntID,omitempty"`
	AppID        string   `protobuf:"bytes,20,opt,name=AppID,proto3" json:"AppID,omitempty"`
	Posters      []string `protobuf:"bytes,30,rep,name=Posters,proto3" json:"Posters,omitempty"`
	UnitPrice    *string  `protobuf:"bytes,40,opt,name=UnitPrice,proto3,oneof" json:"UnitPrice,omitempty"`
	PackagePrice *string  `protobuf:"bytes,50,opt,name=PackagePrice,proto3,oneof" json:"PackagePrice,omitempty"`
}

func (x *UpdateTopMostGoodRequest) Reset() {
	*x = UpdateTopMostGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_good_topmost_good_good_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTopMostGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTopMostGoodRequest) ProtoMessage() {}

func (x *UpdateTopMostGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_good_topmost_good_good_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTopMostGoodRequest.ProtoReflect.Descriptor instead.
func (*UpdateTopMostGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_good_topmost_good_good_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateTopMostGoodRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *UpdateTopMostGoodRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *UpdateTopMostGoodRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *UpdateTopMostGoodRequest) GetPosters() []string {
	if x != nil {
		return x.Posters
	}
	return nil
}

func (x *UpdateTopMostGoodRequest) GetUnitPrice() string {
	if x != nil && x.UnitPrice != nil {
		return *x.UnitPrice
	}
	return ""
}

func (x *UpdateTopMostGoodRequest) GetPackagePrice() string {
	if x != nil && x.PackagePrice != nil {
		return *x.PackagePrice
	}
	return ""
}

type UpdateTopMostGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *TopMostGood `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateTopMostGoodResponse) Reset() {
	*x = UpdateTopMostGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_good_topmost_good_good_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTopMostGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTopMostGoodResponse) ProtoMessage() {}

func (x *UpdateTopMostGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_good_topmost_good_good_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTopMostGoodResponse.ProtoReflect.Descriptor instead.
func (*UpdateTopMostGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_good_topmost_good_good_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateTopMostGoodResponse) GetInfo() *TopMostGood {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateNTopMostGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           uint32   `protobuf:"varint,9,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID        string   `protobuf:"bytes,10,opt,name=EntID,proto3" json:"EntID,omitempty"`
	TargetAppID  string   `protobuf:"bytes,20,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
	Posters      []string `protobuf:"bytes,30,rep,name=Posters,proto3" json:"Posters,omitempty"`
	UnitPrice    *string  `protobuf:"bytes,40,opt,name=UnitPrice,proto3,oneof" json:"UnitPrice,omitempty"`
	PackagePrice *string  `protobuf:"bytes,50,opt,name=PackagePrice,proto3,oneof" json:"PackagePrice,omitempty"`
}

func (x *UpdateNTopMostGoodRequest) Reset() {
	*x = UpdateNTopMostGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_good_topmost_good_good_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNTopMostGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNTopMostGoodRequest) ProtoMessage() {}

func (x *UpdateNTopMostGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_good_topmost_good_good_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNTopMostGoodRequest.ProtoReflect.Descriptor instead.
func (*UpdateNTopMostGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_good_topmost_good_good_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateNTopMostGoodRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *UpdateNTopMostGoodRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *UpdateNTopMostGoodRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

func (x *UpdateNTopMostGoodRequest) GetPosters() []string {
	if x != nil {
		return x.Posters
	}
	return nil
}

func (x *UpdateNTopMostGoodRequest) GetUnitPrice() string {
	if x != nil && x.UnitPrice != nil {
		return *x.UnitPrice
	}
	return ""
}

func (x *UpdateNTopMostGoodRequest) GetPackagePrice() string {
	if x != nil && x.PackagePrice != nil {
		return *x.PackagePrice
	}
	return ""
}

type UpdateNTopMostGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *TopMostGood `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateNTopMostGoodResponse) Reset() {
	*x = UpdateNTopMostGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_good_topmost_good_good_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNTopMostGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNTopMostGoodResponse) ProtoMessage() {}

func (x *UpdateNTopMostGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_good_topmost_good_good_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNTopMostGoodResponse.ProtoReflect.Descriptor instead.
func (*UpdateNTopMostGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_good_topmost_good_good_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateNTopMostGoodResponse) GetInfo() *TopMostGood {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_good_gw_v1_app_good_topmost_good_good_proto protoreflect.FileDescriptor

var file_npool_good_gw_v1_app_good_topmost_good_good_proto_rawDesc = []byte{
	0x0a, 0x31, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x67, 0x77, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x74, 0x6f, 0x70, 0x6d,
	0x6f, 0x73, 0x74, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x27, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x74, 0x6f, 0x70, 0x6d,
	0x6f, 0x73, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x6e, 0x70, 0x6f, 0x6f,
	0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x64,
	0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xb6, 0x05, 0x0a, 0x0b, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x41,
	0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x70,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x70, 0x70,
	0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x70,
	0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x47, 0x6f,
	0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x70,
	0x70, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43,
	0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x69,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x69,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x67,
	0x6f, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x67,
	0x6f, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x69, 0x6e, 0x45, 0x6e, 0x76, 0x18, 0x6e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x69, 0x6e, 0x45, 0x6e, 0x76, 0x12, 0x1a, 0x0a, 0x08, 0x43,
	0x6f, 0x69, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43,
	0x6f, 0x69, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x54, 0x6f, 0x70, 0x4d, 0x6f,
	0x73, 0x74, 0x49, 0x44, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x6f, 0x70,
	0x4d, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x12, 0x45, 0x0a, 0x0b, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0b, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a,
	0x0c, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x96, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x54, 0x6f, 0x70,
	0x4d, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x07, 0x50,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0xaa, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x50,
	0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x0a, 0x09, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x55, 0x6e, 0x69, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xf2, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xf1, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x54,
	0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x70, 0x70,
	0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x70,
	0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x28, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x21, 0x0a, 0x09, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x65, 0x0a, 0x19,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31,
	0x2e, 0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0xfe, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x54,
	0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x49, 0x44,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x49,
	0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12,
	0x18, 0x0a, 0x07, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x28, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x07, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x09, 0x55, 0x6e, 0x69,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09,
	0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x3c, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x22, 0x66, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x54,
	0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x48, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73,
	0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x4d, 0x6f,
	0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5c, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x7b, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x74, 0x6f,
	0x70, 0x6d, 0x6f, 0x73, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x69, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4e, 0x54,
	0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0x7c, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4e, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73,
	0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a,
	0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47,
	0x6f, 0x6f, 0x64, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x22, 0x56, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73,
	0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05,
	0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74,
	0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x22, 0x65, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x74, 0x6f, 0x70,
	0x6d, 0x6f, 0x73, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f,
	0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0xdb, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73,
	0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05,
	0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74,
	0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x50, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x21, 0x0a, 0x09, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x65, 0x0a,
	0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f,
	0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x31, 0x2e, 0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x32, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0xe8, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e,
	0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x50, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x09, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x55, 0x6e, 0x69, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x0c, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22,
	0x66, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73,
	0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f,
	0x64, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0xc8, 0x0a, 0x0a, 0x07, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x12, 0xbd, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f,
	0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x31, 0x2e, 0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x32,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73,
	0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70,
	0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x67,
	0x6f, 0x6f, 0x64, 0x12, 0xc2, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x54,
	0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x42, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x31, 0x2e, 0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x32, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x54, 0x6f, 0x70, 0x4d,
	0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e,
	0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x2f, 0x74, 0x6f, 0x70,
	0x6d, 0x6f, 0x73, 0x74, 0x67, 0x6f, 0x6f, 0x64, 0x12, 0xb5, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x3f, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73,
	0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x4d, 0x6f,
	0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f,
	0x67, 0x65, 0x74, 0x2f, 0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x67, 0x6f, 0x6f, 0x64, 0x73,
	0x12, 0xba, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4e, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74,
	0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x74,
	0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4e, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31,
	0x2e, 0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x6e,
	0x2f, 0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0xbd, 0x01,
	0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47,
	0x6f, 0x6f, 0x64, 0x12, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x74, 0x6f, 0x70,
	0x6d, 0x6f, 0x73, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e,
	0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f,
	0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x2f, 0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x67, 0x6f, 0x6f, 0x64, 0x12, 0xbd, 0x01,
	0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47,
	0x6f, 0x6f, 0x64, 0x12, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x74, 0x6f, 0x70,
	0x6d, 0x6f, 0x73, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e,
	0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f,
	0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x67, 0x6f, 0x6f, 0x64, 0x12, 0xc2, 0x01,
	0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74,
	0x47, 0x6f, 0x6f, 0x64, 0x12, 0x42, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x74, 0x6f,
	0x70, 0x6d, 0x6f, 0x73, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x32, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73, 0x74, 0x47, 0x6f, 0x6f,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x31, 0x2e, 0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x32, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x54, 0x6f, 0x70, 0x4d, 0x6f, 0x73,
	0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x2f, 0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x67, 0x6f,
	0x6f, 0x64, 0x42, 0x49, 0x5a, 0x47, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f,
	0x64, 0x2f, 0x67, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67, 0x6f, 0x6f, 0x64,
	0x2f, 0x74, 0x6f, 0x70, 0x6d, 0x6f, 0x73, 0x74, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_good_gw_v1_app_good_topmost_good_good_proto_rawDescOnce sync.Once
	file_npool_good_gw_v1_app_good_topmost_good_good_proto_rawDescData = file_npool_good_gw_v1_app_good_topmost_good_good_proto_rawDesc
)

func file_npool_good_gw_v1_app_good_topmost_good_good_proto_rawDescGZIP() []byte {
	file_npool_good_gw_v1_app_good_topmost_good_good_proto_rawDescOnce.Do(func() {
		file_npool_good_gw_v1_app_good_topmost_good_good_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_good_gw_v1_app_good_topmost_good_good_proto_rawDescData)
	})
	return file_npool_good_gw_v1_app_good_topmost_good_good_proto_rawDescData
}

var file_npool_good_gw_v1_app_good_topmost_good_good_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_npool_good_gw_v1_app_good_topmost_good_good_proto_goTypes = []interface{}{
	(*TopMostGood)(nil),                // 0: good.gateway.app.good1.topmost.good2.v1.TopMostGood
	(*CreateTopMostGoodRequest)(nil),   // 1: good.gateway.app.good1.topmost.good2.v1.CreateTopMostGoodRequest
	(*CreateTopMostGoodResponse)(nil),  // 2: good.gateway.app.good1.topmost.good2.v1.CreateTopMostGoodResponse
	(*CreateNTopMostGoodRequest)(nil),  // 3: good.gateway.app.good1.topmost.good2.v1.CreateNTopMostGoodRequest
	(*CreateNTopMostGoodResponse)(nil), // 4: good.gateway.app.good1.topmost.good2.v1.CreateNTopMostGoodResponse
	(*GetTopMostGoodsRequest)(nil),     // 5: good.gateway.app.good1.topmost.good2.v1.GetTopMostGoodsRequest
	(*GetTopMostGoodsResponse)(nil),    // 6: good.gateway.app.good1.topmost.good2.v1.GetTopMostGoodsResponse
	(*GetNTopMostGoodsRequest)(nil),    // 7: good.gateway.app.good1.topmost.good2.v1.GetNTopMostGoodsRequest
	(*GetNTopMostGoodsResponse)(nil),   // 8: good.gateway.app.good1.topmost.good2.v1.GetNTopMostGoodsResponse
	(*DeleteTopMostGoodRequest)(nil),   // 9: good.gateway.app.good1.topmost.good2.v1.DeleteTopMostGoodRequest
	(*DeleteTopMostGoodResponse)(nil),  // 10: good.gateway.app.good1.topmost.good2.v1.DeleteTopMostGoodResponse
	(*UpdateTopMostGoodRequest)(nil),   // 11: good.gateway.app.good1.topmost.good2.v1.UpdateTopMostGoodRequest
	(*UpdateTopMostGoodResponse)(nil),  // 12: good.gateway.app.good1.topmost.good2.v1.UpdateTopMostGoodResponse
	(*UpdateNTopMostGoodRequest)(nil),  // 13: good.gateway.app.good1.topmost.good2.v1.UpdateNTopMostGoodRequest
	(*UpdateNTopMostGoodResponse)(nil), // 14: good.gateway.app.good1.topmost.good2.v1.UpdateNTopMostGoodResponse
	(v1.GoodTopMostType)(0),            // 15: basetypes.good.v1.GoodTopMostType
}
var file_npool_good_gw_v1_app_good_topmost_good_good_proto_depIdxs = []int32{
	15, // 0: good.gateway.app.good1.topmost.good2.v1.TopMostGood.TopMostType:type_name -> basetypes.good.v1.GoodTopMostType
	0,  // 1: good.gateway.app.good1.topmost.good2.v1.CreateTopMostGoodResponse.Info:type_name -> good.gateway.app.good1.topmost.good2.v1.TopMostGood
	0,  // 2: good.gateway.app.good1.topmost.good2.v1.CreateNTopMostGoodResponse.Info:type_name -> good.gateway.app.good1.topmost.good2.v1.TopMostGood
	0,  // 3: good.gateway.app.good1.topmost.good2.v1.GetTopMostGoodsResponse.Infos:type_name -> good.gateway.app.good1.topmost.good2.v1.TopMostGood
	0,  // 4: good.gateway.app.good1.topmost.good2.v1.GetNTopMostGoodsResponse.Infos:type_name -> good.gateway.app.good1.topmost.good2.v1.TopMostGood
	0,  // 5: good.gateway.app.good1.topmost.good2.v1.DeleteTopMostGoodResponse.Info:type_name -> good.gateway.app.good1.topmost.good2.v1.TopMostGood
	0,  // 6: good.gateway.app.good1.topmost.good2.v1.UpdateTopMostGoodResponse.Info:type_name -> good.gateway.app.good1.topmost.good2.v1.TopMostGood
	0,  // 7: good.gateway.app.good1.topmost.good2.v1.UpdateNTopMostGoodResponse.Info:type_name -> good.gateway.app.good1.topmost.good2.v1.TopMostGood
	1,  // 8: good.gateway.app.good1.topmost.good2.v1.Gateway.CreateTopMostGood:input_type -> good.gateway.app.good1.topmost.good2.v1.CreateTopMostGoodRequest
	3,  // 9: good.gateway.app.good1.topmost.good2.v1.Gateway.CreateNTopMostGood:input_type -> good.gateway.app.good1.topmost.good2.v1.CreateNTopMostGoodRequest
	5,  // 10: good.gateway.app.good1.topmost.good2.v1.Gateway.GetTopMostGoods:input_type -> good.gateway.app.good1.topmost.good2.v1.GetTopMostGoodsRequest
	7,  // 11: good.gateway.app.good1.topmost.good2.v1.Gateway.GetNTopMostGoods:input_type -> good.gateway.app.good1.topmost.good2.v1.GetNTopMostGoodsRequest
	9,  // 12: good.gateway.app.good1.topmost.good2.v1.Gateway.DeleteTopMostGood:input_type -> good.gateway.app.good1.topmost.good2.v1.DeleteTopMostGoodRequest
	11, // 13: good.gateway.app.good1.topmost.good2.v1.Gateway.UpdateTopMostGood:input_type -> good.gateway.app.good1.topmost.good2.v1.UpdateTopMostGoodRequest
	13, // 14: good.gateway.app.good1.topmost.good2.v1.Gateway.UpdateNTopMostGood:input_type -> good.gateway.app.good1.topmost.good2.v1.UpdateNTopMostGoodRequest
	2,  // 15: good.gateway.app.good1.topmost.good2.v1.Gateway.CreateTopMostGood:output_type -> good.gateway.app.good1.topmost.good2.v1.CreateTopMostGoodResponse
	4,  // 16: good.gateway.app.good1.topmost.good2.v1.Gateway.CreateNTopMostGood:output_type -> good.gateway.app.good1.topmost.good2.v1.CreateNTopMostGoodResponse
	6,  // 17: good.gateway.app.good1.topmost.good2.v1.Gateway.GetTopMostGoods:output_type -> good.gateway.app.good1.topmost.good2.v1.GetTopMostGoodsResponse
	8,  // 18: good.gateway.app.good1.topmost.good2.v1.Gateway.GetNTopMostGoods:output_type -> good.gateway.app.good1.topmost.good2.v1.GetNTopMostGoodsResponse
	10, // 19: good.gateway.app.good1.topmost.good2.v1.Gateway.DeleteTopMostGood:output_type -> good.gateway.app.good1.topmost.good2.v1.DeleteTopMostGoodResponse
	12, // 20: good.gateway.app.good1.topmost.good2.v1.Gateway.UpdateTopMostGood:output_type -> good.gateway.app.good1.topmost.good2.v1.UpdateTopMostGoodResponse
	14, // 21: good.gateway.app.good1.topmost.good2.v1.Gateway.UpdateNTopMostGood:output_type -> good.gateway.app.good1.topmost.good2.v1.UpdateNTopMostGoodResponse
	15, // [15:22] is the sub-list for method output_type
	8,  // [8:15] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_npool_good_gw_v1_app_good_topmost_good_good_proto_init() }
func file_npool_good_gw_v1_app_good_topmost_good_good_proto_init() {
	if File_npool_good_gw_v1_app_good_topmost_good_good_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_good_gw_v1_app_good_topmost_good_good_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopMostGood); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_good_topmost_good_good_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTopMostGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_good_topmost_good_good_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTopMostGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_good_topmost_good_good_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNTopMostGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_good_topmost_good_good_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNTopMostGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_good_topmost_good_good_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTopMostGoodsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_good_topmost_good_good_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTopMostGoodsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_good_topmost_good_good_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNTopMostGoodsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_good_topmost_good_good_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNTopMostGoodsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_good_topmost_good_good_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTopMostGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_good_topmost_good_good_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTopMostGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_good_topmost_good_good_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTopMostGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_good_topmost_good_good_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTopMostGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_good_topmost_good_good_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNTopMostGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_good_topmost_good_good_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNTopMostGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_good_gw_v1_app_good_topmost_good_good_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_npool_good_gw_v1_app_good_topmost_good_good_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_npool_good_gw_v1_app_good_topmost_good_good_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_npool_good_gw_v1_app_good_topmost_good_good_proto_msgTypes[13].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_good_gw_v1_app_good_topmost_good_good_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_good_gw_v1_app_good_topmost_good_good_proto_goTypes,
		DependencyIndexes: file_npool_good_gw_v1_app_good_topmost_good_good_proto_depIdxs,
		MessageInfos:      file_npool_good_gw_v1_app_good_topmost_good_good_proto_msgTypes,
	}.Build()
	File_npool_good_gw_v1_app_good_topmost_good_good_proto = out.File
	file_npool_good_gw_v1_app_good_topmost_good_good_proto_rawDesc = nil
	file_npool_good_gw_v1_app_good_topmost_good_good_proto_goTypes = nil
	file_npool_good_gw_v1_app_good_topmost_good_good_proto_depIdxs = nil
}
