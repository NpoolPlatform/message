// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/good/gw/v1/app/good/topmost/good/good.proto

package good

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gateway_CreateTopMostGood_FullMethodName  = "/good.gateway.app.good1.topmost.good2.v1.Gateway/CreateTopMostGood"
	Gateway_CreateNTopMostGood_FullMethodName = "/good.gateway.app.good1.topmost.good2.v1.Gateway/CreateNTopMostGood"
	Gateway_GetTopMostGoods_FullMethodName    = "/good.gateway.app.good1.topmost.good2.v1.Gateway/GetTopMostGoods"
	Gateway_GetNTopMostGoods_FullMethodName   = "/good.gateway.app.good1.topmost.good2.v1.Gateway/GetNTopMostGoods"
	Gateway_DeleteTopMostGood_FullMethodName  = "/good.gateway.app.good1.topmost.good2.v1.Gateway/DeleteTopMostGood"
	Gateway_UpdateTopMostGood_FullMethodName  = "/good.gateway.app.good1.topmost.good2.v1.Gateway/UpdateTopMostGood"
	Gateway_UpdateNTopMostGood_FullMethodName = "/good.gateway.app.good1.topmost.good2.v1.Gateway/UpdateNTopMostGood"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	CreateTopMostGood(ctx context.Context, in *CreateTopMostGoodRequest, opts ...grpc.CallOption) (*CreateTopMostGoodResponse, error)
	CreateNTopMostGood(ctx context.Context, in *CreateNTopMostGoodRequest, opts ...grpc.CallOption) (*CreateNTopMostGoodResponse, error)
	GetTopMostGoods(ctx context.Context, in *GetTopMostGoodsRequest, opts ...grpc.CallOption) (*GetTopMostGoodsResponse, error)
	GetNTopMostGoods(ctx context.Context, in *GetNTopMostGoodsRequest, opts ...grpc.CallOption) (*GetNTopMostGoodsResponse, error)
	DeleteTopMostGood(ctx context.Context, in *DeleteTopMostGoodRequest, opts ...grpc.CallOption) (*DeleteTopMostGoodResponse, error)
	UpdateTopMostGood(ctx context.Context, in *UpdateTopMostGoodRequest, opts ...grpc.CallOption) (*UpdateTopMostGoodResponse, error)
	UpdateNTopMostGood(ctx context.Context, in *UpdateNTopMostGoodRequest, opts ...grpc.CallOption) (*UpdateNTopMostGoodResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) CreateTopMostGood(ctx context.Context, in *CreateTopMostGoodRequest, opts ...grpc.CallOption) (*CreateTopMostGoodResponse, error) {
	out := new(CreateTopMostGoodResponse)
	err := c.cc.Invoke(ctx, Gateway_CreateTopMostGood_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) CreateNTopMostGood(ctx context.Context, in *CreateNTopMostGoodRequest, opts ...grpc.CallOption) (*CreateNTopMostGoodResponse, error) {
	out := new(CreateNTopMostGoodResponse)
	err := c.cc.Invoke(ctx, Gateway_CreateNTopMostGood_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetTopMostGoods(ctx context.Context, in *GetTopMostGoodsRequest, opts ...grpc.CallOption) (*GetTopMostGoodsResponse, error) {
	out := new(GetTopMostGoodsResponse)
	err := c.cc.Invoke(ctx, Gateway_GetTopMostGoods_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetNTopMostGoods(ctx context.Context, in *GetNTopMostGoodsRequest, opts ...grpc.CallOption) (*GetNTopMostGoodsResponse, error) {
	out := new(GetNTopMostGoodsResponse)
	err := c.cc.Invoke(ctx, Gateway_GetNTopMostGoods_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) DeleteTopMostGood(ctx context.Context, in *DeleteTopMostGoodRequest, opts ...grpc.CallOption) (*DeleteTopMostGoodResponse, error) {
	out := new(DeleteTopMostGoodResponse)
	err := c.cc.Invoke(ctx, Gateway_DeleteTopMostGood_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdateTopMostGood(ctx context.Context, in *UpdateTopMostGoodRequest, opts ...grpc.CallOption) (*UpdateTopMostGoodResponse, error) {
	out := new(UpdateTopMostGoodResponse)
	err := c.cc.Invoke(ctx, Gateway_UpdateTopMostGood_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdateNTopMostGood(ctx context.Context, in *UpdateNTopMostGoodRequest, opts ...grpc.CallOption) (*UpdateNTopMostGoodResponse, error) {
	out := new(UpdateNTopMostGoodResponse)
	err := c.cc.Invoke(ctx, Gateway_UpdateNTopMostGood_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	CreateTopMostGood(context.Context, *CreateTopMostGoodRequest) (*CreateTopMostGoodResponse, error)
	CreateNTopMostGood(context.Context, *CreateNTopMostGoodRequest) (*CreateNTopMostGoodResponse, error)
	GetTopMostGoods(context.Context, *GetTopMostGoodsRequest) (*GetTopMostGoodsResponse, error)
	GetNTopMostGoods(context.Context, *GetNTopMostGoodsRequest) (*GetNTopMostGoodsResponse, error)
	DeleteTopMostGood(context.Context, *DeleteTopMostGoodRequest) (*DeleteTopMostGoodResponse, error)
	UpdateTopMostGood(context.Context, *UpdateTopMostGoodRequest) (*UpdateTopMostGoodResponse, error)
	UpdateNTopMostGood(context.Context, *UpdateNTopMostGoodRequest) (*UpdateNTopMostGoodResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) CreateTopMostGood(context.Context, *CreateTopMostGoodRequest) (*CreateTopMostGoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTopMostGood not implemented")
}
func (UnimplementedGatewayServer) CreateNTopMostGood(context.Context, *CreateNTopMostGoodRequest) (*CreateNTopMostGoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNTopMostGood not implemented")
}
func (UnimplementedGatewayServer) GetTopMostGoods(context.Context, *GetTopMostGoodsRequest) (*GetTopMostGoodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopMostGoods not implemented")
}
func (UnimplementedGatewayServer) GetNTopMostGoods(context.Context, *GetNTopMostGoodsRequest) (*GetNTopMostGoodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNTopMostGoods not implemented")
}
func (UnimplementedGatewayServer) DeleteTopMostGood(context.Context, *DeleteTopMostGoodRequest) (*DeleteTopMostGoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTopMostGood not implemented")
}
func (UnimplementedGatewayServer) UpdateTopMostGood(context.Context, *UpdateTopMostGoodRequest) (*UpdateTopMostGoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTopMostGood not implemented")
}
func (UnimplementedGatewayServer) UpdateNTopMostGood(context.Context, *UpdateNTopMostGoodRequest) (*UpdateNTopMostGoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNTopMostGood not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_CreateTopMostGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTopMostGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateTopMostGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_CreateTopMostGood_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateTopMostGood(ctx, req.(*CreateTopMostGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_CreateNTopMostGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNTopMostGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateNTopMostGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_CreateNTopMostGood_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateNTopMostGood(ctx, req.(*CreateNTopMostGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetTopMostGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopMostGoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetTopMostGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetTopMostGoods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetTopMostGoods(ctx, req.(*GetTopMostGoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetNTopMostGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNTopMostGoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetNTopMostGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetNTopMostGoods_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetNTopMostGoods(ctx, req.(*GetNTopMostGoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_DeleteTopMostGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTopMostGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).DeleteTopMostGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_DeleteTopMostGood_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).DeleteTopMostGood(ctx, req.(*DeleteTopMostGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdateTopMostGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTopMostGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateTopMostGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_UpdateTopMostGood_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateTopMostGood(ctx, req.(*UpdateTopMostGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdateNTopMostGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNTopMostGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateNTopMostGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_UpdateNTopMostGood_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateNTopMostGood(ctx, req.(*UpdateNTopMostGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "good.gateway.app.good1.topmost.good2.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTopMostGood",
			Handler:    _Gateway_CreateTopMostGood_Handler,
		},
		{
			MethodName: "CreateNTopMostGood",
			Handler:    _Gateway_CreateNTopMostGood_Handler,
		},
		{
			MethodName: "GetTopMostGoods",
			Handler:    _Gateway_GetTopMostGoods_Handler,
		},
		{
			MethodName: "GetNTopMostGoods",
			Handler:    _Gateway_GetNTopMostGoods_Handler,
		},
		{
			MethodName: "DeleteTopMostGood",
			Handler:    _Gateway_DeleteTopMostGood_Handler,
		},
		{
			MethodName: "UpdateTopMostGood",
			Handler:    _Gateway_UpdateTopMostGood_Handler,
		},
		{
			MethodName: "UpdateNTopMostGood",
			Handler:    _Gateway_UpdateNTopMostGood_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/good/gw/v1/app/good/topmost/good/good.proto",
}
