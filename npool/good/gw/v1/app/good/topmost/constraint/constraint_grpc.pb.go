// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/good/gw/v1/app/good/topmost/constraint/constraint.proto

package constraint

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	CreateTopMostConstraint(ctx context.Context, in *CreateTopMostConstraintRequest, opts ...grpc.CallOption) (*CreateTopMostConstraintResponse, error)
	UpdateTopMostConstraint(ctx context.Context, in *UpdateTopMostConstraintRequest, opts ...grpc.CallOption) (*UpdateTopMostConstraintResponse, error)
	GetTopMostConstraints(ctx context.Context, in *GetTopMostConstraintsRequest, opts ...grpc.CallOption) (*GetTopMostConstraintsResponse, error)
	DeleteTopMostConstraint(ctx context.Context, in *DeleteTopMostConstraintRequest, opts ...grpc.CallOption) (*DeleteTopMostConstraintResponse, error)
	// Run by admin
	AdminCreateTopMostConstraint(ctx context.Context, in *AdminCreateTopMostConstraintRequest, opts ...grpc.CallOption) (*AdminCreateTopMostConstraintResponse, error)
	AdminUpdateTopMostConstraint(ctx context.Context, in *AdminUpdateTopMostConstraintRequest, opts ...grpc.CallOption) (*AdminUpdateTopMostConstraintResponse, error)
	AdminGetTopMostConstraints(ctx context.Context, in *AdminGetTopMostConstraintsRequest, opts ...grpc.CallOption) (*AdminGetTopMostConstraintsResponse, error)
	AdminDeleteTopMostConstraint(ctx context.Context, in *AdminDeleteTopMostConstraintRequest, opts ...grpc.CallOption) (*AdminDeleteTopMostConstraintResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) CreateTopMostConstraint(ctx context.Context, in *CreateTopMostConstraintRequest, opts ...grpc.CallOption) (*CreateTopMostConstraintResponse, error) {
	out := new(CreateTopMostConstraintResponse)
	err := c.cc.Invoke(ctx, "/good.gateway.app.good1.topmost.constraint.v1.Gateway/CreateTopMostConstraint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdateTopMostConstraint(ctx context.Context, in *UpdateTopMostConstraintRequest, opts ...grpc.CallOption) (*UpdateTopMostConstraintResponse, error) {
	out := new(UpdateTopMostConstraintResponse)
	err := c.cc.Invoke(ctx, "/good.gateway.app.good1.topmost.constraint.v1.Gateway/UpdateTopMostConstraint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetTopMostConstraints(ctx context.Context, in *GetTopMostConstraintsRequest, opts ...grpc.CallOption) (*GetTopMostConstraintsResponse, error) {
	out := new(GetTopMostConstraintsResponse)
	err := c.cc.Invoke(ctx, "/good.gateway.app.good1.topmost.constraint.v1.Gateway/GetTopMostConstraints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) DeleteTopMostConstraint(ctx context.Context, in *DeleteTopMostConstraintRequest, opts ...grpc.CallOption) (*DeleteTopMostConstraintResponse, error) {
	out := new(DeleteTopMostConstraintResponse)
	err := c.cc.Invoke(ctx, "/good.gateway.app.good1.topmost.constraint.v1.Gateway/DeleteTopMostConstraint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminCreateTopMostConstraint(ctx context.Context, in *AdminCreateTopMostConstraintRequest, opts ...grpc.CallOption) (*AdminCreateTopMostConstraintResponse, error) {
	out := new(AdminCreateTopMostConstraintResponse)
	err := c.cc.Invoke(ctx, "/good.gateway.app.good1.topmost.constraint.v1.Gateway/AdminCreateTopMostConstraint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminUpdateTopMostConstraint(ctx context.Context, in *AdminUpdateTopMostConstraintRequest, opts ...grpc.CallOption) (*AdminUpdateTopMostConstraintResponse, error) {
	out := new(AdminUpdateTopMostConstraintResponse)
	err := c.cc.Invoke(ctx, "/good.gateway.app.good1.topmost.constraint.v1.Gateway/AdminUpdateTopMostConstraint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminGetTopMostConstraints(ctx context.Context, in *AdminGetTopMostConstraintsRequest, opts ...grpc.CallOption) (*AdminGetTopMostConstraintsResponse, error) {
	out := new(AdminGetTopMostConstraintsResponse)
	err := c.cc.Invoke(ctx, "/good.gateway.app.good1.topmost.constraint.v1.Gateway/AdminGetTopMostConstraints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminDeleteTopMostConstraint(ctx context.Context, in *AdminDeleteTopMostConstraintRequest, opts ...grpc.CallOption) (*AdminDeleteTopMostConstraintResponse, error) {
	out := new(AdminDeleteTopMostConstraintResponse)
	err := c.cc.Invoke(ctx, "/good.gateway.app.good1.topmost.constraint.v1.Gateway/AdminDeleteTopMostConstraint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	CreateTopMostConstraint(context.Context, *CreateTopMostConstraintRequest) (*CreateTopMostConstraintResponse, error)
	UpdateTopMostConstraint(context.Context, *UpdateTopMostConstraintRequest) (*UpdateTopMostConstraintResponse, error)
	GetTopMostConstraints(context.Context, *GetTopMostConstraintsRequest) (*GetTopMostConstraintsResponse, error)
	DeleteTopMostConstraint(context.Context, *DeleteTopMostConstraintRequest) (*DeleteTopMostConstraintResponse, error)
	// Run by admin
	AdminCreateTopMostConstraint(context.Context, *AdminCreateTopMostConstraintRequest) (*AdminCreateTopMostConstraintResponse, error)
	AdminUpdateTopMostConstraint(context.Context, *AdminUpdateTopMostConstraintRequest) (*AdminUpdateTopMostConstraintResponse, error)
	AdminGetTopMostConstraints(context.Context, *AdminGetTopMostConstraintsRequest) (*AdminGetTopMostConstraintsResponse, error)
	AdminDeleteTopMostConstraint(context.Context, *AdminDeleteTopMostConstraintRequest) (*AdminDeleteTopMostConstraintResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) CreateTopMostConstraint(context.Context, *CreateTopMostConstraintRequest) (*CreateTopMostConstraintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTopMostConstraint not implemented")
}
func (UnimplementedGatewayServer) UpdateTopMostConstraint(context.Context, *UpdateTopMostConstraintRequest) (*UpdateTopMostConstraintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTopMostConstraint not implemented")
}
func (UnimplementedGatewayServer) GetTopMostConstraints(context.Context, *GetTopMostConstraintsRequest) (*GetTopMostConstraintsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopMostConstraints not implemented")
}
func (UnimplementedGatewayServer) DeleteTopMostConstraint(context.Context, *DeleteTopMostConstraintRequest) (*DeleteTopMostConstraintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTopMostConstraint not implemented")
}
func (UnimplementedGatewayServer) AdminCreateTopMostConstraint(context.Context, *AdminCreateTopMostConstraintRequest) (*AdminCreateTopMostConstraintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCreateTopMostConstraint not implemented")
}
func (UnimplementedGatewayServer) AdminUpdateTopMostConstraint(context.Context, *AdminUpdateTopMostConstraintRequest) (*AdminUpdateTopMostConstraintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateTopMostConstraint not implemented")
}
func (UnimplementedGatewayServer) AdminGetTopMostConstraints(context.Context, *AdminGetTopMostConstraintsRequest) (*AdminGetTopMostConstraintsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetTopMostConstraints not implemented")
}
func (UnimplementedGatewayServer) AdminDeleteTopMostConstraint(context.Context, *AdminDeleteTopMostConstraintRequest) (*AdminDeleteTopMostConstraintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDeleteTopMostConstraint not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_CreateTopMostConstraint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTopMostConstraintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateTopMostConstraint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.gateway.app.good1.topmost.constraint.v1.Gateway/CreateTopMostConstraint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateTopMostConstraint(ctx, req.(*CreateTopMostConstraintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdateTopMostConstraint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTopMostConstraintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateTopMostConstraint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.gateway.app.good1.topmost.constraint.v1.Gateway/UpdateTopMostConstraint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateTopMostConstraint(ctx, req.(*UpdateTopMostConstraintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetTopMostConstraints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopMostConstraintsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetTopMostConstraints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.gateway.app.good1.topmost.constraint.v1.Gateway/GetTopMostConstraints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetTopMostConstraints(ctx, req.(*GetTopMostConstraintsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_DeleteTopMostConstraint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTopMostConstraintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).DeleteTopMostConstraint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.gateway.app.good1.topmost.constraint.v1.Gateway/DeleteTopMostConstraint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).DeleteTopMostConstraint(ctx, req.(*DeleteTopMostConstraintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminCreateTopMostConstraint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCreateTopMostConstraintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminCreateTopMostConstraint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.gateway.app.good1.topmost.constraint.v1.Gateway/AdminCreateTopMostConstraint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminCreateTopMostConstraint(ctx, req.(*AdminCreateTopMostConstraintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminUpdateTopMostConstraint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateTopMostConstraintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminUpdateTopMostConstraint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.gateway.app.good1.topmost.constraint.v1.Gateway/AdminUpdateTopMostConstraint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminUpdateTopMostConstraint(ctx, req.(*AdminUpdateTopMostConstraintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminGetTopMostConstraints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetTopMostConstraintsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminGetTopMostConstraints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.gateway.app.good1.topmost.constraint.v1.Gateway/AdminGetTopMostConstraints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminGetTopMostConstraints(ctx, req.(*AdminGetTopMostConstraintsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminDeleteTopMostConstraint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDeleteTopMostConstraintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminDeleteTopMostConstraint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.gateway.app.good1.topmost.constraint.v1.Gateway/AdminDeleteTopMostConstraint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminDeleteTopMostConstraint(ctx, req.(*AdminDeleteTopMostConstraintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "good.gateway.app.good1.topmost.constraint.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTopMostConstraint",
			Handler:    _Gateway_CreateTopMostConstraint_Handler,
		},
		{
			MethodName: "UpdateTopMostConstraint",
			Handler:    _Gateway_UpdateTopMostConstraint_Handler,
		},
		{
			MethodName: "GetTopMostConstraints",
			Handler:    _Gateway_GetTopMostConstraints_Handler,
		},
		{
			MethodName: "DeleteTopMostConstraint",
			Handler:    _Gateway_DeleteTopMostConstraint_Handler,
		},
		{
			MethodName: "AdminCreateTopMostConstraint",
			Handler:    _Gateway_AdminCreateTopMostConstraint_Handler,
		},
		{
			MethodName: "AdminUpdateTopMostConstraint",
			Handler:    _Gateway_AdminUpdateTopMostConstraint_Handler,
		},
		{
			MethodName: "AdminGetTopMostConstraints",
			Handler:    _Gateway_AdminGetTopMostConstraints_Handler,
		},
		{
			MethodName: "AdminDeleteTopMostConstraint",
			Handler:    _Gateway_AdminDeleteTopMostConstraint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/good/gw/v1/app/good/topmost/constraint/constraint.proto",
}
