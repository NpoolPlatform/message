// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/good/gw/v1/app/good/topmost/topmost.proto

package topmost

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gateway_CreateTopMost_FullMethodName  = "/good.gateway.app.good1.topmost.v1.Gateway/CreateTopMost"
	Gateway_CreateNTopMost_FullMethodName = "/good.gateway.app.good1.topmost.v1.Gateway/CreateNTopMost"
	Gateway_GetTopMosts_FullMethodName    = "/good.gateway.app.good1.topmost.v1.Gateway/GetTopMosts"
	Gateway_GetNTopMosts_FullMethodName   = "/good.gateway.app.good1.topmost.v1.Gateway/GetNTopMosts"
	Gateway_DeleteTopMost_FullMethodName  = "/good.gateway.app.good1.topmost.v1.Gateway/DeleteTopMost"
	Gateway_UpdateTopMost_FullMethodName  = "/good.gateway.app.good1.topmost.v1.Gateway/UpdateTopMost"
	Gateway_UpdateNTopMost_FullMethodName = "/good.gateway.app.good1.topmost.v1.Gateway/UpdateNTopMost"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	CreateTopMost(ctx context.Context, in *CreateTopMostRequest, opts ...grpc.CallOption) (*CreateTopMostResponse, error)
	CreateNTopMost(ctx context.Context, in *CreateNTopMostRequest, opts ...grpc.CallOption) (*CreateNTopMostResponse, error)
	GetTopMosts(ctx context.Context, in *GetTopMostsRequest, opts ...grpc.CallOption) (*GetTopMostsResponse, error)
	GetNTopMosts(ctx context.Context, in *GetNTopMostsRequest, opts ...grpc.CallOption) (*GetNTopMostsResponse, error)
	DeleteTopMost(ctx context.Context, in *DeleteTopMostRequest, opts ...grpc.CallOption) (*DeleteTopMostResponse, error)
	UpdateTopMost(ctx context.Context, in *UpdateTopMostRequest, opts ...grpc.CallOption) (*UpdateTopMostResponse, error)
	UpdateNTopMost(ctx context.Context, in *UpdateNTopMostRequest, opts ...grpc.CallOption) (*UpdateNTopMostResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) CreateTopMost(ctx context.Context, in *CreateTopMostRequest, opts ...grpc.CallOption) (*CreateTopMostResponse, error) {
	out := new(CreateTopMostResponse)
	err := c.cc.Invoke(ctx, Gateway_CreateTopMost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) CreateNTopMost(ctx context.Context, in *CreateNTopMostRequest, opts ...grpc.CallOption) (*CreateNTopMostResponse, error) {
	out := new(CreateNTopMostResponse)
	err := c.cc.Invoke(ctx, Gateway_CreateNTopMost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetTopMosts(ctx context.Context, in *GetTopMostsRequest, opts ...grpc.CallOption) (*GetTopMostsResponse, error) {
	out := new(GetTopMostsResponse)
	err := c.cc.Invoke(ctx, Gateway_GetTopMosts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetNTopMosts(ctx context.Context, in *GetNTopMostsRequest, opts ...grpc.CallOption) (*GetNTopMostsResponse, error) {
	out := new(GetNTopMostsResponse)
	err := c.cc.Invoke(ctx, Gateway_GetNTopMosts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) DeleteTopMost(ctx context.Context, in *DeleteTopMostRequest, opts ...grpc.CallOption) (*DeleteTopMostResponse, error) {
	out := new(DeleteTopMostResponse)
	err := c.cc.Invoke(ctx, Gateway_DeleteTopMost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdateTopMost(ctx context.Context, in *UpdateTopMostRequest, opts ...grpc.CallOption) (*UpdateTopMostResponse, error) {
	out := new(UpdateTopMostResponse)
	err := c.cc.Invoke(ctx, Gateway_UpdateTopMost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdateNTopMost(ctx context.Context, in *UpdateNTopMostRequest, opts ...grpc.CallOption) (*UpdateNTopMostResponse, error) {
	out := new(UpdateNTopMostResponse)
	err := c.cc.Invoke(ctx, Gateway_UpdateNTopMost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	CreateTopMost(context.Context, *CreateTopMostRequest) (*CreateTopMostResponse, error)
	CreateNTopMost(context.Context, *CreateNTopMostRequest) (*CreateNTopMostResponse, error)
	GetTopMosts(context.Context, *GetTopMostsRequest) (*GetTopMostsResponse, error)
	GetNTopMosts(context.Context, *GetNTopMostsRequest) (*GetNTopMostsResponse, error)
	DeleteTopMost(context.Context, *DeleteTopMostRequest) (*DeleteTopMostResponse, error)
	UpdateTopMost(context.Context, *UpdateTopMostRequest) (*UpdateTopMostResponse, error)
	UpdateNTopMost(context.Context, *UpdateNTopMostRequest) (*UpdateNTopMostResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) CreateTopMost(context.Context, *CreateTopMostRequest) (*CreateTopMostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTopMost not implemented")
}
func (UnimplementedGatewayServer) CreateNTopMost(context.Context, *CreateNTopMostRequest) (*CreateNTopMostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNTopMost not implemented")
}
func (UnimplementedGatewayServer) GetTopMosts(context.Context, *GetTopMostsRequest) (*GetTopMostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopMosts not implemented")
}
func (UnimplementedGatewayServer) GetNTopMosts(context.Context, *GetNTopMostsRequest) (*GetNTopMostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNTopMosts not implemented")
}
func (UnimplementedGatewayServer) DeleteTopMost(context.Context, *DeleteTopMostRequest) (*DeleteTopMostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTopMost not implemented")
}
func (UnimplementedGatewayServer) UpdateTopMost(context.Context, *UpdateTopMostRequest) (*UpdateTopMostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTopMost not implemented")
}
func (UnimplementedGatewayServer) UpdateNTopMost(context.Context, *UpdateNTopMostRequest) (*UpdateNTopMostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNTopMost not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_CreateTopMost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTopMostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateTopMost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_CreateTopMost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateTopMost(ctx, req.(*CreateTopMostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_CreateNTopMost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNTopMostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateNTopMost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_CreateNTopMost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateNTopMost(ctx, req.(*CreateNTopMostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetTopMosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopMostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetTopMosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetTopMosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetTopMosts(ctx, req.(*GetTopMostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetNTopMosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNTopMostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetNTopMosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetNTopMosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetNTopMosts(ctx, req.(*GetNTopMostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_DeleteTopMost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTopMostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).DeleteTopMost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_DeleteTopMost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).DeleteTopMost(ctx, req.(*DeleteTopMostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdateTopMost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTopMostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateTopMost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_UpdateTopMost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateTopMost(ctx, req.(*UpdateTopMostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdateNTopMost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNTopMostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateNTopMost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_UpdateNTopMost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateNTopMost(ctx, req.(*UpdateNTopMostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "good.gateway.app.good1.topmost.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTopMost",
			Handler:    _Gateway_CreateTopMost_Handler,
		},
		{
			MethodName: "CreateNTopMost",
			Handler:    _Gateway_CreateNTopMost_Handler,
		},
		{
			MethodName: "GetTopMosts",
			Handler:    _Gateway_GetTopMosts_Handler,
		},
		{
			MethodName: "GetNTopMosts",
			Handler:    _Gateway_GetNTopMosts_Handler,
		},
		{
			MethodName: "DeleteTopMost",
			Handler:    _Gateway_DeleteTopMost_Handler,
		},
		{
			MethodName: "UpdateTopMost",
			Handler:    _Gateway_UpdateTopMost_Handler,
		},
		{
			MethodName: "UpdateNTopMost",
			Handler:    _Gateway_UpdateNTopMost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/good/gw/v1/app/good/topmost/topmost.proto",
}
