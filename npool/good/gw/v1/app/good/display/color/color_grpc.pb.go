// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/good/gw/v1/app/good/display/color/color.proto

package color

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	CreateDisplayColor(ctx context.Context, in *CreateDisplayColorRequest, opts ...grpc.CallOption) (*CreateDisplayColorResponse, error)
	UpdateDisplayColor(ctx context.Context, in *UpdateDisplayColorRequest, opts ...grpc.CallOption) (*UpdateDisplayColorResponse, error)
	GetDisplayColors(ctx context.Context, in *GetDisplayColorsRequest, opts ...grpc.CallOption) (*GetDisplayColorsResponse, error)
	DeleteDisplayColor(ctx context.Context, in *DeleteDisplayColorRequest, opts ...grpc.CallOption) (*DeleteDisplayColorResponse, error)
	// Run by admin
	AdminCreateDisplayColor(ctx context.Context, in *AdminCreateDisplayColorRequest, opts ...grpc.CallOption) (*AdminCreateDisplayColorResponse, error)
	AdminUpdateDisplayColor(ctx context.Context, in *AdminUpdateDisplayColorRequest, opts ...grpc.CallOption) (*AdminUpdateDisplayColorResponse, error)
	AdminGetDisplayColors(ctx context.Context, in *AdminGetDisplayColorsRequest, opts ...grpc.CallOption) (*AdminGetDisplayColorsResponse, error)
	AdminDeleteDisplayColor(ctx context.Context, in *AdminDeleteDisplayColorRequest, opts ...grpc.CallOption) (*AdminDeleteDisplayColorResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) CreateDisplayColor(ctx context.Context, in *CreateDisplayColorRequest, opts ...grpc.CallOption) (*CreateDisplayColorResponse, error) {
	out := new(CreateDisplayColorResponse)
	err := c.cc.Invoke(ctx, "/good.gateway.app.good1.display.color.v1.Gateway/CreateDisplayColor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdateDisplayColor(ctx context.Context, in *UpdateDisplayColorRequest, opts ...grpc.CallOption) (*UpdateDisplayColorResponse, error) {
	out := new(UpdateDisplayColorResponse)
	err := c.cc.Invoke(ctx, "/good.gateway.app.good1.display.color.v1.Gateway/UpdateDisplayColor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetDisplayColors(ctx context.Context, in *GetDisplayColorsRequest, opts ...grpc.CallOption) (*GetDisplayColorsResponse, error) {
	out := new(GetDisplayColorsResponse)
	err := c.cc.Invoke(ctx, "/good.gateway.app.good1.display.color.v1.Gateway/GetDisplayColors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) DeleteDisplayColor(ctx context.Context, in *DeleteDisplayColorRequest, opts ...grpc.CallOption) (*DeleteDisplayColorResponse, error) {
	out := new(DeleteDisplayColorResponse)
	err := c.cc.Invoke(ctx, "/good.gateway.app.good1.display.color.v1.Gateway/DeleteDisplayColor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminCreateDisplayColor(ctx context.Context, in *AdminCreateDisplayColorRequest, opts ...grpc.CallOption) (*AdminCreateDisplayColorResponse, error) {
	out := new(AdminCreateDisplayColorResponse)
	err := c.cc.Invoke(ctx, "/good.gateway.app.good1.display.color.v1.Gateway/AdminCreateDisplayColor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminUpdateDisplayColor(ctx context.Context, in *AdminUpdateDisplayColorRequest, opts ...grpc.CallOption) (*AdminUpdateDisplayColorResponse, error) {
	out := new(AdminUpdateDisplayColorResponse)
	err := c.cc.Invoke(ctx, "/good.gateway.app.good1.display.color.v1.Gateway/AdminUpdateDisplayColor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminGetDisplayColors(ctx context.Context, in *AdminGetDisplayColorsRequest, opts ...grpc.CallOption) (*AdminGetDisplayColorsResponse, error) {
	out := new(AdminGetDisplayColorsResponse)
	err := c.cc.Invoke(ctx, "/good.gateway.app.good1.display.color.v1.Gateway/AdminGetDisplayColors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminDeleteDisplayColor(ctx context.Context, in *AdminDeleteDisplayColorRequest, opts ...grpc.CallOption) (*AdminDeleteDisplayColorResponse, error) {
	out := new(AdminDeleteDisplayColorResponse)
	err := c.cc.Invoke(ctx, "/good.gateway.app.good1.display.color.v1.Gateway/AdminDeleteDisplayColor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	CreateDisplayColor(context.Context, *CreateDisplayColorRequest) (*CreateDisplayColorResponse, error)
	UpdateDisplayColor(context.Context, *UpdateDisplayColorRequest) (*UpdateDisplayColorResponse, error)
	GetDisplayColors(context.Context, *GetDisplayColorsRequest) (*GetDisplayColorsResponse, error)
	DeleteDisplayColor(context.Context, *DeleteDisplayColorRequest) (*DeleteDisplayColorResponse, error)
	// Run by admin
	AdminCreateDisplayColor(context.Context, *AdminCreateDisplayColorRequest) (*AdminCreateDisplayColorResponse, error)
	AdminUpdateDisplayColor(context.Context, *AdminUpdateDisplayColorRequest) (*AdminUpdateDisplayColorResponse, error)
	AdminGetDisplayColors(context.Context, *AdminGetDisplayColorsRequest) (*AdminGetDisplayColorsResponse, error)
	AdminDeleteDisplayColor(context.Context, *AdminDeleteDisplayColorRequest) (*AdminDeleteDisplayColorResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) CreateDisplayColor(context.Context, *CreateDisplayColorRequest) (*CreateDisplayColorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDisplayColor not implemented")
}
func (UnimplementedGatewayServer) UpdateDisplayColor(context.Context, *UpdateDisplayColorRequest) (*UpdateDisplayColorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDisplayColor not implemented")
}
func (UnimplementedGatewayServer) GetDisplayColors(context.Context, *GetDisplayColorsRequest) (*GetDisplayColorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDisplayColors not implemented")
}
func (UnimplementedGatewayServer) DeleteDisplayColor(context.Context, *DeleteDisplayColorRequest) (*DeleteDisplayColorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDisplayColor not implemented")
}
func (UnimplementedGatewayServer) AdminCreateDisplayColor(context.Context, *AdminCreateDisplayColorRequest) (*AdminCreateDisplayColorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCreateDisplayColor not implemented")
}
func (UnimplementedGatewayServer) AdminUpdateDisplayColor(context.Context, *AdminUpdateDisplayColorRequest) (*AdminUpdateDisplayColorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateDisplayColor not implemented")
}
func (UnimplementedGatewayServer) AdminGetDisplayColors(context.Context, *AdminGetDisplayColorsRequest) (*AdminGetDisplayColorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetDisplayColors not implemented")
}
func (UnimplementedGatewayServer) AdminDeleteDisplayColor(context.Context, *AdminDeleteDisplayColorRequest) (*AdminDeleteDisplayColorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDeleteDisplayColor not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_CreateDisplayColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDisplayColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateDisplayColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.gateway.app.good1.display.color.v1.Gateway/CreateDisplayColor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateDisplayColor(ctx, req.(*CreateDisplayColorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdateDisplayColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDisplayColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateDisplayColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.gateway.app.good1.display.color.v1.Gateway/UpdateDisplayColor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateDisplayColor(ctx, req.(*UpdateDisplayColorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetDisplayColors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDisplayColorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetDisplayColors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.gateway.app.good1.display.color.v1.Gateway/GetDisplayColors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetDisplayColors(ctx, req.(*GetDisplayColorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_DeleteDisplayColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDisplayColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).DeleteDisplayColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.gateway.app.good1.display.color.v1.Gateway/DeleteDisplayColor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).DeleteDisplayColor(ctx, req.(*DeleteDisplayColorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminCreateDisplayColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCreateDisplayColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminCreateDisplayColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.gateway.app.good1.display.color.v1.Gateway/AdminCreateDisplayColor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminCreateDisplayColor(ctx, req.(*AdminCreateDisplayColorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminUpdateDisplayColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateDisplayColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminUpdateDisplayColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.gateway.app.good1.display.color.v1.Gateway/AdminUpdateDisplayColor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminUpdateDisplayColor(ctx, req.(*AdminUpdateDisplayColorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminGetDisplayColors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetDisplayColorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminGetDisplayColors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.gateway.app.good1.display.color.v1.Gateway/AdminGetDisplayColors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminGetDisplayColors(ctx, req.(*AdminGetDisplayColorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminDeleteDisplayColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDeleteDisplayColorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminDeleteDisplayColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.gateway.app.good1.display.color.v1.Gateway/AdminDeleteDisplayColor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminDeleteDisplayColor(ctx, req.(*AdminDeleteDisplayColorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "good.gateway.app.good1.display.color.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDisplayColor",
			Handler:    _Gateway_CreateDisplayColor_Handler,
		},
		{
			MethodName: "UpdateDisplayColor",
			Handler:    _Gateway_UpdateDisplayColor_Handler,
		},
		{
			MethodName: "GetDisplayColors",
			Handler:    _Gateway_GetDisplayColors_Handler,
		},
		{
			MethodName: "DeleteDisplayColor",
			Handler:    _Gateway_DeleteDisplayColor_Handler,
		},
		{
			MethodName: "AdminCreateDisplayColor",
			Handler:    _Gateway_AdminCreateDisplayColor_Handler,
		},
		{
			MethodName: "AdminUpdateDisplayColor",
			Handler:    _Gateway_AdminUpdateDisplayColor_Handler,
		},
		{
			MethodName: "AdminGetDisplayColors",
			Handler:    _Gateway_AdminGetDisplayColors_Handler,
		},
		{
			MethodName: "AdminDeleteDisplayColor",
			Handler:    _Gateway_AdminDeleteDisplayColor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/good/gw/v1/app/good/display/color/color.proto",
}
