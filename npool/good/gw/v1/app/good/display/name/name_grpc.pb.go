// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/good/gw/v1/app/good/display/name/name.proto

package name

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gateway_CreateDisplayName_FullMethodName      = "/good.gateway.app.good1.display.name.v1.Gateway/CreateDisplayName"
	Gateway_UpdateDisplayName_FullMethodName      = "/good.gateway.app.good1.display.name.v1.Gateway/UpdateDisplayName"
	Gateway_GetDisplayNames_FullMethodName        = "/good.gateway.app.good1.display.name.v1.Gateway/GetDisplayNames"
	Gateway_DeleteDisplayName_FullMethodName      = "/good.gateway.app.good1.display.name.v1.Gateway/DeleteDisplayName"
	Gateway_AdminCreateDisplayName_FullMethodName = "/good.gateway.app.good1.display.name.v1.Gateway/AdminCreateDisplayName"
	Gateway_AdminUpdateDisplayName_FullMethodName = "/good.gateway.app.good1.display.name.v1.Gateway/AdminUpdateDisplayName"
	Gateway_AdminGetDisplayNames_FullMethodName   = "/good.gateway.app.good1.display.name.v1.Gateway/AdminGetDisplayNames"
	Gateway_AdminDeleteDisplayName_FullMethodName = "/good.gateway.app.good1.display.name.v1.Gateway/AdminDeleteDisplayName"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	CreateDisplayName(ctx context.Context, in *CreateDisplayNameRequest, opts ...grpc.CallOption) (*CreateDisplayNameResponse, error)
	UpdateDisplayName(ctx context.Context, in *UpdateDisplayNameRequest, opts ...grpc.CallOption) (*UpdateDisplayNameResponse, error)
	GetDisplayNames(ctx context.Context, in *GetDisplayNamesRequest, opts ...grpc.CallOption) (*GetDisplayNamesResponse, error)
	DeleteDisplayName(ctx context.Context, in *DeleteDisplayNameRequest, opts ...grpc.CallOption) (*DeleteDisplayNameResponse, error)
	// Run by admin
	AdminCreateDisplayName(ctx context.Context, in *AdminCreateDisplayNameRequest, opts ...grpc.CallOption) (*AdminCreateDisplayNameResponse, error)
	AdminUpdateDisplayName(ctx context.Context, in *AdminUpdateDisplayNameRequest, opts ...grpc.CallOption) (*AdminUpdateDisplayNameResponse, error)
	AdminGetDisplayNames(ctx context.Context, in *AdminGetDisplayNamesRequest, opts ...grpc.CallOption) (*AdminGetDisplayNamesResponse, error)
	AdminDeleteDisplayName(ctx context.Context, in *AdminDeleteDisplayNameRequest, opts ...grpc.CallOption) (*AdminDeleteDisplayNameResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) CreateDisplayName(ctx context.Context, in *CreateDisplayNameRequest, opts ...grpc.CallOption) (*CreateDisplayNameResponse, error) {
	out := new(CreateDisplayNameResponse)
	err := c.cc.Invoke(ctx, Gateway_CreateDisplayName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdateDisplayName(ctx context.Context, in *UpdateDisplayNameRequest, opts ...grpc.CallOption) (*UpdateDisplayNameResponse, error) {
	out := new(UpdateDisplayNameResponse)
	err := c.cc.Invoke(ctx, Gateway_UpdateDisplayName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetDisplayNames(ctx context.Context, in *GetDisplayNamesRequest, opts ...grpc.CallOption) (*GetDisplayNamesResponse, error) {
	out := new(GetDisplayNamesResponse)
	err := c.cc.Invoke(ctx, Gateway_GetDisplayNames_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) DeleteDisplayName(ctx context.Context, in *DeleteDisplayNameRequest, opts ...grpc.CallOption) (*DeleteDisplayNameResponse, error) {
	out := new(DeleteDisplayNameResponse)
	err := c.cc.Invoke(ctx, Gateway_DeleteDisplayName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminCreateDisplayName(ctx context.Context, in *AdminCreateDisplayNameRequest, opts ...grpc.CallOption) (*AdminCreateDisplayNameResponse, error) {
	out := new(AdminCreateDisplayNameResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminCreateDisplayName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminUpdateDisplayName(ctx context.Context, in *AdminUpdateDisplayNameRequest, opts ...grpc.CallOption) (*AdminUpdateDisplayNameResponse, error) {
	out := new(AdminUpdateDisplayNameResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminUpdateDisplayName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminGetDisplayNames(ctx context.Context, in *AdminGetDisplayNamesRequest, opts ...grpc.CallOption) (*AdminGetDisplayNamesResponse, error) {
	out := new(AdminGetDisplayNamesResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminGetDisplayNames_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminDeleteDisplayName(ctx context.Context, in *AdminDeleteDisplayNameRequest, opts ...grpc.CallOption) (*AdminDeleteDisplayNameResponse, error) {
	out := new(AdminDeleteDisplayNameResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminDeleteDisplayName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	CreateDisplayName(context.Context, *CreateDisplayNameRequest) (*CreateDisplayNameResponse, error)
	UpdateDisplayName(context.Context, *UpdateDisplayNameRequest) (*UpdateDisplayNameResponse, error)
	GetDisplayNames(context.Context, *GetDisplayNamesRequest) (*GetDisplayNamesResponse, error)
	DeleteDisplayName(context.Context, *DeleteDisplayNameRequest) (*DeleteDisplayNameResponse, error)
	// Run by admin
	AdminCreateDisplayName(context.Context, *AdminCreateDisplayNameRequest) (*AdminCreateDisplayNameResponse, error)
	AdminUpdateDisplayName(context.Context, *AdminUpdateDisplayNameRequest) (*AdminUpdateDisplayNameResponse, error)
	AdminGetDisplayNames(context.Context, *AdminGetDisplayNamesRequest) (*AdminGetDisplayNamesResponse, error)
	AdminDeleteDisplayName(context.Context, *AdminDeleteDisplayNameRequest) (*AdminDeleteDisplayNameResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) CreateDisplayName(context.Context, *CreateDisplayNameRequest) (*CreateDisplayNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDisplayName not implemented")
}
func (UnimplementedGatewayServer) UpdateDisplayName(context.Context, *UpdateDisplayNameRequest) (*UpdateDisplayNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDisplayName not implemented")
}
func (UnimplementedGatewayServer) GetDisplayNames(context.Context, *GetDisplayNamesRequest) (*GetDisplayNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDisplayNames not implemented")
}
func (UnimplementedGatewayServer) DeleteDisplayName(context.Context, *DeleteDisplayNameRequest) (*DeleteDisplayNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDisplayName not implemented")
}
func (UnimplementedGatewayServer) AdminCreateDisplayName(context.Context, *AdminCreateDisplayNameRequest) (*AdminCreateDisplayNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCreateDisplayName not implemented")
}
func (UnimplementedGatewayServer) AdminUpdateDisplayName(context.Context, *AdminUpdateDisplayNameRequest) (*AdminUpdateDisplayNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateDisplayName not implemented")
}
func (UnimplementedGatewayServer) AdminGetDisplayNames(context.Context, *AdminGetDisplayNamesRequest) (*AdminGetDisplayNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetDisplayNames not implemented")
}
func (UnimplementedGatewayServer) AdminDeleteDisplayName(context.Context, *AdminDeleteDisplayNameRequest) (*AdminDeleteDisplayNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDeleteDisplayName not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_CreateDisplayName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDisplayNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateDisplayName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_CreateDisplayName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateDisplayName(ctx, req.(*CreateDisplayNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdateDisplayName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDisplayNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateDisplayName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_UpdateDisplayName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateDisplayName(ctx, req.(*UpdateDisplayNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetDisplayNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDisplayNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetDisplayNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetDisplayNames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetDisplayNames(ctx, req.(*GetDisplayNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_DeleteDisplayName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDisplayNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).DeleteDisplayName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_DeleteDisplayName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).DeleteDisplayName(ctx, req.(*DeleteDisplayNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminCreateDisplayName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCreateDisplayNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminCreateDisplayName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminCreateDisplayName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminCreateDisplayName(ctx, req.(*AdminCreateDisplayNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminUpdateDisplayName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateDisplayNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminUpdateDisplayName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminUpdateDisplayName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminUpdateDisplayName(ctx, req.(*AdminUpdateDisplayNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminGetDisplayNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetDisplayNamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminGetDisplayNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminGetDisplayNames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminGetDisplayNames(ctx, req.(*AdminGetDisplayNamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminDeleteDisplayName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDeleteDisplayNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminDeleteDisplayName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminDeleteDisplayName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminDeleteDisplayName(ctx, req.(*AdminDeleteDisplayNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "good.gateway.app.good1.display.name.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDisplayName",
			Handler:    _Gateway_CreateDisplayName_Handler,
		},
		{
			MethodName: "UpdateDisplayName",
			Handler:    _Gateway_UpdateDisplayName_Handler,
		},
		{
			MethodName: "GetDisplayNames",
			Handler:    _Gateway_GetDisplayNames_Handler,
		},
		{
			MethodName: "DeleteDisplayName",
			Handler:    _Gateway_DeleteDisplayName_Handler,
		},
		{
			MethodName: "AdminCreateDisplayName",
			Handler:    _Gateway_AdminCreateDisplayName_Handler,
		},
		{
			MethodName: "AdminUpdateDisplayName",
			Handler:    _Gateway_AdminUpdateDisplayName_Handler,
		},
		{
			MethodName: "AdminGetDisplayNames",
			Handler:    _Gateway_AdminGetDisplayNames_Handler,
		},
		{
			MethodName: "AdminDeleteDisplayName",
			Handler:    _Gateway_AdminDeleteDisplayName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/good/gw/v1/app/good/display/name/name.proto",
}
