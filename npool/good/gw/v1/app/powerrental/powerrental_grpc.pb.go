// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/good/gw/v1/app/powerrental/powerrental.proto

package powerrental

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	UpdateAppPowerRental(ctx context.Context, in *UpdateAppPowerRentalRequest, opts ...grpc.CallOption) (*UpdateAppPowerRentalResponse, error)
	GetAppPowerRental(ctx context.Context, in *GetAppPowerRentalRequest, opts ...grpc.CallOption) (*GetAppPowerRentalResponse, error)
	GetAppPowerRentals(ctx context.Context, in *GetAppPowerRentalsRequest, opts ...grpc.CallOption) (*GetAppPowerRentalsResponse, error)
	// Run by church admin
	AdminCreateAppPowerRental(ctx context.Context, in *AdminCreateAppPowerRentalRequest, opts ...grpc.CallOption) (*AdminCreateAppPowerRentalResponse, error)
	AdminUpdateAppPowerRental(ctx context.Context, in *AdminUpdateAppPowerRentalRequest, opts ...grpc.CallOption) (*AdminUpdateAppPowerRentalResponse, error)
	AdminGetAppPowerRentals(ctx context.Context, in *AdminGetAppPowerRentalsRequest, opts ...grpc.CallOption) (*AdminGetAppPowerRentalsResponse, error)
	AdminDeleteAppPowerRental(ctx context.Context, in *AdminDeleteAppPowerRentalRequest, opts ...grpc.CallOption) (*AdminDeleteAppPowerRentalResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) UpdateAppPowerRental(ctx context.Context, in *UpdateAppPowerRentalRequest, opts ...grpc.CallOption) (*UpdateAppPowerRentalResponse, error) {
	out := new(UpdateAppPowerRentalResponse)
	err := c.cc.Invoke(ctx, "/good.gateway.app.powerrental.v1.Gateway/UpdateAppPowerRental", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetAppPowerRental(ctx context.Context, in *GetAppPowerRentalRequest, opts ...grpc.CallOption) (*GetAppPowerRentalResponse, error) {
	out := new(GetAppPowerRentalResponse)
	err := c.cc.Invoke(ctx, "/good.gateway.app.powerrental.v1.Gateway/GetAppPowerRental", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetAppPowerRentals(ctx context.Context, in *GetAppPowerRentalsRequest, opts ...grpc.CallOption) (*GetAppPowerRentalsResponse, error) {
	out := new(GetAppPowerRentalsResponse)
	err := c.cc.Invoke(ctx, "/good.gateway.app.powerrental.v1.Gateway/GetAppPowerRentals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminCreateAppPowerRental(ctx context.Context, in *AdminCreateAppPowerRentalRequest, opts ...grpc.CallOption) (*AdminCreateAppPowerRentalResponse, error) {
	out := new(AdminCreateAppPowerRentalResponse)
	err := c.cc.Invoke(ctx, "/good.gateway.app.powerrental.v1.Gateway/AdminCreateAppPowerRental", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminUpdateAppPowerRental(ctx context.Context, in *AdminUpdateAppPowerRentalRequest, opts ...grpc.CallOption) (*AdminUpdateAppPowerRentalResponse, error) {
	out := new(AdminUpdateAppPowerRentalResponse)
	err := c.cc.Invoke(ctx, "/good.gateway.app.powerrental.v1.Gateway/AdminUpdateAppPowerRental", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminGetAppPowerRentals(ctx context.Context, in *AdminGetAppPowerRentalsRequest, opts ...grpc.CallOption) (*AdminGetAppPowerRentalsResponse, error) {
	out := new(AdminGetAppPowerRentalsResponse)
	err := c.cc.Invoke(ctx, "/good.gateway.app.powerrental.v1.Gateway/AdminGetAppPowerRentals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminDeleteAppPowerRental(ctx context.Context, in *AdminDeleteAppPowerRentalRequest, opts ...grpc.CallOption) (*AdminDeleteAppPowerRentalResponse, error) {
	out := new(AdminDeleteAppPowerRentalResponse)
	err := c.cc.Invoke(ctx, "/good.gateway.app.powerrental.v1.Gateway/AdminDeleteAppPowerRental", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	UpdateAppPowerRental(context.Context, *UpdateAppPowerRentalRequest) (*UpdateAppPowerRentalResponse, error)
	GetAppPowerRental(context.Context, *GetAppPowerRentalRequest) (*GetAppPowerRentalResponse, error)
	GetAppPowerRentals(context.Context, *GetAppPowerRentalsRequest) (*GetAppPowerRentalsResponse, error)
	// Run by church admin
	AdminCreateAppPowerRental(context.Context, *AdminCreateAppPowerRentalRequest) (*AdminCreateAppPowerRentalResponse, error)
	AdminUpdateAppPowerRental(context.Context, *AdminUpdateAppPowerRentalRequest) (*AdminUpdateAppPowerRentalResponse, error)
	AdminGetAppPowerRentals(context.Context, *AdminGetAppPowerRentalsRequest) (*AdminGetAppPowerRentalsResponse, error)
	AdminDeleteAppPowerRental(context.Context, *AdminDeleteAppPowerRentalRequest) (*AdminDeleteAppPowerRentalResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) UpdateAppPowerRental(context.Context, *UpdateAppPowerRentalRequest) (*UpdateAppPowerRentalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppPowerRental not implemented")
}
func (UnimplementedGatewayServer) GetAppPowerRental(context.Context, *GetAppPowerRentalRequest) (*GetAppPowerRentalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppPowerRental not implemented")
}
func (UnimplementedGatewayServer) GetAppPowerRentals(context.Context, *GetAppPowerRentalsRequest) (*GetAppPowerRentalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppPowerRentals not implemented")
}
func (UnimplementedGatewayServer) AdminCreateAppPowerRental(context.Context, *AdminCreateAppPowerRentalRequest) (*AdminCreateAppPowerRentalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCreateAppPowerRental not implemented")
}
func (UnimplementedGatewayServer) AdminUpdateAppPowerRental(context.Context, *AdminUpdateAppPowerRentalRequest) (*AdminUpdateAppPowerRentalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateAppPowerRental not implemented")
}
func (UnimplementedGatewayServer) AdminGetAppPowerRentals(context.Context, *AdminGetAppPowerRentalsRequest) (*AdminGetAppPowerRentalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetAppPowerRentals not implemented")
}
func (UnimplementedGatewayServer) AdminDeleteAppPowerRental(context.Context, *AdminDeleteAppPowerRentalRequest) (*AdminDeleteAppPowerRentalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDeleteAppPowerRental not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_UpdateAppPowerRental_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppPowerRentalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateAppPowerRental(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.gateway.app.powerrental.v1.Gateway/UpdateAppPowerRental",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateAppPowerRental(ctx, req.(*UpdateAppPowerRentalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetAppPowerRental_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppPowerRentalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetAppPowerRental(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.gateway.app.powerrental.v1.Gateway/GetAppPowerRental",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetAppPowerRental(ctx, req.(*GetAppPowerRentalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetAppPowerRentals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppPowerRentalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetAppPowerRentals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.gateway.app.powerrental.v1.Gateway/GetAppPowerRentals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetAppPowerRentals(ctx, req.(*GetAppPowerRentalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminCreateAppPowerRental_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCreateAppPowerRentalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminCreateAppPowerRental(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.gateway.app.powerrental.v1.Gateway/AdminCreateAppPowerRental",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminCreateAppPowerRental(ctx, req.(*AdminCreateAppPowerRentalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminUpdateAppPowerRental_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateAppPowerRentalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminUpdateAppPowerRental(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.gateway.app.powerrental.v1.Gateway/AdminUpdateAppPowerRental",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminUpdateAppPowerRental(ctx, req.(*AdminUpdateAppPowerRentalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminGetAppPowerRentals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetAppPowerRentalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminGetAppPowerRentals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.gateway.app.powerrental.v1.Gateway/AdminGetAppPowerRentals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminGetAppPowerRentals(ctx, req.(*AdminGetAppPowerRentalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminDeleteAppPowerRental_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDeleteAppPowerRentalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminDeleteAppPowerRental(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.gateway.app.powerrental.v1.Gateway/AdminDeleteAppPowerRental",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminDeleteAppPowerRental(ctx, req.(*AdminDeleteAppPowerRentalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "good.gateway.app.powerrental.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateAppPowerRental",
			Handler:    _Gateway_UpdateAppPowerRental_Handler,
		},
		{
			MethodName: "GetAppPowerRental",
			Handler:    _Gateway_GetAppPowerRental_Handler,
		},
		{
			MethodName: "GetAppPowerRentals",
			Handler:    _Gateway_GetAppPowerRentals_Handler,
		},
		{
			MethodName: "AdminCreateAppPowerRental",
			Handler:    _Gateway_AdminCreateAppPowerRental_Handler,
		},
		{
			MethodName: "AdminUpdateAppPowerRental",
			Handler:    _Gateway_AdminUpdateAppPowerRental_Handler,
		},
		{
			MethodName: "AdminGetAppPowerRentals",
			Handler:    _Gateway_AdminGetAppPowerRentals_Handler,
		},
		{
			MethodName: "AdminDeleteAppPowerRental",
			Handler:    _Gateway_AdminDeleteAppPowerRental_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/good/gw/v1/app/powerrental/powerrental.proto",
}
