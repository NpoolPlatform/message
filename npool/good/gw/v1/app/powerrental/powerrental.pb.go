// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.18.1
// source: npool/good/gw/v1/app/powerrental/powerrental.proto

package powerrental

import (
	v1 "github.com/NpoolPlatform/message/npool/basetypes/good/v1"
	coin "github.com/NpoolPlatform/message/npool/good/gw/v1/good/coin"
	reward "github.com/NpoolPlatform/message/npool/good/gw/v1/good/coin/reward"
	description "github.com/NpoolPlatform/message/npool/good/mw/v1/app/good/description"
	color "github.com/NpoolPlatform/message/npool/good/mw/v1/app/good/display/color"
	name "github.com/NpoolPlatform/message/npool/good/mw/v1/app/good/display/name"
	label "github.com/NpoolPlatform/message/npool/good/mw/v1/app/good/label"
	poster "github.com/NpoolPlatform/message/npool/good/mw/v1/app/good/poster"
	required "github.com/NpoolPlatform/message/npool/good/mw/v1/app/good/required"
	mining "github.com/NpoolPlatform/message/npool/good/mw/v1/app/good/stock/mining"
	stock "github.com/NpoolPlatform/message/npool/good/mw/v1/good/stock"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AppPowerRental struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                           uint32                         `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID                        string                         `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty"`
	AppID                        string                         `protobuf:"bytes,30,opt,name=AppID,proto3" json:"AppID,omitempty"`
	AppName                      string                         `protobuf:"bytes,40,opt,name=AppName,proto3" json:"AppName,omitempty"`
	GoodID                       string                         `protobuf:"bytes,50,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
	AppGoodID                    string                         `protobuf:"bytes,60,opt,name=AppGoodID,proto3" json:"AppGoodID,omitempty"`
	DeviceTypeID                 string                         `protobuf:"bytes,70,opt,name=DeviceTypeID,proto3" json:"DeviceTypeID,omitempty"`
	DeviceType                   string                         `protobuf:"bytes,80,opt,name=DeviceType,proto3" json:"DeviceType,omitempty"`
	DeviceManufacturerName       string                         `protobuf:"bytes,90,opt,name=DeviceManufacturerName,proto3" json:"DeviceManufacturerName,omitempty"`
	DeviceManufacturerLogo       string                         `protobuf:"bytes,100,opt,name=DeviceManufacturerLogo,proto3" json:"DeviceManufacturerLogo,omitempty"`
	DevicePowerConsumption       uint32                         `protobuf:"varint,110,opt,name=DevicePowerConsumption,proto3" json:"DevicePowerConsumption,omitempty"`
	DeviceShipmentAt             uint32                         `protobuf:"varint,120,opt,name=DeviceShipmentAt,proto3" json:"DeviceShipmentAt,omitempty"`
	VendorLocationID             string                         `protobuf:"bytes,130,opt,name=VendorLocationID,proto3" json:"VendorLocationID,omitempty"`
	VendorBrand                  string                         `protobuf:"bytes,140,opt,name=VendorBrand,proto3" json:"VendorBrand,omitempty"`
	VendorLogo                   string                         `protobuf:"bytes,150,opt,name=VendorLogo,proto3" json:"VendorLogo,omitempty"`
	VendorCountry                string                         `protobuf:"bytes,160,opt,name=VendorCountry,proto3" json:"VendorCountry,omitempty"`
	VendorProvince               string                         `protobuf:"bytes,170,opt,name=VendorProvince,proto3" json:"VendorProvince,omitempty"`
	UnitPrice                    string                         `protobuf:"bytes,180,opt,name=UnitPrice,proto3" json:"UnitPrice,omitempty"`
	QuantityUnit                 string                         `protobuf:"bytes,190,opt,name=QuantityUnit,proto3" json:"QuantityUnit,omitempty"`
	QuantityUnitAmount           string                         `protobuf:"bytes,200,opt,name=QuantityUnitAmount,proto3" json:"QuantityUnitAmount,omitempty"`
	DeliveryAt                   uint32                         `protobuf:"varint,210,opt,name=DeliveryAt,proto3" json:"DeliveryAt,omitempty"`
	UnitLockDeposit              string                         `protobuf:"bytes,220,opt,name=UnitLockDeposit,proto3" json:"UnitLockDeposit,omitempty"`
	DurationDisplayType          v1.GoodDurationType            `protobuf:"varint,230,opt,name=DurationDisplayType,proto3,enum=basetypes.good.v1.GoodDurationType" json:"DurationDisplayType,omitempty"`
	GoodType                     v1.GoodType                    `protobuf:"varint,240,opt,name=GoodType,proto3,enum=basetypes.good.v1.GoodType" json:"GoodType,omitempty"`
	BenefitType                  v1.BenefitType                 `protobuf:"varint,250,opt,name=BenefitType,proto3,enum=basetypes.good.v1.BenefitType" json:"BenefitType,omitempty"`
	GoodName                     string                         `protobuf:"bytes,260,opt,name=GoodName,proto3" json:"GoodName,omitempty"`
	ServiceStartAt               uint32                         `protobuf:"varint,270,opt,name=ServiceStartAt,proto3" json:"ServiceStartAt,omitempty"`
	GoodStartMode                v1.GoodStartMode               `protobuf:"varint,280,opt,name=GoodStartMode,proto3,enum=basetypes.good.v1.GoodStartMode" json:"GoodStartMode,omitempty"`
	TestOnly                     bool                           `protobuf:"varint,290,opt,name=TestOnly,proto3" json:"TestOnly,omitempty"`
	BenefitIntervalHours         uint32                         `protobuf:"varint,300,opt,name=BenefitIntervalHours,proto3" json:"BenefitIntervalHours,omitempty"`
	GoodPurchasable              bool                           `protobuf:"varint,310,opt,name=GoodPurchasable,proto3" json:"GoodPurchasable,omitempty"`
	GoodOnline                   bool                           `protobuf:"varint,320,opt,name=GoodOnline,proto3" json:"GoodOnline,omitempty"`
	StockMode                    v1.GoodStockMode               `protobuf:"varint,330,opt,name=StockMode,proto3,enum=basetypes.good.v1.GoodStockMode" json:"StockMode,omitempty"`
	AppGoodPurchasable           bool                           `protobuf:"varint,340,opt,name=AppGoodPurchasable,proto3" json:"AppGoodPurchasable,omitempty"`
	AppGoodOnline                bool                           `protobuf:"varint,350,opt,name=AppGoodOnline,proto3" json:"AppGoodOnline,omitempty"`
	EnableProductPage            bool                           `protobuf:"varint,360,opt,name=EnableProductPage,proto3" json:"EnableProductPage,omitempty"`
	ProductPage                  string                         `protobuf:"bytes,370,opt,name=ProductPage,proto3" json:"ProductPage,omitempty"`
	Visible                      bool                           `protobuf:"varint,380,opt,name=Visible,proto3" json:"Visible,omitempty"`
	AppGoodName                  string                         `protobuf:"bytes,390,opt,name=AppGoodName,proto3" json:"AppGoodName,omitempty"`
	DisplayIndex                 int32                          `protobuf:"varint,400,opt,name=DisplayIndex,proto3" json:"DisplayIndex,omitempty"`
	Banner                       string                         `protobuf:"bytes,410,opt,name=Banner,proto3" json:"Banner,omitempty"`
	CancelMode                   v1.CancelMode                  `protobuf:"varint,420,opt,name=CancelMode,proto3,enum=basetypes.good.v1.CancelMode" json:"CancelMode,omitempty"`
	CancelableBeforeStartSeconds uint32                         `protobuf:"varint,430,opt,name=CancelableBeforeStartSeconds,proto3" json:"CancelableBeforeStartSeconds,omitempty"`
	EnableSetCommission          bool                           `protobuf:"varint,440,opt,name=EnableSetCommission,proto3" json:"EnableSetCommission,omitempty"`
	MinOrderAmount               string                         `protobuf:"bytes,450,opt,name=MinOrderAmount,proto3" json:"MinOrderAmount,omitempty"`
	MaxOrderAmount               string                         `protobuf:"bytes,460,opt,name=MaxOrderAmount,proto3" json:"MaxOrderAmount,omitempty"`
	MaxUserAmount                string                         `protobuf:"bytes,470,opt,name=MaxUserAmount,proto3" json:"MaxUserAmount,omitempty"`
	MinOrderDurationSeconds      uint32                         `protobuf:"varint,480,opt,name=MinOrderDurationSeconds,proto3" json:"MinOrderDurationSeconds,omitempty"`
	MaxOrderDurationSeconds      uint32                         `protobuf:"varint,490,opt,name=MaxOrderDurationSeconds,proto3" json:"MaxOrderDurationSeconds,omitempty"`
	SaleStartAt                  uint32                         `protobuf:"varint,500,opt,name=SaleStartAt,proto3" json:"SaleStartAt,omitempty"`
	SaleEndAt                    uint32                         `protobuf:"varint,510,opt,name=SaleEndAt,proto3" json:"SaleEndAt,omitempty"`
	SaleMode                     v1.GoodSaleMode                `protobuf:"varint,520,opt,name=SaleMode,proto3,enum=basetypes.good.v1.GoodSaleMode" json:"SaleMode,omitempty"`
	FixedDuration                bool                           `protobuf:"varint,530,opt,name=FixedDuration,proto3" json:"FixedDuration,omitempty"`
	PackageWithRequireds         bool                           `protobuf:"varint,540,opt,name=PackageWithRequireds,proto3" json:"PackageWithRequireds,omitempty"`
	TechniqueFeeRatio            *string                        `protobuf:"bytes,550,opt,name=TechniqueFeeRatio,proto3,oneof" json:"TechniqueFeeRatio,omitempty"`
	GoodStockID                  string                         `protobuf:"bytes,560,opt,name=GoodStockID,proto3" json:"GoodStockID,omitempty"`
	GoodTotal                    string                         `protobuf:"bytes,570,opt,name=GoodTotal,proto3" json:"GoodTotal,omitempty"`
	GoodSpotQuantity             string                         `protobuf:"bytes,580,opt,name=GoodSpotQuantity,proto3" json:"GoodSpotQuantity,omitempty"`
	AppGoodStockID               string                         `protobuf:"bytes,590,opt,name=AppGoodStockID,proto3" json:"AppGoodStockID,omitempty"`
	AppGoodReserved              string                         `protobuf:"bytes,600,opt,name=AppGoodReserved,proto3" json:"AppGoodReserved,omitempty"`
	AppGoodSpotQuantity          string                         `protobuf:"bytes,610,opt,name=AppGoodSpotQuantity,proto3" json:"AppGoodSpotQuantity,omitempty"`
	AppGoodLocked                string                         `protobuf:"bytes,620,opt,name=AppGoodLocked,proto3" json:"AppGoodLocked,omitempty"`
	AppGoodInService             string                         `protobuf:"bytes,630,opt,name=AppGoodInService,proto3" json:"AppGoodInService,omitempty"`
	AppGoodWaitStart             string                         `protobuf:"bytes,640,opt,name=AppGoodWaitStart,proto3" json:"AppGoodWaitStart,omitempty"`
	AppGoodSold                  string                         `protobuf:"bytes,650,opt,name=AppGoodSold,proto3" json:"AppGoodSold,omitempty"`
	Likes                        uint32                         `protobuf:"varint,660,opt,name=Likes,proto3" json:"Likes,omitempty"`
	Dislikes                     uint32                         `protobuf:"varint,670,opt,name=Dislikes,proto3" json:"Dislikes,omitempty"`
	Score                        string                         `protobuf:"bytes,680,opt,name=Score,proto3" json:"Score,omitempty"`
	ScoreCount                   uint32                         `protobuf:"varint,690,opt,name=ScoreCount,proto3" json:"ScoreCount,omitempty"`
	RecommendCount               uint32                         `protobuf:"varint,700,opt,name=RecommendCount,proto3" json:"RecommendCount,omitempty"`
	CommentCount                 uint32                         `protobuf:"varint,710,opt,name=CommentCount,proto3" json:"CommentCount,omitempty"`
	LastRewardAt                 uint32                         `protobuf:"varint,720,opt,name=LastRewardAt,proto3" json:"LastRewardAt,omitempty"`
	AppGoodStartMode             v1.GoodStartMode               `protobuf:"varint,730,opt,name=AppGoodStartMode,proto3,enum=basetypes.good.v1.GoodStartMode" json:"AppGoodStartMode,omitempty"`
	GoodCoins                    []*coin.GoodCoinInfo           `protobuf:"bytes,900,rep,name=GoodCoins,proto3" json:"GoodCoins,omitempty"`
	Descriptions                 []*description.DescriptionInfo `protobuf:"bytes,910,rep,name=Descriptions,proto3" json:"Descriptions,omitempty"`
	Posters                      []*poster.PosterInfo           `protobuf:"bytes,920,rep,name=Posters,proto3" json:"Posters,omitempty"`
	DisplayNames                 []*name.DisplayNameInfo        `protobuf:"bytes,930,rep,name=DisplayNames,proto3" json:"DisplayNames,omitempty"`
	DisplayColors                []*color.DisplayColorInfo      `protobuf:"bytes,940,rep,name=DisplayColors,proto3" json:"DisplayColors,omitempty"`
	AppMiningGoodStocks          []*mining.StockInfo            `protobuf:"bytes,950,rep,name=AppMiningGoodStocks,proto3" json:"AppMiningGoodStocks,omitempty"`
	MiningGoodStocks             []*stock.MiningGoodStockInfo   `protobuf:"bytes,960,rep,name=MiningGoodStocks,proto3" json:"MiningGoodStocks,omitempty"`
	Labels                       []*label.LabelInfo             `protobuf:"bytes,970,rep,name=Labels,proto3" json:"Labels,omitempty"`
	Rewards                      []*reward.RewardInfo           `protobuf:"bytes,820,rep,name=Rewards,proto3" json:"Rewards,omitempty"`
	Requireds                    []*required.RequiredInfo       `protobuf:"bytes,830,rep,name=Requireds,proto3" json:"Requireds,omitempty"`
	CreatedAt                    uint32                         `protobuf:"varint,1000,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt                    uint32                         `protobuf:"varint,1010,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (x *AppPowerRental) Reset() {
	*x = AppPowerRental{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_powerrental_powerrental_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppPowerRental) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppPowerRental) ProtoMessage() {}

func (x *AppPowerRental) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_powerrental_powerrental_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppPowerRental.ProtoReflect.Descriptor instead.
func (*AppPowerRental) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_powerrental_powerrental_proto_rawDescGZIP(), []int{0}
}

func (x *AppPowerRental) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *AppPowerRental) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *AppPowerRental) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *AppPowerRental) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *AppPowerRental) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *AppPowerRental) GetAppGoodID() string {
	if x != nil {
		return x.AppGoodID
	}
	return ""
}

func (x *AppPowerRental) GetDeviceTypeID() string {
	if x != nil {
		return x.DeviceTypeID
	}
	return ""
}

func (x *AppPowerRental) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *AppPowerRental) GetDeviceManufacturerName() string {
	if x != nil {
		return x.DeviceManufacturerName
	}
	return ""
}

func (x *AppPowerRental) GetDeviceManufacturerLogo() string {
	if x != nil {
		return x.DeviceManufacturerLogo
	}
	return ""
}

func (x *AppPowerRental) GetDevicePowerConsumption() uint32 {
	if x != nil {
		return x.DevicePowerConsumption
	}
	return 0
}

func (x *AppPowerRental) GetDeviceShipmentAt() uint32 {
	if x != nil {
		return x.DeviceShipmentAt
	}
	return 0
}

func (x *AppPowerRental) GetVendorLocationID() string {
	if x != nil {
		return x.VendorLocationID
	}
	return ""
}

func (x *AppPowerRental) GetVendorBrand() string {
	if x != nil {
		return x.VendorBrand
	}
	return ""
}

func (x *AppPowerRental) GetVendorLogo() string {
	if x != nil {
		return x.VendorLogo
	}
	return ""
}

func (x *AppPowerRental) GetVendorCountry() string {
	if x != nil {
		return x.VendorCountry
	}
	return ""
}

func (x *AppPowerRental) GetVendorProvince() string {
	if x != nil {
		return x.VendorProvince
	}
	return ""
}

func (x *AppPowerRental) GetUnitPrice() string {
	if x != nil {
		return x.UnitPrice
	}
	return ""
}

func (x *AppPowerRental) GetQuantityUnit() string {
	if x != nil {
		return x.QuantityUnit
	}
	return ""
}

func (x *AppPowerRental) GetQuantityUnitAmount() string {
	if x != nil {
		return x.QuantityUnitAmount
	}
	return ""
}

func (x *AppPowerRental) GetDeliveryAt() uint32 {
	if x != nil {
		return x.DeliveryAt
	}
	return 0
}

func (x *AppPowerRental) GetUnitLockDeposit() string {
	if x != nil {
		return x.UnitLockDeposit
	}
	return ""
}

func (x *AppPowerRental) GetDurationDisplayType() v1.GoodDurationType {
	if x != nil {
		return x.DurationDisplayType
	}
	return v1.GoodDurationType(0)
}

func (x *AppPowerRental) GetGoodType() v1.GoodType {
	if x != nil {
		return x.GoodType
	}
	return v1.GoodType(0)
}

func (x *AppPowerRental) GetBenefitType() v1.BenefitType {
	if x != nil {
		return x.BenefitType
	}
	return v1.BenefitType(0)
}

func (x *AppPowerRental) GetGoodName() string {
	if x != nil {
		return x.GoodName
	}
	return ""
}

func (x *AppPowerRental) GetServiceStartAt() uint32 {
	if x != nil {
		return x.ServiceStartAt
	}
	return 0
}

func (x *AppPowerRental) GetGoodStartMode() v1.GoodStartMode {
	if x != nil {
		return x.GoodStartMode
	}
	return v1.GoodStartMode(0)
}

func (x *AppPowerRental) GetTestOnly() bool {
	if x != nil {
		return x.TestOnly
	}
	return false
}

func (x *AppPowerRental) GetBenefitIntervalHours() uint32 {
	if x != nil {
		return x.BenefitIntervalHours
	}
	return 0
}

func (x *AppPowerRental) GetGoodPurchasable() bool {
	if x != nil {
		return x.GoodPurchasable
	}
	return false
}

func (x *AppPowerRental) GetGoodOnline() bool {
	if x != nil {
		return x.GoodOnline
	}
	return false
}

func (x *AppPowerRental) GetStockMode() v1.GoodStockMode {
	if x != nil {
		return x.StockMode
	}
	return v1.GoodStockMode(0)
}

func (x *AppPowerRental) GetAppGoodPurchasable() bool {
	if x != nil {
		return x.AppGoodPurchasable
	}
	return false
}

func (x *AppPowerRental) GetAppGoodOnline() bool {
	if x != nil {
		return x.AppGoodOnline
	}
	return false
}

func (x *AppPowerRental) GetEnableProductPage() bool {
	if x != nil {
		return x.EnableProductPage
	}
	return false
}

func (x *AppPowerRental) GetProductPage() string {
	if x != nil {
		return x.ProductPage
	}
	return ""
}

func (x *AppPowerRental) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

func (x *AppPowerRental) GetAppGoodName() string {
	if x != nil {
		return x.AppGoodName
	}
	return ""
}

func (x *AppPowerRental) GetDisplayIndex() int32 {
	if x != nil {
		return x.DisplayIndex
	}
	return 0
}

func (x *AppPowerRental) GetBanner() string {
	if x != nil {
		return x.Banner
	}
	return ""
}

func (x *AppPowerRental) GetCancelMode() v1.CancelMode {
	if x != nil {
		return x.CancelMode
	}
	return v1.CancelMode(0)
}

func (x *AppPowerRental) GetCancelableBeforeStartSeconds() uint32 {
	if x != nil {
		return x.CancelableBeforeStartSeconds
	}
	return 0
}

func (x *AppPowerRental) GetEnableSetCommission() bool {
	if x != nil {
		return x.EnableSetCommission
	}
	return false
}

func (x *AppPowerRental) GetMinOrderAmount() string {
	if x != nil {
		return x.MinOrderAmount
	}
	return ""
}

func (x *AppPowerRental) GetMaxOrderAmount() string {
	if x != nil {
		return x.MaxOrderAmount
	}
	return ""
}

func (x *AppPowerRental) GetMaxUserAmount() string {
	if x != nil {
		return x.MaxUserAmount
	}
	return ""
}

func (x *AppPowerRental) GetMinOrderDurationSeconds() uint32 {
	if x != nil {
		return x.MinOrderDurationSeconds
	}
	return 0
}

func (x *AppPowerRental) GetMaxOrderDurationSeconds() uint32 {
	if x != nil {
		return x.MaxOrderDurationSeconds
	}
	return 0
}

func (x *AppPowerRental) GetSaleStartAt() uint32 {
	if x != nil {
		return x.SaleStartAt
	}
	return 0
}

func (x *AppPowerRental) GetSaleEndAt() uint32 {
	if x != nil {
		return x.SaleEndAt
	}
	return 0
}

func (x *AppPowerRental) GetSaleMode() v1.GoodSaleMode {
	if x != nil {
		return x.SaleMode
	}
	return v1.GoodSaleMode(0)
}

func (x *AppPowerRental) GetFixedDuration() bool {
	if x != nil {
		return x.FixedDuration
	}
	return false
}

func (x *AppPowerRental) GetPackageWithRequireds() bool {
	if x != nil {
		return x.PackageWithRequireds
	}
	return false
}

func (x *AppPowerRental) GetTechniqueFeeRatio() string {
	if x != nil && x.TechniqueFeeRatio != nil {
		return *x.TechniqueFeeRatio
	}
	return ""
}

func (x *AppPowerRental) GetGoodStockID() string {
	if x != nil {
		return x.GoodStockID
	}
	return ""
}

func (x *AppPowerRental) GetGoodTotal() string {
	if x != nil {
		return x.GoodTotal
	}
	return ""
}

func (x *AppPowerRental) GetGoodSpotQuantity() string {
	if x != nil {
		return x.GoodSpotQuantity
	}
	return ""
}

func (x *AppPowerRental) GetAppGoodStockID() string {
	if x != nil {
		return x.AppGoodStockID
	}
	return ""
}

func (x *AppPowerRental) GetAppGoodReserved() string {
	if x != nil {
		return x.AppGoodReserved
	}
	return ""
}

func (x *AppPowerRental) GetAppGoodSpotQuantity() string {
	if x != nil {
		return x.AppGoodSpotQuantity
	}
	return ""
}

func (x *AppPowerRental) GetAppGoodLocked() string {
	if x != nil {
		return x.AppGoodLocked
	}
	return ""
}

func (x *AppPowerRental) GetAppGoodInService() string {
	if x != nil {
		return x.AppGoodInService
	}
	return ""
}

func (x *AppPowerRental) GetAppGoodWaitStart() string {
	if x != nil {
		return x.AppGoodWaitStart
	}
	return ""
}

func (x *AppPowerRental) GetAppGoodSold() string {
	if x != nil {
		return x.AppGoodSold
	}
	return ""
}

func (x *AppPowerRental) GetLikes() uint32 {
	if x != nil {
		return x.Likes
	}
	return 0
}

func (x *AppPowerRental) GetDislikes() uint32 {
	if x != nil {
		return x.Dislikes
	}
	return 0
}

func (x *AppPowerRental) GetScore() string {
	if x != nil {
		return x.Score
	}
	return ""
}

func (x *AppPowerRental) GetScoreCount() uint32 {
	if x != nil {
		return x.ScoreCount
	}
	return 0
}

func (x *AppPowerRental) GetRecommendCount() uint32 {
	if x != nil {
		return x.RecommendCount
	}
	return 0
}

func (x *AppPowerRental) GetCommentCount() uint32 {
	if x != nil {
		return x.CommentCount
	}
	return 0
}

func (x *AppPowerRental) GetLastRewardAt() uint32 {
	if x != nil {
		return x.LastRewardAt
	}
	return 0
}

func (x *AppPowerRental) GetAppGoodStartMode() v1.GoodStartMode {
	if x != nil {
		return x.AppGoodStartMode
	}
	return v1.GoodStartMode(0)
}

func (x *AppPowerRental) GetGoodCoins() []*coin.GoodCoinInfo {
	if x != nil {
		return x.GoodCoins
	}
	return nil
}

func (x *AppPowerRental) GetDescriptions() []*description.DescriptionInfo {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *AppPowerRental) GetPosters() []*poster.PosterInfo {
	if x != nil {
		return x.Posters
	}
	return nil
}

func (x *AppPowerRental) GetDisplayNames() []*name.DisplayNameInfo {
	if x != nil {
		return x.DisplayNames
	}
	return nil
}

func (x *AppPowerRental) GetDisplayColors() []*color.DisplayColorInfo {
	if x != nil {
		return x.DisplayColors
	}
	return nil
}

func (x *AppPowerRental) GetAppMiningGoodStocks() []*mining.StockInfo {
	if x != nil {
		return x.AppMiningGoodStocks
	}
	return nil
}

func (x *AppPowerRental) GetMiningGoodStocks() []*stock.MiningGoodStockInfo {
	if x != nil {
		return x.MiningGoodStocks
	}
	return nil
}

func (x *AppPowerRental) GetLabels() []*label.LabelInfo {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *AppPowerRental) GetRewards() []*reward.RewardInfo {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *AppPowerRental) GetRequireds() []*required.RequiredInfo {
	if x != nil {
		return x.Requireds
	}
	return nil
}

func (x *AppPowerRental) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *AppPowerRental) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type UpdateAppPowerRentalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                           uint32            `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID                        string            `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty"`
	AppID                        string            `protobuf:"bytes,30,opt,name=AppID,proto3" json:"AppID,omitempty"`
	AppGoodID                    string            `protobuf:"bytes,40,opt,name=AppGoodID,proto3" json:"AppGoodID,omitempty"`
	Purchasable                  *bool             `protobuf:"varint,50,opt,name=Purchasable,proto3,oneof" json:"Purchasable,omitempty"`
	EnableProductPage            *bool             `protobuf:"varint,60,opt,name=EnableProductPage,proto3,oneof" json:"EnableProductPage,omitempty"`
	ProductPage                  *string           `protobuf:"bytes,70,opt,name=ProductPage,proto3,oneof" json:"ProductPage,omitempty"`
	Online                       *bool             `protobuf:"varint,80,opt,name=Online,proto3,oneof" json:"Online,omitempty"`
	Visible                      *bool             `protobuf:"varint,90,opt,name=Visible,proto3,oneof" json:"Visible,omitempty"`
	Name                         *string           `protobuf:"bytes,100,opt,name=Name,proto3,oneof" json:"Name,omitempty"`
	DisplayIndex                 *int32            `protobuf:"varint,110,opt,name=DisplayIndex,proto3,oneof" json:"DisplayIndex,omitempty"`
	Banner                       *string           `protobuf:"bytes,120,opt,name=Banner,proto3,oneof" json:"Banner,omitempty"`
	ServiceStartAt               *uint32           `protobuf:"varint,130,opt,name=ServiceStartAt,proto3,oneof" json:"ServiceStartAt,omitempty"`
	CancelMode                   *v1.CancelMode    `protobuf:"varint,140,opt,name=CancelMode,proto3,enum=basetypes.good.v1.CancelMode,oneof" json:"CancelMode,omitempty"`
	CancelableBeforeStartSeconds *uint32           `protobuf:"varint,150,opt,name=CancelableBeforeStartSeconds,proto3,oneof" json:"CancelableBeforeStartSeconds,omitempty"`
	EnableSetCommission          *bool             `protobuf:"varint,160,opt,name=EnableSetCommission,proto3,oneof" json:"EnableSetCommission,omitempty"`
	MinOrderAmount               *string           `protobuf:"bytes,170,opt,name=MinOrderAmount,proto3,oneof" json:"MinOrderAmount,omitempty"`
	MaxOrderAmount               *string           `protobuf:"bytes,180,opt,name=MaxOrderAmount,proto3,oneof" json:"MaxOrderAmount,omitempty"`
	MaxUserAmount                *string           `protobuf:"bytes,190,opt,name=MaxUserAmount,proto3,oneof" json:"MaxUserAmount,omitempty"`
	MinOrderDurationSeconds      *uint32           `protobuf:"varint,200,opt,name=MinOrderDurationSeconds,proto3,oneof" json:"MinOrderDurationSeconds,omitempty"`
	MaxOrderDurationSeconds      *uint32           `protobuf:"varint,210,opt,name=MaxOrderDurationSeconds,proto3,oneof" json:"MaxOrderDurationSeconds,omitempty"`
	UnitPrice                    *string           `protobuf:"bytes,220,opt,name=UnitPrice,proto3,oneof" json:"UnitPrice,omitempty"`
	SaleStartAt                  *uint32           `protobuf:"varint,230,opt,name=SaleStartAt,proto3,oneof" json:"SaleStartAt,omitempty"`
	SaleEndAt                    *uint32           `protobuf:"varint,240,opt,name=SaleEndAt,proto3,oneof" json:"SaleEndAt,omitempty"`
	SaleMode                     *v1.GoodSaleMode  `protobuf:"varint,250,opt,name=SaleMode,proto3,enum=basetypes.good.v1.GoodSaleMode,oneof" json:"SaleMode,omitempty"`
	FixedDuration                *bool             `protobuf:"varint,260,opt,name=FixedDuration,proto3,oneof" json:"FixedDuration,omitempty"`
	PackageWithRequireds         *bool             `protobuf:"varint,270,opt,name=PackageWithRequireds,proto3,oneof" json:"PackageWithRequireds,omitempty"`
	StartMode                    *v1.GoodStartMode `protobuf:"varint,280,opt,name=StartMode,proto3,enum=basetypes.good.v1.GoodStartMode,oneof" json:"StartMode,omitempty"`
}

func (x *UpdateAppPowerRentalRequest) Reset() {
	*x = UpdateAppPowerRentalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_powerrental_powerrental_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppPowerRentalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppPowerRentalRequest) ProtoMessage() {}

func (x *UpdateAppPowerRentalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_powerrental_powerrental_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppPowerRentalRequest.ProtoReflect.Descriptor instead.
func (*UpdateAppPowerRentalRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_powerrental_powerrental_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateAppPowerRentalRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *UpdateAppPowerRentalRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *UpdateAppPowerRentalRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *UpdateAppPowerRentalRequest) GetAppGoodID() string {
	if x != nil {
		return x.AppGoodID
	}
	return ""
}

func (x *UpdateAppPowerRentalRequest) GetPurchasable() bool {
	if x != nil && x.Purchasable != nil {
		return *x.Purchasable
	}
	return false
}

func (x *UpdateAppPowerRentalRequest) GetEnableProductPage() bool {
	if x != nil && x.EnableProductPage != nil {
		return *x.EnableProductPage
	}
	return false
}

func (x *UpdateAppPowerRentalRequest) GetProductPage() string {
	if x != nil && x.ProductPage != nil {
		return *x.ProductPage
	}
	return ""
}

func (x *UpdateAppPowerRentalRequest) GetOnline() bool {
	if x != nil && x.Online != nil {
		return *x.Online
	}
	return false
}

func (x *UpdateAppPowerRentalRequest) GetVisible() bool {
	if x != nil && x.Visible != nil {
		return *x.Visible
	}
	return false
}

func (x *UpdateAppPowerRentalRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateAppPowerRentalRequest) GetDisplayIndex() int32 {
	if x != nil && x.DisplayIndex != nil {
		return *x.DisplayIndex
	}
	return 0
}

func (x *UpdateAppPowerRentalRequest) GetBanner() string {
	if x != nil && x.Banner != nil {
		return *x.Banner
	}
	return ""
}

func (x *UpdateAppPowerRentalRequest) GetServiceStartAt() uint32 {
	if x != nil && x.ServiceStartAt != nil {
		return *x.ServiceStartAt
	}
	return 0
}

func (x *UpdateAppPowerRentalRequest) GetCancelMode() v1.CancelMode {
	if x != nil && x.CancelMode != nil {
		return *x.CancelMode
	}
	return v1.CancelMode(0)
}

func (x *UpdateAppPowerRentalRequest) GetCancelableBeforeStartSeconds() uint32 {
	if x != nil && x.CancelableBeforeStartSeconds != nil {
		return *x.CancelableBeforeStartSeconds
	}
	return 0
}

func (x *UpdateAppPowerRentalRequest) GetEnableSetCommission() bool {
	if x != nil && x.EnableSetCommission != nil {
		return *x.EnableSetCommission
	}
	return false
}

func (x *UpdateAppPowerRentalRequest) GetMinOrderAmount() string {
	if x != nil && x.MinOrderAmount != nil {
		return *x.MinOrderAmount
	}
	return ""
}

func (x *UpdateAppPowerRentalRequest) GetMaxOrderAmount() string {
	if x != nil && x.MaxOrderAmount != nil {
		return *x.MaxOrderAmount
	}
	return ""
}

func (x *UpdateAppPowerRentalRequest) GetMaxUserAmount() string {
	if x != nil && x.MaxUserAmount != nil {
		return *x.MaxUserAmount
	}
	return ""
}

func (x *UpdateAppPowerRentalRequest) GetMinOrderDurationSeconds() uint32 {
	if x != nil && x.MinOrderDurationSeconds != nil {
		return *x.MinOrderDurationSeconds
	}
	return 0
}

func (x *UpdateAppPowerRentalRequest) GetMaxOrderDurationSeconds() uint32 {
	if x != nil && x.MaxOrderDurationSeconds != nil {
		return *x.MaxOrderDurationSeconds
	}
	return 0
}

func (x *UpdateAppPowerRentalRequest) GetUnitPrice() string {
	if x != nil && x.UnitPrice != nil {
		return *x.UnitPrice
	}
	return ""
}

func (x *UpdateAppPowerRentalRequest) GetSaleStartAt() uint32 {
	if x != nil && x.SaleStartAt != nil {
		return *x.SaleStartAt
	}
	return 0
}

func (x *UpdateAppPowerRentalRequest) GetSaleEndAt() uint32 {
	if x != nil && x.SaleEndAt != nil {
		return *x.SaleEndAt
	}
	return 0
}

func (x *UpdateAppPowerRentalRequest) GetSaleMode() v1.GoodSaleMode {
	if x != nil && x.SaleMode != nil {
		return *x.SaleMode
	}
	return v1.GoodSaleMode(0)
}

func (x *UpdateAppPowerRentalRequest) GetFixedDuration() bool {
	if x != nil && x.FixedDuration != nil {
		return *x.FixedDuration
	}
	return false
}

func (x *UpdateAppPowerRentalRequest) GetPackageWithRequireds() bool {
	if x != nil && x.PackageWithRequireds != nil {
		return *x.PackageWithRequireds
	}
	return false
}

func (x *UpdateAppPowerRentalRequest) GetStartMode() v1.GoodStartMode {
	if x != nil && x.StartMode != nil {
		return *x.StartMode
	}
	return v1.GoodStartMode(0)
}

type UpdateAppPowerRentalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppPowerRental `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateAppPowerRentalResponse) Reset() {
	*x = UpdateAppPowerRentalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_powerrental_powerrental_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppPowerRentalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppPowerRentalResponse) ProtoMessage() {}

func (x *UpdateAppPowerRentalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_powerrental_powerrental_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppPowerRentalResponse.ProtoReflect.Descriptor instead.
func (*UpdateAppPowerRentalResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_powerrental_powerrental_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateAppPowerRentalResponse) GetInfo() *AppPowerRental {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetAppPowerRentalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppGoodID string `protobuf:"bytes,10,opt,name=AppGoodID,proto3" json:"AppGoodID,omitempty"`
}

func (x *GetAppPowerRentalRequest) Reset() {
	*x = GetAppPowerRentalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_powerrental_powerrental_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppPowerRentalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppPowerRentalRequest) ProtoMessage() {}

func (x *GetAppPowerRentalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_powerrental_powerrental_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppPowerRentalRequest.ProtoReflect.Descriptor instead.
func (*GetAppPowerRentalRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_powerrental_powerrental_proto_rawDescGZIP(), []int{3}
}

func (x *GetAppPowerRentalRequest) GetAppGoodID() string {
	if x != nil {
		return x.AppGoodID
	}
	return ""
}

type GetAppPowerRentalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppPowerRental `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetAppPowerRentalResponse) Reset() {
	*x = GetAppPowerRentalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_powerrental_powerrental_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppPowerRentalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppPowerRentalResponse) ProtoMessage() {}

func (x *GetAppPowerRentalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_powerrental_powerrental_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppPowerRentalResponse.ProtoReflect.Descriptor instead.
func (*GetAppPowerRentalResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_powerrental_powerrental_proto_rawDescGZIP(), []int{4}
}

func (x *GetAppPowerRentalResponse) GetInfo() *AppPowerRental {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetAppPowerRentalsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID  string `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetAppPowerRentalsRequest) Reset() {
	*x = GetAppPowerRentalsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_powerrental_powerrental_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppPowerRentalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppPowerRentalsRequest) ProtoMessage() {}

func (x *GetAppPowerRentalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_powerrental_powerrental_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppPowerRentalsRequest.ProtoReflect.Descriptor instead.
func (*GetAppPowerRentalsRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_powerrental_powerrental_proto_rawDescGZIP(), []int{5}
}

func (x *GetAppPowerRentalsRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetAppPowerRentalsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetAppPowerRentalsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetAppPowerRentalsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*AppPowerRental `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32            `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetAppPowerRentalsResponse) Reset() {
	*x = GetAppPowerRentalsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_powerrental_powerrental_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppPowerRentalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppPowerRentalsResponse) ProtoMessage() {}

func (x *GetAppPowerRentalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_powerrental_powerrental_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppPowerRentalsResponse.ProtoReflect.Descriptor instead.
func (*GetAppPowerRentalsResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_powerrental_powerrental_proto_rawDescGZIP(), []int{6}
}

func (x *GetAppPowerRentalsResponse) GetInfos() []*AppPowerRental {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetAppPowerRentalsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type AdminCreateAppPowerRentalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetAppID                  string            `protobuf:"bytes,10,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
	GoodID                       string            `protobuf:"bytes,20,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
	Purchasable                  *bool             `protobuf:"varint,30,opt,name=Purchasable,proto3,oneof" json:"Purchasable,omitempty"`
	EnableProductPage            *bool             `protobuf:"varint,40,opt,name=EnableProductPage,proto3,oneof" json:"EnableProductPage,omitempty"`
	ProductPage                  *string           `protobuf:"bytes,50,opt,name=ProductPage,proto3,oneof" json:"ProductPage,omitempty"`
	Online                       *bool             `protobuf:"varint,60,opt,name=Online,proto3,oneof" json:"Online,omitempty"`
	Visible                      *bool             `protobuf:"varint,70,opt,name=Visible,proto3,oneof" json:"Visible,omitempty"`
	Name                         string            `protobuf:"bytes,80,opt,name=Name,proto3" json:"Name,omitempty"`
	DisplayIndex                 *int32            `protobuf:"varint,90,opt,name=DisplayIndex,proto3,oneof" json:"DisplayIndex,omitempty"`
	Banner                       *string           `protobuf:"bytes,100,opt,name=Banner,proto3,oneof" json:"Banner,omitempty"`
	ServiceStartAt               uint32            `protobuf:"varint,110,opt,name=ServiceStartAt,proto3" json:"ServiceStartAt,omitempty"`
	CancelMode                   *v1.CancelMode    `protobuf:"varint,120,opt,name=CancelMode,proto3,enum=basetypes.good.v1.CancelMode,oneof" json:"CancelMode,omitempty"`
	CancelableBeforeStartSeconds *uint32           `protobuf:"varint,130,opt,name=CancelableBeforeStartSeconds,proto3,oneof" json:"CancelableBeforeStartSeconds,omitempty"`
	EnableSetCommission          *bool             `protobuf:"varint,140,opt,name=EnableSetCommission,proto3,oneof" json:"EnableSetCommission,omitempty"`
	MinOrderAmount               string            `protobuf:"bytes,150,opt,name=MinOrderAmount,proto3" json:"MinOrderAmount,omitempty"`
	MaxOrderAmount               string            `protobuf:"bytes,160,opt,name=MaxOrderAmount,proto3" json:"MaxOrderAmount,omitempty"`
	MaxUserAmount                *string           `protobuf:"bytes,170,opt,name=MaxUserAmount,proto3,oneof" json:"MaxUserAmount,omitempty"`
	MinOrderDurationSeconds      uint32            `protobuf:"varint,180,opt,name=MinOrderDurationSeconds,proto3" json:"MinOrderDurationSeconds,omitempty"`
	MaxOrderDurationSeconds      *uint32           `protobuf:"varint,190,opt,name=MaxOrderDurationSeconds,proto3,oneof" json:"MaxOrderDurationSeconds,omitempty"`
	UnitPrice                    string            `protobuf:"bytes,200,opt,name=UnitPrice,proto3" json:"UnitPrice,omitempty"`
	SaleStartAt                  uint32            `protobuf:"varint,210,opt,name=SaleStartAt,proto3" json:"SaleStartAt,omitempty"`
	SaleEndAt                    uint32            `protobuf:"varint,220,opt,name=SaleEndAt,proto3" json:"SaleEndAt,omitempty"`
	SaleMode                     v1.GoodSaleMode   `protobuf:"varint,230,opt,name=SaleMode,proto3,enum=basetypes.good.v1.GoodSaleMode" json:"SaleMode,omitempty"`
	FixedDuration                *bool             `protobuf:"varint,240,opt,name=FixedDuration,proto3,oneof" json:"FixedDuration,omitempty"`
	PackageWithRequireds         *bool             `protobuf:"varint,250,opt,name=PackageWithRequireds,proto3,oneof" json:"PackageWithRequireds,omitempty"`
	StartMode                    *v1.GoodStartMode `protobuf:"varint,260,opt,name=StartMode,proto3,enum=basetypes.good.v1.GoodStartMode,oneof" json:"StartMode,omitempty"`
}

func (x *AdminCreateAppPowerRentalRequest) Reset() {
	*x = AdminCreateAppPowerRentalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_powerrental_powerrental_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminCreateAppPowerRentalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminCreateAppPowerRentalRequest) ProtoMessage() {}

func (x *AdminCreateAppPowerRentalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_powerrental_powerrental_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminCreateAppPowerRentalRequest.ProtoReflect.Descriptor instead.
func (*AdminCreateAppPowerRentalRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_powerrental_powerrental_proto_rawDescGZIP(), []int{7}
}

func (x *AdminCreateAppPowerRentalRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

func (x *AdminCreateAppPowerRentalRequest) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *AdminCreateAppPowerRentalRequest) GetPurchasable() bool {
	if x != nil && x.Purchasable != nil {
		return *x.Purchasable
	}
	return false
}

func (x *AdminCreateAppPowerRentalRequest) GetEnableProductPage() bool {
	if x != nil && x.EnableProductPage != nil {
		return *x.EnableProductPage
	}
	return false
}

func (x *AdminCreateAppPowerRentalRequest) GetProductPage() string {
	if x != nil && x.ProductPage != nil {
		return *x.ProductPage
	}
	return ""
}

func (x *AdminCreateAppPowerRentalRequest) GetOnline() bool {
	if x != nil && x.Online != nil {
		return *x.Online
	}
	return false
}

func (x *AdminCreateAppPowerRentalRequest) GetVisible() bool {
	if x != nil && x.Visible != nil {
		return *x.Visible
	}
	return false
}

func (x *AdminCreateAppPowerRentalRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AdminCreateAppPowerRentalRequest) GetDisplayIndex() int32 {
	if x != nil && x.DisplayIndex != nil {
		return *x.DisplayIndex
	}
	return 0
}

func (x *AdminCreateAppPowerRentalRequest) GetBanner() string {
	if x != nil && x.Banner != nil {
		return *x.Banner
	}
	return ""
}

func (x *AdminCreateAppPowerRentalRequest) GetServiceStartAt() uint32 {
	if x != nil {
		return x.ServiceStartAt
	}
	return 0
}

func (x *AdminCreateAppPowerRentalRequest) GetCancelMode() v1.CancelMode {
	if x != nil && x.CancelMode != nil {
		return *x.CancelMode
	}
	return v1.CancelMode(0)
}

func (x *AdminCreateAppPowerRentalRequest) GetCancelableBeforeStartSeconds() uint32 {
	if x != nil && x.CancelableBeforeStartSeconds != nil {
		return *x.CancelableBeforeStartSeconds
	}
	return 0
}

func (x *AdminCreateAppPowerRentalRequest) GetEnableSetCommission() bool {
	if x != nil && x.EnableSetCommission != nil {
		return *x.EnableSetCommission
	}
	return false
}

func (x *AdminCreateAppPowerRentalRequest) GetMinOrderAmount() string {
	if x != nil {
		return x.MinOrderAmount
	}
	return ""
}

func (x *AdminCreateAppPowerRentalRequest) GetMaxOrderAmount() string {
	if x != nil {
		return x.MaxOrderAmount
	}
	return ""
}

func (x *AdminCreateAppPowerRentalRequest) GetMaxUserAmount() string {
	if x != nil && x.MaxUserAmount != nil {
		return *x.MaxUserAmount
	}
	return ""
}

func (x *AdminCreateAppPowerRentalRequest) GetMinOrderDurationSeconds() uint32 {
	if x != nil {
		return x.MinOrderDurationSeconds
	}
	return 0
}

func (x *AdminCreateAppPowerRentalRequest) GetMaxOrderDurationSeconds() uint32 {
	if x != nil && x.MaxOrderDurationSeconds != nil {
		return *x.MaxOrderDurationSeconds
	}
	return 0
}

func (x *AdminCreateAppPowerRentalRequest) GetUnitPrice() string {
	if x != nil {
		return x.UnitPrice
	}
	return ""
}

func (x *AdminCreateAppPowerRentalRequest) GetSaleStartAt() uint32 {
	if x != nil {
		return x.SaleStartAt
	}
	return 0
}

func (x *AdminCreateAppPowerRentalRequest) GetSaleEndAt() uint32 {
	if x != nil {
		return x.SaleEndAt
	}
	return 0
}

func (x *AdminCreateAppPowerRentalRequest) GetSaleMode() v1.GoodSaleMode {
	if x != nil {
		return x.SaleMode
	}
	return v1.GoodSaleMode(0)
}

func (x *AdminCreateAppPowerRentalRequest) GetFixedDuration() bool {
	if x != nil && x.FixedDuration != nil {
		return *x.FixedDuration
	}
	return false
}

func (x *AdminCreateAppPowerRentalRequest) GetPackageWithRequireds() bool {
	if x != nil && x.PackageWithRequireds != nil {
		return *x.PackageWithRequireds
	}
	return false
}

func (x *AdminCreateAppPowerRentalRequest) GetStartMode() v1.GoodStartMode {
	if x != nil && x.StartMode != nil {
		return *x.StartMode
	}
	return v1.GoodStartMode(0)
}

type AdminCreateAppPowerRentalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppPowerRental `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *AdminCreateAppPowerRentalResponse) Reset() {
	*x = AdminCreateAppPowerRentalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_powerrental_powerrental_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminCreateAppPowerRentalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminCreateAppPowerRentalResponse) ProtoMessage() {}

func (x *AdminCreateAppPowerRentalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_powerrental_powerrental_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminCreateAppPowerRentalResponse.ProtoReflect.Descriptor instead.
func (*AdminCreateAppPowerRentalResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_powerrental_powerrental_proto_rawDescGZIP(), []int{8}
}

func (x *AdminCreateAppPowerRentalResponse) GetInfo() *AppPowerRental {
	if x != nil {
		return x.Info
	}
	return nil
}

type AdminUpdateAppPowerRentalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                           uint32            `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID                        string            `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty"`
	TargetAppID                  string            `protobuf:"bytes,30,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
	AppGoodID                    string            `protobuf:"bytes,40,opt,name=AppGoodID,proto3" json:"AppGoodID,omitempty"`
	Purchasable                  *bool             `protobuf:"varint,50,opt,name=Purchasable,proto3,oneof" json:"Purchasable,omitempty"`
	EnableProductPage            *bool             `protobuf:"varint,60,opt,name=EnableProductPage,proto3,oneof" json:"EnableProductPage,omitempty"`
	ProductPage                  *string           `protobuf:"bytes,70,opt,name=ProductPage,proto3,oneof" json:"ProductPage,omitempty"`
	Online                       *bool             `protobuf:"varint,80,opt,name=Online,proto3,oneof" json:"Online,omitempty"`
	Visible                      *bool             `protobuf:"varint,90,opt,name=Visible,proto3,oneof" json:"Visible,omitempty"`
	Name                         *string           `protobuf:"bytes,100,opt,name=Name,proto3,oneof" json:"Name,omitempty"`
	DisplayIndex                 *int32            `protobuf:"varint,110,opt,name=DisplayIndex,proto3,oneof" json:"DisplayIndex,omitempty"`
	Banner                       *string           `protobuf:"bytes,120,opt,name=Banner,proto3,oneof" json:"Banner,omitempty"`
	ServiceStartAt               *uint32           `protobuf:"varint,130,opt,name=ServiceStartAt,proto3,oneof" json:"ServiceStartAt,omitempty"`
	CancelMode                   *v1.CancelMode    `protobuf:"varint,140,opt,name=CancelMode,proto3,enum=basetypes.good.v1.CancelMode,oneof" json:"CancelMode,omitempty"`
	CancelableBeforeStartSeconds *uint32           `protobuf:"varint,150,opt,name=CancelableBeforeStartSeconds,proto3,oneof" json:"CancelableBeforeStartSeconds,omitempty"`
	EnableSetCommission          *bool             `protobuf:"varint,160,opt,name=EnableSetCommission,proto3,oneof" json:"EnableSetCommission,omitempty"`
	MinOrderAmount               *string           `protobuf:"bytes,170,opt,name=MinOrderAmount,proto3,oneof" json:"MinOrderAmount,omitempty"`
	MaxOrderAmount               *string           `protobuf:"bytes,180,opt,name=MaxOrderAmount,proto3,oneof" json:"MaxOrderAmount,omitempty"`
	MaxUserAmount                *string           `protobuf:"bytes,190,opt,name=MaxUserAmount,proto3,oneof" json:"MaxUserAmount,omitempty"`
	MinOrderDurationSeconds      *uint32           `protobuf:"varint,200,opt,name=MinOrderDurationSeconds,proto3,oneof" json:"MinOrderDurationSeconds,omitempty"`
	MaxOrderDurationSeconds      *uint32           `protobuf:"varint,210,opt,name=MaxOrderDurationSeconds,proto3,oneof" json:"MaxOrderDurationSeconds,omitempty"`
	UnitPrice                    *string           `protobuf:"bytes,220,opt,name=UnitPrice,proto3,oneof" json:"UnitPrice,omitempty"`
	SaleStartAt                  *uint32           `protobuf:"varint,230,opt,name=SaleStartAt,proto3,oneof" json:"SaleStartAt,omitempty"`
	SaleEndAt                    *uint32           `protobuf:"varint,240,opt,name=SaleEndAt,proto3,oneof" json:"SaleEndAt,omitempty"`
	SaleMode                     *v1.GoodSaleMode  `protobuf:"varint,250,opt,name=SaleMode,proto3,enum=basetypes.good.v1.GoodSaleMode,oneof" json:"SaleMode,omitempty"`
	FixedDuration                *bool             `protobuf:"varint,260,opt,name=FixedDuration,proto3,oneof" json:"FixedDuration,omitempty"`
	PackageWithRequireds         *bool             `protobuf:"varint,270,opt,name=PackageWithRequireds,proto3,oneof" json:"PackageWithRequireds,omitempty"`
	StartMode                    *v1.GoodStartMode `protobuf:"varint,280,opt,name=StartMode,proto3,enum=basetypes.good.v1.GoodStartMode,oneof" json:"StartMode,omitempty"`
}

func (x *AdminUpdateAppPowerRentalRequest) Reset() {
	*x = AdminUpdateAppPowerRentalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_powerrental_powerrental_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminUpdateAppPowerRentalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminUpdateAppPowerRentalRequest) ProtoMessage() {}

func (x *AdminUpdateAppPowerRentalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_powerrental_powerrental_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminUpdateAppPowerRentalRequest.ProtoReflect.Descriptor instead.
func (*AdminUpdateAppPowerRentalRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_powerrental_powerrental_proto_rawDescGZIP(), []int{9}
}

func (x *AdminUpdateAppPowerRentalRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *AdminUpdateAppPowerRentalRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *AdminUpdateAppPowerRentalRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

func (x *AdminUpdateAppPowerRentalRequest) GetAppGoodID() string {
	if x != nil {
		return x.AppGoodID
	}
	return ""
}

func (x *AdminUpdateAppPowerRentalRequest) GetPurchasable() bool {
	if x != nil && x.Purchasable != nil {
		return *x.Purchasable
	}
	return false
}

func (x *AdminUpdateAppPowerRentalRequest) GetEnableProductPage() bool {
	if x != nil && x.EnableProductPage != nil {
		return *x.EnableProductPage
	}
	return false
}

func (x *AdminUpdateAppPowerRentalRequest) GetProductPage() string {
	if x != nil && x.ProductPage != nil {
		return *x.ProductPage
	}
	return ""
}

func (x *AdminUpdateAppPowerRentalRequest) GetOnline() bool {
	if x != nil && x.Online != nil {
		return *x.Online
	}
	return false
}

func (x *AdminUpdateAppPowerRentalRequest) GetVisible() bool {
	if x != nil && x.Visible != nil {
		return *x.Visible
	}
	return false
}

func (x *AdminUpdateAppPowerRentalRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *AdminUpdateAppPowerRentalRequest) GetDisplayIndex() int32 {
	if x != nil && x.DisplayIndex != nil {
		return *x.DisplayIndex
	}
	return 0
}

func (x *AdminUpdateAppPowerRentalRequest) GetBanner() string {
	if x != nil && x.Banner != nil {
		return *x.Banner
	}
	return ""
}

func (x *AdminUpdateAppPowerRentalRequest) GetServiceStartAt() uint32 {
	if x != nil && x.ServiceStartAt != nil {
		return *x.ServiceStartAt
	}
	return 0
}

func (x *AdminUpdateAppPowerRentalRequest) GetCancelMode() v1.CancelMode {
	if x != nil && x.CancelMode != nil {
		return *x.CancelMode
	}
	return v1.CancelMode(0)
}

func (x *AdminUpdateAppPowerRentalRequest) GetCancelableBeforeStartSeconds() uint32 {
	if x != nil && x.CancelableBeforeStartSeconds != nil {
		return *x.CancelableBeforeStartSeconds
	}
	return 0
}

func (x *AdminUpdateAppPowerRentalRequest) GetEnableSetCommission() bool {
	if x != nil && x.EnableSetCommission != nil {
		return *x.EnableSetCommission
	}
	return false
}

func (x *AdminUpdateAppPowerRentalRequest) GetMinOrderAmount() string {
	if x != nil && x.MinOrderAmount != nil {
		return *x.MinOrderAmount
	}
	return ""
}

func (x *AdminUpdateAppPowerRentalRequest) GetMaxOrderAmount() string {
	if x != nil && x.MaxOrderAmount != nil {
		return *x.MaxOrderAmount
	}
	return ""
}

func (x *AdminUpdateAppPowerRentalRequest) GetMaxUserAmount() string {
	if x != nil && x.MaxUserAmount != nil {
		return *x.MaxUserAmount
	}
	return ""
}

func (x *AdminUpdateAppPowerRentalRequest) GetMinOrderDurationSeconds() uint32 {
	if x != nil && x.MinOrderDurationSeconds != nil {
		return *x.MinOrderDurationSeconds
	}
	return 0
}

func (x *AdminUpdateAppPowerRentalRequest) GetMaxOrderDurationSeconds() uint32 {
	if x != nil && x.MaxOrderDurationSeconds != nil {
		return *x.MaxOrderDurationSeconds
	}
	return 0
}

func (x *AdminUpdateAppPowerRentalRequest) GetUnitPrice() string {
	if x != nil && x.UnitPrice != nil {
		return *x.UnitPrice
	}
	return ""
}

func (x *AdminUpdateAppPowerRentalRequest) GetSaleStartAt() uint32 {
	if x != nil && x.SaleStartAt != nil {
		return *x.SaleStartAt
	}
	return 0
}

func (x *AdminUpdateAppPowerRentalRequest) GetSaleEndAt() uint32 {
	if x != nil && x.SaleEndAt != nil {
		return *x.SaleEndAt
	}
	return 0
}

func (x *AdminUpdateAppPowerRentalRequest) GetSaleMode() v1.GoodSaleMode {
	if x != nil && x.SaleMode != nil {
		return *x.SaleMode
	}
	return v1.GoodSaleMode(0)
}

func (x *AdminUpdateAppPowerRentalRequest) GetFixedDuration() bool {
	if x != nil && x.FixedDuration != nil {
		return *x.FixedDuration
	}
	return false
}

func (x *AdminUpdateAppPowerRentalRequest) GetPackageWithRequireds() bool {
	if x != nil && x.PackageWithRequireds != nil {
		return *x.PackageWithRequireds
	}
	return false
}

func (x *AdminUpdateAppPowerRentalRequest) GetStartMode() v1.GoodStartMode {
	if x != nil && x.StartMode != nil {
		return *x.StartMode
	}
	return v1.GoodStartMode(0)
}

type AdminUpdateAppPowerRentalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppPowerRental `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *AdminUpdateAppPowerRentalResponse) Reset() {
	*x = AdminUpdateAppPowerRentalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_powerrental_powerrental_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminUpdateAppPowerRentalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminUpdateAppPowerRentalResponse) ProtoMessage() {}

func (x *AdminUpdateAppPowerRentalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_powerrental_powerrental_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminUpdateAppPowerRentalResponse.ProtoReflect.Descriptor instead.
func (*AdminUpdateAppPowerRentalResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_powerrental_powerrental_proto_rawDescGZIP(), []int{10}
}

func (x *AdminUpdateAppPowerRentalResponse) GetInfo() *AppPowerRental {
	if x != nil {
		return x.Info
	}
	return nil
}

type AdminGetAppPowerRentalsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetAppID string `protobuf:"bytes,10,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
	Offset      int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit       int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *AdminGetAppPowerRentalsRequest) Reset() {
	*x = AdminGetAppPowerRentalsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_powerrental_powerrental_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminGetAppPowerRentalsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminGetAppPowerRentalsRequest) ProtoMessage() {}

func (x *AdminGetAppPowerRentalsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_powerrental_powerrental_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminGetAppPowerRentalsRequest.ProtoReflect.Descriptor instead.
func (*AdminGetAppPowerRentalsRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_powerrental_powerrental_proto_rawDescGZIP(), []int{11}
}

func (x *AdminGetAppPowerRentalsRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

func (x *AdminGetAppPowerRentalsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *AdminGetAppPowerRentalsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type AdminGetAppPowerRentalsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*AppPowerRental `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32            `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *AdminGetAppPowerRentalsResponse) Reset() {
	*x = AdminGetAppPowerRentalsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_powerrental_powerrental_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminGetAppPowerRentalsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminGetAppPowerRentalsResponse) ProtoMessage() {}

func (x *AdminGetAppPowerRentalsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_powerrental_powerrental_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminGetAppPowerRentalsResponse.ProtoReflect.Descriptor instead.
func (*AdminGetAppPowerRentalsResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_powerrental_powerrental_proto_rawDescGZIP(), []int{12}
}

func (x *AdminGetAppPowerRentalsResponse) GetInfos() []*AppPowerRental {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *AdminGetAppPowerRentalsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type AdminDeleteAppPowerRentalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID       string `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty"`
	TargetAppID string `protobuf:"bytes,30,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
	AppGoodID   string `protobuf:"bytes,40,opt,name=AppGoodID,proto3" json:"AppGoodID,omitempty"`
}

func (x *AdminDeleteAppPowerRentalRequest) Reset() {
	*x = AdminDeleteAppPowerRentalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_powerrental_powerrental_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminDeleteAppPowerRentalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminDeleteAppPowerRentalRequest) ProtoMessage() {}

func (x *AdminDeleteAppPowerRentalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_powerrental_powerrental_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminDeleteAppPowerRentalRequest.ProtoReflect.Descriptor instead.
func (*AdminDeleteAppPowerRentalRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_powerrental_powerrental_proto_rawDescGZIP(), []int{13}
}

func (x *AdminDeleteAppPowerRentalRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *AdminDeleteAppPowerRentalRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *AdminDeleteAppPowerRentalRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

func (x *AdminDeleteAppPowerRentalRequest) GetAppGoodID() string {
	if x != nil {
		return x.AppGoodID
	}
	return ""
}

type AdminDeleteAppPowerRentalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppPowerRental `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *AdminDeleteAppPowerRentalResponse) Reset() {
	*x = AdminDeleteAppPowerRentalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_powerrental_powerrental_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminDeleteAppPowerRentalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminDeleteAppPowerRentalResponse) ProtoMessage() {}

func (x *AdminDeleteAppPowerRentalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_powerrental_powerrental_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminDeleteAppPowerRentalResponse.ProtoReflect.Descriptor instead.
func (*AdminDeleteAppPowerRentalResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_powerrental_powerrental_proto_rawDescGZIP(), []int{14}
}

func (x *AdminDeleteAppPowerRentalResponse) GetInfo() *AppPowerRental {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_good_gw_v1_app_powerrental_powerrental_proto protoreflect.FileDescriptor

var file_npool_good_gw_v1_app_powerrental_powerrental_proto_rawDesc = []byte{
	0x0a, 0x32, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x67, 0x77, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x2f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f,
	0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x67, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f,
	0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x37, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x6d, 0x77, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f,
	0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67,
	0x6f, 0x6f, 0x64, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67,
	0x6f, 0x6f, 0x64, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67, 0x6f,
	0x6f, 0x64, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64,
	0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x2f, 0x6e, 0x61, 0x6d,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67,
	0x6f, 0x6f, 0x64, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67, 0x6f,
	0x6f, 0x64, 0x2f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x2f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x2f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x6e, 0x70,
	0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x70, 0x70, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x2f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x33, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x6d, 0x77, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x2f, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64,
	0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x2f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x6e,
	0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x67, 0x77, 0x2f, 0x76, 0x31, 0x2f,
	0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdf, 0x1f,
	0x0a, 0x0e, 0x41, 0x70, 0x70, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07,
	0x41, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41,
	0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x46, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x50,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x36, 0x0a, 0x16, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x16, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x4c, 0x6f,
	0x67, 0x6f, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x6f,
	0x12, 0x36, 0x0a, 0x16, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x16, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x18, 0x78, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x74, 0x12, 0x2b, 0x0a, 0x10, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x21, 0x0a, 0x0b, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x64,
	0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x42,
	0x72, 0x61, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0a, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f,
	0x67, 0x6f, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x25, 0x0a, 0x0d, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x56,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x0e,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18, 0xaa,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x55, 0x6e, 0x69, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x55, 0x6e, 0x69, 0x74, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x2f, 0x0a, 0x12, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0xc8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x55, 0x6e, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0a, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x74, 0x18, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x74, 0x12, 0x29, 0x0a, 0x0f, 0x55,
	0x6e, 0x69, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0xdc,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x55, 0x6e, 0x69, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x56, 0x0a, 0x13, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0xe6, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x13, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38,
	0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0xf0, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x42, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x47,
	0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x84, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x8e, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x74, 0x12, 0x47, 0x0a, 0x0d, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x18, 0x98, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x47, 0x6f, 0x6f,
	0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x54, 0x65,
	0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0xa2, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x54,
	0x65, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x33, 0x0a, 0x14, 0x42, 0x65, 0x6e, 0x65, 0x66,
	0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x18,
	0xac, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x0f,
	0x47, 0x6f, 0x6f, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0xb6, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x47, 0x6f, 0x6f, 0x64, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x47, 0x6f, 0x6f, 0x64, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0xc0, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x47, 0x6f,
	0x6f, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0xca, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2f, 0x0a, 0x12, 0x41, 0x70, 0x70,
	0x47, 0x6f, 0x6f, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0xd4, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x41, 0x70,
	0x70, 0x47, 0x6f, 0x6f, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0xde, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x2d, 0x0a, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x18, 0xe8, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x12, 0x21, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x18,
	0xf2, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x07, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0xfc,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x21,
	0x0a, 0x0b, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x86, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x90, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x17, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x18, 0x9a, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12,
	0x3e, 0x0a, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0xa4, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x43, 0x0a, 0x1c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0xae, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x31, 0x0a, 0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xb8, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0e, 0x4d, 0x69, 0x6e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xc2, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x4d, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x27, 0x0a, 0x0e, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0xcc, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4d, 0x61, 0x78, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0d, 0x4d, 0x61, 0x78,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xd6, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x4d, 0x61, 0x78, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x39, 0x0a, 0x17, 0x4d, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0xe0, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x17, 0x4d, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x17, 0x4d,
	0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0xea, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x4d,
	0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0b, 0x53, 0x61, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0xf4, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x53, 0x61,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x53, 0x61, 0x6c,
	0x65, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18, 0xfe, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x53,
	0x61, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x53, 0x61, 0x6c, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x18, 0x88, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x64, 0x53, 0x61, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x53, 0x61,
	0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x46, 0x69, 0x78, 0x65, 0x64, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x92, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a,
	0x14, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x64, 0x73, 0x18, 0x9c, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x73, 0x12, 0x32, 0x0a, 0x11, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x46,
	0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0xa6, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x11, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x46, 0x65, 0x65, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0b, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0xb0, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x47, 0x6f,
	0x6f, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x09, 0x47, 0x6f, 0x6f,
	0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0xba, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x47,
	0x6f, 0x6f, 0x64, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x10, 0x47, 0x6f, 0x6f, 0x64,
	0x53, 0x70, 0x6f, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0xc4, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x70, 0x6f, 0x74, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x0e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0xce, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x29,
	0x0a, 0x0f, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x18, 0xd8, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f,
	0x64, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x13, 0x41, 0x70, 0x70,
	0x47, 0x6f, 0x6f, 0x64, 0x53, 0x70, 0x6f, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0xe2, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64,
	0x53, 0x70, 0x6f, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x0d,
	0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0xec, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x4c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x10, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0xf6, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x2b, 0x0a, 0x10, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x57, 0x61, 0x69, 0x74, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x80, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x41, 0x70, 0x70,
	0x47, 0x6f, 0x6f, 0x64, 0x57, 0x61, 0x69, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x21, 0x0a,
	0x0b, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x6f, 0x6c, 0x64, 0x18, 0x8a, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x6f, 0x6c, 0x64,
	0x12, 0x15, 0x0a, 0x05, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x18, 0x94, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x6c, 0x69,
	0x6b, 0x65, 0x73, 0x18, 0x9e, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x44, 0x69, 0x73, 0x6c,
	0x69, 0x6b, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0xa8, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xb2, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0e,
	0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xbc,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xc6, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x43, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x4c, 0x61,
	0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x74, 0x18, 0xd0, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x74, 0x12,
	0x4d, 0x0a, 0x10, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x18, 0xda, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x10, 0x41, 0x70,
	0x70, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x47,
	0x0a, 0x09, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0x84, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x47, 0x6f,
	0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x5e, 0x0a, 0x0c, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x8e, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4a, 0x0a, 0x07, 0x50, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x98, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x50, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x5f, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0xa2, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x6e,
	0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x12, 0x63, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0xac, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x67, 0x0a, 0x13, 0x41, 0x70, 0x70,
	0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73,
	0x18, 0xb6, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x31, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13, 0x41,
	0x70, 0x70, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x73, 0x12, 0x60, 0x0a, 0x10, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x47, 0x6f, 0x6f, 0x64,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0xc0, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x10, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x73, 0x12, 0x46, 0x0a, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0xca,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x31, 0x2e, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x48, 0x0a, 0x07,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0xb4, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x31, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x53, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x73, 0x18, 0xbe, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x31,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xf2, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x54, 0x65,
	0x63, 0x68, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x22,
	0x9e, 0x0d, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41,
	0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x0b, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x0b, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x31, 0x0a, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x11, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x06, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x07, 0x56, 0x69, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x6e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x06, 0x42, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x08,
	0x52, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x6f, 0x64,
	0x65, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x09, 0x52, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x1c, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x0a, 0x52, 0x1c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x36, 0x0a, 0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x0b, 0x52, 0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0e, 0x4d, 0x69,
	0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xaa, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0e, 0x4d, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0e, 0x4d, 0x61, 0x78, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0d, 0x52, 0x0e, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0d, 0x4d, 0x61, 0x78, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e,
	0x52, 0x0d, 0x4d, 0x61, 0x78, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x3e, 0x0a, 0x17, 0x4d, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0xc8, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x0f, 0x52, 0x17, 0x4d, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x3e, 0x0a, 0x17, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0xd2, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x10, 0x52, 0x17, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x22, 0x0a, 0x09, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0xdc, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x09, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0b, 0x53, 0x61, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0xe6, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x12, 0x52, 0x0b,
	0x53, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x09, 0x53, 0x61, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18, 0xf0, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x13, 0x52, 0x09, 0x53, 0x61, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x41, 0x0a, 0x08, 0x53, 0x61, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0xfa,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x61,
	0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x14, 0x52, 0x08, 0x53, 0x61, 0x6c, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0d, 0x46, 0x69, 0x78, 0x65, 0x64, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x84, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x15, 0x52,
	0x0d, 0x46, 0x69, 0x78, 0x65, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x38, 0x0a, 0x14, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x73, 0x18, 0x8e, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x16, 0x52, 0x14, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x09, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x98, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x48, 0x17, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x42, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x4d, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x4d, 0x61, 0x78, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x4d, 0x69, 0x6e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x53, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x53, 0x61, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x53,
	0x61, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x22, 0x63, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x43, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x70, 0x70, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x38, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x22,
	0x60, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x5f, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0x79, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x45, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x70, 0x70, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xbd, 0x0b,
	0x0a, 0x20, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x0b,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x0b, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01,
	0x52, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52,
	0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x56, 0x69,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x07, 0x56,
	0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a,
	0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x5a, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x06, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x42, 0x0a, 0x0a, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x07,
	0x52, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x48, 0x0a, 0x1c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x82, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x08, 0x52, 0x1c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x13, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x09, 0x52, 0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x27, 0x0a, 0x0e, 0x4d, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4d, 0x69, 0x6e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0e, 0x4d, 0x61,
	0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xa0, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x0d, 0x4d, 0x61, 0x78, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0d, 0x4d,
	0x61, 0x78, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x39, 0x0a, 0x17, 0x4d, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x17, 0x4d, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x3e, 0x0a, 0x17, 0x4d, 0x61,
	0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0b, 0x52, 0x17,
	0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x09, 0x55, 0x6e,
	0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x53, 0x61, 0x6c,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x53, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x09,
	0x53, 0x61, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x53, 0x61, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x53,
	0x61, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0xe6, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x61, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x08, 0x53, 0x61, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x0d, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xf0, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x0c, 0x52, 0x0d, 0x46, 0x69, 0x78, 0x65, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x14, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x73, 0x18, 0xfa, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x0d, 0x52, 0x14, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x57,
	0x69, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x44, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x84, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x0e, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x56, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x1f, 0x0a,
	0x1d, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x66, 0x6f,
	0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x16,
	0x0a, 0x14, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x4d, 0x61, 0x78, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x4d, 0x61, 0x78,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x69, 0x78, 0x65, 0x64, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x73, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x68, 0x0a,
	0x21, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x43, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xaf, 0x0d, 0x0a, 0x20, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05,
	0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49,
	0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64,
	0x49, 0x44, 0x12, 0x25, 0x0a, 0x0b, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x18, 0x3c,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x50, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x07, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x5a, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x04, 0x52, 0x07, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06,
	0x52, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x78, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x07, 0x52, 0x06, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2c,
	0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74,
	0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x08, 0x52, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0a,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65,
	0x48, 0x09, 0x52, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x48, 0x0a, 0x1c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0a, 0x52, 0x1c, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x13, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0b, 0x52, 0x13, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0e, 0x4d, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0e,
	0x4d, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x2c, 0x0a, 0x0e, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0e, 0x4d, 0x61,
	0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0d, 0x4d, 0x61, 0x78, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0d, 0x4d, 0x61, 0x78, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x17, 0x4d,
	0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0f, 0x52,
	0x17, 0x4d, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x17, 0x4d,
	0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x10, 0x52,
	0x17, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x09, 0x55,
	0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x11, 0x52, 0x09, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0b, 0x53, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0xe6,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x12, 0x52, 0x0b, 0x53, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x09, 0x53, 0x61, 0x6c, 0x65, 0x45,
	0x6e, 0x64, 0x41, 0x74, 0x18, 0xf0, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x13, 0x52, 0x09, 0x53,
	0x61, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x08, 0x53,
	0x61, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x61, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x48,
	0x14, 0x52, 0x08, 0x53, 0x61, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a,
	0x0a, 0x0d, 0x46, 0x69, 0x78, 0x65, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x84, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x15, 0x52, 0x0d, 0x46, 0x69, 0x78, 0x65, 0x64, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x14, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x73, 0x18, 0x8e, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x16, 0x52, 0x14, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x18, 0x98, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x17, 0x52, 0x09, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x4e, 0x61, 0x6d, 0x65,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x1f,
	0x0a, 0x1d, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42,
	0x16, 0x0a, 0x14, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x4d, 0x69, 0x6e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x4d,
	0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x4d, 0x61, 0x78, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x1a, 0x0a, 0x18, 0x5f, 0x4d, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x1a, 0x0a, 0x18, 0x5f,
	0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x55, 0x6e, 0x69, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x53, 0x61, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x41, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x53, 0x61, 0x6c, 0x65, 0x45, 0x6e,
	0x64, 0x41, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x53, 0x61, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x69, 0x78, 0x65, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x57, 0x69,
	0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x68, 0x0a, 0x21, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x70, 0x70, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x70, 0x0a, 0x1e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x7e, 0x0a, 0x1f, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65,
	0x74, 0x41, 0x70, 0x70, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x88, 0x01, 0x0a, 0x20, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44,
	0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44,
	0x22, 0x68, 0x0a, 0x21, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x70, 0x70, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0xe5, 0x0a, 0x0a, 0x07, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0xb9, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x70, 0x70, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x12,
	0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x61, 0x70, 0x70, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x12, 0xad, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x12, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70,
	0x70, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f,
	0x67, 0x65, 0x74, 0x2f, 0x61, 0x70, 0x70, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x12, 0xb1, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x73, 0x12, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x22, 0x17, 0x2f,
	0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x61, 0x70, 0x70, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x73, 0x12, 0xce, 0x01, 0x0a, 0x19, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x12, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x70, 0x70, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d, 0x69,
	0x6e, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x70, 0x70, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x12, 0xce, 0x01, 0x0a, 0x19, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x12, 0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x70, 0x70, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x12, 0xc6, 0x01, 0x0a, 0x17, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x73, 0x12, 0x3f, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a,
	0x01, 0x2a, 0x22, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x67, 0x65,
	0x74, 0x2f, 0x61, 0x70, 0x70, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x73, 0x12, 0xce, 0x01, 0x0a, 0x19, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x70, 0x70, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x12,
	0x41, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x42, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x70, 0x70, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01,
	0x2a, 0x22, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x2f, 0x61, 0x70, 0x70, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x42, 0x43, 0x5a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f,
	0x64, 0x2f, 0x67, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_good_gw_v1_app_powerrental_powerrental_proto_rawDescOnce sync.Once
	file_npool_good_gw_v1_app_powerrental_powerrental_proto_rawDescData = file_npool_good_gw_v1_app_powerrental_powerrental_proto_rawDesc
)

func file_npool_good_gw_v1_app_powerrental_powerrental_proto_rawDescGZIP() []byte {
	file_npool_good_gw_v1_app_powerrental_powerrental_proto_rawDescOnce.Do(func() {
		file_npool_good_gw_v1_app_powerrental_powerrental_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_good_gw_v1_app_powerrental_powerrental_proto_rawDescData)
	})
	return file_npool_good_gw_v1_app_powerrental_powerrental_proto_rawDescData
}

var file_npool_good_gw_v1_app_powerrental_powerrental_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_npool_good_gw_v1_app_powerrental_powerrental_proto_goTypes = []interface{}{
	(*AppPowerRental)(nil),                    // 0: good.gateway.app.powerrental.v1.AppPowerRental
	(*UpdateAppPowerRentalRequest)(nil),       // 1: good.gateway.app.powerrental.v1.UpdateAppPowerRentalRequest
	(*UpdateAppPowerRentalResponse)(nil),      // 2: good.gateway.app.powerrental.v1.UpdateAppPowerRentalResponse
	(*GetAppPowerRentalRequest)(nil),          // 3: good.gateway.app.powerrental.v1.GetAppPowerRentalRequest
	(*GetAppPowerRentalResponse)(nil),         // 4: good.gateway.app.powerrental.v1.GetAppPowerRentalResponse
	(*GetAppPowerRentalsRequest)(nil),         // 5: good.gateway.app.powerrental.v1.GetAppPowerRentalsRequest
	(*GetAppPowerRentalsResponse)(nil),        // 6: good.gateway.app.powerrental.v1.GetAppPowerRentalsResponse
	(*AdminCreateAppPowerRentalRequest)(nil),  // 7: good.gateway.app.powerrental.v1.AdminCreateAppPowerRentalRequest
	(*AdminCreateAppPowerRentalResponse)(nil), // 8: good.gateway.app.powerrental.v1.AdminCreateAppPowerRentalResponse
	(*AdminUpdateAppPowerRentalRequest)(nil),  // 9: good.gateway.app.powerrental.v1.AdminUpdateAppPowerRentalRequest
	(*AdminUpdateAppPowerRentalResponse)(nil), // 10: good.gateway.app.powerrental.v1.AdminUpdateAppPowerRentalResponse
	(*AdminGetAppPowerRentalsRequest)(nil),    // 11: good.gateway.app.powerrental.v1.AdminGetAppPowerRentalsRequest
	(*AdminGetAppPowerRentalsResponse)(nil),   // 12: good.gateway.app.powerrental.v1.AdminGetAppPowerRentalsResponse
	(*AdminDeleteAppPowerRentalRequest)(nil),  // 13: good.gateway.app.powerrental.v1.AdminDeleteAppPowerRentalRequest
	(*AdminDeleteAppPowerRentalResponse)(nil), // 14: good.gateway.app.powerrental.v1.AdminDeleteAppPowerRentalResponse
	(v1.GoodDurationType)(0),                  // 15: basetypes.good.v1.GoodDurationType
	(v1.GoodType)(0),                          // 16: basetypes.good.v1.GoodType
	(v1.BenefitType)(0),                       // 17: basetypes.good.v1.BenefitType
	(v1.GoodStartMode)(0),                     // 18: basetypes.good.v1.GoodStartMode
	(v1.GoodStockMode)(0),                     // 19: basetypes.good.v1.GoodStockMode
	(v1.CancelMode)(0),                        // 20: basetypes.good.v1.CancelMode
	(v1.GoodSaleMode)(0),                      // 21: basetypes.good.v1.GoodSaleMode
	(*coin.GoodCoinInfo)(nil),                 // 22: good.gateway.good1.coin.v1.GoodCoinInfo
	(*description.DescriptionInfo)(nil),       // 23: good.middleware.app.good1.description.v1.DescriptionInfo
	(*poster.PosterInfo)(nil),                 // 24: good.middleware.app.good1.poster.v1.PosterInfo
	(*name.DisplayNameInfo)(nil),              // 25: good.middleware.app.good1.display.name.v1.DisplayNameInfo
	(*color.DisplayColorInfo)(nil),            // 26: good.middleware.app.good1.display.color.v1.DisplayColorInfo
	(*mining.StockInfo)(nil),                  // 27: good.middleware.app.good1.stock.mining.v1.StockInfo
	(*stock.MiningGoodStockInfo)(nil),         // 28: good.middleware.good1.stock.v1.MiningGoodStockInfo
	(*label.LabelInfo)(nil),                   // 29: good.middleware.app.good1.label.v1.LabelInfo
	(*reward.RewardInfo)(nil),                 // 30: good.gateway.good1.coin.reward.v1.RewardInfo
	(*required.RequiredInfo)(nil),             // 31: good.middleware.app.good1.required1.v1.RequiredInfo
}
var file_npool_good_gw_v1_app_powerrental_powerrental_proto_depIdxs = []int32{
	15, // 0: good.gateway.app.powerrental.v1.AppPowerRental.DurationDisplayType:type_name -> basetypes.good.v1.GoodDurationType
	16, // 1: good.gateway.app.powerrental.v1.AppPowerRental.GoodType:type_name -> basetypes.good.v1.GoodType
	17, // 2: good.gateway.app.powerrental.v1.AppPowerRental.BenefitType:type_name -> basetypes.good.v1.BenefitType
	18, // 3: good.gateway.app.powerrental.v1.AppPowerRental.GoodStartMode:type_name -> basetypes.good.v1.GoodStartMode
	19, // 4: good.gateway.app.powerrental.v1.AppPowerRental.StockMode:type_name -> basetypes.good.v1.GoodStockMode
	20, // 5: good.gateway.app.powerrental.v1.AppPowerRental.CancelMode:type_name -> basetypes.good.v1.CancelMode
	21, // 6: good.gateway.app.powerrental.v1.AppPowerRental.SaleMode:type_name -> basetypes.good.v1.GoodSaleMode
	18, // 7: good.gateway.app.powerrental.v1.AppPowerRental.AppGoodStartMode:type_name -> basetypes.good.v1.GoodStartMode
	22, // 8: good.gateway.app.powerrental.v1.AppPowerRental.GoodCoins:type_name -> good.gateway.good1.coin.v1.GoodCoinInfo
	23, // 9: good.gateway.app.powerrental.v1.AppPowerRental.Descriptions:type_name -> good.middleware.app.good1.description.v1.DescriptionInfo
	24, // 10: good.gateway.app.powerrental.v1.AppPowerRental.Posters:type_name -> good.middleware.app.good1.poster.v1.PosterInfo
	25, // 11: good.gateway.app.powerrental.v1.AppPowerRental.DisplayNames:type_name -> good.middleware.app.good1.display.name.v1.DisplayNameInfo
	26, // 12: good.gateway.app.powerrental.v1.AppPowerRental.DisplayColors:type_name -> good.middleware.app.good1.display.color.v1.DisplayColorInfo
	27, // 13: good.gateway.app.powerrental.v1.AppPowerRental.AppMiningGoodStocks:type_name -> good.middleware.app.good1.stock.mining.v1.StockInfo
	28, // 14: good.gateway.app.powerrental.v1.AppPowerRental.MiningGoodStocks:type_name -> good.middleware.good1.stock.v1.MiningGoodStockInfo
	29, // 15: good.gateway.app.powerrental.v1.AppPowerRental.Labels:type_name -> good.middleware.app.good1.label.v1.LabelInfo
	30, // 16: good.gateway.app.powerrental.v1.AppPowerRental.Rewards:type_name -> good.gateway.good1.coin.reward.v1.RewardInfo
	31, // 17: good.gateway.app.powerrental.v1.AppPowerRental.Requireds:type_name -> good.middleware.app.good1.required1.v1.RequiredInfo
	20, // 18: good.gateway.app.powerrental.v1.UpdateAppPowerRentalRequest.CancelMode:type_name -> basetypes.good.v1.CancelMode
	21, // 19: good.gateway.app.powerrental.v1.UpdateAppPowerRentalRequest.SaleMode:type_name -> basetypes.good.v1.GoodSaleMode
	18, // 20: good.gateway.app.powerrental.v1.UpdateAppPowerRentalRequest.StartMode:type_name -> basetypes.good.v1.GoodStartMode
	0,  // 21: good.gateway.app.powerrental.v1.UpdateAppPowerRentalResponse.Info:type_name -> good.gateway.app.powerrental.v1.AppPowerRental
	0,  // 22: good.gateway.app.powerrental.v1.GetAppPowerRentalResponse.Info:type_name -> good.gateway.app.powerrental.v1.AppPowerRental
	0,  // 23: good.gateway.app.powerrental.v1.GetAppPowerRentalsResponse.Infos:type_name -> good.gateway.app.powerrental.v1.AppPowerRental
	20, // 24: good.gateway.app.powerrental.v1.AdminCreateAppPowerRentalRequest.CancelMode:type_name -> basetypes.good.v1.CancelMode
	21, // 25: good.gateway.app.powerrental.v1.AdminCreateAppPowerRentalRequest.SaleMode:type_name -> basetypes.good.v1.GoodSaleMode
	18, // 26: good.gateway.app.powerrental.v1.AdminCreateAppPowerRentalRequest.StartMode:type_name -> basetypes.good.v1.GoodStartMode
	0,  // 27: good.gateway.app.powerrental.v1.AdminCreateAppPowerRentalResponse.Info:type_name -> good.gateway.app.powerrental.v1.AppPowerRental
	20, // 28: good.gateway.app.powerrental.v1.AdminUpdateAppPowerRentalRequest.CancelMode:type_name -> basetypes.good.v1.CancelMode
	21, // 29: good.gateway.app.powerrental.v1.AdminUpdateAppPowerRentalRequest.SaleMode:type_name -> basetypes.good.v1.GoodSaleMode
	18, // 30: good.gateway.app.powerrental.v1.AdminUpdateAppPowerRentalRequest.StartMode:type_name -> basetypes.good.v1.GoodStartMode
	0,  // 31: good.gateway.app.powerrental.v1.AdminUpdateAppPowerRentalResponse.Info:type_name -> good.gateway.app.powerrental.v1.AppPowerRental
	0,  // 32: good.gateway.app.powerrental.v1.AdminGetAppPowerRentalsResponse.Infos:type_name -> good.gateway.app.powerrental.v1.AppPowerRental
	0,  // 33: good.gateway.app.powerrental.v1.AdminDeleteAppPowerRentalResponse.Info:type_name -> good.gateway.app.powerrental.v1.AppPowerRental
	1,  // 34: good.gateway.app.powerrental.v1.Gateway.UpdateAppPowerRental:input_type -> good.gateway.app.powerrental.v1.UpdateAppPowerRentalRequest
	3,  // 35: good.gateway.app.powerrental.v1.Gateway.GetAppPowerRental:input_type -> good.gateway.app.powerrental.v1.GetAppPowerRentalRequest
	5,  // 36: good.gateway.app.powerrental.v1.Gateway.GetAppPowerRentals:input_type -> good.gateway.app.powerrental.v1.GetAppPowerRentalsRequest
	7,  // 37: good.gateway.app.powerrental.v1.Gateway.AdminCreateAppPowerRental:input_type -> good.gateway.app.powerrental.v1.AdminCreateAppPowerRentalRequest
	9,  // 38: good.gateway.app.powerrental.v1.Gateway.AdminUpdateAppPowerRental:input_type -> good.gateway.app.powerrental.v1.AdminUpdateAppPowerRentalRequest
	11, // 39: good.gateway.app.powerrental.v1.Gateway.AdminGetAppPowerRentals:input_type -> good.gateway.app.powerrental.v1.AdminGetAppPowerRentalsRequest
	13, // 40: good.gateway.app.powerrental.v1.Gateway.AdminDeleteAppPowerRental:input_type -> good.gateway.app.powerrental.v1.AdminDeleteAppPowerRentalRequest
	2,  // 41: good.gateway.app.powerrental.v1.Gateway.UpdateAppPowerRental:output_type -> good.gateway.app.powerrental.v1.UpdateAppPowerRentalResponse
	4,  // 42: good.gateway.app.powerrental.v1.Gateway.GetAppPowerRental:output_type -> good.gateway.app.powerrental.v1.GetAppPowerRentalResponse
	6,  // 43: good.gateway.app.powerrental.v1.Gateway.GetAppPowerRentals:output_type -> good.gateway.app.powerrental.v1.GetAppPowerRentalsResponse
	8,  // 44: good.gateway.app.powerrental.v1.Gateway.AdminCreateAppPowerRental:output_type -> good.gateway.app.powerrental.v1.AdminCreateAppPowerRentalResponse
	10, // 45: good.gateway.app.powerrental.v1.Gateway.AdminUpdateAppPowerRental:output_type -> good.gateway.app.powerrental.v1.AdminUpdateAppPowerRentalResponse
	12, // 46: good.gateway.app.powerrental.v1.Gateway.AdminGetAppPowerRentals:output_type -> good.gateway.app.powerrental.v1.AdminGetAppPowerRentalsResponse
	14, // 47: good.gateway.app.powerrental.v1.Gateway.AdminDeleteAppPowerRental:output_type -> good.gateway.app.powerrental.v1.AdminDeleteAppPowerRentalResponse
	41, // [41:48] is the sub-list for method output_type
	34, // [34:41] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_npool_good_gw_v1_app_powerrental_powerrental_proto_init() }
func file_npool_good_gw_v1_app_powerrental_powerrental_proto_init() {
	if File_npool_good_gw_v1_app_powerrental_powerrental_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_good_gw_v1_app_powerrental_powerrental_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppPowerRental); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_powerrental_powerrental_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppPowerRentalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_powerrental_powerrental_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppPowerRentalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_powerrental_powerrental_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppPowerRentalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_powerrental_powerrental_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppPowerRentalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_powerrental_powerrental_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppPowerRentalsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_powerrental_powerrental_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppPowerRentalsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_powerrental_powerrental_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminCreateAppPowerRentalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_powerrental_powerrental_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminCreateAppPowerRentalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_powerrental_powerrental_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminUpdateAppPowerRentalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_powerrental_powerrental_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminUpdateAppPowerRentalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_powerrental_powerrental_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminGetAppPowerRentalsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_powerrental_powerrental_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminGetAppPowerRentalsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_powerrental_powerrental_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminDeleteAppPowerRentalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_powerrental_powerrental_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminDeleteAppPowerRentalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_good_gw_v1_app_powerrental_powerrental_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_npool_good_gw_v1_app_powerrental_powerrental_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_npool_good_gw_v1_app_powerrental_powerrental_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_npool_good_gw_v1_app_powerrental_powerrental_proto_msgTypes[9].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_good_gw_v1_app_powerrental_powerrental_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_good_gw_v1_app_powerrental_powerrental_proto_goTypes,
		DependencyIndexes: file_npool_good_gw_v1_app_powerrental_powerrental_proto_depIdxs,
		MessageInfos:      file_npool_good_gw_v1_app_powerrental_powerrental_proto_msgTypes,
	}.Build()
	File_npool_good_gw_v1_app_powerrental_powerrental_proto = out.File
	file_npool_good_gw_v1_app_powerrental_powerrental_proto_rawDesc = nil
	file_npool_good_gw_v1_app_powerrental_powerrental_proto_goTypes = nil
	file_npool_good_gw_v1_app_powerrental_powerrental_proto_depIdxs = nil
}
