syntax = "proto3";

package good.gateway.app.delegatedstaking.v1;

option go_package = "github.com/NpoolPlatform/message/npool/good/gw/v1/app/delegatedstaking";

import "google/api/annotations.proto";
import "npool/basetypes/good/v1/enums.proto";
import "npool/good/gw/v1/good/coin/coin.proto";
import "npool/good/mw/v1/app/good/description/description.proto";
import "npool/good/mw/v1/app/good/poster/poster.proto";
import "npool/good/mw/v1/app/good/label/label.proto";
import "npool/good/mw/v1/app/good/display/name/name.proto";
import "npool/good/mw/v1/app/good/display/color/color.proto";
import "npool/good/gw/v1/good/coin/reward/reward.proto";

service Gateway {
  rpc UpdateAppDelegatedStaking(UpdateAppDelegatedStakingRequest)
      returns (UpdateAppDelegatedStakingResponse) {
    option (google.api.http) = {
      post : "/v1/update/appdelegatedstaking"
      body : "*"
    };
  }

  rpc GetAppDelegatedStaking(GetAppDelegatedStakingRequest)
      returns (GetAppDelegatedStakingResponse) {
    option (google.api.http) = {
      post : "/v1/get/appdelegatedstaking"
      body : "*"
    };
  }

  rpc GetAppDelegatedStakings(GetAppDelegatedStakingsRequest)
      returns (GetAppDelegatedStakingsResponse) {
    option (google.api.http) = {
      post : "/v1/get/appdelegatedstakings"
      body : "*"
    };
  }

  // Run by church admin
  rpc AdminCreateAppDelegatedStaking(AdminCreateAppDelegatedStakingRequest)
      returns (AdminCreateAppDelegatedStakingResponse) {
    option (google.api.http) = {
      post : "/v1/admin/create/appdelegatedstaking"
      body : "*"
    };
  }

  rpc AdminUpdateAppDelegatedStaking(AdminUpdateAppDelegatedStakingRequest)
      returns (AdminUpdateAppDelegatedStakingResponse) {
    option (google.api.http) = {
      post : "/v1/admin/update/appdelegatedstaking"
      body : "*"
    };
  }

  rpc AdminGetAppDelegatedStakings(AdminGetAppDelegatedStakingsRequest)
      returns (AdminGetAppDelegatedStakingsResponse) {
    option (google.api.http) = {
      post : "/v1/admin/get/appdelegatedstakings"
      body : "*"
    };
  }

  rpc AdminDeleteAppDelegatedStaking(AdminDeleteAppDelegatedStakingRequest)
      returns (AdminDeleteAppDelegatedStakingResponse) {
    option (google.api.http) = {
      post : "/v1/admin/delete/appdelegatedstaking"
      body : "*"
    };
  }
}

message AppDelegatedStaking {
  uint32 ID = 10;
  string EntID = 20;
  string AppID = 30;
  string AppName = 40;
  string GoodID = 50;
  string DelegatedStakingID = 51;
  string AppGoodID = 60;

  basetypes.good.v1.GoodType GoodType = 240;
  basetypes.good.v1.BenefitType BenefitType = 250;
  string GoodName = 260;
  uint32 ServiceStartAt = 270;
  basetypes.good.v1.GoodStartMode GoodStartMode = 280;
  bool TestOnly = 290;
  uint32 BenefitIntervalHours = 300;
  bool GoodPurchasable = 310;
  bool GoodOnline = 320;
  basetypes.good.v1.GoodState State = 335;

  bool AppGoodPurchasable = 340;
  bool AppGoodOnline = 350;
  bool EnableProductPage = 360;
  string ProductPage = 370;
  bool Visible = 380;
  string AppGoodName = 390;
  int32 DisplayIndex = 400;
  string Banner = 410;
  bool EnableSetCommission = 440;

  uint32 Likes = 660;
  uint32 Dislikes = 670;
  string Score = 680;
  uint32 ScoreCount = 690;
  uint32 RecommendCount = 700;
  uint32 CommentCount = 710;

  uint32 LastRewardAt = 720;
  basetypes.good.v1.GoodStartMode AppGoodStartMode = 730;

  repeated good.gateway.good1.coin.v1.GoodCoinInfo GoodCoins = 900;
  repeated good.middleware.app.good1.description.v1.DescriptionInfo Descriptions = 910;
  repeated good.middleware.app.good1.poster.v1.PosterInfo Posters = 920;
  repeated good.middleware.app.good1.display.name.v1.DisplayNameInfo DisplayNames = 930;
  repeated good.middleware.app.good1.display.color.v1.DisplayColorInfo DisplayColors = 940;
  repeated good.middleware.app.good1.label.v1.LabelInfo Labels = 970;
  repeated good.gateway.good1.coin.reward.v1.RewardInfo Rewards = 820;

  uint32 CreatedAt = 1000;
  uint32 UpdatedAt = 1010;
}

message UpdateAppDelegatedStakingRequest {
  uint32 ID = 10;
  string EntID = 20;
  string AppID = 30;
  string AppGoodID = 40;

  optional bool Purchasable = 50;
  optional bool EnableProductPage = 60;
  optional string ProductPage = 70;
  optional bool Online = 80;
  optional bool Visible = 90;
  optional string Name = 100;
  optional int32 DisplayIndex = 110;
  optional string Banner = 120;

  optional uint32 ServiceStartAt = 130;
  optional bool EnableSetCommission = 160;
  optional basetypes.good.v1.GoodStartMode StartMode = 280;
}

message UpdateAppDelegatedStakingResponse { AppDelegatedStaking Info = 10; }

message GetAppDelegatedStakingRequest { string AppGoodID = 10; }

message GetAppDelegatedStakingResponse { AppDelegatedStaking Info = 10; }

message GetAppDelegatedStakingsRequest {
  string AppID = 10;
  int32 Offset = 20;
  int32 Limit = 30;
}

message GetAppDelegatedStakingsResponse {
  repeated AppDelegatedStaking Infos = 10;
  uint32 Total = 20;
}

message AdminCreateAppDelegatedStakingRequest {
  string TargetAppID = 10;
  string GoodID = 20;

  optional bool Purchasable = 30;
  optional bool EnableProductPage = 40;
  optional string ProductPage = 50;
  optional bool Online = 60;
  optional bool Visible = 70;
  string Name = 80;
  optional int32 DisplayIndex = 90;
  optional string Banner = 100;

  uint32 ServiceStartAt = 110;
  optional bool EnableSetCommission = 120;
  optional basetypes.good.v1.GoodStartMode StartMode = 130;
}

message AdminCreateAppDelegatedStakingResponse { AppDelegatedStaking Info = 10; }

message AdminUpdateAppDelegatedStakingRequest {
  uint32 ID = 10;
  string EntID = 20;
  string TargetAppID = 30;
  string AppGoodID = 40;

  optional bool Purchasable = 50;
  optional bool EnableProductPage = 60;
  optional string ProductPage = 70;
  optional bool Online = 80;
  optional bool Visible = 90;
  optional string Name = 100;
  optional int32 DisplayIndex = 110;
  optional string Banner = 120;

  optional uint32 ServiceStartAt = 130;
  optional bool EnableSetCommission = 140;
  optional basetypes.good.v1.GoodStartMode StartMode = 150;
}

message AdminUpdateAppDelegatedStakingResponse { AppDelegatedStaking Info = 10; }

message AdminGetAppDelegatedStakingsRequest {
  string TargetAppID = 10;
  int32 Offset = 20;
  int32 Limit = 30;
}

message AdminGetAppDelegatedStakingsResponse {
  repeated AppDelegatedStaking Infos = 10;
  uint32 Total = 20;
}

message AdminDeleteAppDelegatedStakingRequest {
  uint32 ID = 10;
  string EntID = 20;
  string TargetAppID = 30;
  string AppGoodID = 40;
}

message AdminDeleteAppDelegatedStakingResponse { AppDelegatedStaking Info = 10; }
