// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/good/gw/v1/app/delegatedstaking/delegatedstaking.proto

package delegatedstaking

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gateway_UpdateAppDelegatedStaking_FullMethodName      = "/good.gateway.app.delegatedstaking.v1.Gateway/UpdateAppDelegatedStaking"
	Gateway_GetAppDelegatedStaking_FullMethodName         = "/good.gateway.app.delegatedstaking.v1.Gateway/GetAppDelegatedStaking"
	Gateway_GetAppDelegatedStakings_FullMethodName        = "/good.gateway.app.delegatedstaking.v1.Gateway/GetAppDelegatedStakings"
	Gateway_AdminCreateAppDelegatedStaking_FullMethodName = "/good.gateway.app.delegatedstaking.v1.Gateway/AdminCreateAppDelegatedStaking"
	Gateway_AdminUpdateAppDelegatedStaking_FullMethodName = "/good.gateway.app.delegatedstaking.v1.Gateway/AdminUpdateAppDelegatedStaking"
	Gateway_AdminGetAppDelegatedStakings_FullMethodName   = "/good.gateway.app.delegatedstaking.v1.Gateway/AdminGetAppDelegatedStakings"
	Gateway_AdminDeleteAppDelegatedStaking_FullMethodName = "/good.gateway.app.delegatedstaking.v1.Gateway/AdminDeleteAppDelegatedStaking"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	UpdateAppDelegatedStaking(ctx context.Context, in *UpdateAppDelegatedStakingRequest, opts ...grpc.CallOption) (*UpdateAppDelegatedStakingResponse, error)
	GetAppDelegatedStaking(ctx context.Context, in *GetAppDelegatedStakingRequest, opts ...grpc.CallOption) (*GetAppDelegatedStakingResponse, error)
	GetAppDelegatedStakings(ctx context.Context, in *GetAppDelegatedStakingsRequest, opts ...grpc.CallOption) (*GetAppDelegatedStakingsResponse, error)
	// Run by church admin
	AdminCreateAppDelegatedStaking(ctx context.Context, in *AdminCreateAppDelegatedStakingRequest, opts ...grpc.CallOption) (*AdminCreateAppDelegatedStakingResponse, error)
	AdminUpdateAppDelegatedStaking(ctx context.Context, in *AdminUpdateAppDelegatedStakingRequest, opts ...grpc.CallOption) (*AdminUpdateAppDelegatedStakingResponse, error)
	AdminGetAppDelegatedStakings(ctx context.Context, in *AdminGetAppDelegatedStakingsRequest, opts ...grpc.CallOption) (*AdminGetAppDelegatedStakingsResponse, error)
	AdminDeleteAppDelegatedStaking(ctx context.Context, in *AdminDeleteAppDelegatedStakingRequest, opts ...grpc.CallOption) (*AdminDeleteAppDelegatedStakingResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) UpdateAppDelegatedStaking(ctx context.Context, in *UpdateAppDelegatedStakingRequest, opts ...grpc.CallOption) (*UpdateAppDelegatedStakingResponse, error) {
	out := new(UpdateAppDelegatedStakingResponse)
	err := c.cc.Invoke(ctx, Gateway_UpdateAppDelegatedStaking_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetAppDelegatedStaking(ctx context.Context, in *GetAppDelegatedStakingRequest, opts ...grpc.CallOption) (*GetAppDelegatedStakingResponse, error) {
	out := new(GetAppDelegatedStakingResponse)
	err := c.cc.Invoke(ctx, Gateway_GetAppDelegatedStaking_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetAppDelegatedStakings(ctx context.Context, in *GetAppDelegatedStakingsRequest, opts ...grpc.CallOption) (*GetAppDelegatedStakingsResponse, error) {
	out := new(GetAppDelegatedStakingsResponse)
	err := c.cc.Invoke(ctx, Gateway_GetAppDelegatedStakings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminCreateAppDelegatedStaking(ctx context.Context, in *AdminCreateAppDelegatedStakingRequest, opts ...grpc.CallOption) (*AdminCreateAppDelegatedStakingResponse, error) {
	out := new(AdminCreateAppDelegatedStakingResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminCreateAppDelegatedStaking_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminUpdateAppDelegatedStaking(ctx context.Context, in *AdminUpdateAppDelegatedStakingRequest, opts ...grpc.CallOption) (*AdminUpdateAppDelegatedStakingResponse, error) {
	out := new(AdminUpdateAppDelegatedStakingResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminUpdateAppDelegatedStaking_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminGetAppDelegatedStakings(ctx context.Context, in *AdminGetAppDelegatedStakingsRequest, opts ...grpc.CallOption) (*AdminGetAppDelegatedStakingsResponse, error) {
	out := new(AdminGetAppDelegatedStakingsResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminGetAppDelegatedStakings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminDeleteAppDelegatedStaking(ctx context.Context, in *AdminDeleteAppDelegatedStakingRequest, opts ...grpc.CallOption) (*AdminDeleteAppDelegatedStakingResponse, error) {
	out := new(AdminDeleteAppDelegatedStakingResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminDeleteAppDelegatedStaking_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	UpdateAppDelegatedStaking(context.Context, *UpdateAppDelegatedStakingRequest) (*UpdateAppDelegatedStakingResponse, error)
	GetAppDelegatedStaking(context.Context, *GetAppDelegatedStakingRequest) (*GetAppDelegatedStakingResponse, error)
	GetAppDelegatedStakings(context.Context, *GetAppDelegatedStakingsRequest) (*GetAppDelegatedStakingsResponse, error)
	// Run by church admin
	AdminCreateAppDelegatedStaking(context.Context, *AdminCreateAppDelegatedStakingRequest) (*AdminCreateAppDelegatedStakingResponse, error)
	AdminUpdateAppDelegatedStaking(context.Context, *AdminUpdateAppDelegatedStakingRequest) (*AdminUpdateAppDelegatedStakingResponse, error)
	AdminGetAppDelegatedStakings(context.Context, *AdminGetAppDelegatedStakingsRequest) (*AdminGetAppDelegatedStakingsResponse, error)
	AdminDeleteAppDelegatedStaking(context.Context, *AdminDeleteAppDelegatedStakingRequest) (*AdminDeleteAppDelegatedStakingResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) UpdateAppDelegatedStaking(context.Context, *UpdateAppDelegatedStakingRequest) (*UpdateAppDelegatedStakingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppDelegatedStaking not implemented")
}
func (UnimplementedGatewayServer) GetAppDelegatedStaking(context.Context, *GetAppDelegatedStakingRequest) (*GetAppDelegatedStakingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppDelegatedStaking not implemented")
}
func (UnimplementedGatewayServer) GetAppDelegatedStakings(context.Context, *GetAppDelegatedStakingsRequest) (*GetAppDelegatedStakingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppDelegatedStakings not implemented")
}
func (UnimplementedGatewayServer) AdminCreateAppDelegatedStaking(context.Context, *AdminCreateAppDelegatedStakingRequest) (*AdminCreateAppDelegatedStakingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCreateAppDelegatedStaking not implemented")
}
func (UnimplementedGatewayServer) AdminUpdateAppDelegatedStaking(context.Context, *AdminUpdateAppDelegatedStakingRequest) (*AdminUpdateAppDelegatedStakingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateAppDelegatedStaking not implemented")
}
func (UnimplementedGatewayServer) AdminGetAppDelegatedStakings(context.Context, *AdminGetAppDelegatedStakingsRequest) (*AdminGetAppDelegatedStakingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetAppDelegatedStakings not implemented")
}
func (UnimplementedGatewayServer) AdminDeleteAppDelegatedStaking(context.Context, *AdminDeleteAppDelegatedStakingRequest) (*AdminDeleteAppDelegatedStakingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDeleteAppDelegatedStaking not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_UpdateAppDelegatedStaking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppDelegatedStakingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateAppDelegatedStaking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_UpdateAppDelegatedStaking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateAppDelegatedStaking(ctx, req.(*UpdateAppDelegatedStakingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetAppDelegatedStaking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppDelegatedStakingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetAppDelegatedStaking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetAppDelegatedStaking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetAppDelegatedStaking(ctx, req.(*GetAppDelegatedStakingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetAppDelegatedStakings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppDelegatedStakingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetAppDelegatedStakings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetAppDelegatedStakings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetAppDelegatedStakings(ctx, req.(*GetAppDelegatedStakingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminCreateAppDelegatedStaking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCreateAppDelegatedStakingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminCreateAppDelegatedStaking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminCreateAppDelegatedStaking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminCreateAppDelegatedStaking(ctx, req.(*AdminCreateAppDelegatedStakingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminUpdateAppDelegatedStaking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateAppDelegatedStakingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminUpdateAppDelegatedStaking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminUpdateAppDelegatedStaking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminUpdateAppDelegatedStaking(ctx, req.(*AdminUpdateAppDelegatedStakingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminGetAppDelegatedStakings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetAppDelegatedStakingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminGetAppDelegatedStakings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminGetAppDelegatedStakings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminGetAppDelegatedStakings(ctx, req.(*AdminGetAppDelegatedStakingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminDeleteAppDelegatedStaking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDeleteAppDelegatedStakingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminDeleteAppDelegatedStaking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminDeleteAppDelegatedStaking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminDeleteAppDelegatedStaking(ctx, req.(*AdminDeleteAppDelegatedStakingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "good.gateway.app.delegatedstaking.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateAppDelegatedStaking",
			Handler:    _Gateway_UpdateAppDelegatedStaking_Handler,
		},
		{
			MethodName: "GetAppDelegatedStaking",
			Handler:    _Gateway_GetAppDelegatedStaking_Handler,
		},
		{
			MethodName: "GetAppDelegatedStakings",
			Handler:    _Gateway_GetAppDelegatedStakings_Handler,
		},
		{
			MethodName: "AdminCreateAppDelegatedStaking",
			Handler:    _Gateway_AdminCreateAppDelegatedStaking_Handler,
		},
		{
			MethodName: "AdminUpdateAppDelegatedStaking",
			Handler:    _Gateway_AdminUpdateAppDelegatedStaking_Handler,
		},
		{
			MethodName: "AdminGetAppDelegatedStakings",
			Handler:    _Gateway_AdminGetAppDelegatedStakings_Handler,
		},
		{
			MethodName: "AdminDeleteAppDelegatedStaking",
			Handler:    _Gateway_AdminDeleteAppDelegatedStaking_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/good/gw/v1/app/delegatedstaking/delegatedstaking.proto",
}
