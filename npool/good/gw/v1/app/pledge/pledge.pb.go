// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.18.1
// source: npool/good/gw/v1/app/pledge/pledge.proto

package pledge

import (
	v1 "github.com/NpoolPlatform/message/npool/basetypes/good/v1"
	coin "github.com/NpoolPlatform/message/npool/good/gw/v1/good/coin"
	reward "github.com/NpoolPlatform/message/npool/good/gw/v1/good/coin/reward"
	description "github.com/NpoolPlatform/message/npool/good/mw/v1/app/good/description"
	color "github.com/NpoolPlatform/message/npool/good/mw/v1/app/good/display/color"
	name "github.com/NpoolPlatform/message/npool/good/mw/v1/app/good/display/name"
	label "github.com/NpoolPlatform/message/npool/good/mw/v1/app/good/label"
	poster "github.com/NpoolPlatform/message/npool/good/mw/v1/app/good/poster"
	required "github.com/NpoolPlatform/message/npool/good/mw/v1/app/good/required"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AppPledge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                           uint32                         `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID                        string                         `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty"`
	AppID                        string                         `protobuf:"bytes,30,opt,name=AppID,proto3" json:"AppID,omitempty"`
	AppName                      string                         `protobuf:"bytes,40,opt,name=AppName,proto3" json:"AppName,omitempty"`
	GoodID                       string                         `protobuf:"bytes,50,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
	PledgeID                     string                         `protobuf:"bytes,51,opt,name=PledgeID,proto3" json:"PledgeID,omitempty"`
	AppGoodID                    string                         `protobuf:"bytes,60,opt,name=AppGoodID,proto3" json:"AppGoodID,omitempty"`
	UnitPrice                    string                         `protobuf:"bytes,180,opt,name=UnitPrice,proto3" json:"UnitPrice,omitempty"`
	QuantityUnit                 string                         `protobuf:"bytes,190,opt,name=QuantityUnit,proto3" json:"QuantityUnit,omitempty"`
	QuantityUnitAmount           string                         `protobuf:"bytes,200,opt,name=QuantityUnitAmount,proto3" json:"QuantityUnitAmount,omitempty"`
	DeliveryAt                   uint32                         `protobuf:"varint,210,opt,name=DeliveryAt,proto3" json:"DeliveryAt,omitempty"`
	UnitLockDeposit              string                         `protobuf:"bytes,220,opt,name=UnitLockDeposit,proto3" json:"UnitLockDeposit,omitempty"`
	DurationDisplayType          v1.GoodDurationType            `protobuf:"varint,230,opt,name=DurationDisplayType,proto3,enum=basetypes.good.v1.GoodDurationType" json:"DurationDisplayType,omitempty"`
	GoodType                     v1.GoodType                    `protobuf:"varint,240,opt,name=GoodType,proto3,enum=basetypes.good.v1.GoodType" json:"GoodType,omitempty"`
	BenefitType                  v1.BenefitType                 `protobuf:"varint,250,opt,name=BenefitType,proto3,enum=basetypes.good.v1.BenefitType" json:"BenefitType,omitempty"`
	GoodName                     string                         `protobuf:"bytes,260,opt,name=GoodName,proto3" json:"GoodName,omitempty"`
	ServiceStartAt               uint32                         `protobuf:"varint,270,opt,name=ServiceStartAt,proto3" json:"ServiceStartAt,omitempty"`
	GoodStartMode                v1.GoodStartMode               `protobuf:"varint,280,opt,name=GoodStartMode,proto3,enum=basetypes.good.v1.GoodStartMode" json:"GoodStartMode,omitempty"`
	TestOnly                     bool                           `protobuf:"varint,290,opt,name=TestOnly,proto3" json:"TestOnly,omitempty"`
	BenefitIntervalHours         uint32                         `protobuf:"varint,300,opt,name=BenefitIntervalHours,proto3" json:"BenefitIntervalHours,omitempty"`
	GoodPurchasable              bool                           `protobuf:"varint,310,opt,name=GoodPurchasable,proto3" json:"GoodPurchasable,omitempty"`
	GoodOnline                   bool                           `protobuf:"varint,320,opt,name=GoodOnline,proto3" json:"GoodOnline,omitempty"`
	State                        v1.GoodState                   `protobuf:"varint,335,opt,name=State,proto3,enum=basetypes.good.v1.GoodState" json:"State,omitempty"`
	AppGoodPurchasable           bool                           `protobuf:"varint,340,opt,name=AppGoodPurchasable,proto3" json:"AppGoodPurchasable,omitempty"`
	AppGoodOnline                bool                           `protobuf:"varint,350,opt,name=AppGoodOnline,proto3" json:"AppGoodOnline,omitempty"`
	EnableProductPage            bool                           `protobuf:"varint,360,opt,name=EnableProductPage,proto3" json:"EnableProductPage,omitempty"`
	ProductPage                  string                         `protobuf:"bytes,370,opt,name=ProductPage,proto3" json:"ProductPage,omitempty"`
	Visible                      bool                           `protobuf:"varint,380,opt,name=Visible,proto3" json:"Visible,omitempty"`
	AppGoodName                  string                         `protobuf:"bytes,390,opt,name=AppGoodName,proto3" json:"AppGoodName,omitempty"`
	DisplayIndex                 int32                          `protobuf:"varint,400,opt,name=DisplayIndex,proto3" json:"DisplayIndex,omitempty"`
	Banner                       string                         `protobuf:"bytes,410,opt,name=Banner,proto3" json:"Banner,omitempty"`
	CancelMode                   v1.CancelMode                  `protobuf:"varint,420,opt,name=CancelMode,proto3,enum=basetypes.good.v1.CancelMode" json:"CancelMode,omitempty"`
	CancelableBeforeStartSeconds uint32                         `protobuf:"varint,430,opt,name=CancelableBeforeStartSeconds,proto3" json:"CancelableBeforeStartSeconds,omitempty"`
	EnableSetCommission          bool                           `protobuf:"varint,440,opt,name=EnableSetCommission,proto3" json:"EnableSetCommission,omitempty"`
	MinOrderAmount               string                         `protobuf:"bytes,450,opt,name=MinOrderAmount,proto3" json:"MinOrderAmount,omitempty"`
	MaxOrderAmount               string                         `protobuf:"bytes,460,opt,name=MaxOrderAmount,proto3" json:"MaxOrderAmount,omitempty"`
	MaxUserAmount                string                         `protobuf:"bytes,470,opt,name=MaxUserAmount,proto3" json:"MaxUserAmount,omitempty"`
	MinOrderDurationSeconds      uint32                         `protobuf:"varint,480,opt,name=MinOrderDurationSeconds,proto3" json:"MinOrderDurationSeconds,omitempty"`
	MaxOrderDurationSeconds      uint32                         `protobuf:"varint,490,opt,name=MaxOrderDurationSeconds,proto3" json:"MaxOrderDurationSeconds,omitempty"`
	SaleStartAt                  uint32                         `protobuf:"varint,500,opt,name=SaleStartAt,proto3" json:"SaleStartAt,omitempty"`
	SaleEndAt                    uint32                         `protobuf:"varint,510,opt,name=SaleEndAt,proto3" json:"SaleEndAt,omitempty"`
	SaleMode                     v1.GoodSaleMode                `protobuf:"varint,520,opt,name=SaleMode,proto3,enum=basetypes.good.v1.GoodSaleMode" json:"SaleMode,omitempty"`
	FixedDuration                bool                           `protobuf:"varint,530,opt,name=FixedDuration,proto3" json:"FixedDuration,omitempty"`
	PackageWithRequireds         bool                           `protobuf:"varint,540,opt,name=PackageWithRequireds,proto3" json:"PackageWithRequireds,omitempty"`
	Likes                        uint32                         `protobuf:"varint,660,opt,name=Likes,proto3" json:"Likes,omitempty"`
	Dislikes                     uint32                         `protobuf:"varint,670,opt,name=Dislikes,proto3" json:"Dislikes,omitempty"`
	Score                        string                         `protobuf:"bytes,680,opt,name=Score,proto3" json:"Score,omitempty"`
	ScoreCount                   uint32                         `protobuf:"varint,690,opt,name=ScoreCount,proto3" json:"ScoreCount,omitempty"`
	RecommendCount               uint32                         `protobuf:"varint,700,opt,name=RecommendCount,proto3" json:"RecommendCount,omitempty"`
	CommentCount                 uint32                         `protobuf:"varint,710,opt,name=CommentCount,proto3" json:"CommentCount,omitempty"`
	LastRewardAt                 uint32                         `protobuf:"varint,720,opt,name=LastRewardAt,proto3" json:"LastRewardAt,omitempty"`
	AppGoodStartMode             v1.GoodStartMode               `protobuf:"varint,730,opt,name=AppGoodStartMode,proto3,enum=basetypes.good.v1.GoodStartMode" json:"AppGoodStartMode,omitempty"`
	GoodCoins                    []*coin.GoodCoinInfo           `protobuf:"bytes,900,rep,name=GoodCoins,proto3" json:"GoodCoins,omitempty"`
	Descriptions                 []*description.DescriptionInfo `protobuf:"bytes,910,rep,name=Descriptions,proto3" json:"Descriptions,omitempty"`
	Posters                      []*poster.PosterInfo           `protobuf:"bytes,920,rep,name=Posters,proto3" json:"Posters,omitempty"`
	DisplayNames                 []*name.DisplayNameInfo        `protobuf:"bytes,930,rep,name=DisplayNames,proto3" json:"DisplayNames,omitempty"`
	DisplayColors                []*color.DisplayColorInfo      `protobuf:"bytes,940,rep,name=DisplayColors,proto3" json:"DisplayColors,omitempty"`
	Labels                       []*label.LabelInfo             `protobuf:"bytes,970,rep,name=Labels,proto3" json:"Labels,omitempty"`
	Rewards                      []*reward.RewardInfo           `protobuf:"bytes,820,rep,name=Rewards,proto3" json:"Rewards,omitempty"`
	Requireds                    []*required.RequiredInfo       `protobuf:"bytes,830,rep,name=Requireds,proto3" json:"Requireds,omitempty"`
	CreatedAt                    uint32                         `protobuf:"varint,1000,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt                    uint32                         `protobuf:"varint,1010,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (x *AppPledge) Reset() {
	*x = AppPledge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_pledge_pledge_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppPledge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppPledge) ProtoMessage() {}

func (x *AppPledge) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_pledge_pledge_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppPledge.ProtoReflect.Descriptor instead.
func (*AppPledge) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_pledge_pledge_proto_rawDescGZIP(), []int{0}
}

func (x *AppPledge) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *AppPledge) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *AppPledge) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *AppPledge) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *AppPledge) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *AppPledge) GetPledgeID() string {
	if x != nil {
		return x.PledgeID
	}
	return ""
}

func (x *AppPledge) GetAppGoodID() string {
	if x != nil {
		return x.AppGoodID
	}
	return ""
}

func (x *AppPledge) GetUnitPrice() string {
	if x != nil {
		return x.UnitPrice
	}
	return ""
}

func (x *AppPledge) GetQuantityUnit() string {
	if x != nil {
		return x.QuantityUnit
	}
	return ""
}

func (x *AppPledge) GetQuantityUnitAmount() string {
	if x != nil {
		return x.QuantityUnitAmount
	}
	return ""
}

func (x *AppPledge) GetDeliveryAt() uint32 {
	if x != nil {
		return x.DeliveryAt
	}
	return 0
}

func (x *AppPledge) GetUnitLockDeposit() string {
	if x != nil {
		return x.UnitLockDeposit
	}
	return ""
}

func (x *AppPledge) GetDurationDisplayType() v1.GoodDurationType {
	if x != nil {
		return x.DurationDisplayType
	}
	return v1.GoodDurationType(0)
}

func (x *AppPledge) GetGoodType() v1.GoodType {
	if x != nil {
		return x.GoodType
	}
	return v1.GoodType(0)
}

func (x *AppPledge) GetBenefitType() v1.BenefitType {
	if x != nil {
		return x.BenefitType
	}
	return v1.BenefitType(0)
}

func (x *AppPledge) GetGoodName() string {
	if x != nil {
		return x.GoodName
	}
	return ""
}

func (x *AppPledge) GetServiceStartAt() uint32 {
	if x != nil {
		return x.ServiceStartAt
	}
	return 0
}

func (x *AppPledge) GetGoodStartMode() v1.GoodStartMode {
	if x != nil {
		return x.GoodStartMode
	}
	return v1.GoodStartMode(0)
}

func (x *AppPledge) GetTestOnly() bool {
	if x != nil {
		return x.TestOnly
	}
	return false
}

func (x *AppPledge) GetBenefitIntervalHours() uint32 {
	if x != nil {
		return x.BenefitIntervalHours
	}
	return 0
}

func (x *AppPledge) GetGoodPurchasable() bool {
	if x != nil {
		return x.GoodPurchasable
	}
	return false
}

func (x *AppPledge) GetGoodOnline() bool {
	if x != nil {
		return x.GoodOnline
	}
	return false
}

func (x *AppPledge) GetState() v1.GoodState {
	if x != nil {
		return x.State
	}
	return v1.GoodState(0)
}

func (x *AppPledge) GetAppGoodPurchasable() bool {
	if x != nil {
		return x.AppGoodPurchasable
	}
	return false
}

func (x *AppPledge) GetAppGoodOnline() bool {
	if x != nil {
		return x.AppGoodOnline
	}
	return false
}

func (x *AppPledge) GetEnableProductPage() bool {
	if x != nil {
		return x.EnableProductPage
	}
	return false
}

func (x *AppPledge) GetProductPage() string {
	if x != nil {
		return x.ProductPage
	}
	return ""
}

func (x *AppPledge) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

func (x *AppPledge) GetAppGoodName() string {
	if x != nil {
		return x.AppGoodName
	}
	return ""
}

func (x *AppPledge) GetDisplayIndex() int32 {
	if x != nil {
		return x.DisplayIndex
	}
	return 0
}

func (x *AppPledge) GetBanner() string {
	if x != nil {
		return x.Banner
	}
	return ""
}

func (x *AppPledge) GetCancelMode() v1.CancelMode {
	if x != nil {
		return x.CancelMode
	}
	return v1.CancelMode(0)
}

func (x *AppPledge) GetCancelableBeforeStartSeconds() uint32 {
	if x != nil {
		return x.CancelableBeforeStartSeconds
	}
	return 0
}

func (x *AppPledge) GetEnableSetCommission() bool {
	if x != nil {
		return x.EnableSetCommission
	}
	return false
}

func (x *AppPledge) GetMinOrderAmount() string {
	if x != nil {
		return x.MinOrderAmount
	}
	return ""
}

func (x *AppPledge) GetMaxOrderAmount() string {
	if x != nil {
		return x.MaxOrderAmount
	}
	return ""
}

func (x *AppPledge) GetMaxUserAmount() string {
	if x != nil {
		return x.MaxUserAmount
	}
	return ""
}

func (x *AppPledge) GetMinOrderDurationSeconds() uint32 {
	if x != nil {
		return x.MinOrderDurationSeconds
	}
	return 0
}

func (x *AppPledge) GetMaxOrderDurationSeconds() uint32 {
	if x != nil {
		return x.MaxOrderDurationSeconds
	}
	return 0
}

func (x *AppPledge) GetSaleStartAt() uint32 {
	if x != nil {
		return x.SaleStartAt
	}
	return 0
}

func (x *AppPledge) GetSaleEndAt() uint32 {
	if x != nil {
		return x.SaleEndAt
	}
	return 0
}

func (x *AppPledge) GetSaleMode() v1.GoodSaleMode {
	if x != nil {
		return x.SaleMode
	}
	return v1.GoodSaleMode(0)
}

func (x *AppPledge) GetFixedDuration() bool {
	if x != nil {
		return x.FixedDuration
	}
	return false
}

func (x *AppPledge) GetPackageWithRequireds() bool {
	if x != nil {
		return x.PackageWithRequireds
	}
	return false
}

func (x *AppPledge) GetLikes() uint32 {
	if x != nil {
		return x.Likes
	}
	return 0
}

func (x *AppPledge) GetDislikes() uint32 {
	if x != nil {
		return x.Dislikes
	}
	return 0
}

func (x *AppPledge) GetScore() string {
	if x != nil {
		return x.Score
	}
	return ""
}

func (x *AppPledge) GetScoreCount() uint32 {
	if x != nil {
		return x.ScoreCount
	}
	return 0
}

func (x *AppPledge) GetRecommendCount() uint32 {
	if x != nil {
		return x.RecommendCount
	}
	return 0
}

func (x *AppPledge) GetCommentCount() uint32 {
	if x != nil {
		return x.CommentCount
	}
	return 0
}

func (x *AppPledge) GetLastRewardAt() uint32 {
	if x != nil {
		return x.LastRewardAt
	}
	return 0
}

func (x *AppPledge) GetAppGoodStartMode() v1.GoodStartMode {
	if x != nil {
		return x.AppGoodStartMode
	}
	return v1.GoodStartMode(0)
}

func (x *AppPledge) GetGoodCoins() []*coin.GoodCoinInfo {
	if x != nil {
		return x.GoodCoins
	}
	return nil
}

func (x *AppPledge) GetDescriptions() []*description.DescriptionInfo {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *AppPledge) GetPosters() []*poster.PosterInfo {
	if x != nil {
		return x.Posters
	}
	return nil
}

func (x *AppPledge) GetDisplayNames() []*name.DisplayNameInfo {
	if x != nil {
		return x.DisplayNames
	}
	return nil
}

func (x *AppPledge) GetDisplayColors() []*color.DisplayColorInfo {
	if x != nil {
		return x.DisplayColors
	}
	return nil
}

func (x *AppPledge) GetLabels() []*label.LabelInfo {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *AppPledge) GetRewards() []*reward.RewardInfo {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *AppPledge) GetRequireds() []*required.RequiredInfo {
	if x != nil {
		return x.Requireds
	}
	return nil
}

func (x *AppPledge) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *AppPledge) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type UpdateAppPledgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                           uint32            `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID                        string            `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty"`
	AppID                        string            `protobuf:"bytes,30,opt,name=AppID,proto3" json:"AppID,omitempty"`
	AppGoodID                    string            `protobuf:"bytes,40,opt,name=AppGoodID,proto3" json:"AppGoodID,omitempty"`
	Purchasable                  *bool             `protobuf:"varint,50,opt,name=Purchasable,proto3,oneof" json:"Purchasable,omitempty"`
	EnableProductPage            *bool             `protobuf:"varint,60,opt,name=EnableProductPage,proto3,oneof" json:"EnableProductPage,omitempty"`
	ProductPage                  *string           `protobuf:"bytes,70,opt,name=ProductPage,proto3,oneof" json:"ProductPage,omitempty"`
	Online                       *bool             `protobuf:"varint,80,opt,name=Online,proto3,oneof" json:"Online,omitempty"`
	Visible                      *bool             `protobuf:"varint,90,opt,name=Visible,proto3,oneof" json:"Visible,omitempty"`
	Name                         *string           `protobuf:"bytes,100,opt,name=Name,proto3,oneof" json:"Name,omitempty"`
	DisplayIndex                 *int32            `protobuf:"varint,110,opt,name=DisplayIndex,proto3,oneof" json:"DisplayIndex,omitempty"`
	Banner                       *string           `protobuf:"bytes,120,opt,name=Banner,proto3,oneof" json:"Banner,omitempty"`
	ServiceStartAt               *uint32           `protobuf:"varint,130,opt,name=ServiceStartAt,proto3,oneof" json:"ServiceStartAt,omitempty"`
	CancelMode                   *v1.CancelMode    `protobuf:"varint,140,opt,name=CancelMode,proto3,enum=basetypes.good.v1.CancelMode,oneof" json:"CancelMode,omitempty"`
	CancelableBeforeStartSeconds *uint32           `protobuf:"varint,150,opt,name=CancelableBeforeStartSeconds,proto3,oneof" json:"CancelableBeforeStartSeconds,omitempty"`
	EnableSetCommission          *bool             `protobuf:"varint,160,opt,name=EnableSetCommission,proto3,oneof" json:"EnableSetCommission,omitempty"`
	MinOrderAmount               *string           `protobuf:"bytes,170,opt,name=MinOrderAmount,proto3,oneof" json:"MinOrderAmount,omitempty"`
	MaxOrderAmount               *string           `protobuf:"bytes,180,opt,name=MaxOrderAmount,proto3,oneof" json:"MaxOrderAmount,omitempty"`
	MaxUserAmount                *string           `protobuf:"bytes,190,opt,name=MaxUserAmount,proto3,oneof" json:"MaxUserAmount,omitempty"`
	MinOrderDurationSeconds      *uint32           `protobuf:"varint,200,opt,name=MinOrderDurationSeconds,proto3,oneof" json:"MinOrderDurationSeconds,omitempty"`
	MaxOrderDurationSeconds      *uint32           `protobuf:"varint,210,opt,name=MaxOrderDurationSeconds,proto3,oneof" json:"MaxOrderDurationSeconds,omitempty"`
	UnitPrice                    *string           `protobuf:"bytes,220,opt,name=UnitPrice,proto3,oneof" json:"UnitPrice,omitempty"`
	SaleStartAt                  *uint32           `protobuf:"varint,230,opt,name=SaleStartAt,proto3,oneof" json:"SaleStartAt,omitempty"`
	SaleEndAt                    *uint32           `protobuf:"varint,240,opt,name=SaleEndAt,proto3,oneof" json:"SaleEndAt,omitempty"`
	SaleMode                     *v1.GoodSaleMode  `protobuf:"varint,250,opt,name=SaleMode,proto3,enum=basetypes.good.v1.GoodSaleMode,oneof" json:"SaleMode,omitempty"`
	FixedDuration                *bool             `protobuf:"varint,260,opt,name=FixedDuration,proto3,oneof" json:"FixedDuration,omitempty"`
	PackageWithRequireds         *bool             `protobuf:"varint,270,opt,name=PackageWithRequireds,proto3,oneof" json:"PackageWithRequireds,omitempty"`
	StartMode                    *v1.GoodStartMode `protobuf:"varint,280,opt,name=StartMode,proto3,enum=basetypes.good.v1.GoodStartMode,oneof" json:"StartMode,omitempty"`
}

func (x *UpdateAppPledgeRequest) Reset() {
	*x = UpdateAppPledgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_pledge_pledge_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppPledgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppPledgeRequest) ProtoMessage() {}

func (x *UpdateAppPledgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_pledge_pledge_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppPledgeRequest.ProtoReflect.Descriptor instead.
func (*UpdateAppPledgeRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_pledge_pledge_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateAppPledgeRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *UpdateAppPledgeRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *UpdateAppPledgeRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *UpdateAppPledgeRequest) GetAppGoodID() string {
	if x != nil {
		return x.AppGoodID
	}
	return ""
}

func (x *UpdateAppPledgeRequest) GetPurchasable() bool {
	if x != nil && x.Purchasable != nil {
		return *x.Purchasable
	}
	return false
}

func (x *UpdateAppPledgeRequest) GetEnableProductPage() bool {
	if x != nil && x.EnableProductPage != nil {
		return *x.EnableProductPage
	}
	return false
}

func (x *UpdateAppPledgeRequest) GetProductPage() string {
	if x != nil && x.ProductPage != nil {
		return *x.ProductPage
	}
	return ""
}

func (x *UpdateAppPledgeRequest) GetOnline() bool {
	if x != nil && x.Online != nil {
		return *x.Online
	}
	return false
}

func (x *UpdateAppPledgeRequest) GetVisible() bool {
	if x != nil && x.Visible != nil {
		return *x.Visible
	}
	return false
}

func (x *UpdateAppPledgeRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateAppPledgeRequest) GetDisplayIndex() int32 {
	if x != nil && x.DisplayIndex != nil {
		return *x.DisplayIndex
	}
	return 0
}

func (x *UpdateAppPledgeRequest) GetBanner() string {
	if x != nil && x.Banner != nil {
		return *x.Banner
	}
	return ""
}

func (x *UpdateAppPledgeRequest) GetServiceStartAt() uint32 {
	if x != nil && x.ServiceStartAt != nil {
		return *x.ServiceStartAt
	}
	return 0
}

func (x *UpdateAppPledgeRequest) GetCancelMode() v1.CancelMode {
	if x != nil && x.CancelMode != nil {
		return *x.CancelMode
	}
	return v1.CancelMode(0)
}

func (x *UpdateAppPledgeRequest) GetCancelableBeforeStartSeconds() uint32 {
	if x != nil && x.CancelableBeforeStartSeconds != nil {
		return *x.CancelableBeforeStartSeconds
	}
	return 0
}

func (x *UpdateAppPledgeRequest) GetEnableSetCommission() bool {
	if x != nil && x.EnableSetCommission != nil {
		return *x.EnableSetCommission
	}
	return false
}

func (x *UpdateAppPledgeRequest) GetMinOrderAmount() string {
	if x != nil && x.MinOrderAmount != nil {
		return *x.MinOrderAmount
	}
	return ""
}

func (x *UpdateAppPledgeRequest) GetMaxOrderAmount() string {
	if x != nil && x.MaxOrderAmount != nil {
		return *x.MaxOrderAmount
	}
	return ""
}

func (x *UpdateAppPledgeRequest) GetMaxUserAmount() string {
	if x != nil && x.MaxUserAmount != nil {
		return *x.MaxUserAmount
	}
	return ""
}

func (x *UpdateAppPledgeRequest) GetMinOrderDurationSeconds() uint32 {
	if x != nil && x.MinOrderDurationSeconds != nil {
		return *x.MinOrderDurationSeconds
	}
	return 0
}

func (x *UpdateAppPledgeRequest) GetMaxOrderDurationSeconds() uint32 {
	if x != nil && x.MaxOrderDurationSeconds != nil {
		return *x.MaxOrderDurationSeconds
	}
	return 0
}

func (x *UpdateAppPledgeRequest) GetUnitPrice() string {
	if x != nil && x.UnitPrice != nil {
		return *x.UnitPrice
	}
	return ""
}

func (x *UpdateAppPledgeRequest) GetSaleStartAt() uint32 {
	if x != nil && x.SaleStartAt != nil {
		return *x.SaleStartAt
	}
	return 0
}

func (x *UpdateAppPledgeRequest) GetSaleEndAt() uint32 {
	if x != nil && x.SaleEndAt != nil {
		return *x.SaleEndAt
	}
	return 0
}

func (x *UpdateAppPledgeRequest) GetSaleMode() v1.GoodSaleMode {
	if x != nil && x.SaleMode != nil {
		return *x.SaleMode
	}
	return v1.GoodSaleMode(0)
}

func (x *UpdateAppPledgeRequest) GetFixedDuration() bool {
	if x != nil && x.FixedDuration != nil {
		return *x.FixedDuration
	}
	return false
}

func (x *UpdateAppPledgeRequest) GetPackageWithRequireds() bool {
	if x != nil && x.PackageWithRequireds != nil {
		return *x.PackageWithRequireds
	}
	return false
}

func (x *UpdateAppPledgeRequest) GetStartMode() v1.GoodStartMode {
	if x != nil && x.StartMode != nil {
		return *x.StartMode
	}
	return v1.GoodStartMode(0)
}

type UpdateAppPledgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppPledge `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateAppPledgeResponse) Reset() {
	*x = UpdateAppPledgeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_pledge_pledge_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppPledgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppPledgeResponse) ProtoMessage() {}

func (x *UpdateAppPledgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_pledge_pledge_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppPledgeResponse.ProtoReflect.Descriptor instead.
func (*UpdateAppPledgeResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_pledge_pledge_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateAppPledgeResponse) GetInfo() *AppPledge {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetAppPledgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppGoodID string `protobuf:"bytes,10,opt,name=AppGoodID,proto3" json:"AppGoodID,omitempty"`
}

func (x *GetAppPledgeRequest) Reset() {
	*x = GetAppPledgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_pledge_pledge_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppPledgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppPledgeRequest) ProtoMessage() {}

func (x *GetAppPledgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_pledge_pledge_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppPledgeRequest.ProtoReflect.Descriptor instead.
func (*GetAppPledgeRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_pledge_pledge_proto_rawDescGZIP(), []int{3}
}

func (x *GetAppPledgeRequest) GetAppGoodID() string {
	if x != nil {
		return x.AppGoodID
	}
	return ""
}

type GetAppPledgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppPledge `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetAppPledgeResponse) Reset() {
	*x = GetAppPledgeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_pledge_pledge_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppPledgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppPledgeResponse) ProtoMessage() {}

func (x *GetAppPledgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_pledge_pledge_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppPledgeResponse.ProtoReflect.Descriptor instead.
func (*GetAppPledgeResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_pledge_pledge_proto_rawDescGZIP(), []int{4}
}

func (x *GetAppPledgeResponse) GetInfo() *AppPledge {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetAppPledgesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID  string `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetAppPledgesRequest) Reset() {
	*x = GetAppPledgesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_pledge_pledge_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppPledgesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppPledgesRequest) ProtoMessage() {}

func (x *GetAppPledgesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_pledge_pledge_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppPledgesRequest.ProtoReflect.Descriptor instead.
func (*GetAppPledgesRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_pledge_pledge_proto_rawDescGZIP(), []int{5}
}

func (x *GetAppPledgesRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetAppPledgesRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetAppPledgesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetAppPledgesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*AppPledge `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32       `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetAppPledgesResponse) Reset() {
	*x = GetAppPledgesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_pledge_pledge_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppPledgesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppPledgesResponse) ProtoMessage() {}

func (x *GetAppPledgesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_pledge_pledge_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppPledgesResponse.ProtoReflect.Descriptor instead.
func (*GetAppPledgesResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_pledge_pledge_proto_rawDescGZIP(), []int{6}
}

func (x *GetAppPledgesResponse) GetInfos() []*AppPledge {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetAppPledgesResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type AdminCreateAppPledgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetAppID                  string            `protobuf:"bytes,10,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
	GoodID                       string            `protobuf:"bytes,20,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
	Purchasable                  *bool             `protobuf:"varint,30,opt,name=Purchasable,proto3,oneof" json:"Purchasable,omitempty"`
	EnableProductPage            *bool             `protobuf:"varint,40,opt,name=EnableProductPage,proto3,oneof" json:"EnableProductPage,omitempty"`
	ProductPage                  *string           `protobuf:"bytes,50,opt,name=ProductPage,proto3,oneof" json:"ProductPage,omitempty"`
	Online                       *bool             `protobuf:"varint,60,opt,name=Online,proto3,oneof" json:"Online,omitempty"`
	Visible                      *bool             `protobuf:"varint,70,opt,name=Visible,proto3,oneof" json:"Visible,omitempty"`
	Name                         string            `protobuf:"bytes,80,opt,name=Name,proto3" json:"Name,omitempty"`
	DisplayIndex                 *int32            `protobuf:"varint,90,opt,name=DisplayIndex,proto3,oneof" json:"DisplayIndex,omitempty"`
	Banner                       *string           `protobuf:"bytes,100,opt,name=Banner,proto3,oneof" json:"Banner,omitempty"`
	ServiceStartAt               uint32            `protobuf:"varint,110,opt,name=ServiceStartAt,proto3" json:"ServiceStartAt,omitempty"`
	CancelMode                   *v1.CancelMode    `protobuf:"varint,120,opt,name=CancelMode,proto3,enum=basetypes.good.v1.CancelMode,oneof" json:"CancelMode,omitempty"`
	CancelableBeforeStartSeconds *uint32           `protobuf:"varint,130,opt,name=CancelableBeforeStartSeconds,proto3,oneof" json:"CancelableBeforeStartSeconds,omitempty"`
	EnableSetCommission          *bool             `protobuf:"varint,140,opt,name=EnableSetCommission,proto3,oneof" json:"EnableSetCommission,omitempty"`
	MinOrderAmount               string            `protobuf:"bytes,150,opt,name=MinOrderAmount,proto3" json:"MinOrderAmount,omitempty"`
	MaxOrderAmount               string            `protobuf:"bytes,160,opt,name=MaxOrderAmount,proto3" json:"MaxOrderAmount,omitempty"`
	MaxUserAmount                *string           `protobuf:"bytes,170,opt,name=MaxUserAmount,proto3,oneof" json:"MaxUserAmount,omitempty"`
	MinOrderDurationSeconds      uint32            `protobuf:"varint,180,opt,name=MinOrderDurationSeconds,proto3" json:"MinOrderDurationSeconds,omitempty"`
	MaxOrderDurationSeconds      *uint32           `protobuf:"varint,190,opt,name=MaxOrderDurationSeconds,proto3,oneof" json:"MaxOrderDurationSeconds,omitempty"`
	UnitPrice                    string            `protobuf:"bytes,200,opt,name=UnitPrice,proto3" json:"UnitPrice,omitempty"`
	SaleStartAt                  uint32            `protobuf:"varint,210,opt,name=SaleStartAt,proto3" json:"SaleStartAt,omitempty"`
	SaleEndAt                    uint32            `protobuf:"varint,220,opt,name=SaleEndAt,proto3" json:"SaleEndAt,omitempty"`
	SaleMode                     v1.GoodSaleMode   `protobuf:"varint,230,opt,name=SaleMode,proto3,enum=basetypes.good.v1.GoodSaleMode" json:"SaleMode,omitempty"`
	FixedDuration                *bool             `protobuf:"varint,240,opt,name=FixedDuration,proto3,oneof" json:"FixedDuration,omitempty"`
	PackageWithRequireds         *bool             `protobuf:"varint,250,opt,name=PackageWithRequireds,proto3,oneof" json:"PackageWithRequireds,omitempty"`
	StartMode                    *v1.GoodStartMode `protobuf:"varint,260,opt,name=StartMode,proto3,enum=basetypes.good.v1.GoodStartMode,oneof" json:"StartMode,omitempty"`
}

func (x *AdminCreateAppPledgeRequest) Reset() {
	*x = AdminCreateAppPledgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_pledge_pledge_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminCreateAppPledgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminCreateAppPledgeRequest) ProtoMessage() {}

func (x *AdminCreateAppPledgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_pledge_pledge_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminCreateAppPledgeRequest.ProtoReflect.Descriptor instead.
func (*AdminCreateAppPledgeRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_pledge_pledge_proto_rawDescGZIP(), []int{7}
}

func (x *AdminCreateAppPledgeRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

func (x *AdminCreateAppPledgeRequest) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *AdminCreateAppPledgeRequest) GetPurchasable() bool {
	if x != nil && x.Purchasable != nil {
		return *x.Purchasable
	}
	return false
}

func (x *AdminCreateAppPledgeRequest) GetEnableProductPage() bool {
	if x != nil && x.EnableProductPage != nil {
		return *x.EnableProductPage
	}
	return false
}

func (x *AdminCreateAppPledgeRequest) GetProductPage() string {
	if x != nil && x.ProductPage != nil {
		return *x.ProductPage
	}
	return ""
}

func (x *AdminCreateAppPledgeRequest) GetOnline() bool {
	if x != nil && x.Online != nil {
		return *x.Online
	}
	return false
}

func (x *AdminCreateAppPledgeRequest) GetVisible() bool {
	if x != nil && x.Visible != nil {
		return *x.Visible
	}
	return false
}

func (x *AdminCreateAppPledgeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AdminCreateAppPledgeRequest) GetDisplayIndex() int32 {
	if x != nil && x.DisplayIndex != nil {
		return *x.DisplayIndex
	}
	return 0
}

func (x *AdminCreateAppPledgeRequest) GetBanner() string {
	if x != nil && x.Banner != nil {
		return *x.Banner
	}
	return ""
}

func (x *AdminCreateAppPledgeRequest) GetServiceStartAt() uint32 {
	if x != nil {
		return x.ServiceStartAt
	}
	return 0
}

func (x *AdminCreateAppPledgeRequest) GetCancelMode() v1.CancelMode {
	if x != nil && x.CancelMode != nil {
		return *x.CancelMode
	}
	return v1.CancelMode(0)
}

func (x *AdminCreateAppPledgeRequest) GetCancelableBeforeStartSeconds() uint32 {
	if x != nil && x.CancelableBeforeStartSeconds != nil {
		return *x.CancelableBeforeStartSeconds
	}
	return 0
}

func (x *AdminCreateAppPledgeRequest) GetEnableSetCommission() bool {
	if x != nil && x.EnableSetCommission != nil {
		return *x.EnableSetCommission
	}
	return false
}

func (x *AdminCreateAppPledgeRequest) GetMinOrderAmount() string {
	if x != nil {
		return x.MinOrderAmount
	}
	return ""
}

func (x *AdminCreateAppPledgeRequest) GetMaxOrderAmount() string {
	if x != nil {
		return x.MaxOrderAmount
	}
	return ""
}

func (x *AdminCreateAppPledgeRequest) GetMaxUserAmount() string {
	if x != nil && x.MaxUserAmount != nil {
		return *x.MaxUserAmount
	}
	return ""
}

func (x *AdminCreateAppPledgeRequest) GetMinOrderDurationSeconds() uint32 {
	if x != nil {
		return x.MinOrderDurationSeconds
	}
	return 0
}

func (x *AdminCreateAppPledgeRequest) GetMaxOrderDurationSeconds() uint32 {
	if x != nil && x.MaxOrderDurationSeconds != nil {
		return *x.MaxOrderDurationSeconds
	}
	return 0
}

func (x *AdminCreateAppPledgeRequest) GetUnitPrice() string {
	if x != nil {
		return x.UnitPrice
	}
	return ""
}

func (x *AdminCreateAppPledgeRequest) GetSaleStartAt() uint32 {
	if x != nil {
		return x.SaleStartAt
	}
	return 0
}

func (x *AdminCreateAppPledgeRequest) GetSaleEndAt() uint32 {
	if x != nil {
		return x.SaleEndAt
	}
	return 0
}

func (x *AdminCreateAppPledgeRequest) GetSaleMode() v1.GoodSaleMode {
	if x != nil {
		return x.SaleMode
	}
	return v1.GoodSaleMode(0)
}

func (x *AdminCreateAppPledgeRequest) GetFixedDuration() bool {
	if x != nil && x.FixedDuration != nil {
		return *x.FixedDuration
	}
	return false
}

func (x *AdminCreateAppPledgeRequest) GetPackageWithRequireds() bool {
	if x != nil && x.PackageWithRequireds != nil {
		return *x.PackageWithRequireds
	}
	return false
}

func (x *AdminCreateAppPledgeRequest) GetStartMode() v1.GoodStartMode {
	if x != nil && x.StartMode != nil {
		return *x.StartMode
	}
	return v1.GoodStartMode(0)
}

type AdminCreateAppPledgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppPledge `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *AdminCreateAppPledgeResponse) Reset() {
	*x = AdminCreateAppPledgeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_pledge_pledge_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminCreateAppPledgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminCreateAppPledgeResponse) ProtoMessage() {}

func (x *AdminCreateAppPledgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_pledge_pledge_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminCreateAppPledgeResponse.ProtoReflect.Descriptor instead.
func (*AdminCreateAppPledgeResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_pledge_pledge_proto_rawDescGZIP(), []int{8}
}

func (x *AdminCreateAppPledgeResponse) GetInfo() *AppPledge {
	if x != nil {
		return x.Info
	}
	return nil
}

type AdminUpdateAppPledgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                           uint32            `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID                        string            `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty"`
	TargetAppID                  string            `protobuf:"bytes,30,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
	AppGoodID                    string            `protobuf:"bytes,40,opt,name=AppGoodID,proto3" json:"AppGoodID,omitempty"`
	Purchasable                  *bool             `protobuf:"varint,50,opt,name=Purchasable,proto3,oneof" json:"Purchasable,omitempty"`
	EnableProductPage            *bool             `protobuf:"varint,60,opt,name=EnableProductPage,proto3,oneof" json:"EnableProductPage,omitempty"`
	ProductPage                  *string           `protobuf:"bytes,70,opt,name=ProductPage,proto3,oneof" json:"ProductPage,omitempty"`
	Online                       *bool             `protobuf:"varint,80,opt,name=Online,proto3,oneof" json:"Online,omitempty"`
	Visible                      *bool             `protobuf:"varint,90,opt,name=Visible,proto3,oneof" json:"Visible,omitempty"`
	Name                         *string           `protobuf:"bytes,100,opt,name=Name,proto3,oneof" json:"Name,omitempty"`
	DisplayIndex                 *int32            `protobuf:"varint,110,opt,name=DisplayIndex,proto3,oneof" json:"DisplayIndex,omitempty"`
	Banner                       *string           `protobuf:"bytes,120,opt,name=Banner,proto3,oneof" json:"Banner,omitempty"`
	ServiceStartAt               *uint32           `protobuf:"varint,130,opt,name=ServiceStartAt,proto3,oneof" json:"ServiceStartAt,omitempty"`
	CancelMode                   *v1.CancelMode    `protobuf:"varint,140,opt,name=CancelMode,proto3,enum=basetypes.good.v1.CancelMode,oneof" json:"CancelMode,omitempty"`
	CancelableBeforeStartSeconds *uint32           `protobuf:"varint,150,opt,name=CancelableBeforeStartSeconds,proto3,oneof" json:"CancelableBeforeStartSeconds,omitempty"`
	EnableSetCommission          *bool             `protobuf:"varint,160,opt,name=EnableSetCommission,proto3,oneof" json:"EnableSetCommission,omitempty"`
	MinOrderAmount               *string           `protobuf:"bytes,170,opt,name=MinOrderAmount,proto3,oneof" json:"MinOrderAmount,omitempty"`
	MaxOrderAmount               *string           `protobuf:"bytes,180,opt,name=MaxOrderAmount,proto3,oneof" json:"MaxOrderAmount,omitempty"`
	MaxUserAmount                *string           `protobuf:"bytes,190,opt,name=MaxUserAmount,proto3,oneof" json:"MaxUserAmount,omitempty"`
	MinOrderDurationSeconds      *uint32           `protobuf:"varint,200,opt,name=MinOrderDurationSeconds,proto3,oneof" json:"MinOrderDurationSeconds,omitempty"`
	MaxOrderDurationSeconds      *uint32           `protobuf:"varint,210,opt,name=MaxOrderDurationSeconds,proto3,oneof" json:"MaxOrderDurationSeconds,omitempty"`
	UnitPrice                    *string           `protobuf:"bytes,220,opt,name=UnitPrice,proto3,oneof" json:"UnitPrice,omitempty"`
	SaleStartAt                  *uint32           `protobuf:"varint,230,opt,name=SaleStartAt,proto3,oneof" json:"SaleStartAt,omitempty"`
	SaleEndAt                    *uint32           `protobuf:"varint,240,opt,name=SaleEndAt,proto3,oneof" json:"SaleEndAt,omitempty"`
	SaleMode                     *v1.GoodSaleMode  `protobuf:"varint,250,opt,name=SaleMode,proto3,enum=basetypes.good.v1.GoodSaleMode,oneof" json:"SaleMode,omitempty"`
	FixedDuration                *bool             `protobuf:"varint,260,opt,name=FixedDuration,proto3,oneof" json:"FixedDuration,omitempty"`
	PackageWithRequireds         *bool             `protobuf:"varint,270,opt,name=PackageWithRequireds,proto3,oneof" json:"PackageWithRequireds,omitempty"`
	StartMode                    *v1.GoodStartMode `protobuf:"varint,280,opt,name=StartMode,proto3,enum=basetypes.good.v1.GoodStartMode,oneof" json:"StartMode,omitempty"`
}

func (x *AdminUpdateAppPledgeRequest) Reset() {
	*x = AdminUpdateAppPledgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_pledge_pledge_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminUpdateAppPledgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminUpdateAppPledgeRequest) ProtoMessage() {}

func (x *AdminUpdateAppPledgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_pledge_pledge_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminUpdateAppPledgeRequest.ProtoReflect.Descriptor instead.
func (*AdminUpdateAppPledgeRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_pledge_pledge_proto_rawDescGZIP(), []int{9}
}

func (x *AdminUpdateAppPledgeRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *AdminUpdateAppPledgeRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *AdminUpdateAppPledgeRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

func (x *AdminUpdateAppPledgeRequest) GetAppGoodID() string {
	if x != nil {
		return x.AppGoodID
	}
	return ""
}

func (x *AdminUpdateAppPledgeRequest) GetPurchasable() bool {
	if x != nil && x.Purchasable != nil {
		return *x.Purchasable
	}
	return false
}

func (x *AdminUpdateAppPledgeRequest) GetEnableProductPage() bool {
	if x != nil && x.EnableProductPage != nil {
		return *x.EnableProductPage
	}
	return false
}

func (x *AdminUpdateAppPledgeRequest) GetProductPage() string {
	if x != nil && x.ProductPage != nil {
		return *x.ProductPage
	}
	return ""
}

func (x *AdminUpdateAppPledgeRequest) GetOnline() bool {
	if x != nil && x.Online != nil {
		return *x.Online
	}
	return false
}

func (x *AdminUpdateAppPledgeRequest) GetVisible() bool {
	if x != nil && x.Visible != nil {
		return *x.Visible
	}
	return false
}

func (x *AdminUpdateAppPledgeRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *AdminUpdateAppPledgeRequest) GetDisplayIndex() int32 {
	if x != nil && x.DisplayIndex != nil {
		return *x.DisplayIndex
	}
	return 0
}

func (x *AdminUpdateAppPledgeRequest) GetBanner() string {
	if x != nil && x.Banner != nil {
		return *x.Banner
	}
	return ""
}

func (x *AdminUpdateAppPledgeRequest) GetServiceStartAt() uint32 {
	if x != nil && x.ServiceStartAt != nil {
		return *x.ServiceStartAt
	}
	return 0
}

func (x *AdminUpdateAppPledgeRequest) GetCancelMode() v1.CancelMode {
	if x != nil && x.CancelMode != nil {
		return *x.CancelMode
	}
	return v1.CancelMode(0)
}

func (x *AdminUpdateAppPledgeRequest) GetCancelableBeforeStartSeconds() uint32 {
	if x != nil && x.CancelableBeforeStartSeconds != nil {
		return *x.CancelableBeforeStartSeconds
	}
	return 0
}

func (x *AdminUpdateAppPledgeRequest) GetEnableSetCommission() bool {
	if x != nil && x.EnableSetCommission != nil {
		return *x.EnableSetCommission
	}
	return false
}

func (x *AdminUpdateAppPledgeRequest) GetMinOrderAmount() string {
	if x != nil && x.MinOrderAmount != nil {
		return *x.MinOrderAmount
	}
	return ""
}

func (x *AdminUpdateAppPledgeRequest) GetMaxOrderAmount() string {
	if x != nil && x.MaxOrderAmount != nil {
		return *x.MaxOrderAmount
	}
	return ""
}

func (x *AdminUpdateAppPledgeRequest) GetMaxUserAmount() string {
	if x != nil && x.MaxUserAmount != nil {
		return *x.MaxUserAmount
	}
	return ""
}

func (x *AdminUpdateAppPledgeRequest) GetMinOrderDurationSeconds() uint32 {
	if x != nil && x.MinOrderDurationSeconds != nil {
		return *x.MinOrderDurationSeconds
	}
	return 0
}

func (x *AdminUpdateAppPledgeRequest) GetMaxOrderDurationSeconds() uint32 {
	if x != nil && x.MaxOrderDurationSeconds != nil {
		return *x.MaxOrderDurationSeconds
	}
	return 0
}

func (x *AdminUpdateAppPledgeRequest) GetUnitPrice() string {
	if x != nil && x.UnitPrice != nil {
		return *x.UnitPrice
	}
	return ""
}

func (x *AdminUpdateAppPledgeRequest) GetSaleStartAt() uint32 {
	if x != nil && x.SaleStartAt != nil {
		return *x.SaleStartAt
	}
	return 0
}

func (x *AdminUpdateAppPledgeRequest) GetSaleEndAt() uint32 {
	if x != nil && x.SaleEndAt != nil {
		return *x.SaleEndAt
	}
	return 0
}

func (x *AdminUpdateAppPledgeRequest) GetSaleMode() v1.GoodSaleMode {
	if x != nil && x.SaleMode != nil {
		return *x.SaleMode
	}
	return v1.GoodSaleMode(0)
}

func (x *AdminUpdateAppPledgeRequest) GetFixedDuration() bool {
	if x != nil && x.FixedDuration != nil {
		return *x.FixedDuration
	}
	return false
}

func (x *AdminUpdateAppPledgeRequest) GetPackageWithRequireds() bool {
	if x != nil && x.PackageWithRequireds != nil {
		return *x.PackageWithRequireds
	}
	return false
}

func (x *AdminUpdateAppPledgeRequest) GetStartMode() v1.GoodStartMode {
	if x != nil && x.StartMode != nil {
		return *x.StartMode
	}
	return v1.GoodStartMode(0)
}

type AdminUpdateAppPledgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppPledge `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *AdminUpdateAppPledgeResponse) Reset() {
	*x = AdminUpdateAppPledgeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_pledge_pledge_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminUpdateAppPledgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminUpdateAppPledgeResponse) ProtoMessage() {}

func (x *AdminUpdateAppPledgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_pledge_pledge_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminUpdateAppPledgeResponse.ProtoReflect.Descriptor instead.
func (*AdminUpdateAppPledgeResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_pledge_pledge_proto_rawDescGZIP(), []int{10}
}

func (x *AdminUpdateAppPledgeResponse) GetInfo() *AppPledge {
	if x != nil {
		return x.Info
	}
	return nil
}

type AdminGetAppPledgesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetAppID string `protobuf:"bytes,10,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
	Offset      int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit       int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *AdminGetAppPledgesRequest) Reset() {
	*x = AdminGetAppPledgesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_pledge_pledge_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminGetAppPledgesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminGetAppPledgesRequest) ProtoMessage() {}

func (x *AdminGetAppPledgesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_pledge_pledge_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminGetAppPledgesRequest.ProtoReflect.Descriptor instead.
func (*AdminGetAppPledgesRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_pledge_pledge_proto_rawDescGZIP(), []int{11}
}

func (x *AdminGetAppPledgesRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

func (x *AdminGetAppPledgesRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *AdminGetAppPledgesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type AdminGetAppPledgesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*AppPledge `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32       `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *AdminGetAppPledgesResponse) Reset() {
	*x = AdminGetAppPledgesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_pledge_pledge_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminGetAppPledgesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminGetAppPledgesResponse) ProtoMessage() {}

func (x *AdminGetAppPledgesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_pledge_pledge_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminGetAppPledgesResponse.ProtoReflect.Descriptor instead.
func (*AdminGetAppPledgesResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_pledge_pledge_proto_rawDescGZIP(), []int{12}
}

func (x *AdminGetAppPledgesResponse) GetInfos() []*AppPledge {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *AdminGetAppPledgesResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type AdminDeleteAppPledgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID       string `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty"`
	TargetAppID string `protobuf:"bytes,30,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
	AppGoodID   string `protobuf:"bytes,40,opt,name=AppGoodID,proto3" json:"AppGoodID,omitempty"`
}

func (x *AdminDeleteAppPledgeRequest) Reset() {
	*x = AdminDeleteAppPledgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_pledge_pledge_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminDeleteAppPledgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminDeleteAppPledgeRequest) ProtoMessage() {}

func (x *AdminDeleteAppPledgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_pledge_pledge_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminDeleteAppPledgeRequest.ProtoReflect.Descriptor instead.
func (*AdminDeleteAppPledgeRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_pledge_pledge_proto_rawDescGZIP(), []int{13}
}

func (x *AdminDeleteAppPledgeRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *AdminDeleteAppPledgeRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *AdminDeleteAppPledgeRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

func (x *AdminDeleteAppPledgeRequest) GetAppGoodID() string {
	if x != nil {
		return x.AppGoodID
	}
	return ""
}

type AdminDeleteAppPledgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppPledge `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *AdminDeleteAppPledgeResponse) Reset() {
	*x = AdminDeleteAppPledgeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_app_pledge_pledge_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminDeleteAppPledgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminDeleteAppPledgeResponse) ProtoMessage() {}

func (x *AdminDeleteAppPledgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_app_pledge_pledge_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminDeleteAppPledgeResponse.ProtoReflect.Descriptor instead.
func (*AdminDeleteAppPledgeResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_app_pledge_pledge_proto_rawDescGZIP(), []int{14}
}

func (x *AdminDeleteAppPledgeResponse) GetInfo() *AppPledge {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_good_gw_v1_app_pledge_pledge_proto protoreflect.FileDescriptor

var file_npool_good_gw_v1_app_pledge_pledge_proto_rawDesc = []byte{
	0x0a, 0x28, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x67, 0x77, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x70, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x6e, 0x70, 0x6f, 0x6f, 0x6c,
	0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x67, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x6f, 0x6f, 0x64,
	0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x37, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x6d, 0x77, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x6e, 0x70, 0x6f, 0x6f, 0x6c,
	0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f,
	0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x70, 0x6f, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f,
	0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67,
	0x6f, 0x6f, 0x64, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f,
	0x64, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67, 0x6f, 0x6f, 0x64,
	0x2f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x2f, 0x6e, 0x61,
	0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f,
	0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67,
	0x6f, 0x6f, 0x64, 0x2f, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x2f, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x2f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x6e,
	0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x70, 0x70, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x2f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x67, 0x77, 0x2f,
	0x76, 0x31, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xe2, 0x16, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x70,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x70, 0x70,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x44, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x47,
	0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x70, 0x70,
	0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x09, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x55, 0x6e, 0x69, 0x74,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x55, 0x6e, 0x69, 0x74, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x2f, 0x0a, 0x12, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0a, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x74, 0x18, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0a, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x74, 0x12, 0x29, 0x0a, 0x0f,
	0x55, 0x6e, 0x69, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18,
	0xdc, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x55, 0x6e, 0x69, 0x74, 0x4c, 0x6f, 0x63, 0x6b,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x56, 0x0a, 0x13, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0xe6,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x13, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x38, 0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0xf0, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x42, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x08,
	0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x84, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x8e, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x74, 0x12, 0x47, 0x0a, 0x0d, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x18, 0x98, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x47, 0x6f,
	0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x54,
	0x65, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0xa2, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x54, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x33, 0x0a, 0x14, 0x42, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x48, 0x6f, 0x75, 0x72, 0x73,
	0x18, 0xac, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x29, 0x0a,
	0x0f, 0x47, 0x6f, 0x6f, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0xb6, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x47, 0x6f, 0x6f, 0x64, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x47, 0x6f, 0x6f, 0x64,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0xc0, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x47,
	0x6f, 0x6f, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x18, 0xcf, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2f,
	0x0a, 0x12, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0xd4, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x41, 0x70, 0x70,
	0x47, 0x6f, 0x6f, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x25, 0x0a, 0x0d, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0xde, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x2d, 0x0a, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x18, 0xe8, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x18, 0xf2, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x07, 0x56, 0x69, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x18, 0xfc, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x56, 0x69, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x86, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x70, 0x70, 0x47, 0x6f,
	0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x90, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x17, 0x0a, 0x06, 0x42,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x9a, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x6f,
	0x64, 0x65, 0x18, 0xa4, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x1c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0xae, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x31, 0x0a, 0x13, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0xb8, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0e,
	0x4d, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xc2,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4d, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0e, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xcc, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25,
	0x0a, 0x0d, 0x4d, 0x61, 0x78, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0xd6, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x4d, 0x61, 0x78, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x39, 0x0a, 0x17, 0x4d, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0xe0, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x4d, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x39, 0x0a, 0x17, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0xea, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x17, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0b, 0x53,
	0x61, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0xf4, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x53, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x09, 0x53, 0x61, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18, 0xfe, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x53, 0x61, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x3c, 0x0a,
	0x08, 0x53, 0x61, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x88, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1f, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x61, 0x6c, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x08, 0x53, 0x61, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x92, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x46, 0x69, 0x78, 0x65, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x14, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x73, 0x18, 0x9c, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x14, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x73, 0x12, 0x15, 0x0a, 0x05, 0x4c, 0x69, 0x6b, 0x65, 0x73,
	0x18, 0x94, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x12, 0x1b,
	0x0a, 0x08, 0x44, 0x69, 0x73, 0x6c, 0x69, 0x6b, 0x65, 0x73, 0x18, 0x9e, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x44, 0x69, 0x73, 0x6c, 0x69, 0x6b, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x05, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x18, 0xa8, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0xb2, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xbc, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0c,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xc6, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x23, 0x0a, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41,
	0x74, 0x18, 0xd0, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x41, 0x74, 0x12, 0x4d, 0x0a, 0x10, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f,
	0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0xda, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x10, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69,
	0x6e, 0x73, 0x18, 0x84, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x5e,
	0x0a, 0x0c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x8e,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x31, 0x2e, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4a,
	0x0a, 0x07, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x98, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x70, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x07, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x5f, 0x0a, 0x0c, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0xa2, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x63, 0x0a, 0x0d, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0xac, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73,
	0x12, 0x46, 0x0a, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0xca, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x48, 0x0a, 0x07, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x18, 0xb4, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e,
	0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x12, 0x53, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x73, 0x18,
	0xbe, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x31, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0xf2, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x99, 0x0d, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x70, 0x70, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x0b, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x00, 0x52, 0x0b, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x31, 0x0a, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x11,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x06, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x56, 0x69, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x08, 0x48, 0x04, 0x52, 0x07, 0x56, 0x69, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x27, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x6e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x42, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x06, 0x42, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x08, 0x52, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x6f,
	0x64, 0x65, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x09, 0x52, 0x0a, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x1c, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x0a, 0x52, 0x1c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x0b, 0x52, 0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0e, 0x4d,
	0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xaa, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x0e, 0x4d, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0e, 0x4d, 0x61, 0x78,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xb4, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x0d, 0x52, 0x0e, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0d, 0x4d, 0x61, 0x78, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0e, 0x52, 0x0d, 0x4d, 0x61, 0x78, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x17, 0x4d, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0xc8,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0f, 0x52, 0x17, 0x4d, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x17, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0xd2,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x10, 0x52, 0x17, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x09, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x09, 0x55, 0x6e, 0x69, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0b, 0x53, 0x61, 0x6c, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0xe6, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x12, 0x52,
	0x0b, 0x53, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x09, 0x53, 0x61, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18, 0xf0, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x13, 0x52, 0x09, 0x53, 0x61, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x08, 0x53, 0x61, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18,
	0xfa, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x53,
	0x61, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x14, 0x52, 0x08, 0x53, 0x61, 0x6c, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0d, 0x46, 0x69, 0x78, 0x65, 0x64, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x84, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x15,
	0x52, 0x0d, 0x46, 0x69, 0x78, 0x65, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x38, 0x0a, 0x14, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x73, 0x18, 0x8e, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x16, 0x52, 0x14, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x09,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x98, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x48, 0x17, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x42, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x4d, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x4d, 0x61, 0x78, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x4d, 0x69, 0x6e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x53, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x53, 0x61, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x53, 0x61, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x22, 0x54, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x50, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x50, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x33, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x70,
	0x70, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x22, 0x51, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x70, 0x70, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x5a, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x6a, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x41, 0x70, 0x70, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x70, 0x70, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xb8, 0x0b, 0x0a, 0x1b, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x6f, 0x6f,
	0x64, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49,
	0x44, 0x12, 0x25, 0x0a, 0x0b, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x3c, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x03, 0x52, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x07, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x04, 0x52, 0x07, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x0c, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x42,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x06, 0x42,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74,
	0x12, 0x42, 0x0a, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x78,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d,
	0x6f, 0x64, 0x65, 0x48, 0x07, 0x52, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x6f, 0x64,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x1c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x08, 0x52, 0x1c, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x36,
	0x0a, 0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x09, 0x52, 0x13,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0e, 0x4d, 0x69, 0x6e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x4d, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x27, 0x0a, 0x0e, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x0d, 0x4d, 0x61, 0x78, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0a, 0x52, 0x0d, 0x4d, 0x61, 0x78, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x17, 0x4d, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0xb4, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x4d, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x3e, 0x0a, 0x17, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x0b, 0x52, 0x17, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x1d, 0x0a, 0x09, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0xc8, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21,
	0x0a, 0x0b, 0x53, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0xd2, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x53, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x09, 0x53, 0x61, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18, 0xdc,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x53, 0x61, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x74,
	0x12, 0x3c, 0x0a, 0x08, 0x53, 0x61, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0xe6, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x61, 0x6c, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x53, 0x61, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2a,
	0x0a, 0x0d, 0x46, 0x69, 0x78, 0x65, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0xf0, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0c, 0x52, 0x0d, 0x46, 0x69, 0x78, 0x65, 0x64, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x14, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x73, 0x18, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0d, 0x52, 0x14, 0x50, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x18, 0x84, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x0e, 0x52, 0x09, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x42, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x6f,
	0x64, 0x65, 0x42, 0x1f, 0x0a, 0x1d, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f,
	0x4d, 0x61, 0x78, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x1a, 0x0a,
	0x18, 0x5f, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x17, 0x0a, 0x15, 0x5f,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x22, 0x59, 0x0a, 0x1c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x70, 0x70, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70,
	0x70, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xaa, 0x0d,
	0x0a, 0x1b, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70,
	0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a,
	0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64,
	0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f,
	0x64, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x0b, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x18, 0x46, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x50,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x5a, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x04, 0x52, 0x07, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x06, 0x52, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x78, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x07, 0x52, 0x06, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x2c, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x74, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x08, 0x52, 0x0e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a,
	0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x8c, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x6f, 0x64,
	0x65, 0x48, 0x09, 0x52, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x48, 0x0a, 0x1c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0a, 0x52, 0x1c, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x13,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0b, 0x52, 0x13, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0e, 0x4d, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52,
	0x0e, 0x4d, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0e, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0e, 0x4d,
	0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x2a, 0x0a, 0x0d, 0x4d, 0x61, 0x78, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x0d, 0x4d, 0x61, 0x78, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x17,
	0x4d, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0f,
	0x52, 0x17, 0x4d, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x17,
	0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x10,
	0x52, 0x17, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x09,
	0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x11, 0x52, 0x09, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0b, 0x53, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18,
	0xe6, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x12, 0x52, 0x0b, 0x53, 0x61, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x09, 0x53, 0x61, 0x6c, 0x65,
	0x45, 0x6e, 0x64, 0x41, 0x74, 0x18, 0xf0, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x13, 0x52, 0x09,
	0x53, 0x61, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x08,
	0x53, 0x61, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1f, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x61, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x48, 0x14, 0x52, 0x08, 0x53, 0x61, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x2a, 0x0a, 0x0d, 0x46, 0x69, 0x78, 0x65, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x84, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x15, 0x52, 0x0d, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x14, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x73, 0x18, 0x8e, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x16, 0x52, 0x14, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x18, 0x98, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x17, 0x52, 0x09, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67,
	0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x4e, 0x61, 0x6d,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x42,
	0x1f, 0x0a, 0x1d, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x42, 0x16, 0x0a, 0x14, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x4d, 0x69, 0x6e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x4d, 0x61, 0x78, 0x55, 0x73, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x4d, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x1a, 0x0a, 0x18,
	0x5f, 0x4d, 0x61, 0x78, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x55, 0x6e, 0x69,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x53, 0x61, 0x6c, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x53, 0x61, 0x6c, 0x65, 0x45,
	0x6e, 0x64, 0x41, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x53, 0x61, 0x6c, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x46, 0x69, 0x78, 0x65, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x57,
	0x69, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x73, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x59, 0x0a, 0x1c, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x50, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6b, 0x0a, 0x19, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65,
	0x74, 0x41, 0x70, 0x70, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0x6f, 0x0a, 0x1a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x41, 0x70,
	0x70, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3b, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70,
	0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x22, 0x83, 0x01, 0x0a, 0x1b, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41,
	0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x22, 0x59, 0x0a, 0x1c, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x50, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x32, 0x93, 0x09, 0x0a, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x12, 0x9b, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x50, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x12, 0x32, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x50, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x50,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x70, 0x70, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x12, 0x8f,
	0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x12,
	0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x70, 0x70, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x3a, 0x01, 0x2a, 0x22, 0x11, 0x2f,
	0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x61, 0x70, 0x70, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x12, 0x93, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x50, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x73, 0x12, 0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a,
	0x01, 0x2a, 0x22, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x61, 0x70, 0x70, 0x70,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x73, 0x12, 0xb0, 0x01, 0x0a, 0x14, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x12,
	0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x50, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x70, 0x70, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x22, 0x1a, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f,
	0x61, 0x70, 0x70, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x12, 0xb0, 0x01, 0x0a, 0x14, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x50, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x12, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x50, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a,
	0x22, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x2f, 0x61, 0x70, 0x70, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x12, 0xa8, 0x01, 0x0a,
	0x12, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x50, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x73, 0x12, 0x35, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x50, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x61, 0x70, 0x70,
	0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x73, 0x12, 0xb0, 0x01, 0x0a, 0x14, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x12, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x70, 0x70, 0x50, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x70, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x70, 0x70, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x22, 0x1a,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x2f, 0x61, 0x70, 0x70, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e,
	0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x67, 0x77, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x70, 0x70, 0x2f, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_npool_good_gw_v1_app_pledge_pledge_proto_rawDescOnce sync.Once
	file_npool_good_gw_v1_app_pledge_pledge_proto_rawDescData = file_npool_good_gw_v1_app_pledge_pledge_proto_rawDesc
)

func file_npool_good_gw_v1_app_pledge_pledge_proto_rawDescGZIP() []byte {
	file_npool_good_gw_v1_app_pledge_pledge_proto_rawDescOnce.Do(func() {
		file_npool_good_gw_v1_app_pledge_pledge_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_good_gw_v1_app_pledge_pledge_proto_rawDescData)
	})
	return file_npool_good_gw_v1_app_pledge_pledge_proto_rawDescData
}

var file_npool_good_gw_v1_app_pledge_pledge_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_npool_good_gw_v1_app_pledge_pledge_proto_goTypes = []interface{}{
	(*AppPledge)(nil),                    // 0: good.gateway.app.pledge.v1.AppPledge
	(*UpdateAppPledgeRequest)(nil),       // 1: good.gateway.app.pledge.v1.UpdateAppPledgeRequest
	(*UpdateAppPledgeResponse)(nil),      // 2: good.gateway.app.pledge.v1.UpdateAppPledgeResponse
	(*GetAppPledgeRequest)(nil),          // 3: good.gateway.app.pledge.v1.GetAppPledgeRequest
	(*GetAppPledgeResponse)(nil),         // 4: good.gateway.app.pledge.v1.GetAppPledgeResponse
	(*GetAppPledgesRequest)(nil),         // 5: good.gateway.app.pledge.v1.GetAppPledgesRequest
	(*GetAppPledgesResponse)(nil),        // 6: good.gateway.app.pledge.v1.GetAppPledgesResponse
	(*AdminCreateAppPledgeRequest)(nil),  // 7: good.gateway.app.pledge.v1.AdminCreateAppPledgeRequest
	(*AdminCreateAppPledgeResponse)(nil), // 8: good.gateway.app.pledge.v1.AdminCreateAppPledgeResponse
	(*AdminUpdateAppPledgeRequest)(nil),  // 9: good.gateway.app.pledge.v1.AdminUpdateAppPledgeRequest
	(*AdminUpdateAppPledgeResponse)(nil), // 10: good.gateway.app.pledge.v1.AdminUpdateAppPledgeResponse
	(*AdminGetAppPledgesRequest)(nil),    // 11: good.gateway.app.pledge.v1.AdminGetAppPledgesRequest
	(*AdminGetAppPledgesResponse)(nil),   // 12: good.gateway.app.pledge.v1.AdminGetAppPledgesResponse
	(*AdminDeleteAppPledgeRequest)(nil),  // 13: good.gateway.app.pledge.v1.AdminDeleteAppPledgeRequest
	(*AdminDeleteAppPledgeResponse)(nil), // 14: good.gateway.app.pledge.v1.AdminDeleteAppPledgeResponse
	(v1.GoodDurationType)(0),             // 15: basetypes.good.v1.GoodDurationType
	(v1.GoodType)(0),                     // 16: basetypes.good.v1.GoodType
	(v1.BenefitType)(0),                  // 17: basetypes.good.v1.BenefitType
	(v1.GoodStartMode)(0),                // 18: basetypes.good.v1.GoodStartMode
	(v1.GoodState)(0),                    // 19: basetypes.good.v1.GoodState
	(v1.CancelMode)(0),                   // 20: basetypes.good.v1.CancelMode
	(v1.GoodSaleMode)(0),                 // 21: basetypes.good.v1.GoodSaleMode
	(*coin.GoodCoinInfo)(nil),            // 22: good.gateway.good1.coin.v1.GoodCoinInfo
	(*description.DescriptionInfo)(nil),  // 23: good.middleware.app.good1.description.v1.DescriptionInfo
	(*poster.PosterInfo)(nil),            // 24: good.middleware.app.good1.poster.v1.PosterInfo
	(*name.DisplayNameInfo)(nil),         // 25: good.middleware.app.good1.display.name.v1.DisplayNameInfo
	(*color.DisplayColorInfo)(nil),       // 26: good.middleware.app.good1.display.color.v1.DisplayColorInfo
	(*label.LabelInfo)(nil),              // 27: good.middleware.app.good1.label.v1.LabelInfo
	(*reward.RewardInfo)(nil),            // 28: good.gateway.good1.coin.reward.v1.RewardInfo
	(*required.RequiredInfo)(nil),        // 29: good.middleware.app.good1.required1.v1.RequiredInfo
}
var file_npool_good_gw_v1_app_pledge_pledge_proto_depIdxs = []int32{
	15, // 0: good.gateway.app.pledge.v1.AppPledge.DurationDisplayType:type_name -> basetypes.good.v1.GoodDurationType
	16, // 1: good.gateway.app.pledge.v1.AppPledge.GoodType:type_name -> basetypes.good.v1.GoodType
	17, // 2: good.gateway.app.pledge.v1.AppPledge.BenefitType:type_name -> basetypes.good.v1.BenefitType
	18, // 3: good.gateway.app.pledge.v1.AppPledge.GoodStartMode:type_name -> basetypes.good.v1.GoodStartMode
	19, // 4: good.gateway.app.pledge.v1.AppPledge.State:type_name -> basetypes.good.v1.GoodState
	20, // 5: good.gateway.app.pledge.v1.AppPledge.CancelMode:type_name -> basetypes.good.v1.CancelMode
	21, // 6: good.gateway.app.pledge.v1.AppPledge.SaleMode:type_name -> basetypes.good.v1.GoodSaleMode
	18, // 7: good.gateway.app.pledge.v1.AppPledge.AppGoodStartMode:type_name -> basetypes.good.v1.GoodStartMode
	22, // 8: good.gateway.app.pledge.v1.AppPledge.GoodCoins:type_name -> good.gateway.good1.coin.v1.GoodCoinInfo
	23, // 9: good.gateway.app.pledge.v1.AppPledge.Descriptions:type_name -> good.middleware.app.good1.description.v1.DescriptionInfo
	24, // 10: good.gateway.app.pledge.v1.AppPledge.Posters:type_name -> good.middleware.app.good1.poster.v1.PosterInfo
	25, // 11: good.gateway.app.pledge.v1.AppPledge.DisplayNames:type_name -> good.middleware.app.good1.display.name.v1.DisplayNameInfo
	26, // 12: good.gateway.app.pledge.v1.AppPledge.DisplayColors:type_name -> good.middleware.app.good1.display.color.v1.DisplayColorInfo
	27, // 13: good.gateway.app.pledge.v1.AppPledge.Labels:type_name -> good.middleware.app.good1.label.v1.LabelInfo
	28, // 14: good.gateway.app.pledge.v1.AppPledge.Rewards:type_name -> good.gateway.good1.coin.reward.v1.RewardInfo
	29, // 15: good.gateway.app.pledge.v1.AppPledge.Requireds:type_name -> good.middleware.app.good1.required1.v1.RequiredInfo
	20, // 16: good.gateway.app.pledge.v1.UpdateAppPledgeRequest.CancelMode:type_name -> basetypes.good.v1.CancelMode
	21, // 17: good.gateway.app.pledge.v1.UpdateAppPledgeRequest.SaleMode:type_name -> basetypes.good.v1.GoodSaleMode
	18, // 18: good.gateway.app.pledge.v1.UpdateAppPledgeRequest.StartMode:type_name -> basetypes.good.v1.GoodStartMode
	0,  // 19: good.gateway.app.pledge.v1.UpdateAppPledgeResponse.Info:type_name -> good.gateway.app.pledge.v1.AppPledge
	0,  // 20: good.gateway.app.pledge.v1.GetAppPledgeResponse.Info:type_name -> good.gateway.app.pledge.v1.AppPledge
	0,  // 21: good.gateway.app.pledge.v1.GetAppPledgesResponse.Infos:type_name -> good.gateway.app.pledge.v1.AppPledge
	20, // 22: good.gateway.app.pledge.v1.AdminCreateAppPledgeRequest.CancelMode:type_name -> basetypes.good.v1.CancelMode
	21, // 23: good.gateway.app.pledge.v1.AdminCreateAppPledgeRequest.SaleMode:type_name -> basetypes.good.v1.GoodSaleMode
	18, // 24: good.gateway.app.pledge.v1.AdminCreateAppPledgeRequest.StartMode:type_name -> basetypes.good.v1.GoodStartMode
	0,  // 25: good.gateway.app.pledge.v1.AdminCreateAppPledgeResponse.Info:type_name -> good.gateway.app.pledge.v1.AppPledge
	20, // 26: good.gateway.app.pledge.v1.AdminUpdateAppPledgeRequest.CancelMode:type_name -> basetypes.good.v1.CancelMode
	21, // 27: good.gateway.app.pledge.v1.AdminUpdateAppPledgeRequest.SaleMode:type_name -> basetypes.good.v1.GoodSaleMode
	18, // 28: good.gateway.app.pledge.v1.AdminUpdateAppPledgeRequest.StartMode:type_name -> basetypes.good.v1.GoodStartMode
	0,  // 29: good.gateway.app.pledge.v1.AdminUpdateAppPledgeResponse.Info:type_name -> good.gateway.app.pledge.v1.AppPledge
	0,  // 30: good.gateway.app.pledge.v1.AdminGetAppPledgesResponse.Infos:type_name -> good.gateway.app.pledge.v1.AppPledge
	0,  // 31: good.gateway.app.pledge.v1.AdminDeleteAppPledgeResponse.Info:type_name -> good.gateway.app.pledge.v1.AppPledge
	1,  // 32: good.gateway.app.pledge.v1.Gateway.UpdateAppPledge:input_type -> good.gateway.app.pledge.v1.UpdateAppPledgeRequest
	3,  // 33: good.gateway.app.pledge.v1.Gateway.GetAppPledge:input_type -> good.gateway.app.pledge.v1.GetAppPledgeRequest
	5,  // 34: good.gateway.app.pledge.v1.Gateway.GetAppPledges:input_type -> good.gateway.app.pledge.v1.GetAppPledgesRequest
	7,  // 35: good.gateway.app.pledge.v1.Gateway.AdminCreateAppPledge:input_type -> good.gateway.app.pledge.v1.AdminCreateAppPledgeRequest
	9,  // 36: good.gateway.app.pledge.v1.Gateway.AdminUpdateAppPledge:input_type -> good.gateway.app.pledge.v1.AdminUpdateAppPledgeRequest
	11, // 37: good.gateway.app.pledge.v1.Gateway.AdminGetAppPledges:input_type -> good.gateway.app.pledge.v1.AdminGetAppPledgesRequest
	13, // 38: good.gateway.app.pledge.v1.Gateway.AdminDeleteAppPledge:input_type -> good.gateway.app.pledge.v1.AdminDeleteAppPledgeRequest
	2,  // 39: good.gateway.app.pledge.v1.Gateway.UpdateAppPledge:output_type -> good.gateway.app.pledge.v1.UpdateAppPledgeResponse
	4,  // 40: good.gateway.app.pledge.v1.Gateway.GetAppPledge:output_type -> good.gateway.app.pledge.v1.GetAppPledgeResponse
	6,  // 41: good.gateway.app.pledge.v1.Gateway.GetAppPledges:output_type -> good.gateway.app.pledge.v1.GetAppPledgesResponse
	8,  // 42: good.gateway.app.pledge.v1.Gateway.AdminCreateAppPledge:output_type -> good.gateway.app.pledge.v1.AdminCreateAppPledgeResponse
	10, // 43: good.gateway.app.pledge.v1.Gateway.AdminUpdateAppPledge:output_type -> good.gateway.app.pledge.v1.AdminUpdateAppPledgeResponse
	12, // 44: good.gateway.app.pledge.v1.Gateway.AdminGetAppPledges:output_type -> good.gateway.app.pledge.v1.AdminGetAppPledgesResponse
	14, // 45: good.gateway.app.pledge.v1.Gateway.AdminDeleteAppPledge:output_type -> good.gateway.app.pledge.v1.AdminDeleteAppPledgeResponse
	39, // [39:46] is the sub-list for method output_type
	32, // [32:39] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_npool_good_gw_v1_app_pledge_pledge_proto_init() }
func file_npool_good_gw_v1_app_pledge_pledge_proto_init() {
	if File_npool_good_gw_v1_app_pledge_pledge_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_good_gw_v1_app_pledge_pledge_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppPledge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_pledge_pledge_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppPledgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_pledge_pledge_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppPledgeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_pledge_pledge_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppPledgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_pledge_pledge_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppPledgeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_pledge_pledge_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppPledgesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_pledge_pledge_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppPledgesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_pledge_pledge_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminCreateAppPledgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_pledge_pledge_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminCreateAppPledgeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_pledge_pledge_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminUpdateAppPledgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_pledge_pledge_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminUpdateAppPledgeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_pledge_pledge_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminGetAppPledgesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_pledge_pledge_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminGetAppPledgesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_pledge_pledge_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminDeleteAppPledgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_app_pledge_pledge_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminDeleteAppPledgeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_good_gw_v1_app_pledge_pledge_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_npool_good_gw_v1_app_pledge_pledge_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_npool_good_gw_v1_app_pledge_pledge_proto_msgTypes[9].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_good_gw_v1_app_pledge_pledge_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_good_gw_v1_app_pledge_pledge_proto_goTypes,
		DependencyIndexes: file_npool_good_gw_v1_app_pledge_pledge_proto_depIdxs,
		MessageInfos:      file_npool_good_gw_v1_app_pledge_pledge_proto_msgTypes,
	}.Build()
	File_npool_good_gw_v1_app_pledge_pledge_proto = out.File
	file_npool_good_gw_v1_app_pledge_pledge_proto_rawDesc = nil
	file_npool_good_gw_v1_app_pledge_pledge_proto_goTypes = nil
	file_npool_good_gw_v1_app_pledge_pledge_proto_depIdxs = nil
}
