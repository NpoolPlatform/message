// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/good/gw/v1/app/pledge/pledge.proto

package pledge

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gateway_UpdateAppPledge_FullMethodName      = "/good.gateway.app.pledge.v1.Gateway/UpdateAppPledge"
	Gateway_GetAppPledge_FullMethodName         = "/good.gateway.app.pledge.v1.Gateway/GetAppPledge"
	Gateway_GetAppPledges_FullMethodName        = "/good.gateway.app.pledge.v1.Gateway/GetAppPledges"
	Gateway_AdminCreateAppPledge_FullMethodName = "/good.gateway.app.pledge.v1.Gateway/AdminCreateAppPledge"
	Gateway_AdminUpdateAppPledge_FullMethodName = "/good.gateway.app.pledge.v1.Gateway/AdminUpdateAppPledge"
	Gateway_AdminGetAppPledges_FullMethodName   = "/good.gateway.app.pledge.v1.Gateway/AdminGetAppPledges"
	Gateway_AdminDeleteAppPledge_FullMethodName = "/good.gateway.app.pledge.v1.Gateway/AdminDeleteAppPledge"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	UpdateAppPledge(ctx context.Context, in *UpdateAppPledgeRequest, opts ...grpc.CallOption) (*UpdateAppPledgeResponse, error)
	GetAppPledge(ctx context.Context, in *GetAppPledgeRequest, opts ...grpc.CallOption) (*GetAppPledgeResponse, error)
	GetAppPledges(ctx context.Context, in *GetAppPledgesRequest, opts ...grpc.CallOption) (*GetAppPledgesResponse, error)
	// Run by church admin
	AdminCreateAppPledge(ctx context.Context, in *AdminCreateAppPledgeRequest, opts ...grpc.CallOption) (*AdminCreateAppPledgeResponse, error)
	AdminUpdateAppPledge(ctx context.Context, in *AdminUpdateAppPledgeRequest, opts ...grpc.CallOption) (*AdminUpdateAppPledgeResponse, error)
	AdminGetAppPledges(ctx context.Context, in *AdminGetAppPledgesRequest, opts ...grpc.CallOption) (*AdminGetAppPledgesResponse, error)
	AdminDeleteAppPledge(ctx context.Context, in *AdminDeleteAppPledgeRequest, opts ...grpc.CallOption) (*AdminDeleteAppPledgeResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) UpdateAppPledge(ctx context.Context, in *UpdateAppPledgeRequest, opts ...grpc.CallOption) (*UpdateAppPledgeResponse, error) {
	out := new(UpdateAppPledgeResponse)
	err := c.cc.Invoke(ctx, Gateway_UpdateAppPledge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetAppPledge(ctx context.Context, in *GetAppPledgeRequest, opts ...grpc.CallOption) (*GetAppPledgeResponse, error) {
	out := new(GetAppPledgeResponse)
	err := c.cc.Invoke(ctx, Gateway_GetAppPledge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetAppPledges(ctx context.Context, in *GetAppPledgesRequest, opts ...grpc.CallOption) (*GetAppPledgesResponse, error) {
	out := new(GetAppPledgesResponse)
	err := c.cc.Invoke(ctx, Gateway_GetAppPledges_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminCreateAppPledge(ctx context.Context, in *AdminCreateAppPledgeRequest, opts ...grpc.CallOption) (*AdminCreateAppPledgeResponse, error) {
	out := new(AdminCreateAppPledgeResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminCreateAppPledge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminUpdateAppPledge(ctx context.Context, in *AdminUpdateAppPledgeRequest, opts ...grpc.CallOption) (*AdminUpdateAppPledgeResponse, error) {
	out := new(AdminUpdateAppPledgeResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminUpdateAppPledge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminGetAppPledges(ctx context.Context, in *AdminGetAppPledgesRequest, opts ...grpc.CallOption) (*AdminGetAppPledgesResponse, error) {
	out := new(AdminGetAppPledgesResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminGetAppPledges_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminDeleteAppPledge(ctx context.Context, in *AdminDeleteAppPledgeRequest, opts ...grpc.CallOption) (*AdminDeleteAppPledgeResponse, error) {
	out := new(AdminDeleteAppPledgeResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminDeleteAppPledge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	UpdateAppPledge(context.Context, *UpdateAppPledgeRequest) (*UpdateAppPledgeResponse, error)
	GetAppPledge(context.Context, *GetAppPledgeRequest) (*GetAppPledgeResponse, error)
	GetAppPledges(context.Context, *GetAppPledgesRequest) (*GetAppPledgesResponse, error)
	// Run by church admin
	AdminCreateAppPledge(context.Context, *AdminCreateAppPledgeRequest) (*AdminCreateAppPledgeResponse, error)
	AdminUpdateAppPledge(context.Context, *AdminUpdateAppPledgeRequest) (*AdminUpdateAppPledgeResponse, error)
	AdminGetAppPledges(context.Context, *AdminGetAppPledgesRequest) (*AdminGetAppPledgesResponse, error)
	AdminDeleteAppPledge(context.Context, *AdminDeleteAppPledgeRequest) (*AdminDeleteAppPledgeResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) UpdateAppPledge(context.Context, *UpdateAppPledgeRequest) (*UpdateAppPledgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppPledge not implemented")
}
func (UnimplementedGatewayServer) GetAppPledge(context.Context, *GetAppPledgeRequest) (*GetAppPledgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppPledge not implemented")
}
func (UnimplementedGatewayServer) GetAppPledges(context.Context, *GetAppPledgesRequest) (*GetAppPledgesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppPledges not implemented")
}
func (UnimplementedGatewayServer) AdminCreateAppPledge(context.Context, *AdminCreateAppPledgeRequest) (*AdminCreateAppPledgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCreateAppPledge not implemented")
}
func (UnimplementedGatewayServer) AdminUpdateAppPledge(context.Context, *AdminUpdateAppPledgeRequest) (*AdminUpdateAppPledgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateAppPledge not implemented")
}
func (UnimplementedGatewayServer) AdminGetAppPledges(context.Context, *AdminGetAppPledgesRequest) (*AdminGetAppPledgesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetAppPledges not implemented")
}
func (UnimplementedGatewayServer) AdminDeleteAppPledge(context.Context, *AdminDeleteAppPledgeRequest) (*AdminDeleteAppPledgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDeleteAppPledge not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_UpdateAppPledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppPledgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateAppPledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_UpdateAppPledge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateAppPledge(ctx, req.(*UpdateAppPledgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetAppPledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppPledgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetAppPledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetAppPledge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetAppPledge(ctx, req.(*GetAppPledgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetAppPledges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppPledgesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetAppPledges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetAppPledges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetAppPledges(ctx, req.(*GetAppPledgesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminCreateAppPledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCreateAppPledgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminCreateAppPledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminCreateAppPledge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminCreateAppPledge(ctx, req.(*AdminCreateAppPledgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminUpdateAppPledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateAppPledgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminUpdateAppPledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminUpdateAppPledge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminUpdateAppPledge(ctx, req.(*AdminUpdateAppPledgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminGetAppPledges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetAppPledgesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminGetAppPledges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminGetAppPledges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminGetAppPledges(ctx, req.(*AdminGetAppPledgesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminDeleteAppPledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDeleteAppPledgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminDeleteAppPledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminDeleteAppPledge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminDeleteAppPledge(ctx, req.(*AdminDeleteAppPledgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "good.gateway.app.pledge.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateAppPledge",
			Handler:    _Gateway_UpdateAppPledge_Handler,
		},
		{
			MethodName: "GetAppPledge",
			Handler:    _Gateway_GetAppPledge_Handler,
		},
		{
			MethodName: "GetAppPledges",
			Handler:    _Gateway_GetAppPledges_Handler,
		},
		{
			MethodName: "AdminCreateAppPledge",
			Handler:    _Gateway_AdminCreateAppPledge_Handler,
		},
		{
			MethodName: "AdminUpdateAppPledge",
			Handler:    _Gateway_AdminUpdateAppPledge_Handler,
		},
		{
			MethodName: "AdminGetAppPledges",
			Handler:    _Gateway_AdminGetAppPledges_Handler,
		},
		{
			MethodName: "AdminDeleteAppPledge",
			Handler:    _Gateway_AdminDeleteAppPledge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/good/gw/v1/app/pledge/pledge.proto",
}
