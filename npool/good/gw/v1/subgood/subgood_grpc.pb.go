// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/good/gw/v1/subgood/subgood.proto

package subgood

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	CreateSubGood(ctx context.Context, in *CreateSubGoodRequest, opts ...grpc.CallOption) (*CreateSubGoodResponse, error)
	CreateAppSubGood(ctx context.Context, in *CreateAppSubGoodRequest, opts ...grpc.CallOption) (*CreateAppSubGoodResponse, error)
	UpdateSubGood(ctx context.Context, in *UpdateSubGoodRequest, opts ...grpc.CallOption) (*UpdateSubGoodResponse, error)
	UpdateAppSubGood(ctx context.Context, in *UpdateAppSubGoodRequest, opts ...grpc.CallOption) (*UpdateAppSubGoodResponse, error)
	GetSubGoods(ctx context.Context, in *GetSubGoodsRequest, opts ...grpc.CallOption) (*GetSubGoodsResponse, error)
	GetAppSubGoods(ctx context.Context, in *GetAppSubGoodsRequest, opts ...grpc.CallOption) (*GetAppSubGoodsResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) CreateSubGood(ctx context.Context, in *CreateSubGoodRequest, opts ...grpc.CallOption) (*CreateSubGoodResponse, error) {
	out := new(CreateSubGoodResponse)
	err := c.cc.Invoke(ctx, "/good.gateway.subgood.v1.Gateway/CreateSubGood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) CreateAppSubGood(ctx context.Context, in *CreateAppSubGoodRequest, opts ...grpc.CallOption) (*CreateAppSubGoodResponse, error) {
	out := new(CreateAppSubGoodResponse)
	err := c.cc.Invoke(ctx, "/good.gateway.subgood.v1.Gateway/CreateAppSubGood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdateSubGood(ctx context.Context, in *UpdateSubGoodRequest, opts ...grpc.CallOption) (*UpdateSubGoodResponse, error) {
	out := new(UpdateSubGoodResponse)
	err := c.cc.Invoke(ctx, "/good.gateway.subgood.v1.Gateway/UpdateSubGood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdateAppSubGood(ctx context.Context, in *UpdateAppSubGoodRequest, opts ...grpc.CallOption) (*UpdateAppSubGoodResponse, error) {
	out := new(UpdateAppSubGoodResponse)
	err := c.cc.Invoke(ctx, "/good.gateway.subgood.v1.Gateway/UpdateAppSubGood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetSubGoods(ctx context.Context, in *GetSubGoodsRequest, opts ...grpc.CallOption) (*GetSubGoodsResponse, error) {
	out := new(GetSubGoodsResponse)
	err := c.cc.Invoke(ctx, "/good.gateway.subgood.v1.Gateway/GetSubGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetAppSubGoods(ctx context.Context, in *GetAppSubGoodsRequest, opts ...grpc.CallOption) (*GetAppSubGoodsResponse, error) {
	out := new(GetAppSubGoodsResponse)
	err := c.cc.Invoke(ctx, "/good.gateway.subgood.v1.Gateway/GetAppSubGoods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	CreateSubGood(context.Context, *CreateSubGoodRequest) (*CreateSubGoodResponse, error)
	CreateAppSubGood(context.Context, *CreateAppSubGoodRequest) (*CreateAppSubGoodResponse, error)
	UpdateSubGood(context.Context, *UpdateSubGoodRequest) (*UpdateSubGoodResponse, error)
	UpdateAppSubGood(context.Context, *UpdateAppSubGoodRequest) (*UpdateAppSubGoodResponse, error)
	GetSubGoods(context.Context, *GetSubGoodsRequest) (*GetSubGoodsResponse, error)
	GetAppSubGoods(context.Context, *GetAppSubGoodsRequest) (*GetAppSubGoodsResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) CreateSubGood(context.Context, *CreateSubGoodRequest) (*CreateSubGoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubGood not implemented")
}
func (UnimplementedGatewayServer) CreateAppSubGood(context.Context, *CreateAppSubGoodRequest) (*CreateAppSubGoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppSubGood not implemented")
}
func (UnimplementedGatewayServer) UpdateSubGood(context.Context, *UpdateSubGoodRequest) (*UpdateSubGoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubGood not implemented")
}
func (UnimplementedGatewayServer) UpdateAppSubGood(context.Context, *UpdateAppSubGoodRequest) (*UpdateAppSubGoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppSubGood not implemented")
}
func (UnimplementedGatewayServer) GetSubGoods(context.Context, *GetSubGoodsRequest) (*GetSubGoodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubGoods not implemented")
}
func (UnimplementedGatewayServer) GetAppSubGoods(context.Context, *GetAppSubGoodsRequest) (*GetAppSubGoodsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppSubGoods not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_CreateSubGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateSubGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.gateway.subgood.v1.Gateway/CreateSubGood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateSubGood(ctx, req.(*CreateSubGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_CreateAppSubGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppSubGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateAppSubGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.gateway.subgood.v1.Gateway/CreateAppSubGood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateAppSubGood(ctx, req.(*CreateAppSubGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdateSubGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateSubGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.gateway.subgood.v1.Gateway/UpdateSubGood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateSubGood(ctx, req.(*UpdateSubGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdateAppSubGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppSubGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateAppSubGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.gateway.subgood.v1.Gateway/UpdateAppSubGood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateAppSubGood(ctx, req.(*UpdateAppSubGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetSubGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubGoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetSubGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.gateway.subgood.v1.Gateway/GetSubGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetSubGoods(ctx, req.(*GetSubGoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetAppSubGoods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppSubGoodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetAppSubGoods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/good.gateway.subgood.v1.Gateway/GetAppSubGoods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetAppSubGoods(ctx, req.(*GetAppSubGoodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "good.gateway.subgood.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSubGood",
			Handler:    _Gateway_CreateSubGood_Handler,
		},
		{
			MethodName: "CreateAppSubGood",
			Handler:    _Gateway_CreateAppSubGood_Handler,
		},
		{
			MethodName: "UpdateSubGood",
			Handler:    _Gateway_UpdateSubGood_Handler,
		},
		{
			MethodName: "UpdateAppSubGood",
			Handler:    _Gateway_UpdateAppSubGood_Handler,
		},
		{
			MethodName: "GetSubGoods",
			Handler:    _Gateway_GetSubGoods_Handler,
		},
		{
			MethodName: "GetAppSubGoods",
			Handler:    _Gateway_GetAppSubGoods_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/good/gw/v1/subgood/subgood.proto",
}
