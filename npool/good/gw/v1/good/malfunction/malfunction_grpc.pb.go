// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/good/gw/v1/good/malfunction/malfunction.proto

package malfunction

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gateway_AdminCreateMalfunction_FullMethodName = "/good.gateway.good1.malfunction.v1.Gateway/AdminCreateMalfunction"
	Gateway_AdminUpdateMalfunction_FullMethodName = "/good.gateway.good1.malfunction.v1.Gateway/AdminUpdateMalfunction"
	Gateway_GetMalfunctions_FullMethodName        = "/good.gateway.good1.malfunction.v1.Gateway/GetMalfunctions"
	Gateway_AdminDeleteMalfunction_FullMethodName = "/good.gateway.good1.malfunction.v1.Gateway/AdminDeleteMalfunction"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	AdminCreateMalfunction(ctx context.Context, in *AdminCreateMalfunctionRequest, opts ...grpc.CallOption) (*AdminCreateMalfunctionResponse, error)
	AdminUpdateMalfunction(ctx context.Context, in *AdminUpdateMalfunctionRequest, opts ...grpc.CallOption) (*AdminUpdateMalfunctionResponse, error)
	GetMalfunctions(ctx context.Context, in *GetMalfunctionsRequest, opts ...grpc.CallOption) (*GetMalfunctionsResponse, error)
	AdminDeleteMalfunction(ctx context.Context, in *AdminDeleteMalfunctionRequest, opts ...grpc.CallOption) (*AdminDeleteMalfunctionResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) AdminCreateMalfunction(ctx context.Context, in *AdminCreateMalfunctionRequest, opts ...grpc.CallOption) (*AdminCreateMalfunctionResponse, error) {
	out := new(AdminCreateMalfunctionResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminCreateMalfunction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminUpdateMalfunction(ctx context.Context, in *AdminUpdateMalfunctionRequest, opts ...grpc.CallOption) (*AdminUpdateMalfunctionResponse, error) {
	out := new(AdminUpdateMalfunctionResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminUpdateMalfunction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetMalfunctions(ctx context.Context, in *GetMalfunctionsRequest, opts ...grpc.CallOption) (*GetMalfunctionsResponse, error) {
	out := new(GetMalfunctionsResponse)
	err := c.cc.Invoke(ctx, Gateway_GetMalfunctions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminDeleteMalfunction(ctx context.Context, in *AdminDeleteMalfunctionRequest, opts ...grpc.CallOption) (*AdminDeleteMalfunctionResponse, error) {
	out := new(AdminDeleteMalfunctionResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminDeleteMalfunction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	AdminCreateMalfunction(context.Context, *AdminCreateMalfunctionRequest) (*AdminCreateMalfunctionResponse, error)
	AdminUpdateMalfunction(context.Context, *AdminUpdateMalfunctionRequest) (*AdminUpdateMalfunctionResponse, error)
	GetMalfunctions(context.Context, *GetMalfunctionsRequest) (*GetMalfunctionsResponse, error)
	AdminDeleteMalfunction(context.Context, *AdminDeleteMalfunctionRequest) (*AdminDeleteMalfunctionResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) AdminCreateMalfunction(context.Context, *AdminCreateMalfunctionRequest) (*AdminCreateMalfunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCreateMalfunction not implemented")
}
func (UnimplementedGatewayServer) AdminUpdateMalfunction(context.Context, *AdminUpdateMalfunctionRequest) (*AdminUpdateMalfunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateMalfunction not implemented")
}
func (UnimplementedGatewayServer) GetMalfunctions(context.Context, *GetMalfunctionsRequest) (*GetMalfunctionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMalfunctions not implemented")
}
func (UnimplementedGatewayServer) AdminDeleteMalfunction(context.Context, *AdminDeleteMalfunctionRequest) (*AdminDeleteMalfunctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDeleteMalfunction not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_AdminCreateMalfunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCreateMalfunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminCreateMalfunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminCreateMalfunction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminCreateMalfunction(ctx, req.(*AdminCreateMalfunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminUpdateMalfunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateMalfunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminUpdateMalfunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminUpdateMalfunction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminUpdateMalfunction(ctx, req.(*AdminUpdateMalfunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetMalfunctions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMalfunctionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetMalfunctions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetMalfunctions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetMalfunctions(ctx, req.(*GetMalfunctionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminDeleteMalfunction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDeleteMalfunctionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminDeleteMalfunction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminDeleteMalfunction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminDeleteMalfunction(ctx, req.(*AdminDeleteMalfunctionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "good.gateway.good1.malfunction.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AdminCreateMalfunction",
			Handler:    _Gateway_AdminCreateMalfunction_Handler,
		},
		{
			MethodName: "AdminUpdateMalfunction",
			Handler:    _Gateway_AdminUpdateMalfunction_Handler,
		},
		{
			MethodName: "GetMalfunctions",
			Handler:    _Gateway_GetMalfunctions_Handler,
		},
		{
			MethodName: "AdminDeleteMalfunction",
			Handler:    _Gateway_AdminDeleteMalfunction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/good/gw/v1/good/malfunction/malfunction.proto",
}
