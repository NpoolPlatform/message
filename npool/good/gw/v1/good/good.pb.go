// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.18.1
// source: npool/good/gw/v1/good/good.proto

package good

import (
	v1 "github.com/NpoolPlatform/message/npool/basetypes/good/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Good struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                     uint32                   `protobuf:"varint,9,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID                  string                   `protobuf:"bytes,10,opt,name=EntID,proto3" json:"EntID,omitempty"`
	DeviceInfoID           string                   `protobuf:"bytes,20,opt,name=DeviceInfoID,proto3" json:"DeviceInfoID,omitempty"`
	DeviceType             string                   `protobuf:"bytes,30,opt,name=DeviceType,proto3" json:"DeviceType,omitempty"`
	DeviceManufacturer     string                   `protobuf:"bytes,40,opt,name=DeviceManufacturer,proto3" json:"DeviceManufacturer,omitempty"`
	DevicePowerConsumption uint32                   `protobuf:"varint,50,opt,name=DevicePowerConsumption,proto3" json:"DevicePowerConsumption,omitempty"`
	DeviceShipmentAt       uint32                   `protobuf:"varint,60,opt,name=DeviceShipmentAt,proto3" json:"DeviceShipmentAt,omitempty"`
	DevicePosters          []string                 `protobuf:"bytes,70,rep,name=DevicePosters,proto3" json:"DevicePosters,omitempty"`
	DurationDays           int32                    `protobuf:"varint,80,opt,name=DurationDays,proto3" json:"DurationDays,omitempty"`
	CoinTypeID             string                   `protobuf:"bytes,90,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty"`
	CoinLogo               string                   `protobuf:"bytes,100,opt,name=CoinLogo,proto3" json:"CoinLogo,omitempty"`
	CoinName               string                   `protobuf:"bytes,110,opt,name=CoinName,proto3" json:"CoinName,omitempty"`
	CoinUnit               string                   `protobuf:"bytes,120,opt,name=CoinUnit,proto3" json:"CoinUnit,omitempty"`
	CoinPreSale            bool                     `protobuf:"varint,130,opt,name=CoinPreSale,proto3" json:"CoinPreSale,omitempty"`
	VendorLocationID       string                   `protobuf:"bytes,180,opt,name=VendorLocationID,proto3" json:"VendorLocationID,omitempty"`
	VendorLocationCountry  string                   `protobuf:"bytes,190,opt,name=VendorLocationCountry,proto3" json:"VendorLocationCountry,omitempty"`
	VendorLocationProvince string                   `protobuf:"bytes,200,opt,name=VendorLocationProvince,proto3" json:"VendorLocationProvince,omitempty"`
	VendorLocationCity     string                   `protobuf:"bytes,210,opt,name=VendorLocationCity,proto3" json:"VendorLocationCity,omitempty"`
	VendorLocationAddress  string                   `protobuf:"bytes,220,opt,name=VendorLocationAddress,proto3" json:"VendorLocationAddress,omitempty"`
	VendorBrandName        string                   `protobuf:"bytes,221,opt,name=VendorBrandName,proto3" json:"VendorBrandName,omitempty"`
	VendorBrandLogo        string                   `protobuf:"bytes,222,opt,name=VendorBrandLogo,proto3" json:"VendorBrandLogo,omitempty"`
	GoodType               v1.GoodType              `protobuf:"varint,230,opt,name=GoodType,proto3,enum=basetypes.good.v1.GoodType" json:"GoodType,omitempty"`
	BenefitType            v1.BenefitType           `protobuf:"varint,240,opt,name=BenefitType,proto3,enum=basetypes.good.v1.BenefitType" json:"BenefitType,omitempty"`
	Price                  string                   `protobuf:"bytes,250,opt,name=Price,proto3" json:"Price,omitempty"`
	Title                  string                   `protobuf:"bytes,260,opt,name=Title,proto3" json:"Title,omitempty"`
	QuantityUnit           string                   `protobuf:"bytes,270,opt,name=QuantityUnit,proto3" json:"QuantityUnit,omitempty"`
	QuantityUnitAmount     string                   `protobuf:"bytes,280,opt,name=QuantityUnitAmount,proto3" json:"QuantityUnitAmount,omitempty"`
	TestOnly               bool                     `protobuf:"varint,290,opt,name=TestOnly,proto3" json:"TestOnly,omitempty"`
	Posters                []string                 `protobuf:"bytes,300,rep,name=Posters,proto3" json:"Posters,omitempty"`
	Labels                 []v1.GoodLabel           `protobuf:"varint,310,rep,packed,name=Labels,proto3,enum=basetypes.good.v1.GoodLabel" json:"Labels,omitempty"`
	StockID                string                   `protobuf:"bytes,350,opt,name=StockID,proto3" json:"StockID,omitempty"`
	Total                  string                   `protobuf:"bytes,360,opt,name=Total,proto3" json:"Total,omitempty"`
	SpotQuantity           string                   `protobuf:"bytes,361,opt,name=SpotQuantity,proto3" json:"SpotQuantity,omitempty"`
	Locked                 string                   `protobuf:"bytes,370,opt,name=Locked,proto3" json:"Locked,omitempty"`
	InService              string                   `protobuf:"bytes,380,opt,name=InService,proto3" json:"InService,omitempty"`
	WaitStart              string                   `protobuf:"bytes,381,opt,name=WaitStart,proto3" json:"WaitStart,omitempty"`
	Sold                   string                   `protobuf:"bytes,390,opt,name=Sold,proto3" json:"Sold,omitempty"`
	AppReserved            string                   `protobuf:"bytes,391,opt,name=AppReserved,proto3" json:"AppReserved,omitempty"`
	DeliveryAt             uint32                   `protobuf:"varint,400,opt,name=DeliveryAt,proto3" json:"DeliveryAt,omitempty"`
	StartAt                uint32                   `protobuf:"varint,410,opt,name=StartAt,proto3" json:"StartAt,omitempty"`
	StartMode              v1.GoodStartMode         `protobuf:"varint,411,opt,name=StartMode,proto3,enum=basetypes.good.v1.GoodStartMode" json:"StartMode,omitempty"`
	CreatedAt              uint32                   `protobuf:"varint,420,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt              uint32                   `protobuf:"varint,430,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	BenefitIntervalHours   uint32                   `protobuf:"varint,450,opt,name=BenefitIntervalHours,proto3" json:"BenefitIntervalHours,omitempty"`
	LastBenefitAt          uint32                   `protobuf:"varint,460,opt,name=LastBenefitAt,proto3" json:"LastBenefitAt,omitempty"`
	NextBenefitStartAmount string                   `protobuf:"bytes,470,opt,name=NextBenefitStartAmount,proto3" json:"NextBenefitStartAmount,omitempty"`
	LastBenefitAmount      string                   `protobuf:"bytes,480,opt,name=LastBenefitAmount,proto3" json:"LastBenefitAmount,omitempty"`
	Likes                  uint32                   `protobuf:"varint,490,opt,name=Likes,proto3" json:"Likes,omitempty"`
	Dislikes               uint32                   `protobuf:"varint,500,opt,name=Dislikes,proto3" json:"Dislikes,omitempty"`
	Score                  string                   `protobuf:"bytes,510,opt,name=Score,proto3" json:"Score,omitempty"`
	ScoreCount             uint32                   `protobuf:"varint,520,opt,name=ScoreCount,proto3" json:"ScoreCount,omitempty"`
	RecommendCount         uint32                   `protobuf:"varint,530,opt,name=RecommendCount,proto3" json:"RecommendCount,omitempty"`
	CommentCount           uint32                   `protobuf:"varint,540,opt,name=CommentCount,proto3" json:"CommentCount,omitempty"`
	UnitLockDeposit        string                   `protobuf:"bytes,550,opt,name=UnitLockDeposit,proto3" json:"UnitLockDeposit,omitempty"`
	UnitType               v1.GoodUnitType          `protobuf:"varint,560,opt,name=UnitType,proto3,enum=basetypes.good.v1.GoodUnitType" json:"UnitType,omitempty"`
	QuantityCalculateType  v1.GoodUnitCalculateType `protobuf:"varint,570,opt,name=QuantityCalculateType,proto3,enum=basetypes.good.v1.GoodUnitCalculateType" json:"QuantityCalculateType,omitempty"`
	DurationType           v1.GoodDurationType      `protobuf:"varint,580,opt,name=DurationType,proto3,enum=basetypes.good.v1.GoodDurationType" json:"DurationType,omitempty"`
	DurationCalculateType  v1.GoodUnitCalculateType `protobuf:"varint,590,opt,name=DurationCalculateType,proto3,enum=basetypes.good.v1.GoodUnitCalculateType" json:"DurationCalculateType,omitempty"`
}

func (x *Good) Reset() {
	*x = Good{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_good_good_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Good) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Good) ProtoMessage() {}

func (x *Good) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_good_good_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Good.ProtoReflect.Descriptor instead.
func (*Good) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_good_good_proto_rawDescGZIP(), []int{0}
}

func (x *Good) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Good) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *Good) GetDeviceInfoID() string {
	if x != nil {
		return x.DeviceInfoID
	}
	return ""
}

func (x *Good) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *Good) GetDeviceManufacturer() string {
	if x != nil {
		return x.DeviceManufacturer
	}
	return ""
}

func (x *Good) GetDevicePowerConsumption() uint32 {
	if x != nil {
		return x.DevicePowerConsumption
	}
	return 0
}

func (x *Good) GetDeviceShipmentAt() uint32 {
	if x != nil {
		return x.DeviceShipmentAt
	}
	return 0
}

func (x *Good) GetDevicePosters() []string {
	if x != nil {
		return x.DevicePosters
	}
	return nil
}

func (x *Good) GetDurationDays() int32 {
	if x != nil {
		return x.DurationDays
	}
	return 0
}

func (x *Good) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

func (x *Good) GetCoinLogo() string {
	if x != nil {
		return x.CoinLogo
	}
	return ""
}

func (x *Good) GetCoinName() string {
	if x != nil {
		return x.CoinName
	}
	return ""
}

func (x *Good) GetCoinUnit() string {
	if x != nil {
		return x.CoinUnit
	}
	return ""
}

func (x *Good) GetCoinPreSale() bool {
	if x != nil {
		return x.CoinPreSale
	}
	return false
}

func (x *Good) GetVendorLocationID() string {
	if x != nil {
		return x.VendorLocationID
	}
	return ""
}

func (x *Good) GetVendorLocationCountry() string {
	if x != nil {
		return x.VendorLocationCountry
	}
	return ""
}

func (x *Good) GetVendorLocationProvince() string {
	if x != nil {
		return x.VendorLocationProvince
	}
	return ""
}

func (x *Good) GetVendorLocationCity() string {
	if x != nil {
		return x.VendorLocationCity
	}
	return ""
}

func (x *Good) GetVendorLocationAddress() string {
	if x != nil {
		return x.VendorLocationAddress
	}
	return ""
}

func (x *Good) GetVendorBrandName() string {
	if x != nil {
		return x.VendorBrandName
	}
	return ""
}

func (x *Good) GetVendorBrandLogo() string {
	if x != nil {
		return x.VendorBrandLogo
	}
	return ""
}

func (x *Good) GetGoodType() v1.GoodType {
	if x != nil {
		return x.GoodType
	}
	return v1.GoodType(0)
}

func (x *Good) GetBenefitType() v1.BenefitType {
	if x != nil {
		return x.BenefitType
	}
	return v1.BenefitType(0)
}

func (x *Good) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *Good) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Good) GetQuantityUnit() string {
	if x != nil {
		return x.QuantityUnit
	}
	return ""
}

func (x *Good) GetQuantityUnitAmount() string {
	if x != nil {
		return x.QuantityUnitAmount
	}
	return ""
}

func (x *Good) GetTestOnly() bool {
	if x != nil {
		return x.TestOnly
	}
	return false
}

func (x *Good) GetPosters() []string {
	if x != nil {
		return x.Posters
	}
	return nil
}

func (x *Good) GetLabels() []v1.GoodLabel {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Good) GetStockID() string {
	if x != nil {
		return x.StockID
	}
	return ""
}

func (x *Good) GetTotal() string {
	if x != nil {
		return x.Total
	}
	return ""
}

func (x *Good) GetSpotQuantity() string {
	if x != nil {
		return x.SpotQuantity
	}
	return ""
}

func (x *Good) GetLocked() string {
	if x != nil {
		return x.Locked
	}
	return ""
}

func (x *Good) GetInService() string {
	if x != nil {
		return x.InService
	}
	return ""
}

func (x *Good) GetWaitStart() string {
	if x != nil {
		return x.WaitStart
	}
	return ""
}

func (x *Good) GetSold() string {
	if x != nil {
		return x.Sold
	}
	return ""
}

func (x *Good) GetAppReserved() string {
	if x != nil {
		return x.AppReserved
	}
	return ""
}

func (x *Good) GetDeliveryAt() uint32 {
	if x != nil {
		return x.DeliveryAt
	}
	return 0
}

func (x *Good) GetStartAt() uint32 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *Good) GetStartMode() v1.GoodStartMode {
	if x != nil {
		return x.StartMode
	}
	return v1.GoodStartMode(0)
}

func (x *Good) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Good) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Good) GetBenefitIntervalHours() uint32 {
	if x != nil {
		return x.BenefitIntervalHours
	}
	return 0
}

func (x *Good) GetLastBenefitAt() uint32 {
	if x != nil {
		return x.LastBenefitAt
	}
	return 0
}

func (x *Good) GetNextBenefitStartAmount() string {
	if x != nil {
		return x.NextBenefitStartAmount
	}
	return ""
}

func (x *Good) GetLastBenefitAmount() string {
	if x != nil {
		return x.LastBenefitAmount
	}
	return ""
}

func (x *Good) GetLikes() uint32 {
	if x != nil {
		return x.Likes
	}
	return 0
}

func (x *Good) GetDislikes() uint32 {
	if x != nil {
		return x.Dislikes
	}
	return 0
}

func (x *Good) GetScore() string {
	if x != nil {
		return x.Score
	}
	return ""
}

func (x *Good) GetScoreCount() uint32 {
	if x != nil {
		return x.ScoreCount
	}
	return 0
}

func (x *Good) GetRecommendCount() uint32 {
	if x != nil {
		return x.RecommendCount
	}
	return 0
}

func (x *Good) GetCommentCount() uint32 {
	if x != nil {
		return x.CommentCount
	}
	return 0
}

func (x *Good) GetUnitLockDeposit() string {
	if x != nil {
		return x.UnitLockDeposit
	}
	return ""
}

func (x *Good) GetUnitType() v1.GoodUnitType {
	if x != nil {
		return x.UnitType
	}
	return v1.GoodUnitType(0)
}

func (x *Good) GetQuantityCalculateType() v1.GoodUnitCalculateType {
	if x != nil {
		return x.QuantityCalculateType
	}
	return v1.GoodUnitCalculateType(0)
}

func (x *Good) GetDurationType() v1.GoodDurationType {
	if x != nil {
		return x.DurationType
	}
	return v1.GoodDurationType(0)
}

func (x *Good) GetDurationCalculateType() v1.GoodUnitCalculateType {
	if x != nil {
		return x.DurationCalculateType
	}
	return v1.GoodUnitCalculateType(0)
}

type CreateGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceInfoID          string                    `protobuf:"bytes,20,opt,name=DeviceInfoID,proto3" json:"DeviceInfoID,omitempty"`
	DurationDays          int32                     `protobuf:"varint,30,opt,name=DurationDays,proto3" json:"DurationDays,omitempty"`
	CoinTypeID            string                    `protobuf:"bytes,40,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty"`
	VendorLocationID      string                    `protobuf:"bytes,60,opt,name=VendorLocationID,proto3" json:"VendorLocationID,omitempty"`
	Price                 string                    `protobuf:"bytes,70,opt,name=Price,proto3" json:"Price,omitempty"`
	BenefitType           v1.BenefitType            `protobuf:"varint,80,opt,name=BenefitType,proto3,enum=basetypes.good.v1.BenefitType" json:"BenefitType,omitempty"`
	GoodType              v1.GoodType               `protobuf:"varint,90,opt,name=GoodType,proto3,enum=basetypes.good.v1.GoodType" json:"GoodType,omitempty"`
	Title                 string                    `protobuf:"bytes,100,opt,name=Title,proto3" json:"Title,omitempty"`
	QuantityUnit          string                    `protobuf:"bytes,110,opt,name=QuantityUnit,proto3" json:"QuantityUnit,omitempty"`
	QuantityUnitAmount    string                    `protobuf:"bytes,120,opt,name=QuantityUnitAmount,proto3" json:"QuantityUnitAmount,omitempty"`
	DeliveryAt            uint32                    `protobuf:"varint,140,opt,name=DeliveryAt,proto3" json:"DeliveryAt,omitempty"`
	StartAt               uint32                    `protobuf:"varint,150,opt,name=StartAt,proto3" json:"StartAt,omitempty"`
	StartMode             v1.GoodStartMode          `protobuf:"varint,151,opt,name=StartMode,proto3,enum=basetypes.good.v1.GoodStartMode" json:"StartMode,omitempty"`
	TestOnly              bool                      `protobuf:"varint,160,opt,name=TestOnly,proto3" json:"TestOnly,omitempty"`
	Total                 string                    `protobuf:"bytes,170,opt,name=Total,proto3" json:"Total,omitempty"`
	Posters               []string                  `protobuf:"bytes,210,rep,name=Posters,proto3" json:"Posters,omitempty"`
	Labels                []v1.GoodLabel            `protobuf:"varint,220,rep,packed,name=Labels,proto3,enum=basetypes.good.v1.GoodLabel" json:"Labels,omitempty"`
	BenefitIntervalHours  *uint32                   `protobuf:"varint,230,opt,name=BenefitIntervalHours,proto3,oneof" json:"BenefitIntervalHours,omitempty"`
	UnitLockDeposit       *string                   `protobuf:"bytes,240,opt,name=UnitLockDeposit,proto3,oneof" json:"UnitLockDeposit,omitempty"`
	UnitType              *v1.GoodUnitType          `protobuf:"varint,250,opt,name=UnitType,proto3,enum=basetypes.good.v1.GoodUnitType,oneof" json:"UnitType,omitempty"`
	QuantityCalculateType *v1.GoodUnitCalculateType `protobuf:"varint,260,opt,name=QuantityCalculateType,proto3,enum=basetypes.good.v1.GoodUnitCalculateType,oneof" json:"QuantityCalculateType,omitempty"`
	DurationType          *v1.GoodDurationType      `protobuf:"varint,270,opt,name=DurationType,proto3,enum=basetypes.good.v1.GoodDurationType,oneof" json:"DurationType,omitempty"`
	DurationCalculateType *v1.GoodUnitCalculateType `protobuf:"varint,280,opt,name=DurationCalculateType,proto3,enum=basetypes.good.v1.GoodUnitCalculateType,oneof" json:"DurationCalculateType,omitempty"`
}

func (x *CreateGoodRequest) Reset() {
	*x = CreateGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_good_good_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGoodRequest) ProtoMessage() {}

func (x *CreateGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_good_good_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGoodRequest.ProtoReflect.Descriptor instead.
func (*CreateGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_good_good_proto_rawDescGZIP(), []int{1}
}

func (x *CreateGoodRequest) GetDeviceInfoID() string {
	if x != nil {
		return x.DeviceInfoID
	}
	return ""
}

func (x *CreateGoodRequest) GetDurationDays() int32 {
	if x != nil {
		return x.DurationDays
	}
	return 0
}

func (x *CreateGoodRequest) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

func (x *CreateGoodRequest) GetVendorLocationID() string {
	if x != nil {
		return x.VendorLocationID
	}
	return ""
}

func (x *CreateGoodRequest) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *CreateGoodRequest) GetBenefitType() v1.BenefitType {
	if x != nil {
		return x.BenefitType
	}
	return v1.BenefitType(0)
}

func (x *CreateGoodRequest) GetGoodType() v1.GoodType {
	if x != nil {
		return x.GoodType
	}
	return v1.GoodType(0)
}

func (x *CreateGoodRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateGoodRequest) GetQuantityUnit() string {
	if x != nil {
		return x.QuantityUnit
	}
	return ""
}

func (x *CreateGoodRequest) GetQuantityUnitAmount() string {
	if x != nil {
		return x.QuantityUnitAmount
	}
	return ""
}

func (x *CreateGoodRequest) GetDeliveryAt() uint32 {
	if x != nil {
		return x.DeliveryAt
	}
	return 0
}

func (x *CreateGoodRequest) GetStartAt() uint32 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *CreateGoodRequest) GetStartMode() v1.GoodStartMode {
	if x != nil {
		return x.StartMode
	}
	return v1.GoodStartMode(0)
}

func (x *CreateGoodRequest) GetTestOnly() bool {
	if x != nil {
		return x.TestOnly
	}
	return false
}

func (x *CreateGoodRequest) GetTotal() string {
	if x != nil {
		return x.Total
	}
	return ""
}

func (x *CreateGoodRequest) GetPosters() []string {
	if x != nil {
		return x.Posters
	}
	return nil
}

func (x *CreateGoodRequest) GetLabels() []v1.GoodLabel {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *CreateGoodRequest) GetBenefitIntervalHours() uint32 {
	if x != nil && x.BenefitIntervalHours != nil {
		return *x.BenefitIntervalHours
	}
	return 0
}

func (x *CreateGoodRequest) GetUnitLockDeposit() string {
	if x != nil && x.UnitLockDeposit != nil {
		return *x.UnitLockDeposit
	}
	return ""
}

func (x *CreateGoodRequest) GetUnitType() v1.GoodUnitType {
	if x != nil && x.UnitType != nil {
		return *x.UnitType
	}
	return v1.GoodUnitType(0)
}

func (x *CreateGoodRequest) GetQuantityCalculateType() v1.GoodUnitCalculateType {
	if x != nil && x.QuantityCalculateType != nil {
		return *x.QuantityCalculateType
	}
	return v1.GoodUnitCalculateType(0)
}

func (x *CreateGoodRequest) GetDurationType() v1.GoodDurationType {
	if x != nil && x.DurationType != nil {
		return *x.DurationType
	}
	return v1.GoodDurationType(0)
}

func (x *CreateGoodRequest) GetDurationCalculateType() v1.GoodUnitCalculateType {
	if x != nil && x.DurationCalculateType != nil {
		return *x.DurationCalculateType
	}
	return v1.GoodUnitCalculateType(0)
}

type CreateGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Good `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateGoodResponse) Reset() {
	*x = CreateGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_good_good_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGoodResponse) ProtoMessage() {}

func (x *CreateGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_good_good_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGoodResponse.ProtoReflect.Descriptor instead.
func (*CreateGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_good_good_proto_rawDescGZIP(), []int{2}
}

func (x *CreateGoodResponse) GetInfo() *Good {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntID string `protobuf:"bytes,10,opt,name=EntID,proto3" json:"EntID,omitempty"`
}

func (x *GetGoodRequest) Reset() {
	*x = GetGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_good_good_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodRequest) ProtoMessage() {}

func (x *GetGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_good_good_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodRequest.ProtoReflect.Descriptor instead.
func (*GetGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_good_good_proto_rawDescGZIP(), []int{3}
}

func (x *GetGoodRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

type GetGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Good `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetGoodResponse) Reset() {
	*x = GetGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_good_good_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodResponse) ProtoMessage() {}

func (x *GetGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_good_good_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodResponse.ProtoReflect.Descriptor instead.
func (*GetGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_good_good_proto_rawDescGZIP(), []int{4}
}

func (x *GetGoodResponse) GetInfo() *Good {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetGoodsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int32 `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32 `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetGoodsRequest) Reset() {
	*x = GetGoodsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_good_good_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodsRequest) ProtoMessage() {}

func (x *GetGoodsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_good_good_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodsRequest.ProtoReflect.Descriptor instead.
func (*GetGoodsRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_good_good_proto_rawDescGZIP(), []int{5}
}

func (x *GetGoodsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetGoodsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetGoodsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Good `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32  `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetGoodsResponse) Reset() {
	*x = GetGoodsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_good_good_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodsResponse) ProtoMessage() {}

func (x *GetGoodsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_good_good_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodsResponse.ProtoReflect.Descriptor instead.
func (*GetGoodsResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_good_good_proto_rawDescGZIP(), []int{6}
}

func (x *GetGoodsResponse) GetInfos() []*Good {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetGoodsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type UpdateGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                    uint32                    `protobuf:"varint,9,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID                 string                    `protobuf:"bytes,10,opt,name=EntID,proto3" json:"EntID,omitempty"`
	DeviceInfoID          *string                   `protobuf:"bytes,20,opt,name=DeviceInfoID,proto3,oneof" json:"DeviceInfoID,omitempty"`
	DurationDays          *int32                    `protobuf:"varint,30,opt,name=DurationDays,proto3,oneof" json:"DurationDays,omitempty"`
	CoinTypeID            *string                   `protobuf:"bytes,40,opt,name=CoinTypeID,proto3,oneof" json:"CoinTypeID,omitempty"`
	VendorLocationID      *string                   `protobuf:"bytes,60,opt,name=VendorLocationID,proto3,oneof" json:"VendorLocationID,omitempty"`
	Price                 *string                   `protobuf:"bytes,70,opt,name=Price,proto3,oneof" json:"Price,omitempty"`
	BenefitType           *v1.BenefitType           `protobuf:"varint,80,opt,name=BenefitType,proto3,enum=basetypes.good.v1.BenefitType,oneof" json:"BenefitType,omitempty"`
	GoodType              *v1.GoodType              `protobuf:"varint,90,opt,name=GoodType,proto3,enum=basetypes.good.v1.GoodType,oneof" json:"GoodType,omitempty"`
	Title                 *string                   `protobuf:"bytes,100,opt,name=Title,proto3,oneof" json:"Title,omitempty"`
	QuantityUnit          *string                   `protobuf:"bytes,110,opt,name=QuantityUnit,proto3,oneof" json:"QuantityUnit,omitempty"`
	QuantityUnitAmount    *string                   `protobuf:"bytes,120,opt,name=QuantityUnitAmount,proto3,oneof" json:"QuantityUnitAmount,omitempty"`
	DeliveryAt            *uint32                   `protobuf:"varint,140,opt,name=DeliveryAt,proto3,oneof" json:"DeliveryAt,omitempty"`
	StartAt               *uint32                   `protobuf:"varint,150,opt,name=StartAt,proto3,oneof" json:"StartAt,omitempty"`
	StartMode             *v1.GoodStartMode         `protobuf:"varint,151,opt,name=StartMode,proto3,enum=basetypes.good.v1.GoodStartMode,oneof" json:"StartMode,omitempty"`
	TestOnly              *bool                     `protobuf:"varint,160,opt,name=TestOnly,proto3,oneof" json:"TestOnly,omitempty"`
	Total                 *string                   `protobuf:"bytes,170,opt,name=Total,proto3,oneof" json:"Total,omitempty"`
	Posters               []string                  `protobuf:"bytes,210,rep,name=Posters,proto3" json:"Posters,omitempty"`
	Labels                []v1.GoodLabel            `protobuf:"varint,220,rep,packed,name=Labels,proto3,enum=basetypes.good.v1.GoodLabel" json:"Labels,omitempty"`
	BenefitIntervalHours  *uint32                   `protobuf:"varint,230,opt,name=BenefitIntervalHours,proto3,oneof" json:"BenefitIntervalHours,omitempty"`
	UnitLockDeposit       *string                   `protobuf:"bytes,240,opt,name=UnitLockDeposit,proto3,oneof" json:"UnitLockDeposit,omitempty"`
	UnitType              *v1.GoodUnitType          `protobuf:"varint,250,opt,name=UnitType,proto3,enum=basetypes.good.v1.GoodUnitType,oneof" json:"UnitType,omitempty"`
	QuantityCalculateType *v1.GoodUnitCalculateType `protobuf:"varint,260,opt,name=QuantityCalculateType,proto3,enum=basetypes.good.v1.GoodUnitCalculateType,oneof" json:"QuantityCalculateType,omitempty"`
	DurationType          *v1.GoodDurationType      `protobuf:"varint,270,opt,name=DurationType,proto3,enum=basetypes.good.v1.GoodDurationType,oneof" json:"DurationType,omitempty"`
	DurationCalculateType *v1.GoodUnitCalculateType `protobuf:"varint,280,opt,name=DurationCalculateType,proto3,enum=basetypes.good.v1.GoodUnitCalculateType,oneof" json:"DurationCalculateType,omitempty"`
}

func (x *UpdateGoodRequest) Reset() {
	*x = UpdateGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_good_good_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGoodRequest) ProtoMessage() {}

func (x *UpdateGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_good_good_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGoodRequest.ProtoReflect.Descriptor instead.
func (*UpdateGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_good_good_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateGoodRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *UpdateGoodRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *UpdateGoodRequest) GetDeviceInfoID() string {
	if x != nil && x.DeviceInfoID != nil {
		return *x.DeviceInfoID
	}
	return ""
}

func (x *UpdateGoodRequest) GetDurationDays() int32 {
	if x != nil && x.DurationDays != nil {
		return *x.DurationDays
	}
	return 0
}

func (x *UpdateGoodRequest) GetCoinTypeID() string {
	if x != nil && x.CoinTypeID != nil {
		return *x.CoinTypeID
	}
	return ""
}

func (x *UpdateGoodRequest) GetVendorLocationID() string {
	if x != nil && x.VendorLocationID != nil {
		return *x.VendorLocationID
	}
	return ""
}

func (x *UpdateGoodRequest) GetPrice() string {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return ""
}

func (x *UpdateGoodRequest) GetBenefitType() v1.BenefitType {
	if x != nil && x.BenefitType != nil {
		return *x.BenefitType
	}
	return v1.BenefitType(0)
}

func (x *UpdateGoodRequest) GetGoodType() v1.GoodType {
	if x != nil && x.GoodType != nil {
		return *x.GoodType
	}
	return v1.GoodType(0)
}

func (x *UpdateGoodRequest) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *UpdateGoodRequest) GetQuantityUnit() string {
	if x != nil && x.QuantityUnit != nil {
		return *x.QuantityUnit
	}
	return ""
}

func (x *UpdateGoodRequest) GetQuantityUnitAmount() string {
	if x != nil && x.QuantityUnitAmount != nil {
		return *x.QuantityUnitAmount
	}
	return ""
}

func (x *UpdateGoodRequest) GetDeliveryAt() uint32 {
	if x != nil && x.DeliveryAt != nil {
		return *x.DeliveryAt
	}
	return 0
}

func (x *UpdateGoodRequest) GetStartAt() uint32 {
	if x != nil && x.StartAt != nil {
		return *x.StartAt
	}
	return 0
}

func (x *UpdateGoodRequest) GetStartMode() v1.GoodStartMode {
	if x != nil && x.StartMode != nil {
		return *x.StartMode
	}
	return v1.GoodStartMode(0)
}

func (x *UpdateGoodRequest) GetTestOnly() bool {
	if x != nil && x.TestOnly != nil {
		return *x.TestOnly
	}
	return false
}

func (x *UpdateGoodRequest) GetTotal() string {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return ""
}

func (x *UpdateGoodRequest) GetPosters() []string {
	if x != nil {
		return x.Posters
	}
	return nil
}

func (x *UpdateGoodRequest) GetLabels() []v1.GoodLabel {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *UpdateGoodRequest) GetBenefitIntervalHours() uint32 {
	if x != nil && x.BenefitIntervalHours != nil {
		return *x.BenefitIntervalHours
	}
	return 0
}

func (x *UpdateGoodRequest) GetUnitLockDeposit() string {
	if x != nil && x.UnitLockDeposit != nil {
		return *x.UnitLockDeposit
	}
	return ""
}

func (x *UpdateGoodRequest) GetUnitType() v1.GoodUnitType {
	if x != nil && x.UnitType != nil {
		return *x.UnitType
	}
	return v1.GoodUnitType(0)
}

func (x *UpdateGoodRequest) GetQuantityCalculateType() v1.GoodUnitCalculateType {
	if x != nil && x.QuantityCalculateType != nil {
		return *x.QuantityCalculateType
	}
	return v1.GoodUnitCalculateType(0)
}

func (x *UpdateGoodRequest) GetDurationType() v1.GoodDurationType {
	if x != nil && x.DurationType != nil {
		return *x.DurationType
	}
	return v1.GoodDurationType(0)
}

func (x *UpdateGoodRequest) GetDurationCalculateType() v1.GoodUnitCalculateType {
	if x != nil && x.DurationCalculateType != nil {
		return *x.DurationCalculateType
	}
	return v1.GoodUnitCalculateType(0)
}

type UpdateGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Good `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateGoodResponse) Reset() {
	*x = UpdateGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_good_good_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGoodResponse) ProtoMessage() {}

func (x *UpdateGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_good_good_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGoodResponse.ProtoReflect.Descriptor instead.
func (*UpdateGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_good_good_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateGoodResponse) GetInfo() *Good {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_good_gw_v1_good_good_proto protoreflect.FileDescriptor

var file_npool_good_gw_v1_good_good_proto_rawDesc = []byte{
	0x0a, 0x20, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x67, 0x77, 0x2f,
	0x76, 0x31, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x15, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x1a, 0x23, 0x6e, 0x70, 0x6f, 0x6f, 0x6c,
	0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f,
	0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc4, 0x12, 0x0a,
	0x04, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x2e, 0x0a, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12,
	0x36, 0x0a, 0x16, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x16, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x46, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x18, 0x50, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x5a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x69,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x69,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x6e, 0x69,
	0x74, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x21, 0x0a, 0x0b, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x65, 0x53, 0x61, 0x6c, 0x65,
	0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x65,
	0x53, 0x61, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x10, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x35, 0x0a, 0x15, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x16, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63,
	0x65, 0x12, 0x2f, 0x0a, 0x12, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x69, 0x74, 0x79, 0x18, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x69,
	0x74, 0x79, 0x12, 0x35, 0x0a, 0x15, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xdc, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x0f, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0xdd, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x0f, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x42, 0x72,
	0x61, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0xde, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x6f, 0x12,
	0x38, 0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0xe6, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x42, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0xf0, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x05,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x15, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x84, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x8e, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x12,
	0x2f, 0x0a, 0x12, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x98, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1b, 0x0a, 0x08, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0xa2, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x19, 0x0a,
	0x07, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0xac, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x06, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0xb6, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x52, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x19, 0x0a, 0x07, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0xde, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x15, 0x0a, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0xe8, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x23, 0x0a, 0x0c, 0x53, 0x70, 0x6f, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x18, 0xe9, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x70, 0x6f, 0x74, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x17, 0x0a, 0x06, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x18, 0xf2, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12,
	0x1d, 0x0a, 0x09, 0x49, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0xfc, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1d,
	0x0a, 0x09, 0x57, 0x61, 0x69, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0xfd, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x57, 0x61, 0x69, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x13, 0x0a,
	0x04, 0x53, 0x6f, 0x6c, 0x64, 0x18, 0x86, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x6f,
	0x6c, 0x64, 0x12, 0x21, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x18, 0x87, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x41, 0x74, 0x18, 0x90, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x41, 0x74, 0x12, 0x19, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x74, 0x18, 0x9a, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x74, 0x12, 0x3f, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x9b,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0xa4, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xae,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x33, 0x0a, 0x14, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x18, 0xc2, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x74, 0x41, 0x74, 0x18, 0xcc, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x4c,
	0x61, 0x73, 0x74, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x41, 0x74, 0x12, 0x37, 0x0a, 0x16,
	0x4e, 0x65, 0x78, 0x74, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xd6, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x4e,
	0x65, 0x78, 0x74, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x11, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xe0, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x05, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x18, 0xea, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4c, 0x69, 0x6b, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x08, 0x44,
	0x69, 0x73, 0x6c, 0x69, 0x6b, 0x65, 0x73, 0x18, 0xf4, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x44, 0x69, 0x73, 0x6c, 0x69, 0x6b, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0xfe, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12,
	0x1f, 0x0a, 0x0a, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x88, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x27, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x92, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x9c, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29,
	0x0a, 0x0f, 0x55, 0x6e, 0x69, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x18, 0xa6, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x55, 0x6e, 0x69, 0x74, 0x4c, 0x6f,
	0x63, 0x6b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x55, 0x6e, 0x69,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0xb0, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x55,
	0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5f, 0x0a, 0x15, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0xba, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64,
	0x55, 0x6e, 0x69, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x15, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0xc4, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x5f, 0x0a, 0x15, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0xce, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x28, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x43,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x15, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x22, 0xec, 0x09, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f,
	0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x44, 0x12, 0x22, 0x0a,
	0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x44, 0x12, 0x2a, 0x0a, 0x10, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x14, 0x0a,
	0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x55, 0x6e, 0x69, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x78,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x6e,
	0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x41, 0x74, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x74, 0x12, 0x19, 0x0a, 0x07, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x41, 0x74, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x41, 0x74, 0x12, 0x3f, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x6c,
	0x79, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x6e,
	0x6c, 0x79, 0x12, 0x15, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0xaa, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x19, 0x0a, 0x07, 0x50, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x18, 0xd2, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x50, 0x6f, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0xdc,
	0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x52, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x38, 0x0a, 0x14, 0x42,
	0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x48, 0x6f,
	0x75, 0x72, 0x73, 0x18, 0xe6, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x14, 0x42, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x48, 0x6f, 0x75,
	0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0f, 0x55, 0x6e, 0x69, 0x74, 0x4c, 0x6f, 0x63,
	0x6b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0xf0, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0f, 0x55, 0x6e, 0x69, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x08, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x64, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x02, 0x52, 0x08, 0x55, 0x6e, 0x69,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x64, 0x0a, 0x15, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x84, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x64, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x03, 0x52, 0x15, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4d,
	0x0a, 0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x8e,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x04, 0x52, 0x0c, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x64, 0x0a,
	0x15, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x98, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x05, 0x52, 0x15, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x55, 0x6e, 0x69, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x18, 0x0a,
	0x16, 0x5f, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x45, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x64, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x26, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x45,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49,
	0x44, 0x22, 0x42, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x3f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x5b, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x22, 0xbc, 0x0c, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6f,
	0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x27, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x44, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01,
	0x52, 0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x23, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x10, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x45, 0x0a, 0x0b, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x05, 0x52, 0x0b, 0x42, 0x65, 0x6e, 0x65, 0x66,
	0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x08, 0x47, 0x6f, 0x6f,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x48, 0x06, 0x52, 0x08, 0x47, 0x6f, 0x6f, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x6e,
	0x69, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0c, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x12, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x74, 0x18, 0x8c,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0a, 0x52, 0x0a, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x74, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0b, 0x52, 0x07, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x18, 0x97, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x0c, 0x52, 0x09,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x08,
	0x54, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x0d, 0x52, 0x08, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1a,
	0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e,
	0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x07, 0x50, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0xd2, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x50, 0x6f,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0xdc, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x52, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x38, 0x0a, 0x14,
	0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x48,
	0x6f, 0x75, 0x72, 0x73, 0x18, 0xe6, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0f, 0x52, 0x14, 0x42,
	0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x48, 0x6f,
	0x75, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0f, 0x55, 0x6e, 0x69, 0x74, 0x4c, 0x6f,
	0x63, 0x6b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0xf0, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x10, 0x52, 0x0f, 0x55, 0x6e, 0x69, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x08, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x11, 0x52, 0x08, 0x55, 0x6e,
	0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x64, 0x0a, 0x15, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x84, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x48, 0x12, 0x52, 0x15, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x4d, 0x0a, 0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x8e, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x48, 0x13, 0x52, 0x0c, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x64,
	0x0a, 0x15, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x98, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x43, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x14, 0x52, 0x15, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x49, 0x44, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x44, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x42, 0x15, 0x0a, 0x13,
	0x5f, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x41, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x55, 0x6e, 0x69, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x18, 0x0a,
	0x16, 0x5f, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x45, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x64, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0xf1, 0x03, 0x0a, 0x07, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x7d, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47,
	0x6f, 0x6f, 0x64, 0x12, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14,
	0x3a, 0x01, 0x2a, 0x22, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f,
	0x67, 0x6f, 0x6f, 0x64, 0x12, 0x71, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x12,
	0x25, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x3a, 0x01, 0x2a, 0x22, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x67,
	0x65, 0x74, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x12, 0x7d, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6f,
	0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x14, 0x3a, 0x01, 0x2a, 0x22, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x12, 0x75, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x12, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6f,
	0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x3a, 0x01, 0x2a, 0x22, 0x0d,
	0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x42, 0x38, 0x5a,
	0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f,
	0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x67, 0x77, 0x2f,
	0x76, 0x31, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_good_gw_v1_good_good_proto_rawDescOnce sync.Once
	file_npool_good_gw_v1_good_good_proto_rawDescData = file_npool_good_gw_v1_good_good_proto_rawDesc
)

func file_npool_good_gw_v1_good_good_proto_rawDescGZIP() []byte {
	file_npool_good_gw_v1_good_good_proto_rawDescOnce.Do(func() {
		file_npool_good_gw_v1_good_good_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_good_gw_v1_good_good_proto_rawDescData)
	})
	return file_npool_good_gw_v1_good_good_proto_rawDescData
}

var file_npool_good_gw_v1_good_good_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_npool_good_gw_v1_good_good_proto_goTypes = []interface{}{
	(*Good)(nil),                  // 0: good.gateway.good1.v1.Good
	(*CreateGoodRequest)(nil),     // 1: good.gateway.good1.v1.CreateGoodRequest
	(*CreateGoodResponse)(nil),    // 2: good.gateway.good1.v1.CreateGoodResponse
	(*GetGoodRequest)(nil),        // 3: good.gateway.good1.v1.GetGoodRequest
	(*GetGoodResponse)(nil),       // 4: good.gateway.good1.v1.GetGoodResponse
	(*GetGoodsRequest)(nil),       // 5: good.gateway.good1.v1.GetGoodsRequest
	(*GetGoodsResponse)(nil),      // 6: good.gateway.good1.v1.GetGoodsResponse
	(*UpdateGoodRequest)(nil),     // 7: good.gateway.good1.v1.UpdateGoodRequest
	(*UpdateGoodResponse)(nil),    // 8: good.gateway.good1.v1.UpdateGoodResponse
	(v1.GoodType)(0),              // 9: basetypes.good.v1.GoodType
	(v1.BenefitType)(0),           // 10: basetypes.good.v1.BenefitType
	(v1.GoodLabel)(0),             // 11: basetypes.good.v1.GoodLabel
	(v1.GoodStartMode)(0),         // 12: basetypes.good.v1.GoodStartMode
	(v1.GoodUnitType)(0),          // 13: basetypes.good.v1.GoodUnitType
	(v1.GoodUnitCalculateType)(0), // 14: basetypes.good.v1.GoodUnitCalculateType
	(v1.GoodDurationType)(0),      // 15: basetypes.good.v1.GoodDurationType
}
var file_npool_good_gw_v1_good_good_proto_depIdxs = []int32{
	9,  // 0: good.gateway.good1.v1.Good.GoodType:type_name -> basetypes.good.v1.GoodType
	10, // 1: good.gateway.good1.v1.Good.BenefitType:type_name -> basetypes.good.v1.BenefitType
	11, // 2: good.gateway.good1.v1.Good.Labels:type_name -> basetypes.good.v1.GoodLabel
	12, // 3: good.gateway.good1.v1.Good.StartMode:type_name -> basetypes.good.v1.GoodStartMode
	13, // 4: good.gateway.good1.v1.Good.UnitType:type_name -> basetypes.good.v1.GoodUnitType
	14, // 5: good.gateway.good1.v1.Good.QuantityCalculateType:type_name -> basetypes.good.v1.GoodUnitCalculateType
	15, // 6: good.gateway.good1.v1.Good.DurationType:type_name -> basetypes.good.v1.GoodDurationType
	14, // 7: good.gateway.good1.v1.Good.DurationCalculateType:type_name -> basetypes.good.v1.GoodUnitCalculateType
	10, // 8: good.gateway.good1.v1.CreateGoodRequest.BenefitType:type_name -> basetypes.good.v1.BenefitType
	9,  // 9: good.gateway.good1.v1.CreateGoodRequest.GoodType:type_name -> basetypes.good.v1.GoodType
	12, // 10: good.gateway.good1.v1.CreateGoodRequest.StartMode:type_name -> basetypes.good.v1.GoodStartMode
	11, // 11: good.gateway.good1.v1.CreateGoodRequest.Labels:type_name -> basetypes.good.v1.GoodLabel
	13, // 12: good.gateway.good1.v1.CreateGoodRequest.UnitType:type_name -> basetypes.good.v1.GoodUnitType
	14, // 13: good.gateway.good1.v1.CreateGoodRequest.QuantityCalculateType:type_name -> basetypes.good.v1.GoodUnitCalculateType
	15, // 14: good.gateway.good1.v1.CreateGoodRequest.DurationType:type_name -> basetypes.good.v1.GoodDurationType
	14, // 15: good.gateway.good1.v1.CreateGoodRequest.DurationCalculateType:type_name -> basetypes.good.v1.GoodUnitCalculateType
	0,  // 16: good.gateway.good1.v1.CreateGoodResponse.Info:type_name -> good.gateway.good1.v1.Good
	0,  // 17: good.gateway.good1.v1.GetGoodResponse.Info:type_name -> good.gateway.good1.v1.Good
	0,  // 18: good.gateway.good1.v1.GetGoodsResponse.Infos:type_name -> good.gateway.good1.v1.Good
	10, // 19: good.gateway.good1.v1.UpdateGoodRequest.BenefitType:type_name -> basetypes.good.v1.BenefitType
	9,  // 20: good.gateway.good1.v1.UpdateGoodRequest.GoodType:type_name -> basetypes.good.v1.GoodType
	12, // 21: good.gateway.good1.v1.UpdateGoodRequest.StartMode:type_name -> basetypes.good.v1.GoodStartMode
	11, // 22: good.gateway.good1.v1.UpdateGoodRequest.Labels:type_name -> basetypes.good.v1.GoodLabel
	13, // 23: good.gateway.good1.v1.UpdateGoodRequest.UnitType:type_name -> basetypes.good.v1.GoodUnitType
	14, // 24: good.gateway.good1.v1.UpdateGoodRequest.QuantityCalculateType:type_name -> basetypes.good.v1.GoodUnitCalculateType
	15, // 25: good.gateway.good1.v1.UpdateGoodRequest.DurationType:type_name -> basetypes.good.v1.GoodDurationType
	14, // 26: good.gateway.good1.v1.UpdateGoodRequest.DurationCalculateType:type_name -> basetypes.good.v1.GoodUnitCalculateType
	0,  // 27: good.gateway.good1.v1.UpdateGoodResponse.Info:type_name -> good.gateway.good1.v1.Good
	1,  // 28: good.gateway.good1.v1.Gateway.CreateGood:input_type -> good.gateway.good1.v1.CreateGoodRequest
	3,  // 29: good.gateway.good1.v1.Gateway.GetGood:input_type -> good.gateway.good1.v1.GetGoodRequest
	7,  // 30: good.gateway.good1.v1.Gateway.UpdateGood:input_type -> good.gateway.good1.v1.UpdateGoodRequest
	5,  // 31: good.gateway.good1.v1.Gateway.GetGoods:input_type -> good.gateway.good1.v1.GetGoodsRequest
	2,  // 32: good.gateway.good1.v1.Gateway.CreateGood:output_type -> good.gateway.good1.v1.CreateGoodResponse
	4,  // 33: good.gateway.good1.v1.Gateway.GetGood:output_type -> good.gateway.good1.v1.GetGoodResponse
	8,  // 34: good.gateway.good1.v1.Gateway.UpdateGood:output_type -> good.gateway.good1.v1.UpdateGoodResponse
	6,  // 35: good.gateway.good1.v1.Gateway.GetGoods:output_type -> good.gateway.good1.v1.GetGoodsResponse
	32, // [32:36] is the sub-list for method output_type
	28, // [28:32] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_npool_good_gw_v1_good_good_proto_init() }
func file_npool_good_gw_v1_good_good_proto_init() {
	if File_npool_good_gw_v1_good_good_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_good_gw_v1_good_good_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Good); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_good_good_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_good_good_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_good_good_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_good_good_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_good_good_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_good_good_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_good_good_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_good_good_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_good_gw_v1_good_good_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_npool_good_gw_v1_good_good_proto_msgTypes[7].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_good_gw_v1_good_good_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_good_gw_v1_good_good_proto_goTypes,
		DependencyIndexes: file_npool_good_gw_v1_good_good_proto_depIdxs,
		MessageInfos:      file_npool_good_gw_v1_good_good_proto_msgTypes,
	}.Build()
	File_npool_good_gw_v1_good_good_proto = out.File
	file_npool_good_gw_v1_good_good_proto_rawDesc = nil
	file_npool_good_gw_v1_good_good_proto_goTypes = nil
	file_npool_good_gw_v1_good_good_proto_depIdxs = nil
}
