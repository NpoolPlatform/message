// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.18.1
// source: npool/good/gw/v1/good/coin/coin.proto

package coin

import (
	v1 "github.com/NpoolPlatform/message/npool/basetypes/good/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GoodCoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         uint32      `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID      string      `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty"`
	GoodID     string      `protobuf:"bytes,30,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
	GoodName   string      `protobuf:"bytes,40,opt,name=GoodName,proto3" json:"GoodName,omitempty"`
	GoodType   v1.GoodType `protobuf:"varint,60,opt,name=GoodType,proto3,enum=basetypes.good.v1.GoodType" json:"GoodType,omitempty"`
	CoinTypeID string      `protobuf:"bytes,70,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty"`
	CoinName   string      `protobuf:"bytes,80,opt,name=CoinName,proto3" json:"CoinName,omitempty"`
	CoinUnit   string      `protobuf:"bytes,90,opt,name=CoinUnit,proto3" json:"CoinUnit,omitempty"`
	CoinENV    string      `protobuf:"bytes,100,opt,name=CoinENV,proto3" json:"CoinENV,omitempty"`
	CoinLogo   string      `protobuf:"bytes,110,opt,name=CoinLogo,proto3" json:"CoinLogo,omitempty"`
	Main       bool        `protobuf:"varint,120,opt,name=Main,proto3" json:"Main,omitempty"`
	Index      int32       `protobuf:"varint,130,opt,name=Index,proto3" json:"Index,omitempty"`
	CreatedAt  uint32      `protobuf:"varint,1000,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt  uint32      `protobuf:"varint,1010,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (x *GoodCoin) Reset() {
	*x = GoodCoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_good_coin_coin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodCoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodCoin) ProtoMessage() {}

func (x *GoodCoin) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_good_coin_coin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodCoin.ProtoReflect.Descriptor instead.
func (*GoodCoin) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_good_coin_coin_proto_rawDescGZIP(), []int{0}
}

func (x *GoodCoin) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *GoodCoin) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *GoodCoin) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *GoodCoin) GetGoodName() string {
	if x != nil {
		return x.GoodName
	}
	return ""
}

func (x *GoodCoin) GetGoodType() v1.GoodType {
	if x != nil {
		return x.GoodType
	}
	return v1.GoodType(0)
}

func (x *GoodCoin) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

func (x *GoodCoin) GetCoinName() string {
	if x != nil {
		return x.CoinName
	}
	return ""
}

func (x *GoodCoin) GetCoinUnit() string {
	if x != nil {
		return x.CoinUnit
	}
	return ""
}

func (x *GoodCoin) GetCoinENV() string {
	if x != nil {
		return x.CoinENV
	}
	return ""
}

func (x *GoodCoin) GetCoinLogo() string {
	if x != nil {
		return x.CoinLogo
	}
	return ""
}

func (x *GoodCoin) GetMain() bool {
	if x != nil {
		return x.Main
	}
	return false
}

func (x *GoodCoin) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *GoodCoin) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *GoodCoin) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type GoodCoinInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinTypeID string `protobuf:"bytes,10,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty"`
	CoinName   string `protobuf:"bytes,20,opt,name=CoinName,proto3" json:"CoinName,omitempty"`
	CoinUnit   string `protobuf:"bytes,30,opt,name=CoinUnit,proto3" json:"CoinUnit,omitempty"`
	CoinENV    string `protobuf:"bytes,40,opt,name=CoinENV,proto3" json:"CoinENV,omitempty"`
	CoinLogo   string `protobuf:"bytes,50,opt,name=CoinLogo,proto3" json:"CoinLogo,omitempty"`
	Main       bool   `protobuf:"varint,60,opt,name=Main,proto3" json:"Main,omitempty"`
	Index      int32  `protobuf:"varint,70,opt,name=Index,proto3" json:"Index,omitempty"`
}

func (x *GoodCoinInfo) Reset() {
	*x = GoodCoinInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_good_coin_coin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodCoinInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodCoinInfo) ProtoMessage() {}

func (x *GoodCoinInfo) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_good_coin_coin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodCoinInfo.ProtoReflect.Descriptor instead.
func (*GoodCoinInfo) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_good_coin_coin_proto_rawDescGZIP(), []int{1}
}

func (x *GoodCoinInfo) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

func (x *GoodCoinInfo) GetCoinName() string {
	if x != nil {
		return x.CoinName
	}
	return ""
}

func (x *GoodCoinInfo) GetCoinUnit() string {
	if x != nil {
		return x.CoinUnit
	}
	return ""
}

func (x *GoodCoinInfo) GetCoinENV() string {
	if x != nil {
		return x.CoinENV
	}
	return ""
}

func (x *GoodCoinInfo) GetCoinLogo() string {
	if x != nil {
		return x.CoinLogo
	}
	return ""
}

func (x *GoodCoinInfo) GetMain() bool {
	if x != nil {
		return x.Main
	}
	return false
}

func (x *GoodCoinInfo) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type AdminCreateGoodCoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoodID     string `protobuf:"bytes,10,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
	CoinTypeID string `protobuf:"bytes,20,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty"`
	Main       *bool  `protobuf:"varint,30,opt,name=Main,proto3,oneof" json:"Main,omitempty"`
	Index      *int32 `protobuf:"varint,40,opt,name=Index,proto3,oneof" json:"Index,omitempty"`
}

func (x *AdminCreateGoodCoinRequest) Reset() {
	*x = AdminCreateGoodCoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_good_coin_coin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminCreateGoodCoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminCreateGoodCoinRequest) ProtoMessage() {}

func (x *AdminCreateGoodCoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_good_coin_coin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminCreateGoodCoinRequest.ProtoReflect.Descriptor instead.
func (*AdminCreateGoodCoinRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_good_coin_coin_proto_rawDescGZIP(), []int{2}
}

func (x *AdminCreateGoodCoinRequest) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *AdminCreateGoodCoinRequest) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

func (x *AdminCreateGoodCoinRequest) GetMain() bool {
	if x != nil && x.Main != nil {
		return *x.Main
	}
	return false
}

func (x *AdminCreateGoodCoinRequest) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

type AdminCreateGoodCoinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *GoodCoin `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *AdminCreateGoodCoinResponse) Reset() {
	*x = AdminCreateGoodCoinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_good_coin_coin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminCreateGoodCoinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminCreateGoodCoinResponse) ProtoMessage() {}

func (x *AdminCreateGoodCoinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_good_coin_coin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminCreateGoodCoinResponse.ProtoReflect.Descriptor instead.
func (*AdminCreateGoodCoinResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_good_coin_coin_proto_rawDescGZIP(), []int{3}
}

func (x *AdminCreateGoodCoinResponse) GetInfo() *GoodCoin {
	if x != nil {
		return x.Info
	}
	return nil
}

type AdminUpdateGoodCoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID    uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID string `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty"`
	Main  *bool  `protobuf:"varint,30,opt,name=Main,proto3,oneof" json:"Main,omitempty"`
	Index *int32 `protobuf:"varint,40,opt,name=Index,proto3,oneof" json:"Index,omitempty"`
}

func (x *AdminUpdateGoodCoinRequest) Reset() {
	*x = AdminUpdateGoodCoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_good_coin_coin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminUpdateGoodCoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminUpdateGoodCoinRequest) ProtoMessage() {}

func (x *AdminUpdateGoodCoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_good_coin_coin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminUpdateGoodCoinRequest.ProtoReflect.Descriptor instead.
func (*AdminUpdateGoodCoinRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_good_coin_coin_proto_rawDescGZIP(), []int{4}
}

func (x *AdminUpdateGoodCoinRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *AdminUpdateGoodCoinRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *AdminUpdateGoodCoinRequest) GetMain() bool {
	if x != nil && x.Main != nil {
		return *x.Main
	}
	return false
}

func (x *AdminUpdateGoodCoinRequest) GetIndex() int32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

type AdminUpdateGoodCoinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *GoodCoin `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *AdminUpdateGoodCoinResponse) Reset() {
	*x = AdminUpdateGoodCoinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_good_coin_coin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminUpdateGoodCoinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminUpdateGoodCoinResponse) ProtoMessage() {}

func (x *AdminUpdateGoodCoinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_good_coin_coin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminUpdateGoodCoinResponse.ProtoReflect.Descriptor instead.
func (*AdminUpdateGoodCoinResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_good_coin_coin_proto_rawDescGZIP(), []int{5}
}

func (x *AdminUpdateGoodCoinResponse) GetInfo() *GoodCoin {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetGoodCoinsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int32 `protobuf:"varint,10,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32 `protobuf:"varint,20,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetGoodCoinsRequest) Reset() {
	*x = GetGoodCoinsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_good_coin_coin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodCoinsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodCoinsRequest) ProtoMessage() {}

func (x *GetGoodCoinsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_good_coin_coin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodCoinsRequest.ProtoReflect.Descriptor instead.
func (*GetGoodCoinsRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_good_coin_coin_proto_rawDescGZIP(), []int{6}
}

func (x *GetGoodCoinsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetGoodCoinsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetGoodCoinsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*GoodCoin `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32      `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetGoodCoinsResponse) Reset() {
	*x = GetGoodCoinsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_good_coin_coin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodCoinsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodCoinsResponse) ProtoMessage() {}

func (x *GetGoodCoinsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_good_coin_coin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodCoinsResponse.ProtoReflect.Descriptor instead.
func (*GetGoodCoinsResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_good_coin_coin_proto_rawDescGZIP(), []int{7}
}

func (x *GetGoodCoinsResponse) GetInfos() []*GoodCoin {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetGoodCoinsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type AdminDeleteGoodCoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID    uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID string `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty"`
}

func (x *AdminDeleteGoodCoinRequest) Reset() {
	*x = AdminDeleteGoodCoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_good_coin_coin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminDeleteGoodCoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminDeleteGoodCoinRequest) ProtoMessage() {}

func (x *AdminDeleteGoodCoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_good_coin_coin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminDeleteGoodCoinRequest.ProtoReflect.Descriptor instead.
func (*AdminDeleteGoodCoinRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_good_coin_coin_proto_rawDescGZIP(), []int{8}
}

func (x *AdminDeleteGoodCoinRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *AdminDeleteGoodCoinRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

type AdminDeleteGoodCoinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *GoodCoin `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *AdminDeleteGoodCoinResponse) Reset() {
	*x = AdminDeleteGoodCoinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_good_coin_coin_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminDeleteGoodCoinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminDeleteGoodCoinResponse) ProtoMessage() {}

func (x *AdminDeleteGoodCoinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_good_coin_coin_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminDeleteGoodCoinResponse.ProtoReflect.Descriptor instead.
func (*AdminDeleteGoodCoinResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_good_coin_coin_proto_rawDescGZIP(), []int{9}
}

func (x *AdminDeleteGoodCoinResponse) GetInfo() *GoodCoin {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_good_gw_v1_good_coin_coin_proto protoreflect.FileDescriptor

var file_npool_good_gw_v1_good_coin_coin_proto_rawDesc = []byte{
	0x0a, 0x25, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x67, 0x77, 0x2f,
	0x76, 0x31, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x63, 0x6f, 0x69,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x23, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x94, 0x03, 0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x43,
	0x6f, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x6f, 0x6f,
	0x64, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a,
	0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x47, 0x6f,
	0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x44, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x5a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x43, 0x6f, 0x69, 0x6e, 0x45, 0x4e, 0x56, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x43, 0x6f, 0x69, 0x6e, 0x45, 0x4e, 0x56, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e,
	0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e,
	0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x61, 0x69, 0x6e, 0x18, 0x78, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x4d, 0x61, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x1d, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xe8, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xf2, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xc6, 0x01,
	0x0a, 0x0c, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e,
	0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f,
	0x69, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f,
	0x69, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x69, 0x6e, 0x45, 0x4e,
	0x56, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x69, 0x6e, 0x45, 0x4e, 0x56,
	0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x4d, 0x61, 0x69, 0x6e, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x4d, 0x61, 0x69, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x46, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x9b, 0x01, 0x0a, 0x1a, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x1e, 0x0a,
	0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x17, 0x0a,
	0x04, 0x4d, 0x61, 0x69, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x04, 0x4d,
	0x61, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01,
	0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x4d, 0x61, 0x69, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x22, 0x57, 0x0a, 0x1b, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x89, 0x01,
	0x0a, 0x1a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f,
	0x64, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05,
	0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74,
	0x49, 0x44, 0x12, 0x17, 0x0a, 0x04, 0x4d, 0x61, 0x69, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x04, 0x4d, 0x61, 0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x4d, 0x61, 0x69, 0x6e, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x57, 0x0a, 0x1b, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x43, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x68, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x47, 0x6f,
	0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3a, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x31, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64,
	0x43, 0x6f, 0x69, 0x6e, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x22, 0x42, 0x0a, 0x1a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x45, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x57, 0x0a, 0x1b, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0xa8,
	0x05, 0x0a, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0xac, 0x01, 0x0a, 0x13, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f,
	0x69, 0x6e, 0x12, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e,
	0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0xac, 0x01, 0x0a, 0x13, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69,
	0x6e, 0x12, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x67, 0x6f, 0x6f, 0x64, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x8f, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74,
	0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f,
	0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e,
	0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x43,
	0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x16, 0x3a, 0x01, 0x2a, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74,
	0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x63, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0xac, 0x01, 0x0a, 0x13, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f,
	0x69, 0x6e, 0x12, 0x36, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e,
	0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x63, 0x6f, 0x69, 0x6e, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70,
	0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x67, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x67,
	0x6f, 0x6f, 0x64, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_good_gw_v1_good_coin_coin_proto_rawDescOnce sync.Once
	file_npool_good_gw_v1_good_coin_coin_proto_rawDescData = file_npool_good_gw_v1_good_coin_coin_proto_rawDesc
)

func file_npool_good_gw_v1_good_coin_coin_proto_rawDescGZIP() []byte {
	file_npool_good_gw_v1_good_coin_coin_proto_rawDescOnce.Do(func() {
		file_npool_good_gw_v1_good_coin_coin_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_good_gw_v1_good_coin_coin_proto_rawDescData)
	})
	return file_npool_good_gw_v1_good_coin_coin_proto_rawDescData
}

var file_npool_good_gw_v1_good_coin_coin_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_npool_good_gw_v1_good_coin_coin_proto_goTypes = []interface{}{
	(*GoodCoin)(nil),                    // 0: good.gateway.good1.coin.v1.GoodCoin
	(*GoodCoinInfo)(nil),                // 1: good.gateway.good1.coin.v1.GoodCoinInfo
	(*AdminCreateGoodCoinRequest)(nil),  // 2: good.gateway.good1.coin.v1.AdminCreateGoodCoinRequest
	(*AdminCreateGoodCoinResponse)(nil), // 3: good.gateway.good1.coin.v1.AdminCreateGoodCoinResponse
	(*AdminUpdateGoodCoinRequest)(nil),  // 4: good.gateway.good1.coin.v1.AdminUpdateGoodCoinRequest
	(*AdminUpdateGoodCoinResponse)(nil), // 5: good.gateway.good1.coin.v1.AdminUpdateGoodCoinResponse
	(*GetGoodCoinsRequest)(nil),         // 6: good.gateway.good1.coin.v1.GetGoodCoinsRequest
	(*GetGoodCoinsResponse)(nil),        // 7: good.gateway.good1.coin.v1.GetGoodCoinsResponse
	(*AdminDeleteGoodCoinRequest)(nil),  // 8: good.gateway.good1.coin.v1.AdminDeleteGoodCoinRequest
	(*AdminDeleteGoodCoinResponse)(nil), // 9: good.gateway.good1.coin.v1.AdminDeleteGoodCoinResponse
	(v1.GoodType)(0),                    // 10: basetypes.good.v1.GoodType
}
var file_npool_good_gw_v1_good_coin_coin_proto_depIdxs = []int32{
	10, // 0: good.gateway.good1.coin.v1.GoodCoin.GoodType:type_name -> basetypes.good.v1.GoodType
	0,  // 1: good.gateway.good1.coin.v1.AdminCreateGoodCoinResponse.Info:type_name -> good.gateway.good1.coin.v1.GoodCoin
	0,  // 2: good.gateway.good1.coin.v1.AdminUpdateGoodCoinResponse.Info:type_name -> good.gateway.good1.coin.v1.GoodCoin
	0,  // 3: good.gateway.good1.coin.v1.GetGoodCoinsResponse.Infos:type_name -> good.gateway.good1.coin.v1.GoodCoin
	0,  // 4: good.gateway.good1.coin.v1.AdminDeleteGoodCoinResponse.Info:type_name -> good.gateway.good1.coin.v1.GoodCoin
	2,  // 5: good.gateway.good1.coin.v1.Gateway.AdminCreateGoodCoin:input_type -> good.gateway.good1.coin.v1.AdminCreateGoodCoinRequest
	4,  // 6: good.gateway.good1.coin.v1.Gateway.AdminUpdateGoodCoin:input_type -> good.gateway.good1.coin.v1.AdminUpdateGoodCoinRequest
	6,  // 7: good.gateway.good1.coin.v1.Gateway.GetGoodCoins:input_type -> good.gateway.good1.coin.v1.GetGoodCoinsRequest
	8,  // 8: good.gateway.good1.coin.v1.Gateway.AdminDeleteGoodCoin:input_type -> good.gateway.good1.coin.v1.AdminDeleteGoodCoinRequest
	3,  // 9: good.gateway.good1.coin.v1.Gateway.AdminCreateGoodCoin:output_type -> good.gateway.good1.coin.v1.AdminCreateGoodCoinResponse
	5,  // 10: good.gateway.good1.coin.v1.Gateway.AdminUpdateGoodCoin:output_type -> good.gateway.good1.coin.v1.AdminUpdateGoodCoinResponse
	7,  // 11: good.gateway.good1.coin.v1.Gateway.GetGoodCoins:output_type -> good.gateway.good1.coin.v1.GetGoodCoinsResponse
	9,  // 12: good.gateway.good1.coin.v1.Gateway.AdminDeleteGoodCoin:output_type -> good.gateway.good1.coin.v1.AdminDeleteGoodCoinResponse
	9,  // [9:13] is the sub-list for method output_type
	5,  // [5:9] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_npool_good_gw_v1_good_coin_coin_proto_init() }
func file_npool_good_gw_v1_good_coin_coin_proto_init() {
	if File_npool_good_gw_v1_good_coin_coin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_good_gw_v1_good_coin_coin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodCoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_good_coin_coin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodCoinInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_good_coin_coin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminCreateGoodCoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_good_coin_coin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminCreateGoodCoinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_good_coin_coin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminUpdateGoodCoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_good_coin_coin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminUpdateGoodCoinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_good_coin_coin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodCoinsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_good_coin_coin_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodCoinsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_good_coin_coin_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminDeleteGoodCoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_good_coin_coin_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminDeleteGoodCoinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_good_gw_v1_good_coin_coin_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_npool_good_gw_v1_good_coin_coin_proto_msgTypes[4].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_good_gw_v1_good_coin_coin_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_good_gw_v1_good_coin_coin_proto_goTypes,
		DependencyIndexes: file_npool_good_gw_v1_good_coin_coin_proto_depIdxs,
		MessageInfos:      file_npool_good_gw_v1_good_coin_coin_proto_msgTypes,
	}.Build()
	File_npool_good_gw_v1_good_coin_coin_proto = out.File
	file_npool_good_gw_v1_good_coin_coin_proto_rawDesc = nil
	file_npool_good_gw_v1_good_coin_coin_proto_goTypes = nil
	file_npool_good_gw_v1_good_coin_coin_proto_depIdxs = nil
}
