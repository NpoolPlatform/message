// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.18.1
// source: npool/good/gw/v1/good/stock/stock.proto

package stock

import (
	v1 "github.com/NpoolPlatform/message/npool/basetypes/good/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MiningGoodStockReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolRootUserID string `protobuf:"bytes,10,opt,name=PoolRootUserID,proto3" json:"PoolRootUserID,omitempty"`
	Total          string `protobuf:"bytes,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *MiningGoodStockReq) Reset() {
	*x = MiningGoodStockReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_good_stock_stock_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiningGoodStockReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiningGoodStockReq) ProtoMessage() {}

func (x *MiningGoodStockReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_good_stock_stock_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiningGoodStockReq.ProtoReflect.Descriptor instead.
func (*MiningGoodStockReq) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_good_stock_stock_proto_rawDescGZIP(), []int{0}
}

func (x *MiningGoodStockReq) GetPoolRootUserID() string {
	if x != nil {
		return x.PoolRootUserID
	}
	return ""
}

func (x *MiningGoodStockReq) GetTotal() string {
	if x != nil {
		return x.Total
	}
	return ""
}

type MiningGoodStock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                     uint32                  `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID                  string                  `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty"`
	GoodStockID            string                  `protobuf:"bytes,30,opt,name=GoodStockID,proto3" json:"GoodStockID,omitempty"`
	MiningpoolID           string                  `protobuf:"bytes,40,opt,name=MiningpoolID,proto3" json:"MiningpoolID,omitempty"`
	PoolGoodUserID         string                  `protobuf:"bytes,50,opt,name=PoolGoodUserID,proto3" json:"PoolGoodUserID,omitempty"`
	Total                  string                  `protobuf:"bytes,60,opt,name=Total,proto3" json:"Total,omitempty"`
	SpotQuantity           string                  `protobuf:"bytes,70,opt,name=SpotQuantity,proto3" json:"SpotQuantity,omitempty"`
	Locked                 string                  `protobuf:"bytes,80,opt,name=Locked,proto3" json:"Locked,omitempty"`
	WaitStart              string                  `protobuf:"bytes,90,opt,name=WaitStart,proto3" json:"WaitStart,omitempty"`
	InService              string                  `protobuf:"bytes,100,opt,name=InService,proto3" json:"InService,omitempty"`
	Sold                   string                  `protobuf:"bytes,110,opt,name=Sold,proto3" json:"Sold,omitempty"`
	State                  v1.MiningGoodStockState `protobuf:"varint,120,opt,name=State,proto3,enum=basetypes.good.v1.MiningGoodStockState" json:"State,omitempty"`
	MiningpoolName         string                  `protobuf:"bytes,140,opt,name=MiningpoolName,proto3" json:"MiningpoolName,omitempty"`
	MiningpoolSite         string                  `protobuf:"bytes,150,opt,name=MiningpoolSite,proto3" json:"MiningpoolSite,omitempty"`
	MiningpoolLogo         string                  `protobuf:"bytes,160,opt,name=MiningpoolLogo,proto3" json:"MiningpoolLogo,omitempty"`
	MiningpoolDescription  string                  `protobuf:"bytes,170,opt,name=MiningpoolDescription,proto3" json:"MiningpoolDescription,omitempty"`
	MiningpoolReadPageLink string                  `protobuf:"bytes,180,opt,name=MiningpoolReadPageLink,proto3" json:"MiningpoolReadPageLink,omitempty"`
}

func (x *MiningGoodStock) Reset() {
	*x = MiningGoodStock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_good_stock_stock_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiningGoodStock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiningGoodStock) ProtoMessage() {}

func (x *MiningGoodStock) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_good_stock_stock_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiningGoodStock.ProtoReflect.Descriptor instead.
func (*MiningGoodStock) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_good_stock_stock_proto_rawDescGZIP(), []int{1}
}

func (x *MiningGoodStock) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *MiningGoodStock) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *MiningGoodStock) GetGoodStockID() string {
	if x != nil {
		return x.GoodStockID
	}
	return ""
}

func (x *MiningGoodStock) GetMiningpoolID() string {
	if x != nil {
		return x.MiningpoolID
	}
	return ""
}

func (x *MiningGoodStock) GetPoolGoodUserID() string {
	if x != nil {
		return x.PoolGoodUserID
	}
	return ""
}

func (x *MiningGoodStock) GetTotal() string {
	if x != nil {
		return x.Total
	}
	return ""
}

func (x *MiningGoodStock) GetSpotQuantity() string {
	if x != nil {
		return x.SpotQuantity
	}
	return ""
}

func (x *MiningGoodStock) GetLocked() string {
	if x != nil {
		return x.Locked
	}
	return ""
}

func (x *MiningGoodStock) GetWaitStart() string {
	if x != nil {
		return x.WaitStart
	}
	return ""
}

func (x *MiningGoodStock) GetInService() string {
	if x != nil {
		return x.InService
	}
	return ""
}

func (x *MiningGoodStock) GetSold() string {
	if x != nil {
		return x.Sold
	}
	return ""
}

func (x *MiningGoodStock) GetState() v1.MiningGoodStockState {
	if x != nil {
		return x.State
	}
	return v1.MiningGoodStockState(0)
}

func (x *MiningGoodStock) GetMiningpoolName() string {
	if x != nil {
		return x.MiningpoolName
	}
	return ""
}

func (x *MiningGoodStock) GetMiningpoolSite() string {
	if x != nil {
		return x.MiningpoolSite
	}
	return ""
}

func (x *MiningGoodStock) GetMiningpoolLogo() string {
	if x != nil {
		return x.MiningpoolLogo
	}
	return ""
}

func (x *MiningGoodStock) GetMiningpoolDescription() string {
	if x != nil {
		return x.MiningpoolDescription
	}
	return ""
}

func (x *MiningGoodStock) GetMiningpoolReadPageLink() string {
	if x != nil {
		return x.MiningpoolReadPageLink
	}
	return ""
}

type MiningGoodStockInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntID                  string                  `protobuf:"bytes,10,opt,name=EntID,proto3" json:"EntID,omitempty"`
	GoodStockID            string                  `protobuf:"bytes,20,opt,name=GoodStockID,proto3" json:"GoodStockID,omitempty"`
	MiningpoolID           string                  `protobuf:"bytes,30,opt,name=MiningpoolID,proto3" json:"MiningpoolID,omitempty"`
	PoolGoodUserID         string                  `protobuf:"bytes,40,opt,name=PoolGoodUserID,proto3" json:"PoolGoodUserID,omitempty"`
	Total                  string                  `protobuf:"bytes,50,opt,name=Total,proto3" json:"Total,omitempty"`
	SpotQuantity           string                  `protobuf:"bytes,60,opt,name=SpotQuantity,proto3" json:"SpotQuantity,omitempty"`
	State                  v1.MiningGoodStockState `protobuf:"varint,70,opt,name=State,proto3,enum=basetypes.good.v1.MiningGoodStockState" json:"State,omitempty"`
	MiningpoolName         string                  `protobuf:"bytes,90,opt,name=MiningpoolName,proto3" json:"MiningpoolName,omitempty"`
	MiningpoolSite         string                  `protobuf:"bytes,100,opt,name=MiningpoolSite,proto3" json:"MiningpoolSite,omitempty"`
	MiningpoolLogo         string                  `protobuf:"bytes,110,opt,name=MiningpoolLogo,proto3" json:"MiningpoolLogo,omitempty"`
	MiningpoolDescription  string                  `protobuf:"bytes,120,opt,name=MiningpoolDescription,proto3" json:"MiningpoolDescription,omitempty"`
	MiningpoolReadPageLink string                  `protobuf:"bytes,130,opt,name=MiningpoolReadPageLink,proto3" json:"MiningpoolReadPageLink,omitempty"`
}

func (x *MiningGoodStockInfo) Reset() {
	*x = MiningGoodStockInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_good_stock_stock_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiningGoodStockInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiningGoodStockInfo) ProtoMessage() {}

func (x *MiningGoodStockInfo) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_good_stock_stock_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiningGoodStockInfo.ProtoReflect.Descriptor instead.
func (*MiningGoodStockInfo) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_good_stock_stock_proto_rawDescGZIP(), []int{2}
}

func (x *MiningGoodStockInfo) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *MiningGoodStockInfo) GetGoodStockID() string {
	if x != nil {
		return x.GoodStockID
	}
	return ""
}

func (x *MiningGoodStockInfo) GetMiningpoolID() string {
	if x != nil {
		return x.MiningpoolID
	}
	return ""
}

func (x *MiningGoodStockInfo) GetPoolGoodUserID() string {
	if x != nil {
		return x.PoolGoodUserID
	}
	return ""
}

func (x *MiningGoodStockInfo) GetTotal() string {
	if x != nil {
		return x.Total
	}
	return ""
}

func (x *MiningGoodStockInfo) GetSpotQuantity() string {
	if x != nil {
		return x.SpotQuantity
	}
	return ""
}

func (x *MiningGoodStockInfo) GetState() v1.MiningGoodStockState {
	if x != nil {
		return x.State
	}
	return v1.MiningGoodStockState(0)
}

func (x *MiningGoodStockInfo) GetMiningpoolName() string {
	if x != nil {
		return x.MiningpoolName
	}
	return ""
}

func (x *MiningGoodStockInfo) GetMiningpoolSite() string {
	if x != nil {
		return x.MiningpoolSite
	}
	return ""
}

func (x *MiningGoodStockInfo) GetMiningpoolLogo() string {
	if x != nil {
		return x.MiningpoolLogo
	}
	return ""
}

func (x *MiningGoodStockInfo) GetMiningpoolDescription() string {
	if x != nil {
		return x.MiningpoolDescription
	}
	return ""
}

func (x *MiningGoodStockInfo) GetMiningpoolReadPageLink() string {
	if x != nil {
		return x.MiningpoolReadPageLink
	}
	return ""
}

var File_npool_good_gw_v1_good_stock_stock_proto protoreflect.FileDescriptor

var file_npool_good_gw_v1_good_stock_stock_proto_rawDesc = []byte{
	0x0a, 0x27, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x67, 0x77, 0x2f,
	0x76, 0x31, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2f, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x1a, 0x23, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x76, 0x31, 0x2f,
	0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x52, 0x0a, 0x12, 0x4d,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x6f, 0x6f, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x6f, 0x6f, 0x6c, 0x52,
	0x6f, 0x6f, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22,
	0xf1, 0x04, 0x0a, 0x0f, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x47, 0x6f, 0x6f,
	0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x4d,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x12,
	0x26, 0x0a, 0x0e, 0x50, 0x6f, 0x6f, 0x6c, 0x47, 0x6f, 0x6f, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x6f, 0x6f, 0x6c, 0x47, 0x6f, 0x6f,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x22, 0x0a,
	0x0c, 0x53, 0x70, 0x6f, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x46, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x70, 0x6f, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x50, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x57, 0x61, 0x69,
	0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x57, 0x61,
	0x69, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6f, 0x6c, 0x64, 0x18, 0x6e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x6f, 0x6c, 0x64, 0x12, 0x3d, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x4d, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x27, 0x0a, 0x0e, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x53,
	0x69, 0x74, 0x65, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4d, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x4d, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0xa0, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x4c,
	0x6f, 0x67, 0x6f, 0x12, 0x35, 0x0a, 0x15, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f,
	0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xaa, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x16, 0x4d, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x50, 0x61, 0x67, 0x65,
	0x4c, 0x69, 0x6e, 0x6b, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x4d, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x50, 0x61, 0x67, 0x65, 0x4c,
	0x69, 0x6e, 0x6b, 0x22, 0xf9, 0x03, 0x0a, 0x13, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x47, 0x6f,
	0x6f, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x45,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x20, 0x0a, 0x0b, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x49, 0x44,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f,
	0x6c, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4d, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x6f, 0x6f, 0x6c, 0x47,
	0x6f, 0x6f, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x50, 0x6f, 0x6f, 0x6c, 0x47, 0x6f, 0x6f, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x70, 0x6f, 0x74, 0x51, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x70, 0x6f,
	0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x53, 0x69,
	0x74, 0x65, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x70, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x4c, 0x6f, 0x67, 0x6f,
	0x12, 0x34, 0x0a, 0x15, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x16, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x70, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b,
	0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70,
	0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x42,
	0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70,
	0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x67,
	0x77, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_good_gw_v1_good_stock_stock_proto_rawDescOnce sync.Once
	file_npool_good_gw_v1_good_stock_stock_proto_rawDescData = file_npool_good_gw_v1_good_stock_stock_proto_rawDesc
)

func file_npool_good_gw_v1_good_stock_stock_proto_rawDescGZIP() []byte {
	file_npool_good_gw_v1_good_stock_stock_proto_rawDescOnce.Do(func() {
		file_npool_good_gw_v1_good_stock_stock_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_good_gw_v1_good_stock_stock_proto_rawDescData)
	})
	return file_npool_good_gw_v1_good_stock_stock_proto_rawDescData
}

var file_npool_good_gw_v1_good_stock_stock_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_npool_good_gw_v1_good_stock_stock_proto_goTypes = []interface{}{
	(*MiningGoodStockReq)(nil),   // 0: good.gateway.good1.stock.v1.MiningGoodStockReq
	(*MiningGoodStock)(nil),      // 1: good.gateway.good1.stock.v1.MiningGoodStock
	(*MiningGoodStockInfo)(nil),  // 2: good.gateway.good1.stock.v1.MiningGoodStockInfo
	(v1.MiningGoodStockState)(0), // 3: basetypes.good.v1.MiningGoodStockState
}
var file_npool_good_gw_v1_good_stock_stock_proto_depIdxs = []int32{
	3, // 0: good.gateway.good1.stock.v1.MiningGoodStock.State:type_name -> basetypes.good.v1.MiningGoodStockState
	3, // 1: good.gateway.good1.stock.v1.MiningGoodStockInfo.State:type_name -> basetypes.good.v1.MiningGoodStockState
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_npool_good_gw_v1_good_stock_stock_proto_init() }
func file_npool_good_gw_v1_good_stock_stock_proto_init() {
	if File_npool_good_gw_v1_good_stock_stock_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_good_gw_v1_good_stock_stock_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiningGoodStockReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_good_stock_stock_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiningGoodStock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_good_stock_stock_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiningGoodStockInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_good_gw_v1_good_stock_stock_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_npool_good_gw_v1_good_stock_stock_proto_goTypes,
		DependencyIndexes: file_npool_good_gw_v1_good_stock_stock_proto_depIdxs,
		MessageInfos:      file_npool_good_gw_v1_good_stock_stock_proto_msgTypes,
	}.Build()
	File_npool_good_gw_v1_good_stock_stock_proto = out.File
	file_npool_good_gw_v1_good_stock_stock_proto_rawDesc = nil
	file_npool_good_gw_v1_good_stock_stock_proto_goTypes = nil
	file_npool_good_gw_v1_good_stock_stock_proto_depIdxs = nil
}
