// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/good/gw/v1/delegatedstaking/delegatedstaking.proto

package delegatedstaking

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gateway_AdminCreateDelegatedStaking_FullMethodName = "/good.gateway.delegatedstaking.v1.Gateway/AdminCreateDelegatedStaking"
	Gateway_AdminUpdateDelegatedStaking_FullMethodName = "/good.gateway.delegatedstaking.v1.Gateway/AdminUpdateDelegatedStaking"
	Gateway_GetDelegatedStaking_FullMethodName         = "/good.gateway.delegatedstaking.v1.Gateway/GetDelegatedStaking"
	Gateway_GetDelegatedStakings_FullMethodName        = "/good.gateway.delegatedstaking.v1.Gateway/GetDelegatedStakings"
	Gateway_AdminDeleteDelegatedStaking_FullMethodName = "/good.gateway.delegatedstaking.v1.Gateway/AdminDeleteDelegatedStaking"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	AdminCreateDelegatedStaking(ctx context.Context, in *AdminCreateDelegatedStakingRequest, opts ...grpc.CallOption) (*AdminCreateDelegatedStakingResponse, error)
	AdminUpdateDelegatedStaking(ctx context.Context, in *AdminUpdateDelegatedStakingRequest, opts ...grpc.CallOption) (*AdminUpdateDelegatedStakingResponse, error)
	GetDelegatedStaking(ctx context.Context, in *GetDelegatedStakingRequest, opts ...grpc.CallOption) (*GetDelegatedStakingResponse, error)
	GetDelegatedStakings(ctx context.Context, in *GetDelegatedStakingsRequest, opts ...grpc.CallOption) (*GetDelegatedStakingsResponse, error)
	AdminDeleteDelegatedStaking(ctx context.Context, in *AdminDeleteDelegatedStakingRequest, opts ...grpc.CallOption) (*AdminDeleteDelegatedStakingResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) AdminCreateDelegatedStaking(ctx context.Context, in *AdminCreateDelegatedStakingRequest, opts ...grpc.CallOption) (*AdminCreateDelegatedStakingResponse, error) {
	out := new(AdminCreateDelegatedStakingResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminCreateDelegatedStaking_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminUpdateDelegatedStaking(ctx context.Context, in *AdminUpdateDelegatedStakingRequest, opts ...grpc.CallOption) (*AdminUpdateDelegatedStakingResponse, error) {
	out := new(AdminUpdateDelegatedStakingResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminUpdateDelegatedStaking_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetDelegatedStaking(ctx context.Context, in *GetDelegatedStakingRequest, opts ...grpc.CallOption) (*GetDelegatedStakingResponse, error) {
	out := new(GetDelegatedStakingResponse)
	err := c.cc.Invoke(ctx, Gateway_GetDelegatedStaking_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetDelegatedStakings(ctx context.Context, in *GetDelegatedStakingsRequest, opts ...grpc.CallOption) (*GetDelegatedStakingsResponse, error) {
	out := new(GetDelegatedStakingsResponse)
	err := c.cc.Invoke(ctx, Gateway_GetDelegatedStakings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminDeleteDelegatedStaking(ctx context.Context, in *AdminDeleteDelegatedStakingRequest, opts ...grpc.CallOption) (*AdminDeleteDelegatedStakingResponse, error) {
	out := new(AdminDeleteDelegatedStakingResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminDeleteDelegatedStaking_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	AdminCreateDelegatedStaking(context.Context, *AdminCreateDelegatedStakingRequest) (*AdminCreateDelegatedStakingResponse, error)
	AdminUpdateDelegatedStaking(context.Context, *AdminUpdateDelegatedStakingRequest) (*AdminUpdateDelegatedStakingResponse, error)
	GetDelegatedStaking(context.Context, *GetDelegatedStakingRequest) (*GetDelegatedStakingResponse, error)
	GetDelegatedStakings(context.Context, *GetDelegatedStakingsRequest) (*GetDelegatedStakingsResponse, error)
	AdminDeleteDelegatedStaking(context.Context, *AdminDeleteDelegatedStakingRequest) (*AdminDeleteDelegatedStakingResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) AdminCreateDelegatedStaking(context.Context, *AdminCreateDelegatedStakingRequest) (*AdminCreateDelegatedStakingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCreateDelegatedStaking not implemented")
}
func (UnimplementedGatewayServer) AdminUpdateDelegatedStaking(context.Context, *AdminUpdateDelegatedStakingRequest) (*AdminUpdateDelegatedStakingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateDelegatedStaking not implemented")
}
func (UnimplementedGatewayServer) GetDelegatedStaking(context.Context, *GetDelegatedStakingRequest) (*GetDelegatedStakingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegatedStaking not implemented")
}
func (UnimplementedGatewayServer) GetDelegatedStakings(context.Context, *GetDelegatedStakingsRequest) (*GetDelegatedStakingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegatedStakings not implemented")
}
func (UnimplementedGatewayServer) AdminDeleteDelegatedStaking(context.Context, *AdminDeleteDelegatedStakingRequest) (*AdminDeleteDelegatedStakingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDeleteDelegatedStaking not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_AdminCreateDelegatedStaking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCreateDelegatedStakingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminCreateDelegatedStaking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminCreateDelegatedStaking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminCreateDelegatedStaking(ctx, req.(*AdminCreateDelegatedStakingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminUpdateDelegatedStaking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateDelegatedStakingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminUpdateDelegatedStaking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminUpdateDelegatedStaking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminUpdateDelegatedStaking(ctx, req.(*AdminUpdateDelegatedStakingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetDelegatedStaking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDelegatedStakingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetDelegatedStaking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetDelegatedStaking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetDelegatedStaking(ctx, req.(*GetDelegatedStakingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetDelegatedStakings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDelegatedStakingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetDelegatedStakings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetDelegatedStakings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetDelegatedStakings(ctx, req.(*GetDelegatedStakingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminDeleteDelegatedStaking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDeleteDelegatedStakingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminDeleteDelegatedStaking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminDeleteDelegatedStaking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminDeleteDelegatedStaking(ctx, req.(*AdminDeleteDelegatedStakingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "good.gateway.delegatedstaking.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AdminCreateDelegatedStaking",
			Handler:    _Gateway_AdminCreateDelegatedStaking_Handler,
		},
		{
			MethodName: "AdminUpdateDelegatedStaking",
			Handler:    _Gateway_AdminUpdateDelegatedStaking_Handler,
		},
		{
			MethodName: "GetDelegatedStaking",
			Handler:    _Gateway_GetDelegatedStaking_Handler,
		},
		{
			MethodName: "GetDelegatedStakings",
			Handler:    _Gateway_GetDelegatedStakings_Handler,
		},
		{
			MethodName: "AdminDeleteDelegatedStaking",
			Handler:    _Gateway_AdminDeleteDelegatedStaking_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/good/gw/v1/delegatedstaking/delegatedstaking.proto",
}
