// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.18.1
// source: npool/good/gw/v1/appgood/appgood.proto

package appgood

import (
	_ "github.com/NpoolPlatform/message/npool"
	appgood "github.com/NpoolPlatform/message/npool/good/mgr/v1/appgood"
	good "github.com/NpoolPlatform/message/npool/good/mgr/v1/good"
	commission "github.com/NpoolPlatform/message/npool/inspire/mgr/v1/commission"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Good struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                      string           `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID                   string           `protobuf:"bytes,20,opt,name=AppID,proto3" json:"AppID,omitempty"`
	GoodID                  string           `protobuf:"bytes,30,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
	Online                  bool             `protobuf:"varint,40,opt,name=Online,proto3" json:"Online,omitempty"`
	Visible                 bool             `protobuf:"varint,50,opt,name=Visible,proto3" json:"Visible,omitempty"`
	Price                   string           `protobuf:"bytes,60,opt,name=Price,proto3" json:"Price,omitempty"`
	DisplayIndex            int32            `protobuf:"varint,70,opt,name=DisplayIndex,proto3" json:"DisplayIndex,omitempty"`
	PurchaseLimit           int32            `protobuf:"varint,80,opt,name=PurchaseLimit,proto3" json:"PurchaseLimit,omitempty"`
	CommissionPercent       int32            `protobuf:"varint,90,opt,name=CommissionPercent,proto3" json:"CommissionPercent,omitempty"`
	PromotionStartAt        *uint32          `protobuf:"varint,100,opt,name=PromotionStartAt,proto3,oneof" json:"PromotionStartAt,omitempty"`
	PromotionEndAt          *uint32          `protobuf:"varint,110,opt,name=PromotionEndAt,proto3,oneof" json:"PromotionEndAt,omitempty"`
	PromotionMessage        *string          `protobuf:"bytes,120,opt,name=PromotionMessage,proto3,oneof" json:"PromotionMessage,omitempty"`
	PromotionPrice          *string          `protobuf:"bytes,130,opt,name=PromotionPrice,proto3,oneof" json:"PromotionPrice,omitempty"`
	PromotionPosters        []string         `protobuf:"bytes,140,rep,name=PromotionPosters,proto3" json:"PromotionPosters,omitempty"`
	RecommenderID           *string          `protobuf:"bytes,150,opt,name=RecommenderID,proto3,oneof" json:"RecommenderID,omitempty"`
	RecommenderEmailAddress *string          `protobuf:"bytes,160,opt,name=RecommenderEmailAddress,proto3,oneof" json:"RecommenderEmailAddress,omitempty"`
	RecommenderPhoneNO      *string          `protobuf:"bytes,170,opt,name=RecommenderPhoneNO,proto3,oneof" json:"RecommenderPhoneNO,omitempty"`
	RecommenderUsername     *string          `protobuf:"bytes,180,opt,name=RecommenderUsername,proto3,oneof" json:"RecommenderUsername,omitempty"`
	RecommenderFirstName    *string          `protobuf:"bytes,190,opt,name=RecommenderFirstName,proto3,oneof" json:"RecommenderFirstName,omitempty"`
	RecommenderLastName     *string          `protobuf:"bytes,200,opt,name=RecommenderLastName,proto3,oneof" json:"RecommenderLastName,omitempty"`
	RecommendMessage        *string          `protobuf:"bytes,210,opt,name=RecommendMessage,proto3,oneof" json:"RecommendMessage,omitempty"`
	RecommendIndex          *float32         `protobuf:"fixed32,220,opt,name=RecommendIndex,proto3,oneof" json:"RecommendIndex,omitempty"`
	RecommendAt             *uint32          `protobuf:"varint,230,opt,name=RecommendAt,proto3,oneof" json:"RecommendAt,omitempty"`
	DeviceType              string           `protobuf:"bytes,240,opt,name=DeviceType,proto3" json:"DeviceType,omitempty"`
	DeviceManufacturer      string           `protobuf:"bytes,250,opt,name=DeviceManufacturer,proto3" json:"DeviceManufacturer,omitempty"`
	DevicePowerComsuption   uint32           `protobuf:"varint,260,opt,name=DevicePowerComsuption,proto3" json:"DevicePowerComsuption,omitempty"`
	DeviceShipmentAt        uint32           `protobuf:"varint,270,opt,name=DeviceShipmentAt,proto3" json:"DeviceShipmentAt,omitempty"`
	DevicePosters           []string         `protobuf:"bytes,280,rep,name=DevicePosters,proto3" json:"DevicePosters,omitempty"`
	DurationDays            int32            `protobuf:"varint,290,opt,name=DurationDays,proto3" json:"DurationDays,omitempty"`
	VendorLocationCountry   string           `protobuf:"bytes,300,opt,name=VendorLocationCountry,proto3" json:"VendorLocationCountry,omitempty"`
	CoinTypeID              string           `protobuf:"bytes,310,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty"`
	CoinLogo                string           `protobuf:"bytes,320,opt,name=CoinLogo,proto3" json:"CoinLogo,omitempty"`
	CoinName                string           `protobuf:"bytes,330,opt,name=CoinName,proto3" json:"CoinName,omitempty"`
	CoinUnit                string           `protobuf:"bytes,340,opt,name=CoinUnit,proto3" json:"CoinUnit,omitempty"`
	CoinPreSale             bool             `protobuf:"varint,350,opt,name=CoinPreSale,proto3" json:"CoinPreSale,omitempty"`
	CoinEnv                 string           `protobuf:"bytes,351,opt,name=CoinEnv,proto3" json:"CoinEnv,omitempty"`
	CoinHomePage            string           `protobuf:"bytes,352,opt,name=CoinHomePage,proto3" json:"CoinHomePage,omitempty"`
	CoinSpecs               string           `protobuf:"bytes,353,opt,name=CoinSpecs,proto3" json:"CoinSpecs,omitempty"`
	GoodType                good.GoodType    `protobuf:"varint,360,opt,name=GoodType,proto3,enum=good.manager.good.v1.GoodType" json:"GoodType,omitempty"`
	BenefitType             good.BenefitType `protobuf:"varint,370,opt,name=BenefitType,proto3,enum=good.manager.good.v1.BenefitType" json:"BenefitType,omitempty"`
	GoodName                string           `protobuf:"bytes,380,opt,name=GoodName,proto3" json:"GoodName,omitempty"`
	Unit                    string           `protobuf:"bytes,390,opt,name=Unit,proto3" json:"Unit,omitempty"`
	UnitAmount              int32            `protobuf:"varint,400,opt,name=UnitAmount,proto3" json:"UnitAmount,omitempty"`
	BenefitIntervalHours    uint32           `protobuf:"varint,401,opt,name=BenefitIntervalHours,proto3" json:"BenefitIntervalHours,omitempty"`
	TestOnly                bool             `protobuf:"varint,410,opt,name=TestOnly,proto3" json:"TestOnly,omitempty"`
	Posters                 []string         `protobuf:"bytes,420,rep,name=Posters,proto3" json:"Posters,omitempty"`
	Labels                  []string         `protobuf:"bytes,430,rep,name=Labels,proto3" json:"Labels,omitempty"`
	VoteCount               uint32           `protobuf:"varint,440,opt,name=VoteCount,proto3" json:"VoteCount,omitempty"`
	Rating                  float32          `protobuf:"fixed32,450,opt,name=Rating,proto3" json:"Rating,omitempty"`
	SupportCoins            []*Good_CoinInfo `protobuf:"bytes,460,rep,name=SupportCoins,proto3" json:"SupportCoins,omitempty"`
	Total                   string           `protobuf:"bytes,470,opt,name=Total,proto3" json:"Total,omitempty"`
	Locked                  string           `protobuf:"bytes,480,opt,name=Locked,proto3" json:"Locked,omitempty"`
	InService               string           `protobuf:"bytes,490,opt,name=InService,proto3" json:"InService,omitempty"`
	WaitStart               string           `protobuf:"bytes,491,opt,name=WaitStart,proto3" json:"WaitStart,omitempty"`
	Sold                    string           `protobuf:"bytes,510,opt,name=Sold,proto3" json:"Sold,omitempty"`
	SubGoods                []*Good          `protobuf:"bytes,520,rep,name=SubGoods,proto3" json:"SubGoods,omitempty"`
	// For subgood: main good must select sub good in one order
	Must bool `protobuf:"varint,530,opt,name=Must,proto3" json:"Must,omitempty"`
	// For subgood: sub good will be charged commission, value defined in sub good's good
	Commission             bool                  `protobuf:"varint,540,opt,name=Commission,proto3" json:"Commission,omitempty"`
	StartAt                uint32                `protobuf:"varint,550,opt,name=StartAt,proto3" json:"StartAt,omitempty"`
	CreatedAt              uint32                `protobuf:"varint,560,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	SaleStartAt            uint32                `protobuf:"varint,570,opt,name=SaleStartAt,proto3" json:"SaleStartAt,omitempty"`
	SaleEndAt              uint32                `protobuf:"varint,580,opt,name=SaleEndAt,proto3" json:"SaleEndAt,omitempty"`
	ServiceStartAt         uint32                `protobuf:"varint,590,opt,name=ServiceStartAt,proto3" json:"ServiceStartAt,omitempty"`
	TechnicalFeeRatio      uint32                `protobuf:"varint,600,opt,name=TechnicalFeeRatio,proto3" json:"TechnicalFeeRatio,omitempty"`
	ElectricityFeeRatio    uint32                `protobuf:"varint,610,opt,name=ElectricityFeeRatio,proto3" json:"ElectricityFeeRatio,omitempty"`
	DailyRewardAmount      string                `protobuf:"bytes,620,opt,name=DailyRewardAmount,proto3" json:"DailyRewardAmount,omitempty"`
	CommissionSettleType   commission.SettleType `protobuf:"varint,630,opt,name=CommissionSettleType,proto3,enum=inspire.manager.commission.v1.SettleType" json:"CommissionSettleType,omitempty"`
	Descriptions           []string              `protobuf:"bytes,640,rep,name=Descriptions,proto3" json:"Descriptions,omitempty"`
	GoodBanner             string                `protobuf:"bytes,650,opt,name=GoodBanner,proto3" json:"GoodBanner,omitempty"`
	DisplayNames           []string              `protobuf:"bytes,660,rep,name=DisplayNames,proto3" json:"DisplayNames,omitempty"`
	EnablePurchase         bool                  `protobuf:"varint,670,opt,name=EnablePurchase,proto3" json:"EnablePurchase,omitempty"`
	EnableProductPage      bool                  `protobuf:"varint,680,opt,name=EnableProductPage,proto3" json:"EnableProductPage,omitempty"`
	CancelMode             appgood.CancelMode    `protobuf:"varint,690,opt,name=CancelMode,proto3,enum=good.manager.appgood.v1.CancelMode" json:"CancelMode,omitempty"`
	UserPurchaseLimit      string                `protobuf:"bytes,700,opt,name=UserPurchaseLimit,proto3" json:"UserPurchaseLimit,omitempty"`
	DisplayColors          []string              `protobuf:"bytes,710,rep,name=DisplayColors,proto3" json:"DisplayColors,omitempty"`
	CancellableBeforeStart uint32                `protobuf:"varint,720,opt,name=CancellableBeforeStart,proto3" json:"CancellableBeforeStart,omitempty"`
	ProductPage            string                `protobuf:"bytes,730,opt,name=ProductPage,proto3" json:"ProductPage,omitempty"`
	EnableSetCommission    bool                  `protobuf:"varint,740,opt,name=EnableSetCommission,proto3" json:"EnableSetCommission,omitempty"`
}

func (x *Good) Reset() {
	*x = Good{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_appgood_appgood_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Good) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Good) ProtoMessage() {}

func (x *Good) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_appgood_appgood_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Good.ProtoReflect.Descriptor instead.
func (*Good) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_appgood_appgood_proto_rawDescGZIP(), []int{0}
}

func (x *Good) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Good) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *Good) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *Good) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

func (x *Good) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

func (x *Good) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *Good) GetDisplayIndex() int32 {
	if x != nil {
		return x.DisplayIndex
	}
	return 0
}

func (x *Good) GetPurchaseLimit() int32 {
	if x != nil {
		return x.PurchaseLimit
	}
	return 0
}

func (x *Good) GetCommissionPercent() int32 {
	if x != nil {
		return x.CommissionPercent
	}
	return 0
}

func (x *Good) GetPromotionStartAt() uint32 {
	if x != nil && x.PromotionStartAt != nil {
		return *x.PromotionStartAt
	}
	return 0
}

func (x *Good) GetPromotionEndAt() uint32 {
	if x != nil && x.PromotionEndAt != nil {
		return *x.PromotionEndAt
	}
	return 0
}

func (x *Good) GetPromotionMessage() string {
	if x != nil && x.PromotionMessage != nil {
		return *x.PromotionMessage
	}
	return ""
}

func (x *Good) GetPromotionPrice() string {
	if x != nil && x.PromotionPrice != nil {
		return *x.PromotionPrice
	}
	return ""
}

func (x *Good) GetPromotionPosters() []string {
	if x != nil {
		return x.PromotionPosters
	}
	return nil
}

func (x *Good) GetRecommenderID() string {
	if x != nil && x.RecommenderID != nil {
		return *x.RecommenderID
	}
	return ""
}

func (x *Good) GetRecommenderEmailAddress() string {
	if x != nil && x.RecommenderEmailAddress != nil {
		return *x.RecommenderEmailAddress
	}
	return ""
}

func (x *Good) GetRecommenderPhoneNO() string {
	if x != nil && x.RecommenderPhoneNO != nil {
		return *x.RecommenderPhoneNO
	}
	return ""
}

func (x *Good) GetRecommenderUsername() string {
	if x != nil && x.RecommenderUsername != nil {
		return *x.RecommenderUsername
	}
	return ""
}

func (x *Good) GetRecommenderFirstName() string {
	if x != nil && x.RecommenderFirstName != nil {
		return *x.RecommenderFirstName
	}
	return ""
}

func (x *Good) GetRecommenderLastName() string {
	if x != nil && x.RecommenderLastName != nil {
		return *x.RecommenderLastName
	}
	return ""
}

func (x *Good) GetRecommendMessage() string {
	if x != nil && x.RecommendMessage != nil {
		return *x.RecommendMessage
	}
	return ""
}

func (x *Good) GetRecommendIndex() float32 {
	if x != nil && x.RecommendIndex != nil {
		return *x.RecommendIndex
	}
	return 0
}

func (x *Good) GetRecommendAt() uint32 {
	if x != nil && x.RecommendAt != nil {
		return *x.RecommendAt
	}
	return 0
}

func (x *Good) GetDeviceType() string {
	if x != nil {
		return x.DeviceType
	}
	return ""
}

func (x *Good) GetDeviceManufacturer() string {
	if x != nil {
		return x.DeviceManufacturer
	}
	return ""
}

func (x *Good) GetDevicePowerComsuption() uint32 {
	if x != nil {
		return x.DevicePowerComsuption
	}
	return 0
}

func (x *Good) GetDeviceShipmentAt() uint32 {
	if x != nil {
		return x.DeviceShipmentAt
	}
	return 0
}

func (x *Good) GetDevicePosters() []string {
	if x != nil {
		return x.DevicePosters
	}
	return nil
}

func (x *Good) GetDurationDays() int32 {
	if x != nil {
		return x.DurationDays
	}
	return 0
}

func (x *Good) GetVendorLocationCountry() string {
	if x != nil {
		return x.VendorLocationCountry
	}
	return ""
}

func (x *Good) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

func (x *Good) GetCoinLogo() string {
	if x != nil {
		return x.CoinLogo
	}
	return ""
}

func (x *Good) GetCoinName() string {
	if x != nil {
		return x.CoinName
	}
	return ""
}

func (x *Good) GetCoinUnit() string {
	if x != nil {
		return x.CoinUnit
	}
	return ""
}

func (x *Good) GetCoinPreSale() bool {
	if x != nil {
		return x.CoinPreSale
	}
	return false
}

func (x *Good) GetCoinEnv() string {
	if x != nil {
		return x.CoinEnv
	}
	return ""
}

func (x *Good) GetCoinHomePage() string {
	if x != nil {
		return x.CoinHomePage
	}
	return ""
}

func (x *Good) GetCoinSpecs() string {
	if x != nil {
		return x.CoinSpecs
	}
	return ""
}

func (x *Good) GetGoodType() good.GoodType {
	if x != nil {
		return x.GoodType
	}
	return good.GoodType(0)
}

func (x *Good) GetBenefitType() good.BenefitType {
	if x != nil {
		return x.BenefitType
	}
	return good.BenefitType(0)
}

func (x *Good) GetGoodName() string {
	if x != nil {
		return x.GoodName
	}
	return ""
}

func (x *Good) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *Good) GetUnitAmount() int32 {
	if x != nil {
		return x.UnitAmount
	}
	return 0
}

func (x *Good) GetBenefitIntervalHours() uint32 {
	if x != nil {
		return x.BenefitIntervalHours
	}
	return 0
}

func (x *Good) GetTestOnly() bool {
	if x != nil {
		return x.TestOnly
	}
	return false
}

func (x *Good) GetPosters() []string {
	if x != nil {
		return x.Posters
	}
	return nil
}

func (x *Good) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Good) GetVoteCount() uint32 {
	if x != nil {
		return x.VoteCount
	}
	return 0
}

func (x *Good) GetRating() float32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *Good) GetSupportCoins() []*Good_CoinInfo {
	if x != nil {
		return x.SupportCoins
	}
	return nil
}

func (x *Good) GetTotal() string {
	if x != nil {
		return x.Total
	}
	return ""
}

func (x *Good) GetLocked() string {
	if x != nil {
		return x.Locked
	}
	return ""
}

func (x *Good) GetInService() string {
	if x != nil {
		return x.InService
	}
	return ""
}

func (x *Good) GetWaitStart() string {
	if x != nil {
		return x.WaitStart
	}
	return ""
}

func (x *Good) GetSold() string {
	if x != nil {
		return x.Sold
	}
	return ""
}

func (x *Good) GetSubGoods() []*Good {
	if x != nil {
		return x.SubGoods
	}
	return nil
}

func (x *Good) GetMust() bool {
	if x != nil {
		return x.Must
	}
	return false
}

func (x *Good) GetCommission() bool {
	if x != nil {
		return x.Commission
	}
	return false
}

func (x *Good) GetStartAt() uint32 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *Good) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Good) GetSaleStartAt() uint32 {
	if x != nil {
		return x.SaleStartAt
	}
	return 0
}

func (x *Good) GetSaleEndAt() uint32 {
	if x != nil {
		return x.SaleEndAt
	}
	return 0
}

func (x *Good) GetServiceStartAt() uint32 {
	if x != nil {
		return x.ServiceStartAt
	}
	return 0
}

func (x *Good) GetTechnicalFeeRatio() uint32 {
	if x != nil {
		return x.TechnicalFeeRatio
	}
	return 0
}

func (x *Good) GetElectricityFeeRatio() uint32 {
	if x != nil {
		return x.ElectricityFeeRatio
	}
	return 0
}

func (x *Good) GetDailyRewardAmount() string {
	if x != nil {
		return x.DailyRewardAmount
	}
	return ""
}

func (x *Good) GetCommissionSettleType() commission.SettleType {
	if x != nil {
		return x.CommissionSettleType
	}
	return commission.SettleType(0)
}

func (x *Good) GetDescriptions() []string {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *Good) GetGoodBanner() string {
	if x != nil {
		return x.GoodBanner
	}
	return ""
}

func (x *Good) GetDisplayNames() []string {
	if x != nil {
		return x.DisplayNames
	}
	return nil
}

func (x *Good) GetEnablePurchase() bool {
	if x != nil {
		return x.EnablePurchase
	}
	return false
}

func (x *Good) GetEnableProductPage() bool {
	if x != nil {
		return x.EnableProductPage
	}
	return false
}

func (x *Good) GetCancelMode() appgood.CancelMode {
	if x != nil {
		return x.CancelMode
	}
	return appgood.CancelMode(0)
}

func (x *Good) GetUserPurchaseLimit() string {
	if x != nil {
		return x.UserPurchaseLimit
	}
	return ""
}

func (x *Good) GetDisplayColors() []string {
	if x != nil {
		return x.DisplayColors
	}
	return nil
}

func (x *Good) GetCancellableBeforeStart() uint32 {
	if x != nil {
		return x.CancellableBeforeStart
	}
	return 0
}

func (x *Good) GetProductPage() string {
	if x != nil {
		return x.ProductPage
	}
	return ""
}

func (x *Good) GetEnableSetCommission() bool {
	if x != nil {
		return x.EnableSetCommission
	}
	return false
}

type CreateNAppGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetAppID            string                `protobuf:"bytes,10,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
	GoodID                 string                `protobuf:"bytes,20,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
	Online                 bool                  `protobuf:"varint,30,opt,name=Online,proto3" json:"Online,omitempty"`
	Visible                bool                  `protobuf:"varint,40,opt,name=Visible,proto3" json:"Visible,omitempty"`
	GoodName               string                `protobuf:"bytes,50,opt,name=GoodName,proto3" json:"GoodName,omitempty"`
	Price                  string                `protobuf:"bytes,60,opt,name=Price,proto3" json:"Price,omitempty"`
	DisplayIndex           int32                 `protobuf:"varint,70,opt,name=DisplayIndex,proto3" json:"DisplayIndex,omitempty"`
	PurchaseLimit          int32                 `protobuf:"varint,80,opt,name=PurchaseLimit,proto3" json:"PurchaseLimit,omitempty"`
	CommissionPercent      int32                 `protobuf:"varint,90,opt,name=CommissionPercent,proto3" json:"CommissionPercent,omitempty"`
	SaleStartAt            *uint32               `protobuf:"varint,100,opt,name=SaleStartAt,proto3,oneof" json:"SaleStartAt,omitempty"`
	SaleEndAt              *uint32               `protobuf:"varint,110,opt,name=SaleEndAt,proto3,oneof" json:"SaleEndAt,omitempty"`
	ServiceStartAt         *uint32               `protobuf:"varint,120,opt,name=ServiceStartAt,proto3,oneof" json:"ServiceStartAt,omitempty"`
	TechnicalFeeRatio      *uint32               `protobuf:"varint,130,opt,name=TechnicalFeeRatio,proto3,oneof" json:"TechnicalFeeRatio,omitempty"`
	ElectricityFeeRatio    *uint32               `protobuf:"varint,140,opt,name=ElectricityFeeRatio,proto3,oneof" json:"ElectricityFeeRatio,omitempty"`
	CommissionSettleType   commission.SettleType `protobuf:"varint,150,opt,name=CommissionSettleType,proto3,enum=inspire.manager.commission.v1.SettleType" json:"CommissionSettleType,omitempty"`
	EnablePurchase         *bool                 `protobuf:"varint,160,opt,name=EnablePurchase,proto3,oneof" json:"EnablePurchase,omitempty"`
	EnableProductPage      *bool                 `protobuf:"varint,170,opt,name=EnableProductPage,proto3,oneof" json:"EnableProductPage,omitempty"`
	CancelMode             *appgood.CancelMode   `protobuf:"varint,180,opt,name=CancelMode,proto3,enum=good.manager.appgood.v1.CancelMode,oneof" json:"CancelMode,omitempty"`
	UserPurchaseLimit      *string               `protobuf:"bytes,190,opt,name=UserPurchaseLimit,proto3,oneof" json:"UserPurchaseLimit,omitempty"`
	DisplayColors          []string              `protobuf:"bytes,200,rep,name=DisplayColors,proto3" json:"DisplayColors,omitempty"`
	CancellableBeforeStart *uint32               `protobuf:"varint,210,opt,name=CancellableBeforeStart,proto3,oneof" json:"CancellableBeforeStart,omitempty"`
	ProductPage            *string               `protobuf:"bytes,220,opt,name=ProductPage,proto3,oneof" json:"ProductPage,omitempty"`
	EnableSetCommission    *bool                 `protobuf:"varint,230,opt,name=EnableSetCommission,proto3,oneof" json:"EnableSetCommission,omitempty"`
}

func (x *CreateNAppGoodRequest) Reset() {
	*x = CreateNAppGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_appgood_appgood_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNAppGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNAppGoodRequest) ProtoMessage() {}

func (x *CreateNAppGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_appgood_appgood_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNAppGoodRequest.ProtoReflect.Descriptor instead.
func (*CreateNAppGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_appgood_appgood_proto_rawDescGZIP(), []int{1}
}

func (x *CreateNAppGoodRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

func (x *CreateNAppGoodRequest) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *CreateNAppGoodRequest) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

func (x *CreateNAppGoodRequest) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

func (x *CreateNAppGoodRequest) GetGoodName() string {
	if x != nil {
		return x.GoodName
	}
	return ""
}

func (x *CreateNAppGoodRequest) GetPrice() string {
	if x != nil {
		return x.Price
	}
	return ""
}

func (x *CreateNAppGoodRequest) GetDisplayIndex() int32 {
	if x != nil {
		return x.DisplayIndex
	}
	return 0
}

func (x *CreateNAppGoodRequest) GetPurchaseLimit() int32 {
	if x != nil {
		return x.PurchaseLimit
	}
	return 0
}

func (x *CreateNAppGoodRequest) GetCommissionPercent() int32 {
	if x != nil {
		return x.CommissionPercent
	}
	return 0
}

func (x *CreateNAppGoodRequest) GetSaleStartAt() uint32 {
	if x != nil && x.SaleStartAt != nil {
		return *x.SaleStartAt
	}
	return 0
}

func (x *CreateNAppGoodRequest) GetSaleEndAt() uint32 {
	if x != nil && x.SaleEndAt != nil {
		return *x.SaleEndAt
	}
	return 0
}

func (x *CreateNAppGoodRequest) GetServiceStartAt() uint32 {
	if x != nil && x.ServiceStartAt != nil {
		return *x.ServiceStartAt
	}
	return 0
}

func (x *CreateNAppGoodRequest) GetTechnicalFeeRatio() uint32 {
	if x != nil && x.TechnicalFeeRatio != nil {
		return *x.TechnicalFeeRatio
	}
	return 0
}

func (x *CreateNAppGoodRequest) GetElectricityFeeRatio() uint32 {
	if x != nil && x.ElectricityFeeRatio != nil {
		return *x.ElectricityFeeRatio
	}
	return 0
}

func (x *CreateNAppGoodRequest) GetCommissionSettleType() commission.SettleType {
	if x != nil {
		return x.CommissionSettleType
	}
	return commission.SettleType(0)
}

func (x *CreateNAppGoodRequest) GetEnablePurchase() bool {
	if x != nil && x.EnablePurchase != nil {
		return *x.EnablePurchase
	}
	return false
}

func (x *CreateNAppGoodRequest) GetEnableProductPage() bool {
	if x != nil && x.EnableProductPage != nil {
		return *x.EnableProductPage
	}
	return false
}

func (x *CreateNAppGoodRequest) GetCancelMode() appgood.CancelMode {
	if x != nil && x.CancelMode != nil {
		return *x.CancelMode
	}
	return appgood.CancelMode(0)
}

func (x *CreateNAppGoodRequest) GetUserPurchaseLimit() string {
	if x != nil && x.UserPurchaseLimit != nil {
		return *x.UserPurchaseLimit
	}
	return ""
}

func (x *CreateNAppGoodRequest) GetDisplayColors() []string {
	if x != nil {
		return x.DisplayColors
	}
	return nil
}

func (x *CreateNAppGoodRequest) GetCancellableBeforeStart() uint32 {
	if x != nil && x.CancellableBeforeStart != nil {
		return *x.CancellableBeforeStart
	}
	return 0
}

func (x *CreateNAppGoodRequest) GetProductPage() string {
	if x != nil && x.ProductPage != nil {
		return *x.ProductPage
	}
	return ""
}

func (x *CreateNAppGoodRequest) GetEnableSetCommission() bool {
	if x != nil && x.EnableSetCommission != nil {
		return *x.EnableSetCommission
	}
	return false
}

type CreateNAppGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Good `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateNAppGoodResponse) Reset() {
	*x = CreateNAppGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_appgood_appgood_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNAppGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNAppGoodResponse) ProtoMessage() {}

func (x *CreateNAppGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_appgood_appgood_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNAppGoodResponse.ProtoReflect.Descriptor instead.
func (*CreateNAppGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_appgood_appgood_proto_rawDescGZIP(), []int{2}
}

func (x *CreateNAppGoodResponse) GetInfo() *Good {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetAppGoodsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID  string `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetAppGoodsRequest) Reset() {
	*x = GetAppGoodsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_appgood_appgood_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppGoodsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppGoodsRequest) ProtoMessage() {}

func (x *GetAppGoodsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_appgood_appgood_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppGoodsRequest.ProtoReflect.Descriptor instead.
func (*GetAppGoodsRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_appgood_appgood_proto_rawDescGZIP(), []int{3}
}

func (x *GetAppGoodsRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetAppGoodsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetAppGoodsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetAppGoodsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Good `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32  `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetAppGoodsResponse) Reset() {
	*x = GetAppGoodsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_appgood_appgood_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppGoodsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppGoodsResponse) ProtoMessage() {}

func (x *GetAppGoodsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_appgood_appgood_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppGoodsResponse.ProtoReflect.Descriptor instead.
func (*GetAppGoodsResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_appgood_appgood_proto_rawDescGZIP(), []int{4}
}

func (x *GetAppGoodsResponse) GetInfos() []*Good {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetAppGoodsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetAppGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID  string `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	GoodID string `protobuf:"bytes,20,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
}

func (x *GetAppGoodRequest) Reset() {
	*x = GetAppGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_appgood_appgood_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppGoodRequest) ProtoMessage() {}

func (x *GetAppGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_appgood_appgood_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppGoodRequest.ProtoReflect.Descriptor instead.
func (*GetAppGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_appgood_appgood_proto_rawDescGZIP(), []int{5}
}

func (x *GetAppGoodRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetAppGoodRequest) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

type GetAppGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Good `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetAppGoodResponse) Reset() {
	*x = GetAppGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_appgood_appgood_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppGoodResponse) ProtoMessage() {}

func (x *GetAppGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_appgood_appgood_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppGoodResponse.ProtoReflect.Descriptor instead.
func (*GetAppGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_appgood_appgood_proto_rawDescGZIP(), []int{6}
}

func (x *GetAppGoodResponse) GetInfo() *Good {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetNAppGoodsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetAppID string `protobuf:"bytes,10,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
	Offset      int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit       int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetNAppGoodsRequest) Reset() {
	*x = GetNAppGoodsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_appgood_appgood_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNAppGoodsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNAppGoodsRequest) ProtoMessage() {}

func (x *GetNAppGoodsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_appgood_appgood_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNAppGoodsRequest.ProtoReflect.Descriptor instead.
func (*GetNAppGoodsRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_appgood_appgood_proto_rawDescGZIP(), []int{7}
}

func (x *GetNAppGoodsRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

func (x *GetNAppGoodsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetNAppGoodsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetNAppGoodsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Good `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32  `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetNAppGoodsResponse) Reset() {
	*x = GetNAppGoodsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_appgood_appgood_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNAppGoodsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNAppGoodsResponse) ProtoMessage() {}

func (x *GetNAppGoodsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_appgood_appgood_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNAppGoodsResponse.ProtoReflect.Descriptor instead.
func (*GetNAppGoodsResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_appgood_appgood_proto_rawDescGZIP(), []int{8}
}

func (x *GetNAppGoodsResponse) GetInfos() []*Good {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetNAppGoodsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type UpdateAppGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                     string                 `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID                  string                 `protobuf:"bytes,20,opt,name=AppID,proto3" json:"AppID,omitempty"`
	Online                 *bool                  `protobuf:"varint,30,opt,name=Online,proto3,oneof" json:"Online,omitempty"`
	Visible                *bool                  `protobuf:"varint,40,opt,name=Visible,proto3,oneof" json:"Visible,omitempty"`
	GoodName               *string                `protobuf:"bytes,50,opt,name=GoodName,proto3,oneof" json:"GoodName,omitempty"`
	Price                  *string                `protobuf:"bytes,60,opt,name=Price,proto3,oneof" json:"Price,omitempty"`
	DisplayIndex           *int32                 `protobuf:"varint,70,opt,name=DisplayIndex,proto3,oneof" json:"DisplayIndex,omitempty"`
	PurchaseLimit          *int32                 `protobuf:"varint,80,opt,name=PurchaseLimit,proto3,oneof" json:"PurchaseLimit,omitempty"`
	CommissionPercent      *int32                 `protobuf:"varint,90,opt,name=CommissionPercent,proto3,oneof" json:"CommissionPercent,omitempty"`
	SaleStartAt            *uint32                `protobuf:"varint,100,opt,name=SaleStartAt,proto3,oneof" json:"SaleStartAt,omitempty"`
	SaleEndAt              *uint32                `protobuf:"varint,110,opt,name=SaleEndAt,proto3,oneof" json:"SaleEndAt,omitempty"`
	ServiceStartAt         *uint32                `protobuf:"varint,120,opt,name=ServiceStartAt,proto3,oneof" json:"ServiceStartAt,omitempty"`
	TechnicalFeeRatio      *uint32                `protobuf:"varint,130,opt,name=TechnicalFeeRatio,proto3,oneof" json:"TechnicalFeeRatio,omitempty"`
	ElectricityFeeRatio    *uint32                `protobuf:"varint,140,opt,name=ElectricityFeeRatio,proto3,oneof" json:"ElectricityFeeRatio,omitempty"`
	CommissionSettleType   *commission.SettleType `protobuf:"varint,150,opt,name=CommissionSettleType,proto3,enum=inspire.manager.commission.v1.SettleType,oneof" json:"CommissionSettleType,omitempty"`
	Descriptions           []string               `protobuf:"bytes,160,rep,name=Descriptions,proto3" json:"Descriptions,omitempty"`
	GoodBanner             *string                `protobuf:"bytes,170,opt,name=GoodBanner,proto3,oneof" json:"GoodBanner,omitempty"`
	DisplayNames           []string               `protobuf:"bytes,180,rep,name=DisplayNames,proto3" json:"DisplayNames,omitempty"`
	DailyRewardAmount      *string                `protobuf:"bytes,190,opt,name=DailyRewardAmount,proto3,oneof" json:"DailyRewardAmount,omitempty"`
	EnablePurchase         *bool                  `protobuf:"varint,200,opt,name=EnablePurchase,proto3,oneof" json:"EnablePurchase,omitempty"`
	EnableProductPage      *bool                  `protobuf:"varint,210,opt,name=EnableProductPage,proto3,oneof" json:"EnableProductPage,omitempty"`
	CancelMode             *appgood.CancelMode    `protobuf:"varint,220,opt,name=CancelMode,proto3,enum=good.manager.appgood.v1.CancelMode,oneof" json:"CancelMode,omitempty"`
	UserPurchaseLimit      *string                `protobuf:"bytes,230,opt,name=UserPurchaseLimit,proto3,oneof" json:"UserPurchaseLimit,omitempty"`
	DisplayColors          []string               `protobuf:"bytes,240,rep,name=DisplayColors,proto3" json:"DisplayColors,omitempty"`
	CancellableBeforeStart *uint32                `protobuf:"varint,250,opt,name=CancellableBeforeStart,proto3,oneof" json:"CancellableBeforeStart,omitempty"`
	ProductPage            *string                `protobuf:"bytes,260,opt,name=ProductPage,proto3,oneof" json:"ProductPage,omitempty"`
	EnableSetCommission    *bool                  `protobuf:"varint,270,opt,name=EnableSetCommission,proto3,oneof" json:"EnableSetCommission,omitempty"`
}

func (x *UpdateAppGoodRequest) Reset() {
	*x = UpdateAppGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_appgood_appgood_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppGoodRequest) ProtoMessage() {}

func (x *UpdateAppGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_appgood_appgood_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppGoodRequest.ProtoReflect.Descriptor instead.
func (*UpdateAppGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_appgood_appgood_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateAppGoodRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *UpdateAppGoodRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *UpdateAppGoodRequest) GetOnline() bool {
	if x != nil && x.Online != nil {
		return *x.Online
	}
	return false
}

func (x *UpdateAppGoodRequest) GetVisible() bool {
	if x != nil && x.Visible != nil {
		return *x.Visible
	}
	return false
}

func (x *UpdateAppGoodRequest) GetGoodName() string {
	if x != nil && x.GoodName != nil {
		return *x.GoodName
	}
	return ""
}

func (x *UpdateAppGoodRequest) GetPrice() string {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return ""
}

func (x *UpdateAppGoodRequest) GetDisplayIndex() int32 {
	if x != nil && x.DisplayIndex != nil {
		return *x.DisplayIndex
	}
	return 0
}

func (x *UpdateAppGoodRequest) GetPurchaseLimit() int32 {
	if x != nil && x.PurchaseLimit != nil {
		return *x.PurchaseLimit
	}
	return 0
}

func (x *UpdateAppGoodRequest) GetCommissionPercent() int32 {
	if x != nil && x.CommissionPercent != nil {
		return *x.CommissionPercent
	}
	return 0
}

func (x *UpdateAppGoodRequest) GetSaleStartAt() uint32 {
	if x != nil && x.SaleStartAt != nil {
		return *x.SaleStartAt
	}
	return 0
}

func (x *UpdateAppGoodRequest) GetSaleEndAt() uint32 {
	if x != nil && x.SaleEndAt != nil {
		return *x.SaleEndAt
	}
	return 0
}

func (x *UpdateAppGoodRequest) GetServiceStartAt() uint32 {
	if x != nil && x.ServiceStartAt != nil {
		return *x.ServiceStartAt
	}
	return 0
}

func (x *UpdateAppGoodRequest) GetTechnicalFeeRatio() uint32 {
	if x != nil && x.TechnicalFeeRatio != nil {
		return *x.TechnicalFeeRatio
	}
	return 0
}

func (x *UpdateAppGoodRequest) GetElectricityFeeRatio() uint32 {
	if x != nil && x.ElectricityFeeRatio != nil {
		return *x.ElectricityFeeRatio
	}
	return 0
}

func (x *UpdateAppGoodRequest) GetCommissionSettleType() commission.SettleType {
	if x != nil && x.CommissionSettleType != nil {
		return *x.CommissionSettleType
	}
	return commission.SettleType(0)
}

func (x *UpdateAppGoodRequest) GetDescriptions() []string {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *UpdateAppGoodRequest) GetGoodBanner() string {
	if x != nil && x.GoodBanner != nil {
		return *x.GoodBanner
	}
	return ""
}

func (x *UpdateAppGoodRequest) GetDisplayNames() []string {
	if x != nil {
		return x.DisplayNames
	}
	return nil
}

func (x *UpdateAppGoodRequest) GetDailyRewardAmount() string {
	if x != nil && x.DailyRewardAmount != nil {
		return *x.DailyRewardAmount
	}
	return ""
}

func (x *UpdateAppGoodRequest) GetEnablePurchase() bool {
	if x != nil && x.EnablePurchase != nil {
		return *x.EnablePurchase
	}
	return false
}

func (x *UpdateAppGoodRequest) GetEnableProductPage() bool {
	if x != nil && x.EnableProductPage != nil {
		return *x.EnableProductPage
	}
	return false
}

func (x *UpdateAppGoodRequest) GetCancelMode() appgood.CancelMode {
	if x != nil && x.CancelMode != nil {
		return *x.CancelMode
	}
	return appgood.CancelMode(0)
}

func (x *UpdateAppGoodRequest) GetUserPurchaseLimit() string {
	if x != nil && x.UserPurchaseLimit != nil {
		return *x.UserPurchaseLimit
	}
	return ""
}

func (x *UpdateAppGoodRequest) GetDisplayColors() []string {
	if x != nil {
		return x.DisplayColors
	}
	return nil
}

func (x *UpdateAppGoodRequest) GetCancellableBeforeStart() uint32 {
	if x != nil && x.CancellableBeforeStart != nil {
		return *x.CancellableBeforeStart
	}
	return 0
}

func (x *UpdateAppGoodRequest) GetProductPage() string {
	if x != nil && x.ProductPage != nil {
		return *x.ProductPage
	}
	return ""
}

func (x *UpdateAppGoodRequest) GetEnableSetCommission() bool {
	if x != nil && x.EnableSetCommission != nil {
		return *x.EnableSetCommission
	}
	return false
}

type UpdateAppGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Good `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateAppGoodResponse) Reset() {
	*x = UpdateAppGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_appgood_appgood_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppGoodResponse) ProtoMessage() {}

func (x *UpdateAppGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_appgood_appgood_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppGoodResponse.ProtoReflect.Descriptor instead.
func (*UpdateAppGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_appgood_appgood_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateAppGoodResponse) GetInfo() *Good {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateNAppGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                     string                 `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	TargetAppID            string                 `protobuf:"bytes,20,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
	Online                 *bool                  `protobuf:"varint,30,opt,name=Online,proto3,oneof" json:"Online,omitempty"`
	Visible                *bool                  `protobuf:"varint,40,opt,name=Visible,proto3,oneof" json:"Visible,omitempty"`
	GoodName               *string                `protobuf:"bytes,50,opt,name=GoodName,proto3,oneof" json:"GoodName,omitempty"`
	Price                  *string                `protobuf:"bytes,60,opt,name=Price,proto3,oneof" json:"Price,omitempty"`
	DisplayIndex           *int32                 `protobuf:"varint,70,opt,name=DisplayIndex,proto3,oneof" json:"DisplayIndex,omitempty"`
	PurchaseLimit          *int32                 `protobuf:"varint,80,opt,name=PurchaseLimit,proto3,oneof" json:"PurchaseLimit,omitempty"`
	CommissionPercent      *int32                 `protobuf:"varint,90,opt,name=CommissionPercent,proto3,oneof" json:"CommissionPercent,omitempty"`
	ServiceStartAt         *uint32                `protobuf:"varint,100,opt,name=ServiceStartAt,proto3,oneof" json:"ServiceStartAt,omitempty"`
	TechnicalFeeRatio      *uint32                `protobuf:"varint,110,opt,name=TechnicalFeeRatio,proto3,oneof" json:"TechnicalFeeRatio,omitempty"`
	ElectricityFeeRatio    *uint32                `protobuf:"varint,120,opt,name=ElectricityFeeRatio,proto3,oneof" json:"ElectricityFeeRatio,omitempty"`
	CommissionSettleType   *commission.SettleType `protobuf:"varint,130,opt,name=CommissionSettleType,proto3,enum=inspire.manager.commission.v1.SettleType,oneof" json:"CommissionSettleType,omitempty"`
	Descriptions           []string               `protobuf:"bytes,160,rep,name=Descriptions,proto3" json:"Descriptions,omitempty"`
	GoodBanner             *string                `protobuf:"bytes,170,opt,name=GoodBanner,proto3,oneof" json:"GoodBanner,omitempty"`
	DisplayNames           []string               `protobuf:"bytes,180,rep,name=DisplayNames,proto3" json:"DisplayNames,omitempty"`
	EnablePurchase         *bool                  `protobuf:"varint,190,opt,name=EnablePurchase,proto3,oneof" json:"EnablePurchase,omitempty"`
	EnableProductPage      *bool                  `protobuf:"varint,200,opt,name=EnableProductPage,proto3,oneof" json:"EnableProductPage,omitempty"`
	CancelMode             *appgood.CancelMode    `protobuf:"varint,210,opt,name=CancelMode,proto3,enum=good.manager.appgood.v1.CancelMode,oneof" json:"CancelMode,omitempty"`
	UserPurchaseLimit      *string                `protobuf:"bytes,220,opt,name=UserPurchaseLimit,proto3,oneof" json:"UserPurchaseLimit,omitempty"`
	DisplayColors          []string               `protobuf:"bytes,230,rep,name=DisplayColors,proto3" json:"DisplayColors,omitempty"`
	CancellableBeforeStart *uint32                `protobuf:"varint,240,opt,name=CancellableBeforeStart,proto3,oneof" json:"CancellableBeforeStart,omitempty"`
	ProductPage            *string                `protobuf:"bytes,250,opt,name=ProductPage,proto3,oneof" json:"ProductPage,omitempty"`
	EnableSetCommission    *bool                  `protobuf:"varint,270,opt,name=EnableSetCommission,proto3,oneof" json:"EnableSetCommission,omitempty"`
}

func (x *UpdateNAppGoodRequest) Reset() {
	*x = UpdateNAppGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_appgood_appgood_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNAppGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNAppGoodRequest) ProtoMessage() {}

func (x *UpdateNAppGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_appgood_appgood_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNAppGoodRequest.ProtoReflect.Descriptor instead.
func (*UpdateNAppGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_appgood_appgood_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateNAppGoodRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *UpdateNAppGoodRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

func (x *UpdateNAppGoodRequest) GetOnline() bool {
	if x != nil && x.Online != nil {
		return *x.Online
	}
	return false
}

func (x *UpdateNAppGoodRequest) GetVisible() bool {
	if x != nil && x.Visible != nil {
		return *x.Visible
	}
	return false
}

func (x *UpdateNAppGoodRequest) GetGoodName() string {
	if x != nil && x.GoodName != nil {
		return *x.GoodName
	}
	return ""
}

func (x *UpdateNAppGoodRequest) GetPrice() string {
	if x != nil && x.Price != nil {
		return *x.Price
	}
	return ""
}

func (x *UpdateNAppGoodRequest) GetDisplayIndex() int32 {
	if x != nil && x.DisplayIndex != nil {
		return *x.DisplayIndex
	}
	return 0
}

func (x *UpdateNAppGoodRequest) GetPurchaseLimit() int32 {
	if x != nil && x.PurchaseLimit != nil {
		return *x.PurchaseLimit
	}
	return 0
}

func (x *UpdateNAppGoodRequest) GetCommissionPercent() int32 {
	if x != nil && x.CommissionPercent != nil {
		return *x.CommissionPercent
	}
	return 0
}

func (x *UpdateNAppGoodRequest) GetServiceStartAt() uint32 {
	if x != nil && x.ServiceStartAt != nil {
		return *x.ServiceStartAt
	}
	return 0
}

func (x *UpdateNAppGoodRequest) GetTechnicalFeeRatio() uint32 {
	if x != nil && x.TechnicalFeeRatio != nil {
		return *x.TechnicalFeeRatio
	}
	return 0
}

func (x *UpdateNAppGoodRequest) GetElectricityFeeRatio() uint32 {
	if x != nil && x.ElectricityFeeRatio != nil {
		return *x.ElectricityFeeRatio
	}
	return 0
}

func (x *UpdateNAppGoodRequest) GetCommissionSettleType() commission.SettleType {
	if x != nil && x.CommissionSettleType != nil {
		return *x.CommissionSettleType
	}
	return commission.SettleType(0)
}

func (x *UpdateNAppGoodRequest) GetDescriptions() []string {
	if x != nil {
		return x.Descriptions
	}
	return nil
}

func (x *UpdateNAppGoodRequest) GetGoodBanner() string {
	if x != nil && x.GoodBanner != nil {
		return *x.GoodBanner
	}
	return ""
}

func (x *UpdateNAppGoodRequest) GetDisplayNames() []string {
	if x != nil {
		return x.DisplayNames
	}
	return nil
}

func (x *UpdateNAppGoodRequest) GetEnablePurchase() bool {
	if x != nil && x.EnablePurchase != nil {
		return *x.EnablePurchase
	}
	return false
}

func (x *UpdateNAppGoodRequest) GetEnableProductPage() bool {
	if x != nil && x.EnableProductPage != nil {
		return *x.EnableProductPage
	}
	return false
}

func (x *UpdateNAppGoodRequest) GetCancelMode() appgood.CancelMode {
	if x != nil && x.CancelMode != nil {
		return *x.CancelMode
	}
	return appgood.CancelMode(0)
}

func (x *UpdateNAppGoodRequest) GetUserPurchaseLimit() string {
	if x != nil && x.UserPurchaseLimit != nil {
		return *x.UserPurchaseLimit
	}
	return ""
}

func (x *UpdateNAppGoodRequest) GetDisplayColors() []string {
	if x != nil {
		return x.DisplayColors
	}
	return nil
}

func (x *UpdateNAppGoodRequest) GetCancellableBeforeStart() uint32 {
	if x != nil && x.CancellableBeforeStart != nil {
		return *x.CancellableBeforeStart
	}
	return 0
}

func (x *UpdateNAppGoodRequest) GetProductPage() string {
	if x != nil && x.ProductPage != nil {
		return *x.ProductPage
	}
	return ""
}

func (x *UpdateNAppGoodRequest) GetEnableSetCommission() bool {
	if x != nil && x.EnableSetCommission != nil {
		return *x.EnableSetCommission
	}
	return false
}

type UpdateNAppGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Good `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateNAppGoodResponse) Reset() {
	*x = UpdateNAppGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_appgood_appgood_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNAppGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNAppGoodResponse) ProtoMessage() {}

func (x *UpdateNAppGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_appgood_appgood_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNAppGoodResponse.ProtoReflect.Descriptor instead.
func (*UpdateNAppGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_appgood_appgood_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateNAppGoodResponse) GetInfo() *Good {
	if x != nil {
		return x.Info
	}
	return nil
}

type Good_CoinInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinTypeID   string `protobuf:"bytes,10,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty"`
	CoinLogo     string `protobuf:"bytes,20,opt,name=CoinLogo,proto3" json:"CoinLogo,omitempty"`
	CoinName     string `protobuf:"bytes,30,opt,name=CoinName,proto3" json:"CoinName,omitempty"`
	CoinUnit     string `protobuf:"bytes,40,opt,name=CoinUnit,proto3" json:"CoinUnit,omitempty"`
	CoinPreSale  bool   `protobuf:"varint,50,opt,name=CoinPreSale,proto3" json:"CoinPreSale,omitempty"`
	CoinEnv      string `protobuf:"bytes,60,opt,name=CoinEnv,proto3" json:"CoinEnv,omitempty"`
	CoinHomePage string `protobuf:"bytes,70,opt,name=CoinHomePage,proto3" json:"CoinHomePage,omitempty"`
	CoinSpecs    string `protobuf:"bytes,80,opt,name=CoinSpecs,proto3" json:"CoinSpecs,omitempty"`
}

func (x *Good_CoinInfo) Reset() {
	*x = Good_CoinInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_appgood_appgood_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Good_CoinInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Good_CoinInfo) ProtoMessage() {}

func (x *Good_CoinInfo) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_appgood_appgood_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Good_CoinInfo.ProtoReflect.Descriptor instead.
func (*Good_CoinInfo) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_appgood_appgood_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Good_CoinInfo) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

func (x *Good_CoinInfo) GetCoinLogo() string {
	if x != nil {
		return x.CoinLogo
	}
	return ""
}

func (x *Good_CoinInfo) GetCoinName() string {
	if x != nil {
		return x.CoinName
	}
	return ""
}

func (x *Good_CoinInfo) GetCoinUnit() string {
	if x != nil {
		return x.CoinUnit
	}
	return ""
}

func (x *Good_CoinInfo) GetCoinPreSale() bool {
	if x != nil {
		return x.CoinPreSale
	}
	return false
}

func (x *Good_CoinInfo) GetCoinEnv() string {
	if x != nil {
		return x.CoinEnv
	}
	return ""
}

func (x *Good_CoinInfo) GetCoinHomePage() string {
	if x != nil {
		return x.CoinHomePage
	}
	return ""
}

func (x *Good_CoinInfo) GetCoinSpecs() string {
	if x != nil {
		return x.CoinSpecs
	}
	return ""
}

var File_npool_good_gw_v1_appgood_appgood_proto protoreflect.FileDescriptor

var file_npool_good_gw_v1_appgood_appgood_proto_rawDesc = []byte{
	0x0a, 0x26, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x67, 0x77, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x61, 0x70, 0x70, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76,
	0x31, 0x1a, 0x21, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x6d, 0x67,
	0x72, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64,
	0x2f, 0x6d, 0x67, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x2f,
	0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x6e,
	0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f, 0x6d, 0x67, 0x72,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x11, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xe4, 0x1c, 0x0a, 0x04, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x46, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x50, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x5a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x00, 0x52, 0x10, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x6d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x01, 0x52, 0x0e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64,
	0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x10, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x0e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x8c, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x10, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x2a, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0d, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a,
	0x17, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x05, 0x52, 0x17, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a,
	0x12, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x4e, 0x4f, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x12, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x4f,
	0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x07, 0x52, 0x13, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x14, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x14, 0x52, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0xc8, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x13, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a,
	0x10, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x10, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x2c, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x02, 0x48, 0x0b, 0x52, 0x0e, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0b, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x18, 0xe6, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x0c, 0x52, 0x0b, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0xf0, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0xfa, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x66,
	0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x15, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x73, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x84, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x73, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b,
	0x0a, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x74, 0x18, 0x8e, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x12, 0x25, 0x0a, 0x0d, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x98, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x23, 0x0a, 0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x79, 0x73, 0x18, 0xa2, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x35, 0x0a, 0x15, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0xac, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1f,
	0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0xb6, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12,
	0x1b, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0xc0, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x1b, 0x0a, 0x08,
	0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0xca, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x43, 0x6f, 0x69,
	0x6e, 0x55, 0x6e, 0x69, 0x74, 0x18, 0xd4, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f,
	0x69, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x21, 0x0a, 0x0b, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72,
	0x65, 0x53, 0x61, 0x6c, 0x65, 0x18, 0xde, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x43, 0x6f,
	0x69, 0x6e, 0x50, 0x72, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x07, 0x43, 0x6f, 0x69,
	0x6e, 0x45, 0x6e, 0x76, 0x18, 0xdf, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x69,
	0x6e, 0x45, 0x6e, 0x76, 0x12, 0x23, 0x0a, 0x0c, 0x43, 0x6f, 0x69, 0x6e, 0x48, 0x6f, 0x6d, 0x65,
	0x50, 0x61, 0x67, 0x65, 0x18, 0xe0, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x6f, 0x69,
	0x6e, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x6f, 0x69,
	0x6e, 0x53, 0x70, 0x65, 0x63, 0x73, 0x18, 0xe1, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43,
	0x6f, 0x69, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x73, 0x12, 0x3b, 0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x18, 0xe8, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x47, 0x6f, 0x6f,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0xf2, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x47,
	0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0xfc, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x13, 0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74,
	0x18, 0x86, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x1f, 0x0a,
	0x0a, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x90, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x33,
	0x0a, 0x14, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x91, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x42,
	0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x48, 0x6f,
	0x75, 0x72, 0x73, 0x12, 0x1b, 0x0a, 0x08, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x18,
	0x9a, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79,
	0x12, 0x19, 0x0a, 0x07, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0xa4, 0x03, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x17, 0x0a, 0x06, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0xae, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x09, 0x56, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0xb8, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x56, 0x6f, 0x74, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x06, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0xc2, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x4b, 0x0a, 0x0c,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x18, 0xcc, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x64, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x15, 0x0a, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0xd6, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x17, 0x0a, 0x06, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0xe0, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x09, 0x49, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0xea, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x57, 0x61, 0x69, 0x74,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0xeb, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x57, 0x61,
	0x69, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x13, 0x0a, 0x04, 0x53, 0x6f, 0x6c, 0x64, 0x18,
	0xfe, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x6f, 0x6c, 0x64, 0x12, 0x3a, 0x0a, 0x08,
	0x53, 0x75, 0x62, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x18, 0x88, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61,
	0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x08,
	0x53, 0x75, 0x62, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x13, 0x0a, 0x04, 0x4d, 0x75, 0x73, 0x74,
	0x18, 0x92, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x4d, 0x75, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x9c, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x19,
	0x0a, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0xa6, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xb0, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x21, 0x0a, 0x0b, 0x53, 0x61, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0xba, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x53, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x53,
	0x61, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18, 0xc4, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x53, 0x61, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x27, 0x0a, 0x0e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0xce, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x74, 0x12, 0x2d, 0x0a, 0x11, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c,
	0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0xd8, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x12, 0x31, 0x0a, 0x13, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74,
	0x79, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0xe2, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x13, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x2d, 0x0a, 0x11, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xec, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5e, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0xf6, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x14,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x80, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0a, 0x47, 0x6f, 0x6f,
	0x64, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x8a, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x47, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0c, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x94, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x27, 0x0a, 0x0e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x18, 0x9e, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x11, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x18, 0xa8, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0xb2, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x70, 0x67,
	0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a,
	0x11, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0xbc, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x25, 0x0a, 0x0d,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0xc6, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x73, 0x12, 0x37, 0x0a, 0x16, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0xd0, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0b,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x18, 0xda, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12,
	0x31, 0x0a, 0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0xe4, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x1a, 0xfc, 0x01, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x43,
	0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43,
	0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x55,
	0x6e, 0x69, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x55,
	0x6e, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x65, 0x53, 0x61,
	0x6c, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72,
	0x65, 0x53, 0x61, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x69, 0x6e, 0x45, 0x6e, 0x76,
	0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x69, 0x6e, 0x45, 0x6e, 0x76, 0x12,
	0x22, 0x0a, 0x0c, 0x43, 0x6f, 0x69, 0x6e, 0x48, 0x6f, 0x6d, 0x65, 0x50, 0x61, 0x67, 0x65, 0x18,
	0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x6f, 0x69, 0x6e, 0x48, 0x6f, 0x6d, 0x65, 0x50,
	0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x73,
	0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6f, 0x69, 0x6e, 0x53, 0x70, 0x65, 0x63,
	0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x50, 0x72, 0x6f, 0x6d, 0x6f,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x50, 0x72,
	0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x49, 0x44, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42,
	0x15, 0x0a, 0x13, 0x5f, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x4f, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x52, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x17,
	0x0a, 0x15, 0x5f, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x42,
	0x13, 0x0a, 0x11, 0x5f, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x52, 0x65, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x22, 0x86, 0x0a, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x46, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x50, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x5a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0b, 0x53, 0x61, 0x6c, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0b,
	0x53, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x21,
	0x0a, 0x09, 0x53, 0x61, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x01, 0x52, 0x09, 0x53, 0x61, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x74, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x0e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x32,
	0x0a, 0x11, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x11, 0x54, 0x65,
	0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x36, 0x0a, 0x13, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74,
	0x79, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x04, 0x52, 0x13, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x46,
	0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x5e, 0x0a, 0x14, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x69, 0x6e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x0e, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x18, 0xa0, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x05, 0x52, 0x0e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x11, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x18, 0xaa, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x0a,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x07, 0x52, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xbe, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x11, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0d, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0xc8, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x73, 0x12, 0x3c, 0x0a, 0x16, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0xd2, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x09, 0x52, 0x16, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x26, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x18,
	0xdc, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x50, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x13, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0xe6, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0b, 0x52, 0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x53, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x53, 0x61, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x46,
	0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x45, 0x6c, 0x65, 0x63,
	0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x19, 0x0a,
	0x17, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x4b, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x41, 0x70, 0x70, 0x47, 0x6f,
	0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x58, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x60, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x70,
	0x70, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33,
	0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70,
	0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x05, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x41, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x22, 0x47, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x65, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4e, 0x41, 0x70, 0x70,
	0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x61, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x4e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x64, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22,
	0xe2, 0x0c, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x1b,
	0x0a, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x56,
	0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x07,
	0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x47, 0x6f,
	0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08,
	0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x05, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x46, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x0c,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12,
	0x29, 0x0a, 0x0d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x50, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x0d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18,
	0x5a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0b, 0x53, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x07, 0x52, 0x0b, 0x53, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x53, 0x61, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x41,
	0x74, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x08, 0x52, 0x09, 0x53, 0x61, 0x6c, 0x65, 0x45,
	0x6e, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x09, 0x52, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x11, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61,
	0x6c, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x0a, 0x52, 0x11, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x46, 0x65, 0x65,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x13, 0x45, 0x6c, 0x65, 0x63,
	0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18,
	0x8c, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0b, 0x52, 0x13, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72,
	0x69, 0x63, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x63, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x29, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x0c, 0x52, 0x14, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xa0, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0a, 0x47, 0x6f,
	0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0d, 0x52, 0x0a, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x23, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0xb4, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x11, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0e, 0x52, 0x11, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0e, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x18, 0xc8, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x0f, 0x52, 0x0e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x18, 0xd2, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x10, 0x52, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x0a, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x11, 0x52, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d,
	0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xe6, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x12, 0x52, 0x11, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0d, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0xf0, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x73, 0x12, 0x3c, 0x0a, 0x16, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0xfa, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x13, 0x52, 0x16, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x26, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x18, 0x84,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x14, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x8e,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x15, 0x52, 0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x56,
	0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x53, 0x61, 0x6c, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x53, 0x61, 0x6c, 0x65, 0x45,
	0x6e, 0x64, 0x41, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x54, 0x65, 0x63, 0x68,
	0x6e, 0x69, 0x63, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x16, 0x0a,
	0x14, 0x5f, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x42, 0x16, 0x0a, 0x14,
	0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4a, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70,
	0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0xbb, 0x0b, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x41, 0x70, 0x70, 0x47,
	0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x06,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x56, 0x69, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x07, 0x56, 0x69,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x47, 0x6f,
	0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x46, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x0c, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a,
	0x0d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x50,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x0d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x5a, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x07, 0x52, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11, 0x54, 0x65, 0x63, 0x68,
	0x6e, 0x69, 0x63, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x6e, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x08, 0x52, 0x11, 0x54, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c,
	0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x13, 0x45,
	0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74,
	0x69, 0x6f, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x09, 0x52, 0x13, 0x45, 0x6c, 0x65, 0x63,
	0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x88,
	0x01, 0x01, 0x12, 0x63, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x29, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x0a, 0x52, 0x14,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0c, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0xa0, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0a,
	0x47, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0b, 0x52, 0x0a, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x23, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0xb4, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x69, 0x73, 0x70, 0x6c,
	0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x0e, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x0c, 0x52, 0x0e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x0d, 0x52, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x0a, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70,
	0x70, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d,
	0x6f, 0x64, 0x65, 0x48, 0x0e, 0x52, 0x0a, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x6f, 0x64,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x0f, 0x52, 0x11, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x18, 0xe6, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12,
	0x3c, 0x0a, 0x16, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0xf0, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x10, 0x52, 0x16, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42,
	0x65, 0x66, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x18, 0xfa, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x11, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x8e, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x12, 0x52, 0x13, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x56, 0x69, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x10, 0x0a, 0x0e,
	0x5f, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x54, 0x65, 0x63, 0x68,
	0x6e, 0x69, 0x63, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x16, 0x0a,
	0x14, 0x5f, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65,
	0x52, 0x61, 0x74, 0x69, 0x6f, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x42, 0x14, 0x0a, 0x12, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x19, 0x0a, 0x17, 0x5f,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4b,
	0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0xdc, 0x06, 0x0a, 0x07,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x92, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x2e, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x41, 0x70, 0x70, 0x47,
	0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x41, 0x70, 0x70, 0x47,
	0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x2f, 0x6e, 0x2f, 0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x12, 0x85, 0x01, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x2b, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x67,
	0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a,
	0x01, 0x2a, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x61, 0x70, 0x70, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x47,
	0x6f, 0x6f, 0x64, 0x12, 0x2a, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61,
	0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70,
	0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x14, 0x3a, 0x01, 0x2a, 0x22, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74,
	0x2f, 0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x12, 0x8a, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74,
	0x4e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x2c, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a, 0x01,
	0x2a, 0x22, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x6e, 0x2f, 0x61, 0x70, 0x70,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x12, 0x8d, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x2d, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a, 0x01,
	0x2a, 0x22, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x70,
	0x70, 0x67, 0x6f, 0x6f, 0x64, 0x12, 0x92, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x2e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x2f, 0x6e, 0x2f, 0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e,
	0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x67, 0x77, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x70, 0x70, 0x67, 0x6f, 0x6f, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_good_gw_v1_appgood_appgood_proto_rawDescOnce sync.Once
	file_npool_good_gw_v1_appgood_appgood_proto_rawDescData = file_npool_good_gw_v1_appgood_appgood_proto_rawDesc
)

func file_npool_good_gw_v1_appgood_appgood_proto_rawDescGZIP() []byte {
	file_npool_good_gw_v1_appgood_appgood_proto_rawDescOnce.Do(func() {
		file_npool_good_gw_v1_appgood_appgood_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_good_gw_v1_appgood_appgood_proto_rawDescData)
	})
	return file_npool_good_gw_v1_appgood_appgood_proto_rawDescData
}

var file_npool_good_gw_v1_appgood_appgood_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_npool_good_gw_v1_appgood_appgood_proto_goTypes = []interface{}{
	(*Good)(nil),                   // 0: good.gateway.appgood.v1.Good
	(*CreateNAppGoodRequest)(nil),  // 1: good.gateway.appgood.v1.CreateNAppGoodRequest
	(*CreateNAppGoodResponse)(nil), // 2: good.gateway.appgood.v1.CreateNAppGoodResponse
	(*GetAppGoodsRequest)(nil),     // 3: good.gateway.appgood.v1.GetAppGoodsRequest
	(*GetAppGoodsResponse)(nil),    // 4: good.gateway.appgood.v1.GetAppGoodsResponse
	(*GetAppGoodRequest)(nil),      // 5: good.gateway.appgood.v1.GetAppGoodRequest
	(*GetAppGoodResponse)(nil),     // 6: good.gateway.appgood.v1.GetAppGoodResponse
	(*GetNAppGoodsRequest)(nil),    // 7: good.gateway.appgood.v1.GetNAppGoodsRequest
	(*GetNAppGoodsResponse)(nil),   // 8: good.gateway.appgood.v1.GetNAppGoodsResponse
	(*UpdateAppGoodRequest)(nil),   // 9: good.gateway.appgood.v1.UpdateAppGoodRequest
	(*UpdateAppGoodResponse)(nil),  // 10: good.gateway.appgood.v1.UpdateAppGoodResponse
	(*UpdateNAppGoodRequest)(nil),  // 11: good.gateway.appgood.v1.UpdateNAppGoodRequest
	(*UpdateNAppGoodResponse)(nil), // 12: good.gateway.appgood.v1.UpdateNAppGoodResponse
	(*Good_CoinInfo)(nil),          // 13: good.gateway.appgood.v1.Good.CoinInfo
	(good.GoodType)(0),             // 14: good.manager.good.v1.GoodType
	(good.BenefitType)(0),          // 15: good.manager.good.v1.BenefitType
	(commission.SettleType)(0),     // 16: inspire.manager.commission.v1.SettleType
	(appgood.CancelMode)(0),        // 17: good.manager.appgood.v1.CancelMode
}
var file_npool_good_gw_v1_appgood_appgood_proto_depIdxs = []int32{
	14, // 0: good.gateway.appgood.v1.Good.GoodType:type_name -> good.manager.good.v1.GoodType
	15, // 1: good.gateway.appgood.v1.Good.BenefitType:type_name -> good.manager.good.v1.BenefitType
	13, // 2: good.gateway.appgood.v1.Good.SupportCoins:type_name -> good.gateway.appgood.v1.Good.CoinInfo
	0,  // 3: good.gateway.appgood.v1.Good.SubGoods:type_name -> good.gateway.appgood.v1.Good
	16, // 4: good.gateway.appgood.v1.Good.CommissionSettleType:type_name -> inspire.manager.commission.v1.SettleType
	17, // 5: good.gateway.appgood.v1.Good.CancelMode:type_name -> good.manager.appgood.v1.CancelMode
	16, // 6: good.gateway.appgood.v1.CreateNAppGoodRequest.CommissionSettleType:type_name -> inspire.manager.commission.v1.SettleType
	17, // 7: good.gateway.appgood.v1.CreateNAppGoodRequest.CancelMode:type_name -> good.manager.appgood.v1.CancelMode
	0,  // 8: good.gateway.appgood.v1.CreateNAppGoodResponse.Info:type_name -> good.gateway.appgood.v1.Good
	0,  // 9: good.gateway.appgood.v1.GetAppGoodsResponse.Infos:type_name -> good.gateway.appgood.v1.Good
	0,  // 10: good.gateway.appgood.v1.GetAppGoodResponse.Info:type_name -> good.gateway.appgood.v1.Good
	0,  // 11: good.gateway.appgood.v1.GetNAppGoodsResponse.Infos:type_name -> good.gateway.appgood.v1.Good
	16, // 12: good.gateway.appgood.v1.UpdateAppGoodRequest.CommissionSettleType:type_name -> inspire.manager.commission.v1.SettleType
	17, // 13: good.gateway.appgood.v1.UpdateAppGoodRequest.CancelMode:type_name -> good.manager.appgood.v1.CancelMode
	0,  // 14: good.gateway.appgood.v1.UpdateAppGoodResponse.Info:type_name -> good.gateway.appgood.v1.Good
	16, // 15: good.gateway.appgood.v1.UpdateNAppGoodRequest.CommissionSettleType:type_name -> inspire.manager.commission.v1.SettleType
	17, // 16: good.gateway.appgood.v1.UpdateNAppGoodRequest.CancelMode:type_name -> good.manager.appgood.v1.CancelMode
	0,  // 17: good.gateway.appgood.v1.UpdateNAppGoodResponse.Info:type_name -> good.gateway.appgood.v1.Good
	1,  // 18: good.gateway.appgood.v1.Gateway.CreateNAppGood:input_type -> good.gateway.appgood.v1.CreateNAppGoodRequest
	3,  // 19: good.gateway.appgood.v1.Gateway.GetAppGoods:input_type -> good.gateway.appgood.v1.GetAppGoodsRequest
	5,  // 20: good.gateway.appgood.v1.Gateway.GetAppGood:input_type -> good.gateway.appgood.v1.GetAppGoodRequest
	7,  // 21: good.gateway.appgood.v1.Gateway.GetNAppGoods:input_type -> good.gateway.appgood.v1.GetNAppGoodsRequest
	9,  // 22: good.gateway.appgood.v1.Gateway.UpdateAppGood:input_type -> good.gateway.appgood.v1.UpdateAppGoodRequest
	11, // 23: good.gateway.appgood.v1.Gateway.UpdateNAppGood:input_type -> good.gateway.appgood.v1.UpdateNAppGoodRequest
	2,  // 24: good.gateway.appgood.v1.Gateway.CreateNAppGood:output_type -> good.gateway.appgood.v1.CreateNAppGoodResponse
	4,  // 25: good.gateway.appgood.v1.Gateway.GetAppGoods:output_type -> good.gateway.appgood.v1.GetAppGoodsResponse
	6,  // 26: good.gateway.appgood.v1.Gateway.GetAppGood:output_type -> good.gateway.appgood.v1.GetAppGoodResponse
	8,  // 27: good.gateway.appgood.v1.Gateway.GetNAppGoods:output_type -> good.gateway.appgood.v1.GetNAppGoodsResponse
	10, // 28: good.gateway.appgood.v1.Gateway.UpdateAppGood:output_type -> good.gateway.appgood.v1.UpdateAppGoodResponse
	12, // 29: good.gateway.appgood.v1.Gateway.UpdateNAppGood:output_type -> good.gateway.appgood.v1.UpdateNAppGoodResponse
	24, // [24:30] is the sub-list for method output_type
	18, // [18:24] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_npool_good_gw_v1_appgood_appgood_proto_init() }
func file_npool_good_gw_v1_appgood_appgood_proto_init() {
	if File_npool_good_gw_v1_appgood_appgood_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_good_gw_v1_appgood_appgood_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Good); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_appgood_appgood_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNAppGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_appgood_appgood_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNAppGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_appgood_appgood_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppGoodsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_appgood_appgood_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppGoodsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_appgood_appgood_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_appgood_appgood_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_appgood_appgood_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNAppGoodsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_appgood_appgood_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNAppGoodsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_appgood_appgood_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_appgood_appgood_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_appgood_appgood_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNAppGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_appgood_appgood_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNAppGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_appgood_appgood_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Good_CoinInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_good_gw_v1_appgood_appgood_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_npool_good_gw_v1_appgood_appgood_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_npool_good_gw_v1_appgood_appgood_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_npool_good_gw_v1_appgood_appgood_proto_msgTypes[11].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_good_gw_v1_appgood_appgood_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_good_gw_v1_appgood_appgood_proto_goTypes,
		DependencyIndexes: file_npool_good_gw_v1_appgood_appgood_proto_depIdxs,
		MessageInfos:      file_npool_good_gw_v1_appgood_appgood_proto_msgTypes,
	}.Build()
	File_npool_good_gw_v1_appgood_appgood_proto = out.File
	file_npool_good_gw_v1_appgood_appgood_proto_rawDesc = nil
	file_npool_good_gw_v1_appgood_appgood_proto_goTypes = nil
	file_npool_good_gw_v1_appgood_appgood_proto_depIdxs = nil
}
