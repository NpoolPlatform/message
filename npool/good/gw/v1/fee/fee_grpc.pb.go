// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/good/gw/v1/fee/fee.proto

package fee

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gateway_AdminCreateFee_FullMethodName = "/good.gateway.fee.v1.Gateway/AdminCreateFee"
	Gateway_AdminUpdateFee_FullMethodName = "/good.gateway.fee.v1.Gateway/AdminUpdateFee"
	Gateway_GetFees_FullMethodName        = "/good.gateway.fee.v1.Gateway/GetFees"
	Gateway_AdminDeleteFee_FullMethodName = "/good.gateway.fee.v1.Gateway/AdminDeleteFee"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	AdminCreateFee(ctx context.Context, in *AdminCreateFeeRequest, opts ...grpc.CallOption) (*AdminCreateFeeResponse, error)
	AdminUpdateFee(ctx context.Context, in *AdminUpdateFeeRequest, opts ...grpc.CallOption) (*AdminUpdateFeeResponse, error)
	GetFees(ctx context.Context, in *GetFeesRequest, opts ...grpc.CallOption) (*GetFeesResponse, error)
	AdminDeleteFee(ctx context.Context, in *AdminDeleteFeeRequest, opts ...grpc.CallOption) (*AdminDeleteFeeResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) AdminCreateFee(ctx context.Context, in *AdminCreateFeeRequest, opts ...grpc.CallOption) (*AdminCreateFeeResponse, error) {
	out := new(AdminCreateFeeResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminCreateFee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminUpdateFee(ctx context.Context, in *AdminUpdateFeeRequest, opts ...grpc.CallOption) (*AdminUpdateFeeResponse, error) {
	out := new(AdminUpdateFeeResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminUpdateFee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetFees(ctx context.Context, in *GetFeesRequest, opts ...grpc.CallOption) (*GetFeesResponse, error) {
	out := new(GetFeesResponse)
	err := c.cc.Invoke(ctx, Gateway_GetFees_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminDeleteFee(ctx context.Context, in *AdminDeleteFeeRequest, opts ...grpc.CallOption) (*AdminDeleteFeeResponse, error) {
	out := new(AdminDeleteFeeResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminDeleteFee_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	AdminCreateFee(context.Context, *AdminCreateFeeRequest) (*AdminCreateFeeResponse, error)
	AdminUpdateFee(context.Context, *AdminUpdateFeeRequest) (*AdminUpdateFeeResponse, error)
	GetFees(context.Context, *GetFeesRequest) (*GetFeesResponse, error)
	AdminDeleteFee(context.Context, *AdminDeleteFeeRequest) (*AdminDeleteFeeResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) AdminCreateFee(context.Context, *AdminCreateFeeRequest) (*AdminCreateFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCreateFee not implemented")
}
func (UnimplementedGatewayServer) AdminUpdateFee(context.Context, *AdminUpdateFeeRequest) (*AdminUpdateFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateFee not implemented")
}
func (UnimplementedGatewayServer) GetFees(context.Context, *GetFeesRequest) (*GetFeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFees not implemented")
}
func (UnimplementedGatewayServer) AdminDeleteFee(context.Context, *AdminDeleteFeeRequest) (*AdminDeleteFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDeleteFee not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_AdminCreateFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCreateFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminCreateFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminCreateFee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminCreateFee(ctx, req.(*AdminCreateFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminUpdateFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminUpdateFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminUpdateFee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminUpdateFee(ctx, req.(*AdminUpdateFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetFees_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetFees(ctx, req.(*GetFeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminDeleteFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDeleteFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminDeleteFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminDeleteFee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminDeleteFee(ctx, req.(*AdminDeleteFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "good.gateway.fee.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AdminCreateFee",
			Handler:    _Gateway_AdminCreateFee_Handler,
		},
		{
			MethodName: "AdminUpdateFee",
			Handler:    _Gateway_AdminUpdateFee_Handler,
		},
		{
			MethodName: "GetFees",
			Handler:    _Gateway_GetFees_Handler,
		},
		{
			MethodName: "AdminDeleteFee",
			Handler:    _Gateway_AdminDeleteFee_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/good/gw/v1/fee/fee.proto",
}
