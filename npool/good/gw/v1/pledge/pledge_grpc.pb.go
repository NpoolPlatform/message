// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/good/gw/v1/pledge/pledge.proto

package pledge

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gateway_AdminCreatePledge_FullMethodName = "/good.gateway.pledge.v1.Gateway/AdminCreatePledge"
	Gateway_AdminUpdatePledge_FullMethodName = "/good.gateway.pledge.v1.Gateway/AdminUpdatePledge"
	Gateway_GetPledge_FullMethodName         = "/good.gateway.pledge.v1.Gateway/GetPledge"
	Gateway_GetPledges_FullMethodName        = "/good.gateway.pledge.v1.Gateway/GetPledges"
	Gateway_AdminDeletePledge_FullMethodName = "/good.gateway.pledge.v1.Gateway/AdminDeletePledge"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	AdminCreatePledge(ctx context.Context, in *AdminCreatePledgeRequest, opts ...grpc.CallOption) (*AdminCreatePledgeResponse, error)
	AdminUpdatePledge(ctx context.Context, in *AdminUpdatePledgeRequest, opts ...grpc.CallOption) (*AdminUpdatePledgeResponse, error)
	GetPledge(ctx context.Context, in *GetPledgeRequest, opts ...grpc.CallOption) (*GetPledgeResponse, error)
	GetPledges(ctx context.Context, in *GetPledgesRequest, opts ...grpc.CallOption) (*GetPledgesResponse, error)
	AdminDeletePledge(ctx context.Context, in *AdminDeletePledgeRequest, opts ...grpc.CallOption) (*AdminDeletePledgeResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) AdminCreatePledge(ctx context.Context, in *AdminCreatePledgeRequest, opts ...grpc.CallOption) (*AdminCreatePledgeResponse, error) {
	out := new(AdminCreatePledgeResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminCreatePledge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminUpdatePledge(ctx context.Context, in *AdminUpdatePledgeRequest, opts ...grpc.CallOption) (*AdminUpdatePledgeResponse, error) {
	out := new(AdminUpdatePledgeResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminUpdatePledge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetPledge(ctx context.Context, in *GetPledgeRequest, opts ...grpc.CallOption) (*GetPledgeResponse, error) {
	out := new(GetPledgeResponse)
	err := c.cc.Invoke(ctx, Gateway_GetPledge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetPledges(ctx context.Context, in *GetPledgesRequest, opts ...grpc.CallOption) (*GetPledgesResponse, error) {
	out := new(GetPledgesResponse)
	err := c.cc.Invoke(ctx, Gateway_GetPledges_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminDeletePledge(ctx context.Context, in *AdminDeletePledgeRequest, opts ...grpc.CallOption) (*AdminDeletePledgeResponse, error) {
	out := new(AdminDeletePledgeResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminDeletePledge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	AdminCreatePledge(context.Context, *AdminCreatePledgeRequest) (*AdminCreatePledgeResponse, error)
	AdminUpdatePledge(context.Context, *AdminUpdatePledgeRequest) (*AdminUpdatePledgeResponse, error)
	GetPledge(context.Context, *GetPledgeRequest) (*GetPledgeResponse, error)
	GetPledges(context.Context, *GetPledgesRequest) (*GetPledgesResponse, error)
	AdminDeletePledge(context.Context, *AdminDeletePledgeRequest) (*AdminDeletePledgeResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) AdminCreatePledge(context.Context, *AdminCreatePledgeRequest) (*AdminCreatePledgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCreatePledge not implemented")
}
func (UnimplementedGatewayServer) AdminUpdatePledge(context.Context, *AdminUpdatePledgeRequest) (*AdminUpdatePledgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdatePledge not implemented")
}
func (UnimplementedGatewayServer) GetPledge(context.Context, *GetPledgeRequest) (*GetPledgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPledge not implemented")
}
func (UnimplementedGatewayServer) GetPledges(context.Context, *GetPledgesRequest) (*GetPledgesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPledges not implemented")
}
func (UnimplementedGatewayServer) AdminDeletePledge(context.Context, *AdminDeletePledgeRequest) (*AdminDeletePledgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDeletePledge not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_AdminCreatePledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCreatePledgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminCreatePledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminCreatePledge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminCreatePledge(ctx, req.(*AdminCreatePledgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminUpdatePledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdatePledgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminUpdatePledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminUpdatePledge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminUpdatePledge(ctx, req.(*AdminUpdatePledgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetPledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPledgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetPledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetPledge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetPledge(ctx, req.(*GetPledgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetPledges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPledgesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetPledges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetPledges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetPledges(ctx, req.(*GetPledgesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminDeletePledge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDeletePledgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminDeletePledge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminDeletePledge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminDeletePledge(ctx, req.(*AdminDeletePledgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "good.gateway.pledge.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AdminCreatePledge",
			Handler:    _Gateway_AdminCreatePledge_Handler,
		},
		{
			MethodName: "AdminUpdatePledge",
			Handler:    _Gateway_AdminUpdatePledge_Handler,
		},
		{
			MethodName: "GetPledge",
			Handler:    _Gateway_GetPledge_Handler,
		},
		{
			MethodName: "GetPledges",
			Handler:    _Gateway_GetPledges_Handler,
		},
		{
			MethodName: "AdminDeletePledge",
			Handler:    _Gateway_AdminDeletePledge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/good/gw/v1/pledge/pledge.proto",
}
