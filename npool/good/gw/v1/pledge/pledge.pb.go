// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.18.1
// source: npool/good/gw/v1/pledge/pledge.proto

package pledge

import (
	v1 "github.com/NpoolPlatform/message/npool/basetypes/good/v1"
	coin "github.com/NpoolPlatform/message/npool/good/gw/v1/good/coin"
	reward "github.com/NpoolPlatform/message/npool/good/gw/v1/good/coin/reward"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Pledge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                        uint32               `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID                     string               `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty"`
	GoodID                    string               `protobuf:"bytes,30,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
	UnitPrice                 string               `protobuf:"bytes,150,opt,name=UnitPrice,proto3" json:"UnitPrice,omitempty"`
	QuantityUnit              string               `protobuf:"bytes,160,opt,name=QuantityUnit,proto3" json:"QuantityUnit,omitempty"`
	QuantityUnitAmount        string               `protobuf:"bytes,170,opt,name=QuantityUnitAmount,proto3" json:"QuantityUnitAmount,omitempty"`
	DeliveryAt                uint32               `protobuf:"varint,180,opt,name=DeliveryAt,proto3" json:"DeliveryAt,omitempty"`
	UnitLockDeposit           string               `protobuf:"bytes,190,opt,name=UnitLockDeposit,proto3" json:"UnitLockDeposit,omitempty"`
	DurationDisplayType       v1.GoodDurationType  `protobuf:"varint,200,opt,name=DurationDisplayType,proto3,enum=basetypes.good.v1.GoodDurationType" json:"DurationDisplayType,omitempty"`
	GoodType                  v1.GoodType          `protobuf:"varint,210,opt,name=GoodType,proto3,enum=basetypes.good.v1.GoodType" json:"GoodType,omitempty"`
	BenefitType               v1.BenefitType       `protobuf:"varint,220,opt,name=BenefitType,proto3,enum=basetypes.good.v1.BenefitType" json:"BenefitType,omitempty"`
	Name                      string               `protobuf:"bytes,230,opt,name=Name,proto3" json:"Name,omitempty"`
	ServiceStartAt            uint32               `protobuf:"varint,240,opt,name=ServiceStartAt,proto3" json:"ServiceStartAt,omitempty"`
	StartMode                 v1.GoodStartMode     `protobuf:"varint,250,opt,name=StartMode,proto3,enum=basetypes.good.v1.GoodStartMode" json:"StartMode,omitempty"`
	TestOnly                  bool                 `protobuf:"varint,260,opt,name=TestOnly,proto3" json:"TestOnly,omitempty"`
	BenefitIntervalHours      uint32               `protobuf:"varint,270,opt,name=BenefitIntervalHours,proto3" json:"BenefitIntervalHours,omitempty"`
	Purchasable               bool                 `protobuf:"varint,280,opt,name=Purchasable,proto3" json:"Purchasable,omitempty"`
	Online                    bool                 `protobuf:"varint,290,opt,name=Online,proto3" json:"Online,omitempty"`
	StockMode                 v1.GoodStockMode     `protobuf:"varint,300,opt,name=StockMode,proto3,enum=basetypes.good.v1.GoodStockMode" json:"StockMode,omitempty"`
	State                     v1.GoodState         `protobuf:"varint,301,opt,name=State,proto3,enum=basetypes.good.v1.GoodState" json:"State,omitempty"`
	RewardState               v1.BenefitState      `protobuf:"varint,390,opt,name=RewardState,proto3,enum=basetypes.good.v1.BenefitState" json:"RewardState,omitempty"`
	LastRewardAt              uint32               `protobuf:"varint,400,opt,name=LastRewardAt,proto3" json:"LastRewardAt,omitempty"`
	GoodCoins                 []*coin.GoodCoinInfo `protobuf:"bytes,900,rep,name=GoodCoins,proto3" json:"GoodCoins,omitempty"`
	Rewards                   []*reward.RewardInfo `protobuf:"bytes,820,rep,name=Rewards,proto3" json:"Rewards,omitempty"`
	ContractCodeURL           string               `protobuf:"bytes,830,opt,name=ContractCodeURL,proto3" json:"ContractCodeURL,omitempty"`
	ContractCodeBranch        string               `protobuf:"bytes,840,opt,name=ContractCodeBranch,proto3" json:"ContractCodeBranch,omitempty"`
	ContractState             v1.ContractState     `protobuf:"varint,850,opt,name=ContractState,proto3,enum=basetypes.good.v1.ContractState" json:"ContractState,omitempty"`
	ContractDeploymentAddress string               `protobuf:"bytes,860,opt,name=ContractDeploymentAddress,proto3" json:"ContractDeploymentAddress,omitempty"`
	ContractSettlementAddress string               `protobuf:"bytes,870,opt,name=ContractSettlementAddress,proto3" json:"ContractSettlementAddress,omitempty"`
	CreatedAt                 uint32               `protobuf:"varint,1000,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt                 uint32               `protobuf:"varint,1010,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (x *Pledge) Reset() {
	*x = Pledge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_pledge_pledge_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pledge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pledge) ProtoMessage() {}

func (x *Pledge) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_pledge_pledge_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pledge.ProtoReflect.Descriptor instead.
func (*Pledge) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_pledge_pledge_proto_rawDescGZIP(), []int{0}
}

func (x *Pledge) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Pledge) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *Pledge) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *Pledge) GetUnitPrice() string {
	if x != nil {
		return x.UnitPrice
	}
	return ""
}

func (x *Pledge) GetQuantityUnit() string {
	if x != nil {
		return x.QuantityUnit
	}
	return ""
}

func (x *Pledge) GetQuantityUnitAmount() string {
	if x != nil {
		return x.QuantityUnitAmount
	}
	return ""
}

func (x *Pledge) GetDeliveryAt() uint32 {
	if x != nil {
		return x.DeliveryAt
	}
	return 0
}

func (x *Pledge) GetUnitLockDeposit() string {
	if x != nil {
		return x.UnitLockDeposit
	}
	return ""
}

func (x *Pledge) GetDurationDisplayType() v1.GoodDurationType {
	if x != nil {
		return x.DurationDisplayType
	}
	return v1.GoodDurationType(0)
}

func (x *Pledge) GetGoodType() v1.GoodType {
	if x != nil {
		return x.GoodType
	}
	return v1.GoodType(0)
}

func (x *Pledge) GetBenefitType() v1.BenefitType {
	if x != nil {
		return x.BenefitType
	}
	return v1.BenefitType(0)
}

func (x *Pledge) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Pledge) GetServiceStartAt() uint32 {
	if x != nil {
		return x.ServiceStartAt
	}
	return 0
}

func (x *Pledge) GetStartMode() v1.GoodStartMode {
	if x != nil {
		return x.StartMode
	}
	return v1.GoodStartMode(0)
}

func (x *Pledge) GetTestOnly() bool {
	if x != nil {
		return x.TestOnly
	}
	return false
}

func (x *Pledge) GetBenefitIntervalHours() uint32 {
	if x != nil {
		return x.BenefitIntervalHours
	}
	return 0
}

func (x *Pledge) GetPurchasable() bool {
	if x != nil {
		return x.Purchasable
	}
	return false
}

func (x *Pledge) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

func (x *Pledge) GetStockMode() v1.GoodStockMode {
	if x != nil {
		return x.StockMode
	}
	return v1.GoodStockMode(0)
}

func (x *Pledge) GetState() v1.GoodState {
	if x != nil {
		return x.State
	}
	return v1.GoodState(0)
}

func (x *Pledge) GetRewardState() v1.BenefitState {
	if x != nil {
		return x.RewardState
	}
	return v1.BenefitState(0)
}

func (x *Pledge) GetLastRewardAt() uint32 {
	if x != nil {
		return x.LastRewardAt
	}
	return 0
}

func (x *Pledge) GetGoodCoins() []*coin.GoodCoinInfo {
	if x != nil {
		return x.GoodCoins
	}
	return nil
}

func (x *Pledge) GetRewards() []*reward.RewardInfo {
	if x != nil {
		return x.Rewards
	}
	return nil
}

func (x *Pledge) GetContractCodeURL() string {
	if x != nil {
		return x.ContractCodeURL
	}
	return ""
}

func (x *Pledge) GetContractCodeBranch() string {
	if x != nil {
		return x.ContractCodeBranch
	}
	return ""
}

func (x *Pledge) GetContractState() v1.ContractState {
	if x != nil {
		return x.ContractState
	}
	return v1.ContractState(0)
}

func (x *Pledge) GetContractDeploymentAddress() string {
	if x != nil {
		return x.ContractDeploymentAddress
	}
	return ""
}

func (x *Pledge) GetContractSettlementAddress() string {
	if x != nil {
		return x.ContractSettlementAddress
	}
	return ""
}

func (x *Pledge) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Pledge) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type AdminCreatePledgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Base of power rental
	ContractCodeURL    string `protobuf:"bytes,10,opt,name=ContractCodeURL,proto3" json:"ContractCodeURL,omitempty"`
	ContractCodeBranch string `protobuf:"bytes,20,opt,name=ContractCodeBranch,proto3" json:"ContractCodeBranch,omitempty"`
	// Good information
	GoodType             v1.GoodType      `protobuf:"varint,120,opt,name=GoodType,proto3,enum=basetypes.good.v1.GoodType" json:"GoodType,omitempty"`
	Name                 string           `protobuf:"bytes,140,opt,name=Name,proto3" json:"Name,omitempty"`
	ServiceStartAt       *uint32          `protobuf:"varint,150,opt,name=ServiceStartAt,proto3,oneof" json:"ServiceStartAt,omitempty"`
	StartMode            v1.GoodStartMode `protobuf:"varint,160,opt,name=StartMode,proto3,enum=basetypes.good.v1.GoodStartMode" json:"StartMode,omitempty"`
	TestOnly             *bool            `protobuf:"varint,170,opt,name=TestOnly,proto3,oneof" json:"TestOnly,omitempty"`
	BenefitIntervalHours *uint32          `protobuf:"varint,180,opt,name=BenefitIntervalHours,proto3,oneof" json:"BenefitIntervalHours,omitempty"`
	Purchasable          *bool            `protobuf:"varint,190,opt,name=Purchasable,proto3,oneof" json:"Purchasable,omitempty"`
	Online               *bool            `protobuf:"varint,200,opt,name=Online,proto3,oneof" json:"Online,omitempty"`
}

func (x *AdminCreatePledgeRequest) Reset() {
	*x = AdminCreatePledgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_pledge_pledge_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminCreatePledgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminCreatePledgeRequest) ProtoMessage() {}

func (x *AdminCreatePledgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_pledge_pledge_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminCreatePledgeRequest.ProtoReflect.Descriptor instead.
func (*AdminCreatePledgeRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_pledge_pledge_proto_rawDescGZIP(), []int{1}
}

func (x *AdminCreatePledgeRequest) GetContractCodeURL() string {
	if x != nil {
		return x.ContractCodeURL
	}
	return ""
}

func (x *AdminCreatePledgeRequest) GetContractCodeBranch() string {
	if x != nil {
		return x.ContractCodeBranch
	}
	return ""
}

func (x *AdminCreatePledgeRequest) GetGoodType() v1.GoodType {
	if x != nil {
		return x.GoodType
	}
	return v1.GoodType(0)
}

func (x *AdminCreatePledgeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AdminCreatePledgeRequest) GetServiceStartAt() uint32 {
	if x != nil && x.ServiceStartAt != nil {
		return *x.ServiceStartAt
	}
	return 0
}

func (x *AdminCreatePledgeRequest) GetStartMode() v1.GoodStartMode {
	if x != nil {
		return x.StartMode
	}
	return v1.GoodStartMode(0)
}

func (x *AdminCreatePledgeRequest) GetTestOnly() bool {
	if x != nil && x.TestOnly != nil {
		return *x.TestOnly
	}
	return false
}

func (x *AdminCreatePledgeRequest) GetBenefitIntervalHours() uint32 {
	if x != nil && x.BenefitIntervalHours != nil {
		return *x.BenefitIntervalHours
	}
	return 0
}

func (x *AdminCreatePledgeRequest) GetPurchasable() bool {
	if x != nil && x.Purchasable != nil {
		return *x.Purchasable
	}
	return false
}

func (x *AdminCreatePledgeRequest) GetOnline() bool {
	if x != nil && x.Online != nil {
		return *x.Online
	}
	return false
}

type AdminCreatePledgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Pledge `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *AdminCreatePledgeResponse) Reset() {
	*x = AdminCreatePledgeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_pledge_pledge_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminCreatePledgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminCreatePledgeResponse) ProtoMessage() {}

func (x *AdminCreatePledgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_pledge_pledge_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminCreatePledgeResponse.ProtoReflect.Descriptor instead.
func (*AdminCreatePledgeResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_pledge_pledge_proto_rawDescGZIP(), []int{2}
}

func (x *AdminCreatePledgeResponse) GetInfo() *Pledge {
	if x != nil {
		return x.Info
	}
	return nil
}

type AdminUpdatePledgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                 uint32  `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID              string  `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty"`
	GoodID             string  `protobuf:"bytes,40,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
	ContractCodeURL    *string `protobuf:"bytes,50,opt,name=ContractCodeURL,proto3,oneof" json:"ContractCodeURL,omitempty"`
	ContractCodeBranch *string `protobuf:"bytes,60,opt,name=ContractCodeBranch,proto3,oneof" json:"ContractCodeBranch,omitempty"`
	// Good information
	GoodType             *v1.GoodType      `protobuf:"varint,130,opt,name=GoodType,proto3,enum=basetypes.good.v1.GoodType,oneof" json:"GoodType,omitempty"`
	Name                 *string           `protobuf:"bytes,150,opt,name=Name,proto3,oneof" json:"Name,omitempty"`
	ServiceStartAt       *uint32           `protobuf:"varint,160,opt,name=ServiceStartAt,proto3,oneof" json:"ServiceStartAt,omitempty"`
	StartMode            *v1.GoodStartMode `protobuf:"varint,170,opt,name=StartMode,proto3,enum=basetypes.good.v1.GoodStartMode,oneof" json:"StartMode,omitempty"`
	TestOnly             *bool             `protobuf:"varint,180,opt,name=TestOnly,proto3,oneof" json:"TestOnly,omitempty"`
	BenefitIntervalHours *uint32           `protobuf:"varint,190,opt,name=BenefitIntervalHours,proto3,oneof" json:"BenefitIntervalHours,omitempty"`
	Purchasable          *bool             `protobuf:"varint,200,opt,name=Purchasable,proto3,oneof" json:"Purchasable,omitempty"`
	Online               *bool             `protobuf:"varint,210,opt,name=Online,proto3,oneof" json:"Online,omitempty"`
	State                *v1.GoodState     `protobuf:"varint,221,opt,name=State,proto3,enum=basetypes.good.v1.GoodState,oneof" json:"State,omitempty"`
}

func (x *AdminUpdatePledgeRequest) Reset() {
	*x = AdminUpdatePledgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_pledge_pledge_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminUpdatePledgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminUpdatePledgeRequest) ProtoMessage() {}

func (x *AdminUpdatePledgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_pledge_pledge_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminUpdatePledgeRequest.ProtoReflect.Descriptor instead.
func (*AdminUpdatePledgeRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_pledge_pledge_proto_rawDescGZIP(), []int{3}
}

func (x *AdminUpdatePledgeRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *AdminUpdatePledgeRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *AdminUpdatePledgeRequest) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *AdminUpdatePledgeRequest) GetContractCodeURL() string {
	if x != nil && x.ContractCodeURL != nil {
		return *x.ContractCodeURL
	}
	return ""
}

func (x *AdminUpdatePledgeRequest) GetContractCodeBranch() string {
	if x != nil && x.ContractCodeBranch != nil {
		return *x.ContractCodeBranch
	}
	return ""
}

func (x *AdminUpdatePledgeRequest) GetGoodType() v1.GoodType {
	if x != nil && x.GoodType != nil {
		return *x.GoodType
	}
	return v1.GoodType(0)
}

func (x *AdminUpdatePledgeRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *AdminUpdatePledgeRequest) GetServiceStartAt() uint32 {
	if x != nil && x.ServiceStartAt != nil {
		return *x.ServiceStartAt
	}
	return 0
}

func (x *AdminUpdatePledgeRequest) GetStartMode() v1.GoodStartMode {
	if x != nil && x.StartMode != nil {
		return *x.StartMode
	}
	return v1.GoodStartMode(0)
}

func (x *AdminUpdatePledgeRequest) GetTestOnly() bool {
	if x != nil && x.TestOnly != nil {
		return *x.TestOnly
	}
	return false
}

func (x *AdminUpdatePledgeRequest) GetBenefitIntervalHours() uint32 {
	if x != nil && x.BenefitIntervalHours != nil {
		return *x.BenefitIntervalHours
	}
	return 0
}

func (x *AdminUpdatePledgeRequest) GetPurchasable() bool {
	if x != nil && x.Purchasable != nil {
		return *x.Purchasable
	}
	return false
}

func (x *AdminUpdatePledgeRequest) GetOnline() bool {
	if x != nil && x.Online != nil {
		return *x.Online
	}
	return false
}

func (x *AdminUpdatePledgeRequest) GetState() v1.GoodState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return v1.GoodState(0)
}

type AdminUpdatePledgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Pledge `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *AdminUpdatePledgeResponse) Reset() {
	*x = AdminUpdatePledgeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_pledge_pledge_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminUpdatePledgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminUpdatePledgeResponse) ProtoMessage() {}

func (x *AdminUpdatePledgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_pledge_pledge_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminUpdatePledgeResponse.ProtoReflect.Descriptor instead.
func (*AdminUpdatePledgeResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_pledge_pledge_proto_rawDescGZIP(), []int{4}
}

func (x *AdminUpdatePledgeResponse) GetInfo() *Pledge {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetPledgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoodID string `protobuf:"bytes,10,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
}

func (x *GetPledgeRequest) Reset() {
	*x = GetPledgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_pledge_pledge_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPledgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPledgeRequest) ProtoMessage() {}

func (x *GetPledgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_pledge_pledge_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPledgeRequest.ProtoReflect.Descriptor instead.
func (*GetPledgeRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_pledge_pledge_proto_rawDescGZIP(), []int{5}
}

func (x *GetPledgeRequest) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

type GetPledgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Pledge `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetPledgeResponse) Reset() {
	*x = GetPledgeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_pledge_pledge_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPledgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPledgeResponse) ProtoMessage() {}

func (x *GetPledgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_pledge_pledge_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPledgeResponse.ProtoReflect.Descriptor instead.
func (*GetPledgeResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_pledge_pledge_proto_rawDescGZIP(), []int{6}
}

func (x *GetPledgeResponse) GetInfo() *Pledge {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetPledgesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int32 `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32 `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetPledgesRequest) Reset() {
	*x = GetPledgesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_pledge_pledge_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPledgesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPledgesRequest) ProtoMessage() {}

func (x *GetPledgesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_pledge_pledge_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPledgesRequest.ProtoReflect.Descriptor instead.
func (*GetPledgesRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_pledge_pledge_proto_rawDescGZIP(), []int{7}
}

func (x *GetPledgesRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetPledgesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetPledgesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Pledge `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32    `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetPledgesResponse) Reset() {
	*x = GetPledgesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_pledge_pledge_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPledgesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPledgesResponse) ProtoMessage() {}

func (x *GetPledgesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_pledge_pledge_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPledgesResponse.ProtoReflect.Descriptor instead.
func (*GetPledgesResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_pledge_pledge_proto_rawDescGZIP(), []int{8}
}

func (x *GetPledgesResponse) GetInfos() []*Pledge {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetPledgesResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type AdminDeletePledgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID     uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID  string `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty"`
	GoodID string `protobuf:"bytes,40,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
}

func (x *AdminDeletePledgeRequest) Reset() {
	*x = AdminDeletePledgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_pledge_pledge_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminDeletePledgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminDeletePledgeRequest) ProtoMessage() {}

func (x *AdminDeletePledgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_pledge_pledge_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminDeletePledgeRequest.ProtoReflect.Descriptor instead.
func (*AdminDeletePledgeRequest) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_pledge_pledge_proto_rawDescGZIP(), []int{9}
}

func (x *AdminDeletePledgeRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *AdminDeletePledgeRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *AdminDeletePledgeRequest) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

type AdminDeletePledgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Pledge `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *AdminDeletePledgeResponse) Reset() {
	*x = AdminDeletePledgeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_good_gw_v1_pledge_pledge_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminDeletePledgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminDeletePledgeResponse) ProtoMessage() {}

func (x *AdminDeletePledgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_good_gw_v1_pledge_pledge_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminDeletePledgeResponse.ProtoReflect.Descriptor instead.
func (*AdminDeletePledgeResponse) Descriptor() ([]byte, []int) {
	return file_npool_good_gw_v1_pledge_pledge_proto_rawDescGZIP(), []int{10}
}

func (x *AdminDeletePledgeResponse) GetInfo() *Pledge {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_good_gw_v1_pledge_pledge_proto protoreflect.FileDescriptor

var file_npool_good_gw_v1_pledge_pledge_proto_rawDesc = []byte{
	0x0a, 0x24, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x67, 0x77, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2f, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x6e, 0x70,
	0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x67, 0x6f,
	0x6f, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x25, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x67, 0x77,
	0x2f, 0x76, 0x31, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x63, 0x6f,
	0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f,
	0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x67, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f,
	0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbc, 0x0b, 0x0a, 0x06, 0x50, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x6f, 0x6f,
	0x64, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49,
	0x44, 0x12, 0x1d, 0x0a, 0x09, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x96,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x23, 0x0a, 0x0c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74,
	0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x2f, 0x0a, 0x12, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x55, 0x6e, 0x69, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xaa, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x69, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65,
	0x72, 0x79, 0x41, 0x74, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x74, 0x12, 0x29, 0x0a, 0x0f, 0x55, 0x6e, 0x69, 0x74, 0x4c,
	0x6f, 0x63, 0x6b, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x55, 0x6e, 0x69, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x44, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x12, 0x56, 0x0a, 0x13, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x13, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x47, 0x6f,
	0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0xd2, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x47, 0x6f, 0x6f, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0xdc, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x42, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0xe6, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0xf0,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x3f, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f,
	0x64, 0x65, 0x18, 0xfa, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f,
	0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x6e,
	0x6c, 0x79, 0x18, 0x84, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x54, 0x65, 0x73, 0x74, 0x4f,
	0x6e, 0x6c, 0x79, 0x12, 0x33, 0x0a, 0x14, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x8e, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x14, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0b, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x98, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x06, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0xa2, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x64,
	0x65, 0x18, 0xac, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x64, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0xad,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x86, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1f, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x0b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23,
	0x0a, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x41, 0x74, 0x18, 0x90,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x41, 0x74, 0x12, 0x47, 0x0a, 0x09, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x73,
	0x18, 0x84, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x31, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x09, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x48, 0x0a, 0x07,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0xb4, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x31, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x29, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x55, 0x52, 0x4c, 0x18, 0xbe, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x55, 0x52,
	0x4c, 0x12, 0x2f, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0xc8, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x12, 0x47, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x18, 0xd2, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x19, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xdc, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x19, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x19, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xe6, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xf2, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xa7, 0x04, 0x0a, 0x18, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x43, 0x6f, 0x64, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x2e,
	0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x37,
	0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x47,
	0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x8c, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x0e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x96,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x09, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x08, 0x54,
	0x65, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01,
	0x52, 0x08, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a,
	0x14, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x48, 0x6f, 0x75, 0x72, 0x73, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x14,
	0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x48,
	0x6f, 0x75, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0b, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52,
	0x0b, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1c, 0x0a, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x04, 0x52, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x42, 0x17, 0x0a,
	0x15, 0x5f, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x50, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x22, 0x4f, 0x0a, 0x19, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x92, 0x06, 0x0a, 0x18, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x2d, 0x0a,
	0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x55, 0x52, 0x4c,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x55, 0x52, 0x4c, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x12,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x12, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x88, 0x01,
	0x01, 0x12, 0x3d, 0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x82, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x48, 0x02, 0x52, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x18, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x03, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0xa0, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x05,
	0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x08, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0xb4, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x06, 0x52, 0x08, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x38, 0x0a, 0x14, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x07, 0x52, 0x14, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0b, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x08, 0x52, 0x0b, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1c, 0x0a, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0xd2, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x09, 0x52, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x38, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0xdd, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x0a,
	0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x55, 0x52, 0x4c, 0x42, 0x15,
	0x0a, 0x13, 0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x54, 0x65, 0x73, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x42, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x48, 0x6f, 0x75,
	0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x4f, 0x0a, 0x19, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2a, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f,
	0x6f, 0x64, 0x49, 0x44, 0x22, 0x47, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x41, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0x60, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0x58, 0x0a, 0x18, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x22, 0x4f, 0x0a, 0x19,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0xe4, 0x05,
	0x0a, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x9c, 0x01, 0x0a, 0x11, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x12,
	0x30, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x22,
	0x17, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x2f, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x12, 0x9c, 0x01, 0x0a, 0x11, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x12, 0x30,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x22, 0x17,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x2f, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x12, 0x7b, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x50, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x12, 0x28, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x13, 0x3a, 0x01, 0x2a, 0x22, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x70, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x12, 0x7f, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x73, 0x12, 0x29, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x14, 0x3a, 0x01, 0x2a, 0x22, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x70, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x73, 0x12, 0x9c, 0x01, 0x0a, 0x11, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x12, 0x30, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x01, 0x2a, 0x22, 0x17, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2f, 0x70, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67,
	0x6f, 0x6f, 0x64, 0x2f, 0x67, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_good_gw_v1_pledge_pledge_proto_rawDescOnce sync.Once
	file_npool_good_gw_v1_pledge_pledge_proto_rawDescData = file_npool_good_gw_v1_pledge_pledge_proto_rawDesc
)

func file_npool_good_gw_v1_pledge_pledge_proto_rawDescGZIP() []byte {
	file_npool_good_gw_v1_pledge_pledge_proto_rawDescOnce.Do(func() {
		file_npool_good_gw_v1_pledge_pledge_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_good_gw_v1_pledge_pledge_proto_rawDescData)
	})
	return file_npool_good_gw_v1_pledge_pledge_proto_rawDescData
}

var file_npool_good_gw_v1_pledge_pledge_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_npool_good_gw_v1_pledge_pledge_proto_goTypes = []interface{}{
	(*Pledge)(nil),                    // 0: good.gateway.pledge.v1.Pledge
	(*AdminCreatePledgeRequest)(nil),  // 1: good.gateway.pledge.v1.AdminCreatePledgeRequest
	(*AdminCreatePledgeResponse)(nil), // 2: good.gateway.pledge.v1.AdminCreatePledgeResponse
	(*AdminUpdatePledgeRequest)(nil),  // 3: good.gateway.pledge.v1.AdminUpdatePledgeRequest
	(*AdminUpdatePledgeResponse)(nil), // 4: good.gateway.pledge.v1.AdminUpdatePledgeResponse
	(*GetPledgeRequest)(nil),          // 5: good.gateway.pledge.v1.GetPledgeRequest
	(*GetPledgeResponse)(nil),         // 6: good.gateway.pledge.v1.GetPledgeResponse
	(*GetPledgesRequest)(nil),         // 7: good.gateway.pledge.v1.GetPledgesRequest
	(*GetPledgesResponse)(nil),        // 8: good.gateway.pledge.v1.GetPledgesResponse
	(*AdminDeletePledgeRequest)(nil),  // 9: good.gateway.pledge.v1.AdminDeletePledgeRequest
	(*AdminDeletePledgeResponse)(nil), // 10: good.gateway.pledge.v1.AdminDeletePledgeResponse
	(v1.GoodDurationType)(0),          // 11: basetypes.good.v1.GoodDurationType
	(v1.GoodType)(0),                  // 12: basetypes.good.v1.GoodType
	(v1.BenefitType)(0),               // 13: basetypes.good.v1.BenefitType
	(v1.GoodStartMode)(0),             // 14: basetypes.good.v1.GoodStartMode
	(v1.GoodStockMode)(0),             // 15: basetypes.good.v1.GoodStockMode
	(v1.GoodState)(0),                 // 16: basetypes.good.v1.GoodState
	(v1.BenefitState)(0),              // 17: basetypes.good.v1.BenefitState
	(*coin.GoodCoinInfo)(nil),         // 18: good.gateway.good1.coin.v1.GoodCoinInfo
	(*reward.RewardInfo)(nil),         // 19: good.gateway.good1.coin.reward.v1.RewardInfo
	(v1.ContractState)(0),             // 20: basetypes.good.v1.ContractState
}
var file_npool_good_gw_v1_pledge_pledge_proto_depIdxs = []int32{
	11, // 0: good.gateway.pledge.v1.Pledge.DurationDisplayType:type_name -> basetypes.good.v1.GoodDurationType
	12, // 1: good.gateway.pledge.v1.Pledge.GoodType:type_name -> basetypes.good.v1.GoodType
	13, // 2: good.gateway.pledge.v1.Pledge.BenefitType:type_name -> basetypes.good.v1.BenefitType
	14, // 3: good.gateway.pledge.v1.Pledge.StartMode:type_name -> basetypes.good.v1.GoodStartMode
	15, // 4: good.gateway.pledge.v1.Pledge.StockMode:type_name -> basetypes.good.v1.GoodStockMode
	16, // 5: good.gateway.pledge.v1.Pledge.State:type_name -> basetypes.good.v1.GoodState
	17, // 6: good.gateway.pledge.v1.Pledge.RewardState:type_name -> basetypes.good.v1.BenefitState
	18, // 7: good.gateway.pledge.v1.Pledge.GoodCoins:type_name -> good.gateway.good1.coin.v1.GoodCoinInfo
	19, // 8: good.gateway.pledge.v1.Pledge.Rewards:type_name -> good.gateway.good1.coin.reward.v1.RewardInfo
	20, // 9: good.gateway.pledge.v1.Pledge.ContractState:type_name -> basetypes.good.v1.ContractState
	12, // 10: good.gateway.pledge.v1.AdminCreatePledgeRequest.GoodType:type_name -> basetypes.good.v1.GoodType
	14, // 11: good.gateway.pledge.v1.AdminCreatePledgeRequest.StartMode:type_name -> basetypes.good.v1.GoodStartMode
	0,  // 12: good.gateway.pledge.v1.AdminCreatePledgeResponse.Info:type_name -> good.gateway.pledge.v1.Pledge
	12, // 13: good.gateway.pledge.v1.AdminUpdatePledgeRequest.GoodType:type_name -> basetypes.good.v1.GoodType
	14, // 14: good.gateway.pledge.v1.AdminUpdatePledgeRequest.StartMode:type_name -> basetypes.good.v1.GoodStartMode
	16, // 15: good.gateway.pledge.v1.AdminUpdatePledgeRequest.State:type_name -> basetypes.good.v1.GoodState
	0,  // 16: good.gateway.pledge.v1.AdminUpdatePledgeResponse.Info:type_name -> good.gateway.pledge.v1.Pledge
	0,  // 17: good.gateway.pledge.v1.GetPledgeResponse.Info:type_name -> good.gateway.pledge.v1.Pledge
	0,  // 18: good.gateway.pledge.v1.GetPledgesResponse.Infos:type_name -> good.gateway.pledge.v1.Pledge
	0,  // 19: good.gateway.pledge.v1.AdminDeletePledgeResponse.Info:type_name -> good.gateway.pledge.v1.Pledge
	1,  // 20: good.gateway.pledge.v1.Gateway.AdminCreatePledge:input_type -> good.gateway.pledge.v1.AdminCreatePledgeRequest
	3,  // 21: good.gateway.pledge.v1.Gateway.AdminUpdatePledge:input_type -> good.gateway.pledge.v1.AdminUpdatePledgeRequest
	5,  // 22: good.gateway.pledge.v1.Gateway.GetPledge:input_type -> good.gateway.pledge.v1.GetPledgeRequest
	7,  // 23: good.gateway.pledge.v1.Gateway.GetPledges:input_type -> good.gateway.pledge.v1.GetPledgesRequest
	9,  // 24: good.gateway.pledge.v1.Gateway.AdminDeletePledge:input_type -> good.gateway.pledge.v1.AdminDeletePledgeRequest
	2,  // 25: good.gateway.pledge.v1.Gateway.AdminCreatePledge:output_type -> good.gateway.pledge.v1.AdminCreatePledgeResponse
	4,  // 26: good.gateway.pledge.v1.Gateway.AdminUpdatePledge:output_type -> good.gateway.pledge.v1.AdminUpdatePledgeResponse
	6,  // 27: good.gateway.pledge.v1.Gateway.GetPledge:output_type -> good.gateway.pledge.v1.GetPledgeResponse
	8,  // 28: good.gateway.pledge.v1.Gateway.GetPledges:output_type -> good.gateway.pledge.v1.GetPledgesResponse
	10, // 29: good.gateway.pledge.v1.Gateway.AdminDeletePledge:output_type -> good.gateway.pledge.v1.AdminDeletePledgeResponse
	25, // [25:30] is the sub-list for method output_type
	20, // [20:25] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_npool_good_gw_v1_pledge_pledge_proto_init() }
func file_npool_good_gw_v1_pledge_pledge_proto_init() {
	if File_npool_good_gw_v1_pledge_pledge_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_good_gw_v1_pledge_pledge_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pledge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_pledge_pledge_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminCreatePledgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_pledge_pledge_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminCreatePledgeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_pledge_pledge_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminUpdatePledgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_pledge_pledge_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminUpdatePledgeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_pledge_pledge_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPledgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_pledge_pledge_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPledgeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_pledge_pledge_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPledgesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_pledge_pledge_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPledgesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_pledge_pledge_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminDeletePledgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_good_gw_v1_pledge_pledge_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminDeletePledgeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_good_gw_v1_pledge_pledge_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_npool_good_gw_v1_pledge_pledge_proto_msgTypes[3].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_good_gw_v1_pledge_pledge_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_good_gw_v1_pledge_pledge_proto_goTypes,
		DependencyIndexes: file_npool_good_gw_v1_pledge_pledge_proto_depIdxs,
		MessageInfos:      file_npool_good_gw_v1_pledge_pledge_proto_msgTypes,
	}.Build()
	File_npool_good_gw_v1_pledge_pledge_proto = out.File
	file_npool_good_gw_v1_pledge_pledge_proto_rawDesc = nil
	file_npool_good_gw_v1_pledge_pledge_proto_goTypes = nil
	file_npool_good_gw_v1_pledge_pledge_proto_depIdxs = nil
}
