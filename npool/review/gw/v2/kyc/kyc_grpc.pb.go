// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: npool/review/gw/v2/kyc/kyc.proto

package kyc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	GetKycReviews(ctx context.Context, in *GetKycReviewsRequest, opts ...grpc.CallOption) (*GetKycReviewsResponse, error)
	GetAppKycReviews(ctx context.Context, in *GetAppKycReviewsRequest, opts ...grpc.CallOption) (*GetAppKycReviewsResponse, error)
	UpdateKycReview(ctx context.Context, in *UpdateKycReviewRequest, opts ...grpc.CallOption) (*UpdateKycReviewResponse, error)
	UpdateAppKycReview(ctx context.Context, in *UpdateAppKycReviewRequest, opts ...grpc.CallOption) (*UpdateAppKycReviewResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) GetKycReviews(ctx context.Context, in *GetKycReviewsRequest, opts ...grpc.CallOption) (*GetKycReviewsResponse, error) {
	out := new(GetKycReviewsResponse)
	err := c.cc.Invoke(ctx, "/review.gateway.kyc.v2.Gateway/GetKycReviews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetAppKycReviews(ctx context.Context, in *GetAppKycReviewsRequest, opts ...grpc.CallOption) (*GetAppKycReviewsResponse, error) {
	out := new(GetAppKycReviewsResponse)
	err := c.cc.Invoke(ctx, "/review.gateway.kyc.v2.Gateway/GetAppKycReviews", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdateKycReview(ctx context.Context, in *UpdateKycReviewRequest, opts ...grpc.CallOption) (*UpdateKycReviewResponse, error) {
	out := new(UpdateKycReviewResponse)
	err := c.cc.Invoke(ctx, "/review.gateway.kyc.v2.Gateway/UpdateKycReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdateAppKycReview(ctx context.Context, in *UpdateAppKycReviewRequest, opts ...grpc.CallOption) (*UpdateAppKycReviewResponse, error) {
	out := new(UpdateAppKycReviewResponse)
	err := c.cc.Invoke(ctx, "/review.gateway.kyc.v2.Gateway/UpdateAppKycReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	GetKycReviews(context.Context, *GetKycReviewsRequest) (*GetKycReviewsResponse, error)
	GetAppKycReviews(context.Context, *GetAppKycReviewsRequest) (*GetAppKycReviewsResponse, error)
	UpdateKycReview(context.Context, *UpdateKycReviewRequest) (*UpdateKycReviewResponse, error)
	UpdateAppKycReview(context.Context, *UpdateAppKycReviewRequest) (*UpdateAppKycReviewResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) GetKycReviews(context.Context, *GetKycReviewsRequest) (*GetKycReviewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKycReviews not implemented")
}
func (UnimplementedGatewayServer) GetAppKycReviews(context.Context, *GetAppKycReviewsRequest) (*GetAppKycReviewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppKycReviews not implemented")
}
func (UnimplementedGatewayServer) UpdateKycReview(context.Context, *UpdateKycReviewRequest) (*UpdateKycReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKycReview not implemented")
}
func (UnimplementedGatewayServer) UpdateAppKycReview(context.Context, *UpdateAppKycReviewRequest) (*UpdateAppKycReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppKycReview not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_GetKycReviews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKycReviewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetKycReviews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/review.gateway.kyc.v2.Gateway/GetKycReviews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetKycReviews(ctx, req.(*GetKycReviewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetAppKycReviews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppKycReviewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetAppKycReviews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/review.gateway.kyc.v2.Gateway/GetAppKycReviews",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetAppKycReviews(ctx, req.(*GetAppKycReviewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdateKycReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKycReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateKycReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/review.gateway.kyc.v2.Gateway/UpdateKycReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateKycReview(ctx, req.(*UpdateKycReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdateAppKycReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppKycReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateAppKycReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/review.gateway.kyc.v2.Gateway/UpdateAppKycReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateAppKycReview(ctx, req.(*UpdateAppKycReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "review.gateway.kyc.v2.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetKycReviews",
			Handler:    _Gateway_GetKycReviews_Handler,
		},
		{
			MethodName: "GetAppKycReviews",
			Handler:    _Gateway_GetAppKycReviews_Handler,
		},
		{
			MethodName: "UpdateKycReview",
			Handler:    _Gateway_UpdateKycReview_Handler,
		},
		{
			MethodName: "UpdateAppKycReview",
			Handler:    _Gateway_UpdateAppKycReview_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/review/gw/v2/kyc/kyc.proto",
}
