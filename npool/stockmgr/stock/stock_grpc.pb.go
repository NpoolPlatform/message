// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/stockmgr/stock/stock.proto

package stock

import (
	context "context"
	npool "github.com/NpoolPlatform/message/npool"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StockManagerClient is the client API for StockManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StockManagerClient interface {
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*npool.VersionResponse, error)
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
}

type stockManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewStockManagerClient(cc grpc.ClientConnInterface) StockManagerClient {
	return &stockManagerClient{cc}
}

func (c *stockManagerClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*npool.VersionResponse, error) {
	out := new(npool.VersionResponse)
	err := c.cc.Invoke(ctx, "/stock.manager.stock.v1.StockManager/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockManagerClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/stock.manager.stock.v1.StockManager/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StockManagerServer is the server API for StockManager service.
// All implementations must embed UnimplementedStockManagerServer
// for forward compatibility
type StockManagerServer interface {
	Version(context.Context, *emptypb.Empty) (*npool.VersionResponse, error)
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	mustEmbedUnimplementedStockManagerServer()
}

// UnimplementedStockManagerServer must be embedded to have forward compatible implementations.
type UnimplementedStockManagerServer struct {
}

func (UnimplementedStockManagerServer) Version(context.Context, *emptypb.Empty) (*npool.VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedStockManagerServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedStockManagerServer) mustEmbedUnimplementedStockManagerServer() {}

// UnsafeStockManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StockManagerServer will
// result in compilation errors.
type UnsafeStockManagerServer interface {
	mustEmbedUnimplementedStockManagerServer()
}

func RegisterStockManagerServer(s grpc.ServiceRegistrar, srv StockManagerServer) {
	s.RegisterService(&StockManager_ServiceDesc, srv)
}

func _StockManager_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockManagerServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stock.manager.stock.v1.StockManager/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockManagerServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockManager_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockManagerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stock.manager.stock.v1.StockManager/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockManagerServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StockManager_ServiceDesc is the grpc.ServiceDesc for StockManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StockManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stock.manager.stock.v1.StockManager",
	HandlerType: (*StockManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _StockManager_Version_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _StockManager_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/stockmgr/stock/stock.proto",
}
