syntax = "proto3";

package stock.manager.v1;

option go_package = "github.com/NpoolPlatform/message/npool/stockmgr";

import "google/protobuf/struct.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "npool/npool.proto";

service StockManager {
    rpc Version (google.protobuf.Empty) returns (npool.v1.VersionResponse){
        option (google.api.http) = {
            post: "/version"
            body: "*"
        };
    }

    rpc CreateStock (CreateStockRequest) returns (CreateStockResponse) {
        option (google.api.http) = {
            post: "/v1/create/stock"
            body: "*"
        };
    }

    rpc CreateStocks (CreateStocksRequest) returns (CreateStocksResponse) {
        option (google.api.http) = {
            post: "/v1/create/stocks"
            body: "*"
        };
    }

    rpc UpdateStock (UpdateStockRequest) returns (UpdateStockResponse) {
        option (google.api.http) = {
            post: "/v1/update/stock"
            body: "*"
        };
    }

    rpc UpdateStockFields (UpdateStockFieldsRequest) returns (UpdateStockFieldsResponse) {
        option (google.api.http) = {
            post: "/v1/update/stock/fields"
            body: "*"
        };
    }

    rpc AtomicUpdateStockFields (AtomicUpdateStockFieldsRequest) returns (AtomicUpdateStockFieldsResponse) {
        option (google.api.http) = {
            post: "/v1/atomic/update/stock/fields"
            body: "*"
        };
    }

    rpc ExistStock (ExistStockRequest) returns (ExistStockResponse) {
        option (google.api.http) = {
            post: "/v1/exist/stock"
            body: "*"
        };
    }

    rpc CountStocks (CountStocksRequest) returns (CountStocksResponse) {
        option (google.api.http) = {
            post: "/v1/count/stocks"
            body: "*"
        };
    }

    rpc DeleteStock (DeleteStockRequest) returns (DeleteStockResponse) {
        option (google.api.http) = {
            post: "/v1/delete/stock"
            body: "*"
        };
    }
}

message Stock {
    string ID = 10;
    string GoodID = 20;
    uint32 Total = 30;
    uint32 InService = 40;
    uint32 Sold = 50;
}

message CreateStockRequest {
    Stock Info = 10;
}

message CreateStockResponse {
    Stock Info = 10;
}

message CreateStocksRequest {
    repeated Stock Infos = 10;
}

message CreateStocksResponse {
    repeated Stock Infos = 10;
}

message UpdateStockRequest {
    Stock Info = 10;
}

message UpdateStockResponse {
    Stock Info = 10;
}

message UpdateStockFieldsRequest {
    string ID = 10;
    map<string, google.protobuf.Value> Fields = 20;
}

message UpdateStockFieldsResponse {
    Stock Info = 10;
}

message AtomicUpdateStockFieldsRequest {
    string ID = 10;
    map<string, google.protobuf.Value> Fields = 20;
}

message AtomicUpdateStockFieldsResponse {
    Stock Info = 10;
}

message ExistStockRequest {
    map<string, google.protobuf.Value> Fields = 10;
}

message ExistStockResponse {
    bool Result = 10;
}

message CountStocksRequest {
    map<string, google.protobuf.Value> Fields = 10;
}

message CountStocksResponse {
    uint32 Result = 10;
}

message DeleteStockRequest {
    string ID = 10;
}

message DeleteStockResponse {
    Stock Info = 10;
}
