// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/billing/gw/v1/credit/exchange/exchange.proto

package exchange

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gateway_AdminCreateExchange_FullMethodName = "/billing.gateway.credit.exchange.v1.Gateway/AdminCreateExchange"
	Gateway_AdminUpdateExchange_FullMethodName = "/billing.gateway.credit.exchange.v1.Gateway/AdminUpdateExchange"
	Gateway_GetExchange_FullMethodName         = "/billing.gateway.credit.exchange.v1.Gateway/GetExchange"
	Gateway_GetExchanges_FullMethodName        = "/billing.gateway.credit.exchange.v1.Gateway/GetExchanges"
	Gateway_GetExchangesCount_FullMethodName   = "/billing.gateway.credit.exchange.v1.Gateway/GetExchangesCount"
	Gateway_AdminDeleteExchange_FullMethodName = "/billing.gateway.credit.exchange.v1.Gateway/AdminDeleteExchange"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	AdminCreateExchange(ctx context.Context, in *AdminCreateExchangeRequest, opts ...grpc.CallOption) (*AdminCreateExchangeResponse, error)
	AdminUpdateExchange(ctx context.Context, in *AdminUpdateExchangeRequest, opts ...grpc.CallOption) (*AdminUpdateExchangeResponse, error)
	GetExchange(ctx context.Context, in *GetExchangeRequest, opts ...grpc.CallOption) (*GetExchangeResponse, error)
	GetExchanges(ctx context.Context, in *GetExchangesRequest, opts ...grpc.CallOption) (*GetExchangesResponse, error)
	GetExchangesCount(ctx context.Context, in *GetExchangesCountRequest, opts ...grpc.CallOption) (*GetExchangesCountResponse, error)
	AdminDeleteExchange(ctx context.Context, in *AdminDeleteExchangeRequest, opts ...grpc.CallOption) (*AdminDeleteExchangeResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) AdminCreateExchange(ctx context.Context, in *AdminCreateExchangeRequest, opts ...grpc.CallOption) (*AdminCreateExchangeResponse, error) {
	out := new(AdminCreateExchangeResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminCreateExchange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminUpdateExchange(ctx context.Context, in *AdminUpdateExchangeRequest, opts ...grpc.CallOption) (*AdminUpdateExchangeResponse, error) {
	out := new(AdminUpdateExchangeResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminUpdateExchange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetExchange(ctx context.Context, in *GetExchangeRequest, opts ...grpc.CallOption) (*GetExchangeResponse, error) {
	out := new(GetExchangeResponse)
	err := c.cc.Invoke(ctx, Gateway_GetExchange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetExchanges(ctx context.Context, in *GetExchangesRequest, opts ...grpc.CallOption) (*GetExchangesResponse, error) {
	out := new(GetExchangesResponse)
	err := c.cc.Invoke(ctx, Gateway_GetExchanges_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetExchangesCount(ctx context.Context, in *GetExchangesCountRequest, opts ...grpc.CallOption) (*GetExchangesCountResponse, error) {
	out := new(GetExchangesCountResponse)
	err := c.cc.Invoke(ctx, Gateway_GetExchangesCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminDeleteExchange(ctx context.Context, in *AdminDeleteExchangeRequest, opts ...grpc.CallOption) (*AdminDeleteExchangeResponse, error) {
	out := new(AdminDeleteExchangeResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminDeleteExchange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	AdminCreateExchange(context.Context, *AdminCreateExchangeRequest) (*AdminCreateExchangeResponse, error)
	AdminUpdateExchange(context.Context, *AdminUpdateExchangeRequest) (*AdminUpdateExchangeResponse, error)
	GetExchange(context.Context, *GetExchangeRequest) (*GetExchangeResponse, error)
	GetExchanges(context.Context, *GetExchangesRequest) (*GetExchangesResponse, error)
	GetExchangesCount(context.Context, *GetExchangesCountRequest) (*GetExchangesCountResponse, error)
	AdminDeleteExchange(context.Context, *AdminDeleteExchangeRequest) (*AdminDeleteExchangeResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) AdminCreateExchange(context.Context, *AdminCreateExchangeRequest) (*AdminCreateExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCreateExchange not implemented")
}
func (UnimplementedGatewayServer) AdminUpdateExchange(context.Context, *AdminUpdateExchangeRequest) (*AdminUpdateExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateExchange not implemented")
}
func (UnimplementedGatewayServer) GetExchange(context.Context, *GetExchangeRequest) (*GetExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExchange not implemented")
}
func (UnimplementedGatewayServer) GetExchanges(context.Context, *GetExchangesRequest) (*GetExchangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExchanges not implemented")
}
func (UnimplementedGatewayServer) GetExchangesCount(context.Context, *GetExchangesCountRequest) (*GetExchangesCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExchangesCount not implemented")
}
func (UnimplementedGatewayServer) AdminDeleteExchange(context.Context, *AdminDeleteExchangeRequest) (*AdminDeleteExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDeleteExchange not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_AdminCreateExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCreateExchangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminCreateExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminCreateExchange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminCreateExchange(ctx, req.(*AdminCreateExchangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminUpdateExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateExchangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminUpdateExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminUpdateExchange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminUpdateExchange(ctx, req.(*AdminUpdateExchangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExchangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetExchange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetExchange(ctx, req.(*GetExchangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetExchanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExchangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetExchanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetExchanges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetExchanges(ctx, req.(*GetExchangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetExchangesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExchangesCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetExchangesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetExchangesCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetExchangesCount(ctx, req.(*GetExchangesCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminDeleteExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDeleteExchangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminDeleteExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminDeleteExchange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminDeleteExchange(ctx, req.(*AdminDeleteExchangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "billing.gateway.credit.exchange.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AdminCreateExchange",
			Handler:    _Gateway_AdminCreateExchange_Handler,
		},
		{
			MethodName: "AdminUpdateExchange",
			Handler:    _Gateway_AdminUpdateExchange_Handler,
		},
		{
			MethodName: "GetExchange",
			Handler:    _Gateway_GetExchange_Handler,
		},
		{
			MethodName: "GetExchanges",
			Handler:    _Gateway_GetExchanges_Handler,
		},
		{
			MethodName: "GetExchangesCount",
			Handler:    _Gateway_GetExchangesCount_Handler,
		},
		{
			MethodName: "AdminDeleteExchange",
			Handler:    _Gateway_AdminDeleteExchange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/billing/gw/v1/credit/exchange/exchange.proto",
}
