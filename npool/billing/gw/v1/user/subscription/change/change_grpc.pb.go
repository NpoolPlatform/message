// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/billing/gw/v1/user/subscription/change/change.proto

package change

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gateway_GetSubscriptionChange_FullMethodName    = "/billing.gateway.user.subscription.change.v1.Gateway/GetSubscriptionChange"
	Gateway_GetSubscriptionChanges_FullMethodName   = "/billing.gateway.user.subscription.change.v1.Gateway/GetSubscriptionChanges"
	Gateway_CountSubscriptionChanges_FullMethodName = "/billing.gateway.user.subscription.change.v1.Gateway/CountSubscriptionChanges"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	GetSubscriptionChange(ctx context.Context, in *GetSubscriptionChangeRequest, opts ...grpc.CallOption) (*GetSubscriptionChangeResponse, error)
	GetSubscriptionChanges(ctx context.Context, in *GetSubscriptionChangesRequest, opts ...grpc.CallOption) (*GetSubscriptionChangesResponse, error)
	CountSubscriptionChanges(ctx context.Context, in *CountSubscriptionChangesRequest, opts ...grpc.CallOption) (*CountSubscriptionChangesResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) GetSubscriptionChange(ctx context.Context, in *GetSubscriptionChangeRequest, opts ...grpc.CallOption) (*GetSubscriptionChangeResponse, error) {
	out := new(GetSubscriptionChangeResponse)
	err := c.cc.Invoke(ctx, Gateway_GetSubscriptionChange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetSubscriptionChanges(ctx context.Context, in *GetSubscriptionChangesRequest, opts ...grpc.CallOption) (*GetSubscriptionChangesResponse, error) {
	out := new(GetSubscriptionChangesResponse)
	err := c.cc.Invoke(ctx, Gateway_GetSubscriptionChanges_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) CountSubscriptionChanges(ctx context.Context, in *CountSubscriptionChangesRequest, opts ...grpc.CallOption) (*CountSubscriptionChangesResponse, error) {
	out := new(CountSubscriptionChangesResponse)
	err := c.cc.Invoke(ctx, Gateway_CountSubscriptionChanges_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	GetSubscriptionChange(context.Context, *GetSubscriptionChangeRequest) (*GetSubscriptionChangeResponse, error)
	GetSubscriptionChanges(context.Context, *GetSubscriptionChangesRequest) (*GetSubscriptionChangesResponse, error)
	CountSubscriptionChanges(context.Context, *CountSubscriptionChangesRequest) (*CountSubscriptionChangesResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) GetSubscriptionChange(context.Context, *GetSubscriptionChangeRequest) (*GetSubscriptionChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriptionChange not implemented")
}
func (UnimplementedGatewayServer) GetSubscriptionChanges(context.Context, *GetSubscriptionChangesRequest) (*GetSubscriptionChangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriptionChanges not implemented")
}
func (UnimplementedGatewayServer) CountSubscriptionChanges(context.Context, *CountSubscriptionChangesRequest) (*CountSubscriptionChangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountSubscriptionChanges not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_GetSubscriptionChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriptionChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetSubscriptionChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetSubscriptionChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetSubscriptionChange(ctx, req.(*GetSubscriptionChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetSubscriptionChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriptionChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetSubscriptionChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetSubscriptionChanges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetSubscriptionChanges(ctx, req.(*GetSubscriptionChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_CountSubscriptionChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountSubscriptionChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CountSubscriptionChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_CountSubscriptionChanges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CountSubscriptionChanges(ctx, req.(*CountSubscriptionChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "billing.gateway.user.subscription.change.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSubscriptionChange",
			Handler:    _Gateway_GetSubscriptionChange_Handler,
		},
		{
			MethodName: "GetSubscriptionChanges",
			Handler:    _Gateway_GetSubscriptionChanges_Handler,
		},
		{
			MethodName: "CountSubscriptionChanges",
			Handler:    _Gateway_CountSubscriptionChanges_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/billing/gw/v1/user/subscription/change/change.proto",
}
