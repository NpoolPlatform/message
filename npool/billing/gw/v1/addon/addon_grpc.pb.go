// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/billing/gw/v1/addon/addon.proto

package addon

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gateway_AdminCreateAddon_FullMethodName = "/billing.gateway.addon.v1.Gateway/AdminCreateAddon"
	Gateway_AdminUpdateAddon_FullMethodName = "/billing.gateway.addon.v1.Gateway/AdminUpdateAddon"
	Gateway_GetAddon_FullMethodName         = "/billing.gateway.addon.v1.Gateway/GetAddon"
	Gateway_GetAddons_FullMethodName        = "/billing.gateway.addon.v1.Gateway/GetAddons"
	Gateway_CountAddons_FullMethodName      = "/billing.gateway.addon.v1.Gateway/CountAddons"
	Gateway_AdminDeleteAddon_FullMethodName = "/billing.gateway.addon.v1.Gateway/AdminDeleteAddon"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	AdminCreateAddon(ctx context.Context, in *AdminCreateAddonRequest, opts ...grpc.CallOption) (*AdminCreateAddonResponse, error)
	AdminUpdateAddon(ctx context.Context, in *AdminUpdateAddonRequest, opts ...grpc.CallOption) (*AdminUpdateAddonResponse, error)
	GetAddon(ctx context.Context, in *GetAddonRequest, opts ...grpc.CallOption) (*GetAddonResponse, error)
	GetAddons(ctx context.Context, in *GetAddonsRequest, opts ...grpc.CallOption) (*GetAddonsResponse, error)
	CountAddons(ctx context.Context, in *CountAddonsRequest, opts ...grpc.CallOption) (*CountAddonsResponse, error)
	AdminDeleteAddon(ctx context.Context, in *AdminDeleteAddonRequest, opts ...grpc.CallOption) (*AdminDeleteAddonResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) AdminCreateAddon(ctx context.Context, in *AdminCreateAddonRequest, opts ...grpc.CallOption) (*AdminCreateAddonResponse, error) {
	out := new(AdminCreateAddonResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminCreateAddon_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminUpdateAddon(ctx context.Context, in *AdminUpdateAddonRequest, opts ...grpc.CallOption) (*AdminUpdateAddonResponse, error) {
	out := new(AdminUpdateAddonResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminUpdateAddon_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetAddon(ctx context.Context, in *GetAddonRequest, opts ...grpc.CallOption) (*GetAddonResponse, error) {
	out := new(GetAddonResponse)
	err := c.cc.Invoke(ctx, Gateway_GetAddon_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetAddons(ctx context.Context, in *GetAddonsRequest, opts ...grpc.CallOption) (*GetAddonsResponse, error) {
	out := new(GetAddonsResponse)
	err := c.cc.Invoke(ctx, Gateway_GetAddons_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) CountAddons(ctx context.Context, in *CountAddonsRequest, opts ...grpc.CallOption) (*CountAddonsResponse, error) {
	out := new(CountAddonsResponse)
	err := c.cc.Invoke(ctx, Gateway_CountAddons_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminDeleteAddon(ctx context.Context, in *AdminDeleteAddonRequest, opts ...grpc.CallOption) (*AdminDeleteAddonResponse, error) {
	out := new(AdminDeleteAddonResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminDeleteAddon_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	AdminCreateAddon(context.Context, *AdminCreateAddonRequest) (*AdminCreateAddonResponse, error)
	AdminUpdateAddon(context.Context, *AdminUpdateAddonRequest) (*AdminUpdateAddonResponse, error)
	GetAddon(context.Context, *GetAddonRequest) (*GetAddonResponse, error)
	GetAddons(context.Context, *GetAddonsRequest) (*GetAddonsResponse, error)
	CountAddons(context.Context, *CountAddonsRequest) (*CountAddonsResponse, error)
	AdminDeleteAddon(context.Context, *AdminDeleteAddonRequest) (*AdminDeleteAddonResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) AdminCreateAddon(context.Context, *AdminCreateAddonRequest) (*AdminCreateAddonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCreateAddon not implemented")
}
func (UnimplementedGatewayServer) AdminUpdateAddon(context.Context, *AdminUpdateAddonRequest) (*AdminUpdateAddonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateAddon not implemented")
}
func (UnimplementedGatewayServer) GetAddon(context.Context, *GetAddonRequest) (*GetAddonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddon not implemented")
}
func (UnimplementedGatewayServer) GetAddons(context.Context, *GetAddonsRequest) (*GetAddonsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddons not implemented")
}
func (UnimplementedGatewayServer) CountAddons(context.Context, *CountAddonsRequest) (*CountAddonsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAddons not implemented")
}
func (UnimplementedGatewayServer) AdminDeleteAddon(context.Context, *AdminDeleteAddonRequest) (*AdminDeleteAddonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDeleteAddon not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_AdminCreateAddon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCreateAddonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminCreateAddon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminCreateAddon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminCreateAddon(ctx, req.(*AdminCreateAddonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminUpdateAddon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateAddonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminUpdateAddon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminUpdateAddon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminUpdateAddon(ctx, req.(*AdminUpdateAddonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetAddon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetAddon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetAddon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetAddon(ctx, req.(*GetAddonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetAddons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddonsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetAddons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetAddons_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetAddons(ctx, req.(*GetAddonsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_CountAddons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAddonsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CountAddons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_CountAddons_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CountAddons(ctx, req.(*CountAddonsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminDeleteAddon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDeleteAddonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminDeleteAddon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminDeleteAddon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminDeleteAddon(ctx, req.(*AdminDeleteAddonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "billing.gateway.addon.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AdminCreateAddon",
			Handler:    _Gateway_AdminCreateAddon_Handler,
		},
		{
			MethodName: "AdminUpdateAddon",
			Handler:    _Gateway_AdminUpdateAddon_Handler,
		},
		{
			MethodName: "GetAddon",
			Handler:    _Gateway_GetAddon_Handler,
		},
		{
			MethodName: "GetAddons",
			Handler:    _Gateway_GetAddons_Handler,
		},
		{
			MethodName: "CountAddons",
			Handler:    _Gateway_CountAddons_Handler,
		},
		{
			MethodName: "AdminDeleteAddon",
			Handler:    _Gateway_AdminDeleteAddon_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/billing/gw/v1/addon/addon.proto",
}
