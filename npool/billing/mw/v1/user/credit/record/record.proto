syntax = "proto3";

package billing.middleware.user.credit.record.v1;

option go_package = "github.com/NpoolPlatform/message/npool/billing/mw/v1/user/credit/record";

import "google/api/annotations.proto";
import "npool/basetypes/v1/conds.proto";
import "npool/basetypes/billing/v1/enums.proto";

service Middleware {
    rpc GetRecords(GetRecordsRequest) returns (GetRecordsResponse) {
        option (google.api.http) = {
            post : "/v1/user/credit/billingrecord_GetRecords"
            body : "*"
        };
    }
    rpc GetRecordsCount(GetRecordsCountRequest) returns (GetRecordsCountResponse) {
        option (google.api.http) = {
            post : "/v1/user/credit/billingrecord_GetRecordsCount"
            body : "*"
        };
    }
    rpc GetRecord(GetRecordRequest) returns (GetRecordResponse) {
        option (google.api.http) = {
            post : "/v1/user/credit/billingrecord_GetRecord"
            body : "*"
        };
    }
    rpc ExistRecordConds(ExistRecordCondsRequest)
        returns (ExistRecordCondsResponse) {
        option (google.api.http) = {
            post : "/v1/user/credit/billingrecord_ExistRecordConds"
            body : "*"
        };
    }
    rpc CreateRecords(CreateRecordsRequest)
        returns (CreateRecordsResponse) {
        option (google.api.http) = {
            post : "/v1/user/credit/billingrecord_CreateRecords"
            body : "*"
        };
    }
    rpc DeleteRecords(DeleteRecordsRequest)
        returns (DeleteRecordsResponse) {
        option (google.api.http) = {
            post : "/v1/user/credit/billingrecord_DeleteRecords"
            body : "*"
        };
    }
    rpc CreateRecord(CreateRecordRequest)
        returns (CreateRecordResponse) {
        option (google.api.http) = {
            post : "/v1/user/credit/billingrecord_CreateRecord"
            body : "*"
        };
    }
    rpc DeleteRecord(DeleteRecordRequest)
        returns (DeleteRecordResponse) {
        option (google.api.http) = {
            post : "/v1/user/credit/billingrecord_DeleteRecord"
            body : "*"
        };
    }
}

message RecordReq {
    optional uint32 ID = 10;
    optional string EntID = 20;
    optional string AppID = 30;
    optional string UserID = 40;
    optional basetypes.billing.v1.OperationType OperationType = 50;
    optional string CreditsChange = 60;
    optional string Extra = 70;
}

message Record {
    // @inject_tag: sql:"id"
    uint32 ID = 10;
    // @inject_tag: sql:"ent_id"
    string EntID = 20;
    // @inject_tag: sql:"app_id"
    string AppID = 30;
    // @inject_tag: sql:"user_id"
    string UserID = 40;
    // @inject_tag: sql:"operation_type"
    string OperationTypeStr = 50;
    basetypes.billing.v1.OperationType OperationType = 51;
    // @inject_tag: sql:"credits_change"
    int32 CreditsChange = 60;
    // @inject_tag: sql:"extra"
    string Extra = 70;
    // @inject_tag: sql:"created_at"
    uint32 CreatedAt = 1000;
    // @inject_tag: sql:"updated_at"
    uint32 UpdatedAt = 1010;
}

message Conds {
    optional basetypes.v1.StringVal EntID = 10;
    optional basetypes.v1.StringVal AppID = 20;
    optional basetypes.v1.StringVal UserID = 30;
    optional basetypes.v1.Uint32Val OperationType = 40;
    optional basetypes.v1.StringSliceVal EntIDs = 50;
}

message GetRecordsRequest {
    Conds Conds = 10;
    int32 Offset = 20;
    int32 Limit = 30;
}

message GetRecordsResponse {
    repeated Record Infos = 10;
}

message GetRecordsCountRequest {
    Conds Conds = 10;
    int32 Offset = 20;
    int32 Limit = 30;
}

message GetRecordsCountResponse {
    uint32 Total = 20;
}

message GetRecordRequest { string EntID = 10; }

message GetRecordResponse { Record Info = 10; }

message ExistRecordCondsRequest { Conds Conds = 10; }

message ExistRecordCondsResponse { bool Info = 10; }

message CreateRecordsRequest { repeated RecordReq Infos = 10; }

message CreateRecordsResponse { repeated Record Infos = 10; }

message DeleteRecordsRequest { repeated RecordReq Infos = 10; }

message DeleteRecordsResponse { repeated Record Infos = 10; }

message CreateRecordRequest { RecordReq Info = 10; }

message CreateRecordResponse { Record Info = 10; }

message DeleteRecordRequest { RecordReq Info = 10; }

message DeleteRecordResponse { Record Info = 10; }
