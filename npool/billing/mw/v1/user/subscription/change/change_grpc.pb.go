// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/billing/mw/v1/user/subscription/change/change.proto

package change

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Middleware_GetSubscriptionChanges_FullMethodName       = "/billing.middleware.user.subscription.change.v1.Middleware/GetSubscriptionChanges"
	Middleware_CountSubscriptionChanges_FullMethodName     = "/billing.middleware.user.subscription.change.v1.Middleware/CountSubscriptionChanges"
	Middleware_GetSubscriptionChange_FullMethodName        = "/billing.middleware.user.subscription.change.v1.Middleware/GetSubscriptionChange"
	Middleware_ExistSubscriptionChangeConds_FullMethodName = "/billing.middleware.user.subscription.change.v1.Middleware/ExistSubscriptionChangeConds"
	Middleware_CreateSubscriptionChange_FullMethodName     = "/billing.middleware.user.subscription.change.v1.Middleware/CreateSubscriptionChange"
	Middleware_DeleteSubscriptionChange_FullMethodName     = "/billing.middleware.user.subscription.change.v1.Middleware/DeleteSubscriptionChange"
)

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
	GetSubscriptionChanges(ctx context.Context, in *GetSubscriptionChangesRequest, opts ...grpc.CallOption) (*GetSubscriptionChangesResponse, error)
	CountSubscriptionChanges(ctx context.Context, in *CountSubscriptionChangesRequest, opts ...grpc.CallOption) (*CountSubscriptionChangesResponse, error)
	GetSubscriptionChange(ctx context.Context, in *GetSubscriptionChangeRequest, opts ...grpc.CallOption) (*GetSubscriptionChangeResponse, error)
	ExistSubscriptionChangeConds(ctx context.Context, in *ExistSubscriptionChangeCondsRequest, opts ...grpc.CallOption) (*ExistSubscriptionChangeCondsResponse, error)
	CreateSubscriptionChange(ctx context.Context, in *CreateSubscriptionChangeRequest, opts ...grpc.CallOption) (*CreateSubscriptionChangeResponse, error)
	DeleteSubscriptionChange(ctx context.Context, in *DeleteSubscriptionChangeRequest, opts ...grpc.CallOption) (*DeleteSubscriptionChangeResponse, error)
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) GetSubscriptionChanges(ctx context.Context, in *GetSubscriptionChangesRequest, opts ...grpc.CallOption) (*GetSubscriptionChangesResponse, error) {
	out := new(GetSubscriptionChangesResponse)
	err := c.cc.Invoke(ctx, Middleware_GetSubscriptionChanges_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) CountSubscriptionChanges(ctx context.Context, in *CountSubscriptionChangesRequest, opts ...grpc.CallOption) (*CountSubscriptionChangesResponse, error) {
	out := new(CountSubscriptionChangesResponse)
	err := c.cc.Invoke(ctx, Middleware_CountSubscriptionChanges_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetSubscriptionChange(ctx context.Context, in *GetSubscriptionChangeRequest, opts ...grpc.CallOption) (*GetSubscriptionChangeResponse, error) {
	out := new(GetSubscriptionChangeResponse)
	err := c.cc.Invoke(ctx, Middleware_GetSubscriptionChange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ExistSubscriptionChangeConds(ctx context.Context, in *ExistSubscriptionChangeCondsRequest, opts ...grpc.CallOption) (*ExistSubscriptionChangeCondsResponse, error) {
	out := new(ExistSubscriptionChangeCondsResponse)
	err := c.cc.Invoke(ctx, Middleware_ExistSubscriptionChangeConds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) CreateSubscriptionChange(ctx context.Context, in *CreateSubscriptionChangeRequest, opts ...grpc.CallOption) (*CreateSubscriptionChangeResponse, error) {
	out := new(CreateSubscriptionChangeResponse)
	err := c.cc.Invoke(ctx, Middleware_CreateSubscriptionChange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) DeleteSubscriptionChange(ctx context.Context, in *DeleteSubscriptionChangeRequest, opts ...grpc.CallOption) (*DeleteSubscriptionChangeResponse, error) {
	out := new(DeleteSubscriptionChangeResponse)
	err := c.cc.Invoke(ctx, Middleware_DeleteSubscriptionChange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
	GetSubscriptionChanges(context.Context, *GetSubscriptionChangesRequest) (*GetSubscriptionChangesResponse, error)
	CountSubscriptionChanges(context.Context, *CountSubscriptionChangesRequest) (*CountSubscriptionChangesResponse, error)
	GetSubscriptionChange(context.Context, *GetSubscriptionChangeRequest) (*GetSubscriptionChangeResponse, error)
	ExistSubscriptionChangeConds(context.Context, *ExistSubscriptionChangeCondsRequest) (*ExistSubscriptionChangeCondsResponse, error)
	CreateSubscriptionChange(context.Context, *CreateSubscriptionChangeRequest) (*CreateSubscriptionChangeResponse, error)
	DeleteSubscriptionChange(context.Context, *DeleteSubscriptionChangeRequest) (*DeleteSubscriptionChangeResponse, error)
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) GetSubscriptionChanges(context.Context, *GetSubscriptionChangesRequest) (*GetSubscriptionChangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriptionChanges not implemented")
}
func (UnimplementedMiddlewareServer) CountSubscriptionChanges(context.Context, *CountSubscriptionChangesRequest) (*CountSubscriptionChangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountSubscriptionChanges not implemented")
}
func (UnimplementedMiddlewareServer) GetSubscriptionChange(context.Context, *GetSubscriptionChangeRequest) (*GetSubscriptionChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubscriptionChange not implemented")
}
func (UnimplementedMiddlewareServer) ExistSubscriptionChangeConds(context.Context, *ExistSubscriptionChangeCondsRequest) (*ExistSubscriptionChangeCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistSubscriptionChangeConds not implemented")
}
func (UnimplementedMiddlewareServer) CreateSubscriptionChange(context.Context, *CreateSubscriptionChangeRequest) (*CreateSubscriptionChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSubscriptionChange not implemented")
}
func (UnimplementedMiddlewareServer) DeleteSubscriptionChange(context.Context, *DeleteSubscriptionChangeRequest) (*DeleteSubscriptionChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubscriptionChange not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_GetSubscriptionChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriptionChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetSubscriptionChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetSubscriptionChanges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetSubscriptionChanges(ctx, req.(*GetSubscriptionChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_CountSubscriptionChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountSubscriptionChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CountSubscriptionChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_CountSubscriptionChanges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CountSubscriptionChanges(ctx, req.(*CountSubscriptionChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetSubscriptionChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriptionChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetSubscriptionChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetSubscriptionChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetSubscriptionChange(ctx, req.(*GetSubscriptionChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ExistSubscriptionChangeConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistSubscriptionChangeCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ExistSubscriptionChangeConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_ExistSubscriptionChangeConds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ExistSubscriptionChangeConds(ctx, req.(*ExistSubscriptionChangeCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_CreateSubscriptionChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSubscriptionChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateSubscriptionChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_CreateSubscriptionChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateSubscriptionChange(ctx, req.(*CreateSubscriptionChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_DeleteSubscriptionChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubscriptionChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).DeleteSubscriptionChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_DeleteSubscriptionChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).DeleteSubscriptionChange(ctx, req.(*DeleteSubscriptionChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "billing.middleware.user.subscription.change.v1.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSubscriptionChanges",
			Handler:    _Middleware_GetSubscriptionChanges_Handler,
		},
		{
			MethodName: "CountSubscriptionChanges",
			Handler:    _Middleware_CountSubscriptionChanges_Handler,
		},
		{
			MethodName: "GetSubscriptionChange",
			Handler:    _Middleware_GetSubscriptionChange_Handler,
		},
		{
			MethodName: "ExistSubscriptionChangeConds",
			Handler:    _Middleware_ExistSubscriptionChangeConds_Handler,
		},
		{
			MethodName: "CreateSubscriptionChange",
			Handler:    _Middleware_CreateSubscriptionChange_Handler,
		},
		{
			MethodName: "DeleteSubscriptionChange",
			Handler:    _Middleware_DeleteSubscriptionChange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/billing/mw/v1/user/subscription/change/change.proto",
}
