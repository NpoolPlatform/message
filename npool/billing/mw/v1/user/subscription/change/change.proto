syntax = "proto3";

package billing.middleware.user.subscription.change.v1;

option go_package = "github.com/NpoolPlatform/message/npool/billing/mw/v1/user/subscription/change";

import "google/api/annotations.proto";
import "npool/basetypes/v1/conds.proto";

service Middleware {
    rpc GetSubscriptionChanges(GetSubscriptionChangesRequest) returns (GetSubscriptionChangesResponse) {
        option (google.api.http) = {
            post : "/v1/user/billingsubscription_GetSubscriptionChanges"
            body : "*"
        };
    }
    rpc GetSubscriptionChangesCount(GetSubscriptionChangesCountRequest) returns (GetSubscriptionChangesCountResponse) {
        option (google.api.http) = {
            post : "/v1/user/billingsubscription_GetSubscriptionChangesCount"
            body : "*"
        };
    }
    rpc GetSubscriptionChange(GetSubscriptionChangeRequest) returns (GetSubscriptionChangeResponse) {
        option (google.api.http) = {
            post : "/v1/user/billingsubscription_GetSubscriptionChange"
            body : "*"
        };
    }
    rpc ExistSubscriptionChangeConds(ExistSubscriptionChangeCondsRequest)
        returns (ExistSubscriptionChangeCondsResponse) {
        option (google.api.http) = {
            post : "/v1/user/billingsubscription_ExistSubscriptionChangeConds"
            body : "*"
        };
    }
    rpc CreateSubscriptionChange(CreateSubscriptionChangeRequest)
        returns (CreateSubscriptionChangeResponse) {
        option (google.api.http) = {
            post : "/v1/user/billingsubscription_CreateSubscriptionChange"
            body : "*"
        };
    }
    rpc DeleteSubscriptionChange(DeleteSubscriptionChangeRequest)
        returns (DeleteSubscriptionChangeResponse) {
        option (google.api.http) = {
            post : "/v1/user/billingsubscription_DeleteSubscriptionChange"
            body : "*"
        };
    }
}

message SubscriptionChangeReq {
    optional uint32 ID = 10;
    optional string EntID = 20;
    optional string AppID = 30;
    optional string UserID = 40;
    optional string UserSubscriptionID = 50;
    optional string OldPackageID = 60;
    optional string NewPackageID = 70;
}

message SubscriptionChange {
    // @inject_tag: sql:"id"
    uint32 ID = 10;
    // @inject_tag: sql:"ent_id"
    string EntID = 20;
    // @inject_tag: sql:"app_id"
    string AppID = 30;
    // @inject_tag: sql:"user_id"
    string UserID = 40;
    // @inject_tag: sql:"user_subscription_id"
    string UserSubscriptionID = 50;
    // @inject_tag: sql:"old_package_id"
    uint32 OldPackageID = 60;
    // @inject_tag: sql:"new_package_id"
    uint32 NewPackageID = 70;
    // @inject_tag: sql:"created_at"
    uint32 CreatedAt = 1000;
    // @inject_tag: sql:"updated_at"
    uint32 UpdatedAt = 1010;
}

message Conds {
    optional basetypes.v1.Uint32Val ID = 9;
    optional basetypes.v1.StringVal EntID = 10;
    optional basetypes.v1.StringVal AppID = 20;
    optional basetypes.v1.StringVal UserID = 30;
    optional basetypes.v1.StringVal UserSubscriptionID = 40;
    optional basetypes.v1.StringVal OldPackageID = 50;
    optional basetypes.v1.StringVal NewPackageID = 60;
    optional basetypes.v1.Uint32SliceVal IDs = 1000;
    optional basetypes.v1.StringSliceVal EntIDs = 1010;
}

message GetSubscriptionChangesRequest {
    Conds Conds = 10;
    int32 Offset = 20;
    int32 Limit = 30;
}

message GetSubscriptionChangesResponse {
    repeated SubscriptionChange Infos = 10;
}

message GetSubscriptionChangesCountRequest {
    Conds Conds = 10;
}

message GetSubscriptionChangesCountResponse {
    uint32 Total = 20;
}

message GetSubscriptionChangeRequest { string EntID = 10; }

message GetSubscriptionChangeResponse { SubscriptionChange Info = 10; }

message ExistSubscriptionChangeCondsRequest { Conds Conds = 10; }

message ExistSubscriptionChangeCondsResponse { bool Info = 10; }

message CreateSubscriptionChangeRequest { SubscriptionChangeReq Info = 10; }

message CreateSubscriptionChangeResponse { SubscriptionChange Info = 10; }

message DeleteSubscriptionChangeRequest { SubscriptionChangeReq Info = 10; }

message DeleteSubscriptionChangeResponse { SubscriptionChange Info = 10; }
