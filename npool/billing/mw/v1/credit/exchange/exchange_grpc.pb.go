// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/billing/mw/v1/credit/exchange/exchange.proto

package exchange

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Middleware_GetExchanges_FullMethodName       = "/billing.middleware.credit.exchange.v1.Middleware/GetExchanges"
	Middleware_CountExchanges_FullMethodName     = "/billing.middleware.credit.exchange.v1.Middleware/CountExchanges"
	Middleware_GetExchange_FullMethodName        = "/billing.middleware.credit.exchange.v1.Middleware/GetExchange"
	Middleware_ExistExchangeConds_FullMethodName = "/billing.middleware.credit.exchange.v1.Middleware/ExistExchangeConds"
	Middleware_CreateExchange_FullMethodName     = "/billing.middleware.credit.exchange.v1.Middleware/CreateExchange"
	Middleware_DeleteExchange_FullMethodName     = "/billing.middleware.credit.exchange.v1.Middleware/DeleteExchange"
	Middleware_UpdateExchange_FullMethodName     = "/billing.middleware.credit.exchange.v1.Middleware/UpdateExchange"
)

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
	GetExchanges(ctx context.Context, in *GetExchangesRequest, opts ...grpc.CallOption) (*GetExchangesResponse, error)
	CountExchanges(ctx context.Context, in *CountExchangesRequest, opts ...grpc.CallOption) (*CountExchangesResponse, error)
	GetExchange(ctx context.Context, in *GetExchangeRequest, opts ...grpc.CallOption) (*GetExchangeResponse, error)
	ExistExchangeConds(ctx context.Context, in *ExistExchangeCondsRequest, opts ...grpc.CallOption) (*ExistExchangeCondsResponse, error)
	CreateExchange(ctx context.Context, in *CreateExchangeRequest, opts ...grpc.CallOption) (*CreateExchangeResponse, error)
	DeleteExchange(ctx context.Context, in *DeleteExchangeRequest, opts ...grpc.CallOption) (*DeleteExchangeResponse, error)
	UpdateExchange(ctx context.Context, in *UpdateExchangeRequest, opts ...grpc.CallOption) (*UpdateExchangeResponse, error)
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) GetExchanges(ctx context.Context, in *GetExchangesRequest, opts ...grpc.CallOption) (*GetExchangesResponse, error) {
	out := new(GetExchangesResponse)
	err := c.cc.Invoke(ctx, Middleware_GetExchanges_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) CountExchanges(ctx context.Context, in *CountExchangesRequest, opts ...grpc.CallOption) (*CountExchangesResponse, error) {
	out := new(CountExchangesResponse)
	err := c.cc.Invoke(ctx, Middleware_CountExchanges_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetExchange(ctx context.Context, in *GetExchangeRequest, opts ...grpc.CallOption) (*GetExchangeResponse, error) {
	out := new(GetExchangeResponse)
	err := c.cc.Invoke(ctx, Middleware_GetExchange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ExistExchangeConds(ctx context.Context, in *ExistExchangeCondsRequest, opts ...grpc.CallOption) (*ExistExchangeCondsResponse, error) {
	out := new(ExistExchangeCondsResponse)
	err := c.cc.Invoke(ctx, Middleware_ExistExchangeConds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) CreateExchange(ctx context.Context, in *CreateExchangeRequest, opts ...grpc.CallOption) (*CreateExchangeResponse, error) {
	out := new(CreateExchangeResponse)
	err := c.cc.Invoke(ctx, Middleware_CreateExchange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) DeleteExchange(ctx context.Context, in *DeleteExchangeRequest, opts ...grpc.CallOption) (*DeleteExchangeResponse, error) {
	out := new(DeleteExchangeResponse)
	err := c.cc.Invoke(ctx, Middleware_DeleteExchange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) UpdateExchange(ctx context.Context, in *UpdateExchangeRequest, opts ...grpc.CallOption) (*UpdateExchangeResponse, error) {
	out := new(UpdateExchangeResponse)
	err := c.cc.Invoke(ctx, Middleware_UpdateExchange_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
	GetExchanges(context.Context, *GetExchangesRequest) (*GetExchangesResponse, error)
	CountExchanges(context.Context, *CountExchangesRequest) (*CountExchangesResponse, error)
	GetExchange(context.Context, *GetExchangeRequest) (*GetExchangeResponse, error)
	ExistExchangeConds(context.Context, *ExistExchangeCondsRequest) (*ExistExchangeCondsResponse, error)
	CreateExchange(context.Context, *CreateExchangeRequest) (*CreateExchangeResponse, error)
	DeleteExchange(context.Context, *DeleteExchangeRequest) (*DeleteExchangeResponse, error)
	UpdateExchange(context.Context, *UpdateExchangeRequest) (*UpdateExchangeResponse, error)
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) GetExchanges(context.Context, *GetExchangesRequest) (*GetExchangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExchanges not implemented")
}
func (UnimplementedMiddlewareServer) CountExchanges(context.Context, *CountExchangesRequest) (*CountExchangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountExchanges not implemented")
}
func (UnimplementedMiddlewareServer) GetExchange(context.Context, *GetExchangeRequest) (*GetExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExchange not implemented")
}
func (UnimplementedMiddlewareServer) ExistExchangeConds(context.Context, *ExistExchangeCondsRequest) (*ExistExchangeCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistExchangeConds not implemented")
}
func (UnimplementedMiddlewareServer) CreateExchange(context.Context, *CreateExchangeRequest) (*CreateExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExchange not implemented")
}
func (UnimplementedMiddlewareServer) DeleteExchange(context.Context, *DeleteExchangeRequest) (*DeleteExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExchange not implemented")
}
func (UnimplementedMiddlewareServer) UpdateExchange(context.Context, *UpdateExchangeRequest) (*UpdateExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExchange not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_GetExchanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExchangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetExchanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetExchanges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetExchanges(ctx, req.(*GetExchangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_CountExchanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountExchangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CountExchanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_CountExchanges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CountExchanges(ctx, req.(*CountExchangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExchangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetExchange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetExchange(ctx, req.(*GetExchangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ExistExchangeConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistExchangeCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ExistExchangeConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_ExistExchangeConds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ExistExchangeConds(ctx, req.(*ExistExchangeCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_CreateExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExchangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_CreateExchange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateExchange(ctx, req.(*CreateExchangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_DeleteExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExchangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).DeleteExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_DeleteExchange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).DeleteExchange(ctx, req.(*DeleteExchangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_UpdateExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExchangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).UpdateExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_UpdateExchange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).UpdateExchange(ctx, req.(*UpdateExchangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "billing.middleware.credit.exchange.v1.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetExchanges",
			Handler:    _Middleware_GetExchanges_Handler,
		},
		{
			MethodName: "CountExchanges",
			Handler:    _Middleware_CountExchanges_Handler,
		},
		{
			MethodName: "GetExchange",
			Handler:    _Middleware_GetExchange_Handler,
		},
		{
			MethodName: "ExistExchangeConds",
			Handler:    _Middleware_ExistExchangeConds_Handler,
		},
		{
			MethodName: "CreateExchange",
			Handler:    _Middleware_CreateExchange_Handler,
		},
		{
			MethodName: "DeleteExchange",
			Handler:    _Middleware_DeleteExchange_Handler,
		},
		{
			MethodName: "UpdateExchange",
			Handler:    _Middleware_UpdateExchange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/billing/mw/v1/credit/exchange/exchange.proto",
}
