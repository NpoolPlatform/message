// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/subscribemgr/subscribemgr.proto

package subscribemgr

import (
	context "context"
	npool "github.com/NpoolPlatform/message/npool"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SubscribeManager_Version_FullMethodName                = "/subscribe.manager.v1.SubscribeManager/Version"
	SubscribeManager_CreateEmailSubscriber_FullMethodName  = "/subscribe.manager.v1.SubscribeManager/CreateEmailSubscriber"
	SubscribeManager_CreateEmailSubscribers_FullMethodName = "/subscribe.manager.v1.SubscribeManager/CreateEmailSubscribers"
	SubscribeManager_GetEmailSubscribers_FullMethodName    = "/subscribe.manager.v1.SubscribeManager/GetEmailSubscribers"
	SubscribeManager_GetAppEmailSubscribers_FullMethodName = "/subscribe.manager.v1.SubscribeManager/GetAppEmailSubscribers"
)

// SubscribeManagerClient is the client API for SubscribeManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubscribeManagerClient interface {
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*npool.VersionResponse, error)
	CreateEmailSubscriber(ctx context.Context, in *CreateEmailSubscriberRequest, opts ...grpc.CallOption) (*CreateEmailSubscriberResponse, error)
	CreateEmailSubscribers(ctx context.Context, in *CreateEmailSubscribersRequest, opts ...grpc.CallOption) (*CreateEmailSubscribersResponse, error)
	GetEmailSubscribers(ctx context.Context, in *GetEmailSubscribersRequest, opts ...grpc.CallOption) (*GetEmailSubscribersResponse, error)
	GetAppEmailSubscribers(ctx context.Context, in *GetAppEmailSubscribersRequest, opts ...grpc.CallOption) (*GetAppEmailSubscribersResponse, error)
}

type subscribeManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscribeManagerClient(cc grpc.ClientConnInterface) SubscribeManagerClient {
	return &subscribeManagerClient{cc}
}

func (c *subscribeManagerClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*npool.VersionResponse, error) {
	out := new(npool.VersionResponse)
	err := c.cc.Invoke(ctx, SubscribeManager_Version_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscribeManagerClient) CreateEmailSubscriber(ctx context.Context, in *CreateEmailSubscriberRequest, opts ...grpc.CallOption) (*CreateEmailSubscriberResponse, error) {
	out := new(CreateEmailSubscriberResponse)
	err := c.cc.Invoke(ctx, SubscribeManager_CreateEmailSubscriber_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscribeManagerClient) CreateEmailSubscribers(ctx context.Context, in *CreateEmailSubscribersRequest, opts ...grpc.CallOption) (*CreateEmailSubscribersResponse, error) {
	out := new(CreateEmailSubscribersResponse)
	err := c.cc.Invoke(ctx, SubscribeManager_CreateEmailSubscribers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscribeManagerClient) GetEmailSubscribers(ctx context.Context, in *GetEmailSubscribersRequest, opts ...grpc.CallOption) (*GetEmailSubscribersResponse, error) {
	out := new(GetEmailSubscribersResponse)
	err := c.cc.Invoke(ctx, SubscribeManager_GetEmailSubscribers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscribeManagerClient) GetAppEmailSubscribers(ctx context.Context, in *GetAppEmailSubscribersRequest, opts ...grpc.CallOption) (*GetAppEmailSubscribersResponse, error) {
	out := new(GetAppEmailSubscribersResponse)
	err := c.cc.Invoke(ctx, SubscribeManager_GetAppEmailSubscribers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscribeManagerServer is the server API for SubscribeManager service.
// All implementations must embed UnimplementedSubscribeManagerServer
// for forward compatibility
type SubscribeManagerServer interface {
	Version(context.Context, *emptypb.Empty) (*npool.VersionResponse, error)
	CreateEmailSubscriber(context.Context, *CreateEmailSubscriberRequest) (*CreateEmailSubscriberResponse, error)
	CreateEmailSubscribers(context.Context, *CreateEmailSubscribersRequest) (*CreateEmailSubscribersResponse, error)
	GetEmailSubscribers(context.Context, *GetEmailSubscribersRequest) (*GetEmailSubscribersResponse, error)
	GetAppEmailSubscribers(context.Context, *GetAppEmailSubscribersRequest) (*GetAppEmailSubscribersResponse, error)
	mustEmbedUnimplementedSubscribeManagerServer()
}

// UnimplementedSubscribeManagerServer must be embedded to have forward compatible implementations.
type UnimplementedSubscribeManagerServer struct {
}

func (UnimplementedSubscribeManagerServer) Version(context.Context, *emptypb.Empty) (*npool.VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedSubscribeManagerServer) CreateEmailSubscriber(context.Context, *CreateEmailSubscriberRequest) (*CreateEmailSubscriberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmailSubscriber not implemented")
}
func (UnimplementedSubscribeManagerServer) CreateEmailSubscribers(context.Context, *CreateEmailSubscribersRequest) (*CreateEmailSubscribersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmailSubscribers not implemented")
}
func (UnimplementedSubscribeManagerServer) GetEmailSubscribers(context.Context, *GetEmailSubscribersRequest) (*GetEmailSubscribersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmailSubscribers not implemented")
}
func (UnimplementedSubscribeManagerServer) GetAppEmailSubscribers(context.Context, *GetAppEmailSubscribersRequest) (*GetAppEmailSubscribersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppEmailSubscribers not implemented")
}
func (UnimplementedSubscribeManagerServer) mustEmbedUnimplementedSubscribeManagerServer() {}

// UnsafeSubscribeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscribeManagerServer will
// result in compilation errors.
type UnsafeSubscribeManagerServer interface {
	mustEmbedUnimplementedSubscribeManagerServer()
}

func RegisterSubscribeManagerServer(s grpc.ServiceRegistrar, srv SubscribeManagerServer) {
	s.RegisterService(&SubscribeManager_ServiceDesc, srv)
}

func _SubscribeManager_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscribeManagerServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscribeManager_Version_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscribeManagerServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscribeManager_CreateEmailSubscriber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEmailSubscriberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscribeManagerServer).CreateEmailSubscriber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscribeManager_CreateEmailSubscriber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscribeManagerServer).CreateEmailSubscriber(ctx, req.(*CreateEmailSubscriberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscribeManager_CreateEmailSubscribers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEmailSubscribersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscribeManagerServer).CreateEmailSubscribers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscribeManager_CreateEmailSubscribers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscribeManagerServer).CreateEmailSubscribers(ctx, req.(*CreateEmailSubscribersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscribeManager_GetEmailSubscribers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmailSubscribersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscribeManagerServer).GetEmailSubscribers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscribeManager_GetEmailSubscribers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscribeManagerServer).GetEmailSubscribers(ctx, req.(*GetEmailSubscribersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscribeManager_GetAppEmailSubscribers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppEmailSubscribersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscribeManagerServer).GetAppEmailSubscribers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscribeManager_GetAppEmailSubscribers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscribeManagerServer).GetAppEmailSubscribers(ctx, req.(*GetAppEmailSubscribersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SubscribeManager_ServiceDesc is the grpc.ServiceDesc for SubscribeManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubscribeManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "subscribe.manager.v1.SubscribeManager",
	HandlerType: (*SubscribeManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _SubscribeManager_Version_Handler,
		},
		{
			MethodName: "CreateEmailSubscriber",
			Handler:    _SubscribeManager_CreateEmailSubscriber_Handler,
		},
		{
			MethodName: "CreateEmailSubscribers",
			Handler:    _SubscribeManager_CreateEmailSubscribers_Handler,
		},
		{
			MethodName: "GetEmailSubscribers",
			Handler:    _SubscribeManager_GetEmailSubscribers_Handler,
		},
		{
			MethodName: "GetAppEmailSubscribers",
			Handler:    _SubscribeManager_GetAppEmailSubscribers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/subscribemgr/subscribemgr.proto",
}
