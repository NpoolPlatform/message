syntax = "proto3";

package third.logon.gateway.v1;

option go_package = "github.com/NpoolPlatform/message/npool/thirdlogingateway";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "npool/npool.proto";
import "npool/appusermgr/appusermgr.proto";

// Service Name
service ThirdLoginGateway {
    // Method Version
    rpc Version (google.protobuf.Empty) returns (npool.v1.VersionResponse){
        option (google.api.http) = {
            post: "/version"
            body: "*"
        };
    }

    rpc GetAuths (GetAuthsRequest) returns (GetAuthsResponse){
        option (google.api.http) = {
            post: "/v1/get/auths"
            body: "*"
        };
    }

    rpc GetAppAuths (GetAppAuthsRequest) returns (GetAppAuthsResponse){
        option (google.api.http) = {
            post: "/v1/get/app/auths"
            body: "*"
        };
    }

    rpc CreateAuth (CreateAuthRequest) returns (CreateAuthResponse){
        option (google.api.http) = {
            post: "/v1/create/auth"
            body: "*"
        };
    }

    rpc CreateAuths (CreateAuthsRequest) returns (CreateAuthsResponse){
        option (google.api.http) = {
            post: "/v1/create/auths"
            body: "*"
        };
    }

    rpc CreateAppAuth (CreateAppAuthRequest) returns (CreateAppAuthResponse){
        option (google.api.http) = {
            post: "/v1/create/app/auth"
            body: "*"
        };
    }

    rpc CreateAppAuths (CreateAppAuthsRequest) returns (CreateAppAuthsResponse){
        option (google.api.http) = {
            post: "/v1/create/app/auths"
            body: "*"
        };
    }

    rpc CreateThirdParty (CreateThirdPartyRequest) returns (CreateThirdPartyResponse) {
        option (google.api.http) = {
            post: "/v1/create/third/party"
            body: "*"
        };
    }

    rpc UpdateThirdParty (UpdateThirdPartyRequest) returns (UpdateThirdPartyResponse) {
        option (google.api.http) = {
            post: "/v1/update/third/party"
            body: "*"
        };
    }

    rpc GetThirdParties (GetThirdPartiesRequest) returns (GetThirdPartiesResponse) {
        option (google.api.http) = {
            post: "/v1/get/third/parties"
            body: "*"
        };
    }

    rpc GetThirdPartyOnly (GetThirdPartyOnlyRequest) returns (GetThirdPartyOnlyResponse) {
        option (google.api.http) = {
            post: "/v1/get/third/party/only"
            body: "*"
        };
    }

    rpc Login (LoginRequest) returns (LoginResponse) {
        option (google.api.http) = {
            post: "/v1/login"
            body: "*"
        };
    }

}

message ThirdParty {
    string ID = 10;
    string BrandName = 20;
    string Logo = 30;
    string Domain = 40;
}

message CreateThirdPartyRequest {
    ThirdParty Info = 10;
}

message CreateThirdPartyResponse {
    ThirdParty Info = 10;
}

message UpdateThirdPartyRequest {
    ThirdParty Info = 10;
}

message UpdateThirdPartyResponse {
    ThirdParty Info = 10;
}

message GetThirdPartiesRequest {
}

message GetThirdPartiesResponse {
    repeated ThirdParty Infos = 10;
}

message Auth {
    string ID = 10;
    string AppID = 20;
    string ThirdPartyID = 30;
    string AppKey = 40;
    string AppSecret = 50;
    string RedirectURL = 60;
    string AuthURL = 70;
}

message GetAuthsRequest {
    string AppID = 10;
}

message GetAuthsResponse {
    repeated Auth Infos = 10;
}

message GetAppAuthsRequest {
    string TargetAppID = 10;
}

message GetAppAuthsResponse {
    repeated Auth Infos = 10;
}

message CreateAuthRequest {
    Auth Info = 10;
}

message CreateAuthResponse {
    Auth Info = 10;
}

message CreateAuthsRequest {
    string AppID = 10;
    repeated Auth Infos = 20;
}

message CreateAuthsResponse {
    repeated Auth Infos = 10;
}

message CreateAppAuthRequest {
    string TargetAppID = 10;
    Auth Info = 20;
}

message CreateAppAuthResponse {
    Auth Info = 10;
}

message CreateAppAuthsRequest {
    string TargetAppID = 10;
    repeated Auth Infos = 20;
}

message CreateAppAuthsResponse {
    repeated Auth Infos = 10;
}

message LoginRequest {
    string Code = 10;
    string AppID = 20;
    string ThirdPartyID = 30;
}

message LoginResponse {
    app.user.manager.v1.AppUserInfo Info = 10;
}

message GetThirdPartyOnlyRequest {
    map<string, npool.v1.FilterCond> Conds = 10;
}

message GetThirdPartyOnlyResponse {
    ThirdParty Info = 10;
}
