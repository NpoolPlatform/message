// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/stakermgr/stakermgr.proto

package stakermgr

import (
	context "context"
	npool "github.com/NpoolPlatform/message/npool"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
<<<<<<< HEAD
	StakerManager_Version_FullMethodName      = "/staker.manager.v1.StakerManager/Version"
	StakerManager_Redistribute_FullMethodName = "/staker.manager.v1.StakerManager/Redistribute"
=======
	StakerManager_Version_FullMethodName = "/staker.manager.v1.StakerManager/Version"
>>>>>>> Regenerate
)

// StakerManagerClient is the client API for StakerManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StakerManagerClient interface {
	// Method Version
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*npool.VersionResponse, error)
	Redistribute(ctx context.Context, in *RedistributeRequest, opts ...grpc.CallOption) (*RedistributeResponse, error)
}

type stakerManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewStakerManagerClient(cc grpc.ClientConnInterface) StakerManagerClient {
	return &stakerManagerClient{cc}
}

func (c *stakerManagerClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*npool.VersionResponse, error) {
	out := new(npool.VersionResponse)
	err := c.cc.Invoke(ctx, StakerManager_Version_FullMethodName, in, out, opts...)
<<<<<<< HEAD
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stakerManagerClient) Redistribute(ctx context.Context, in *RedistributeRequest, opts ...grpc.CallOption) (*RedistributeResponse, error) {
	out := new(RedistributeResponse)
	err := c.cc.Invoke(ctx, StakerManager_Redistribute_FullMethodName, in, out, opts...)
=======
>>>>>>> Regenerate
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StakerManagerServer is the server API for StakerManager service.
// All implementations must embed UnimplementedStakerManagerServer
// for forward compatibility
type StakerManagerServer interface {
	// Method Version
	Version(context.Context, *emptypb.Empty) (*npool.VersionResponse, error)
	Redistribute(context.Context, *RedistributeRequest) (*RedistributeResponse, error)
	mustEmbedUnimplementedStakerManagerServer()
}

// UnimplementedStakerManagerServer must be embedded to have forward compatible implementations.
type UnimplementedStakerManagerServer struct {
}

func (UnimplementedStakerManagerServer) Version(context.Context, *emptypb.Empty) (*npool.VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedStakerManagerServer) Redistribute(context.Context, *RedistributeRequest) (*RedistributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Redistribute not implemented")
}
func (UnimplementedStakerManagerServer) mustEmbedUnimplementedStakerManagerServer() {}

// UnsafeStakerManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StakerManagerServer will
// result in compilation errors.
type UnsafeStakerManagerServer interface {
	mustEmbedUnimplementedStakerManagerServer()
}

func RegisterStakerManagerServer(s grpc.ServiceRegistrar, srv StakerManagerServer) {
	s.RegisterService(&StakerManager_ServiceDesc, srv)
}

func _StakerManager_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StakerManagerServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StakerManager_Version_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StakerManagerServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _StakerManager_Redistribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedistributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StakerManagerServer).Redistribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StakerManager_Redistribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StakerManagerServer).Redistribute(ctx, req.(*RedistributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StakerManager_ServiceDesc is the grpc.ServiceDesc for StakerManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StakerManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "staker.manager.v1.StakerManager",
	HandlerType: (*StakerManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _StakerManager_Version_Handler,
		},
		{
			MethodName: "Redistribute",
			Handler:    _StakerManager_Redistribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/stakermgr/stakermgr.proto",
}
