// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/gasfeeder/gasfeeder.proto

package gasfeeder

import (
	context "context"
	npool "github.com/NpoolPlatform/message/npool"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GasFeederClient is the client API for GasFeeder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GasFeederClient interface {
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*npool.VersionResponse, error)
	CreateCoinGas(ctx context.Context, in *CreateCoinGasRequest, opts ...grpc.CallOption) (*CreateCoinGasResponse, error)
	UpdateCoinGas(ctx context.Context, in *UpdateCoinGasRequest, opts ...grpc.CallOption) (*UpdateCoinGasResponse, error)
	GetCoinGas(ctx context.Context, in *GetCoinGasRequest, opts ...grpc.CallOption) (*GetCoinGasResponse, error)
	GetCoinGasOnly(ctx context.Context, in *GetCoinGasOnlyRequest, opts ...grpc.CallOption) (*GetCoinGasOnlyResponse, error)
	GetCoinGases(ctx context.Context, in *GetCoinGasesRequest, opts ...grpc.CallOption) (*GetCoinGasesResponse, error)
	ExistCoinGas(ctx context.Context, in *ExistCoinGasRequest, opts ...grpc.CallOption) (*ExistCoinGasResponse, error)
	ExistCoinGasConds(ctx context.Context, in *ExistCoinGasCondsRequest, opts ...grpc.CallOption) (*ExistCoinGasCondsResponse, error)
	DeleteCoinGas(ctx context.Context, in *DeleteCoinGasRequest, opts ...grpc.CallOption) (*DeleteCoinGasResponse, error)
	CreateDeposit(ctx context.Context, in *CreateDepositRequest, opts ...grpc.CallOption) (*CreateDepositResponse, error)
	UpdateDeposit(ctx context.Context, in *UpdateDepositRequest, opts ...grpc.CallOption) (*UpdateDepositResponse, error)
	GetDeposit(ctx context.Context, in *GetDepositRequest, opts ...grpc.CallOption) (*GetDepositResponse, error)
	GetDepositOnly(ctx context.Context, in *GetDepositOnlyRequest, opts ...grpc.CallOption) (*GetDepositOnlyResponse, error)
	GetDeposites(ctx context.Context, in *GetDepositesRequest, opts ...grpc.CallOption) (*GetDepositesResponse, error)
	ExistDeposit(ctx context.Context, in *ExistDepositRequest, opts ...grpc.CallOption) (*ExistDepositResponse, error)
	ExistDepositConds(ctx context.Context, in *ExistDepositCondsRequest, opts ...grpc.CallOption) (*ExistDepositCondsResponse, error)
	DeleteDeposit(ctx context.Context, in *DeleteDepositRequest, opts ...grpc.CallOption) (*DeleteDepositResponse, error)
}

type gasFeederClient struct {
	cc grpc.ClientConnInterface
}

func NewGasFeederClient(cc grpc.ClientConnInterface) GasFeederClient {
	return &gasFeederClient{cc}
}

func (c *gasFeederClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*npool.VersionResponse, error) {
	out := new(npool.VersionResponse)
	err := c.cc.Invoke(ctx, "/gas.feeder.v1.GasFeeder/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasFeederClient) CreateCoinGas(ctx context.Context, in *CreateCoinGasRequest, opts ...grpc.CallOption) (*CreateCoinGasResponse, error) {
	out := new(CreateCoinGasResponse)
	err := c.cc.Invoke(ctx, "/gas.feeder.v1.GasFeeder/CreateCoinGas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasFeederClient) UpdateCoinGas(ctx context.Context, in *UpdateCoinGasRequest, opts ...grpc.CallOption) (*UpdateCoinGasResponse, error) {
	out := new(UpdateCoinGasResponse)
	err := c.cc.Invoke(ctx, "/gas.feeder.v1.GasFeeder/UpdateCoinGas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasFeederClient) GetCoinGas(ctx context.Context, in *GetCoinGasRequest, opts ...grpc.CallOption) (*GetCoinGasResponse, error) {
	out := new(GetCoinGasResponse)
	err := c.cc.Invoke(ctx, "/gas.feeder.v1.GasFeeder/GetCoinGas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasFeederClient) GetCoinGasOnly(ctx context.Context, in *GetCoinGasOnlyRequest, opts ...grpc.CallOption) (*GetCoinGasOnlyResponse, error) {
	out := new(GetCoinGasOnlyResponse)
	err := c.cc.Invoke(ctx, "/gas.feeder.v1.GasFeeder/GetCoinGasOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasFeederClient) GetCoinGases(ctx context.Context, in *GetCoinGasesRequest, opts ...grpc.CallOption) (*GetCoinGasesResponse, error) {
	out := new(GetCoinGasesResponse)
	err := c.cc.Invoke(ctx, "/gas.feeder.v1.GasFeeder/GetCoinGases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasFeederClient) ExistCoinGas(ctx context.Context, in *ExistCoinGasRequest, opts ...grpc.CallOption) (*ExistCoinGasResponse, error) {
	out := new(ExistCoinGasResponse)
	err := c.cc.Invoke(ctx, "/gas.feeder.v1.GasFeeder/ExistCoinGas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasFeederClient) ExistCoinGasConds(ctx context.Context, in *ExistCoinGasCondsRequest, opts ...grpc.CallOption) (*ExistCoinGasCondsResponse, error) {
	out := new(ExistCoinGasCondsResponse)
	err := c.cc.Invoke(ctx, "/gas.feeder.v1.GasFeeder/ExistCoinGasConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasFeederClient) DeleteCoinGas(ctx context.Context, in *DeleteCoinGasRequest, opts ...grpc.CallOption) (*DeleteCoinGasResponse, error) {
	out := new(DeleteCoinGasResponse)
	err := c.cc.Invoke(ctx, "/gas.feeder.v1.GasFeeder/DeleteCoinGas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasFeederClient) CreateDeposit(ctx context.Context, in *CreateDepositRequest, opts ...grpc.CallOption) (*CreateDepositResponse, error) {
	out := new(CreateDepositResponse)
	err := c.cc.Invoke(ctx, "/gas.feeder.v1.GasFeeder/CreateDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasFeederClient) UpdateDeposit(ctx context.Context, in *UpdateDepositRequest, opts ...grpc.CallOption) (*UpdateDepositResponse, error) {
	out := new(UpdateDepositResponse)
	err := c.cc.Invoke(ctx, "/gas.feeder.v1.GasFeeder/UpdateDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasFeederClient) GetDeposit(ctx context.Context, in *GetDepositRequest, opts ...grpc.CallOption) (*GetDepositResponse, error) {
	out := new(GetDepositResponse)
	err := c.cc.Invoke(ctx, "/gas.feeder.v1.GasFeeder/GetDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasFeederClient) GetDepositOnly(ctx context.Context, in *GetDepositOnlyRequest, opts ...grpc.CallOption) (*GetDepositOnlyResponse, error) {
	out := new(GetDepositOnlyResponse)
	err := c.cc.Invoke(ctx, "/gas.feeder.v1.GasFeeder/GetDepositOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasFeederClient) GetDeposites(ctx context.Context, in *GetDepositesRequest, opts ...grpc.CallOption) (*GetDepositesResponse, error) {
	out := new(GetDepositesResponse)
	err := c.cc.Invoke(ctx, "/gas.feeder.v1.GasFeeder/GetDeposites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasFeederClient) ExistDeposit(ctx context.Context, in *ExistDepositRequest, opts ...grpc.CallOption) (*ExistDepositResponse, error) {
	out := new(ExistDepositResponse)
	err := c.cc.Invoke(ctx, "/gas.feeder.v1.GasFeeder/ExistDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasFeederClient) ExistDepositConds(ctx context.Context, in *ExistDepositCondsRequest, opts ...grpc.CallOption) (*ExistDepositCondsResponse, error) {
	out := new(ExistDepositCondsResponse)
	err := c.cc.Invoke(ctx, "/gas.feeder.v1.GasFeeder/ExistDepositConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasFeederClient) DeleteDeposit(ctx context.Context, in *DeleteDepositRequest, opts ...grpc.CallOption) (*DeleteDepositResponse, error) {
	out := new(DeleteDepositResponse)
	err := c.cc.Invoke(ctx, "/gas.feeder.v1.GasFeeder/DeleteDeposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GasFeederServer is the server API for GasFeeder service.
// All implementations must embed UnimplementedGasFeederServer
// for forward compatibility
type GasFeederServer interface {
	Version(context.Context, *emptypb.Empty) (*npool.VersionResponse, error)
	CreateCoinGas(context.Context, *CreateCoinGasRequest) (*CreateCoinGasResponse, error)
	UpdateCoinGas(context.Context, *UpdateCoinGasRequest) (*UpdateCoinGasResponse, error)
	GetCoinGas(context.Context, *GetCoinGasRequest) (*GetCoinGasResponse, error)
	GetCoinGasOnly(context.Context, *GetCoinGasOnlyRequest) (*GetCoinGasOnlyResponse, error)
	GetCoinGases(context.Context, *GetCoinGasesRequest) (*GetCoinGasesResponse, error)
	ExistCoinGas(context.Context, *ExistCoinGasRequest) (*ExistCoinGasResponse, error)
	ExistCoinGasConds(context.Context, *ExistCoinGasCondsRequest) (*ExistCoinGasCondsResponse, error)
	DeleteCoinGas(context.Context, *DeleteCoinGasRequest) (*DeleteCoinGasResponse, error)
	CreateDeposit(context.Context, *CreateDepositRequest) (*CreateDepositResponse, error)
	UpdateDeposit(context.Context, *UpdateDepositRequest) (*UpdateDepositResponse, error)
	GetDeposit(context.Context, *GetDepositRequest) (*GetDepositResponse, error)
	GetDepositOnly(context.Context, *GetDepositOnlyRequest) (*GetDepositOnlyResponse, error)
	GetDeposites(context.Context, *GetDepositesRequest) (*GetDepositesResponse, error)
	ExistDeposit(context.Context, *ExistDepositRequest) (*ExistDepositResponse, error)
	ExistDepositConds(context.Context, *ExistDepositCondsRequest) (*ExistDepositCondsResponse, error)
	DeleteDeposit(context.Context, *DeleteDepositRequest) (*DeleteDepositResponse, error)
	mustEmbedUnimplementedGasFeederServer()
}

// UnimplementedGasFeederServer must be embedded to have forward compatible implementations.
type UnimplementedGasFeederServer struct {
}

func (UnimplementedGasFeederServer) Version(context.Context, *emptypb.Empty) (*npool.VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedGasFeederServer) CreateCoinGas(context.Context, *CreateCoinGasRequest) (*CreateCoinGasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCoinGas not implemented")
}
func (UnimplementedGasFeederServer) UpdateCoinGas(context.Context, *UpdateCoinGasRequest) (*UpdateCoinGasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCoinGas not implemented")
}
func (UnimplementedGasFeederServer) GetCoinGas(context.Context, *GetCoinGasRequest) (*GetCoinGasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinGas not implemented")
}
func (UnimplementedGasFeederServer) GetCoinGasOnly(context.Context, *GetCoinGasOnlyRequest) (*GetCoinGasOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinGasOnly not implemented")
}
func (UnimplementedGasFeederServer) GetCoinGases(context.Context, *GetCoinGasesRequest) (*GetCoinGasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinGases not implemented")
}
func (UnimplementedGasFeederServer) ExistCoinGas(context.Context, *ExistCoinGasRequest) (*ExistCoinGasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistCoinGas not implemented")
}
func (UnimplementedGasFeederServer) ExistCoinGasConds(context.Context, *ExistCoinGasCondsRequest) (*ExistCoinGasCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistCoinGasConds not implemented")
}
func (UnimplementedGasFeederServer) DeleteCoinGas(context.Context, *DeleteCoinGasRequest) (*DeleteCoinGasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCoinGas not implemented")
}
func (UnimplementedGasFeederServer) CreateDeposit(context.Context, *CreateDepositRequest) (*CreateDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeposit not implemented")
}
func (UnimplementedGasFeederServer) UpdateDeposit(context.Context, *UpdateDepositRequest) (*UpdateDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeposit not implemented")
}
func (UnimplementedGasFeederServer) GetDeposit(context.Context, *GetDepositRequest) (*GetDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeposit not implemented")
}
func (UnimplementedGasFeederServer) GetDepositOnly(context.Context, *GetDepositOnlyRequest) (*GetDepositOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDepositOnly not implemented")
}
func (UnimplementedGasFeederServer) GetDeposites(context.Context, *GetDepositesRequest) (*GetDepositesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeposites not implemented")
}
func (UnimplementedGasFeederServer) ExistDeposit(context.Context, *ExistDepositRequest) (*ExistDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistDeposit not implemented")
}
func (UnimplementedGasFeederServer) ExistDepositConds(context.Context, *ExistDepositCondsRequest) (*ExistDepositCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistDepositConds not implemented")
}
func (UnimplementedGasFeederServer) DeleteDeposit(context.Context, *DeleteDepositRequest) (*DeleteDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeposit not implemented")
}
func (UnimplementedGasFeederServer) mustEmbedUnimplementedGasFeederServer() {}

// UnsafeGasFeederServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GasFeederServer will
// result in compilation errors.
type UnsafeGasFeederServer interface {
	mustEmbedUnimplementedGasFeederServer()
}

func RegisterGasFeederServer(s grpc.ServiceRegistrar, srv GasFeederServer) {
	s.RegisterService(&GasFeeder_ServiceDesc, srv)
}

func _GasFeeder_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasFeederServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gas.feeder.v1.GasFeeder/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasFeederServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasFeeder_CreateCoinGas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCoinGasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasFeederServer).CreateCoinGas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gas.feeder.v1.GasFeeder/CreateCoinGas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasFeederServer).CreateCoinGas(ctx, req.(*CreateCoinGasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasFeeder_UpdateCoinGas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCoinGasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasFeederServer).UpdateCoinGas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gas.feeder.v1.GasFeeder/UpdateCoinGas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasFeederServer).UpdateCoinGas(ctx, req.(*UpdateCoinGasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasFeeder_GetCoinGas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinGasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasFeederServer).GetCoinGas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gas.feeder.v1.GasFeeder/GetCoinGas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasFeederServer).GetCoinGas(ctx, req.(*GetCoinGasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasFeeder_GetCoinGasOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinGasOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasFeederServer).GetCoinGasOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gas.feeder.v1.GasFeeder/GetCoinGasOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasFeederServer).GetCoinGasOnly(ctx, req.(*GetCoinGasOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasFeeder_GetCoinGases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinGasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasFeederServer).GetCoinGases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gas.feeder.v1.GasFeeder/GetCoinGases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasFeederServer).GetCoinGases(ctx, req.(*GetCoinGasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasFeeder_ExistCoinGas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistCoinGasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasFeederServer).ExistCoinGas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gas.feeder.v1.GasFeeder/ExistCoinGas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasFeederServer).ExistCoinGas(ctx, req.(*ExistCoinGasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasFeeder_ExistCoinGasConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistCoinGasCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasFeederServer).ExistCoinGasConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gas.feeder.v1.GasFeeder/ExistCoinGasConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasFeederServer).ExistCoinGasConds(ctx, req.(*ExistCoinGasCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasFeeder_DeleteCoinGas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCoinGasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasFeederServer).DeleteCoinGas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gas.feeder.v1.GasFeeder/DeleteCoinGas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasFeederServer).DeleteCoinGas(ctx, req.(*DeleteCoinGasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasFeeder_CreateDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasFeederServer).CreateDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gas.feeder.v1.GasFeeder/CreateDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasFeederServer).CreateDeposit(ctx, req.(*CreateDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasFeeder_UpdateDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasFeederServer).UpdateDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gas.feeder.v1.GasFeeder/UpdateDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasFeederServer).UpdateDeposit(ctx, req.(*UpdateDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasFeeder_GetDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasFeederServer).GetDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gas.feeder.v1.GasFeeder/GetDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasFeederServer).GetDeposit(ctx, req.(*GetDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasFeeder_GetDepositOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDepositOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasFeederServer).GetDepositOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gas.feeder.v1.GasFeeder/GetDepositOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasFeederServer).GetDepositOnly(ctx, req.(*GetDepositOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasFeeder_GetDeposites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDepositesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasFeederServer).GetDeposites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gas.feeder.v1.GasFeeder/GetDeposites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasFeederServer).GetDeposites(ctx, req.(*GetDepositesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasFeeder_ExistDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasFeederServer).ExistDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gas.feeder.v1.GasFeeder/ExistDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasFeederServer).ExistDeposit(ctx, req.(*ExistDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasFeeder_ExistDepositConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistDepositCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasFeederServer).ExistDepositConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gas.feeder.v1.GasFeeder/ExistDepositConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasFeederServer).ExistDepositConds(ctx, req.(*ExistDepositCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasFeeder_DeleteDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasFeederServer).DeleteDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gas.feeder.v1.GasFeeder/DeleteDeposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasFeederServer).DeleteDeposit(ctx, req.(*DeleteDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GasFeeder_ServiceDesc is the grpc.ServiceDesc for GasFeeder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GasFeeder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gas.feeder.v1.GasFeeder",
	HandlerType: (*GasFeederServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _GasFeeder_Version_Handler,
		},
		{
			MethodName: "CreateCoinGas",
			Handler:    _GasFeeder_CreateCoinGas_Handler,
		},
		{
			MethodName: "UpdateCoinGas",
			Handler:    _GasFeeder_UpdateCoinGas_Handler,
		},
		{
			MethodName: "GetCoinGas",
			Handler:    _GasFeeder_GetCoinGas_Handler,
		},
		{
			MethodName: "GetCoinGasOnly",
			Handler:    _GasFeeder_GetCoinGasOnly_Handler,
		},
		{
			MethodName: "GetCoinGases",
			Handler:    _GasFeeder_GetCoinGases_Handler,
		},
		{
			MethodName: "ExistCoinGas",
			Handler:    _GasFeeder_ExistCoinGas_Handler,
		},
		{
			MethodName: "ExistCoinGasConds",
			Handler:    _GasFeeder_ExistCoinGasConds_Handler,
		},
		{
			MethodName: "DeleteCoinGas",
			Handler:    _GasFeeder_DeleteCoinGas_Handler,
		},
		{
			MethodName: "CreateDeposit",
			Handler:    _GasFeeder_CreateDeposit_Handler,
		},
		{
			MethodName: "UpdateDeposit",
			Handler:    _GasFeeder_UpdateDeposit_Handler,
		},
		{
			MethodName: "GetDeposit",
			Handler:    _GasFeeder_GetDeposit_Handler,
		},
		{
			MethodName: "GetDepositOnly",
			Handler:    _GasFeeder_GetDepositOnly_Handler,
		},
		{
			MethodName: "GetDeposites",
			Handler:    _GasFeeder_GetDeposites_Handler,
		},
		{
			MethodName: "ExistDeposit",
			Handler:    _GasFeeder_ExistDeposit_Handler,
		},
		{
			MethodName: "ExistDepositConds",
			Handler:    _GasFeeder_ExistDepositConds_Handler,
		},
		{
			MethodName: "DeleteDeposit",
			Handler:    _GasFeeder_DeleteDeposit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/gasfeeder/gasfeeder.proto",
}
