// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/cloud-hashing-billing/cloud-hashing-billing.proto

package cloud_hashing_billing

import (
	context "context"
	npool "github.com/NpoolPlatform/message/npool"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CloudHashingBillingClient is the client API for CloudHashingBilling service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudHashingBillingClient interface {
	// Method Version
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*npool.VersionResponse, error)
	CreateCoinAccount(ctx context.Context, in *CreateCoinAccountRequest, opts ...grpc.CallOption) (*CreateCoinAccountResponse, error)
	GetCoinAccount(ctx context.Context, in *GetCoinAccountRequest, opts ...grpc.CallOption) (*GetCoinAccountResponse, error)
	GetCoinAccountByCoinAddress(ctx context.Context, in *GetCoinAccountByCoinAddressRequest, opts ...grpc.CallOption) (*GetCoinAccountByCoinAddressResponse, error)
	GetCoinAccounts(ctx context.Context, in *GetCoinAccountsRequest, opts ...grpc.CallOption) (*GetCoinAccountsResponse, error)
	DeleteCoinAccount(ctx context.Context, in *DeleteCoinAccountRequest, opts ...grpc.CallOption) (*DeleteCoinAccountResponse, error)
	CreateCoinAccountTransaction(ctx context.Context, in *CreateCoinAccountTransactionRequest, opts ...grpc.CallOption) (*CreateCoinAccountTransactionResponse, error)
	GetCoinAccountTransaction(ctx context.Context, in *GetCoinAccountTransactionRequest, opts ...grpc.CallOption) (*GetCoinAccountTransactionResponse, error)
	GetCoinAccountTransactionsByCoinAccount(ctx context.Context, in *GetCoinAccountTransactionsByCoinAccountRequest, opts ...grpc.CallOption) (*GetCoinAccountTransactionsByCoinAccountResponse, error)
	GetCoinAccountTransactionsByState(ctx context.Context, in *GetCoinAccountTransactionsByStateRequest, opts ...grpc.CallOption) (*GetCoinAccountTransactionsByStateResponse, error)
	GetCoinAccountTransactionsByCoin(ctx context.Context, in *GetCoinAccountTransactionsByCoinRequest, opts ...grpc.CallOption) (*GetCoinAccountTransactionsByCoinResponse, error)
	UpdateCoinAccountTransaction(ctx context.Context, in *UpdateCoinAccountTransactionRequest, opts ...grpc.CallOption) (*UpdateCoinAccountTransactionResponse, error)
	GetCoinAccountTransactionDetail(ctx context.Context, in *GetCoinAccountTransactionDetailRequest, opts ...grpc.CallOption) (*GetCoinAccountTransactionDetailResponse, error)
	DeleteCoinAccountTransaction(ctx context.Context, in *DeleteCoinAccountTransactionRequest, opts ...grpc.CallOption) (*DeleteCoinAccountTransactionResponse, error)
	CreatePlatformBenefit(ctx context.Context, in *CreatePlatformBenefitRequest, opts ...grpc.CallOption) (*CreatePlatformBenefitResponse, error)
	GetLatestPlatformBenefitByGood(ctx context.Context, in *GetLatestPlatformBenefitByGoodRequest, opts ...grpc.CallOption) (*GetLatestPlatformBenefitByGoodResponse, error)
	GetPlatformBenefitsByGood(ctx context.Context, in *GetPlatformBenefitsByGoodRequest, opts ...grpc.CallOption) (*GetPlatformBenefitsByGoodResponse, error)
	GetPlatformBenefit(ctx context.Context, in *GetPlatformBenefitRequest, opts ...grpc.CallOption) (*GetPlatformBenefitResponse, error)
	GetPlatformBenefitDetail(ctx context.Context, in *GetPlatformBenefitDetailRequest, opts ...grpc.CallOption) (*GetPlatformBenefitDetailResponse, error)
	CreatePlatformSetting(ctx context.Context, in *CreatePlatformSettingRequest, opts ...grpc.CallOption) (*CreatePlatformSettingResponse, error)
	UpdatePlatformSetting(ctx context.Context, in *UpdatePlatformSettingRequest, opts ...grpc.CallOption) (*UpdatePlatformSettingResponse, error)
	GetPlatformSetting(ctx context.Context, in *GetPlatformSettingRequest, opts ...grpc.CallOption) (*GetPlatformSettingResponse, error)
	CreateUserBenefit(ctx context.Context, in *CreateUserBenefitRequest, opts ...grpc.CallOption) (*CreateUserBenefitResponse, error)
	GetUserBenefitsByAppUser(ctx context.Context, in *GetUserBenefitsByAppUserRequest, opts ...grpc.CallOption) (*GetUserBenefitsByAppUserResponse, error)
	GetUserBenefitsByApp(ctx context.Context, in *GetUserBenefitsByAppRequest, opts ...grpc.CallOption) (*GetUserBenefitsByAppResponse, error)
	GetLatestUserBenefitByGoodAppUser(ctx context.Context, in *GetLatestUserBenefitByGoodAppUserRequest, opts ...grpc.CallOption) (*GetLatestUserBenefitByGoodAppUserResponse, error)
	CreateCoinSetting(ctx context.Context, in *CreateCoinSettingRequest, opts ...grpc.CallOption) (*CreateCoinSettingResponse, error)
	UpdateCoinSetting(ctx context.Context, in *UpdateCoinSettingRequest, opts ...grpc.CallOption) (*UpdateCoinSettingResponse, error)
	GetCoinSetting(ctx context.Context, in *GetCoinSettingRequest, opts ...grpc.CallOption) (*GetCoinSettingResponse, error)
	GetCoinSettingByCoin(ctx context.Context, in *GetCoinSettingByCoinRequest, opts ...grpc.CallOption) (*GetCoinSettingByCoinResponse, error)
	CreateGoodBenefit(ctx context.Context, in *CreateGoodBenefitRequest, opts ...grpc.CallOption) (*CreateGoodBenefitResponse, error)
	UpdateGoodBenefit(ctx context.Context, in *UpdateGoodBenefitRequest, opts ...grpc.CallOption) (*UpdateGoodBenefitResponse, error)
	GetGoodBenefit(ctx context.Context, in *GetGoodBenefitRequest, opts ...grpc.CallOption) (*GetGoodBenefitResponse, error)
	GetGoodBenefitByGood(ctx context.Context, in *GetGoodBenefitByGoodRequest, opts ...grpc.CallOption) (*GetGoodBenefitByGoodResponse, error)
	CreateGoodPayment(ctx context.Context, in *CreateGoodPaymentRequest, opts ...grpc.CallOption) (*CreateGoodPaymentResponse, error)
	UpdateGoodPayment(ctx context.Context, in *UpdateGoodPaymentRequest, opts ...grpc.CallOption) (*UpdateGoodPaymentResponse, error)
	GetGoodPayment(ctx context.Context, in *GetGoodPaymentRequest, opts ...grpc.CallOption) (*GetGoodPaymentResponse, error)
	GetGoodPayments(ctx context.Context, in *GetGoodPaymentsRequest, opts ...grpc.CallOption) (*GetGoodPaymentsResponse, error)
	GetGoodPaymentsByGood(ctx context.Context, in *GetGoodPaymentsByGoodRequest, opts ...grpc.CallOption) (*GetGoodPaymentsByGoodResponse, error)
	GetIdleGoodPaymentsByGood(ctx context.Context, in *GetIdleGoodPaymentsByGoodRequest, opts ...grpc.CallOption) (*GetIdleGoodPaymentsByGoodResponse, error)
	GetIdleGoodPaymentsByGoodPaymentCoin(ctx context.Context, in *GetIdleGoodPaymentsByGoodPaymentCoinRequest, opts ...grpc.CallOption) (*GetIdleGoodPaymentsByGoodPaymentCoinResponse, error)
	GetGoodPaymentByAccount(ctx context.Context, in *GetGoodPaymentByAccountRequest, opts ...grpc.CallOption) (*GetGoodPaymentByAccountResponse, error)
	CreateUserWithdraw(ctx context.Context, in *CreateUserWithdrawRequest, opts ...grpc.CallOption) (*CreateUserWithdrawResponse, error)
	UpdateUserWithdraw(ctx context.Context, in *UpdateUserWithdrawRequest, opts ...grpc.CallOption) (*UpdateUserWithdrawResponse, error)
	GetUserWithdraw(ctx context.Context, in *GetUserWithdrawRequest, opts ...grpc.CallOption) (*GetUserWithdrawResponse, error)
	GetUserWithdrawsByAppUser(ctx context.Context, in *GetUserWithdrawsByAppUserRequest, opts ...grpc.CallOption) (*GetUserWithdrawsByAppUserResponse, error)
	GetUserWithdrawsByOtherAppUser(ctx context.Context, in *GetUserWithdrawsByOtherAppUserRequest, opts ...grpc.CallOption) (*GetUserWithdrawsByOtherAppUserResponse, error)
	GetUserWithdrawByAccount(ctx context.Context, in *GetUserWithdrawByAccountRequest, opts ...grpc.CallOption) (*GetUserWithdrawByAccountResponse, error)
	CreateUserDirectBenefit(ctx context.Context, in *CreateUserDirectBenefitRequest, opts ...grpc.CallOption) (*CreateUserDirectBenefitResponse, error)
	UpdateUserDirectBenefit(ctx context.Context, in *UpdateUserDirectBenefitRequest, opts ...grpc.CallOption) (*UpdateUserDirectBenefitResponse, error)
	GetUserDirectBenefit(ctx context.Context, in *GetUserDirectBenefitRequest, opts ...grpc.CallOption) (*GetUserDirectBenefitResponse, error)
	GetUserDirectBenefitsByAppUser(ctx context.Context, in *GetUserDirectBenefitsByAppUserRequest, opts ...grpc.CallOption) (*GetUserDirectBenefitsByAppUserResponse, error)
	GetUserDirectBenefitsByOtherAppUser(ctx context.Context, in *GetUserDirectBenefitsByOtherAppUserRequest, opts ...grpc.CallOption) (*GetUserDirectBenefitsByOtherAppUserResponse, error)
	GetUserDirectBenefitByAccount(ctx context.Context, in *GetUserDirectBenefitByAccountRequest, opts ...grpc.CallOption) (*GetUserDirectBenefitByAccountResponse, error)
	CreateUserWithdrawItem(ctx context.Context, in *CreateUserWithdrawItemRequest, opts ...grpc.CallOption) (*CreateUserWithdrawItemResponse, error)
	UpdateUserWithdrawItem(ctx context.Context, in *UpdateUserWithdrawItemRequest, opts ...grpc.CallOption) (*UpdateUserWithdrawItemResponse, error)
	GetUserWithdrawItem(ctx context.Context, in *GetUserWithdrawItemRequest, opts ...grpc.CallOption) (*GetUserWithdrawItemResponse, error)
	GetUserWithdrawItemsByAccount(ctx context.Context, in *GetUserWithdrawItemsByAccountRequest, opts ...grpc.CallOption) (*GetUserWithdrawItemsByAccountResponse, error)
	GetUserWithdrawItemsByAppUser(ctx context.Context, in *GetUserWithdrawItemsByAppUserRequest, opts ...grpc.CallOption) (*GetUserWithdrawItemsByAppUserResponse, error)
	GetUserWithdrawItemsByOtherAppUser(ctx context.Context, in *GetUserWithdrawItemsByOtherAppUserRequest, opts ...grpc.CallOption) (*GetUserWithdrawItemsByOtherAppUserResponse, error)
	CreateAppWithdrawSetting(ctx context.Context, in *CreateAppWithdrawSettingRequest, opts ...grpc.CallOption) (*CreateAppWithdrawSettingResponse, error)
	UpdateAppWithdrawSetting(ctx context.Context, in *UpdateAppWithdrawSettingRequest, opts ...grpc.CallOption) (*UpdateAppWithdrawSettingResponse, error)
	GetAppWithdrawSetting(ctx context.Context, in *GetAppWithdrawSettingRequest, opts ...grpc.CallOption) (*GetAppWithdrawSettingResponse, error)
	GetAppWithdrawSettingsByApp(ctx context.Context, in *GetAppWithdrawSettingsByAppRequest, opts ...grpc.CallOption) (*GetAppWithdrawSettingsByAppResponse, error)
	GetAppWithdrawSettingByAppCoin(ctx context.Context, in *GetAppWithdrawSettingByAppCoinRequest, opts ...grpc.CallOption) (*GetAppWithdrawSettingByAppCoinResponse, error)
	GetAppWithdrawSettingsByOtherApp(ctx context.Context, in *GetAppWithdrawSettingsByOtherAppRequest, opts ...grpc.CallOption) (*GetAppWithdrawSettingsByOtherAppResponse, error)
}

type cloudHashingBillingClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudHashingBillingClient(cc grpc.ClientConnInterface) CloudHashingBillingClient {
	return &cloudHashingBillingClient{cc}
}

func (c *cloudHashingBillingClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*npool.VersionResponse, error) {
	out := new(npool.VersionResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) CreateCoinAccount(ctx context.Context, in *CreateCoinAccountRequest, opts ...grpc.CallOption) (*CreateCoinAccountResponse, error) {
	out := new(CreateCoinAccountResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/CreateCoinAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetCoinAccount(ctx context.Context, in *GetCoinAccountRequest, opts ...grpc.CallOption) (*GetCoinAccountResponse, error) {
	out := new(GetCoinAccountResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetCoinAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetCoinAccountByCoinAddress(ctx context.Context, in *GetCoinAccountByCoinAddressRequest, opts ...grpc.CallOption) (*GetCoinAccountByCoinAddressResponse, error) {
	out := new(GetCoinAccountByCoinAddressResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetCoinAccountByCoinAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetCoinAccounts(ctx context.Context, in *GetCoinAccountsRequest, opts ...grpc.CallOption) (*GetCoinAccountsResponse, error) {
	out := new(GetCoinAccountsResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetCoinAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) DeleteCoinAccount(ctx context.Context, in *DeleteCoinAccountRequest, opts ...grpc.CallOption) (*DeleteCoinAccountResponse, error) {
	out := new(DeleteCoinAccountResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/DeleteCoinAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) CreateCoinAccountTransaction(ctx context.Context, in *CreateCoinAccountTransactionRequest, opts ...grpc.CallOption) (*CreateCoinAccountTransactionResponse, error) {
	out := new(CreateCoinAccountTransactionResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/CreateCoinAccountTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetCoinAccountTransaction(ctx context.Context, in *GetCoinAccountTransactionRequest, opts ...grpc.CallOption) (*GetCoinAccountTransactionResponse, error) {
	out := new(GetCoinAccountTransactionResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetCoinAccountTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetCoinAccountTransactionsByCoinAccount(ctx context.Context, in *GetCoinAccountTransactionsByCoinAccountRequest, opts ...grpc.CallOption) (*GetCoinAccountTransactionsByCoinAccountResponse, error) {
	out := new(GetCoinAccountTransactionsByCoinAccountResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetCoinAccountTransactionsByCoinAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetCoinAccountTransactionsByState(ctx context.Context, in *GetCoinAccountTransactionsByStateRequest, opts ...grpc.CallOption) (*GetCoinAccountTransactionsByStateResponse, error) {
	out := new(GetCoinAccountTransactionsByStateResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetCoinAccountTransactionsByState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetCoinAccountTransactionsByCoin(ctx context.Context, in *GetCoinAccountTransactionsByCoinRequest, opts ...grpc.CallOption) (*GetCoinAccountTransactionsByCoinResponse, error) {
	out := new(GetCoinAccountTransactionsByCoinResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetCoinAccountTransactionsByCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) UpdateCoinAccountTransaction(ctx context.Context, in *UpdateCoinAccountTransactionRequest, opts ...grpc.CallOption) (*UpdateCoinAccountTransactionResponse, error) {
	out := new(UpdateCoinAccountTransactionResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/UpdateCoinAccountTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetCoinAccountTransactionDetail(ctx context.Context, in *GetCoinAccountTransactionDetailRequest, opts ...grpc.CallOption) (*GetCoinAccountTransactionDetailResponse, error) {
	out := new(GetCoinAccountTransactionDetailResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetCoinAccountTransactionDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) DeleteCoinAccountTransaction(ctx context.Context, in *DeleteCoinAccountTransactionRequest, opts ...grpc.CallOption) (*DeleteCoinAccountTransactionResponse, error) {
	out := new(DeleteCoinAccountTransactionResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/DeleteCoinAccountTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) CreatePlatformBenefit(ctx context.Context, in *CreatePlatformBenefitRequest, opts ...grpc.CallOption) (*CreatePlatformBenefitResponse, error) {
	out := new(CreatePlatformBenefitResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/CreatePlatformBenefit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetLatestPlatformBenefitByGood(ctx context.Context, in *GetLatestPlatformBenefitByGoodRequest, opts ...grpc.CallOption) (*GetLatestPlatformBenefitByGoodResponse, error) {
	out := new(GetLatestPlatformBenefitByGoodResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetLatestPlatformBenefitByGood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetPlatformBenefitsByGood(ctx context.Context, in *GetPlatformBenefitsByGoodRequest, opts ...grpc.CallOption) (*GetPlatformBenefitsByGoodResponse, error) {
	out := new(GetPlatformBenefitsByGoodResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetPlatformBenefitsByGood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetPlatformBenefit(ctx context.Context, in *GetPlatformBenefitRequest, opts ...grpc.CallOption) (*GetPlatformBenefitResponse, error) {
	out := new(GetPlatformBenefitResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetPlatformBenefit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetPlatformBenefitDetail(ctx context.Context, in *GetPlatformBenefitDetailRequest, opts ...grpc.CallOption) (*GetPlatformBenefitDetailResponse, error) {
	out := new(GetPlatformBenefitDetailResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetPlatformBenefitDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) CreatePlatformSetting(ctx context.Context, in *CreatePlatformSettingRequest, opts ...grpc.CallOption) (*CreatePlatformSettingResponse, error) {
	out := new(CreatePlatformSettingResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/CreatePlatformSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) UpdatePlatformSetting(ctx context.Context, in *UpdatePlatformSettingRequest, opts ...grpc.CallOption) (*UpdatePlatformSettingResponse, error) {
	out := new(UpdatePlatformSettingResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/UpdatePlatformSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetPlatformSetting(ctx context.Context, in *GetPlatformSettingRequest, opts ...grpc.CallOption) (*GetPlatformSettingResponse, error) {
	out := new(GetPlatformSettingResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetPlatformSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) CreateUserBenefit(ctx context.Context, in *CreateUserBenefitRequest, opts ...grpc.CallOption) (*CreateUserBenefitResponse, error) {
	out := new(CreateUserBenefitResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/CreateUserBenefit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetUserBenefitsByAppUser(ctx context.Context, in *GetUserBenefitsByAppUserRequest, opts ...grpc.CallOption) (*GetUserBenefitsByAppUserResponse, error) {
	out := new(GetUserBenefitsByAppUserResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetUserBenefitsByAppUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetUserBenefitsByApp(ctx context.Context, in *GetUserBenefitsByAppRequest, opts ...grpc.CallOption) (*GetUserBenefitsByAppResponse, error) {
	out := new(GetUserBenefitsByAppResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetUserBenefitsByApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetLatestUserBenefitByGoodAppUser(ctx context.Context, in *GetLatestUserBenefitByGoodAppUserRequest, opts ...grpc.CallOption) (*GetLatestUserBenefitByGoodAppUserResponse, error) {
	out := new(GetLatestUserBenefitByGoodAppUserResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetLatestUserBenefitByGoodAppUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) CreateCoinSetting(ctx context.Context, in *CreateCoinSettingRequest, opts ...grpc.CallOption) (*CreateCoinSettingResponse, error) {
	out := new(CreateCoinSettingResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/CreateCoinSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) UpdateCoinSetting(ctx context.Context, in *UpdateCoinSettingRequest, opts ...grpc.CallOption) (*UpdateCoinSettingResponse, error) {
	out := new(UpdateCoinSettingResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/UpdateCoinSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetCoinSetting(ctx context.Context, in *GetCoinSettingRequest, opts ...grpc.CallOption) (*GetCoinSettingResponse, error) {
	out := new(GetCoinSettingResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetCoinSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetCoinSettingByCoin(ctx context.Context, in *GetCoinSettingByCoinRequest, opts ...grpc.CallOption) (*GetCoinSettingByCoinResponse, error) {
	out := new(GetCoinSettingByCoinResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetCoinSettingByCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) CreateGoodBenefit(ctx context.Context, in *CreateGoodBenefitRequest, opts ...grpc.CallOption) (*CreateGoodBenefitResponse, error) {
	out := new(CreateGoodBenefitResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/CreateGoodBenefit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) UpdateGoodBenefit(ctx context.Context, in *UpdateGoodBenefitRequest, opts ...grpc.CallOption) (*UpdateGoodBenefitResponse, error) {
	out := new(UpdateGoodBenefitResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/UpdateGoodBenefit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetGoodBenefit(ctx context.Context, in *GetGoodBenefitRequest, opts ...grpc.CallOption) (*GetGoodBenefitResponse, error) {
	out := new(GetGoodBenefitResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetGoodBenefit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetGoodBenefitByGood(ctx context.Context, in *GetGoodBenefitByGoodRequest, opts ...grpc.CallOption) (*GetGoodBenefitByGoodResponse, error) {
	out := new(GetGoodBenefitByGoodResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetGoodBenefitByGood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) CreateGoodPayment(ctx context.Context, in *CreateGoodPaymentRequest, opts ...grpc.CallOption) (*CreateGoodPaymentResponse, error) {
	out := new(CreateGoodPaymentResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/CreateGoodPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) UpdateGoodPayment(ctx context.Context, in *UpdateGoodPaymentRequest, opts ...grpc.CallOption) (*UpdateGoodPaymentResponse, error) {
	out := new(UpdateGoodPaymentResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/UpdateGoodPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetGoodPayment(ctx context.Context, in *GetGoodPaymentRequest, opts ...grpc.CallOption) (*GetGoodPaymentResponse, error) {
	out := new(GetGoodPaymentResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetGoodPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetGoodPayments(ctx context.Context, in *GetGoodPaymentsRequest, opts ...grpc.CallOption) (*GetGoodPaymentsResponse, error) {
	out := new(GetGoodPaymentsResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetGoodPayments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetGoodPaymentsByGood(ctx context.Context, in *GetGoodPaymentsByGoodRequest, opts ...grpc.CallOption) (*GetGoodPaymentsByGoodResponse, error) {
	out := new(GetGoodPaymentsByGoodResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetGoodPaymentsByGood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetIdleGoodPaymentsByGood(ctx context.Context, in *GetIdleGoodPaymentsByGoodRequest, opts ...grpc.CallOption) (*GetIdleGoodPaymentsByGoodResponse, error) {
	out := new(GetIdleGoodPaymentsByGoodResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetIdleGoodPaymentsByGood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetIdleGoodPaymentsByGoodPaymentCoin(ctx context.Context, in *GetIdleGoodPaymentsByGoodPaymentCoinRequest, opts ...grpc.CallOption) (*GetIdleGoodPaymentsByGoodPaymentCoinResponse, error) {
	out := new(GetIdleGoodPaymentsByGoodPaymentCoinResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetIdleGoodPaymentsByGoodPaymentCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetGoodPaymentByAccount(ctx context.Context, in *GetGoodPaymentByAccountRequest, opts ...grpc.CallOption) (*GetGoodPaymentByAccountResponse, error) {
	out := new(GetGoodPaymentByAccountResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetGoodPaymentByAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) CreateUserWithdraw(ctx context.Context, in *CreateUserWithdrawRequest, opts ...grpc.CallOption) (*CreateUserWithdrawResponse, error) {
	out := new(CreateUserWithdrawResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/CreateUserWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) UpdateUserWithdraw(ctx context.Context, in *UpdateUserWithdrawRequest, opts ...grpc.CallOption) (*UpdateUserWithdrawResponse, error) {
	out := new(UpdateUserWithdrawResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/UpdateUserWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetUserWithdraw(ctx context.Context, in *GetUserWithdrawRequest, opts ...grpc.CallOption) (*GetUserWithdrawResponse, error) {
	out := new(GetUserWithdrawResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetUserWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetUserWithdrawsByAppUser(ctx context.Context, in *GetUserWithdrawsByAppUserRequest, opts ...grpc.CallOption) (*GetUserWithdrawsByAppUserResponse, error) {
	out := new(GetUserWithdrawsByAppUserResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetUserWithdrawsByAppUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetUserWithdrawsByOtherAppUser(ctx context.Context, in *GetUserWithdrawsByOtherAppUserRequest, opts ...grpc.CallOption) (*GetUserWithdrawsByOtherAppUserResponse, error) {
	out := new(GetUserWithdrawsByOtherAppUserResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetUserWithdrawsByOtherAppUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetUserWithdrawByAccount(ctx context.Context, in *GetUserWithdrawByAccountRequest, opts ...grpc.CallOption) (*GetUserWithdrawByAccountResponse, error) {
	out := new(GetUserWithdrawByAccountResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetUserWithdrawByAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) CreateUserDirectBenefit(ctx context.Context, in *CreateUserDirectBenefitRequest, opts ...grpc.CallOption) (*CreateUserDirectBenefitResponse, error) {
	out := new(CreateUserDirectBenefitResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/CreateUserDirectBenefit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) UpdateUserDirectBenefit(ctx context.Context, in *UpdateUserDirectBenefitRequest, opts ...grpc.CallOption) (*UpdateUserDirectBenefitResponse, error) {
	out := new(UpdateUserDirectBenefitResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/UpdateUserDirectBenefit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetUserDirectBenefit(ctx context.Context, in *GetUserDirectBenefitRequest, opts ...grpc.CallOption) (*GetUserDirectBenefitResponse, error) {
	out := new(GetUserDirectBenefitResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetUserDirectBenefit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetUserDirectBenefitsByAppUser(ctx context.Context, in *GetUserDirectBenefitsByAppUserRequest, opts ...grpc.CallOption) (*GetUserDirectBenefitsByAppUserResponse, error) {
	out := new(GetUserDirectBenefitsByAppUserResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetUserDirectBenefitsByAppUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetUserDirectBenefitsByOtherAppUser(ctx context.Context, in *GetUserDirectBenefitsByOtherAppUserRequest, opts ...grpc.CallOption) (*GetUserDirectBenefitsByOtherAppUserResponse, error) {
	out := new(GetUserDirectBenefitsByOtherAppUserResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetUserDirectBenefitsByOtherAppUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetUserDirectBenefitByAccount(ctx context.Context, in *GetUserDirectBenefitByAccountRequest, opts ...grpc.CallOption) (*GetUserDirectBenefitByAccountResponse, error) {
	out := new(GetUserDirectBenefitByAccountResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetUserDirectBenefitByAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) CreateUserWithdrawItem(ctx context.Context, in *CreateUserWithdrawItemRequest, opts ...grpc.CallOption) (*CreateUserWithdrawItemResponse, error) {
	out := new(CreateUserWithdrawItemResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/CreateUserWithdrawItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) UpdateUserWithdrawItem(ctx context.Context, in *UpdateUserWithdrawItemRequest, opts ...grpc.CallOption) (*UpdateUserWithdrawItemResponse, error) {
	out := new(UpdateUserWithdrawItemResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/UpdateUserWithdrawItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetUserWithdrawItem(ctx context.Context, in *GetUserWithdrawItemRequest, opts ...grpc.CallOption) (*GetUserWithdrawItemResponse, error) {
	out := new(GetUserWithdrawItemResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetUserWithdrawItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetUserWithdrawItemsByAccount(ctx context.Context, in *GetUserWithdrawItemsByAccountRequest, opts ...grpc.CallOption) (*GetUserWithdrawItemsByAccountResponse, error) {
	out := new(GetUserWithdrawItemsByAccountResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetUserWithdrawItemsByAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetUserWithdrawItemsByAppUser(ctx context.Context, in *GetUserWithdrawItemsByAppUserRequest, opts ...grpc.CallOption) (*GetUserWithdrawItemsByAppUserResponse, error) {
	out := new(GetUserWithdrawItemsByAppUserResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetUserWithdrawItemsByAppUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetUserWithdrawItemsByOtherAppUser(ctx context.Context, in *GetUserWithdrawItemsByOtherAppUserRequest, opts ...grpc.CallOption) (*GetUserWithdrawItemsByOtherAppUserResponse, error) {
	out := new(GetUserWithdrawItemsByOtherAppUserResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetUserWithdrawItemsByOtherAppUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) CreateAppWithdrawSetting(ctx context.Context, in *CreateAppWithdrawSettingRequest, opts ...grpc.CallOption) (*CreateAppWithdrawSettingResponse, error) {
	out := new(CreateAppWithdrawSettingResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/CreateAppWithdrawSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) UpdateAppWithdrawSetting(ctx context.Context, in *UpdateAppWithdrawSettingRequest, opts ...grpc.CallOption) (*UpdateAppWithdrawSettingResponse, error) {
	out := new(UpdateAppWithdrawSettingResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/UpdateAppWithdrawSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetAppWithdrawSetting(ctx context.Context, in *GetAppWithdrawSettingRequest, opts ...grpc.CallOption) (*GetAppWithdrawSettingResponse, error) {
	out := new(GetAppWithdrawSettingResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetAppWithdrawSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetAppWithdrawSettingsByApp(ctx context.Context, in *GetAppWithdrawSettingsByAppRequest, opts ...grpc.CallOption) (*GetAppWithdrawSettingsByAppResponse, error) {
	out := new(GetAppWithdrawSettingsByAppResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetAppWithdrawSettingsByApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetAppWithdrawSettingByAppCoin(ctx context.Context, in *GetAppWithdrawSettingByAppCoinRequest, opts ...grpc.CallOption) (*GetAppWithdrawSettingByAppCoinResponse, error) {
	out := new(GetAppWithdrawSettingByAppCoinResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetAppWithdrawSettingByAppCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetAppWithdrawSettingsByOtherApp(ctx context.Context, in *GetAppWithdrawSettingsByOtherAppRequest, opts ...grpc.CallOption) (*GetAppWithdrawSettingsByOtherAppResponse, error) {
	out := new(GetAppWithdrawSettingsByOtherAppResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetAppWithdrawSettingsByOtherApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudHashingBillingServer is the server API for CloudHashingBilling service.
// All implementations must embed UnimplementedCloudHashingBillingServer
// for forward compatibility
type CloudHashingBillingServer interface {
	// Method Version
	Version(context.Context, *emptypb.Empty) (*npool.VersionResponse, error)
	CreateCoinAccount(context.Context, *CreateCoinAccountRequest) (*CreateCoinAccountResponse, error)
	GetCoinAccount(context.Context, *GetCoinAccountRequest) (*GetCoinAccountResponse, error)
	GetCoinAccountByCoinAddress(context.Context, *GetCoinAccountByCoinAddressRequest) (*GetCoinAccountByCoinAddressResponse, error)
	GetCoinAccounts(context.Context, *GetCoinAccountsRequest) (*GetCoinAccountsResponse, error)
	DeleteCoinAccount(context.Context, *DeleteCoinAccountRequest) (*DeleteCoinAccountResponse, error)
	CreateCoinAccountTransaction(context.Context, *CreateCoinAccountTransactionRequest) (*CreateCoinAccountTransactionResponse, error)
	GetCoinAccountTransaction(context.Context, *GetCoinAccountTransactionRequest) (*GetCoinAccountTransactionResponse, error)
	GetCoinAccountTransactionsByCoinAccount(context.Context, *GetCoinAccountTransactionsByCoinAccountRequest) (*GetCoinAccountTransactionsByCoinAccountResponse, error)
	GetCoinAccountTransactionsByState(context.Context, *GetCoinAccountTransactionsByStateRequest) (*GetCoinAccountTransactionsByStateResponse, error)
	GetCoinAccountTransactionsByCoin(context.Context, *GetCoinAccountTransactionsByCoinRequest) (*GetCoinAccountTransactionsByCoinResponse, error)
	UpdateCoinAccountTransaction(context.Context, *UpdateCoinAccountTransactionRequest) (*UpdateCoinAccountTransactionResponse, error)
	GetCoinAccountTransactionDetail(context.Context, *GetCoinAccountTransactionDetailRequest) (*GetCoinAccountTransactionDetailResponse, error)
	DeleteCoinAccountTransaction(context.Context, *DeleteCoinAccountTransactionRequest) (*DeleteCoinAccountTransactionResponse, error)
	CreatePlatformBenefit(context.Context, *CreatePlatformBenefitRequest) (*CreatePlatformBenefitResponse, error)
	GetLatestPlatformBenefitByGood(context.Context, *GetLatestPlatformBenefitByGoodRequest) (*GetLatestPlatformBenefitByGoodResponse, error)
	GetPlatformBenefitsByGood(context.Context, *GetPlatformBenefitsByGoodRequest) (*GetPlatformBenefitsByGoodResponse, error)
	GetPlatformBenefit(context.Context, *GetPlatformBenefitRequest) (*GetPlatformBenefitResponse, error)
	GetPlatformBenefitDetail(context.Context, *GetPlatformBenefitDetailRequest) (*GetPlatformBenefitDetailResponse, error)
	CreatePlatformSetting(context.Context, *CreatePlatformSettingRequest) (*CreatePlatformSettingResponse, error)
	UpdatePlatformSetting(context.Context, *UpdatePlatformSettingRequest) (*UpdatePlatformSettingResponse, error)
	GetPlatformSetting(context.Context, *GetPlatformSettingRequest) (*GetPlatformSettingResponse, error)
	CreateUserBenefit(context.Context, *CreateUserBenefitRequest) (*CreateUserBenefitResponse, error)
	GetUserBenefitsByAppUser(context.Context, *GetUserBenefitsByAppUserRequest) (*GetUserBenefitsByAppUserResponse, error)
	GetUserBenefitsByApp(context.Context, *GetUserBenefitsByAppRequest) (*GetUserBenefitsByAppResponse, error)
	GetLatestUserBenefitByGoodAppUser(context.Context, *GetLatestUserBenefitByGoodAppUserRequest) (*GetLatestUserBenefitByGoodAppUserResponse, error)
	CreateCoinSetting(context.Context, *CreateCoinSettingRequest) (*CreateCoinSettingResponse, error)
	UpdateCoinSetting(context.Context, *UpdateCoinSettingRequest) (*UpdateCoinSettingResponse, error)
	GetCoinSetting(context.Context, *GetCoinSettingRequest) (*GetCoinSettingResponse, error)
	GetCoinSettingByCoin(context.Context, *GetCoinSettingByCoinRequest) (*GetCoinSettingByCoinResponse, error)
	CreateGoodBenefit(context.Context, *CreateGoodBenefitRequest) (*CreateGoodBenefitResponse, error)
	UpdateGoodBenefit(context.Context, *UpdateGoodBenefitRequest) (*UpdateGoodBenefitResponse, error)
	GetGoodBenefit(context.Context, *GetGoodBenefitRequest) (*GetGoodBenefitResponse, error)
	GetGoodBenefitByGood(context.Context, *GetGoodBenefitByGoodRequest) (*GetGoodBenefitByGoodResponse, error)
	CreateGoodPayment(context.Context, *CreateGoodPaymentRequest) (*CreateGoodPaymentResponse, error)
	UpdateGoodPayment(context.Context, *UpdateGoodPaymentRequest) (*UpdateGoodPaymentResponse, error)
	GetGoodPayment(context.Context, *GetGoodPaymentRequest) (*GetGoodPaymentResponse, error)
	GetGoodPayments(context.Context, *GetGoodPaymentsRequest) (*GetGoodPaymentsResponse, error)
	GetGoodPaymentsByGood(context.Context, *GetGoodPaymentsByGoodRequest) (*GetGoodPaymentsByGoodResponse, error)
	GetIdleGoodPaymentsByGood(context.Context, *GetIdleGoodPaymentsByGoodRequest) (*GetIdleGoodPaymentsByGoodResponse, error)
	GetIdleGoodPaymentsByGoodPaymentCoin(context.Context, *GetIdleGoodPaymentsByGoodPaymentCoinRequest) (*GetIdleGoodPaymentsByGoodPaymentCoinResponse, error)
	GetGoodPaymentByAccount(context.Context, *GetGoodPaymentByAccountRequest) (*GetGoodPaymentByAccountResponse, error)
	CreateUserWithdraw(context.Context, *CreateUserWithdrawRequest) (*CreateUserWithdrawResponse, error)
	UpdateUserWithdraw(context.Context, *UpdateUserWithdrawRequest) (*UpdateUserWithdrawResponse, error)
	GetUserWithdraw(context.Context, *GetUserWithdrawRequest) (*GetUserWithdrawResponse, error)
	GetUserWithdrawsByAppUser(context.Context, *GetUserWithdrawsByAppUserRequest) (*GetUserWithdrawsByAppUserResponse, error)
	GetUserWithdrawsByOtherAppUser(context.Context, *GetUserWithdrawsByOtherAppUserRequest) (*GetUserWithdrawsByOtherAppUserResponse, error)
	GetUserWithdrawByAccount(context.Context, *GetUserWithdrawByAccountRequest) (*GetUserWithdrawByAccountResponse, error)
	CreateUserDirectBenefit(context.Context, *CreateUserDirectBenefitRequest) (*CreateUserDirectBenefitResponse, error)
	UpdateUserDirectBenefit(context.Context, *UpdateUserDirectBenefitRequest) (*UpdateUserDirectBenefitResponse, error)
	GetUserDirectBenefit(context.Context, *GetUserDirectBenefitRequest) (*GetUserDirectBenefitResponse, error)
	GetUserDirectBenefitsByAppUser(context.Context, *GetUserDirectBenefitsByAppUserRequest) (*GetUserDirectBenefitsByAppUserResponse, error)
	GetUserDirectBenefitsByOtherAppUser(context.Context, *GetUserDirectBenefitsByOtherAppUserRequest) (*GetUserDirectBenefitsByOtherAppUserResponse, error)
	GetUserDirectBenefitByAccount(context.Context, *GetUserDirectBenefitByAccountRequest) (*GetUserDirectBenefitByAccountResponse, error)
	CreateUserWithdrawItem(context.Context, *CreateUserWithdrawItemRequest) (*CreateUserWithdrawItemResponse, error)
	UpdateUserWithdrawItem(context.Context, *UpdateUserWithdrawItemRequest) (*UpdateUserWithdrawItemResponse, error)
	GetUserWithdrawItem(context.Context, *GetUserWithdrawItemRequest) (*GetUserWithdrawItemResponse, error)
	GetUserWithdrawItemsByAccount(context.Context, *GetUserWithdrawItemsByAccountRequest) (*GetUserWithdrawItemsByAccountResponse, error)
	GetUserWithdrawItemsByAppUser(context.Context, *GetUserWithdrawItemsByAppUserRequest) (*GetUserWithdrawItemsByAppUserResponse, error)
	GetUserWithdrawItemsByOtherAppUser(context.Context, *GetUserWithdrawItemsByOtherAppUserRequest) (*GetUserWithdrawItemsByOtherAppUserResponse, error)
	CreateAppWithdrawSetting(context.Context, *CreateAppWithdrawSettingRequest) (*CreateAppWithdrawSettingResponse, error)
	UpdateAppWithdrawSetting(context.Context, *UpdateAppWithdrawSettingRequest) (*UpdateAppWithdrawSettingResponse, error)
	GetAppWithdrawSetting(context.Context, *GetAppWithdrawSettingRequest) (*GetAppWithdrawSettingResponse, error)
	GetAppWithdrawSettingsByApp(context.Context, *GetAppWithdrawSettingsByAppRequest) (*GetAppWithdrawSettingsByAppResponse, error)
	GetAppWithdrawSettingByAppCoin(context.Context, *GetAppWithdrawSettingByAppCoinRequest) (*GetAppWithdrawSettingByAppCoinResponse, error)
	GetAppWithdrawSettingsByOtherApp(context.Context, *GetAppWithdrawSettingsByOtherAppRequest) (*GetAppWithdrawSettingsByOtherAppResponse, error)
	mustEmbedUnimplementedCloudHashingBillingServer()
}

// UnimplementedCloudHashingBillingServer must be embedded to have forward compatible implementations.
type UnimplementedCloudHashingBillingServer struct {
}

func (UnimplementedCloudHashingBillingServer) Version(context.Context, *emptypb.Empty) (*npool.VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedCloudHashingBillingServer) CreateCoinAccount(context.Context, *CreateCoinAccountRequest) (*CreateCoinAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCoinAccount not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetCoinAccount(context.Context, *GetCoinAccountRequest) (*GetCoinAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinAccount not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetCoinAccountByCoinAddress(context.Context, *GetCoinAccountByCoinAddressRequest) (*GetCoinAccountByCoinAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinAccountByCoinAddress not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetCoinAccounts(context.Context, *GetCoinAccountsRequest) (*GetCoinAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinAccounts not implemented")
}
func (UnimplementedCloudHashingBillingServer) DeleteCoinAccount(context.Context, *DeleteCoinAccountRequest) (*DeleteCoinAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCoinAccount not implemented")
}
func (UnimplementedCloudHashingBillingServer) CreateCoinAccountTransaction(context.Context, *CreateCoinAccountTransactionRequest) (*CreateCoinAccountTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCoinAccountTransaction not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetCoinAccountTransaction(context.Context, *GetCoinAccountTransactionRequest) (*GetCoinAccountTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinAccountTransaction not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetCoinAccountTransactionsByCoinAccount(context.Context, *GetCoinAccountTransactionsByCoinAccountRequest) (*GetCoinAccountTransactionsByCoinAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinAccountTransactionsByCoinAccount not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetCoinAccountTransactionsByState(context.Context, *GetCoinAccountTransactionsByStateRequest) (*GetCoinAccountTransactionsByStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinAccountTransactionsByState not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetCoinAccountTransactionsByCoin(context.Context, *GetCoinAccountTransactionsByCoinRequest) (*GetCoinAccountTransactionsByCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinAccountTransactionsByCoin not implemented")
}
func (UnimplementedCloudHashingBillingServer) UpdateCoinAccountTransaction(context.Context, *UpdateCoinAccountTransactionRequest) (*UpdateCoinAccountTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCoinAccountTransaction not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetCoinAccountTransactionDetail(context.Context, *GetCoinAccountTransactionDetailRequest) (*GetCoinAccountTransactionDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinAccountTransactionDetail not implemented")
}
func (UnimplementedCloudHashingBillingServer) DeleteCoinAccountTransaction(context.Context, *DeleteCoinAccountTransactionRequest) (*DeleteCoinAccountTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCoinAccountTransaction not implemented")
}
func (UnimplementedCloudHashingBillingServer) CreatePlatformBenefit(context.Context, *CreatePlatformBenefitRequest) (*CreatePlatformBenefitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlatformBenefit not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetLatestPlatformBenefitByGood(context.Context, *GetLatestPlatformBenefitByGoodRequest) (*GetLatestPlatformBenefitByGoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestPlatformBenefitByGood not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetPlatformBenefitsByGood(context.Context, *GetPlatformBenefitsByGoodRequest) (*GetPlatformBenefitsByGoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlatformBenefitsByGood not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetPlatformBenefit(context.Context, *GetPlatformBenefitRequest) (*GetPlatformBenefitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlatformBenefit not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetPlatformBenefitDetail(context.Context, *GetPlatformBenefitDetailRequest) (*GetPlatformBenefitDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlatformBenefitDetail not implemented")
}
func (UnimplementedCloudHashingBillingServer) CreatePlatformSetting(context.Context, *CreatePlatformSettingRequest) (*CreatePlatformSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlatformSetting not implemented")
}
func (UnimplementedCloudHashingBillingServer) UpdatePlatformSetting(context.Context, *UpdatePlatformSettingRequest) (*UpdatePlatformSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlatformSetting not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetPlatformSetting(context.Context, *GetPlatformSettingRequest) (*GetPlatformSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlatformSetting not implemented")
}
func (UnimplementedCloudHashingBillingServer) CreateUserBenefit(context.Context, *CreateUserBenefitRequest) (*CreateUserBenefitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserBenefit not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetUserBenefitsByAppUser(context.Context, *GetUserBenefitsByAppUserRequest) (*GetUserBenefitsByAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBenefitsByAppUser not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetUserBenefitsByApp(context.Context, *GetUserBenefitsByAppRequest) (*GetUserBenefitsByAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBenefitsByApp not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetLatestUserBenefitByGoodAppUser(context.Context, *GetLatestUserBenefitByGoodAppUserRequest) (*GetLatestUserBenefitByGoodAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestUserBenefitByGoodAppUser not implemented")
}
func (UnimplementedCloudHashingBillingServer) CreateCoinSetting(context.Context, *CreateCoinSettingRequest) (*CreateCoinSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCoinSetting not implemented")
}
func (UnimplementedCloudHashingBillingServer) UpdateCoinSetting(context.Context, *UpdateCoinSettingRequest) (*UpdateCoinSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCoinSetting not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetCoinSetting(context.Context, *GetCoinSettingRequest) (*GetCoinSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinSetting not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetCoinSettingByCoin(context.Context, *GetCoinSettingByCoinRequest) (*GetCoinSettingByCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinSettingByCoin not implemented")
}
func (UnimplementedCloudHashingBillingServer) CreateGoodBenefit(context.Context, *CreateGoodBenefitRequest) (*CreateGoodBenefitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGoodBenefit not implemented")
}
func (UnimplementedCloudHashingBillingServer) UpdateGoodBenefit(context.Context, *UpdateGoodBenefitRequest) (*UpdateGoodBenefitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGoodBenefit not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetGoodBenefit(context.Context, *GetGoodBenefitRequest) (*GetGoodBenefitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodBenefit not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetGoodBenefitByGood(context.Context, *GetGoodBenefitByGoodRequest) (*GetGoodBenefitByGoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodBenefitByGood not implemented")
}
func (UnimplementedCloudHashingBillingServer) CreateGoodPayment(context.Context, *CreateGoodPaymentRequest) (*CreateGoodPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGoodPayment not implemented")
}
func (UnimplementedCloudHashingBillingServer) UpdateGoodPayment(context.Context, *UpdateGoodPaymentRequest) (*UpdateGoodPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGoodPayment not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetGoodPayment(context.Context, *GetGoodPaymentRequest) (*GetGoodPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodPayment not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetGoodPayments(context.Context, *GetGoodPaymentsRequest) (*GetGoodPaymentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodPayments not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetGoodPaymentsByGood(context.Context, *GetGoodPaymentsByGoodRequest) (*GetGoodPaymentsByGoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodPaymentsByGood not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetIdleGoodPaymentsByGood(context.Context, *GetIdleGoodPaymentsByGoodRequest) (*GetIdleGoodPaymentsByGoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdleGoodPaymentsByGood not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetIdleGoodPaymentsByGoodPaymentCoin(context.Context, *GetIdleGoodPaymentsByGoodPaymentCoinRequest) (*GetIdleGoodPaymentsByGoodPaymentCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdleGoodPaymentsByGoodPaymentCoin not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetGoodPaymentByAccount(context.Context, *GetGoodPaymentByAccountRequest) (*GetGoodPaymentByAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodPaymentByAccount not implemented")
}
func (UnimplementedCloudHashingBillingServer) CreateUserWithdraw(context.Context, *CreateUserWithdrawRequest) (*CreateUserWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserWithdraw not implemented")
}
func (UnimplementedCloudHashingBillingServer) UpdateUserWithdraw(context.Context, *UpdateUserWithdrawRequest) (*UpdateUserWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserWithdraw not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetUserWithdraw(context.Context, *GetUserWithdrawRequest) (*GetUserWithdrawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserWithdraw not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetUserWithdrawsByAppUser(context.Context, *GetUserWithdrawsByAppUserRequest) (*GetUserWithdrawsByAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserWithdrawsByAppUser not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetUserWithdrawsByOtherAppUser(context.Context, *GetUserWithdrawsByOtherAppUserRequest) (*GetUserWithdrawsByOtherAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserWithdrawsByOtherAppUser not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetUserWithdrawByAccount(context.Context, *GetUserWithdrawByAccountRequest) (*GetUserWithdrawByAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserWithdrawByAccount not implemented")
}
func (UnimplementedCloudHashingBillingServer) CreateUserDirectBenefit(context.Context, *CreateUserDirectBenefitRequest) (*CreateUserDirectBenefitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserDirectBenefit not implemented")
}
func (UnimplementedCloudHashingBillingServer) UpdateUserDirectBenefit(context.Context, *UpdateUserDirectBenefitRequest) (*UpdateUserDirectBenefitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserDirectBenefit not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetUserDirectBenefit(context.Context, *GetUserDirectBenefitRequest) (*GetUserDirectBenefitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDirectBenefit not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetUserDirectBenefitsByAppUser(context.Context, *GetUserDirectBenefitsByAppUserRequest) (*GetUserDirectBenefitsByAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDirectBenefitsByAppUser not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetUserDirectBenefitsByOtherAppUser(context.Context, *GetUserDirectBenefitsByOtherAppUserRequest) (*GetUserDirectBenefitsByOtherAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDirectBenefitsByOtherAppUser not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetUserDirectBenefitByAccount(context.Context, *GetUserDirectBenefitByAccountRequest) (*GetUserDirectBenefitByAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDirectBenefitByAccount not implemented")
}
func (UnimplementedCloudHashingBillingServer) CreateUserWithdrawItem(context.Context, *CreateUserWithdrawItemRequest) (*CreateUserWithdrawItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserWithdrawItem not implemented")
}
func (UnimplementedCloudHashingBillingServer) UpdateUserWithdrawItem(context.Context, *UpdateUserWithdrawItemRequest) (*UpdateUserWithdrawItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserWithdrawItem not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetUserWithdrawItem(context.Context, *GetUserWithdrawItemRequest) (*GetUserWithdrawItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserWithdrawItem not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetUserWithdrawItemsByAccount(context.Context, *GetUserWithdrawItemsByAccountRequest) (*GetUserWithdrawItemsByAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserWithdrawItemsByAccount not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetUserWithdrawItemsByAppUser(context.Context, *GetUserWithdrawItemsByAppUserRequest) (*GetUserWithdrawItemsByAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserWithdrawItemsByAppUser not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetUserWithdrawItemsByOtherAppUser(context.Context, *GetUserWithdrawItemsByOtherAppUserRequest) (*GetUserWithdrawItemsByOtherAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserWithdrawItemsByOtherAppUser not implemented")
}
func (UnimplementedCloudHashingBillingServer) CreateAppWithdrawSetting(context.Context, *CreateAppWithdrawSettingRequest) (*CreateAppWithdrawSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppWithdrawSetting not implemented")
}
func (UnimplementedCloudHashingBillingServer) UpdateAppWithdrawSetting(context.Context, *UpdateAppWithdrawSettingRequest) (*UpdateAppWithdrawSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppWithdrawSetting not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetAppWithdrawSetting(context.Context, *GetAppWithdrawSettingRequest) (*GetAppWithdrawSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppWithdrawSetting not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetAppWithdrawSettingsByApp(context.Context, *GetAppWithdrawSettingsByAppRequest) (*GetAppWithdrawSettingsByAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppWithdrawSettingsByApp not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetAppWithdrawSettingByAppCoin(context.Context, *GetAppWithdrawSettingByAppCoinRequest) (*GetAppWithdrawSettingByAppCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppWithdrawSettingByAppCoin not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetAppWithdrawSettingsByOtherApp(context.Context, *GetAppWithdrawSettingsByOtherAppRequest) (*GetAppWithdrawSettingsByOtherAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppWithdrawSettingsByOtherApp not implemented")
}
func (UnimplementedCloudHashingBillingServer) mustEmbedUnimplementedCloudHashingBillingServer() {}

// UnsafeCloudHashingBillingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudHashingBillingServer will
// result in compilation errors.
type UnsafeCloudHashingBillingServer interface {
	mustEmbedUnimplementedCloudHashingBillingServer()
}

func RegisterCloudHashingBillingServer(s grpc.ServiceRegistrar, srv CloudHashingBillingServer) {
	s.RegisterService(&CloudHashingBilling_ServiceDesc, srv)
}

func _CloudHashingBilling_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_CreateCoinAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCoinAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).CreateCoinAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/CreateCoinAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).CreateCoinAccount(ctx, req.(*CreateCoinAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetCoinAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetCoinAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetCoinAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetCoinAccount(ctx, req.(*GetCoinAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetCoinAccountByCoinAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinAccountByCoinAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetCoinAccountByCoinAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetCoinAccountByCoinAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetCoinAccountByCoinAddress(ctx, req.(*GetCoinAccountByCoinAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetCoinAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetCoinAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetCoinAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetCoinAccounts(ctx, req.(*GetCoinAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_DeleteCoinAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCoinAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).DeleteCoinAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/DeleteCoinAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).DeleteCoinAccount(ctx, req.(*DeleteCoinAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_CreateCoinAccountTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCoinAccountTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).CreateCoinAccountTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/CreateCoinAccountTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).CreateCoinAccountTransaction(ctx, req.(*CreateCoinAccountTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetCoinAccountTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinAccountTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetCoinAccountTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetCoinAccountTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetCoinAccountTransaction(ctx, req.(*GetCoinAccountTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetCoinAccountTransactionsByCoinAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinAccountTransactionsByCoinAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetCoinAccountTransactionsByCoinAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetCoinAccountTransactionsByCoinAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetCoinAccountTransactionsByCoinAccount(ctx, req.(*GetCoinAccountTransactionsByCoinAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetCoinAccountTransactionsByState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinAccountTransactionsByStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetCoinAccountTransactionsByState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetCoinAccountTransactionsByState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetCoinAccountTransactionsByState(ctx, req.(*GetCoinAccountTransactionsByStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetCoinAccountTransactionsByCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinAccountTransactionsByCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetCoinAccountTransactionsByCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetCoinAccountTransactionsByCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetCoinAccountTransactionsByCoin(ctx, req.(*GetCoinAccountTransactionsByCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_UpdateCoinAccountTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCoinAccountTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).UpdateCoinAccountTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/UpdateCoinAccountTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).UpdateCoinAccountTransaction(ctx, req.(*UpdateCoinAccountTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetCoinAccountTransactionDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinAccountTransactionDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetCoinAccountTransactionDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetCoinAccountTransactionDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetCoinAccountTransactionDetail(ctx, req.(*GetCoinAccountTransactionDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_DeleteCoinAccountTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCoinAccountTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).DeleteCoinAccountTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/DeleteCoinAccountTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).DeleteCoinAccountTransaction(ctx, req.(*DeleteCoinAccountTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_CreatePlatformBenefit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlatformBenefitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).CreatePlatformBenefit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/CreatePlatformBenefit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).CreatePlatformBenefit(ctx, req.(*CreatePlatformBenefitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetLatestPlatformBenefitByGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestPlatformBenefitByGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetLatestPlatformBenefitByGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetLatestPlatformBenefitByGood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetLatestPlatformBenefitByGood(ctx, req.(*GetLatestPlatformBenefitByGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetPlatformBenefitsByGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlatformBenefitsByGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetPlatformBenefitsByGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetPlatformBenefitsByGood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetPlatformBenefitsByGood(ctx, req.(*GetPlatformBenefitsByGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetPlatformBenefit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlatformBenefitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetPlatformBenefit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetPlatformBenefit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetPlatformBenefit(ctx, req.(*GetPlatformBenefitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetPlatformBenefitDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlatformBenefitDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetPlatformBenefitDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetPlatformBenefitDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetPlatformBenefitDetail(ctx, req.(*GetPlatformBenefitDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_CreatePlatformSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlatformSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).CreatePlatformSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/CreatePlatformSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).CreatePlatformSetting(ctx, req.(*CreatePlatformSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_UpdatePlatformSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlatformSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).UpdatePlatformSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/UpdatePlatformSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).UpdatePlatformSetting(ctx, req.(*UpdatePlatformSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetPlatformSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlatformSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetPlatformSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetPlatformSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetPlatformSetting(ctx, req.(*GetPlatformSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_CreateUserBenefit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserBenefitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).CreateUserBenefit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/CreateUserBenefit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).CreateUserBenefit(ctx, req.(*CreateUserBenefitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetUserBenefitsByAppUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserBenefitsByAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetUserBenefitsByAppUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetUserBenefitsByAppUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetUserBenefitsByAppUser(ctx, req.(*GetUserBenefitsByAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetUserBenefitsByApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserBenefitsByAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetUserBenefitsByApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetUserBenefitsByApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetUserBenefitsByApp(ctx, req.(*GetUserBenefitsByAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetLatestUserBenefitByGoodAppUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestUserBenefitByGoodAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetLatestUserBenefitByGoodAppUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetLatestUserBenefitByGoodAppUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetLatestUserBenefitByGoodAppUser(ctx, req.(*GetLatestUserBenefitByGoodAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_CreateCoinSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCoinSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).CreateCoinSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/CreateCoinSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).CreateCoinSetting(ctx, req.(*CreateCoinSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_UpdateCoinSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCoinSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).UpdateCoinSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/UpdateCoinSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).UpdateCoinSetting(ctx, req.(*UpdateCoinSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetCoinSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetCoinSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetCoinSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetCoinSetting(ctx, req.(*GetCoinSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetCoinSettingByCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinSettingByCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetCoinSettingByCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetCoinSettingByCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetCoinSettingByCoin(ctx, req.(*GetCoinSettingByCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_CreateGoodBenefit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGoodBenefitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).CreateGoodBenefit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/CreateGoodBenefit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).CreateGoodBenefit(ctx, req.(*CreateGoodBenefitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_UpdateGoodBenefit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGoodBenefitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).UpdateGoodBenefit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/UpdateGoodBenefit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).UpdateGoodBenefit(ctx, req.(*UpdateGoodBenefitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetGoodBenefit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoodBenefitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetGoodBenefit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetGoodBenefit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetGoodBenefit(ctx, req.(*GetGoodBenefitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetGoodBenefitByGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoodBenefitByGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetGoodBenefitByGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetGoodBenefitByGood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetGoodBenefitByGood(ctx, req.(*GetGoodBenefitByGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_CreateGoodPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGoodPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).CreateGoodPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/CreateGoodPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).CreateGoodPayment(ctx, req.(*CreateGoodPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_UpdateGoodPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGoodPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).UpdateGoodPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/UpdateGoodPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).UpdateGoodPayment(ctx, req.(*UpdateGoodPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetGoodPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoodPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetGoodPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetGoodPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetGoodPayment(ctx, req.(*GetGoodPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetGoodPayments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoodPaymentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetGoodPayments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetGoodPayments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetGoodPayments(ctx, req.(*GetGoodPaymentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetGoodPaymentsByGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoodPaymentsByGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetGoodPaymentsByGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetGoodPaymentsByGood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetGoodPaymentsByGood(ctx, req.(*GetGoodPaymentsByGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetIdleGoodPaymentsByGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdleGoodPaymentsByGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetIdleGoodPaymentsByGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetIdleGoodPaymentsByGood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetIdleGoodPaymentsByGood(ctx, req.(*GetIdleGoodPaymentsByGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetIdleGoodPaymentsByGoodPaymentCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdleGoodPaymentsByGoodPaymentCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetIdleGoodPaymentsByGoodPaymentCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetIdleGoodPaymentsByGoodPaymentCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetIdleGoodPaymentsByGoodPaymentCoin(ctx, req.(*GetIdleGoodPaymentsByGoodPaymentCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetGoodPaymentByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoodPaymentByAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetGoodPaymentByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetGoodPaymentByAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetGoodPaymentByAccount(ctx, req.(*GetGoodPaymentByAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_CreateUserWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).CreateUserWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/CreateUserWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).CreateUserWithdraw(ctx, req.(*CreateUserWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_UpdateUserWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).UpdateUserWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/UpdateUserWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).UpdateUserWithdraw(ctx, req.(*UpdateUserWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetUserWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetUserWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetUserWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetUserWithdraw(ctx, req.(*GetUserWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetUserWithdrawsByAppUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserWithdrawsByAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetUserWithdrawsByAppUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetUserWithdrawsByAppUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetUserWithdrawsByAppUser(ctx, req.(*GetUserWithdrawsByAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetUserWithdrawsByOtherAppUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserWithdrawsByOtherAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetUserWithdrawsByOtherAppUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetUserWithdrawsByOtherAppUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetUserWithdrawsByOtherAppUser(ctx, req.(*GetUserWithdrawsByOtherAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetUserWithdrawByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserWithdrawByAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetUserWithdrawByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetUserWithdrawByAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetUserWithdrawByAccount(ctx, req.(*GetUserWithdrawByAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_CreateUserDirectBenefit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserDirectBenefitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).CreateUserDirectBenefit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/CreateUserDirectBenefit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).CreateUserDirectBenefit(ctx, req.(*CreateUserDirectBenefitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_UpdateUserDirectBenefit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserDirectBenefitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).UpdateUserDirectBenefit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/UpdateUserDirectBenefit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).UpdateUserDirectBenefit(ctx, req.(*UpdateUserDirectBenefitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetUserDirectBenefit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDirectBenefitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetUserDirectBenefit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetUserDirectBenefit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetUserDirectBenefit(ctx, req.(*GetUserDirectBenefitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetUserDirectBenefitsByAppUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDirectBenefitsByAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetUserDirectBenefitsByAppUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetUserDirectBenefitsByAppUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetUserDirectBenefitsByAppUser(ctx, req.(*GetUserDirectBenefitsByAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetUserDirectBenefitsByOtherAppUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDirectBenefitsByOtherAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetUserDirectBenefitsByOtherAppUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetUserDirectBenefitsByOtherAppUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetUserDirectBenefitsByOtherAppUser(ctx, req.(*GetUserDirectBenefitsByOtherAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetUserDirectBenefitByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDirectBenefitByAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetUserDirectBenefitByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetUserDirectBenefitByAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetUserDirectBenefitByAccount(ctx, req.(*GetUserDirectBenefitByAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_CreateUserWithdrawItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserWithdrawItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).CreateUserWithdrawItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/CreateUserWithdrawItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).CreateUserWithdrawItem(ctx, req.(*CreateUserWithdrawItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_UpdateUserWithdrawItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserWithdrawItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).UpdateUserWithdrawItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/UpdateUserWithdrawItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).UpdateUserWithdrawItem(ctx, req.(*UpdateUserWithdrawItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetUserWithdrawItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserWithdrawItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetUserWithdrawItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetUserWithdrawItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetUserWithdrawItem(ctx, req.(*GetUserWithdrawItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetUserWithdrawItemsByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserWithdrawItemsByAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetUserWithdrawItemsByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetUserWithdrawItemsByAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetUserWithdrawItemsByAccount(ctx, req.(*GetUserWithdrawItemsByAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetUserWithdrawItemsByAppUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserWithdrawItemsByAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetUserWithdrawItemsByAppUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetUserWithdrawItemsByAppUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetUserWithdrawItemsByAppUser(ctx, req.(*GetUserWithdrawItemsByAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetUserWithdrawItemsByOtherAppUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserWithdrawItemsByOtherAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetUserWithdrawItemsByOtherAppUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetUserWithdrawItemsByOtherAppUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetUserWithdrawItemsByOtherAppUser(ctx, req.(*GetUserWithdrawItemsByOtherAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_CreateAppWithdrawSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppWithdrawSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).CreateAppWithdrawSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/CreateAppWithdrawSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).CreateAppWithdrawSetting(ctx, req.(*CreateAppWithdrawSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_UpdateAppWithdrawSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppWithdrawSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).UpdateAppWithdrawSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/UpdateAppWithdrawSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).UpdateAppWithdrawSetting(ctx, req.(*UpdateAppWithdrawSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetAppWithdrawSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppWithdrawSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetAppWithdrawSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetAppWithdrawSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetAppWithdrawSetting(ctx, req.(*GetAppWithdrawSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetAppWithdrawSettingsByApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppWithdrawSettingsByAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetAppWithdrawSettingsByApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetAppWithdrawSettingsByApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetAppWithdrawSettingsByApp(ctx, req.(*GetAppWithdrawSettingsByAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetAppWithdrawSettingByAppCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppWithdrawSettingByAppCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetAppWithdrawSettingByAppCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetAppWithdrawSettingByAppCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetAppWithdrawSettingByAppCoin(ctx, req.(*GetAppWithdrawSettingByAppCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetAppWithdrawSettingsByOtherApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppWithdrawSettingsByOtherAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetAppWithdrawSettingsByOtherApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetAppWithdrawSettingsByOtherApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetAppWithdrawSettingsByOtherApp(ctx, req.(*GetAppWithdrawSettingsByOtherAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudHashingBilling_ServiceDesc is the grpc.ServiceDesc for CloudHashingBilling service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudHashingBilling_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.hashing.billing.v1.CloudHashingBilling",
	HandlerType: (*CloudHashingBillingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _CloudHashingBilling_Version_Handler,
		},
		{
			MethodName: "CreateCoinAccount",
			Handler:    _CloudHashingBilling_CreateCoinAccount_Handler,
		},
		{
			MethodName: "GetCoinAccount",
			Handler:    _CloudHashingBilling_GetCoinAccount_Handler,
		},
		{
			MethodName: "GetCoinAccountByCoinAddress",
			Handler:    _CloudHashingBilling_GetCoinAccountByCoinAddress_Handler,
		},
		{
			MethodName: "GetCoinAccounts",
			Handler:    _CloudHashingBilling_GetCoinAccounts_Handler,
		},
		{
			MethodName: "DeleteCoinAccount",
			Handler:    _CloudHashingBilling_DeleteCoinAccount_Handler,
		},
		{
			MethodName: "CreateCoinAccountTransaction",
			Handler:    _CloudHashingBilling_CreateCoinAccountTransaction_Handler,
		},
		{
			MethodName: "GetCoinAccountTransaction",
			Handler:    _CloudHashingBilling_GetCoinAccountTransaction_Handler,
		},
		{
			MethodName: "GetCoinAccountTransactionsByCoinAccount",
			Handler:    _CloudHashingBilling_GetCoinAccountTransactionsByCoinAccount_Handler,
		},
		{
			MethodName: "GetCoinAccountTransactionsByState",
			Handler:    _CloudHashingBilling_GetCoinAccountTransactionsByState_Handler,
		},
		{
			MethodName: "GetCoinAccountTransactionsByCoin",
			Handler:    _CloudHashingBilling_GetCoinAccountTransactionsByCoin_Handler,
		},
		{
			MethodName: "UpdateCoinAccountTransaction",
			Handler:    _CloudHashingBilling_UpdateCoinAccountTransaction_Handler,
		},
		{
			MethodName: "GetCoinAccountTransactionDetail",
			Handler:    _CloudHashingBilling_GetCoinAccountTransactionDetail_Handler,
		},
		{
			MethodName: "DeleteCoinAccountTransaction",
			Handler:    _CloudHashingBilling_DeleteCoinAccountTransaction_Handler,
		},
		{
			MethodName: "CreatePlatformBenefit",
			Handler:    _CloudHashingBilling_CreatePlatformBenefit_Handler,
		},
		{
			MethodName: "GetLatestPlatformBenefitByGood",
			Handler:    _CloudHashingBilling_GetLatestPlatformBenefitByGood_Handler,
		},
		{
			MethodName: "GetPlatformBenefitsByGood",
			Handler:    _CloudHashingBilling_GetPlatformBenefitsByGood_Handler,
		},
		{
			MethodName: "GetPlatformBenefit",
			Handler:    _CloudHashingBilling_GetPlatformBenefit_Handler,
		},
		{
			MethodName: "GetPlatformBenefitDetail",
			Handler:    _CloudHashingBilling_GetPlatformBenefitDetail_Handler,
		},
		{
			MethodName: "CreatePlatformSetting",
			Handler:    _CloudHashingBilling_CreatePlatformSetting_Handler,
		},
		{
			MethodName: "UpdatePlatformSetting",
			Handler:    _CloudHashingBilling_UpdatePlatformSetting_Handler,
		},
		{
			MethodName: "GetPlatformSetting",
			Handler:    _CloudHashingBilling_GetPlatformSetting_Handler,
		},
		{
			MethodName: "CreateUserBenefit",
			Handler:    _CloudHashingBilling_CreateUserBenefit_Handler,
		},
		{
			MethodName: "GetUserBenefitsByAppUser",
			Handler:    _CloudHashingBilling_GetUserBenefitsByAppUser_Handler,
		},
		{
			MethodName: "GetUserBenefitsByApp",
			Handler:    _CloudHashingBilling_GetUserBenefitsByApp_Handler,
		},
		{
			MethodName: "GetLatestUserBenefitByGoodAppUser",
			Handler:    _CloudHashingBilling_GetLatestUserBenefitByGoodAppUser_Handler,
		},
		{
			MethodName: "CreateCoinSetting",
			Handler:    _CloudHashingBilling_CreateCoinSetting_Handler,
		},
		{
			MethodName: "UpdateCoinSetting",
			Handler:    _CloudHashingBilling_UpdateCoinSetting_Handler,
		},
		{
			MethodName: "GetCoinSetting",
			Handler:    _CloudHashingBilling_GetCoinSetting_Handler,
		},
		{
			MethodName: "GetCoinSettingByCoin",
			Handler:    _CloudHashingBilling_GetCoinSettingByCoin_Handler,
		},
		{
			MethodName: "CreateGoodBenefit",
			Handler:    _CloudHashingBilling_CreateGoodBenefit_Handler,
		},
		{
			MethodName: "UpdateGoodBenefit",
			Handler:    _CloudHashingBilling_UpdateGoodBenefit_Handler,
		},
		{
			MethodName: "GetGoodBenefit",
			Handler:    _CloudHashingBilling_GetGoodBenefit_Handler,
		},
		{
			MethodName: "GetGoodBenefitByGood",
			Handler:    _CloudHashingBilling_GetGoodBenefitByGood_Handler,
		},
		{
			MethodName: "CreateGoodPayment",
			Handler:    _CloudHashingBilling_CreateGoodPayment_Handler,
		},
		{
			MethodName: "UpdateGoodPayment",
			Handler:    _CloudHashingBilling_UpdateGoodPayment_Handler,
		},
		{
			MethodName: "GetGoodPayment",
			Handler:    _CloudHashingBilling_GetGoodPayment_Handler,
		},
		{
			MethodName: "GetGoodPayments",
			Handler:    _CloudHashingBilling_GetGoodPayments_Handler,
		},
		{
			MethodName: "GetGoodPaymentsByGood",
			Handler:    _CloudHashingBilling_GetGoodPaymentsByGood_Handler,
		},
		{
			MethodName: "GetIdleGoodPaymentsByGood",
			Handler:    _CloudHashingBilling_GetIdleGoodPaymentsByGood_Handler,
		},
		{
			MethodName: "GetIdleGoodPaymentsByGoodPaymentCoin",
			Handler:    _CloudHashingBilling_GetIdleGoodPaymentsByGoodPaymentCoin_Handler,
		},
		{
			MethodName: "GetGoodPaymentByAccount",
			Handler:    _CloudHashingBilling_GetGoodPaymentByAccount_Handler,
		},
		{
			MethodName: "CreateUserWithdraw",
			Handler:    _CloudHashingBilling_CreateUserWithdraw_Handler,
		},
		{
			MethodName: "UpdateUserWithdraw",
			Handler:    _CloudHashingBilling_UpdateUserWithdraw_Handler,
		},
		{
			MethodName: "GetUserWithdraw",
			Handler:    _CloudHashingBilling_GetUserWithdraw_Handler,
		},
		{
			MethodName: "GetUserWithdrawsByAppUser",
			Handler:    _CloudHashingBilling_GetUserWithdrawsByAppUser_Handler,
		},
		{
			MethodName: "GetUserWithdrawsByOtherAppUser",
			Handler:    _CloudHashingBilling_GetUserWithdrawsByOtherAppUser_Handler,
		},
		{
			MethodName: "GetUserWithdrawByAccount",
			Handler:    _CloudHashingBilling_GetUserWithdrawByAccount_Handler,
		},
		{
			MethodName: "CreateUserDirectBenefit",
			Handler:    _CloudHashingBilling_CreateUserDirectBenefit_Handler,
		},
		{
			MethodName: "UpdateUserDirectBenefit",
			Handler:    _CloudHashingBilling_UpdateUserDirectBenefit_Handler,
		},
		{
			MethodName: "GetUserDirectBenefit",
			Handler:    _CloudHashingBilling_GetUserDirectBenefit_Handler,
		},
		{
			MethodName: "GetUserDirectBenefitsByAppUser",
			Handler:    _CloudHashingBilling_GetUserDirectBenefitsByAppUser_Handler,
		},
		{
			MethodName: "GetUserDirectBenefitsByOtherAppUser",
			Handler:    _CloudHashingBilling_GetUserDirectBenefitsByOtherAppUser_Handler,
		},
		{
			MethodName: "GetUserDirectBenefitByAccount",
			Handler:    _CloudHashingBilling_GetUserDirectBenefitByAccount_Handler,
		},
		{
			MethodName: "CreateUserWithdrawItem",
			Handler:    _CloudHashingBilling_CreateUserWithdrawItem_Handler,
		},
		{
			MethodName: "UpdateUserWithdrawItem",
			Handler:    _CloudHashingBilling_UpdateUserWithdrawItem_Handler,
		},
		{
			MethodName: "GetUserWithdrawItem",
			Handler:    _CloudHashingBilling_GetUserWithdrawItem_Handler,
		},
		{
			MethodName: "GetUserWithdrawItemsByAccount",
			Handler:    _CloudHashingBilling_GetUserWithdrawItemsByAccount_Handler,
		},
		{
			MethodName: "GetUserWithdrawItemsByAppUser",
			Handler:    _CloudHashingBilling_GetUserWithdrawItemsByAppUser_Handler,
		},
		{
			MethodName: "GetUserWithdrawItemsByOtherAppUser",
			Handler:    _CloudHashingBilling_GetUserWithdrawItemsByOtherAppUser_Handler,
		},
		{
			MethodName: "CreateAppWithdrawSetting",
			Handler:    _CloudHashingBilling_CreateAppWithdrawSetting_Handler,
		},
		{
			MethodName: "UpdateAppWithdrawSetting",
			Handler:    _CloudHashingBilling_UpdateAppWithdrawSetting_Handler,
		},
		{
			MethodName: "GetAppWithdrawSetting",
			Handler:    _CloudHashingBilling_GetAppWithdrawSetting_Handler,
		},
		{
			MethodName: "GetAppWithdrawSettingsByApp",
			Handler:    _CloudHashingBilling_GetAppWithdrawSettingsByApp_Handler,
		},
		{
			MethodName: "GetAppWithdrawSettingByAppCoin",
			Handler:    _CloudHashingBilling_GetAppWithdrawSettingByAppCoin_Handler,
		},
		{
			MethodName: "GetAppWithdrawSettingsByOtherApp",
			Handler:    _CloudHashingBilling_GetAppWithdrawSettingsByOtherApp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/cloud-hashing-billing/cloud-hashing-billing.proto",
}
