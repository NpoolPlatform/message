// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package npool

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CloudHashingBillingClient is the client API for CloudHashingBilling service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudHashingBillingClient interface {
	// Method Version
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionResponse, error)
	CreateCoinAccount(ctx context.Context, in *CreateCoinAccountRequest, opts ...grpc.CallOption) (*CreateCoinAccountResponse, error)
	GetCoinAccount(ctx context.Context, in *GetCoinAccountRequest, opts ...grpc.CallOption) (*GetCoinAccountResponse, error)
	GetCoinAccountByCoinAddress(ctx context.Context, in *GetCoinAccountByCoinAddressRequest, opts ...grpc.CallOption) (*GetCoinAccountByCoinAddressResponse, error)
	GetCoinAccountsByAppUser(ctx context.Context, in *GetCoinAccountsByAppUserRequest, opts ...grpc.CallOption) (*GetCoinAccountsByAppUserResponse, error)
	DeleteCoinAccount(ctx context.Context, in *DeleteCoinAccountRequest, opts ...grpc.CallOption) (*DeleteCoinAccountResponse, error)
	CreateCoinAccountTransaction(ctx context.Context, in *CreateCoinAccountTransactionRequest, opts ...grpc.CallOption) (*CreateCoinAccountTransactionResponse, error)
	GetCoinAccountTransaction(ctx context.Context, in *GetCoinAccountTransactionRequest, opts ...grpc.CallOption) (*GetCoinAccountTransactionResponse, error)
	GetCoinAccountTransactionsByCoinAccount(ctx context.Context, in *GetCoinAccountTransactionsByCoinAccountRequest, opts ...grpc.CallOption) (*GetCoinAccountTransactionsByCoinAccountResponse, error)
	GetCoinAccountTransactionsByState(ctx context.Context, in *GetCoinAccountTransactionsByStateRequest, opts ...grpc.CallOption) (*GetCoinAccountTransactionsByStateResponse, error)
	GetCoinAccountTransactionsByCoin(ctx context.Context, in *GetCoinAccountTransactionsByCoinRequest, opts ...grpc.CallOption) (*GetCoinAccountTransactionsByCoinResponse, error)
	UpdateCoinAccountTransaction(ctx context.Context, in *UpdateCoinAccountTransactionRequest, opts ...grpc.CallOption) (*UpdateCoinAccountTransactionResponse, error)
	GetCoinAccountTransactionDetail(ctx context.Context, in *GetCoinAccountTransactionDetailRequest, opts ...grpc.CallOption) (*GetCoinAccountTransactionDetailResponse, error)
	DeleteCoinAccountTransaction(ctx context.Context, in *DeleteCoinAccountTransactionRequest, opts ...grpc.CallOption) (*DeleteCoinAccountTransactionResponse, error)
	CreatePlatformBenefit(ctx context.Context, in *CreatePlatformBenefitRequest, opts ...grpc.CallOption) (*CreatePlatformBenefitResponse, error)
	GetLatestPlatformBenefitByGood(ctx context.Context, in *GetLatestPlatformBenefitByGoodRequest, opts ...grpc.CallOption) (*GetLatestPlatformBenefitByGoodResponse, error)
	GetPlatformBenefitsByGood(ctx context.Context, in *GetPlatformBenefitsByGoodRequest, opts ...grpc.CallOption) (*GetPlatformBenefitsByGoodResponse, error)
	GetPlatformBenefit(ctx context.Context, in *GetPlatformBenefitRequest, opts ...grpc.CallOption) (*GetPlatformBenefitResponse, error)
	GetPlatformBenefitDetail(ctx context.Context, in *GetPlatformBenefitDetailRequest, opts ...grpc.CallOption) (*GetPlatformBenefitDetailResponse, error)
	CreatePlatformSetting(ctx context.Context, in *CreatePlatformSettingRequest, opts ...grpc.CallOption) (*CreatePlatformSettingResponse, error)
	UpdatePlatformSetting(ctx context.Context, in *UpdatePlatformSettingRequest, opts ...grpc.CallOption) (*UpdatePlatformSettingResponse, error)
	GetPlatformSettingByGood(ctx context.Context, in *GetPlatformSettingByGoodRequest, opts ...grpc.CallOption) (*GetPlatformSettingByGoodResponse, error)
	GetPlatformSettingDetail(ctx context.Context, in *GetPlatformSettingDetailRequest, opts ...grpc.CallOption) (*GetPlatformSettingDetailResponse, error)
	GetPlatformSetting(ctx context.Context, in *GetPlatformSettingRequest, opts ...grpc.CallOption) (*GetPlatformSettingResponse, error)
	CreateUserBenefit(ctx context.Context, in *CreateUserBenefitRequest, opts ...grpc.CallOption) (*CreateUserBenefitResponse, error)
	GetUserBenefitsByAppUser(ctx context.Context, in *GetUserBenefitsByAppUserRequest, opts ...grpc.CallOption) (*GetUserBenefitsByAppUserResponse, error)
	GetUserBenefitsByApp(ctx context.Context, in *GetUserBenefitsByAppRequest, opts ...grpc.CallOption) (*GetUserBenefitsByAppResponse, error)
	GetLatestUserBenefitByGoodAppUser(ctx context.Context, in *GetLatestUserBenefitByGoodAppUserRequest, opts ...grpc.CallOption) (*GetLatestUserBenefitByGoodAppUserResponse, error)
}

type cloudHashingBillingClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudHashingBillingClient(cc grpc.ClientConnInterface) CloudHashingBillingClient {
	return &cloudHashingBillingClient{cc}
}

func (c *cloudHashingBillingClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) CreateCoinAccount(ctx context.Context, in *CreateCoinAccountRequest, opts ...grpc.CallOption) (*CreateCoinAccountResponse, error) {
	out := new(CreateCoinAccountResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/CreateCoinAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetCoinAccount(ctx context.Context, in *GetCoinAccountRequest, opts ...grpc.CallOption) (*GetCoinAccountResponse, error) {
	out := new(GetCoinAccountResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetCoinAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetCoinAccountByCoinAddress(ctx context.Context, in *GetCoinAccountByCoinAddressRequest, opts ...grpc.CallOption) (*GetCoinAccountByCoinAddressResponse, error) {
	out := new(GetCoinAccountByCoinAddressResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetCoinAccountByCoinAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetCoinAccountsByAppUser(ctx context.Context, in *GetCoinAccountsByAppUserRequest, opts ...grpc.CallOption) (*GetCoinAccountsByAppUserResponse, error) {
	out := new(GetCoinAccountsByAppUserResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetCoinAccountsByAppUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) DeleteCoinAccount(ctx context.Context, in *DeleteCoinAccountRequest, opts ...grpc.CallOption) (*DeleteCoinAccountResponse, error) {
	out := new(DeleteCoinAccountResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/DeleteCoinAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) CreateCoinAccountTransaction(ctx context.Context, in *CreateCoinAccountTransactionRequest, opts ...grpc.CallOption) (*CreateCoinAccountTransactionResponse, error) {
	out := new(CreateCoinAccountTransactionResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/CreateCoinAccountTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetCoinAccountTransaction(ctx context.Context, in *GetCoinAccountTransactionRequest, opts ...grpc.CallOption) (*GetCoinAccountTransactionResponse, error) {
	out := new(GetCoinAccountTransactionResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetCoinAccountTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetCoinAccountTransactionsByCoinAccount(ctx context.Context, in *GetCoinAccountTransactionsByCoinAccountRequest, opts ...grpc.CallOption) (*GetCoinAccountTransactionsByCoinAccountResponse, error) {
	out := new(GetCoinAccountTransactionsByCoinAccountResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetCoinAccountTransactionsByCoinAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetCoinAccountTransactionsByState(ctx context.Context, in *GetCoinAccountTransactionsByStateRequest, opts ...grpc.CallOption) (*GetCoinAccountTransactionsByStateResponse, error) {
	out := new(GetCoinAccountTransactionsByStateResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetCoinAccountTransactionsByState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetCoinAccountTransactionsByCoin(ctx context.Context, in *GetCoinAccountTransactionsByCoinRequest, opts ...grpc.CallOption) (*GetCoinAccountTransactionsByCoinResponse, error) {
	out := new(GetCoinAccountTransactionsByCoinResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetCoinAccountTransactionsByCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) UpdateCoinAccountTransaction(ctx context.Context, in *UpdateCoinAccountTransactionRequest, opts ...grpc.CallOption) (*UpdateCoinAccountTransactionResponse, error) {
	out := new(UpdateCoinAccountTransactionResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/UpdateCoinAccountTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetCoinAccountTransactionDetail(ctx context.Context, in *GetCoinAccountTransactionDetailRequest, opts ...grpc.CallOption) (*GetCoinAccountTransactionDetailResponse, error) {
	out := new(GetCoinAccountTransactionDetailResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetCoinAccountTransactionDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) DeleteCoinAccountTransaction(ctx context.Context, in *DeleteCoinAccountTransactionRequest, opts ...grpc.CallOption) (*DeleteCoinAccountTransactionResponse, error) {
	out := new(DeleteCoinAccountTransactionResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/DeleteCoinAccountTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) CreatePlatformBenefit(ctx context.Context, in *CreatePlatformBenefitRequest, opts ...grpc.CallOption) (*CreatePlatformBenefitResponse, error) {
	out := new(CreatePlatformBenefitResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/CreatePlatformBenefit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetLatestPlatformBenefitByGood(ctx context.Context, in *GetLatestPlatformBenefitByGoodRequest, opts ...grpc.CallOption) (*GetLatestPlatformBenefitByGoodResponse, error) {
	out := new(GetLatestPlatformBenefitByGoodResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetLatestPlatformBenefitByGood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetPlatformBenefitsByGood(ctx context.Context, in *GetPlatformBenefitsByGoodRequest, opts ...grpc.CallOption) (*GetPlatformBenefitsByGoodResponse, error) {
	out := new(GetPlatformBenefitsByGoodResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetPlatformBenefitsByGood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetPlatformBenefit(ctx context.Context, in *GetPlatformBenefitRequest, opts ...grpc.CallOption) (*GetPlatformBenefitResponse, error) {
	out := new(GetPlatformBenefitResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetPlatformBenefit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetPlatformBenefitDetail(ctx context.Context, in *GetPlatformBenefitDetailRequest, opts ...grpc.CallOption) (*GetPlatformBenefitDetailResponse, error) {
	out := new(GetPlatformBenefitDetailResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetPlatformBenefitDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) CreatePlatformSetting(ctx context.Context, in *CreatePlatformSettingRequest, opts ...grpc.CallOption) (*CreatePlatformSettingResponse, error) {
	out := new(CreatePlatformSettingResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/CreatePlatformSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) UpdatePlatformSetting(ctx context.Context, in *UpdatePlatformSettingRequest, opts ...grpc.CallOption) (*UpdatePlatformSettingResponse, error) {
	out := new(UpdatePlatformSettingResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/UpdatePlatformSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetPlatformSettingByGood(ctx context.Context, in *GetPlatformSettingByGoodRequest, opts ...grpc.CallOption) (*GetPlatformSettingByGoodResponse, error) {
	out := new(GetPlatformSettingByGoodResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetPlatformSettingByGood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetPlatformSettingDetail(ctx context.Context, in *GetPlatformSettingDetailRequest, opts ...grpc.CallOption) (*GetPlatformSettingDetailResponse, error) {
	out := new(GetPlatformSettingDetailResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetPlatformSettingDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetPlatformSetting(ctx context.Context, in *GetPlatformSettingRequest, opts ...grpc.CallOption) (*GetPlatformSettingResponse, error) {
	out := new(GetPlatformSettingResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetPlatformSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) CreateUserBenefit(ctx context.Context, in *CreateUserBenefitRequest, opts ...grpc.CallOption) (*CreateUserBenefitResponse, error) {
	out := new(CreateUserBenefitResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/CreateUserBenefit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetUserBenefitsByAppUser(ctx context.Context, in *GetUserBenefitsByAppUserRequest, opts ...grpc.CallOption) (*GetUserBenefitsByAppUserResponse, error) {
	out := new(GetUserBenefitsByAppUserResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetUserBenefitsByAppUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetUserBenefitsByApp(ctx context.Context, in *GetUserBenefitsByAppRequest, opts ...grpc.CallOption) (*GetUserBenefitsByAppResponse, error) {
	out := new(GetUserBenefitsByAppResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetUserBenefitsByApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingBillingClient) GetLatestUserBenefitByGoodAppUser(ctx context.Context, in *GetLatestUserBenefitByGoodAppUserRequest, opts ...grpc.CallOption) (*GetLatestUserBenefitByGoodAppUserResponse, error) {
	out := new(GetLatestUserBenefitByGoodAppUserResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.billing.v1.CloudHashingBilling/GetLatestUserBenefitByGoodAppUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudHashingBillingServer is the server API for CloudHashingBilling service.
// All implementations must embed UnimplementedCloudHashingBillingServer
// for forward compatibility
type CloudHashingBillingServer interface {
	// Method Version
	Version(context.Context, *emptypb.Empty) (*VersionResponse, error)
	CreateCoinAccount(context.Context, *CreateCoinAccountRequest) (*CreateCoinAccountResponse, error)
	GetCoinAccount(context.Context, *GetCoinAccountRequest) (*GetCoinAccountResponse, error)
	GetCoinAccountByCoinAddress(context.Context, *GetCoinAccountByCoinAddressRequest) (*GetCoinAccountByCoinAddressResponse, error)
	GetCoinAccountsByAppUser(context.Context, *GetCoinAccountsByAppUserRequest) (*GetCoinAccountsByAppUserResponse, error)
	DeleteCoinAccount(context.Context, *DeleteCoinAccountRequest) (*DeleteCoinAccountResponse, error)
	CreateCoinAccountTransaction(context.Context, *CreateCoinAccountTransactionRequest) (*CreateCoinAccountTransactionResponse, error)
	GetCoinAccountTransaction(context.Context, *GetCoinAccountTransactionRequest) (*GetCoinAccountTransactionResponse, error)
	GetCoinAccountTransactionsByCoinAccount(context.Context, *GetCoinAccountTransactionsByCoinAccountRequest) (*GetCoinAccountTransactionsByCoinAccountResponse, error)
	GetCoinAccountTransactionsByState(context.Context, *GetCoinAccountTransactionsByStateRequest) (*GetCoinAccountTransactionsByStateResponse, error)
	GetCoinAccountTransactionsByCoin(context.Context, *GetCoinAccountTransactionsByCoinRequest) (*GetCoinAccountTransactionsByCoinResponse, error)
	UpdateCoinAccountTransaction(context.Context, *UpdateCoinAccountTransactionRequest) (*UpdateCoinAccountTransactionResponse, error)
	GetCoinAccountTransactionDetail(context.Context, *GetCoinAccountTransactionDetailRequest) (*GetCoinAccountTransactionDetailResponse, error)
	DeleteCoinAccountTransaction(context.Context, *DeleteCoinAccountTransactionRequest) (*DeleteCoinAccountTransactionResponse, error)
	CreatePlatformBenefit(context.Context, *CreatePlatformBenefitRequest) (*CreatePlatformBenefitResponse, error)
	GetLatestPlatformBenefitByGood(context.Context, *GetLatestPlatformBenefitByGoodRequest) (*GetLatestPlatformBenefitByGoodResponse, error)
	GetPlatformBenefitsByGood(context.Context, *GetPlatformBenefitsByGoodRequest) (*GetPlatformBenefitsByGoodResponse, error)
	GetPlatformBenefit(context.Context, *GetPlatformBenefitRequest) (*GetPlatformBenefitResponse, error)
	GetPlatformBenefitDetail(context.Context, *GetPlatformBenefitDetailRequest) (*GetPlatformBenefitDetailResponse, error)
	CreatePlatformSetting(context.Context, *CreatePlatformSettingRequest) (*CreatePlatformSettingResponse, error)
	UpdatePlatformSetting(context.Context, *UpdatePlatformSettingRequest) (*UpdatePlatformSettingResponse, error)
	GetPlatformSettingByGood(context.Context, *GetPlatformSettingByGoodRequest) (*GetPlatformSettingByGoodResponse, error)
	GetPlatformSettingDetail(context.Context, *GetPlatformSettingDetailRequest) (*GetPlatformSettingDetailResponse, error)
	GetPlatformSetting(context.Context, *GetPlatformSettingRequest) (*GetPlatformSettingResponse, error)
	CreateUserBenefit(context.Context, *CreateUserBenefitRequest) (*CreateUserBenefitResponse, error)
	GetUserBenefitsByAppUser(context.Context, *GetUserBenefitsByAppUserRequest) (*GetUserBenefitsByAppUserResponse, error)
	GetUserBenefitsByApp(context.Context, *GetUserBenefitsByAppRequest) (*GetUserBenefitsByAppResponse, error)
	GetLatestUserBenefitByGoodAppUser(context.Context, *GetLatestUserBenefitByGoodAppUserRequest) (*GetLatestUserBenefitByGoodAppUserResponse, error)
	mustEmbedUnimplementedCloudHashingBillingServer()
}

// UnimplementedCloudHashingBillingServer must be embedded to have forward compatible implementations.
type UnimplementedCloudHashingBillingServer struct {
}

func (UnimplementedCloudHashingBillingServer) Version(context.Context, *emptypb.Empty) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedCloudHashingBillingServer) CreateCoinAccount(context.Context, *CreateCoinAccountRequest) (*CreateCoinAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCoinAccount not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetCoinAccount(context.Context, *GetCoinAccountRequest) (*GetCoinAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinAccount not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetCoinAccountByCoinAddress(context.Context, *GetCoinAccountByCoinAddressRequest) (*GetCoinAccountByCoinAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinAccountByCoinAddress not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetCoinAccountsByAppUser(context.Context, *GetCoinAccountsByAppUserRequest) (*GetCoinAccountsByAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinAccountsByAppUser not implemented")
}
func (UnimplementedCloudHashingBillingServer) DeleteCoinAccount(context.Context, *DeleteCoinAccountRequest) (*DeleteCoinAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCoinAccount not implemented")
}
func (UnimplementedCloudHashingBillingServer) CreateCoinAccountTransaction(context.Context, *CreateCoinAccountTransactionRequest) (*CreateCoinAccountTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCoinAccountTransaction not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetCoinAccountTransaction(context.Context, *GetCoinAccountTransactionRequest) (*GetCoinAccountTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinAccountTransaction not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetCoinAccountTransactionsByCoinAccount(context.Context, *GetCoinAccountTransactionsByCoinAccountRequest) (*GetCoinAccountTransactionsByCoinAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinAccountTransactionsByCoinAccount not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetCoinAccountTransactionsByState(context.Context, *GetCoinAccountTransactionsByStateRequest) (*GetCoinAccountTransactionsByStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinAccountTransactionsByState not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetCoinAccountTransactionsByCoin(context.Context, *GetCoinAccountTransactionsByCoinRequest) (*GetCoinAccountTransactionsByCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinAccountTransactionsByCoin not implemented")
}
func (UnimplementedCloudHashingBillingServer) UpdateCoinAccountTransaction(context.Context, *UpdateCoinAccountTransactionRequest) (*UpdateCoinAccountTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCoinAccountTransaction not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetCoinAccountTransactionDetail(context.Context, *GetCoinAccountTransactionDetailRequest) (*GetCoinAccountTransactionDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinAccountTransactionDetail not implemented")
}
func (UnimplementedCloudHashingBillingServer) DeleteCoinAccountTransaction(context.Context, *DeleteCoinAccountTransactionRequest) (*DeleteCoinAccountTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCoinAccountTransaction not implemented")
}
func (UnimplementedCloudHashingBillingServer) CreatePlatformBenefit(context.Context, *CreatePlatformBenefitRequest) (*CreatePlatformBenefitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlatformBenefit not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetLatestPlatformBenefitByGood(context.Context, *GetLatestPlatformBenefitByGoodRequest) (*GetLatestPlatformBenefitByGoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestPlatformBenefitByGood not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetPlatformBenefitsByGood(context.Context, *GetPlatformBenefitsByGoodRequest) (*GetPlatformBenefitsByGoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlatformBenefitsByGood not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetPlatformBenefit(context.Context, *GetPlatformBenefitRequest) (*GetPlatformBenefitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlatformBenefit not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetPlatformBenefitDetail(context.Context, *GetPlatformBenefitDetailRequest) (*GetPlatformBenefitDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlatformBenefitDetail not implemented")
}
func (UnimplementedCloudHashingBillingServer) CreatePlatformSetting(context.Context, *CreatePlatformSettingRequest) (*CreatePlatformSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlatformSetting not implemented")
}
func (UnimplementedCloudHashingBillingServer) UpdatePlatformSetting(context.Context, *UpdatePlatformSettingRequest) (*UpdatePlatformSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlatformSetting not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetPlatformSettingByGood(context.Context, *GetPlatformSettingByGoodRequest) (*GetPlatformSettingByGoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlatformSettingByGood not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetPlatformSettingDetail(context.Context, *GetPlatformSettingDetailRequest) (*GetPlatformSettingDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlatformSettingDetail not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetPlatformSetting(context.Context, *GetPlatformSettingRequest) (*GetPlatformSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlatformSetting not implemented")
}
func (UnimplementedCloudHashingBillingServer) CreateUserBenefit(context.Context, *CreateUserBenefitRequest) (*CreateUserBenefitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserBenefit not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetUserBenefitsByAppUser(context.Context, *GetUserBenefitsByAppUserRequest) (*GetUserBenefitsByAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBenefitsByAppUser not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetUserBenefitsByApp(context.Context, *GetUserBenefitsByAppRequest) (*GetUserBenefitsByAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBenefitsByApp not implemented")
}
func (UnimplementedCloudHashingBillingServer) GetLatestUserBenefitByGoodAppUser(context.Context, *GetLatestUserBenefitByGoodAppUserRequest) (*GetLatestUserBenefitByGoodAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestUserBenefitByGoodAppUser not implemented")
}
func (UnimplementedCloudHashingBillingServer) mustEmbedUnimplementedCloudHashingBillingServer() {}

// UnsafeCloudHashingBillingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudHashingBillingServer will
// result in compilation errors.
type UnsafeCloudHashingBillingServer interface {
	mustEmbedUnimplementedCloudHashingBillingServer()
}

func RegisterCloudHashingBillingServer(s grpc.ServiceRegistrar, srv CloudHashingBillingServer) {
	s.RegisterService(&CloudHashingBilling_ServiceDesc, srv)
}

func _CloudHashingBilling_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_CreateCoinAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCoinAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).CreateCoinAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/CreateCoinAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).CreateCoinAccount(ctx, req.(*CreateCoinAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetCoinAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetCoinAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetCoinAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetCoinAccount(ctx, req.(*GetCoinAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetCoinAccountByCoinAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinAccountByCoinAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetCoinAccountByCoinAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetCoinAccountByCoinAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetCoinAccountByCoinAddress(ctx, req.(*GetCoinAccountByCoinAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetCoinAccountsByAppUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinAccountsByAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetCoinAccountsByAppUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetCoinAccountsByAppUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetCoinAccountsByAppUser(ctx, req.(*GetCoinAccountsByAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_DeleteCoinAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCoinAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).DeleteCoinAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/DeleteCoinAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).DeleteCoinAccount(ctx, req.(*DeleteCoinAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_CreateCoinAccountTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCoinAccountTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).CreateCoinAccountTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/CreateCoinAccountTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).CreateCoinAccountTransaction(ctx, req.(*CreateCoinAccountTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetCoinAccountTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinAccountTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetCoinAccountTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetCoinAccountTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetCoinAccountTransaction(ctx, req.(*GetCoinAccountTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetCoinAccountTransactionsByCoinAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinAccountTransactionsByCoinAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetCoinAccountTransactionsByCoinAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetCoinAccountTransactionsByCoinAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetCoinAccountTransactionsByCoinAccount(ctx, req.(*GetCoinAccountTransactionsByCoinAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetCoinAccountTransactionsByState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinAccountTransactionsByStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetCoinAccountTransactionsByState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetCoinAccountTransactionsByState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetCoinAccountTransactionsByState(ctx, req.(*GetCoinAccountTransactionsByStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetCoinAccountTransactionsByCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinAccountTransactionsByCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetCoinAccountTransactionsByCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetCoinAccountTransactionsByCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetCoinAccountTransactionsByCoin(ctx, req.(*GetCoinAccountTransactionsByCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_UpdateCoinAccountTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCoinAccountTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).UpdateCoinAccountTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/UpdateCoinAccountTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).UpdateCoinAccountTransaction(ctx, req.(*UpdateCoinAccountTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetCoinAccountTransactionDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinAccountTransactionDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetCoinAccountTransactionDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetCoinAccountTransactionDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetCoinAccountTransactionDetail(ctx, req.(*GetCoinAccountTransactionDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_DeleteCoinAccountTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCoinAccountTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).DeleteCoinAccountTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/DeleteCoinAccountTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).DeleteCoinAccountTransaction(ctx, req.(*DeleteCoinAccountTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_CreatePlatformBenefit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlatformBenefitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).CreatePlatformBenefit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/CreatePlatformBenefit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).CreatePlatformBenefit(ctx, req.(*CreatePlatformBenefitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetLatestPlatformBenefitByGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestPlatformBenefitByGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetLatestPlatformBenefitByGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetLatestPlatformBenefitByGood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetLatestPlatformBenefitByGood(ctx, req.(*GetLatestPlatformBenefitByGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetPlatformBenefitsByGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlatformBenefitsByGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetPlatformBenefitsByGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetPlatformBenefitsByGood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetPlatformBenefitsByGood(ctx, req.(*GetPlatformBenefitsByGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetPlatformBenefit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlatformBenefitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetPlatformBenefit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetPlatformBenefit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetPlatformBenefit(ctx, req.(*GetPlatformBenefitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetPlatformBenefitDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlatformBenefitDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetPlatformBenefitDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetPlatformBenefitDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetPlatformBenefitDetail(ctx, req.(*GetPlatformBenefitDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_CreatePlatformSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlatformSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).CreatePlatformSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/CreatePlatformSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).CreatePlatformSetting(ctx, req.(*CreatePlatformSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_UpdatePlatformSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlatformSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).UpdatePlatformSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/UpdatePlatformSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).UpdatePlatformSetting(ctx, req.(*UpdatePlatformSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetPlatformSettingByGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlatformSettingByGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetPlatformSettingByGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetPlatformSettingByGood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetPlatformSettingByGood(ctx, req.(*GetPlatformSettingByGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetPlatformSettingDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlatformSettingDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetPlatformSettingDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetPlatformSettingDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetPlatformSettingDetail(ctx, req.(*GetPlatformSettingDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetPlatformSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlatformSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetPlatformSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetPlatformSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetPlatformSetting(ctx, req.(*GetPlatformSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_CreateUserBenefit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserBenefitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).CreateUserBenefit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/CreateUserBenefit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).CreateUserBenefit(ctx, req.(*CreateUserBenefitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetUserBenefitsByAppUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserBenefitsByAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetUserBenefitsByAppUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetUserBenefitsByAppUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetUserBenefitsByAppUser(ctx, req.(*GetUserBenefitsByAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetUserBenefitsByApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserBenefitsByAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetUserBenefitsByApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetUserBenefitsByApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetUserBenefitsByApp(ctx, req.(*GetUserBenefitsByAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingBilling_GetLatestUserBenefitByGoodAppUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestUserBenefitByGoodAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingBillingServer).GetLatestUserBenefitByGoodAppUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.billing.v1.CloudHashingBilling/GetLatestUserBenefitByGoodAppUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingBillingServer).GetLatestUserBenefitByGoodAppUser(ctx, req.(*GetLatestUserBenefitByGoodAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudHashingBilling_ServiceDesc is the grpc.ServiceDesc for CloudHashingBilling service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudHashingBilling_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.hashing.billing.v1.CloudHashingBilling",
	HandlerType: (*CloudHashingBillingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _CloudHashingBilling_Version_Handler,
		},
		{
			MethodName: "CreateCoinAccount",
			Handler:    _CloudHashingBilling_CreateCoinAccount_Handler,
		},
		{
			MethodName: "GetCoinAccount",
			Handler:    _CloudHashingBilling_GetCoinAccount_Handler,
		},
		{
			MethodName: "GetCoinAccountByCoinAddress",
			Handler:    _CloudHashingBilling_GetCoinAccountByCoinAddress_Handler,
		},
		{
			MethodName: "GetCoinAccountsByAppUser",
			Handler:    _CloudHashingBilling_GetCoinAccountsByAppUser_Handler,
		},
		{
			MethodName: "DeleteCoinAccount",
			Handler:    _CloudHashingBilling_DeleteCoinAccount_Handler,
		},
		{
			MethodName: "CreateCoinAccountTransaction",
			Handler:    _CloudHashingBilling_CreateCoinAccountTransaction_Handler,
		},
		{
			MethodName: "GetCoinAccountTransaction",
			Handler:    _CloudHashingBilling_GetCoinAccountTransaction_Handler,
		},
		{
			MethodName: "GetCoinAccountTransactionsByCoinAccount",
			Handler:    _CloudHashingBilling_GetCoinAccountTransactionsByCoinAccount_Handler,
		},
		{
			MethodName: "GetCoinAccountTransactionsByState",
			Handler:    _CloudHashingBilling_GetCoinAccountTransactionsByState_Handler,
		},
		{
			MethodName: "GetCoinAccountTransactionsByCoin",
			Handler:    _CloudHashingBilling_GetCoinAccountTransactionsByCoin_Handler,
		},
		{
			MethodName: "UpdateCoinAccountTransaction",
			Handler:    _CloudHashingBilling_UpdateCoinAccountTransaction_Handler,
		},
		{
			MethodName: "GetCoinAccountTransactionDetail",
			Handler:    _CloudHashingBilling_GetCoinAccountTransactionDetail_Handler,
		},
		{
			MethodName: "DeleteCoinAccountTransaction",
			Handler:    _CloudHashingBilling_DeleteCoinAccountTransaction_Handler,
		},
		{
			MethodName: "CreatePlatformBenefit",
			Handler:    _CloudHashingBilling_CreatePlatformBenefit_Handler,
		},
		{
			MethodName: "GetLatestPlatformBenefitByGood",
			Handler:    _CloudHashingBilling_GetLatestPlatformBenefitByGood_Handler,
		},
		{
			MethodName: "GetPlatformBenefitsByGood",
			Handler:    _CloudHashingBilling_GetPlatformBenefitsByGood_Handler,
		},
		{
			MethodName: "GetPlatformBenefit",
			Handler:    _CloudHashingBilling_GetPlatformBenefit_Handler,
		},
		{
			MethodName: "GetPlatformBenefitDetail",
			Handler:    _CloudHashingBilling_GetPlatformBenefitDetail_Handler,
		},
		{
			MethodName: "CreatePlatformSetting",
			Handler:    _CloudHashingBilling_CreatePlatformSetting_Handler,
		},
		{
			MethodName: "UpdatePlatformSetting",
			Handler:    _CloudHashingBilling_UpdatePlatformSetting_Handler,
		},
		{
			MethodName: "GetPlatformSettingByGood",
			Handler:    _CloudHashingBilling_GetPlatformSettingByGood_Handler,
		},
		{
			MethodName: "GetPlatformSettingDetail",
			Handler:    _CloudHashingBilling_GetPlatformSettingDetail_Handler,
		},
		{
			MethodName: "GetPlatformSetting",
			Handler:    _CloudHashingBilling_GetPlatformSetting_Handler,
		},
		{
			MethodName: "CreateUserBenefit",
			Handler:    _CloudHashingBilling_CreateUserBenefit_Handler,
		},
		{
			MethodName: "GetUserBenefitsByAppUser",
			Handler:    _CloudHashingBilling_GetUserBenefitsByAppUser_Handler,
		},
		{
			MethodName: "GetUserBenefitsByApp",
			Handler:    _CloudHashingBilling_GetUserBenefitsByApp_Handler,
		},
		{
			MethodName: "GetLatestUserBenefitByGoodAppUser",
			Handler:    _CloudHashingBilling_GetLatestUserBenefitByGoodAppUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/cloud-hashing-billing.proto",
}
