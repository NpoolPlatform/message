// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: npool/cloud-hashing-billing.proto

package npool

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// request body and response
type VersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info string `protobuf:"bytes,100,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *VersionResponse) Reset() {
	*x = VersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionResponse) ProtoMessage() {}

func (x *VersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionResponse.ProtoReflect.Descriptor instead.
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{0}
}

func (x *VersionResponse) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

type CoinAccountInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          string `protobuf:"bytes,200,opt,name=ID,proto3" json:"ID,omitempty"`
	CoinTypeID  string `protobuf:"bytes,201,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty"`
	Address     string `protobuf:"bytes,202,opt,name=Address,proto3" json:"Address,omitempty"`
	GeneratedBy string `protobuf:"bytes,203,opt,name=GeneratedBy,proto3" json:"GeneratedBy,omitempty"`
	UsedFor     string `protobuf:"bytes,204,opt,name=UsedFor,proto3" json:"UsedFor,omitempty"`
	Idle        bool   `protobuf:"varint,205,opt,name=Idle,proto3" json:"Idle,omitempty"`
	AppID       string `protobuf:"bytes,206,opt,name=AppID,proto3" json:"AppID,omitempty"`
	UserID      string `protobuf:"bytes,207,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *CoinAccountInfo) Reset() {
	*x = CoinAccountInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinAccountInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinAccountInfo) ProtoMessage() {}

func (x *CoinAccountInfo) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinAccountInfo.ProtoReflect.Descriptor instead.
func (*CoinAccountInfo) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{1}
}

func (x *CoinAccountInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *CoinAccountInfo) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

func (x *CoinAccountInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CoinAccountInfo) GetGeneratedBy() string {
	if x != nil {
		return x.GeneratedBy
	}
	return ""
}

func (x *CoinAccountInfo) GetUsedFor() string {
	if x != nil {
		return x.UsedFor
	}
	return ""
}

func (x *CoinAccountInfo) GetIdle() bool {
	if x != nil {
		return x.Idle
	}
	return false
}

func (x *CoinAccountInfo) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *CoinAccountInfo) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type CreateCoinAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CoinAccountInfo `protobuf:"bytes,300,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateCoinAccountRequest) Reset() {
	*x = CreateCoinAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCoinAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCoinAccountRequest) ProtoMessage() {}

func (x *CreateCoinAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCoinAccountRequest.ProtoReflect.Descriptor instead.
func (*CreateCoinAccountRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{2}
}

func (x *CreateCoinAccountRequest) GetInfo() *CoinAccountInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateCoinAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CoinAccountInfo `protobuf:"bytes,400,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateCoinAccountResponse) Reset() {
	*x = CreateCoinAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCoinAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCoinAccountResponse) ProtoMessage() {}

func (x *CreateCoinAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCoinAccountResponse.ProtoReflect.Descriptor instead.
func (*CreateCoinAccountResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{3}
}

func (x *CreateCoinAccountResponse) GetInfo() *CoinAccountInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetCoinAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,500,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetCoinAccountRequest) Reset() {
	*x = GetCoinAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinAccountRequest) ProtoMessage() {}

func (x *GetCoinAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinAccountRequest.ProtoReflect.Descriptor instead.
func (*GetCoinAccountRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{4}
}

func (x *GetCoinAccountRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetCoinAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CoinAccountInfo `protobuf:"bytes,600,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetCoinAccountResponse) Reset() {
	*x = GetCoinAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinAccountResponse) ProtoMessage() {}

func (x *GetCoinAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinAccountResponse.ProtoReflect.Descriptor instead.
func (*GetCoinAccountResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{5}
}

func (x *GetCoinAccountResponse) GetInfo() *CoinAccountInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetCoinAccountByCoinAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinInfoID string `protobuf:"bytes,1,opt,name=CoinInfoID,proto3" json:"CoinInfoID,omitempty"`
	Address    string `protobuf:"bytes,2,opt,name=Address,proto3" json:"Address,omitempty"`
}

func (x *GetCoinAccountByCoinAddressRequest) Reset() {
	*x = GetCoinAccountByCoinAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinAccountByCoinAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinAccountByCoinAddressRequest) ProtoMessage() {}

func (x *GetCoinAccountByCoinAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinAccountByCoinAddressRequest.ProtoReflect.Descriptor instead.
func (*GetCoinAccountByCoinAddressRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{6}
}

func (x *GetCoinAccountByCoinAddressRequest) GetCoinInfoID() string {
	if x != nil {
		return x.CoinInfoID
	}
	return ""
}

func (x *GetCoinAccountByCoinAddressRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type GetCoinAccountByCoinAddressResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CoinAccountInfo `protobuf:"bytes,1,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetCoinAccountByCoinAddressResponse) Reset() {
	*x = GetCoinAccountByCoinAddressResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinAccountByCoinAddressResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinAccountByCoinAddressResponse) ProtoMessage() {}

func (x *GetCoinAccountByCoinAddressResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinAccountByCoinAddressResponse.ProtoReflect.Descriptor instead.
func (*GetCoinAccountByCoinAddressResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{7}
}

func (x *GetCoinAccountByCoinAddressResponse) GetInfo() *CoinAccountInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetCoinAccountsByAppUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID  string `protobuf:"bytes,700,opt,name=AppID,proto3" json:"AppID,omitempty"`
	UserID string `protobuf:"bytes,701,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *GetCoinAccountsByAppUserRequest) Reset() {
	*x = GetCoinAccountsByAppUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinAccountsByAppUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinAccountsByAppUserRequest) ProtoMessage() {}

func (x *GetCoinAccountsByAppUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinAccountsByAppUserRequest.ProtoReflect.Descriptor instead.
func (*GetCoinAccountsByAppUserRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{8}
}

func (x *GetCoinAccountsByAppUserRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetCoinAccountsByAppUserRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type GetCoinAccountsByAppUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*CoinAccountInfo `protobuf:"bytes,800,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *GetCoinAccountsByAppUserResponse) Reset() {
	*x = GetCoinAccountsByAppUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinAccountsByAppUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinAccountsByAppUserResponse) ProtoMessage() {}

func (x *GetCoinAccountsByAppUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinAccountsByAppUserResponse.ProtoReflect.Descriptor instead.
func (*GetCoinAccountsByAppUserResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{9}
}

func (x *GetCoinAccountsByAppUserResponse) GetInfos() []*CoinAccountInfo {
	if x != nil {
		return x.Infos
	}
	return nil
}

type DeleteCoinAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,900,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *DeleteCoinAccountRequest) Reset() {
	*x = DeleteCoinAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCoinAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCoinAccountRequest) ProtoMessage() {}

func (x *DeleteCoinAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCoinAccountRequest.ProtoReflect.Descriptor instead.
func (*DeleteCoinAccountRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteCoinAccountRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type DeleteCoinAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CoinAccountInfo `protobuf:"bytes,1000,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteCoinAccountResponse) Reset() {
	*x = DeleteCoinAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCoinAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCoinAccountResponse) ProtoMessage() {}

func (x *DeleteCoinAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCoinAccountResponse.ProtoReflect.Descriptor instead.
func (*DeleteCoinAccountResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteCoinAccountResponse) GetInfo() *CoinAccountInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type CoinAccountTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                    string  `protobuf:"bytes,1100,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID                 string  `protobuf:"bytes,1101,opt,name=AppID,proto3" json:"AppID,omitempty"`
	UserID                string  `protobuf:"bytes,1102,opt,name=UserID,proto3" json:"UserID,omitempty"`
	FromAddressID         string  `protobuf:"bytes,1103,opt,name=FromAddressID,proto3" json:"FromAddressID,omitempty"`
	ToAddressID           string  `protobuf:"bytes,1104,opt,name=ToAddressID,proto3" json:"ToAddressID,omitempty"`
	CoinTypeID            string  `protobuf:"bytes,1105,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty"`
	Amount                float64 `protobuf:"fixed64,1106,opt,name=Amount,proto3" json:"Amount,omitempty"`
	Message               string  `protobuf:"bytes,1107,opt,name=Message,proto3" json:"Message,omitempty"`
	CreateAt              uint32  `protobuf:"varint,1108,opt,name=CreateAt,proto3" json:"CreateAt,omitempty"`
	State                 string  `protobuf:"bytes,1109,opt,name=State,proto3" json:"State,omitempty"`
	ChainTransactionID    string  `protobuf:"bytes,1110,opt,name=ChainTransactionID,proto3" json:"ChainTransactionID,omitempty"`
	PlatformTransactionID string  `protobuf:"bytes,1111,opt,name=PlatformTransactionID,proto3" json:"PlatformTransactionID,omitempty"`
}

func (x *CoinAccountTransaction) Reset() {
	*x = CoinAccountTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinAccountTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinAccountTransaction) ProtoMessage() {}

func (x *CoinAccountTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinAccountTransaction.ProtoReflect.Descriptor instead.
func (*CoinAccountTransaction) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{12}
}

func (x *CoinAccountTransaction) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *CoinAccountTransaction) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *CoinAccountTransaction) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CoinAccountTransaction) GetFromAddressID() string {
	if x != nil {
		return x.FromAddressID
	}
	return ""
}

func (x *CoinAccountTransaction) GetToAddressID() string {
	if x != nil {
		return x.ToAddressID
	}
	return ""
}

func (x *CoinAccountTransaction) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

func (x *CoinAccountTransaction) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CoinAccountTransaction) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CoinAccountTransaction) GetCreateAt() uint32 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *CoinAccountTransaction) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *CoinAccountTransaction) GetChainTransactionID() string {
	if x != nil {
		return x.ChainTransactionID
	}
	return ""
}

func (x *CoinAccountTransaction) GetPlatformTransactionID() string {
	if x != nil {
		return x.PlatformTransactionID
	}
	return ""
}

type CreateCoinAccountTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CoinAccountTransaction `protobuf:"bytes,1200,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateCoinAccountTransactionRequest) Reset() {
	*x = CreateCoinAccountTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCoinAccountTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCoinAccountTransactionRequest) ProtoMessage() {}

func (x *CreateCoinAccountTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCoinAccountTransactionRequest.ProtoReflect.Descriptor instead.
func (*CreateCoinAccountTransactionRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{13}
}

func (x *CreateCoinAccountTransactionRequest) GetInfo() *CoinAccountTransaction {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateCoinAccountTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CoinAccountTransaction `protobuf:"bytes,1300,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateCoinAccountTransactionResponse) Reset() {
	*x = CreateCoinAccountTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCoinAccountTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCoinAccountTransactionResponse) ProtoMessage() {}

func (x *CreateCoinAccountTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCoinAccountTransactionResponse.ProtoReflect.Descriptor instead.
func (*CreateCoinAccountTransactionResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{14}
}

func (x *CreateCoinAccountTransactionResponse) GetInfo() *CoinAccountTransaction {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetCoinAccountTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1400,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetCoinAccountTransactionRequest) Reset() {
	*x = GetCoinAccountTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinAccountTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinAccountTransactionRequest) ProtoMessage() {}

func (x *GetCoinAccountTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinAccountTransactionRequest.ProtoReflect.Descriptor instead.
func (*GetCoinAccountTransactionRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{15}
}

func (x *GetCoinAccountTransactionRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetCoinAccountTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CoinAccountTransaction `protobuf:"bytes,1500,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetCoinAccountTransactionResponse) Reset() {
	*x = GetCoinAccountTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinAccountTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinAccountTransactionResponse) ProtoMessage() {}

func (x *GetCoinAccountTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinAccountTransactionResponse.ProtoReflect.Descriptor instead.
func (*GetCoinAccountTransactionResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{16}
}

func (x *GetCoinAccountTransactionResponse) GetInfo() *CoinAccountTransaction {
	if x != nil {
		return x.Info
	}
	return nil
}

type CoinAccountTransactionDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                    string           `protobuf:"bytes,1510,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID                 string           `protobuf:"bytes,1511,opt,name=AppID,proto3" json:"AppID,omitempty"`
	UserID                string           `protobuf:"bytes,1512,opt,name=UserID,proto3" json:"UserID,omitempty"`
	FromAddress           *CoinAccountInfo `protobuf:"bytes,1513,opt,name=FromAddress,proto3" json:"FromAddress,omitempty"`
	ToAddress             *CoinAccountInfo `protobuf:"bytes,1514,opt,name=ToAddress,proto3" json:"ToAddress,omitempty"`
	CoinTypeID            string           `protobuf:"bytes,1515,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty"`
	Amount                float64          `protobuf:"fixed64,1516,opt,name=Amount,proto3" json:"Amount,omitempty"`
	Message               string           `protobuf:"bytes,1517,opt,name=Message,proto3" json:"Message,omitempty"`
	CreateAt              uint32           `protobuf:"varint,1518,opt,name=CreateAt,proto3" json:"CreateAt,omitempty"`
	State                 string           `protobuf:"bytes,1519,opt,name=State,proto3" json:"State,omitempty"`
	ChainTransactionID    string           `protobuf:"bytes,1520,opt,name=ChainTransactionID,proto3" json:"ChainTransactionID,omitempty"`
	PlatformTransactionID string           `protobuf:"bytes,1521,opt,name=PlatformTransactionID,proto3" json:"PlatformTransactionID,omitempty"`
}

func (x *CoinAccountTransactionDetail) Reset() {
	*x = CoinAccountTransactionDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinAccountTransactionDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinAccountTransactionDetail) ProtoMessage() {}

func (x *CoinAccountTransactionDetail) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinAccountTransactionDetail.ProtoReflect.Descriptor instead.
func (*CoinAccountTransactionDetail) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{17}
}

func (x *CoinAccountTransactionDetail) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *CoinAccountTransactionDetail) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *CoinAccountTransactionDetail) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *CoinAccountTransactionDetail) GetFromAddress() *CoinAccountInfo {
	if x != nil {
		return x.FromAddress
	}
	return nil
}

func (x *CoinAccountTransactionDetail) GetToAddress() *CoinAccountInfo {
	if x != nil {
		return x.ToAddress
	}
	return nil
}

func (x *CoinAccountTransactionDetail) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

func (x *CoinAccountTransactionDetail) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CoinAccountTransactionDetail) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CoinAccountTransactionDetail) GetCreateAt() uint32 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *CoinAccountTransactionDetail) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *CoinAccountTransactionDetail) GetChainTransactionID() string {
	if x != nil {
		return x.ChainTransactionID
	}
	return ""
}

func (x *CoinAccountTransactionDetail) GetPlatformTransactionID() string {
	if x != nil {
		return x.PlatformTransactionID
	}
	return ""
}

type GetCoinAccountTransactionDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1550,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetCoinAccountTransactionDetailRequest) Reset() {
	*x = GetCoinAccountTransactionDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinAccountTransactionDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinAccountTransactionDetailRequest) ProtoMessage() {}

func (x *GetCoinAccountTransactionDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinAccountTransactionDetailRequest.ProtoReflect.Descriptor instead.
func (*GetCoinAccountTransactionDetailRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{18}
}

func (x *GetCoinAccountTransactionDetailRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetCoinAccountTransactionDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Detail *CoinAccountTransactionDetail `protobuf:"bytes,1560,opt,name=Detail,proto3" json:"Detail,omitempty"`
}

func (x *GetCoinAccountTransactionDetailResponse) Reset() {
	*x = GetCoinAccountTransactionDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinAccountTransactionDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinAccountTransactionDetailResponse) ProtoMessage() {}

func (x *GetCoinAccountTransactionDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinAccountTransactionDetailResponse.ProtoReflect.Descriptor instead.
func (*GetCoinAccountTransactionDetailResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{19}
}

func (x *GetCoinAccountTransactionDetailResponse) GetDetail() *CoinAccountTransactionDetail {
	if x != nil {
		return x.Detail
	}
	return nil
}

type GetCoinAccountTransactionsByCoinAccountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinTypeID string `protobuf:"bytes,1600,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty"`
	AddressID  string `protobuf:"bytes,1601,opt,name=AddressID,proto3" json:"AddressID,omitempty"`
}

func (x *GetCoinAccountTransactionsByCoinAccountRequest) Reset() {
	*x = GetCoinAccountTransactionsByCoinAccountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinAccountTransactionsByCoinAccountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinAccountTransactionsByCoinAccountRequest) ProtoMessage() {}

func (x *GetCoinAccountTransactionsByCoinAccountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinAccountTransactionsByCoinAccountRequest.ProtoReflect.Descriptor instead.
func (*GetCoinAccountTransactionsByCoinAccountRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{20}
}

func (x *GetCoinAccountTransactionsByCoinAccountRequest) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

func (x *GetCoinAccountTransactionsByCoinAccountRequest) GetAddressID() string {
	if x != nil {
		return x.AddressID
	}
	return ""
}

type GetCoinAccountTransactionsByCoinAccountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*CoinAccountTransaction `protobuf:"bytes,1700,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *GetCoinAccountTransactionsByCoinAccountResponse) Reset() {
	*x = GetCoinAccountTransactionsByCoinAccountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinAccountTransactionsByCoinAccountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinAccountTransactionsByCoinAccountResponse) ProtoMessage() {}

func (x *GetCoinAccountTransactionsByCoinAccountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinAccountTransactionsByCoinAccountResponse.ProtoReflect.Descriptor instead.
func (*GetCoinAccountTransactionsByCoinAccountResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{21}
}

func (x *GetCoinAccountTransactionsByCoinAccountResponse) GetInfos() []*CoinAccountTransaction {
	if x != nil {
		return x.Infos
	}
	return nil
}

type GetCoinAccountTransactionsByStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State string `protobuf:"bytes,1,opt,name=State,proto3" json:"State,omitempty"`
}

func (x *GetCoinAccountTransactionsByStateRequest) Reset() {
	*x = GetCoinAccountTransactionsByStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinAccountTransactionsByStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinAccountTransactionsByStateRequest) ProtoMessage() {}

func (x *GetCoinAccountTransactionsByStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinAccountTransactionsByStateRequest.ProtoReflect.Descriptor instead.
func (*GetCoinAccountTransactionsByStateRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{22}
}

func (x *GetCoinAccountTransactionsByStateRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

type GetCoinAccountTransactionsByStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*CoinAccountTransaction `protobuf:"bytes,1,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *GetCoinAccountTransactionsByStateResponse) Reset() {
	*x = GetCoinAccountTransactionsByStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinAccountTransactionsByStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinAccountTransactionsByStateResponse) ProtoMessage() {}

func (x *GetCoinAccountTransactionsByStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinAccountTransactionsByStateResponse.ProtoReflect.Descriptor instead.
func (*GetCoinAccountTransactionsByStateResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{23}
}

func (x *GetCoinAccountTransactionsByStateResponse) GetInfos() []*CoinAccountTransaction {
	if x != nil {
		return x.Infos
	}
	return nil
}

type GetCoinAccountTransactionsByCoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinTypeID string `protobuf:"bytes,1800,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty"`
}

func (x *GetCoinAccountTransactionsByCoinRequest) Reset() {
	*x = GetCoinAccountTransactionsByCoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinAccountTransactionsByCoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinAccountTransactionsByCoinRequest) ProtoMessage() {}

func (x *GetCoinAccountTransactionsByCoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinAccountTransactionsByCoinRequest.ProtoReflect.Descriptor instead.
func (*GetCoinAccountTransactionsByCoinRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{24}
}

func (x *GetCoinAccountTransactionsByCoinRequest) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

type GetCoinAccountTransactionsByCoinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*CoinAccountTransaction `protobuf:"bytes,1900,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *GetCoinAccountTransactionsByCoinResponse) Reset() {
	*x = GetCoinAccountTransactionsByCoinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinAccountTransactionsByCoinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinAccountTransactionsByCoinResponse) ProtoMessage() {}

func (x *GetCoinAccountTransactionsByCoinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinAccountTransactionsByCoinResponse.ProtoReflect.Descriptor instead.
func (*GetCoinAccountTransactionsByCoinResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{25}
}

func (x *GetCoinAccountTransactionsByCoinResponse) GetInfos() []*CoinAccountTransaction {
	if x != nil {
		return x.Infos
	}
	return nil
}

type UpdateCoinAccountTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CoinAccountTransaction `protobuf:"bytes,1910,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateCoinAccountTransactionRequest) Reset() {
	*x = UpdateCoinAccountTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCoinAccountTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCoinAccountTransactionRequest) ProtoMessage() {}

func (x *UpdateCoinAccountTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCoinAccountTransactionRequest.ProtoReflect.Descriptor instead.
func (*UpdateCoinAccountTransactionRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{26}
}

func (x *UpdateCoinAccountTransactionRequest) GetInfo() *CoinAccountTransaction {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateCoinAccountTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CoinAccountTransaction `protobuf:"bytes,1920,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateCoinAccountTransactionResponse) Reset() {
	*x = UpdateCoinAccountTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCoinAccountTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCoinAccountTransactionResponse) ProtoMessage() {}

func (x *UpdateCoinAccountTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCoinAccountTransactionResponse.ProtoReflect.Descriptor instead.
func (*UpdateCoinAccountTransactionResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{27}
}

func (x *UpdateCoinAccountTransactionResponse) GetInfo() *CoinAccountTransaction {
	if x != nil {
		return x.Info
	}
	return nil
}

type DeleteCoinAccountTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,2000,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *DeleteCoinAccountTransactionRequest) Reset() {
	*x = DeleteCoinAccountTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCoinAccountTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCoinAccountTransactionRequest) ProtoMessage() {}

func (x *DeleteCoinAccountTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCoinAccountTransactionRequest.ProtoReflect.Descriptor instead.
func (*DeleteCoinAccountTransactionRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{28}
}

func (x *DeleteCoinAccountTransactionRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type DeleteCoinAccountTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CoinAccountTransaction `protobuf:"bytes,2100,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteCoinAccountTransactionResponse) Reset() {
	*x = DeleteCoinAccountTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCoinAccountTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCoinAccountTransactionResponse) ProtoMessage() {}

func (x *DeleteCoinAccountTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCoinAccountTransactionResponse.ProtoReflect.Descriptor instead.
func (*DeleteCoinAccountTransactionResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{29}
}

func (x *DeleteCoinAccountTransactionResponse) GetInfo() *CoinAccountTransaction {
	if x != nil {
		return x.Info
	}
	return nil
}

type PlatformBenefit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                   string  `protobuf:"bytes,2200,opt,name=ID,proto3" json:"ID,omitempty"`
	GoodID               string  `protobuf:"bytes,2201,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
	BenefitAccountID     string  `protobuf:"bytes,2202,opt,name=BenefitAccountID,proto3" json:"BenefitAccountID,omitempty"`
	Amount               float64 `protobuf:"fixed64,2203,opt,name=Amount,proto3" json:"Amount,omitempty"`
	CreateAt             uint32  `protobuf:"varint,2204,opt,name=CreateAt,proto3" json:"CreateAt,omitempty"`
	ChainTransactionID   string  `protobuf:"bytes,2205,opt,name=ChainTransactionID,proto3" json:"ChainTransactionID,omitempty"`
	LastBenefitTimestamp uint32  `protobuf:"varint,2206,opt,name=LastBenefitTimestamp,proto3" json:"LastBenefitTimestamp,omitempty"`
}

func (x *PlatformBenefit) Reset() {
	*x = PlatformBenefit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlatformBenefit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatformBenefit) ProtoMessage() {}

func (x *PlatformBenefit) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatformBenefit.ProtoReflect.Descriptor instead.
func (*PlatformBenefit) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{30}
}

func (x *PlatformBenefit) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *PlatformBenefit) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *PlatformBenefit) GetBenefitAccountID() string {
	if x != nil {
		return x.BenefitAccountID
	}
	return ""
}

func (x *PlatformBenefit) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *PlatformBenefit) GetCreateAt() uint32 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *PlatformBenefit) GetChainTransactionID() string {
	if x != nil {
		return x.ChainTransactionID
	}
	return ""
}

func (x *PlatformBenefit) GetLastBenefitTimestamp() uint32 {
	if x != nil {
		return x.LastBenefitTimestamp
	}
	return 0
}

type CreatePlatformBenefitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PlatformBenefit `protobuf:"bytes,2300,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreatePlatformBenefitRequest) Reset() {
	*x = CreatePlatformBenefitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePlatformBenefitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlatformBenefitRequest) ProtoMessage() {}

func (x *CreatePlatformBenefitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlatformBenefitRequest.ProtoReflect.Descriptor instead.
func (*CreatePlatformBenefitRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{31}
}

func (x *CreatePlatformBenefitRequest) GetInfo() *PlatformBenefit {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreatePlatformBenefitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PlatformBenefit `protobuf:"bytes,2400,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreatePlatformBenefitResponse) Reset() {
	*x = CreatePlatformBenefitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePlatformBenefitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlatformBenefitResponse) ProtoMessage() {}

func (x *CreatePlatformBenefitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlatformBenefitResponse.ProtoReflect.Descriptor instead.
func (*CreatePlatformBenefitResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{32}
}

func (x *CreatePlatformBenefitResponse) GetInfo() *PlatformBenefit {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetPlatformBenefitsByGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoodID string `protobuf:"bytes,2500,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
}

func (x *GetPlatformBenefitsByGoodRequest) Reset() {
	*x = GetPlatformBenefitsByGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlatformBenefitsByGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlatformBenefitsByGoodRequest) ProtoMessage() {}

func (x *GetPlatformBenefitsByGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlatformBenefitsByGoodRequest.ProtoReflect.Descriptor instead.
func (*GetPlatformBenefitsByGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{33}
}

func (x *GetPlatformBenefitsByGoodRequest) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

type GetPlatformBenefitsByGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*PlatformBenefit `protobuf:"bytes,2600,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *GetPlatformBenefitsByGoodResponse) Reset() {
	*x = GetPlatformBenefitsByGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlatformBenefitsByGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlatformBenefitsByGoodResponse) ProtoMessage() {}

func (x *GetPlatformBenefitsByGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlatformBenefitsByGoodResponse.ProtoReflect.Descriptor instead.
func (*GetPlatformBenefitsByGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{34}
}

func (x *GetPlatformBenefitsByGoodResponse) GetInfos() []*PlatformBenefit {
	if x != nil {
		return x.Infos
	}
	return nil
}

type PlatformBenefitDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                 string           `protobuf:"bytes,2610,opt,name=ID,proto3" json:"ID,omitempty"`
	GoodID             string           `protobuf:"bytes,2611,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
	BenefitAddress     *CoinAccountInfo `protobuf:"bytes,2612,opt,name=BenefitAddress,proto3" json:"BenefitAddress,omitempty"`
	Amount             float64          `protobuf:"fixed64,2613,opt,name=Amount,proto3" json:"Amount,omitempty"`
	CreateAt           uint32           `protobuf:"varint,2614,opt,name=CreateAt,proto3" json:"CreateAt,omitempty"`
	ChainTransactionID string           `protobuf:"bytes,2615,opt,name=ChainTransactionID,proto3" json:"ChainTransactionID,omitempty"`
}

func (x *PlatformBenefitDetail) Reset() {
	*x = PlatformBenefitDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlatformBenefitDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatformBenefitDetail) ProtoMessage() {}

func (x *PlatformBenefitDetail) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatformBenefitDetail.ProtoReflect.Descriptor instead.
func (*PlatformBenefitDetail) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{35}
}

func (x *PlatformBenefitDetail) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *PlatformBenefitDetail) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *PlatformBenefitDetail) GetBenefitAddress() *CoinAccountInfo {
	if x != nil {
		return x.BenefitAddress
	}
	return nil
}

func (x *PlatformBenefitDetail) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *PlatformBenefitDetail) GetCreateAt() uint32 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *PlatformBenefitDetail) GetChainTransactionID() string {
	if x != nil {
		return x.ChainTransactionID
	}
	return ""
}

type GetPlatformBenefitDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,2620,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetPlatformBenefitDetailRequest) Reset() {
	*x = GetPlatformBenefitDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlatformBenefitDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlatformBenefitDetailRequest) ProtoMessage() {}

func (x *GetPlatformBenefitDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlatformBenefitDetailRequest.ProtoReflect.Descriptor instead.
func (*GetPlatformBenefitDetailRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{36}
}

func (x *GetPlatformBenefitDetailRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetPlatformBenefitDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Detail *PlatformBenefitDetail `protobuf:"bytes,2630,opt,name=Detail,proto3" json:"Detail,omitempty"`
}

func (x *GetPlatformBenefitDetailResponse) Reset() {
	*x = GetPlatformBenefitDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlatformBenefitDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlatformBenefitDetailResponse) ProtoMessage() {}

func (x *GetPlatformBenefitDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlatformBenefitDetailResponse.ProtoReflect.Descriptor instead.
func (*GetPlatformBenefitDetailResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{37}
}

func (x *GetPlatformBenefitDetailResponse) GetDetail() *PlatformBenefitDetail {
	if x != nil {
		return x.Detail
	}
	return nil
}

type GetPlatformBenefitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,2640,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetPlatformBenefitRequest) Reset() {
	*x = GetPlatformBenefitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlatformBenefitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlatformBenefitRequest) ProtoMessage() {}

func (x *GetPlatformBenefitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlatformBenefitRequest.ProtoReflect.Descriptor instead.
func (*GetPlatformBenefitRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{38}
}

func (x *GetPlatformBenefitRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetPlatformBenefitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PlatformBenefit `protobuf:"bytes,2650,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetPlatformBenefitResponse) Reset() {
	*x = GetPlatformBenefitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlatformBenefitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlatformBenefitResponse) ProtoMessage() {}

func (x *GetPlatformBenefitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlatformBenefitResponse.ProtoReflect.Descriptor instead.
func (*GetPlatformBenefitResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{39}
}

func (x *GetPlatformBenefitResponse) GetInfo() *PlatformBenefit {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetLatestPlatformBenefitByGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoodID string `protobuf:"bytes,1,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
}

func (x *GetLatestPlatformBenefitByGoodRequest) Reset() {
	*x = GetLatestPlatformBenefitByGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestPlatformBenefitByGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestPlatformBenefitByGoodRequest) ProtoMessage() {}

func (x *GetLatestPlatformBenefitByGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestPlatformBenefitByGoodRequest.ProtoReflect.Descriptor instead.
func (*GetLatestPlatformBenefitByGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{40}
}

func (x *GetLatestPlatformBenefitByGoodRequest) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

type GetLatestPlatformBenefitByGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PlatformBenefit `protobuf:"bytes,1,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetLatestPlatformBenefitByGoodResponse) Reset() {
	*x = GetLatestPlatformBenefitByGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestPlatformBenefitByGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestPlatformBenefitByGoodResponse) ProtoMessage() {}

func (x *GetLatestPlatformBenefitByGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestPlatformBenefitByGoodResponse.ProtoReflect.Descriptor instead.
func (*GetLatestPlatformBenefitByGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{41}
}

func (x *GetLatestPlatformBenefitByGoodResponse) GetInfo() *PlatformBenefit {
	if x != nil {
		return x.Info
	}
	return nil
}

type PlatformSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                       string `protobuf:"bytes,2700,opt,name=ID,proto3" json:"ID,omitempty"`
	GoodID                   string `protobuf:"bytes,2701,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
	BenefitAccountID         string `protobuf:"bytes,2702,opt,name=BenefitAccountID,proto3" json:"BenefitAccountID,omitempty"`
	PlatformOfflineAccountID string `protobuf:"bytes,2703,opt,name=PlatformOfflineAccountID,proto3" json:"PlatformOfflineAccountID,omitempty"`
	UserOnlineAccountID      string `protobuf:"bytes,2704,opt,name=UserOnlineAccountID,proto3" json:"UserOnlineAccountID,omitempty"`
	UserOfflineAccountID     string `protobuf:"bytes,2705,opt,name=UserOfflineAccountID,proto3" json:"UserOfflineAccountID,omitempty"`
	BenefitIntervalHours     int32  `protobuf:"varint,2706,opt,name=BenefitIntervalHours,proto3" json:"BenefitIntervalHours,omitempty"`
}

func (x *PlatformSetting) Reset() {
	*x = PlatformSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlatformSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatformSetting) ProtoMessage() {}

func (x *PlatformSetting) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatformSetting.ProtoReflect.Descriptor instead.
func (*PlatformSetting) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{42}
}

func (x *PlatformSetting) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *PlatformSetting) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *PlatformSetting) GetBenefitAccountID() string {
	if x != nil {
		return x.BenefitAccountID
	}
	return ""
}

func (x *PlatformSetting) GetPlatformOfflineAccountID() string {
	if x != nil {
		return x.PlatformOfflineAccountID
	}
	return ""
}

func (x *PlatformSetting) GetUserOnlineAccountID() string {
	if x != nil {
		return x.UserOnlineAccountID
	}
	return ""
}

func (x *PlatformSetting) GetUserOfflineAccountID() string {
	if x != nil {
		return x.UserOfflineAccountID
	}
	return ""
}

func (x *PlatformSetting) GetBenefitIntervalHours() int32 {
	if x != nil {
		return x.BenefitIntervalHours
	}
	return 0
}

type CreatePlatformSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PlatformSetting `protobuf:"bytes,2800,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreatePlatformSettingRequest) Reset() {
	*x = CreatePlatformSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePlatformSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlatformSettingRequest) ProtoMessage() {}

func (x *CreatePlatformSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlatformSettingRequest.ProtoReflect.Descriptor instead.
func (*CreatePlatformSettingRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{43}
}

func (x *CreatePlatformSettingRequest) GetInfo() *PlatformSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreatePlatformSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PlatformSetting `protobuf:"bytes,2900,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreatePlatformSettingResponse) Reset() {
	*x = CreatePlatformSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePlatformSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlatformSettingResponse) ProtoMessage() {}

func (x *CreatePlatformSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlatformSettingResponse.ProtoReflect.Descriptor instead.
func (*CreatePlatformSettingResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{44}
}

func (x *CreatePlatformSettingResponse) GetInfo() *PlatformSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdatePlatformSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PlatformSetting `protobuf:"bytes,3000,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdatePlatformSettingRequest) Reset() {
	*x = UpdatePlatformSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePlatformSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePlatformSettingRequest) ProtoMessage() {}

func (x *UpdatePlatformSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePlatformSettingRequest.ProtoReflect.Descriptor instead.
func (*UpdatePlatformSettingRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{45}
}

func (x *UpdatePlatformSettingRequest) GetInfo() *PlatformSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdatePlatformSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PlatformSetting `protobuf:"bytes,3100,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdatePlatformSettingResponse) Reset() {
	*x = UpdatePlatformSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePlatformSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePlatformSettingResponse) ProtoMessage() {}

func (x *UpdatePlatformSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePlatformSettingResponse.ProtoReflect.Descriptor instead.
func (*UpdatePlatformSettingResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{46}
}

func (x *UpdatePlatformSettingResponse) GetInfo() *PlatformSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetPlatformSettingByGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoodID string `protobuf:"bytes,3200,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
}

func (x *GetPlatformSettingByGoodRequest) Reset() {
	*x = GetPlatformSettingByGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlatformSettingByGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlatformSettingByGoodRequest) ProtoMessage() {}

func (x *GetPlatformSettingByGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlatformSettingByGoodRequest.ProtoReflect.Descriptor instead.
func (*GetPlatformSettingByGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{47}
}

func (x *GetPlatformSettingByGoodRequest) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

type GetPlatformSettingByGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PlatformSetting `protobuf:"bytes,3300,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetPlatformSettingByGoodResponse) Reset() {
	*x = GetPlatformSettingByGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlatformSettingByGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlatformSettingByGoodResponse) ProtoMessage() {}

func (x *GetPlatformSettingByGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlatformSettingByGoodResponse.ProtoReflect.Descriptor instead.
func (*GetPlatformSettingByGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{48}
}

func (x *GetPlatformSettingByGoodResponse) GetInfo() *PlatformSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type PlatformSettingDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                     string           `protobuf:"bytes,3310,opt,name=ID,proto3" json:"ID,omitempty"`
	GoodID                 string           `protobuf:"bytes,3311,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
	BenefitAddress         *CoinAccountInfo `protobuf:"bytes,3312,opt,name=BenefitAddress,proto3" json:"BenefitAddress,omitempty"`
	PlatformOfflineAddress *CoinAccountInfo `protobuf:"bytes,3313,opt,name=PlatformOfflineAddress,proto3" json:"PlatformOfflineAddress,omitempty"`
	UserOnlineAddress      *CoinAccountInfo `protobuf:"bytes,3314,opt,name=UserOnlineAddress,proto3" json:"UserOnlineAddress,omitempty"`
	UserOfflineAddress     *CoinAccountInfo `protobuf:"bytes,3315,opt,name=UserOfflineAddress,proto3" json:"UserOfflineAddress,omitempty"`
	BenefitIntervalHours   int32            `protobuf:"varint,3316,opt,name=BenefitIntervalHours,proto3" json:"BenefitIntervalHours,omitempty"`
}

func (x *PlatformSettingDetail) Reset() {
	*x = PlatformSettingDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlatformSettingDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatformSettingDetail) ProtoMessage() {}

func (x *PlatformSettingDetail) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatformSettingDetail.ProtoReflect.Descriptor instead.
func (*PlatformSettingDetail) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{49}
}

func (x *PlatformSettingDetail) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *PlatformSettingDetail) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *PlatformSettingDetail) GetBenefitAddress() *CoinAccountInfo {
	if x != nil {
		return x.BenefitAddress
	}
	return nil
}

func (x *PlatformSettingDetail) GetPlatformOfflineAddress() *CoinAccountInfo {
	if x != nil {
		return x.PlatformOfflineAddress
	}
	return nil
}

func (x *PlatformSettingDetail) GetUserOnlineAddress() *CoinAccountInfo {
	if x != nil {
		return x.UserOnlineAddress
	}
	return nil
}

func (x *PlatformSettingDetail) GetUserOfflineAddress() *CoinAccountInfo {
	if x != nil {
		return x.UserOfflineAddress
	}
	return nil
}

func (x *PlatformSettingDetail) GetBenefitIntervalHours() int32 {
	if x != nil {
		return x.BenefitIntervalHours
	}
	return 0
}

type GetPlatformSettingDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,3320,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetPlatformSettingDetailRequest) Reset() {
	*x = GetPlatformSettingDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlatformSettingDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlatformSettingDetailRequest) ProtoMessage() {}

func (x *GetPlatformSettingDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlatformSettingDetailRequest.ProtoReflect.Descriptor instead.
func (*GetPlatformSettingDetailRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{50}
}

func (x *GetPlatformSettingDetailRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetPlatformSettingDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Detail *PlatformSettingDetail `protobuf:"bytes,3330,opt,name=Detail,proto3" json:"Detail,omitempty"`
}

func (x *GetPlatformSettingDetailResponse) Reset() {
	*x = GetPlatformSettingDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlatformSettingDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlatformSettingDetailResponse) ProtoMessage() {}

func (x *GetPlatformSettingDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlatformSettingDetailResponse.ProtoReflect.Descriptor instead.
func (*GetPlatformSettingDetailResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{51}
}

func (x *GetPlatformSettingDetailResponse) GetDetail() *PlatformSettingDetail {
	if x != nil {
		return x.Detail
	}
	return nil
}

type GetPlatformSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,3340,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetPlatformSettingRequest) Reset() {
	*x = GetPlatformSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlatformSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlatformSettingRequest) ProtoMessage() {}

func (x *GetPlatformSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlatformSettingRequest.ProtoReflect.Descriptor instead.
func (*GetPlatformSettingRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{52}
}

func (x *GetPlatformSettingRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetPlatformSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PlatformSetting `protobuf:"bytes,3350,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetPlatformSettingResponse) Reset() {
	*x = GetPlatformSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlatformSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlatformSettingResponse) ProtoMessage() {}

func (x *GetPlatformSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlatformSettingResponse.ProtoReflect.Descriptor instead.
func (*GetPlatformSettingResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{53}
}

func (x *GetPlatformSettingResponse) GetInfo() *PlatformSetting {
	if x != nil {
		return x.Info
	}
	return nil
}

type UserBenefit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                   string  `protobuf:"bytes,3401,opt,name=ID,proto3" json:"ID,omitempty"`
	UserID               string  `protobuf:"bytes,3402,opt,name=UserID,proto3" json:"UserID,omitempty"`
	AppID                string  `protobuf:"bytes,3403,opt,name=AppID,proto3" json:"AppID,omitempty"`
	GoodID               string  `protobuf:"bytes,3404,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
	Amount               float64 `protobuf:"fixed64,3405,opt,name=Amount,proto3" json:"Amount,omitempty"`
	CreateAt             uint32  `protobuf:"varint,3406,opt,name=CreateAt,proto3" json:"CreateAt,omitempty"`
	OrderID              string  `protobuf:"bytes,3407,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
	LastBenefitTimestamp uint32  `protobuf:"varint,3408,opt,name=LastBenefitTimestamp,proto3" json:"LastBenefitTimestamp,omitempty"`
}

func (x *UserBenefit) Reset() {
	*x = UserBenefit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserBenefit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserBenefit) ProtoMessage() {}

func (x *UserBenefit) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserBenefit.ProtoReflect.Descriptor instead.
func (*UserBenefit) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{54}
}

func (x *UserBenefit) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *UserBenefit) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UserBenefit) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *UserBenefit) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *UserBenefit) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *UserBenefit) GetCreateAt() uint32 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *UserBenefit) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

func (x *UserBenefit) GetLastBenefitTimestamp() uint32 {
	if x != nil {
		return x.LastBenefitTimestamp
	}
	return 0
}

type CreateUserBenefitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *UserBenefit `protobuf:"bytes,3500,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateUserBenefitRequest) Reset() {
	*x = CreateUserBenefitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserBenefitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserBenefitRequest) ProtoMessage() {}

func (x *CreateUserBenefitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserBenefitRequest.ProtoReflect.Descriptor instead.
func (*CreateUserBenefitRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{55}
}

func (x *CreateUserBenefitRequest) GetInfo() *UserBenefit {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateUserBenefitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *UserBenefit `protobuf:"bytes,3600,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateUserBenefitResponse) Reset() {
	*x = CreateUserBenefitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserBenefitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserBenefitResponse) ProtoMessage() {}

func (x *CreateUserBenefitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserBenefitResponse.ProtoReflect.Descriptor instead.
func (*CreateUserBenefitResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{56}
}

func (x *CreateUserBenefitResponse) GetInfo() *UserBenefit {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetUserBenefitsByAppUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID  string `protobuf:"bytes,3700,opt,name=AppID,proto3" json:"AppID,omitempty"`
	UserID string `protobuf:"bytes,3701,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *GetUserBenefitsByAppUserRequest) Reset() {
	*x = GetUserBenefitsByAppUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserBenefitsByAppUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserBenefitsByAppUserRequest) ProtoMessage() {}

func (x *GetUserBenefitsByAppUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserBenefitsByAppUserRequest.ProtoReflect.Descriptor instead.
func (*GetUserBenefitsByAppUserRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{57}
}

func (x *GetUserBenefitsByAppUserRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetUserBenefitsByAppUserRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type GetUserBenefitsByAppUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*UserBenefit `protobuf:"bytes,3800,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *GetUserBenefitsByAppUserResponse) Reset() {
	*x = GetUserBenefitsByAppUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserBenefitsByAppUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserBenefitsByAppUserResponse) ProtoMessage() {}

func (x *GetUserBenefitsByAppUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserBenefitsByAppUserResponse.ProtoReflect.Descriptor instead.
func (*GetUserBenefitsByAppUserResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{58}
}

func (x *GetUserBenefitsByAppUserResponse) GetInfos() []*UserBenefit {
	if x != nil {
		return x.Infos
	}
	return nil
}

type PageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageIndex int32 `protobuf:"varint,21,opt,name=PageIndex,proto3" json:"PageIndex,omitempty"`
	PageSize  int32 `protobuf:"varint,22,opt,name=PageSize,proto3" json:"PageSize,omitempty"`
}

func (x *PageInfo) Reset() {
	*x = PageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageInfo) ProtoMessage() {}

func (x *PageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageInfo.ProtoReflect.Descriptor instead.
func (*PageInfo) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{59}
}

func (x *PageInfo) GetPageIndex() int32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *PageInfo) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetUserBenefitsByAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID    string    `protobuf:"bytes,3900,opt,name=AppID,proto3" json:"AppID,omitempty"`
	PageInfo *PageInfo `protobuf:"bytes,3950,opt,name=PageInfo,proto3" json:"PageInfo,omitempty"`
}

func (x *GetUserBenefitsByAppRequest) Reset() {
	*x = GetUserBenefitsByAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserBenefitsByAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserBenefitsByAppRequest) ProtoMessage() {}

func (x *GetUserBenefitsByAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserBenefitsByAppRequest.ProtoReflect.Descriptor instead.
func (*GetUserBenefitsByAppRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{60}
}

func (x *GetUserBenefitsByAppRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetUserBenefitsByAppRequest) GetPageInfo() *PageInfo {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

type GetUserBenefitsByAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*UserBenefit `protobuf:"bytes,3960,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *GetUserBenefitsByAppResponse) Reset() {
	*x = GetUserBenefitsByAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserBenefitsByAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserBenefitsByAppResponse) ProtoMessage() {}

func (x *GetUserBenefitsByAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserBenefitsByAppResponse.ProtoReflect.Descriptor instead.
func (*GetUserBenefitsByAppResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{61}
}

func (x *GetUserBenefitsByAppResponse) GetInfos() []*UserBenefit {
	if x != nil {
		return x.Infos
	}
	return nil
}

type GetLatestUserBenefitByGoodAppUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID  string `protobuf:"bytes,1,opt,name=AppID,proto3" json:"AppID,omitempty"`
	UserID string `protobuf:"bytes,2,opt,name=UserID,proto3" json:"UserID,omitempty"`
	GoodID string `protobuf:"bytes,3,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
}

func (x *GetLatestUserBenefitByGoodAppUserRequest) Reset() {
	*x = GetLatestUserBenefitByGoodAppUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestUserBenefitByGoodAppUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestUserBenefitByGoodAppUserRequest) ProtoMessage() {}

func (x *GetLatestUserBenefitByGoodAppUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestUserBenefitByGoodAppUserRequest.ProtoReflect.Descriptor instead.
func (*GetLatestUserBenefitByGoodAppUserRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{62}
}

func (x *GetLatestUserBenefitByGoodAppUserRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetLatestUserBenefitByGoodAppUserRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetLatestUserBenefitByGoodAppUserRequest) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

type GetLatestUserBenefitByGoodAppUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *UserBenefit `protobuf:"bytes,1,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetLatestUserBenefitByGoodAppUserResponse) Reset() {
	*x = GetLatestUserBenefitByGoodAppUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_billing_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestUserBenefitByGoodAppUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestUserBenefitByGoodAppUserResponse) ProtoMessage() {}

func (x *GetLatestUserBenefitByGoodAppUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_billing_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestUserBenefitByGoodAppUserResponse.ProtoReflect.Descriptor instead.
func (*GetLatestUserBenefitByGoodAppUserResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_billing_proto_rawDescGZIP(), []int{63}
}

func (x *GetLatestUserBenefitByGoodAppUserResponse) GetInfo() *UserBenefit {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_cloud_hashing_billing_proto protoreflect.FileDescriptor

var file_npool_cloud_hashing_billing_proto_rawDesc = []byte{
	0x0a, 0x21, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x2d, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x18, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x25, 0x0a, 0x0f, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0xe1, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x1f, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x44, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x19, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0xca, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x21, 0x0a, 0x0b, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18,
	0xcb, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x12, 0x19, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x18, 0xcc,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x55, 0x73, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x12, 0x13,
	0x0a, 0x04, 0x49, 0x64, 0x6c, 0x65, 0x18, 0xcd, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49,
	0x64, 0x6c, 0x65, 0x12, 0x15, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0xce, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x17, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0xcf, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x22, 0x5a, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69,
	0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3e, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xac, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x5b, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x90, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x28, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0xf4, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x58, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69,
	0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3e, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xd8, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x5e, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x22, 0x64, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x51, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69,
	0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x05, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x18, 0xbc, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x12, 0x17, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0xbd, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x64, 0x0a, 0x20, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x41, 0x70,
	0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a,
	0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0xa0, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22,
	0x2b, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x84, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x5b, 0x0a, 0x19,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x94, 0x03, 0x0a, 0x16, 0x43, 0x6f,
	0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0xcc, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x15, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0xcd,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x17, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0xce, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x0d, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0xcf, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x46,
	0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x0b,
	0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0xd0, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x44, 0x12,
	0x1f, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0xd1, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44,
	0x12, 0x17, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xd2, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0xd3, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74,
	0x18, 0xd4, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x74, 0x12, 0x15, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0xd5, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0xd6,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x35, 0x0a, 0x15, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x18, 0xd7, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x22, 0x6c, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0xb0, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6d,
	0x0a, 0x24, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x94,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x33, 0x0a,
	0x20, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0xf8, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x44, 0x22, 0x6a, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0xdc, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xe8,
	0x03, 0x0a, 0x1c, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0xe6, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x15, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0xe7, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x17, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0xe8, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x4c, 0x0a, 0x0b, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0xe9, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0b, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x48,
	0x0a, 0x09, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xea, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x54,
	0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0xeb, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43,
	0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x17, 0x0a, 0x06, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0xec, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x19, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0xed, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a,
	0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0xee, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x15, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x18, 0xef, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x2f, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0xf0, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x44, 0x12, 0x35, 0x0a, 0x15, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0xf1, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x39, 0x0a, 0x26, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x8e, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x44, 0x22, 0x7a, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4f, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x98, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x22, 0x70, 0x0a, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79,
	0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44,
	0x18, 0xc0, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x44,
	0x18, 0xc1, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x49, 0x44, 0x22, 0x7a, 0x0a, 0x2f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x42, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0xa4,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x40,
	0x0a, 0x28, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x22, 0x73, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a,
	0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x4a, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x88,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x44, 0x22, 0x73, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42,
	0x79, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a,
	0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0xec, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x6c, 0x0a, 0x23, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xf6, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6d, 0x0a, 0x24, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x80, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x36, 0x0a, 0x23, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x69,
	0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0xd0, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x6d, 0x0a, 0x24, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xb4, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x84, 0x02, 0x0a, 0x0f, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x12, 0x0f,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x98, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x17, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x99, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x10, 0x42, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x9a, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x17, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x9b, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x9c, 0x11, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x2f, 0x0a, 0x12, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x9d, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x33, 0x0a, 0x14,
	0x4c, 0x61, 0x73, 0x74, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x9e, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x4c, 0x61, 0x73,
	0x74, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0x5e, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3e, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xfc, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x52, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x5f, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xe0, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x3b, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x73, 0x42, 0x79, 0x47, 0x6f, 0x6f, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44,
	0x18, 0xc4, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x22,
	0x65, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x74, 0x73, 0x42, 0x79, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0xa8, 0x14,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x52,
	0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0xfc, 0x01, 0x0a, 0x15, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0xb2, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x17, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0xb3, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x52, 0x0a, 0x0e, 0x42, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xb4, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e,
	0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x17,
	0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xb5, 0x14, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x74, 0x18, 0xb6, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x74, 0x12, 0x2f, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0xb7, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x32, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0xbc,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x6c, 0x0a, 0x20, 0x47, 0x65, 0x74,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a,
	0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0xc6, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x2c, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0xd0, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x5c, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xda, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x3f, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x42,
	0x79, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f,
	0x6f, 0x64, 0x49, 0x44, 0x22, 0x67, 0x0a, 0x26, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74,
	0x42, 0x79, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xc2, 0x02,
	0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x8c, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x17, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x8d, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x10, 0x42,
	0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x8e, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x3b, 0x0a, 0x18, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x8f, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x31, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x90, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x33, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72,
	0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x91, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x66, 0x66,
	0x6c, 0x69, 0x6e, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x33, 0x0a,
	0x14, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x48, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x92, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x42, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x48, 0x6f, 0x75,
	0x72, 0x73, 0x22, 0x5e, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xf0, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x5f, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xd4, 0x16, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x5e, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xb8, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x5f, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x9c, 0x18, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x3a, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x47, 0x6f, 0x6f, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49,
	0x44, 0x18, 0x80, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44,
	0x22, 0x62, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xe4, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0xe4, 0x03, 0x0a, 0x15, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0f,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0xee, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x17, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0xef, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x52, 0x0a, 0x0e, 0x42, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xf0, 0x19, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69,
	0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x42, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x62, 0x0a, 0x16,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xf1, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x16, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x58, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xf2, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x5a, 0x0a, 0x12, 0x55, 0x73,
	0x65, 0x72, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0xf3, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x12, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x33, 0x0a, 0x14, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x18, 0xf4,
	0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x22, 0x32, 0x0a, 0x1f, 0x47,
	0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0f,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0xf8, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22,
	0x6c, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x82, 0x1a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x2c, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x8c, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x5c, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x96, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xed, 0x01, 0x0a, 0x0b, 0x55, 0x73,
	0x65, 0x72, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0xc9, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x17, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0xca, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x15, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0xcb, 0x1a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x17, 0x0a, 0x06, 0x47, 0x6f,
	0x6f, 0x64, 0x49, 0x44, 0x18, 0xcc, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f,
	0x64, 0x49, 0x44, 0x12, 0x17, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xcd, 0x1a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x08,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0xce, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x74, 0x12, 0x19, 0x0a, 0x07, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x44, 0x18, 0xcf, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x33, 0x0a, 0x14, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0xd0, 0x1a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x56, 0x0a, 0x18, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xac, 0x1b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x52, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x57, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42,
	0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x90, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x74, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x51, 0x0a, 0x1f, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x73, 0x42, 0x79, 0x41,
	0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a,
	0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0xf4, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x12, 0x17, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0xf5,
	0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x60, 0x0a,
	0x20, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x73,
	0x42, 0x79, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3c, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0xd8, 0x1d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22,
	0x44, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x50,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x75, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0xbc, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x3f, 0x0a, 0x08, 0x50,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xee, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5c, 0x0a, 0x1c,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x73, 0x42,
	0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x05,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0xf8, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x74, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x70, 0x0a, 0x28, 0x47, 0x65,
	0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x6e, 0x65, 0x66,
	0x69, 0x74, 0x42, 0x79, 0x47, 0x6f, 0x6f, 0x64, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x22, 0x66, 0x0a, 0x29,
	0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x74, 0x42, 0x79, 0x47, 0x6f, 0x6f, 0x64, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x32, 0x82, 0x2a, 0x0a, 0x13, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x48, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x61, 0x0a, 0x07,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0d, 0x22, 0x08, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12,
	0xa0, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a,
	0x01, 0x2a, 0x12, 0x94, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19,
	0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0xcb, 0x01, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x43, 0x6f,
	0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x3c, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x22, 0x24,
	0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x62, 0x79, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xbf, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x39, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42,
	0x79, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x26, 0x22, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x69,
	0x6e, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x62, 0x79, 0x2f, 0x61, 0x70,
	0x70, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x12, 0xa0, 0x01, 0x0a, 0x11, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x32, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c,
	0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x69,
	0x6e, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0xcd, 0x01, 0x0a,
	0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x28, 0x22, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0xc1, 0x01, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22, 0x20, 0x2f, 0x76, 0x31,
	0x2f, 0x67, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a,
	0x12, 0xfc, 0x01, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42,
	0x79, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x48, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x49, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x43, 0x6f,
	0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x36, 0x22, 0x31, 0x2f, 0x76, 0x31, 0x2f, 0x67,
	0x65, 0x74, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x79, 0x2f,
	0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x01, 0x2a, 0x12,
	0xe3, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x42, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x22, 0x2a, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f,
	0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x79, 0x2f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0xdf, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69,
	0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x41, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x42, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x22, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x67,
	0x65, 0x74, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x62, 0x79, 0x2f,
	0x63, 0x6f, 0x69, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0xcd, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x22,
	0x23, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x69, 0x6e,
	0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0xda, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x40, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x22, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65,
	0x74, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x3a, 0x01, 0x2a, 0x12, 0xcd, 0x01, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x22, 0x23, 0x2f, 0x76,
	0x31, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x3a, 0x01, 0x2a, 0x12, 0xb0, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x12, 0x36,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x62, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0xd7, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x74, 0x42, 0x79, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x3f, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x42, 0x79,
	0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x42,
	0x79, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x22, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x62,
	0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x2f, 0x62, 0x79, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x3a, 0x01,
	0x2a, 0x12, 0xc2, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x73, 0x42, 0x79, 0x47, 0x6f, 0x6f, 0x64, 0x12,
	0x3a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x73, 0x42, 0x79,
	0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x73, 0x42, 0x79, 0x47, 0x6f, 0x6f, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26,
	0x22, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2f, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x73, 0x2f, 0x62, 0x79, 0x2f, 0x67,
	0x6f, 0x6f, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0xa4, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x12, 0x33, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d,
	0x22, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2f, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0xbd, 0x01,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x39, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x67,
	0x65, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x62, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x74, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x3a, 0x01, 0x2a, 0x12, 0xb0, 0x01,
	0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x37, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20,
	0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x01, 0x2a,
	0x12, 0xb0, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x36, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x3a, 0x01, 0x2a, 0x12, 0xbe, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x47, 0x6f, 0x6f, 0x64,
	0x12, 0x39, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79,
	0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x47, 0x6f, 0x6f, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22,
	0x20, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x62, 0x79, 0x2f, 0x67, 0x6f, 0x6f,
	0x64, 0x3a, 0x01, 0x2a, 0x12, 0xbd, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x39, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24,
	0x22, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x3a, 0x01, 0x2a, 0x12, 0xa4, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x33, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x34, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18,
	0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0xa0, 0x01, 0x0a, 0x11,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x74, 0x12, 0x32, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x6e, 0x65, 0x66,
	0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1c, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x2f, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0xbf,
	0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69,
	0x74, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x12, 0x39, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x74, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74,
	0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x22, 0x21, 0x2f, 0x76, 0x31, 0x2f,
	0x67, 0x65, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x62, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74,
	0x73, 0x2f, 0x62, 0x79, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x3a, 0x01, 0x2a,
	0x12, 0xae, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x74, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x12, 0x35, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x6e, 0x65,
	0x66, 0x69, 0x74, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x36, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x73, 0x42, 0x79, 0x41, 0x70, 0x70,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21,
	0x22, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x62,
	0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x73, 0x2f, 0x62, 0x79, 0x2f, 0x61, 0x70, 0x70, 0x3a, 0x01,
	0x2a, 0x12, 0xe5, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x42, 0x79, 0x47, 0x6f, 0x6f, 0x64,
	0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x12, 0x42, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x42, 0x79, 0x47, 0x6f, 0x6f, 0x64, 0x41, 0x70, 0x70,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x42, 0x79, 0x47, 0x6f, 0x6f,
	0x64, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x22, 0x2c, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65,
	0x74, 0x2f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x62, 0x65,
	0x6e, 0x65, 0x66, 0x69, 0x74, 0x2f, 0x62, 0x79, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x61, 0x70,
	0x70, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2d, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_npool_cloud_hashing_billing_proto_rawDescOnce sync.Once
	file_npool_cloud_hashing_billing_proto_rawDescData = file_npool_cloud_hashing_billing_proto_rawDesc
)

func file_npool_cloud_hashing_billing_proto_rawDescGZIP() []byte {
	file_npool_cloud_hashing_billing_proto_rawDescOnce.Do(func() {
		file_npool_cloud_hashing_billing_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_cloud_hashing_billing_proto_rawDescData)
	})
	return file_npool_cloud_hashing_billing_proto_rawDescData
}

var file_npool_cloud_hashing_billing_proto_msgTypes = make([]protoimpl.MessageInfo, 64)
var file_npool_cloud_hashing_billing_proto_goTypes = []interface{}{
	(*VersionResponse)(nil),                                 // 0: cloud.hashing.billing.v1.VersionResponse
	(*CoinAccountInfo)(nil),                                 // 1: cloud.hashing.billing.v1.CoinAccountInfo
	(*CreateCoinAccountRequest)(nil),                        // 2: cloud.hashing.billing.v1.CreateCoinAccountRequest
	(*CreateCoinAccountResponse)(nil),                       // 3: cloud.hashing.billing.v1.CreateCoinAccountResponse
	(*GetCoinAccountRequest)(nil),                           // 4: cloud.hashing.billing.v1.GetCoinAccountRequest
	(*GetCoinAccountResponse)(nil),                          // 5: cloud.hashing.billing.v1.GetCoinAccountResponse
	(*GetCoinAccountByCoinAddressRequest)(nil),              // 6: cloud.hashing.billing.v1.GetCoinAccountByCoinAddressRequest
	(*GetCoinAccountByCoinAddressResponse)(nil),             // 7: cloud.hashing.billing.v1.GetCoinAccountByCoinAddressResponse
	(*GetCoinAccountsByAppUserRequest)(nil),                 // 8: cloud.hashing.billing.v1.GetCoinAccountsByAppUserRequest
	(*GetCoinAccountsByAppUserResponse)(nil),                // 9: cloud.hashing.billing.v1.GetCoinAccountsByAppUserResponse
	(*DeleteCoinAccountRequest)(nil),                        // 10: cloud.hashing.billing.v1.DeleteCoinAccountRequest
	(*DeleteCoinAccountResponse)(nil),                       // 11: cloud.hashing.billing.v1.DeleteCoinAccountResponse
	(*CoinAccountTransaction)(nil),                          // 12: cloud.hashing.billing.v1.CoinAccountTransaction
	(*CreateCoinAccountTransactionRequest)(nil),             // 13: cloud.hashing.billing.v1.CreateCoinAccountTransactionRequest
	(*CreateCoinAccountTransactionResponse)(nil),            // 14: cloud.hashing.billing.v1.CreateCoinAccountTransactionResponse
	(*GetCoinAccountTransactionRequest)(nil),                // 15: cloud.hashing.billing.v1.GetCoinAccountTransactionRequest
	(*GetCoinAccountTransactionResponse)(nil),               // 16: cloud.hashing.billing.v1.GetCoinAccountTransactionResponse
	(*CoinAccountTransactionDetail)(nil),                    // 17: cloud.hashing.billing.v1.CoinAccountTransactionDetail
	(*GetCoinAccountTransactionDetailRequest)(nil),          // 18: cloud.hashing.billing.v1.GetCoinAccountTransactionDetailRequest
	(*GetCoinAccountTransactionDetailResponse)(nil),         // 19: cloud.hashing.billing.v1.GetCoinAccountTransactionDetailResponse
	(*GetCoinAccountTransactionsByCoinAccountRequest)(nil),  // 20: cloud.hashing.billing.v1.GetCoinAccountTransactionsByCoinAccountRequest
	(*GetCoinAccountTransactionsByCoinAccountResponse)(nil), // 21: cloud.hashing.billing.v1.GetCoinAccountTransactionsByCoinAccountResponse
	(*GetCoinAccountTransactionsByStateRequest)(nil),        // 22: cloud.hashing.billing.v1.GetCoinAccountTransactionsByStateRequest
	(*GetCoinAccountTransactionsByStateResponse)(nil),       // 23: cloud.hashing.billing.v1.GetCoinAccountTransactionsByStateResponse
	(*GetCoinAccountTransactionsByCoinRequest)(nil),         // 24: cloud.hashing.billing.v1.GetCoinAccountTransactionsByCoinRequest
	(*GetCoinAccountTransactionsByCoinResponse)(nil),        // 25: cloud.hashing.billing.v1.GetCoinAccountTransactionsByCoinResponse
	(*UpdateCoinAccountTransactionRequest)(nil),             // 26: cloud.hashing.billing.v1.UpdateCoinAccountTransactionRequest
	(*UpdateCoinAccountTransactionResponse)(nil),            // 27: cloud.hashing.billing.v1.UpdateCoinAccountTransactionResponse
	(*DeleteCoinAccountTransactionRequest)(nil),             // 28: cloud.hashing.billing.v1.DeleteCoinAccountTransactionRequest
	(*DeleteCoinAccountTransactionResponse)(nil),            // 29: cloud.hashing.billing.v1.DeleteCoinAccountTransactionResponse
	(*PlatformBenefit)(nil),                                 // 30: cloud.hashing.billing.v1.PlatformBenefit
	(*CreatePlatformBenefitRequest)(nil),                    // 31: cloud.hashing.billing.v1.CreatePlatformBenefitRequest
	(*CreatePlatformBenefitResponse)(nil),                   // 32: cloud.hashing.billing.v1.CreatePlatformBenefitResponse
	(*GetPlatformBenefitsByGoodRequest)(nil),                // 33: cloud.hashing.billing.v1.GetPlatformBenefitsByGoodRequest
	(*GetPlatformBenefitsByGoodResponse)(nil),               // 34: cloud.hashing.billing.v1.GetPlatformBenefitsByGoodResponse
	(*PlatformBenefitDetail)(nil),                           // 35: cloud.hashing.billing.v1.PlatformBenefitDetail
	(*GetPlatformBenefitDetailRequest)(nil),                 // 36: cloud.hashing.billing.v1.GetPlatformBenefitDetailRequest
	(*GetPlatformBenefitDetailResponse)(nil),                // 37: cloud.hashing.billing.v1.GetPlatformBenefitDetailResponse
	(*GetPlatformBenefitRequest)(nil),                       // 38: cloud.hashing.billing.v1.GetPlatformBenefitRequest
	(*GetPlatformBenefitResponse)(nil),                      // 39: cloud.hashing.billing.v1.GetPlatformBenefitResponse
	(*GetLatestPlatformBenefitByGoodRequest)(nil),           // 40: cloud.hashing.billing.v1.GetLatestPlatformBenefitByGoodRequest
	(*GetLatestPlatformBenefitByGoodResponse)(nil),          // 41: cloud.hashing.billing.v1.GetLatestPlatformBenefitByGoodResponse
	(*PlatformSetting)(nil),                                 // 42: cloud.hashing.billing.v1.PlatformSetting
	(*CreatePlatformSettingRequest)(nil),                    // 43: cloud.hashing.billing.v1.CreatePlatformSettingRequest
	(*CreatePlatformSettingResponse)(nil),                   // 44: cloud.hashing.billing.v1.CreatePlatformSettingResponse
	(*UpdatePlatformSettingRequest)(nil),                    // 45: cloud.hashing.billing.v1.UpdatePlatformSettingRequest
	(*UpdatePlatformSettingResponse)(nil),                   // 46: cloud.hashing.billing.v1.UpdatePlatformSettingResponse
	(*GetPlatformSettingByGoodRequest)(nil),                 // 47: cloud.hashing.billing.v1.GetPlatformSettingByGoodRequest
	(*GetPlatformSettingByGoodResponse)(nil),                // 48: cloud.hashing.billing.v1.GetPlatformSettingByGoodResponse
	(*PlatformSettingDetail)(nil),                           // 49: cloud.hashing.billing.v1.PlatformSettingDetail
	(*GetPlatformSettingDetailRequest)(nil),                 // 50: cloud.hashing.billing.v1.GetPlatformSettingDetailRequest
	(*GetPlatformSettingDetailResponse)(nil),                // 51: cloud.hashing.billing.v1.GetPlatformSettingDetailResponse
	(*GetPlatformSettingRequest)(nil),                       // 52: cloud.hashing.billing.v1.GetPlatformSettingRequest
	(*GetPlatformSettingResponse)(nil),                      // 53: cloud.hashing.billing.v1.GetPlatformSettingResponse
	(*UserBenefit)(nil),                                     // 54: cloud.hashing.billing.v1.UserBenefit
	(*CreateUserBenefitRequest)(nil),                        // 55: cloud.hashing.billing.v1.CreateUserBenefitRequest
	(*CreateUserBenefitResponse)(nil),                       // 56: cloud.hashing.billing.v1.CreateUserBenefitResponse
	(*GetUserBenefitsByAppUserRequest)(nil),                 // 57: cloud.hashing.billing.v1.GetUserBenefitsByAppUserRequest
	(*GetUserBenefitsByAppUserResponse)(nil),                // 58: cloud.hashing.billing.v1.GetUserBenefitsByAppUserResponse
	(*PageInfo)(nil),                                        // 59: cloud.hashing.billing.v1.PageInfo
	(*GetUserBenefitsByAppRequest)(nil),                     // 60: cloud.hashing.billing.v1.GetUserBenefitsByAppRequest
	(*GetUserBenefitsByAppResponse)(nil),                    // 61: cloud.hashing.billing.v1.GetUserBenefitsByAppResponse
	(*GetLatestUserBenefitByGoodAppUserRequest)(nil),        // 62: cloud.hashing.billing.v1.GetLatestUserBenefitByGoodAppUserRequest
	(*GetLatestUserBenefitByGoodAppUserResponse)(nil),       // 63: cloud.hashing.billing.v1.GetLatestUserBenefitByGoodAppUserResponse
	(*emptypb.Empty)(nil),                                   // 64: google.protobuf.Empty
}
var file_npool_cloud_hashing_billing_proto_depIdxs = []int32{
	1,  // 0: cloud.hashing.billing.v1.CreateCoinAccountRequest.Info:type_name -> cloud.hashing.billing.v1.CoinAccountInfo
	1,  // 1: cloud.hashing.billing.v1.CreateCoinAccountResponse.Info:type_name -> cloud.hashing.billing.v1.CoinAccountInfo
	1,  // 2: cloud.hashing.billing.v1.GetCoinAccountResponse.Info:type_name -> cloud.hashing.billing.v1.CoinAccountInfo
	1,  // 3: cloud.hashing.billing.v1.GetCoinAccountByCoinAddressResponse.Info:type_name -> cloud.hashing.billing.v1.CoinAccountInfo
	1,  // 4: cloud.hashing.billing.v1.GetCoinAccountsByAppUserResponse.Infos:type_name -> cloud.hashing.billing.v1.CoinAccountInfo
	1,  // 5: cloud.hashing.billing.v1.DeleteCoinAccountResponse.Info:type_name -> cloud.hashing.billing.v1.CoinAccountInfo
	12, // 6: cloud.hashing.billing.v1.CreateCoinAccountTransactionRequest.Info:type_name -> cloud.hashing.billing.v1.CoinAccountTransaction
	12, // 7: cloud.hashing.billing.v1.CreateCoinAccountTransactionResponse.Info:type_name -> cloud.hashing.billing.v1.CoinAccountTransaction
	12, // 8: cloud.hashing.billing.v1.GetCoinAccountTransactionResponse.Info:type_name -> cloud.hashing.billing.v1.CoinAccountTransaction
	1,  // 9: cloud.hashing.billing.v1.CoinAccountTransactionDetail.FromAddress:type_name -> cloud.hashing.billing.v1.CoinAccountInfo
	1,  // 10: cloud.hashing.billing.v1.CoinAccountTransactionDetail.ToAddress:type_name -> cloud.hashing.billing.v1.CoinAccountInfo
	17, // 11: cloud.hashing.billing.v1.GetCoinAccountTransactionDetailResponse.Detail:type_name -> cloud.hashing.billing.v1.CoinAccountTransactionDetail
	12, // 12: cloud.hashing.billing.v1.GetCoinAccountTransactionsByCoinAccountResponse.Infos:type_name -> cloud.hashing.billing.v1.CoinAccountTransaction
	12, // 13: cloud.hashing.billing.v1.GetCoinAccountTransactionsByStateResponse.Infos:type_name -> cloud.hashing.billing.v1.CoinAccountTransaction
	12, // 14: cloud.hashing.billing.v1.GetCoinAccountTransactionsByCoinResponse.Infos:type_name -> cloud.hashing.billing.v1.CoinAccountTransaction
	12, // 15: cloud.hashing.billing.v1.UpdateCoinAccountTransactionRequest.Info:type_name -> cloud.hashing.billing.v1.CoinAccountTransaction
	12, // 16: cloud.hashing.billing.v1.UpdateCoinAccountTransactionResponse.Info:type_name -> cloud.hashing.billing.v1.CoinAccountTransaction
	12, // 17: cloud.hashing.billing.v1.DeleteCoinAccountTransactionResponse.Info:type_name -> cloud.hashing.billing.v1.CoinAccountTransaction
	30, // 18: cloud.hashing.billing.v1.CreatePlatformBenefitRequest.Info:type_name -> cloud.hashing.billing.v1.PlatformBenefit
	30, // 19: cloud.hashing.billing.v1.CreatePlatformBenefitResponse.Info:type_name -> cloud.hashing.billing.v1.PlatformBenefit
	30, // 20: cloud.hashing.billing.v1.GetPlatformBenefitsByGoodResponse.Infos:type_name -> cloud.hashing.billing.v1.PlatformBenefit
	1,  // 21: cloud.hashing.billing.v1.PlatformBenefitDetail.BenefitAddress:type_name -> cloud.hashing.billing.v1.CoinAccountInfo
	35, // 22: cloud.hashing.billing.v1.GetPlatformBenefitDetailResponse.Detail:type_name -> cloud.hashing.billing.v1.PlatformBenefitDetail
	30, // 23: cloud.hashing.billing.v1.GetPlatformBenefitResponse.Info:type_name -> cloud.hashing.billing.v1.PlatformBenefit
	30, // 24: cloud.hashing.billing.v1.GetLatestPlatformBenefitByGoodResponse.Info:type_name -> cloud.hashing.billing.v1.PlatformBenefit
	42, // 25: cloud.hashing.billing.v1.CreatePlatformSettingRequest.Info:type_name -> cloud.hashing.billing.v1.PlatformSetting
	42, // 26: cloud.hashing.billing.v1.CreatePlatformSettingResponse.Info:type_name -> cloud.hashing.billing.v1.PlatformSetting
	42, // 27: cloud.hashing.billing.v1.UpdatePlatformSettingRequest.Info:type_name -> cloud.hashing.billing.v1.PlatformSetting
	42, // 28: cloud.hashing.billing.v1.UpdatePlatformSettingResponse.Info:type_name -> cloud.hashing.billing.v1.PlatformSetting
	42, // 29: cloud.hashing.billing.v1.GetPlatformSettingByGoodResponse.Info:type_name -> cloud.hashing.billing.v1.PlatformSetting
	1,  // 30: cloud.hashing.billing.v1.PlatformSettingDetail.BenefitAddress:type_name -> cloud.hashing.billing.v1.CoinAccountInfo
	1,  // 31: cloud.hashing.billing.v1.PlatformSettingDetail.PlatformOfflineAddress:type_name -> cloud.hashing.billing.v1.CoinAccountInfo
	1,  // 32: cloud.hashing.billing.v1.PlatformSettingDetail.UserOnlineAddress:type_name -> cloud.hashing.billing.v1.CoinAccountInfo
	1,  // 33: cloud.hashing.billing.v1.PlatformSettingDetail.UserOfflineAddress:type_name -> cloud.hashing.billing.v1.CoinAccountInfo
	49, // 34: cloud.hashing.billing.v1.GetPlatformSettingDetailResponse.Detail:type_name -> cloud.hashing.billing.v1.PlatformSettingDetail
	42, // 35: cloud.hashing.billing.v1.GetPlatformSettingResponse.Info:type_name -> cloud.hashing.billing.v1.PlatformSetting
	54, // 36: cloud.hashing.billing.v1.CreateUserBenefitRequest.Info:type_name -> cloud.hashing.billing.v1.UserBenefit
	54, // 37: cloud.hashing.billing.v1.CreateUserBenefitResponse.Info:type_name -> cloud.hashing.billing.v1.UserBenefit
	54, // 38: cloud.hashing.billing.v1.GetUserBenefitsByAppUserResponse.Infos:type_name -> cloud.hashing.billing.v1.UserBenefit
	59, // 39: cloud.hashing.billing.v1.GetUserBenefitsByAppRequest.PageInfo:type_name -> cloud.hashing.billing.v1.PageInfo
	54, // 40: cloud.hashing.billing.v1.GetUserBenefitsByAppResponse.Infos:type_name -> cloud.hashing.billing.v1.UserBenefit
	54, // 41: cloud.hashing.billing.v1.GetLatestUserBenefitByGoodAppUserResponse.Info:type_name -> cloud.hashing.billing.v1.UserBenefit
	64, // 42: cloud.hashing.billing.v1.CloudHashingBilling.Version:input_type -> google.protobuf.Empty
	2,  // 43: cloud.hashing.billing.v1.CloudHashingBilling.CreateCoinAccount:input_type -> cloud.hashing.billing.v1.CreateCoinAccountRequest
	4,  // 44: cloud.hashing.billing.v1.CloudHashingBilling.GetCoinAccount:input_type -> cloud.hashing.billing.v1.GetCoinAccountRequest
	6,  // 45: cloud.hashing.billing.v1.CloudHashingBilling.GetCoinAccountByCoinAddress:input_type -> cloud.hashing.billing.v1.GetCoinAccountByCoinAddressRequest
	8,  // 46: cloud.hashing.billing.v1.CloudHashingBilling.GetCoinAccountsByAppUser:input_type -> cloud.hashing.billing.v1.GetCoinAccountsByAppUserRequest
	10, // 47: cloud.hashing.billing.v1.CloudHashingBilling.DeleteCoinAccount:input_type -> cloud.hashing.billing.v1.DeleteCoinAccountRequest
	13, // 48: cloud.hashing.billing.v1.CloudHashingBilling.CreateCoinAccountTransaction:input_type -> cloud.hashing.billing.v1.CreateCoinAccountTransactionRequest
	15, // 49: cloud.hashing.billing.v1.CloudHashingBilling.GetCoinAccountTransaction:input_type -> cloud.hashing.billing.v1.GetCoinAccountTransactionRequest
	20, // 50: cloud.hashing.billing.v1.CloudHashingBilling.GetCoinAccountTransactionsByCoinAccount:input_type -> cloud.hashing.billing.v1.GetCoinAccountTransactionsByCoinAccountRequest
	22, // 51: cloud.hashing.billing.v1.CloudHashingBilling.GetCoinAccountTransactionsByState:input_type -> cloud.hashing.billing.v1.GetCoinAccountTransactionsByStateRequest
	24, // 52: cloud.hashing.billing.v1.CloudHashingBilling.GetCoinAccountTransactionsByCoin:input_type -> cloud.hashing.billing.v1.GetCoinAccountTransactionsByCoinRequest
	26, // 53: cloud.hashing.billing.v1.CloudHashingBilling.UpdateCoinAccountTransaction:input_type -> cloud.hashing.billing.v1.UpdateCoinAccountTransactionRequest
	18, // 54: cloud.hashing.billing.v1.CloudHashingBilling.GetCoinAccountTransactionDetail:input_type -> cloud.hashing.billing.v1.GetCoinAccountTransactionDetailRequest
	28, // 55: cloud.hashing.billing.v1.CloudHashingBilling.DeleteCoinAccountTransaction:input_type -> cloud.hashing.billing.v1.DeleteCoinAccountTransactionRequest
	31, // 56: cloud.hashing.billing.v1.CloudHashingBilling.CreatePlatformBenefit:input_type -> cloud.hashing.billing.v1.CreatePlatformBenefitRequest
	40, // 57: cloud.hashing.billing.v1.CloudHashingBilling.GetLatestPlatformBenefitByGood:input_type -> cloud.hashing.billing.v1.GetLatestPlatformBenefitByGoodRequest
	33, // 58: cloud.hashing.billing.v1.CloudHashingBilling.GetPlatformBenefitsByGood:input_type -> cloud.hashing.billing.v1.GetPlatformBenefitsByGoodRequest
	38, // 59: cloud.hashing.billing.v1.CloudHashingBilling.GetPlatformBenefit:input_type -> cloud.hashing.billing.v1.GetPlatformBenefitRequest
	36, // 60: cloud.hashing.billing.v1.CloudHashingBilling.GetPlatformBenefitDetail:input_type -> cloud.hashing.billing.v1.GetPlatformBenefitDetailRequest
	43, // 61: cloud.hashing.billing.v1.CloudHashingBilling.CreatePlatformSetting:input_type -> cloud.hashing.billing.v1.CreatePlatformSettingRequest
	45, // 62: cloud.hashing.billing.v1.CloudHashingBilling.UpdatePlatformSetting:input_type -> cloud.hashing.billing.v1.UpdatePlatformSettingRequest
	47, // 63: cloud.hashing.billing.v1.CloudHashingBilling.GetPlatformSettingByGood:input_type -> cloud.hashing.billing.v1.GetPlatformSettingByGoodRequest
	50, // 64: cloud.hashing.billing.v1.CloudHashingBilling.GetPlatformSettingDetail:input_type -> cloud.hashing.billing.v1.GetPlatformSettingDetailRequest
	52, // 65: cloud.hashing.billing.v1.CloudHashingBilling.GetPlatformSetting:input_type -> cloud.hashing.billing.v1.GetPlatformSettingRequest
	55, // 66: cloud.hashing.billing.v1.CloudHashingBilling.CreateUserBenefit:input_type -> cloud.hashing.billing.v1.CreateUserBenefitRequest
	57, // 67: cloud.hashing.billing.v1.CloudHashingBilling.GetUserBenefitsByAppUser:input_type -> cloud.hashing.billing.v1.GetUserBenefitsByAppUserRequest
	60, // 68: cloud.hashing.billing.v1.CloudHashingBilling.GetUserBenefitsByApp:input_type -> cloud.hashing.billing.v1.GetUserBenefitsByAppRequest
	62, // 69: cloud.hashing.billing.v1.CloudHashingBilling.GetLatestUserBenefitByGoodAppUser:input_type -> cloud.hashing.billing.v1.GetLatestUserBenefitByGoodAppUserRequest
	0,  // 70: cloud.hashing.billing.v1.CloudHashingBilling.Version:output_type -> cloud.hashing.billing.v1.VersionResponse
	3,  // 71: cloud.hashing.billing.v1.CloudHashingBilling.CreateCoinAccount:output_type -> cloud.hashing.billing.v1.CreateCoinAccountResponse
	5,  // 72: cloud.hashing.billing.v1.CloudHashingBilling.GetCoinAccount:output_type -> cloud.hashing.billing.v1.GetCoinAccountResponse
	7,  // 73: cloud.hashing.billing.v1.CloudHashingBilling.GetCoinAccountByCoinAddress:output_type -> cloud.hashing.billing.v1.GetCoinAccountByCoinAddressResponse
	9,  // 74: cloud.hashing.billing.v1.CloudHashingBilling.GetCoinAccountsByAppUser:output_type -> cloud.hashing.billing.v1.GetCoinAccountsByAppUserResponse
	11, // 75: cloud.hashing.billing.v1.CloudHashingBilling.DeleteCoinAccount:output_type -> cloud.hashing.billing.v1.DeleteCoinAccountResponse
	14, // 76: cloud.hashing.billing.v1.CloudHashingBilling.CreateCoinAccountTransaction:output_type -> cloud.hashing.billing.v1.CreateCoinAccountTransactionResponse
	16, // 77: cloud.hashing.billing.v1.CloudHashingBilling.GetCoinAccountTransaction:output_type -> cloud.hashing.billing.v1.GetCoinAccountTransactionResponse
	21, // 78: cloud.hashing.billing.v1.CloudHashingBilling.GetCoinAccountTransactionsByCoinAccount:output_type -> cloud.hashing.billing.v1.GetCoinAccountTransactionsByCoinAccountResponse
	23, // 79: cloud.hashing.billing.v1.CloudHashingBilling.GetCoinAccountTransactionsByState:output_type -> cloud.hashing.billing.v1.GetCoinAccountTransactionsByStateResponse
	25, // 80: cloud.hashing.billing.v1.CloudHashingBilling.GetCoinAccountTransactionsByCoin:output_type -> cloud.hashing.billing.v1.GetCoinAccountTransactionsByCoinResponse
	27, // 81: cloud.hashing.billing.v1.CloudHashingBilling.UpdateCoinAccountTransaction:output_type -> cloud.hashing.billing.v1.UpdateCoinAccountTransactionResponse
	19, // 82: cloud.hashing.billing.v1.CloudHashingBilling.GetCoinAccountTransactionDetail:output_type -> cloud.hashing.billing.v1.GetCoinAccountTransactionDetailResponse
	29, // 83: cloud.hashing.billing.v1.CloudHashingBilling.DeleteCoinAccountTransaction:output_type -> cloud.hashing.billing.v1.DeleteCoinAccountTransactionResponse
	32, // 84: cloud.hashing.billing.v1.CloudHashingBilling.CreatePlatformBenefit:output_type -> cloud.hashing.billing.v1.CreatePlatformBenefitResponse
	41, // 85: cloud.hashing.billing.v1.CloudHashingBilling.GetLatestPlatformBenefitByGood:output_type -> cloud.hashing.billing.v1.GetLatestPlatformBenefitByGoodResponse
	34, // 86: cloud.hashing.billing.v1.CloudHashingBilling.GetPlatformBenefitsByGood:output_type -> cloud.hashing.billing.v1.GetPlatformBenefitsByGoodResponse
	39, // 87: cloud.hashing.billing.v1.CloudHashingBilling.GetPlatformBenefit:output_type -> cloud.hashing.billing.v1.GetPlatformBenefitResponse
	37, // 88: cloud.hashing.billing.v1.CloudHashingBilling.GetPlatformBenefitDetail:output_type -> cloud.hashing.billing.v1.GetPlatformBenefitDetailResponse
	44, // 89: cloud.hashing.billing.v1.CloudHashingBilling.CreatePlatformSetting:output_type -> cloud.hashing.billing.v1.CreatePlatformSettingResponse
	46, // 90: cloud.hashing.billing.v1.CloudHashingBilling.UpdatePlatformSetting:output_type -> cloud.hashing.billing.v1.UpdatePlatformSettingResponse
	48, // 91: cloud.hashing.billing.v1.CloudHashingBilling.GetPlatformSettingByGood:output_type -> cloud.hashing.billing.v1.GetPlatformSettingByGoodResponse
	51, // 92: cloud.hashing.billing.v1.CloudHashingBilling.GetPlatformSettingDetail:output_type -> cloud.hashing.billing.v1.GetPlatformSettingDetailResponse
	53, // 93: cloud.hashing.billing.v1.CloudHashingBilling.GetPlatformSetting:output_type -> cloud.hashing.billing.v1.GetPlatformSettingResponse
	56, // 94: cloud.hashing.billing.v1.CloudHashingBilling.CreateUserBenefit:output_type -> cloud.hashing.billing.v1.CreateUserBenefitResponse
	58, // 95: cloud.hashing.billing.v1.CloudHashingBilling.GetUserBenefitsByAppUser:output_type -> cloud.hashing.billing.v1.GetUserBenefitsByAppUserResponse
	61, // 96: cloud.hashing.billing.v1.CloudHashingBilling.GetUserBenefitsByApp:output_type -> cloud.hashing.billing.v1.GetUserBenefitsByAppResponse
	63, // 97: cloud.hashing.billing.v1.CloudHashingBilling.GetLatestUserBenefitByGoodAppUser:output_type -> cloud.hashing.billing.v1.GetLatestUserBenefitByGoodAppUserResponse
	70, // [70:98] is the sub-list for method output_type
	42, // [42:70] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_npool_cloud_hashing_billing_proto_init() }
func file_npool_cloud_hashing_billing_proto_init() {
	if File_npool_cloud_hashing_billing_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_cloud_hashing_billing_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinAccountInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCoinAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCoinAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinAccountByCoinAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinAccountByCoinAddressResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinAccountsByAppUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinAccountsByAppUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCoinAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCoinAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinAccountTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCoinAccountTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCoinAccountTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinAccountTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinAccountTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinAccountTransactionDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinAccountTransactionDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinAccountTransactionDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinAccountTransactionsByCoinAccountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinAccountTransactionsByCoinAccountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinAccountTransactionsByStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinAccountTransactionsByStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinAccountTransactionsByCoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinAccountTransactionsByCoinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCoinAccountTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCoinAccountTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCoinAccountTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCoinAccountTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlatformBenefit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePlatformBenefitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePlatformBenefitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlatformBenefitsByGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlatformBenefitsByGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlatformBenefitDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlatformBenefitDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlatformBenefitDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlatformBenefitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlatformBenefitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestPlatformBenefitByGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestPlatformBenefitByGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlatformSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePlatformSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePlatformSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePlatformSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePlatformSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlatformSettingByGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlatformSettingByGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlatformSettingDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlatformSettingDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlatformSettingDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlatformSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlatformSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserBenefit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserBenefitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserBenefitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserBenefitsByAppUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserBenefitsByAppUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserBenefitsByAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserBenefitsByAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestUserBenefitByGoodAppUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_billing_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestUserBenefitByGoodAppUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_cloud_hashing_billing_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   64,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_cloud_hashing_billing_proto_goTypes,
		DependencyIndexes: file_npool_cloud_hashing_billing_proto_depIdxs,
		MessageInfos:      file_npool_cloud_hashing_billing_proto_msgTypes,
	}.Build()
	File_npool_cloud_hashing_billing_proto = out.File
	file_npool_cloud_hashing_billing_proto_rawDesc = nil
	file_npool_cloud_hashing_billing_proto_goTypes = nil
	file_npool_cloud_hashing_billing_proto_depIdxs = nil
}
