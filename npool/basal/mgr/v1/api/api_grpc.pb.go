// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/basal/mgr/v1/api/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateAPI(ctx context.Context, in *CreateAPIRequest, opts ...grpc.CallOption) (*CreateAPIResponse, error)
	CreateAPIs(ctx context.Context, in *CreateAPIsRequest, opts ...grpc.CallOption) (*CreateAPIsResponse, error)
	UpdateAPI(ctx context.Context, in *UpdateAPIRequest, opts ...grpc.CallOption) (*UpdateAPIResponse, error)
	GetAPI(ctx context.Context, in *GetAPIRequest, opts ...grpc.CallOption) (*GetAPIResponse, error)
	GetAPIOnly(ctx context.Context, in *GetAPIOnlyRequest, opts ...grpc.CallOption) (*GetAPIOnlyResponse, error)
	GetAPIs(ctx context.Context, in *GetAPIsRequest, opts ...grpc.CallOption) (*GetAPIsResponse, error)
	ExistAPI(ctx context.Context, in *ExistAPIRequest, opts ...grpc.CallOption) (*ExistAPIResponse, error)
	ExistAPIConds(ctx context.Context, in *ExistAPICondsRequest, opts ...grpc.CallOption) (*ExistAPICondsResponse, error)
	CountAPIs(ctx context.Context, in *CountAPIsRequest, opts ...grpc.CallOption) (*CountAPIsResponse, error)
	DeleteAPI(ctx context.Context, in *DeleteAPIRequest, opts ...grpc.CallOption) (*DeleteAPIResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateAPI(ctx context.Context, in *CreateAPIRequest, opts ...grpc.CallOption) (*CreateAPIResponse, error) {
	out := new(CreateAPIResponse)
	err := c.cc.Invoke(ctx, "/basal.manager.api.v1.Manager/CreateAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateAPIs(ctx context.Context, in *CreateAPIsRequest, opts ...grpc.CallOption) (*CreateAPIsResponse, error) {
	out := new(CreateAPIsResponse)
	err := c.cc.Invoke(ctx, "/basal.manager.api.v1.Manager/CreateAPIs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateAPI(ctx context.Context, in *UpdateAPIRequest, opts ...grpc.CallOption) (*UpdateAPIResponse, error) {
	out := new(UpdateAPIResponse)
	err := c.cc.Invoke(ctx, "/basal.manager.api.v1.Manager/UpdateAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetAPI(ctx context.Context, in *GetAPIRequest, opts ...grpc.CallOption) (*GetAPIResponse, error) {
	out := new(GetAPIResponse)
	err := c.cc.Invoke(ctx, "/basal.manager.api.v1.Manager/GetAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetAPIOnly(ctx context.Context, in *GetAPIOnlyRequest, opts ...grpc.CallOption) (*GetAPIOnlyResponse, error) {
	out := new(GetAPIOnlyResponse)
	err := c.cc.Invoke(ctx, "/basal.manager.api.v1.Manager/GetAPIOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetAPIs(ctx context.Context, in *GetAPIsRequest, opts ...grpc.CallOption) (*GetAPIsResponse, error) {
	out := new(GetAPIsResponse)
	err := c.cc.Invoke(ctx, "/basal.manager.api.v1.Manager/GetAPIs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistAPI(ctx context.Context, in *ExistAPIRequest, opts ...grpc.CallOption) (*ExistAPIResponse, error) {
	out := new(ExistAPIResponse)
	err := c.cc.Invoke(ctx, "/basal.manager.api.v1.Manager/ExistAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistAPIConds(ctx context.Context, in *ExistAPICondsRequest, opts ...grpc.CallOption) (*ExistAPICondsResponse, error) {
	out := new(ExistAPICondsResponse)
	err := c.cc.Invoke(ctx, "/basal.manager.api.v1.Manager/ExistAPIConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountAPIs(ctx context.Context, in *CountAPIsRequest, opts ...grpc.CallOption) (*CountAPIsResponse, error) {
	out := new(CountAPIsResponse)
	err := c.cc.Invoke(ctx, "/basal.manager.api.v1.Manager/CountAPIs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteAPI(ctx context.Context, in *DeleteAPIRequest, opts ...grpc.CallOption) (*DeleteAPIResponse, error) {
	out := new(DeleteAPIResponse)
	err := c.cc.Invoke(ctx, "/basal.manager.api.v1.Manager/DeleteAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateAPI(context.Context, *CreateAPIRequest) (*CreateAPIResponse, error)
	CreateAPIs(context.Context, *CreateAPIsRequest) (*CreateAPIsResponse, error)
	UpdateAPI(context.Context, *UpdateAPIRequest) (*UpdateAPIResponse, error)
	GetAPI(context.Context, *GetAPIRequest) (*GetAPIResponse, error)
	GetAPIOnly(context.Context, *GetAPIOnlyRequest) (*GetAPIOnlyResponse, error)
	GetAPIs(context.Context, *GetAPIsRequest) (*GetAPIsResponse, error)
	ExistAPI(context.Context, *ExistAPIRequest) (*ExistAPIResponse, error)
	ExistAPIConds(context.Context, *ExistAPICondsRequest) (*ExistAPICondsResponse, error)
	CountAPIs(context.Context, *CountAPIsRequest) (*CountAPIsResponse, error)
	DeleteAPI(context.Context, *DeleteAPIRequest) (*DeleteAPIResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateAPI(context.Context, *CreateAPIRequest) (*CreateAPIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAPI not implemented")
}
func (UnimplementedManagerServer) CreateAPIs(context.Context, *CreateAPIsRequest) (*CreateAPIsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAPIs not implemented")
}
func (UnimplementedManagerServer) UpdateAPI(context.Context, *UpdateAPIRequest) (*UpdateAPIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAPI not implemented")
}
func (UnimplementedManagerServer) GetAPI(context.Context, *GetAPIRequest) (*GetAPIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPI not implemented")
}
func (UnimplementedManagerServer) GetAPIOnly(context.Context, *GetAPIOnlyRequest) (*GetAPIOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIOnly not implemented")
}
func (UnimplementedManagerServer) GetAPIs(context.Context, *GetAPIsRequest) (*GetAPIsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIs not implemented")
}
func (UnimplementedManagerServer) ExistAPI(context.Context, *ExistAPIRequest) (*ExistAPIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistAPI not implemented")
}
func (UnimplementedManagerServer) ExistAPIConds(context.Context, *ExistAPICondsRequest) (*ExistAPICondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistAPIConds not implemented")
}
func (UnimplementedManagerServer) CountAPIs(context.Context, *CountAPIsRequest) (*CountAPIsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAPIs not implemented")
}
func (UnimplementedManagerServer) DeleteAPI(context.Context, *DeleteAPIRequest) (*DeleteAPIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAPI not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/basal.manager.api.v1.Manager/CreateAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateAPI(ctx, req.(*CreateAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateAPIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAPIsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateAPIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/basal.manager.api.v1.Manager/CreateAPIs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateAPIs(ctx, req.(*CreateAPIsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/basal.manager.api.v1.Manager/UpdateAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateAPI(ctx, req.(*UpdateAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/basal.manager.api.v1.Manager/GetAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetAPI(ctx, req.(*GetAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetAPIOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAPIOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetAPIOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/basal.manager.api.v1.Manager/GetAPIOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetAPIOnly(ctx, req.(*GetAPIOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetAPIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAPIsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetAPIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/basal.manager.api.v1.Manager/GetAPIs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetAPIs(ctx, req.(*GetAPIsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/basal.manager.api.v1.Manager/ExistAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistAPI(ctx, req.(*ExistAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistAPIConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistAPICondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistAPIConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/basal.manager.api.v1.Manager/ExistAPIConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistAPIConds(ctx, req.(*ExistAPICondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountAPIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAPIsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountAPIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/basal.manager.api.v1.Manager/CountAPIs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountAPIs(ctx, req.(*CountAPIsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/basal.manager.api.v1.Manager/DeleteAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteAPI(ctx, req.(*DeleteAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "basal.manager.api.v1.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAPI",
			Handler:    _Manager_CreateAPI_Handler,
		},
		{
			MethodName: "CreateAPIs",
			Handler:    _Manager_CreateAPIs_Handler,
		},
		{
			MethodName: "UpdateAPI",
			Handler:    _Manager_UpdateAPI_Handler,
		},
		{
			MethodName: "GetAPI",
			Handler:    _Manager_GetAPI_Handler,
		},
		{
			MethodName: "GetAPIOnly",
			Handler:    _Manager_GetAPIOnly_Handler,
		},
		{
			MethodName: "GetAPIs",
			Handler:    _Manager_GetAPIs_Handler,
		},
		{
			MethodName: "ExistAPI",
			Handler:    _Manager_ExistAPI_Handler,
		},
		{
			MethodName: "ExistAPIConds",
			Handler:    _Manager_ExistAPIConds_Handler,
		},
		{
			MethodName: "CountAPIs",
			Handler:    _Manager_CountAPIs_Handler,
		},
		{
			MethodName: "DeleteAPI",
			Handler:    _Manager_DeleteAPI_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/basal/mgr/v1/api/api.proto",
}
