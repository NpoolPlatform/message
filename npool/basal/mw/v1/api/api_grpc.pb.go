// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/basal/mw/v1/api/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
	CreateAPI(ctx context.Context, in *CreateAPIRequest, opts ...grpc.CallOption) (*CreateAPIResponse, error)
	CreateAPIs(ctx context.Context, in *CreateAPIsRequest, opts ...grpc.CallOption) (*CreateAPIsResponse, error)
	UpdateAPI(ctx context.Context, in *UpdateAPIRequest, opts ...grpc.CallOption) (*UpdateAPIResponse, error)
	GetAPIs(ctx context.Context, in *GetAPIsRequest, opts ...grpc.CallOption) (*GetAPIsResponse, error)
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) CreateAPI(ctx context.Context, in *CreateAPIRequest, opts ...grpc.CallOption) (*CreateAPIResponse, error) {
	out := new(CreateAPIResponse)
	err := c.cc.Invoke(ctx, "/basal.middleware.api.v1.Middleware/CreateAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) CreateAPIs(ctx context.Context, in *CreateAPIsRequest, opts ...grpc.CallOption) (*CreateAPIsResponse, error) {
	out := new(CreateAPIsResponse)
	err := c.cc.Invoke(ctx, "/basal.middleware.api.v1.Middleware/CreateAPIs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) UpdateAPI(ctx context.Context, in *UpdateAPIRequest, opts ...grpc.CallOption) (*UpdateAPIResponse, error) {
	out := new(UpdateAPIResponse)
	err := c.cc.Invoke(ctx, "/basal.middleware.api.v1.Middleware/UpdateAPI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetAPIs(ctx context.Context, in *GetAPIsRequest, opts ...grpc.CallOption) (*GetAPIsResponse, error) {
	out := new(GetAPIsResponse)
	err := c.cc.Invoke(ctx, "/basal.middleware.api.v1.Middleware/GetAPIs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
	CreateAPI(context.Context, *CreateAPIRequest) (*CreateAPIResponse, error)
	CreateAPIs(context.Context, *CreateAPIsRequest) (*CreateAPIsResponse, error)
	UpdateAPI(context.Context, *UpdateAPIRequest) (*UpdateAPIResponse, error)
	GetAPIs(context.Context, *GetAPIsRequest) (*GetAPIsResponse, error)
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) CreateAPI(context.Context, *CreateAPIRequest) (*CreateAPIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAPI not implemented")
}
func (UnimplementedMiddlewareServer) CreateAPIs(context.Context, *CreateAPIsRequest) (*CreateAPIsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAPIs not implemented")
}
func (UnimplementedMiddlewareServer) UpdateAPI(context.Context, *UpdateAPIRequest) (*UpdateAPIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAPI not implemented")
}
func (UnimplementedMiddlewareServer) GetAPIs(context.Context, *GetAPIsRequest) (*GetAPIsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPIs not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_CreateAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/basal.middleware.api.v1.Middleware/CreateAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateAPI(ctx, req.(*CreateAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_CreateAPIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAPIsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateAPIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/basal.middleware.api.v1.Middleware/CreateAPIs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateAPIs(ctx, req.(*CreateAPIsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_UpdateAPI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).UpdateAPI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/basal.middleware.api.v1.Middleware/UpdateAPI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).UpdateAPI(ctx, req.(*UpdateAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetAPIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAPIsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetAPIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/basal.middleware.api.v1.Middleware/GetAPIs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetAPIs(ctx, req.(*GetAPIsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "basal.middleware.api.v1.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAPI",
			Handler:    _Middleware_CreateAPI_Handler,
		},
		{
			MethodName: "CreateAPIs",
			Handler:    _Middleware_CreateAPIs_Handler,
		},
		{
			MethodName: "UpdateAPI",
			Handler:    _Middleware_UpdateAPI_Handler,
		},
		{
			MethodName: "GetAPIs",
			Handler:    _Middleware_GetAPIs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/basal/mw/v1/api/api.proto",
}
