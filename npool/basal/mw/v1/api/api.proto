syntax = "proto3";

package basal.middleware.api.v1;

option go_package = "github.com/NpoolPlatform/message/npool/basal/mw/v1/api";

import "npool/basetypes/v1/conds.proto";

// Service Name
service Middleware {
    rpc CreateAPI     (CreateAPIRequest)     returns (CreateAPIResponse)     {}
    rpc CreateAPIs    (CreateAPIsRequest)    returns (CreateAPIsResponse)    {}
    rpc UpdateAPI     (UpdateAPIRequest)     returns (UpdateAPIResponse)     {}
    rpc GetAPIs       (GetAPIsRequest)       returns (GetAPIsResponse)       {}
    rpc GetDomains    (GetDomainsRequest)    returns (GetDomainsResponse)    {}
    rpc GetAPIOnly    (GetAPIOnlyRequest)    returns (GetAPIOnlyResponse)    {}
    rpc ExistAPI      (ExistAPIRequest)      returns (ExistAPIResponse)      {}
    rpc DeleteAPI     (DeleteAPIRequest)     returns (DeleteAPIResponse)     {}
}

enum Protocol {
    DefaultProtocol = 0;
    GRPC  = 10;
    HTTP  = 20;
}

enum Method {
    DefaultMethod   = 0;
    GET             = 10;
    POST            = 20;
    STREAM          = 30;
}

message APIReq {
    optional string     ID             = 10;
    optional Protocol   Protocol       = 20;
    optional string     ServiceName    = 30;
    optional Method     Method         = 40;
    optional string     MethodName     = 50;
    optional string     Path           = 60;
    optional bool       Exported       = 70;
    optional string     PathPrefix     = 80;
    repeated string     Domains        = 90;
    optional bool       Depracated     = 100;
}

message API {
     // @inject_tag: sql:"id"
    string     ID             = 10;
    // @inject_tag: sql:"protocol"
    string     ProtocolStr    = 20;
    Protocol   Protocol       = 30;
    // @inject_tag: sql:"service_name"
    string     ServiceName    = 40;
    // @inject_tag: sql:"method"
    string     MethodStr      = 50;
    Method     Method         = 60;
    // @inject_tag: sql:"method_name"
    string     MethodName     = 70;
    // @inject_tag: sql:"path"
    string     Path           = 80;
    // @inject_tag: sql:"exported"
    bool       Exported       = 90;
    // @inject_tag: sql:"path_prefix"
    string     PathPrefix     = 100;
    // @inject_tag: sql:"domains"
    string     DomainsStr     = 110;
    repeated   string  Domains   = 120;
    // @inject_tag: sql:"depracated"
    bool       Depracated     = 130;
    // @inject_tag: sql:"created_at"
    uint32     CreatedAt      = 140;
    // @inject_tag: sql:"updated_at"
    uint32     UpdatedAt      = 150;
}

message Conds {
    optional basetypes.v1.StringVal      ID          = 10;
    optional basetypes.v1.Int32Val       Protocol    = 20;
    optional basetypes.v1.StringVal      ServiceName = 30;
    optional basetypes.v1.Int32Val       Method      = 40;
    optional basetypes.v1.StringVal      Path        = 50;
    optional basetypes.v1.BoolVal        Exported    = 60;
    optional basetypes.v1.BoolVal        Depracated  = 70;
    optional basetypes.v1.StringSliceVal IDs         = 80;
}

message CreateAPIRequest {
    APIReq Info = 10;
}

message CreateAPIResponse {
    API Info = 10;
}

message CreateAPIsRequest {
    repeated APIReq Infos = 10;
}

message CreateAPIsResponse {
    repeated API Infos = 10;
}

message UpdateAPIRequest {
    APIReq Info = 10;
}

message UpdateAPIResponse {
    API Info = 10;
}

message GetAPIsRequest {
    Conds Conds  = 10;
    int32 Offset = 20;
    int32 Limit  = 30;
}

message GetAPIsResponse {
    repeated API Infos = 10;
    uint32       Total = 20;
}

message GetDomainsRequest {
}

message GetDomainsResponse {
    repeated string Infos = 10;
}

message GetAPIOnlyRequest {
    Conds Conds  = 10;
}

message GetAPIOnlyResponse {
    API Info = 10;
}

message ExistAPIRequest {
    string ID = 10;
}

message ExistAPIResponse {
    bool Info = 10;
}

message DeleteAPIRequest {
    APIReq Info = 10;
}

message DeleteAPIResponse {
    API Info = 10;
}