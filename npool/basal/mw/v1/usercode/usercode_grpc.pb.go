// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/basal/mw/v1/usercode/usercode.proto

package usercode

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
<<<<<<< HEAD:npool/basal/mw/v1/usercode/usercode_grpc.pb.go
	Middleware_CreateUserCode_FullMethodName = "/basal.middleware.usercode.v1.Middleware/CreateUserCode"
	Middleware_VerifyUserCode_FullMethodName = "/basal.middleware.usercode.v1.Middleware/VerifyUserCode"
=======
	Middleware_ExpropriateAchivement_FullMethodName = "/inspire.middleware.achivement.v1.Middleware/ExpropriateAchivement"
	Middleware_GetAchivements_FullMethodName        = "/inspire.middleware.achivement.v1.Middleware/GetAchivements"
	Middleware_DeleteAchivement_FullMethodName      = "/inspire.middleware.achivement.v1.Middleware/DeleteAchivement"
>>>>>>> Add delete achivement api:npool/inspire/mw/v1/achivement/achivement_grpc.pb.go
)

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
<<<<<<< HEAD:npool/basal/mw/v1/usercode/usercode_grpc.pb.go
	CreateUserCode(ctx context.Context, in *CreateUserCodeRequest, opts ...grpc.CallOption) (*CreateUserCodeResponse, error)
	VerifyUserCode(ctx context.Context, in *VerifyUserCodeRequest, opts ...grpc.CallOption) (*VerifyUserCodeResponse, error)
=======
	ExpropriateAchivement(ctx context.Context, in *ExpropriateAchivementRequest, opts ...grpc.CallOption) (*ExpropriateAchivementResponse, error)
	GetAchivements(ctx context.Context, in *GetAchivementsRequest, opts ...grpc.CallOption) (*GetAchivementsResponse, error)
	DeleteAchivement(ctx context.Context, in *DeleteAchivementRequest, opts ...grpc.CallOption) (*DeleteAchivementResponse, error)
>>>>>>> Add delete achivement api:npool/inspire/mw/v1/achivement/achivement_grpc.pb.go
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) CreateUserCode(ctx context.Context, in *CreateUserCodeRequest, opts ...grpc.CallOption) (*CreateUserCodeResponse, error) {
	out := new(CreateUserCodeResponse)
	err := c.cc.Invoke(ctx, Middleware_CreateUserCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) VerifyUserCode(ctx context.Context, in *VerifyUserCodeRequest, opts ...grpc.CallOption) (*VerifyUserCodeResponse, error) {
	out := new(VerifyUserCodeResponse)
	err := c.cc.Invoke(ctx, Middleware_VerifyUserCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) DeleteAchivement(ctx context.Context, in *DeleteAchivementRequest, opts ...grpc.CallOption) (*DeleteAchivementResponse, error) {
	out := new(DeleteAchivementResponse)
	err := c.cc.Invoke(ctx, Middleware_DeleteAchivement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
<<<<<<< HEAD:npool/basal/mw/v1/usercode/usercode_grpc.pb.go
	CreateUserCode(context.Context, *CreateUserCodeRequest) (*CreateUserCodeResponse, error)
	VerifyUserCode(context.Context, *VerifyUserCodeRequest) (*VerifyUserCodeResponse, error)
=======
	ExpropriateAchivement(context.Context, *ExpropriateAchivementRequest) (*ExpropriateAchivementResponse, error)
	GetAchivements(context.Context, *GetAchivementsRequest) (*GetAchivementsResponse, error)
	DeleteAchivement(context.Context, *DeleteAchivementRequest) (*DeleteAchivementResponse, error)
>>>>>>> Add delete achivement api:npool/inspire/mw/v1/achivement/achivement_grpc.pb.go
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) CreateUserCode(context.Context, *CreateUserCodeRequest) (*CreateUserCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserCode not implemented")
}
func (UnimplementedMiddlewareServer) VerifyUserCode(context.Context, *VerifyUserCodeRequest) (*VerifyUserCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyUserCode not implemented")
}
func (UnimplementedMiddlewareServer) DeleteAchivement(context.Context, *DeleteAchivementRequest) (*DeleteAchivementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAchivement not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_CreateUserCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateUserCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_CreateUserCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateUserCode(ctx, req.(*CreateUserCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_VerifyUserCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyUserCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).VerifyUserCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_VerifyUserCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).VerifyUserCode(ctx, req.(*VerifyUserCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_DeleteAchivement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAchivementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).DeleteAchivement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_DeleteAchivement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).DeleteAchivement(ctx, req.(*DeleteAchivementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "basal.middleware.usercode.v1.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserCode",
			Handler:    _Middleware_CreateUserCode_Handler,
		},
		{
			MethodName: "VerifyUserCode",
			Handler:    _Middleware_VerifyUserCode_Handler,
		},
		{
			MethodName: "DeleteAchivement",
			Handler:    _Middleware_DeleteAchivement_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/basal/mw/v1/usercode/usercode.proto",
}
