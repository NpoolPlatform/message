// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: npool/projectinfomgr/projectinfomgr.proto

package project_info_manager

import (
	npool "github.com/NpoolPlatform/message/npool"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CoinDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID      string `protobuf:"bytes,20,opt,name=AppID,proto3" json:"AppID,omitempty"`
	CoinTypeID string `protobuf:"bytes,30,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty"`
	Title      string `protobuf:"bytes,40,opt,name=Title,proto3" json:"Title,omitempty"`
	Message    string `protobuf:"bytes,50,opt,name=Message,proto3" json:"Message,omitempty"`
	UsedFor    string `protobuf:"bytes,60,opt,name=UsedFor,proto3" json:"UsedFor,omitempty"`
	CreateAt   uint32 `protobuf:"varint,70,opt,name=CreateAt,proto3" json:"CreateAt,omitempty"`
	UpdateAt   uint32 `protobuf:"varint,80,opt,name=UpdateAt,proto3" json:"UpdateAt,omitempty"`
}

func (x *CoinDescription) Reset() {
	*x = CoinDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinDescription) ProtoMessage() {}

func (x *CoinDescription) ProtoReflect() protoreflect.Message {
	mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinDescription.ProtoReflect.Descriptor instead.
func (*CoinDescription) Descriptor() ([]byte, []int) {
	return file_npool_projectinfomgr_projectinfomgr_proto_rawDescGZIP(), []int{0}
}

func (x *CoinDescription) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *CoinDescription) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *CoinDescription) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

func (x *CoinDescription) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CoinDescription) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CoinDescription) GetUsedFor() string {
	if x != nil {
		return x.UsedFor
	}
	return ""
}

func (x *CoinDescription) GetCreateAt() uint32 {
	if x != nil {
		return x.CreateAt
	}
	return 0
}

func (x *CoinDescription) GetUpdateAt() uint32 {
	if x != nil {
		return x.UpdateAt
	}
	return 0
}

// create
type CreateCoinDescriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CoinDescription `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateCoinDescriptionRequest) Reset() {
	*x = CreateCoinDescriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCoinDescriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCoinDescriptionRequest) ProtoMessage() {}

func (x *CreateCoinDescriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCoinDescriptionRequest.ProtoReflect.Descriptor instead.
func (*CreateCoinDescriptionRequest) Descriptor() ([]byte, []int) {
	return file_npool_projectinfomgr_projectinfomgr_proto_rawDescGZIP(), []int{1}
}

func (x *CreateCoinDescriptionRequest) GetInfo() *CoinDescription {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateCoinDescriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CoinDescription `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateCoinDescriptionResponse) Reset() {
	*x = CreateCoinDescriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCoinDescriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCoinDescriptionResponse) ProtoMessage() {}

func (x *CreateCoinDescriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCoinDescriptionResponse.ProtoReflect.Descriptor instead.
func (*CreateCoinDescriptionResponse) Descriptor() ([]byte, []int) {
	return file_npool_projectinfomgr_projectinfomgr_proto_rawDescGZIP(), []int{2}
}

func (x *CreateCoinDescriptionResponse) GetInfo() *CoinDescription {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateCoinDescriptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID string             `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	Infos []*CoinDescription `protobuf:"bytes,20,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateCoinDescriptionsRequest) Reset() {
	*x = CreateCoinDescriptionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCoinDescriptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCoinDescriptionsRequest) ProtoMessage() {}

func (x *CreateCoinDescriptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCoinDescriptionsRequest.ProtoReflect.Descriptor instead.
func (*CreateCoinDescriptionsRequest) Descriptor() ([]byte, []int) {
	return file_npool_projectinfomgr_projectinfomgr_proto_rawDescGZIP(), []int{3}
}

func (x *CreateCoinDescriptionsRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *CreateCoinDescriptionsRequest) GetInfos() []*CoinDescription {
	if x != nil {
		return x.Infos
	}
	return nil
}

type CreateCoinDescriptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*CoinDescription `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateCoinDescriptionsResponse) Reset() {
	*x = CreateCoinDescriptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCoinDescriptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCoinDescriptionsResponse) ProtoMessage() {}

func (x *CreateCoinDescriptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCoinDescriptionsResponse.ProtoReflect.Descriptor instead.
func (*CreateCoinDescriptionsResponse) Descriptor() ([]byte, []int) {
	return file_npool_projectinfomgr_projectinfomgr_proto_rawDescGZIP(), []int{4}
}

func (x *CreateCoinDescriptionsResponse) GetInfos() []*CoinDescription {
	if x != nil {
		return x.Infos
	}
	return nil
}

type CreateAppCoinDescriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetAppID string           `protobuf:"bytes,10,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
	Info        *CoinDescription `protobuf:"bytes,20,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateAppCoinDescriptionRequest) Reset() {
	*x = CreateAppCoinDescriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAppCoinDescriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAppCoinDescriptionRequest) ProtoMessage() {}

func (x *CreateAppCoinDescriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAppCoinDescriptionRequest.ProtoReflect.Descriptor instead.
func (*CreateAppCoinDescriptionRequest) Descriptor() ([]byte, []int) {
	return file_npool_projectinfomgr_projectinfomgr_proto_rawDescGZIP(), []int{5}
}

func (x *CreateAppCoinDescriptionRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

func (x *CreateAppCoinDescriptionRequest) GetInfo() *CoinDescription {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateAppCoinDescriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CoinDescription `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateAppCoinDescriptionResponse) Reset() {
	*x = CreateAppCoinDescriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAppCoinDescriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAppCoinDescriptionResponse) ProtoMessage() {}

func (x *CreateAppCoinDescriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAppCoinDescriptionResponse.ProtoReflect.Descriptor instead.
func (*CreateAppCoinDescriptionResponse) Descriptor() ([]byte, []int) {
	return file_npool_projectinfomgr_projectinfomgr_proto_rawDescGZIP(), []int{6}
}

func (x *CreateAppCoinDescriptionResponse) GetInfo() *CoinDescription {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateAppCoinDescriptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetAppID string             `protobuf:"bytes,10,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
	Infos       []*CoinDescription `protobuf:"bytes,20,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateAppCoinDescriptionsRequest) Reset() {
	*x = CreateAppCoinDescriptionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAppCoinDescriptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAppCoinDescriptionsRequest) ProtoMessage() {}

func (x *CreateAppCoinDescriptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAppCoinDescriptionsRequest.ProtoReflect.Descriptor instead.
func (*CreateAppCoinDescriptionsRequest) Descriptor() ([]byte, []int) {
	return file_npool_projectinfomgr_projectinfomgr_proto_rawDescGZIP(), []int{7}
}

func (x *CreateAppCoinDescriptionsRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

func (x *CreateAppCoinDescriptionsRequest) GetInfos() []*CoinDescription {
	if x != nil {
		return x.Infos
	}
	return nil
}

type CreateAppCoinDescriptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*CoinDescription `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateAppCoinDescriptionsResponse) Reset() {
	*x = CreateAppCoinDescriptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAppCoinDescriptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAppCoinDescriptionsResponse) ProtoMessage() {}

func (x *CreateAppCoinDescriptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAppCoinDescriptionsResponse.ProtoReflect.Descriptor instead.
func (*CreateAppCoinDescriptionsResponse) Descriptor() ([]byte, []int) {
	return file_npool_projectinfomgr_projectinfomgr_proto_rawDescGZIP(), []int{8}
}

func (x *CreateAppCoinDescriptionsResponse) GetInfos() []*CoinDescription {
	if x != nil {
		return x.Infos
	}
	return nil
}

// update
type UpdateCoinDescriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CoinDescription `protobuf:"bytes,20,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateCoinDescriptionRequest) Reset() {
	*x = UpdateCoinDescriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCoinDescriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCoinDescriptionRequest) ProtoMessage() {}

func (x *UpdateCoinDescriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCoinDescriptionRequest.ProtoReflect.Descriptor instead.
func (*UpdateCoinDescriptionRequest) Descriptor() ([]byte, []int) {
	return file_npool_projectinfomgr_projectinfomgr_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateCoinDescriptionRequest) GetInfo() *CoinDescription {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateCoinDescriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CoinDescription `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateCoinDescriptionResponse) Reset() {
	*x = UpdateCoinDescriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCoinDescriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCoinDescriptionResponse) ProtoMessage() {}

func (x *UpdateCoinDescriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCoinDescriptionResponse.ProtoReflect.Descriptor instead.
func (*UpdateCoinDescriptionResponse) Descriptor() ([]byte, []int) {
	return file_npool_projectinfomgr_projectinfomgr_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateCoinDescriptionResponse) GetInfo() *CoinDescription {
	if x != nil {
		return x.Info
	}
	return nil
}

// get
type GetCoinDescriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,20,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetCoinDescriptionRequest) Reset() {
	*x = GetCoinDescriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinDescriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinDescriptionRequest) ProtoMessage() {}

func (x *GetCoinDescriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinDescriptionRequest.ProtoReflect.Descriptor instead.
func (*GetCoinDescriptionRequest) Descriptor() ([]byte, []int) {
	return file_npool_projectinfomgr_projectinfomgr_proto_rawDescGZIP(), []int{11}
}

func (x *GetCoinDescriptionRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetCoinDescriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CoinDescription `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetCoinDescriptionResponse) Reset() {
	*x = GetCoinDescriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinDescriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinDescriptionResponse) ProtoMessage() {}

func (x *GetCoinDescriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinDescriptionResponse.ProtoReflect.Descriptor instead.
func (*GetCoinDescriptionResponse) Descriptor() ([]byte, []int) {
	return file_npool_projectinfomgr_projectinfomgr_proto_rawDescGZIP(), []int{12}
}

func (x *GetCoinDescriptionResponse) GetInfo() *CoinDescription {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetCoinDescriptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID  string                       `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	Conds  map[string]*npool.FilterCond `protobuf:"bytes,20,rep,name=Conds,proto3" json:"Conds,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Offset int32                        `protobuf:"varint,30,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32                        `protobuf:"varint,40,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetCoinDescriptionsRequest) Reset() {
	*x = GetCoinDescriptionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinDescriptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinDescriptionsRequest) ProtoMessage() {}

func (x *GetCoinDescriptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinDescriptionsRequest.ProtoReflect.Descriptor instead.
func (*GetCoinDescriptionsRequest) Descriptor() ([]byte, []int) {
	return file_npool_projectinfomgr_projectinfomgr_proto_rawDescGZIP(), []int{13}
}

func (x *GetCoinDescriptionsRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetCoinDescriptionsRequest) GetConds() map[string]*npool.FilterCond {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetCoinDescriptionsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetCoinDescriptionsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetCoinDescriptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*CoinDescription `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total int32              `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetCoinDescriptionsResponse) Reset() {
	*x = GetCoinDescriptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinDescriptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinDescriptionsResponse) ProtoMessage() {}

func (x *GetCoinDescriptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinDescriptionsResponse.ProtoReflect.Descriptor instead.
func (*GetCoinDescriptionsResponse) Descriptor() ([]byte, []int) {
	return file_npool_projectinfomgr_projectinfomgr_proto_rawDescGZIP(), []int{14}
}

func (x *GetCoinDescriptionsResponse) GetInfos() []*CoinDescription {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetCoinDescriptionsResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetCoinDescriptionOnlyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID  string                       `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	Conds  map[string]*npool.FilterCond `protobuf:"bytes,20,rep,name=Conds,proto3" json:"Conds,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Offset int32                        `protobuf:"varint,30,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32                        `protobuf:"varint,40,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetCoinDescriptionOnlyRequest) Reset() {
	*x = GetCoinDescriptionOnlyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinDescriptionOnlyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinDescriptionOnlyRequest) ProtoMessage() {}

func (x *GetCoinDescriptionOnlyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinDescriptionOnlyRequest.ProtoReflect.Descriptor instead.
func (*GetCoinDescriptionOnlyRequest) Descriptor() ([]byte, []int) {
	return file_npool_projectinfomgr_projectinfomgr_proto_rawDescGZIP(), []int{15}
}

func (x *GetCoinDescriptionOnlyRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetCoinDescriptionOnlyRequest) GetConds() map[string]*npool.FilterCond {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetCoinDescriptionOnlyRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetCoinDescriptionOnlyRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetCoinDescriptionOnlyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CoinDescription `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetCoinDescriptionOnlyResponse) Reset() {
	*x = GetCoinDescriptionOnlyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinDescriptionOnlyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinDescriptionOnlyResponse) ProtoMessage() {}

func (x *GetCoinDescriptionOnlyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinDescriptionOnlyResponse.ProtoReflect.Descriptor instead.
func (*GetCoinDescriptionOnlyResponse) Descriptor() ([]byte, []int) {
	return file_npool_projectinfomgr_projectinfomgr_proto_rawDescGZIP(), []int{16}
}

func (x *GetCoinDescriptionOnlyResponse) GetInfo() *CoinDescription {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetAppCoinDescriptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetAppID string                       `protobuf:"bytes,10,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
	Conds       map[string]*npool.FilterCond `protobuf:"bytes,20,rep,name=Conds,proto3" json:"Conds,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Offset      int32                        `protobuf:"varint,30,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit       int32                        `protobuf:"varint,40,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetAppCoinDescriptionsRequest) Reset() {
	*x = GetAppCoinDescriptionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppCoinDescriptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppCoinDescriptionsRequest) ProtoMessage() {}

func (x *GetAppCoinDescriptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppCoinDescriptionsRequest.ProtoReflect.Descriptor instead.
func (*GetAppCoinDescriptionsRequest) Descriptor() ([]byte, []int) {
	return file_npool_projectinfomgr_projectinfomgr_proto_rawDescGZIP(), []int{17}
}

func (x *GetAppCoinDescriptionsRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

func (x *GetAppCoinDescriptionsRequest) GetConds() map[string]*npool.FilterCond {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetAppCoinDescriptionsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetAppCoinDescriptionsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetAppCoinDescriptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*CoinDescription `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total int32              `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetAppCoinDescriptionsResponse) Reset() {
	*x = GetAppCoinDescriptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppCoinDescriptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppCoinDescriptionsResponse) ProtoMessage() {}

func (x *GetAppCoinDescriptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppCoinDescriptionsResponse.ProtoReflect.Descriptor instead.
func (*GetAppCoinDescriptionsResponse) Descriptor() ([]byte, []int) {
	return file_npool_projectinfomgr_projectinfomgr_proto_rawDescGZIP(), []int{18}
}

func (x *GetAppCoinDescriptionsResponse) GetInfos() []*CoinDescription {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetAppCoinDescriptionsResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetAppCoinDescriptionOnlyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetAppID string                       `protobuf:"bytes,10,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
	Conds       map[string]*npool.FilterCond `protobuf:"bytes,20,rep,name=Conds,proto3" json:"Conds,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Offset      int32                        `protobuf:"varint,30,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit       int32                        `protobuf:"varint,40,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetAppCoinDescriptionOnlyRequest) Reset() {
	*x = GetAppCoinDescriptionOnlyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppCoinDescriptionOnlyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppCoinDescriptionOnlyRequest) ProtoMessage() {}

func (x *GetAppCoinDescriptionOnlyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppCoinDescriptionOnlyRequest.ProtoReflect.Descriptor instead.
func (*GetAppCoinDescriptionOnlyRequest) Descriptor() ([]byte, []int) {
	return file_npool_projectinfomgr_projectinfomgr_proto_rawDescGZIP(), []int{19}
}

func (x *GetAppCoinDescriptionOnlyRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

func (x *GetAppCoinDescriptionOnlyRequest) GetConds() map[string]*npool.FilterCond {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetAppCoinDescriptionOnlyRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetAppCoinDescriptionOnlyRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetAppCoinDescriptionOnlyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CoinDescription `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetAppCoinDescriptionOnlyResponse) Reset() {
	*x = GetAppCoinDescriptionOnlyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppCoinDescriptionOnlyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppCoinDescriptionOnlyResponse) ProtoMessage() {}

func (x *GetAppCoinDescriptionOnlyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppCoinDescriptionOnlyResponse.ProtoReflect.Descriptor instead.
func (*GetAppCoinDescriptionOnlyResponse) Descriptor() ([]byte, []int) {
	return file_npool_projectinfomgr_projectinfomgr_proto_rawDescGZIP(), []int{20}
}

func (x *GetAppCoinDescriptionOnlyResponse) GetInfo() *CoinDescription {
	if x != nil {
		return x.Info
	}
	return nil
}

// delete
type DeleteCoinDescriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *DeleteCoinDescriptionRequest) Reset() {
	*x = DeleteCoinDescriptionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCoinDescriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCoinDescriptionRequest) ProtoMessage() {}

func (x *DeleteCoinDescriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCoinDescriptionRequest.ProtoReflect.Descriptor instead.
func (*DeleteCoinDescriptionRequest) Descriptor() ([]byte, []int) {
	return file_npool_projectinfomgr_projectinfomgr_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteCoinDescriptionRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type DeleteCoinDescriptionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CoinDescription `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteCoinDescriptionResponse) Reset() {
	*x = DeleteCoinDescriptionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCoinDescriptionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCoinDescriptionResponse) ProtoMessage() {}

func (x *DeleteCoinDescriptionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCoinDescriptionResponse.ProtoReflect.Descriptor instead.
func (*DeleteCoinDescriptionResponse) Descriptor() ([]byte, []int) {
	return file_npool_projectinfomgr_projectinfomgr_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteCoinDescriptionResponse) GetInfo() *CoinDescription {
	if x != nil {
		return x.Info
	}
	return nil
}

type CoinProduct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID       string `protobuf:"bytes,20,opt,name=AppID,proto3" json:"AppID,omitempty"`
	CoinTypeID  string `protobuf:"bytes,30,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty"`
	ProductPage string `protobuf:"bytes,40,opt,name=ProductPage,proto3" json:"ProductPage,omitempty"`
}

func (x *CoinProduct) Reset() {
	*x = CoinProduct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinProduct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinProduct) ProtoMessage() {}

func (x *CoinProduct) ProtoReflect() protoreflect.Message {
	mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinProduct.ProtoReflect.Descriptor instead.
func (*CoinProduct) Descriptor() ([]byte, []int) {
	return file_npool_projectinfomgr_projectinfomgr_proto_rawDescGZIP(), []int{23}
}

func (x *CoinProduct) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *CoinProduct) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *CoinProduct) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

func (x *CoinProduct) GetProductPage() string {
	if x != nil {
		return x.ProductPage
	}
	return ""
}

// create
type CreateCoinProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CoinProduct `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateCoinProductRequest) Reset() {
	*x = CreateCoinProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCoinProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCoinProductRequest) ProtoMessage() {}

func (x *CreateCoinProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCoinProductRequest.ProtoReflect.Descriptor instead.
func (*CreateCoinProductRequest) Descriptor() ([]byte, []int) {
	return file_npool_projectinfomgr_projectinfomgr_proto_rawDescGZIP(), []int{24}
}

func (x *CreateCoinProductRequest) GetInfo() *CoinProduct {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateCoinProductResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CoinProduct `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateCoinProductResponse) Reset() {
	*x = CreateCoinProductResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCoinProductResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCoinProductResponse) ProtoMessage() {}

func (x *CreateCoinProductResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCoinProductResponse.ProtoReflect.Descriptor instead.
func (*CreateCoinProductResponse) Descriptor() ([]byte, []int) {
	return file_npool_projectinfomgr_projectinfomgr_proto_rawDescGZIP(), []int{25}
}

func (x *CreateCoinProductResponse) GetInfo() *CoinProduct {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateCoinProductsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID string         `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	Infos []*CoinProduct `protobuf:"bytes,20,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateCoinProductsRequest) Reset() {
	*x = CreateCoinProductsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCoinProductsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCoinProductsRequest) ProtoMessage() {}

func (x *CreateCoinProductsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCoinProductsRequest.ProtoReflect.Descriptor instead.
func (*CreateCoinProductsRequest) Descriptor() ([]byte, []int) {
	return file_npool_projectinfomgr_projectinfomgr_proto_rawDescGZIP(), []int{26}
}

func (x *CreateCoinProductsRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *CreateCoinProductsRequest) GetInfos() []*CoinProduct {
	if x != nil {
		return x.Infos
	}
	return nil
}

type CreateCoinProductsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*CoinProduct `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateCoinProductsResponse) Reset() {
	*x = CreateCoinProductsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCoinProductsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCoinProductsResponse) ProtoMessage() {}

func (x *CreateCoinProductsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCoinProductsResponse.ProtoReflect.Descriptor instead.
func (*CreateCoinProductsResponse) Descriptor() ([]byte, []int) {
	return file_npool_projectinfomgr_projectinfomgr_proto_rawDescGZIP(), []int{27}
}

func (x *CreateCoinProductsResponse) GetInfos() []*CoinProduct {
	if x != nil {
		return x.Infos
	}
	return nil
}

type CreateAppCoinProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetAppID string       `protobuf:"bytes,10,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
	Info        *CoinProduct `protobuf:"bytes,20,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateAppCoinProductRequest) Reset() {
	*x = CreateAppCoinProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAppCoinProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAppCoinProductRequest) ProtoMessage() {}

func (x *CreateAppCoinProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAppCoinProductRequest.ProtoReflect.Descriptor instead.
func (*CreateAppCoinProductRequest) Descriptor() ([]byte, []int) {
	return file_npool_projectinfomgr_projectinfomgr_proto_rawDescGZIP(), []int{28}
}

func (x *CreateAppCoinProductRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

func (x *CreateAppCoinProductRequest) GetInfo() *CoinProduct {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateAppCoinProductResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CoinProduct `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateAppCoinProductResponse) Reset() {
	*x = CreateAppCoinProductResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAppCoinProductResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAppCoinProductResponse) ProtoMessage() {}

func (x *CreateAppCoinProductResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAppCoinProductResponse.ProtoReflect.Descriptor instead.
func (*CreateAppCoinProductResponse) Descriptor() ([]byte, []int) {
	return file_npool_projectinfomgr_projectinfomgr_proto_rawDescGZIP(), []int{29}
}

func (x *CreateAppCoinProductResponse) GetInfo() *CoinProduct {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateAppCoinProductsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetAppID string         `protobuf:"bytes,10,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
	Infos       []*CoinProduct `protobuf:"bytes,20,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateAppCoinProductsRequest) Reset() {
	*x = CreateAppCoinProductsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAppCoinProductsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAppCoinProductsRequest) ProtoMessage() {}

func (x *CreateAppCoinProductsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAppCoinProductsRequest.ProtoReflect.Descriptor instead.
func (*CreateAppCoinProductsRequest) Descriptor() ([]byte, []int) {
	return file_npool_projectinfomgr_projectinfomgr_proto_rawDescGZIP(), []int{30}
}

func (x *CreateAppCoinProductsRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

func (x *CreateAppCoinProductsRequest) GetInfos() []*CoinProduct {
	if x != nil {
		return x.Infos
	}
	return nil
}

type CreateAppCoinProductsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*CoinProduct `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateAppCoinProductsResponse) Reset() {
	*x = CreateAppCoinProductsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAppCoinProductsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAppCoinProductsResponse) ProtoMessage() {}

func (x *CreateAppCoinProductsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAppCoinProductsResponse.ProtoReflect.Descriptor instead.
func (*CreateAppCoinProductsResponse) Descriptor() ([]byte, []int) {
	return file_npool_projectinfomgr_projectinfomgr_proto_rawDescGZIP(), []int{31}
}

func (x *CreateAppCoinProductsResponse) GetInfos() []*CoinProduct {
	if x != nil {
		return x.Infos
	}
	return nil
}

// update
type UpdateCoinProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CoinProduct `protobuf:"bytes,20,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateCoinProductRequest) Reset() {
	*x = UpdateCoinProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCoinProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCoinProductRequest) ProtoMessage() {}

func (x *UpdateCoinProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCoinProductRequest.ProtoReflect.Descriptor instead.
func (*UpdateCoinProductRequest) Descriptor() ([]byte, []int) {
	return file_npool_projectinfomgr_projectinfomgr_proto_rawDescGZIP(), []int{32}
}

func (x *UpdateCoinProductRequest) GetInfo() *CoinProduct {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateCoinProductResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CoinProduct `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateCoinProductResponse) Reset() {
	*x = UpdateCoinProductResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCoinProductResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCoinProductResponse) ProtoMessage() {}

func (x *UpdateCoinProductResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCoinProductResponse.ProtoReflect.Descriptor instead.
func (*UpdateCoinProductResponse) Descriptor() ([]byte, []int) {
	return file_npool_projectinfomgr_projectinfomgr_proto_rawDescGZIP(), []int{33}
}

func (x *UpdateCoinProductResponse) GetInfo() *CoinProduct {
	if x != nil {
		return x.Info
	}
	return nil
}

// get
type GetCoinProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,20,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetCoinProductRequest) Reset() {
	*x = GetCoinProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinProductRequest) ProtoMessage() {}

func (x *GetCoinProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinProductRequest.ProtoReflect.Descriptor instead.
func (*GetCoinProductRequest) Descriptor() ([]byte, []int) {
	return file_npool_projectinfomgr_projectinfomgr_proto_rawDescGZIP(), []int{34}
}

func (x *GetCoinProductRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetCoinProductResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CoinProduct `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetCoinProductResponse) Reset() {
	*x = GetCoinProductResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinProductResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinProductResponse) ProtoMessage() {}

func (x *GetCoinProductResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinProductResponse.ProtoReflect.Descriptor instead.
func (*GetCoinProductResponse) Descriptor() ([]byte, []int) {
	return file_npool_projectinfomgr_projectinfomgr_proto_rawDescGZIP(), []int{35}
}

func (x *GetCoinProductResponse) GetInfo() *CoinProduct {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetCoinProductsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID  string                       `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	Conds  map[string]*npool.FilterCond `protobuf:"bytes,20,rep,name=Conds,proto3" json:"Conds,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Offset int32                        `protobuf:"varint,30,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32                        `protobuf:"varint,40,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetCoinProductsRequest) Reset() {
	*x = GetCoinProductsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinProductsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinProductsRequest) ProtoMessage() {}

func (x *GetCoinProductsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinProductsRequest.ProtoReflect.Descriptor instead.
func (*GetCoinProductsRequest) Descriptor() ([]byte, []int) {
	return file_npool_projectinfomgr_projectinfomgr_proto_rawDescGZIP(), []int{36}
}

func (x *GetCoinProductsRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetCoinProductsRequest) GetConds() map[string]*npool.FilterCond {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetCoinProductsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetCoinProductsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetCoinProductsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*CoinProduct `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total int32          `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetCoinProductsResponse) Reset() {
	*x = GetCoinProductsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinProductsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinProductsResponse) ProtoMessage() {}

func (x *GetCoinProductsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinProductsResponse.ProtoReflect.Descriptor instead.
func (*GetCoinProductsResponse) Descriptor() ([]byte, []int) {
	return file_npool_projectinfomgr_projectinfomgr_proto_rawDescGZIP(), []int{37}
}

func (x *GetCoinProductsResponse) GetInfos() []*CoinProduct {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetCoinProductsResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetCoinProductOnlyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID  string                       `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	Conds  map[string]*npool.FilterCond `protobuf:"bytes,20,rep,name=Conds,proto3" json:"Conds,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Offset int32                        `protobuf:"varint,30,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32                        `protobuf:"varint,40,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetCoinProductOnlyRequest) Reset() {
	*x = GetCoinProductOnlyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinProductOnlyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinProductOnlyRequest) ProtoMessage() {}

func (x *GetCoinProductOnlyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinProductOnlyRequest.ProtoReflect.Descriptor instead.
func (*GetCoinProductOnlyRequest) Descriptor() ([]byte, []int) {
	return file_npool_projectinfomgr_projectinfomgr_proto_rawDescGZIP(), []int{38}
}

func (x *GetCoinProductOnlyRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetCoinProductOnlyRequest) GetConds() map[string]*npool.FilterCond {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetCoinProductOnlyRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetCoinProductOnlyRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetCoinProductOnlyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CoinProduct `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetCoinProductOnlyResponse) Reset() {
	*x = GetCoinProductOnlyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinProductOnlyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinProductOnlyResponse) ProtoMessage() {}

func (x *GetCoinProductOnlyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinProductOnlyResponse.ProtoReflect.Descriptor instead.
func (*GetCoinProductOnlyResponse) Descriptor() ([]byte, []int) {
	return file_npool_projectinfomgr_projectinfomgr_proto_rawDescGZIP(), []int{39}
}

func (x *GetCoinProductOnlyResponse) GetInfo() *CoinProduct {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetAppCoinProductsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetAppID string                       `protobuf:"bytes,10,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
	Conds       map[string]*npool.FilterCond `protobuf:"bytes,20,rep,name=Conds,proto3" json:"Conds,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Offset      int32                        `protobuf:"varint,30,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit       int32                        `protobuf:"varint,40,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetAppCoinProductsRequest) Reset() {
	*x = GetAppCoinProductsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppCoinProductsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppCoinProductsRequest) ProtoMessage() {}

func (x *GetAppCoinProductsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppCoinProductsRequest.ProtoReflect.Descriptor instead.
func (*GetAppCoinProductsRequest) Descriptor() ([]byte, []int) {
	return file_npool_projectinfomgr_projectinfomgr_proto_rawDescGZIP(), []int{40}
}

func (x *GetAppCoinProductsRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

func (x *GetAppCoinProductsRequest) GetConds() map[string]*npool.FilterCond {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetAppCoinProductsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetAppCoinProductsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetAppCoinProductsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*CoinProduct `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total int32          `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetAppCoinProductsResponse) Reset() {
	*x = GetAppCoinProductsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppCoinProductsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppCoinProductsResponse) ProtoMessage() {}

func (x *GetAppCoinProductsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppCoinProductsResponse.ProtoReflect.Descriptor instead.
func (*GetAppCoinProductsResponse) Descriptor() ([]byte, []int) {
	return file_npool_projectinfomgr_projectinfomgr_proto_rawDescGZIP(), []int{41}
}

func (x *GetAppCoinProductsResponse) GetInfos() []*CoinProduct {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetAppCoinProductsResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetAppCoinProductOnlyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetAppID string                       `protobuf:"bytes,10,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
	Conds       map[string]*npool.FilterCond `protobuf:"bytes,20,rep,name=Conds,proto3" json:"Conds,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Offset      int32                        `protobuf:"varint,30,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit       int32                        `protobuf:"varint,40,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetAppCoinProductOnlyRequest) Reset() {
	*x = GetAppCoinProductOnlyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppCoinProductOnlyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppCoinProductOnlyRequest) ProtoMessage() {}

func (x *GetAppCoinProductOnlyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppCoinProductOnlyRequest.ProtoReflect.Descriptor instead.
func (*GetAppCoinProductOnlyRequest) Descriptor() ([]byte, []int) {
	return file_npool_projectinfomgr_projectinfomgr_proto_rawDescGZIP(), []int{42}
}

func (x *GetAppCoinProductOnlyRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

func (x *GetAppCoinProductOnlyRequest) GetConds() map[string]*npool.FilterCond {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetAppCoinProductOnlyRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetAppCoinProductOnlyRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetAppCoinProductOnlyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CoinProduct `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetAppCoinProductOnlyResponse) Reset() {
	*x = GetAppCoinProductOnlyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppCoinProductOnlyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppCoinProductOnlyResponse) ProtoMessage() {}

func (x *GetAppCoinProductOnlyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppCoinProductOnlyResponse.ProtoReflect.Descriptor instead.
func (*GetAppCoinProductOnlyResponse) Descriptor() ([]byte, []int) {
	return file_npool_projectinfomgr_projectinfomgr_proto_rawDescGZIP(), []int{43}
}

func (x *GetAppCoinProductOnlyResponse) GetInfo() *CoinProduct {
	if x != nil {
		return x.Info
	}
	return nil
}

// delete
type DeleteCoinProductRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *DeleteCoinProductRequest) Reset() {
	*x = DeleteCoinProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCoinProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCoinProductRequest) ProtoMessage() {}

func (x *DeleteCoinProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCoinProductRequest.ProtoReflect.Descriptor instead.
func (*DeleteCoinProductRequest) Descriptor() ([]byte, []int) {
	return file_npool_projectinfomgr_projectinfomgr_proto_rawDescGZIP(), []int{44}
}

func (x *DeleteCoinProductRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type DeleteCoinProductResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CoinProduct `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteCoinProductResponse) Reset() {
	*x = DeleteCoinProductResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCoinProductResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCoinProductResponse) ProtoMessage() {}

func (x *DeleteCoinProductResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCoinProductResponse.ProtoReflect.Descriptor instead.
func (*DeleteCoinProductResponse) Descriptor() ([]byte, []int) {
	return file_npool_projectinfomgr_projectinfomgr_proto_rawDescGZIP(), []int{45}
}

func (x *DeleteCoinProductResponse) GetInfo() *CoinProduct {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_projectinfomgr_projectinfomgr_proto protoreflect.FileDescriptor

var file_npool_projectinfomgr_projectinfomgr_proto_rawDesc = []byte{
	0x0a, 0x29, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x6e, 0x66, 0x6f, 0x6d, 0x67, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6e,
	0x66, 0x6f, 0x6d, 0x67, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x11, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xd9, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x55, 0x73, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x55,
	0x73, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x74, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x18, 0x50,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x74, 0x22, 0x5c,
	0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5d, 0x0a, 0x1d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x75, 0x0a, 0x1d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x12, 0x3e, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x22, 0x60, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x70, 0x70, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x3c, 0x0a, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x60, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x84, 0x01, 0x0a, 0x20, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x12, 0x3e, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x22, 0x63, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x43, 0x6f,
	0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x5c, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5d, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x2b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x22, 0x5a, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x86, 0x02, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x12, 0x54, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3e, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x4e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x73, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x8c, 0x02, 0x0a, 0x1d, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x12, 0x57, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x41, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e,
	0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x4e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5e, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x98, 0x02, 0x0a, 0x1d, 0x47, 0x65,
	0x74, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x57, 0x0a,
	0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x69,
	0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x1a, 0x4e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x76, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x43, 0x6f,
	0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x9e, 0x02, 0x0a,
	0x20, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x12, 0x5a, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x14, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x44, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x4e, 0x0a,
	0x0a, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x61, 0x0a,
	0x21, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x2e, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x22, 0x5d, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3c, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x75, 0x0a, 0x0b, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50,
	0x61, 0x67, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x50, 0x61, 0x67, 0x65, 0x22, 0x54, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x55, 0x0a, 0x19,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x6d, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69,
	0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18,
	0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x05, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x22, 0x58, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3a, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x79, 0x0a, 0x1b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x38, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x58, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x7c, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x43, 0x6f,
	0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x14, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69,
	0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22,
	0x5b, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x69, 0x6e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3a, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x54, 0x0a, 0x18,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x55, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x38, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x27, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x44, 0x22, 0x52, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xfe, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x50, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x4e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6b, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x22, 0x84, 0x02, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x53, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x4e, 0x0a, 0x0a, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x56, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x6e, 0x6c,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x90, 0x02, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x43, 0x6f,
	0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x12, 0x53, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x14, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x4e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6e, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70,
	0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x96, 0x02, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x41, 0x70,
	0x70, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x6e, 0x6c, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x56, 0x0a, 0x05, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a,
	0x4e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x59, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x38, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2a, 0x0a, 0x18, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x55, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0xc1, 0x1e,
	0x0a, 0x12, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x22, 0x08, 0x2f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0xae, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0xb2, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1c, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xbb, 0x01,
	0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x69, 0x6e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x2e, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x43, 0x6f,
	0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0xbf, 0x01, 0x0a, 0x19,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x69,
	0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x22, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xae, 0x01,
	0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36,
	0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b,
	0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0xa2,
	0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f,
	0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x3a, 0x01, 0x2a, 0x12, 0xa6, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x2e, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19,
	0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xb3, 0x01, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x37, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69,
	0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x6c, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22,
	0x22, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x6e, 0x6c, 0x79, 0x3a,
	0x01, 0x2a, 0x12, 0xb3, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x69,
	0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x2e,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x43, 0x6f,
	0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f,
	0x61, 0x70, 0x70, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xc0, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x39, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3a, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2c, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x26, 0x22, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x61,
	0x70, 0x70, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x6e, 0x6c, 0x79, 0x3a, 0x01, 0x2a, 0x12, 0xae, 0x01, 0x0a, 0x15,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x69,
	0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x76,
	0x31, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x9e, 0x01, 0x0a,
	0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x12, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1c, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f,
	0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0xa2, 0x01,
	0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x12, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69,
	0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x3a,
	0x01, 0x2a, 0x12, 0xab, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70,
	0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x34, 0x2e, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x43,
	0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20,
	0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x70, 0x70,
	0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x3a, 0x01, 0x2a,
	0x12, 0xaf, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x43, 0x6f,
	0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x35, 0x2e, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x43, 0x6f,
	0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x36, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x21, 0x22, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x70,
	0x70, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x3a,
	0x01, 0x2a, 0x12, 0x9e, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69,
	0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x3a, 0x01, 0x2a, 0x12, 0x92, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22,
	0x14, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x96, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x2f, 0x2e, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74,
	0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x3a, 0x01,
	0x2a, 0x12, 0xa3, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x67,
	0x65, 0x74, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f,
	0x6f, 0x6e, 0x6c, 0x79, 0x3a, 0x01, 0x2a, 0x12, 0xa3, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x32,
	0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x43,
	0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66,
	0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22,
	0x19, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x63, 0x6f, 0x69,
	0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xb0, 0x01,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x35, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36,
	0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x43,
	0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d,
	0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x63, 0x6f, 0x69, 0x6e,
	0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2f, 0x6f, 0x6e, 0x6c, 0x79, 0x3a, 0x01, 0x2a,
	0x12, 0x9e, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x3a, 0x01,
	0x2a, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x2d, 0x69, 0x6e, 0x66, 0x6f, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_projectinfomgr_projectinfomgr_proto_rawDescOnce sync.Once
	file_npool_projectinfomgr_projectinfomgr_proto_rawDescData = file_npool_projectinfomgr_projectinfomgr_proto_rawDesc
)

func file_npool_projectinfomgr_projectinfomgr_proto_rawDescGZIP() []byte {
	file_npool_projectinfomgr_projectinfomgr_proto_rawDescOnce.Do(func() {
		file_npool_projectinfomgr_projectinfomgr_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_projectinfomgr_projectinfomgr_proto_rawDescData)
	})
	return file_npool_projectinfomgr_projectinfomgr_proto_rawDescData
}

var file_npool_projectinfomgr_projectinfomgr_proto_msgTypes = make([]protoimpl.MessageInfo, 54)
var file_npool_projectinfomgr_projectinfomgr_proto_goTypes = []interface{}{
	(*CoinDescription)(nil),                   // 0: project.info.manager.v1.CoinDescription
	(*CreateCoinDescriptionRequest)(nil),      // 1: project.info.manager.v1.CreateCoinDescriptionRequest
	(*CreateCoinDescriptionResponse)(nil),     // 2: project.info.manager.v1.CreateCoinDescriptionResponse
	(*CreateCoinDescriptionsRequest)(nil),     // 3: project.info.manager.v1.CreateCoinDescriptionsRequest
	(*CreateCoinDescriptionsResponse)(nil),    // 4: project.info.manager.v1.CreateCoinDescriptionsResponse
	(*CreateAppCoinDescriptionRequest)(nil),   // 5: project.info.manager.v1.CreateAppCoinDescriptionRequest
	(*CreateAppCoinDescriptionResponse)(nil),  // 6: project.info.manager.v1.CreateAppCoinDescriptionResponse
	(*CreateAppCoinDescriptionsRequest)(nil),  // 7: project.info.manager.v1.CreateAppCoinDescriptionsRequest
	(*CreateAppCoinDescriptionsResponse)(nil), // 8: project.info.manager.v1.CreateAppCoinDescriptionsResponse
	(*UpdateCoinDescriptionRequest)(nil),      // 9: project.info.manager.v1.UpdateCoinDescriptionRequest
	(*UpdateCoinDescriptionResponse)(nil),     // 10: project.info.manager.v1.UpdateCoinDescriptionResponse
	(*GetCoinDescriptionRequest)(nil),         // 11: project.info.manager.v1.GetCoinDescriptionRequest
	(*GetCoinDescriptionResponse)(nil),        // 12: project.info.manager.v1.GetCoinDescriptionResponse
	(*GetCoinDescriptionsRequest)(nil),        // 13: project.info.manager.v1.GetCoinDescriptionsRequest
	(*GetCoinDescriptionsResponse)(nil),       // 14: project.info.manager.v1.GetCoinDescriptionsResponse
	(*GetCoinDescriptionOnlyRequest)(nil),     // 15: project.info.manager.v1.GetCoinDescriptionOnlyRequest
	(*GetCoinDescriptionOnlyResponse)(nil),    // 16: project.info.manager.v1.GetCoinDescriptionOnlyResponse
	(*GetAppCoinDescriptionsRequest)(nil),     // 17: project.info.manager.v1.GetAppCoinDescriptionsRequest
	(*GetAppCoinDescriptionsResponse)(nil),    // 18: project.info.manager.v1.GetAppCoinDescriptionsResponse
	(*GetAppCoinDescriptionOnlyRequest)(nil),  // 19: project.info.manager.v1.GetAppCoinDescriptionOnlyRequest
	(*GetAppCoinDescriptionOnlyResponse)(nil), // 20: project.info.manager.v1.GetAppCoinDescriptionOnlyResponse
	(*DeleteCoinDescriptionRequest)(nil),      // 21: project.info.manager.v1.DeleteCoinDescriptionRequest
	(*DeleteCoinDescriptionResponse)(nil),     // 22: project.info.manager.v1.DeleteCoinDescriptionResponse
	(*CoinProduct)(nil),                       // 23: project.info.manager.v1.CoinProduct
	(*CreateCoinProductRequest)(nil),          // 24: project.info.manager.v1.CreateCoinProductRequest
	(*CreateCoinProductResponse)(nil),         // 25: project.info.manager.v1.CreateCoinProductResponse
	(*CreateCoinProductsRequest)(nil),         // 26: project.info.manager.v1.CreateCoinProductsRequest
	(*CreateCoinProductsResponse)(nil),        // 27: project.info.manager.v1.CreateCoinProductsResponse
	(*CreateAppCoinProductRequest)(nil),       // 28: project.info.manager.v1.CreateAppCoinProductRequest
	(*CreateAppCoinProductResponse)(nil),      // 29: project.info.manager.v1.CreateAppCoinProductResponse
	(*CreateAppCoinProductsRequest)(nil),      // 30: project.info.manager.v1.CreateAppCoinProductsRequest
	(*CreateAppCoinProductsResponse)(nil),     // 31: project.info.manager.v1.CreateAppCoinProductsResponse
	(*UpdateCoinProductRequest)(nil),          // 32: project.info.manager.v1.UpdateCoinProductRequest
	(*UpdateCoinProductResponse)(nil),         // 33: project.info.manager.v1.UpdateCoinProductResponse
	(*GetCoinProductRequest)(nil),             // 34: project.info.manager.v1.GetCoinProductRequest
	(*GetCoinProductResponse)(nil),            // 35: project.info.manager.v1.GetCoinProductResponse
	(*GetCoinProductsRequest)(nil),            // 36: project.info.manager.v1.GetCoinProductsRequest
	(*GetCoinProductsResponse)(nil),           // 37: project.info.manager.v1.GetCoinProductsResponse
	(*GetCoinProductOnlyRequest)(nil),         // 38: project.info.manager.v1.GetCoinProductOnlyRequest
	(*GetCoinProductOnlyResponse)(nil),        // 39: project.info.manager.v1.GetCoinProductOnlyResponse
	(*GetAppCoinProductsRequest)(nil),         // 40: project.info.manager.v1.GetAppCoinProductsRequest
	(*GetAppCoinProductsResponse)(nil),        // 41: project.info.manager.v1.GetAppCoinProductsResponse
	(*GetAppCoinProductOnlyRequest)(nil),      // 42: project.info.manager.v1.GetAppCoinProductOnlyRequest
	(*GetAppCoinProductOnlyResponse)(nil),     // 43: project.info.manager.v1.GetAppCoinProductOnlyResponse
	(*DeleteCoinProductRequest)(nil),          // 44: project.info.manager.v1.DeleteCoinProductRequest
	(*DeleteCoinProductResponse)(nil),         // 45: project.info.manager.v1.DeleteCoinProductResponse
	nil,                                       // 46: project.info.manager.v1.GetCoinDescriptionsRequest.CondsEntry
	nil,                                       // 47: project.info.manager.v1.GetCoinDescriptionOnlyRequest.CondsEntry
	nil,                                       // 48: project.info.manager.v1.GetAppCoinDescriptionsRequest.CondsEntry
	nil,                                       // 49: project.info.manager.v1.GetAppCoinDescriptionOnlyRequest.CondsEntry
	nil,                                       // 50: project.info.manager.v1.GetCoinProductsRequest.CondsEntry
	nil,                                       // 51: project.info.manager.v1.GetCoinProductOnlyRequest.CondsEntry
	nil,                                       // 52: project.info.manager.v1.GetAppCoinProductsRequest.CondsEntry
	nil,                                       // 53: project.info.manager.v1.GetAppCoinProductOnlyRequest.CondsEntry
	(*npool.FilterCond)(nil),                  // 54: npool.v1.FilterCond
	(*emptypb.Empty)(nil),                     // 55: google.protobuf.Empty
	(*npool.VersionResponse)(nil),             // 56: npool.v1.VersionResponse
}
var file_npool_projectinfomgr_projectinfomgr_proto_depIdxs = []int32{
	0,  // 0: project.info.manager.v1.CreateCoinDescriptionRequest.Info:type_name -> project.info.manager.v1.CoinDescription
	0,  // 1: project.info.manager.v1.CreateCoinDescriptionResponse.Info:type_name -> project.info.manager.v1.CoinDescription
	0,  // 2: project.info.manager.v1.CreateCoinDescriptionsRequest.Infos:type_name -> project.info.manager.v1.CoinDescription
	0,  // 3: project.info.manager.v1.CreateCoinDescriptionsResponse.Infos:type_name -> project.info.manager.v1.CoinDescription
	0,  // 4: project.info.manager.v1.CreateAppCoinDescriptionRequest.Info:type_name -> project.info.manager.v1.CoinDescription
	0,  // 5: project.info.manager.v1.CreateAppCoinDescriptionResponse.Info:type_name -> project.info.manager.v1.CoinDescription
	0,  // 6: project.info.manager.v1.CreateAppCoinDescriptionsRequest.Infos:type_name -> project.info.manager.v1.CoinDescription
	0,  // 7: project.info.manager.v1.CreateAppCoinDescriptionsResponse.Infos:type_name -> project.info.manager.v1.CoinDescription
	0,  // 8: project.info.manager.v1.UpdateCoinDescriptionRequest.Info:type_name -> project.info.manager.v1.CoinDescription
	0,  // 9: project.info.manager.v1.UpdateCoinDescriptionResponse.Info:type_name -> project.info.manager.v1.CoinDescription
	0,  // 10: project.info.manager.v1.GetCoinDescriptionResponse.Info:type_name -> project.info.manager.v1.CoinDescription
	46, // 11: project.info.manager.v1.GetCoinDescriptionsRequest.Conds:type_name -> project.info.manager.v1.GetCoinDescriptionsRequest.CondsEntry
	0,  // 12: project.info.manager.v1.GetCoinDescriptionsResponse.Infos:type_name -> project.info.manager.v1.CoinDescription
	47, // 13: project.info.manager.v1.GetCoinDescriptionOnlyRequest.Conds:type_name -> project.info.manager.v1.GetCoinDescriptionOnlyRequest.CondsEntry
	0,  // 14: project.info.manager.v1.GetCoinDescriptionOnlyResponse.Info:type_name -> project.info.manager.v1.CoinDescription
	48, // 15: project.info.manager.v1.GetAppCoinDescriptionsRequest.Conds:type_name -> project.info.manager.v1.GetAppCoinDescriptionsRequest.CondsEntry
	0,  // 16: project.info.manager.v1.GetAppCoinDescriptionsResponse.Infos:type_name -> project.info.manager.v1.CoinDescription
	49, // 17: project.info.manager.v1.GetAppCoinDescriptionOnlyRequest.Conds:type_name -> project.info.manager.v1.GetAppCoinDescriptionOnlyRequest.CondsEntry
	0,  // 18: project.info.manager.v1.GetAppCoinDescriptionOnlyResponse.Info:type_name -> project.info.manager.v1.CoinDescription
	0,  // 19: project.info.manager.v1.DeleteCoinDescriptionResponse.Info:type_name -> project.info.manager.v1.CoinDescription
	23, // 20: project.info.manager.v1.CreateCoinProductRequest.Info:type_name -> project.info.manager.v1.CoinProduct
	23, // 21: project.info.manager.v1.CreateCoinProductResponse.Info:type_name -> project.info.manager.v1.CoinProduct
	23, // 22: project.info.manager.v1.CreateCoinProductsRequest.Infos:type_name -> project.info.manager.v1.CoinProduct
	23, // 23: project.info.manager.v1.CreateCoinProductsResponse.Infos:type_name -> project.info.manager.v1.CoinProduct
	23, // 24: project.info.manager.v1.CreateAppCoinProductRequest.Info:type_name -> project.info.manager.v1.CoinProduct
	23, // 25: project.info.manager.v1.CreateAppCoinProductResponse.Info:type_name -> project.info.manager.v1.CoinProduct
	23, // 26: project.info.manager.v1.CreateAppCoinProductsRequest.Infos:type_name -> project.info.manager.v1.CoinProduct
	23, // 27: project.info.manager.v1.CreateAppCoinProductsResponse.Infos:type_name -> project.info.manager.v1.CoinProduct
	23, // 28: project.info.manager.v1.UpdateCoinProductRequest.Info:type_name -> project.info.manager.v1.CoinProduct
	23, // 29: project.info.manager.v1.UpdateCoinProductResponse.Info:type_name -> project.info.manager.v1.CoinProduct
	23, // 30: project.info.manager.v1.GetCoinProductResponse.Info:type_name -> project.info.manager.v1.CoinProduct
	50, // 31: project.info.manager.v1.GetCoinProductsRequest.Conds:type_name -> project.info.manager.v1.GetCoinProductsRequest.CondsEntry
	23, // 32: project.info.manager.v1.GetCoinProductsResponse.Infos:type_name -> project.info.manager.v1.CoinProduct
	51, // 33: project.info.manager.v1.GetCoinProductOnlyRequest.Conds:type_name -> project.info.manager.v1.GetCoinProductOnlyRequest.CondsEntry
	23, // 34: project.info.manager.v1.GetCoinProductOnlyResponse.Info:type_name -> project.info.manager.v1.CoinProduct
	52, // 35: project.info.manager.v1.GetAppCoinProductsRequest.Conds:type_name -> project.info.manager.v1.GetAppCoinProductsRequest.CondsEntry
	23, // 36: project.info.manager.v1.GetAppCoinProductsResponse.Infos:type_name -> project.info.manager.v1.CoinProduct
	53, // 37: project.info.manager.v1.GetAppCoinProductOnlyRequest.Conds:type_name -> project.info.manager.v1.GetAppCoinProductOnlyRequest.CondsEntry
	23, // 38: project.info.manager.v1.GetAppCoinProductOnlyResponse.Info:type_name -> project.info.manager.v1.CoinProduct
	23, // 39: project.info.manager.v1.DeleteCoinProductResponse.Info:type_name -> project.info.manager.v1.CoinProduct
	54, // 40: project.info.manager.v1.GetCoinDescriptionsRequest.CondsEntry.value:type_name -> npool.v1.FilterCond
	54, // 41: project.info.manager.v1.GetCoinDescriptionOnlyRequest.CondsEntry.value:type_name -> npool.v1.FilterCond
	54, // 42: project.info.manager.v1.GetAppCoinDescriptionsRequest.CondsEntry.value:type_name -> npool.v1.FilterCond
	54, // 43: project.info.manager.v1.GetAppCoinDescriptionOnlyRequest.CondsEntry.value:type_name -> npool.v1.FilterCond
	54, // 44: project.info.manager.v1.GetCoinProductsRequest.CondsEntry.value:type_name -> npool.v1.FilterCond
	54, // 45: project.info.manager.v1.GetCoinProductOnlyRequest.CondsEntry.value:type_name -> npool.v1.FilterCond
	54, // 46: project.info.manager.v1.GetAppCoinProductsRequest.CondsEntry.value:type_name -> npool.v1.FilterCond
	54, // 47: project.info.manager.v1.GetAppCoinProductOnlyRequest.CondsEntry.value:type_name -> npool.v1.FilterCond
	55, // 48: project.info.manager.v1.ProjectInfoManager.Version:input_type -> google.protobuf.Empty
	1,  // 49: project.info.manager.v1.ProjectInfoManager.CreateCoinDescription:input_type -> project.info.manager.v1.CreateCoinDescriptionRequest
	3,  // 50: project.info.manager.v1.ProjectInfoManager.CreateCoinDescriptions:input_type -> project.info.manager.v1.CreateCoinDescriptionsRequest
	5,  // 51: project.info.manager.v1.ProjectInfoManager.CreateAppCoinDescription:input_type -> project.info.manager.v1.CreateAppCoinDescriptionRequest
	7,  // 52: project.info.manager.v1.ProjectInfoManager.CreateAppCoinDescriptions:input_type -> project.info.manager.v1.CreateAppCoinDescriptionsRequest
	9,  // 53: project.info.manager.v1.ProjectInfoManager.UpdateCoinDescription:input_type -> project.info.manager.v1.UpdateCoinDescriptionRequest
	11, // 54: project.info.manager.v1.ProjectInfoManager.GetCoinDescription:input_type -> project.info.manager.v1.GetCoinDescriptionRequest
	13, // 55: project.info.manager.v1.ProjectInfoManager.GetCoinDescriptions:input_type -> project.info.manager.v1.GetCoinDescriptionsRequest
	15, // 56: project.info.manager.v1.ProjectInfoManager.GetCoinDescriptionOnly:input_type -> project.info.manager.v1.GetCoinDescriptionOnlyRequest
	17, // 57: project.info.manager.v1.ProjectInfoManager.GetAppCoinDescriptions:input_type -> project.info.manager.v1.GetAppCoinDescriptionsRequest
	19, // 58: project.info.manager.v1.ProjectInfoManager.GetAppCoinDescriptionOnly:input_type -> project.info.manager.v1.GetAppCoinDescriptionOnlyRequest
	21, // 59: project.info.manager.v1.ProjectInfoManager.DeleteCoinDescription:input_type -> project.info.manager.v1.DeleteCoinDescriptionRequest
	24, // 60: project.info.manager.v1.ProjectInfoManager.CreateCoinProduct:input_type -> project.info.manager.v1.CreateCoinProductRequest
	26, // 61: project.info.manager.v1.ProjectInfoManager.CreateCoinProducts:input_type -> project.info.manager.v1.CreateCoinProductsRequest
	28, // 62: project.info.manager.v1.ProjectInfoManager.CreateAppCoinProduct:input_type -> project.info.manager.v1.CreateAppCoinProductRequest
	30, // 63: project.info.manager.v1.ProjectInfoManager.CreateAppCoinProducts:input_type -> project.info.manager.v1.CreateAppCoinProductsRequest
	32, // 64: project.info.manager.v1.ProjectInfoManager.UpdateCoinProduct:input_type -> project.info.manager.v1.UpdateCoinProductRequest
	34, // 65: project.info.manager.v1.ProjectInfoManager.GetCoinProduct:input_type -> project.info.manager.v1.GetCoinProductRequest
	36, // 66: project.info.manager.v1.ProjectInfoManager.GetCoinProducts:input_type -> project.info.manager.v1.GetCoinProductsRequest
	38, // 67: project.info.manager.v1.ProjectInfoManager.GetCoinProductOnly:input_type -> project.info.manager.v1.GetCoinProductOnlyRequest
	40, // 68: project.info.manager.v1.ProjectInfoManager.GetAppCoinProducts:input_type -> project.info.manager.v1.GetAppCoinProductsRequest
	42, // 69: project.info.manager.v1.ProjectInfoManager.GetAppCoinProductOnly:input_type -> project.info.manager.v1.GetAppCoinProductOnlyRequest
	44, // 70: project.info.manager.v1.ProjectInfoManager.DeleteCoinProduct:input_type -> project.info.manager.v1.DeleteCoinProductRequest
	56, // 71: project.info.manager.v1.ProjectInfoManager.Version:output_type -> npool.v1.VersionResponse
	2,  // 72: project.info.manager.v1.ProjectInfoManager.CreateCoinDescription:output_type -> project.info.manager.v1.CreateCoinDescriptionResponse
	4,  // 73: project.info.manager.v1.ProjectInfoManager.CreateCoinDescriptions:output_type -> project.info.manager.v1.CreateCoinDescriptionsResponse
	6,  // 74: project.info.manager.v1.ProjectInfoManager.CreateAppCoinDescription:output_type -> project.info.manager.v1.CreateAppCoinDescriptionResponse
	8,  // 75: project.info.manager.v1.ProjectInfoManager.CreateAppCoinDescriptions:output_type -> project.info.manager.v1.CreateAppCoinDescriptionsResponse
	10, // 76: project.info.manager.v1.ProjectInfoManager.UpdateCoinDescription:output_type -> project.info.manager.v1.UpdateCoinDescriptionResponse
	12, // 77: project.info.manager.v1.ProjectInfoManager.GetCoinDescription:output_type -> project.info.manager.v1.GetCoinDescriptionResponse
	14, // 78: project.info.manager.v1.ProjectInfoManager.GetCoinDescriptions:output_type -> project.info.manager.v1.GetCoinDescriptionsResponse
	16, // 79: project.info.manager.v1.ProjectInfoManager.GetCoinDescriptionOnly:output_type -> project.info.manager.v1.GetCoinDescriptionOnlyResponse
	18, // 80: project.info.manager.v1.ProjectInfoManager.GetAppCoinDescriptions:output_type -> project.info.manager.v1.GetAppCoinDescriptionsResponse
	20, // 81: project.info.manager.v1.ProjectInfoManager.GetAppCoinDescriptionOnly:output_type -> project.info.manager.v1.GetAppCoinDescriptionOnlyResponse
	22, // 82: project.info.manager.v1.ProjectInfoManager.DeleteCoinDescription:output_type -> project.info.manager.v1.DeleteCoinDescriptionResponse
	25, // 83: project.info.manager.v1.ProjectInfoManager.CreateCoinProduct:output_type -> project.info.manager.v1.CreateCoinProductResponse
	27, // 84: project.info.manager.v1.ProjectInfoManager.CreateCoinProducts:output_type -> project.info.manager.v1.CreateCoinProductsResponse
	29, // 85: project.info.manager.v1.ProjectInfoManager.CreateAppCoinProduct:output_type -> project.info.manager.v1.CreateAppCoinProductResponse
	31, // 86: project.info.manager.v1.ProjectInfoManager.CreateAppCoinProducts:output_type -> project.info.manager.v1.CreateAppCoinProductsResponse
	33, // 87: project.info.manager.v1.ProjectInfoManager.UpdateCoinProduct:output_type -> project.info.manager.v1.UpdateCoinProductResponse
	35, // 88: project.info.manager.v1.ProjectInfoManager.GetCoinProduct:output_type -> project.info.manager.v1.GetCoinProductResponse
	37, // 89: project.info.manager.v1.ProjectInfoManager.GetCoinProducts:output_type -> project.info.manager.v1.GetCoinProductsResponse
	39, // 90: project.info.manager.v1.ProjectInfoManager.GetCoinProductOnly:output_type -> project.info.manager.v1.GetCoinProductOnlyResponse
	41, // 91: project.info.manager.v1.ProjectInfoManager.GetAppCoinProducts:output_type -> project.info.manager.v1.GetAppCoinProductsResponse
	43, // 92: project.info.manager.v1.ProjectInfoManager.GetAppCoinProductOnly:output_type -> project.info.manager.v1.GetAppCoinProductOnlyResponse
	45, // 93: project.info.manager.v1.ProjectInfoManager.DeleteCoinProduct:output_type -> project.info.manager.v1.DeleteCoinProductResponse
	71, // [71:94] is the sub-list for method output_type
	48, // [48:71] is the sub-list for method input_type
	48, // [48:48] is the sub-list for extension type_name
	48, // [48:48] is the sub-list for extension extendee
	0,  // [0:48] is the sub-list for field type_name
}

func init() { file_npool_projectinfomgr_projectinfomgr_proto_init() }
func file_npool_projectinfomgr_projectinfomgr_proto_init() {
	if File_npool_projectinfomgr_projectinfomgr_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCoinDescriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCoinDescriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCoinDescriptionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCoinDescriptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAppCoinDescriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAppCoinDescriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAppCoinDescriptionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAppCoinDescriptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCoinDescriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCoinDescriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinDescriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinDescriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinDescriptionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinDescriptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinDescriptionOnlyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinDescriptionOnlyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppCoinDescriptionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppCoinDescriptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppCoinDescriptionOnlyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppCoinDescriptionOnlyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCoinDescriptionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCoinDescriptionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinProduct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCoinProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCoinProductResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCoinProductsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCoinProductsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAppCoinProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAppCoinProductResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAppCoinProductsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAppCoinProductsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCoinProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCoinProductResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinProductResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinProductsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinProductsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinProductOnlyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinProductOnlyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppCoinProductsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppCoinProductsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppCoinProductOnlyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppCoinProductOnlyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCoinProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_projectinfomgr_projectinfomgr_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCoinProductResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_projectinfomgr_projectinfomgr_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   54,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_projectinfomgr_projectinfomgr_proto_goTypes,
		DependencyIndexes: file_npool_projectinfomgr_projectinfomgr_proto_depIdxs,
		MessageInfos:      file_npool_projectinfomgr_projectinfomgr_proto_msgTypes,
	}.Build()
	File_npool_projectinfomgr_projectinfomgr_proto = out.File
	file_npool_projectinfomgr_projectinfomgr_proto_rawDesc = nil
	file_npool_projectinfomgr_projectinfomgr_proto_goTypes = nil
	file_npool_projectinfomgr_projectinfomgr_proto_depIdxs = nil
}
