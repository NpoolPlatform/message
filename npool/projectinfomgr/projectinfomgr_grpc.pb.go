// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/projectinfomgr/projectinfomgr.proto

package project_info_manager

import (
	context "context"
	npool "github.com/NpoolPlatform/message/npool"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProjectInfoManager_Version_FullMethodName                   = "/project.info.manager.v1.ProjectInfoManager/Version"
	ProjectInfoManager_CreateCoinDescription_FullMethodName     = "/project.info.manager.v1.ProjectInfoManager/CreateCoinDescription"
	ProjectInfoManager_CreateCoinDescriptions_FullMethodName    = "/project.info.manager.v1.ProjectInfoManager/CreateCoinDescriptions"
	ProjectInfoManager_CreateAppCoinDescription_FullMethodName  = "/project.info.manager.v1.ProjectInfoManager/CreateAppCoinDescription"
	ProjectInfoManager_CreateAppCoinDescriptions_FullMethodName = "/project.info.manager.v1.ProjectInfoManager/CreateAppCoinDescriptions"
	ProjectInfoManager_UpdateCoinDescription_FullMethodName     = "/project.info.manager.v1.ProjectInfoManager/UpdateCoinDescription"
	ProjectInfoManager_GetCoinDescription_FullMethodName        = "/project.info.manager.v1.ProjectInfoManager/GetCoinDescription"
	ProjectInfoManager_GetCoinDescriptions_FullMethodName       = "/project.info.manager.v1.ProjectInfoManager/GetCoinDescriptions"
	ProjectInfoManager_GetCoinDescriptionOnly_FullMethodName    = "/project.info.manager.v1.ProjectInfoManager/GetCoinDescriptionOnly"
	ProjectInfoManager_GetAppCoinDescriptions_FullMethodName    = "/project.info.manager.v1.ProjectInfoManager/GetAppCoinDescriptions"
	ProjectInfoManager_GetAppCoinDescriptionOnly_FullMethodName = "/project.info.manager.v1.ProjectInfoManager/GetAppCoinDescriptionOnly"
	ProjectInfoManager_DeleteCoinDescription_FullMethodName     = "/project.info.manager.v1.ProjectInfoManager/DeleteCoinDescription"
	ProjectInfoManager_CreateCoinProductInfo_FullMethodName     = "/project.info.manager.v1.ProjectInfoManager/CreateCoinProductInfo"
	ProjectInfoManager_CreateCoinProductInfos_FullMethodName    = "/project.info.manager.v1.ProjectInfoManager/CreateCoinProductInfos"
	ProjectInfoManager_CreateAppCoinProductInfo_FullMethodName  = "/project.info.manager.v1.ProjectInfoManager/CreateAppCoinProductInfo"
	ProjectInfoManager_CreateAppCoinProductInfos_FullMethodName = "/project.info.manager.v1.ProjectInfoManager/CreateAppCoinProductInfos"
	ProjectInfoManager_UpdateCoinProductInfo_FullMethodName     = "/project.info.manager.v1.ProjectInfoManager/UpdateCoinProductInfo"
	ProjectInfoManager_GetCoinProductInfo_FullMethodName        = "/project.info.manager.v1.ProjectInfoManager/GetCoinProductInfo"
	ProjectInfoManager_GetCoinProductInfos_FullMethodName       = "/project.info.manager.v1.ProjectInfoManager/GetCoinProductInfos"
	ProjectInfoManager_GetCoinProductInfoOnly_FullMethodName    = "/project.info.manager.v1.ProjectInfoManager/GetCoinProductInfoOnly"
	ProjectInfoManager_GetAppCoinProductInfos_FullMethodName    = "/project.info.manager.v1.ProjectInfoManager/GetAppCoinProductInfos"
	ProjectInfoManager_GetAppCoinProductInfoOnly_FullMethodName = "/project.info.manager.v1.ProjectInfoManager/GetAppCoinProductInfoOnly"
	ProjectInfoManager_DeleteCoinProductInfo_FullMethodName     = "/project.info.manager.v1.ProjectInfoManager/DeleteCoinProductInfo"
)

// ProjectInfoManagerClient is the client API for ProjectInfoManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectInfoManagerClient interface {
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*npool.VersionResponse, error)
	CreateCoinDescription(ctx context.Context, in *CreateCoinDescriptionRequest, opts ...grpc.CallOption) (*CreateCoinDescriptionResponse, error)
	CreateCoinDescriptions(ctx context.Context, in *CreateCoinDescriptionsRequest, opts ...grpc.CallOption) (*CreateCoinDescriptionsResponse, error)
	CreateAppCoinDescription(ctx context.Context, in *CreateAppCoinDescriptionRequest, opts ...grpc.CallOption) (*CreateAppCoinDescriptionResponse, error)
	CreateAppCoinDescriptions(ctx context.Context, in *CreateAppCoinDescriptionsRequest, opts ...grpc.CallOption) (*CreateAppCoinDescriptionsResponse, error)
	UpdateCoinDescription(ctx context.Context, in *UpdateCoinDescriptionRequest, opts ...grpc.CallOption) (*UpdateCoinDescriptionResponse, error)
	GetCoinDescription(ctx context.Context, in *GetCoinDescriptionRequest, opts ...grpc.CallOption) (*GetCoinDescriptionResponse, error)
	GetCoinDescriptions(ctx context.Context, in *GetCoinDescriptionsRequest, opts ...grpc.CallOption) (*GetCoinDescriptionsResponse, error)
	GetCoinDescriptionOnly(ctx context.Context, in *GetCoinDescriptionOnlyRequest, opts ...grpc.CallOption) (*GetCoinDescriptionOnlyResponse, error)
	GetAppCoinDescriptions(ctx context.Context, in *GetAppCoinDescriptionsRequest, opts ...grpc.CallOption) (*GetAppCoinDescriptionsResponse, error)
	GetAppCoinDescriptionOnly(ctx context.Context, in *GetAppCoinDescriptionOnlyRequest, opts ...grpc.CallOption) (*GetAppCoinDescriptionOnlyResponse, error)
	DeleteCoinDescription(ctx context.Context, in *DeleteCoinDescriptionRequest, opts ...grpc.CallOption) (*DeleteCoinDescriptionResponse, error)
	CreateCoinProductInfo(ctx context.Context, in *CreateCoinProductInfoRequest, opts ...grpc.CallOption) (*CreateCoinProductInfoResponse, error)
	CreateCoinProductInfos(ctx context.Context, in *CreateCoinProductInfosRequest, opts ...grpc.CallOption) (*CreateCoinProductInfosResponse, error)
	CreateAppCoinProductInfo(ctx context.Context, in *CreateAppCoinProductInfoRequest, opts ...grpc.CallOption) (*CreateAppCoinProductInfoResponse, error)
	CreateAppCoinProductInfos(ctx context.Context, in *CreateAppCoinProductInfosRequest, opts ...grpc.CallOption) (*CreateAppCoinProductInfosResponse, error)
	UpdateCoinProductInfo(ctx context.Context, in *UpdateCoinProductInfoRequest, opts ...grpc.CallOption) (*UpdateCoinProductInfoResponse, error)
	GetCoinProductInfo(ctx context.Context, in *GetCoinProductInfoRequest, opts ...grpc.CallOption) (*GetCoinProductInfoResponse, error)
	GetCoinProductInfos(ctx context.Context, in *GetCoinProductInfosRequest, opts ...grpc.CallOption) (*GetCoinProductInfosResponse, error)
	GetCoinProductInfoOnly(ctx context.Context, in *GetCoinProductInfoOnlyRequest, opts ...grpc.CallOption) (*GetCoinProductInfoOnlyResponse, error)
	GetAppCoinProductInfos(ctx context.Context, in *GetAppCoinProductInfosRequest, opts ...grpc.CallOption) (*GetAppCoinProductInfosResponse, error)
	GetAppCoinProductInfoOnly(ctx context.Context, in *GetAppCoinProductInfoOnlyRequest, opts ...grpc.CallOption) (*GetAppCoinProductInfoOnlyResponse, error)
	DeleteCoinProductInfo(ctx context.Context, in *DeleteCoinProductInfoRequest, opts ...grpc.CallOption) (*DeleteCoinProductInfoResponse, error)
}

type projectInfoManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectInfoManagerClient(cc grpc.ClientConnInterface) ProjectInfoManagerClient {
	return &projectInfoManagerClient{cc}
}

func (c *projectInfoManagerClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*npool.VersionResponse, error) {
	out := new(npool.VersionResponse)
	err := c.cc.Invoke(ctx, ProjectInfoManager_Version_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) CreateCoinDescription(ctx context.Context, in *CreateCoinDescriptionRequest, opts ...grpc.CallOption) (*CreateCoinDescriptionResponse, error) {
	out := new(CreateCoinDescriptionResponse)
	err := c.cc.Invoke(ctx, ProjectInfoManager_CreateCoinDescription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) CreateCoinDescriptions(ctx context.Context, in *CreateCoinDescriptionsRequest, opts ...grpc.CallOption) (*CreateCoinDescriptionsResponse, error) {
	out := new(CreateCoinDescriptionsResponse)
	err := c.cc.Invoke(ctx, ProjectInfoManager_CreateCoinDescriptions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) CreateAppCoinDescription(ctx context.Context, in *CreateAppCoinDescriptionRequest, opts ...grpc.CallOption) (*CreateAppCoinDescriptionResponse, error) {
	out := new(CreateAppCoinDescriptionResponse)
	err := c.cc.Invoke(ctx, ProjectInfoManager_CreateAppCoinDescription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) CreateAppCoinDescriptions(ctx context.Context, in *CreateAppCoinDescriptionsRequest, opts ...grpc.CallOption) (*CreateAppCoinDescriptionsResponse, error) {
	out := new(CreateAppCoinDescriptionsResponse)
	err := c.cc.Invoke(ctx, ProjectInfoManager_CreateAppCoinDescriptions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) UpdateCoinDescription(ctx context.Context, in *UpdateCoinDescriptionRequest, opts ...grpc.CallOption) (*UpdateCoinDescriptionResponse, error) {
	out := new(UpdateCoinDescriptionResponse)
	err := c.cc.Invoke(ctx, ProjectInfoManager_UpdateCoinDescription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) GetCoinDescription(ctx context.Context, in *GetCoinDescriptionRequest, opts ...grpc.CallOption) (*GetCoinDescriptionResponse, error) {
	out := new(GetCoinDescriptionResponse)
	err := c.cc.Invoke(ctx, ProjectInfoManager_GetCoinDescription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) GetCoinDescriptions(ctx context.Context, in *GetCoinDescriptionsRequest, opts ...grpc.CallOption) (*GetCoinDescriptionsResponse, error) {
	out := new(GetCoinDescriptionsResponse)
	err := c.cc.Invoke(ctx, ProjectInfoManager_GetCoinDescriptions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) GetCoinDescriptionOnly(ctx context.Context, in *GetCoinDescriptionOnlyRequest, opts ...grpc.CallOption) (*GetCoinDescriptionOnlyResponse, error) {
	out := new(GetCoinDescriptionOnlyResponse)
	err := c.cc.Invoke(ctx, ProjectInfoManager_GetCoinDescriptionOnly_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) GetAppCoinDescriptions(ctx context.Context, in *GetAppCoinDescriptionsRequest, opts ...grpc.CallOption) (*GetAppCoinDescriptionsResponse, error) {
	out := new(GetAppCoinDescriptionsResponse)
	err := c.cc.Invoke(ctx, ProjectInfoManager_GetAppCoinDescriptions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) GetAppCoinDescriptionOnly(ctx context.Context, in *GetAppCoinDescriptionOnlyRequest, opts ...grpc.CallOption) (*GetAppCoinDescriptionOnlyResponse, error) {
	out := new(GetAppCoinDescriptionOnlyResponse)
	err := c.cc.Invoke(ctx, ProjectInfoManager_GetAppCoinDescriptionOnly_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) DeleteCoinDescription(ctx context.Context, in *DeleteCoinDescriptionRequest, opts ...grpc.CallOption) (*DeleteCoinDescriptionResponse, error) {
	out := new(DeleteCoinDescriptionResponse)
	err := c.cc.Invoke(ctx, ProjectInfoManager_DeleteCoinDescription_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) CreateCoinProductInfo(ctx context.Context, in *CreateCoinProductInfoRequest, opts ...grpc.CallOption) (*CreateCoinProductInfoResponse, error) {
	out := new(CreateCoinProductInfoResponse)
	err := c.cc.Invoke(ctx, ProjectInfoManager_CreateCoinProductInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) CreateCoinProductInfos(ctx context.Context, in *CreateCoinProductInfosRequest, opts ...grpc.CallOption) (*CreateCoinProductInfosResponse, error) {
	out := new(CreateCoinProductInfosResponse)
	err := c.cc.Invoke(ctx, ProjectInfoManager_CreateCoinProductInfos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) CreateAppCoinProductInfo(ctx context.Context, in *CreateAppCoinProductInfoRequest, opts ...grpc.CallOption) (*CreateAppCoinProductInfoResponse, error) {
	out := new(CreateAppCoinProductInfoResponse)
	err := c.cc.Invoke(ctx, ProjectInfoManager_CreateAppCoinProductInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) CreateAppCoinProductInfos(ctx context.Context, in *CreateAppCoinProductInfosRequest, opts ...grpc.CallOption) (*CreateAppCoinProductInfosResponse, error) {
	out := new(CreateAppCoinProductInfosResponse)
	err := c.cc.Invoke(ctx, ProjectInfoManager_CreateAppCoinProductInfos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) UpdateCoinProductInfo(ctx context.Context, in *UpdateCoinProductInfoRequest, opts ...grpc.CallOption) (*UpdateCoinProductInfoResponse, error) {
	out := new(UpdateCoinProductInfoResponse)
	err := c.cc.Invoke(ctx, ProjectInfoManager_UpdateCoinProductInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) GetCoinProductInfo(ctx context.Context, in *GetCoinProductInfoRequest, opts ...grpc.CallOption) (*GetCoinProductInfoResponse, error) {
	out := new(GetCoinProductInfoResponse)
	err := c.cc.Invoke(ctx, ProjectInfoManager_GetCoinProductInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) GetCoinProductInfos(ctx context.Context, in *GetCoinProductInfosRequest, opts ...grpc.CallOption) (*GetCoinProductInfosResponse, error) {
	out := new(GetCoinProductInfosResponse)
	err := c.cc.Invoke(ctx, ProjectInfoManager_GetCoinProductInfos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) GetCoinProductInfoOnly(ctx context.Context, in *GetCoinProductInfoOnlyRequest, opts ...grpc.CallOption) (*GetCoinProductInfoOnlyResponse, error) {
	out := new(GetCoinProductInfoOnlyResponse)
	err := c.cc.Invoke(ctx, ProjectInfoManager_GetCoinProductInfoOnly_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) GetAppCoinProductInfos(ctx context.Context, in *GetAppCoinProductInfosRequest, opts ...grpc.CallOption) (*GetAppCoinProductInfosResponse, error) {
	out := new(GetAppCoinProductInfosResponse)
	err := c.cc.Invoke(ctx, ProjectInfoManager_GetAppCoinProductInfos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) GetAppCoinProductInfoOnly(ctx context.Context, in *GetAppCoinProductInfoOnlyRequest, opts ...grpc.CallOption) (*GetAppCoinProductInfoOnlyResponse, error) {
	out := new(GetAppCoinProductInfoOnlyResponse)
	err := c.cc.Invoke(ctx, ProjectInfoManager_GetAppCoinProductInfoOnly_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) DeleteCoinProductInfo(ctx context.Context, in *DeleteCoinProductInfoRequest, opts ...grpc.CallOption) (*DeleteCoinProductInfoResponse, error) {
	out := new(DeleteCoinProductInfoResponse)
	err := c.cc.Invoke(ctx, ProjectInfoManager_DeleteCoinProductInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectInfoManagerServer is the server API for ProjectInfoManager service.
// All implementations must embed UnimplementedProjectInfoManagerServer
// for forward compatibility
type ProjectInfoManagerServer interface {
	Version(context.Context, *emptypb.Empty) (*npool.VersionResponse, error)
	CreateCoinDescription(context.Context, *CreateCoinDescriptionRequest) (*CreateCoinDescriptionResponse, error)
	CreateCoinDescriptions(context.Context, *CreateCoinDescriptionsRequest) (*CreateCoinDescriptionsResponse, error)
	CreateAppCoinDescription(context.Context, *CreateAppCoinDescriptionRequest) (*CreateAppCoinDescriptionResponse, error)
	CreateAppCoinDescriptions(context.Context, *CreateAppCoinDescriptionsRequest) (*CreateAppCoinDescriptionsResponse, error)
	UpdateCoinDescription(context.Context, *UpdateCoinDescriptionRequest) (*UpdateCoinDescriptionResponse, error)
	GetCoinDescription(context.Context, *GetCoinDescriptionRequest) (*GetCoinDescriptionResponse, error)
	GetCoinDescriptions(context.Context, *GetCoinDescriptionsRequest) (*GetCoinDescriptionsResponse, error)
	GetCoinDescriptionOnly(context.Context, *GetCoinDescriptionOnlyRequest) (*GetCoinDescriptionOnlyResponse, error)
	GetAppCoinDescriptions(context.Context, *GetAppCoinDescriptionsRequest) (*GetAppCoinDescriptionsResponse, error)
	GetAppCoinDescriptionOnly(context.Context, *GetAppCoinDescriptionOnlyRequest) (*GetAppCoinDescriptionOnlyResponse, error)
	DeleteCoinDescription(context.Context, *DeleteCoinDescriptionRequest) (*DeleteCoinDescriptionResponse, error)
	CreateCoinProductInfo(context.Context, *CreateCoinProductInfoRequest) (*CreateCoinProductInfoResponse, error)
	CreateCoinProductInfos(context.Context, *CreateCoinProductInfosRequest) (*CreateCoinProductInfosResponse, error)
	CreateAppCoinProductInfo(context.Context, *CreateAppCoinProductInfoRequest) (*CreateAppCoinProductInfoResponse, error)
	CreateAppCoinProductInfos(context.Context, *CreateAppCoinProductInfosRequest) (*CreateAppCoinProductInfosResponse, error)
	UpdateCoinProductInfo(context.Context, *UpdateCoinProductInfoRequest) (*UpdateCoinProductInfoResponse, error)
	GetCoinProductInfo(context.Context, *GetCoinProductInfoRequest) (*GetCoinProductInfoResponse, error)
	GetCoinProductInfos(context.Context, *GetCoinProductInfosRequest) (*GetCoinProductInfosResponse, error)
	GetCoinProductInfoOnly(context.Context, *GetCoinProductInfoOnlyRequest) (*GetCoinProductInfoOnlyResponse, error)
	GetAppCoinProductInfos(context.Context, *GetAppCoinProductInfosRequest) (*GetAppCoinProductInfosResponse, error)
	GetAppCoinProductInfoOnly(context.Context, *GetAppCoinProductInfoOnlyRequest) (*GetAppCoinProductInfoOnlyResponse, error)
	DeleteCoinProductInfo(context.Context, *DeleteCoinProductInfoRequest) (*DeleteCoinProductInfoResponse, error)
	mustEmbedUnimplementedProjectInfoManagerServer()
}

// UnimplementedProjectInfoManagerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectInfoManagerServer struct {
}

func (UnimplementedProjectInfoManagerServer) Version(context.Context, *emptypb.Empty) (*npool.VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedProjectInfoManagerServer) CreateCoinDescription(context.Context, *CreateCoinDescriptionRequest) (*CreateCoinDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCoinDescription not implemented")
}
func (UnimplementedProjectInfoManagerServer) CreateCoinDescriptions(context.Context, *CreateCoinDescriptionsRequest) (*CreateCoinDescriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCoinDescriptions not implemented")
}
func (UnimplementedProjectInfoManagerServer) CreateAppCoinDescription(context.Context, *CreateAppCoinDescriptionRequest) (*CreateAppCoinDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppCoinDescription not implemented")
}
func (UnimplementedProjectInfoManagerServer) CreateAppCoinDescriptions(context.Context, *CreateAppCoinDescriptionsRequest) (*CreateAppCoinDescriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppCoinDescriptions not implemented")
}
func (UnimplementedProjectInfoManagerServer) UpdateCoinDescription(context.Context, *UpdateCoinDescriptionRequest) (*UpdateCoinDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCoinDescription not implemented")
}
func (UnimplementedProjectInfoManagerServer) GetCoinDescription(context.Context, *GetCoinDescriptionRequest) (*GetCoinDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinDescription not implemented")
}
func (UnimplementedProjectInfoManagerServer) GetCoinDescriptions(context.Context, *GetCoinDescriptionsRequest) (*GetCoinDescriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinDescriptions not implemented")
}
func (UnimplementedProjectInfoManagerServer) GetCoinDescriptionOnly(context.Context, *GetCoinDescriptionOnlyRequest) (*GetCoinDescriptionOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinDescriptionOnly not implemented")
}
func (UnimplementedProjectInfoManagerServer) GetAppCoinDescriptions(context.Context, *GetAppCoinDescriptionsRequest) (*GetAppCoinDescriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppCoinDescriptions not implemented")
}
func (UnimplementedProjectInfoManagerServer) GetAppCoinDescriptionOnly(context.Context, *GetAppCoinDescriptionOnlyRequest) (*GetAppCoinDescriptionOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppCoinDescriptionOnly not implemented")
}
func (UnimplementedProjectInfoManagerServer) DeleteCoinDescription(context.Context, *DeleteCoinDescriptionRequest) (*DeleteCoinDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCoinDescription not implemented")
}
func (UnimplementedProjectInfoManagerServer) CreateCoinProductInfo(context.Context, *CreateCoinProductInfoRequest) (*CreateCoinProductInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCoinProductInfo not implemented")
}
func (UnimplementedProjectInfoManagerServer) CreateCoinProductInfos(context.Context, *CreateCoinProductInfosRequest) (*CreateCoinProductInfosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCoinProductInfos not implemented")
}
func (UnimplementedProjectInfoManagerServer) CreateAppCoinProductInfo(context.Context, *CreateAppCoinProductInfoRequest) (*CreateAppCoinProductInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppCoinProductInfo not implemented")
}
func (UnimplementedProjectInfoManagerServer) CreateAppCoinProductInfos(context.Context, *CreateAppCoinProductInfosRequest) (*CreateAppCoinProductInfosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppCoinProductInfos not implemented")
}
func (UnimplementedProjectInfoManagerServer) UpdateCoinProductInfo(context.Context, *UpdateCoinProductInfoRequest) (*UpdateCoinProductInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCoinProductInfo not implemented")
}
func (UnimplementedProjectInfoManagerServer) GetCoinProductInfo(context.Context, *GetCoinProductInfoRequest) (*GetCoinProductInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinProductInfo not implemented")
}
func (UnimplementedProjectInfoManagerServer) GetCoinProductInfos(context.Context, *GetCoinProductInfosRequest) (*GetCoinProductInfosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinProductInfos not implemented")
}
func (UnimplementedProjectInfoManagerServer) GetCoinProductInfoOnly(context.Context, *GetCoinProductInfoOnlyRequest) (*GetCoinProductInfoOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinProductInfoOnly not implemented")
}
func (UnimplementedProjectInfoManagerServer) GetAppCoinProductInfos(context.Context, *GetAppCoinProductInfosRequest) (*GetAppCoinProductInfosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppCoinProductInfos not implemented")
}
func (UnimplementedProjectInfoManagerServer) GetAppCoinProductInfoOnly(context.Context, *GetAppCoinProductInfoOnlyRequest) (*GetAppCoinProductInfoOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppCoinProductInfoOnly not implemented")
}
func (UnimplementedProjectInfoManagerServer) DeleteCoinProductInfo(context.Context, *DeleteCoinProductInfoRequest) (*DeleteCoinProductInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCoinProductInfo not implemented")
}
func (UnimplementedProjectInfoManagerServer) mustEmbedUnimplementedProjectInfoManagerServer() {}

// UnsafeProjectInfoManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectInfoManagerServer will
// result in compilation errors.
type UnsafeProjectInfoManagerServer interface {
	mustEmbedUnimplementedProjectInfoManagerServer()
}

func RegisterProjectInfoManagerServer(s grpc.ServiceRegistrar, srv ProjectInfoManagerServer) {
	s.RegisterService(&ProjectInfoManager_ServiceDesc, srv)
}

func _ProjectInfoManager_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectInfoManager_Version_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_CreateCoinDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCoinDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).CreateCoinDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectInfoManager_CreateCoinDescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).CreateCoinDescription(ctx, req.(*CreateCoinDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_CreateCoinDescriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCoinDescriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).CreateCoinDescriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectInfoManager_CreateCoinDescriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).CreateCoinDescriptions(ctx, req.(*CreateCoinDescriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_CreateAppCoinDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppCoinDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).CreateAppCoinDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectInfoManager_CreateAppCoinDescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).CreateAppCoinDescription(ctx, req.(*CreateAppCoinDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_CreateAppCoinDescriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppCoinDescriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).CreateAppCoinDescriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectInfoManager_CreateAppCoinDescriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).CreateAppCoinDescriptions(ctx, req.(*CreateAppCoinDescriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_UpdateCoinDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCoinDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).UpdateCoinDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectInfoManager_UpdateCoinDescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).UpdateCoinDescription(ctx, req.(*UpdateCoinDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_GetCoinDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).GetCoinDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectInfoManager_GetCoinDescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).GetCoinDescription(ctx, req.(*GetCoinDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_GetCoinDescriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinDescriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).GetCoinDescriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectInfoManager_GetCoinDescriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).GetCoinDescriptions(ctx, req.(*GetCoinDescriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_GetCoinDescriptionOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinDescriptionOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).GetCoinDescriptionOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectInfoManager_GetCoinDescriptionOnly_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).GetCoinDescriptionOnly(ctx, req.(*GetCoinDescriptionOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_GetAppCoinDescriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppCoinDescriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).GetAppCoinDescriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectInfoManager_GetAppCoinDescriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).GetAppCoinDescriptions(ctx, req.(*GetAppCoinDescriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_GetAppCoinDescriptionOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppCoinDescriptionOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).GetAppCoinDescriptionOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectInfoManager_GetAppCoinDescriptionOnly_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).GetAppCoinDescriptionOnly(ctx, req.(*GetAppCoinDescriptionOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_DeleteCoinDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCoinDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).DeleteCoinDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectInfoManager_DeleteCoinDescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).DeleteCoinDescription(ctx, req.(*DeleteCoinDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_CreateCoinProductInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCoinProductInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).CreateCoinProductInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectInfoManager_CreateCoinProductInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).CreateCoinProductInfo(ctx, req.(*CreateCoinProductInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_CreateCoinProductInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCoinProductInfosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).CreateCoinProductInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectInfoManager_CreateCoinProductInfos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).CreateCoinProductInfos(ctx, req.(*CreateCoinProductInfosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_CreateAppCoinProductInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppCoinProductInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).CreateAppCoinProductInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectInfoManager_CreateAppCoinProductInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).CreateAppCoinProductInfo(ctx, req.(*CreateAppCoinProductInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_CreateAppCoinProductInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppCoinProductInfosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).CreateAppCoinProductInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectInfoManager_CreateAppCoinProductInfos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).CreateAppCoinProductInfos(ctx, req.(*CreateAppCoinProductInfosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_UpdateCoinProductInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCoinProductInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).UpdateCoinProductInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectInfoManager_UpdateCoinProductInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).UpdateCoinProductInfo(ctx, req.(*UpdateCoinProductInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_GetCoinProductInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinProductInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).GetCoinProductInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectInfoManager_GetCoinProductInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).GetCoinProductInfo(ctx, req.(*GetCoinProductInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_GetCoinProductInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinProductInfosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).GetCoinProductInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectInfoManager_GetCoinProductInfos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).GetCoinProductInfos(ctx, req.(*GetCoinProductInfosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_GetCoinProductInfoOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinProductInfoOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).GetCoinProductInfoOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectInfoManager_GetCoinProductInfoOnly_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).GetCoinProductInfoOnly(ctx, req.(*GetCoinProductInfoOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_GetAppCoinProductInfos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppCoinProductInfosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).GetAppCoinProductInfos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectInfoManager_GetAppCoinProductInfos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).GetAppCoinProductInfos(ctx, req.(*GetAppCoinProductInfosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_GetAppCoinProductInfoOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppCoinProductInfoOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).GetAppCoinProductInfoOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectInfoManager_GetAppCoinProductInfoOnly_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).GetAppCoinProductInfoOnly(ctx, req.(*GetAppCoinProductInfoOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_DeleteCoinProductInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCoinProductInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).DeleteCoinProductInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectInfoManager_DeleteCoinProductInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).DeleteCoinProductInfo(ctx, req.(*DeleteCoinProductInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectInfoManager_ServiceDesc is the grpc.ServiceDesc for ProjectInfoManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectInfoManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "project.info.manager.v1.ProjectInfoManager",
	HandlerType: (*ProjectInfoManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _ProjectInfoManager_Version_Handler,
		},
		{
			MethodName: "CreateCoinDescription",
			Handler:    _ProjectInfoManager_CreateCoinDescription_Handler,
		},
		{
			MethodName: "CreateCoinDescriptions",
			Handler:    _ProjectInfoManager_CreateCoinDescriptions_Handler,
		},
		{
			MethodName: "CreateAppCoinDescription",
			Handler:    _ProjectInfoManager_CreateAppCoinDescription_Handler,
		},
		{
			MethodName: "CreateAppCoinDescriptions",
			Handler:    _ProjectInfoManager_CreateAppCoinDescriptions_Handler,
		},
		{
			MethodName: "UpdateCoinDescription",
			Handler:    _ProjectInfoManager_UpdateCoinDescription_Handler,
		},
		{
			MethodName: "GetCoinDescription",
			Handler:    _ProjectInfoManager_GetCoinDescription_Handler,
		},
		{
			MethodName: "GetCoinDescriptions",
			Handler:    _ProjectInfoManager_GetCoinDescriptions_Handler,
		},
		{
			MethodName: "GetCoinDescriptionOnly",
			Handler:    _ProjectInfoManager_GetCoinDescriptionOnly_Handler,
		},
		{
			MethodName: "GetAppCoinDescriptions",
			Handler:    _ProjectInfoManager_GetAppCoinDescriptions_Handler,
		},
		{
			MethodName: "GetAppCoinDescriptionOnly",
			Handler:    _ProjectInfoManager_GetAppCoinDescriptionOnly_Handler,
		},
		{
			MethodName: "DeleteCoinDescription",
			Handler:    _ProjectInfoManager_DeleteCoinDescription_Handler,
		},
		{
			MethodName: "CreateCoinProductInfo",
			Handler:    _ProjectInfoManager_CreateCoinProductInfo_Handler,
		},
		{
			MethodName: "CreateCoinProductInfos",
			Handler:    _ProjectInfoManager_CreateCoinProductInfos_Handler,
		},
		{
			MethodName: "CreateAppCoinProductInfo",
			Handler:    _ProjectInfoManager_CreateAppCoinProductInfo_Handler,
		},
		{
			MethodName: "CreateAppCoinProductInfos",
			Handler:    _ProjectInfoManager_CreateAppCoinProductInfos_Handler,
		},
		{
			MethodName: "UpdateCoinProductInfo",
			Handler:    _ProjectInfoManager_UpdateCoinProductInfo_Handler,
		},
		{
			MethodName: "GetCoinProductInfo",
			Handler:    _ProjectInfoManager_GetCoinProductInfo_Handler,
		},
		{
			MethodName: "GetCoinProductInfos",
			Handler:    _ProjectInfoManager_GetCoinProductInfos_Handler,
		},
		{
			MethodName: "GetCoinProductInfoOnly",
			Handler:    _ProjectInfoManager_GetCoinProductInfoOnly_Handler,
		},
		{
			MethodName: "GetAppCoinProductInfos",
			Handler:    _ProjectInfoManager_GetAppCoinProductInfos_Handler,
		},
		{
			MethodName: "GetAppCoinProductInfoOnly",
			Handler:    _ProjectInfoManager_GetAppCoinProductInfoOnly_Handler,
		},
		{
			MethodName: "DeleteCoinProductInfo",
			Handler:    _ProjectInfoManager_DeleteCoinProductInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/projectinfomgr/projectinfomgr.proto",
}
