// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/projectinfomgr/projectinfomgr.proto

package project_info_manager

import (
	context "context"
	npool "github.com/NpoolPlatform/message/npool"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProjectInfoManagerClient is the client API for ProjectInfoManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectInfoManagerClient interface {
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*npool.VersionResponse, error)
	CreateCoinDescription(ctx context.Context, in *CreateCoinDescriptionRequest, opts ...grpc.CallOption) (*CreateCoinDescriptionResponse, error)
	CreateCoinDescriptions(ctx context.Context, in *CreateCoinDescriptionsRequest, opts ...grpc.CallOption) (*CreateCoinDescriptionsResponse, error)
	CreateAppCoinDescription(ctx context.Context, in *CreateAppCoinDescriptionRequest, opts ...grpc.CallOption) (*CreateAppCoinDescriptionResponse, error)
	CreateAppCoinDescriptions(ctx context.Context, in *CreateAppCoinDescriptionsRequest, opts ...grpc.CallOption) (*CreateAppCoinDescriptionsResponse, error)
	UpdateCoinDescription(ctx context.Context, in *UpdateCoinDescriptionRequest, opts ...grpc.CallOption) (*UpdateCoinDescriptionResponse, error)
	GetCoinDescription(ctx context.Context, in *GetCoinDescriptionRequest, opts ...grpc.CallOption) (*GetCoinDescriptionResponse, error)
	GetCoinDescriptions(ctx context.Context, in *GetCoinDescriptionsRequest, opts ...grpc.CallOption) (*GetCoinDescriptionsResponse, error)
	GetCoinDescriptionOnly(ctx context.Context, in *GetCoinDescriptionOnlyRequest, opts ...grpc.CallOption) (*GetCoinDescriptionOnlyResponse, error)
	GetAppCoinDescriptions(ctx context.Context, in *GetAppCoinDescriptionsRequest, opts ...grpc.CallOption) (*GetAppCoinDescriptionsResponse, error)
	GetAppCoinDescriptionOnly(ctx context.Context, in *GetAppCoinDescriptionOnlyRequest, opts ...grpc.CallOption) (*GetAppCoinDescriptionOnlyResponse, error)
	DeleteCoinDescription(ctx context.Context, in *DeleteCoinDescriptionRequest, opts ...grpc.CallOption) (*DeleteCoinDescriptionResponse, error)
	CreateCoinProduct(ctx context.Context, in *CreateCoinProductRequest, opts ...grpc.CallOption) (*CreateCoinProductResponse, error)
	CreateCoinProducts(ctx context.Context, in *CreateCoinProductsRequest, opts ...grpc.CallOption) (*CreateCoinProductsResponse, error)
	CreateAppCoinProduct(ctx context.Context, in *CreateAppCoinProductRequest, opts ...grpc.CallOption) (*CreateAppCoinProductResponse, error)
	CreateAppCoinProducts(ctx context.Context, in *CreateAppCoinProductsRequest, opts ...grpc.CallOption) (*CreateAppCoinProductsResponse, error)
	UpdateCoinProduct(ctx context.Context, in *UpdateCoinProductRequest, opts ...grpc.CallOption) (*UpdateCoinProductResponse, error)
	GetCoinProduct(ctx context.Context, in *GetCoinProductRequest, opts ...grpc.CallOption) (*GetCoinProductResponse, error)
	GetCoinProducts(ctx context.Context, in *GetCoinProductsRequest, opts ...grpc.CallOption) (*GetCoinProductsResponse, error)
	GetCoinProductOnly(ctx context.Context, in *GetCoinProductOnlyRequest, opts ...grpc.CallOption) (*GetCoinProductOnlyResponse, error)
	GetAppCoinProducts(ctx context.Context, in *GetAppCoinProductsRequest, opts ...grpc.CallOption) (*GetAppCoinProductsResponse, error)
	GetAppCoinProductOnly(ctx context.Context, in *GetAppCoinProductOnlyRequest, opts ...grpc.CallOption) (*GetAppCoinProductOnlyResponse, error)
	DeleteCoinProduct(ctx context.Context, in *DeleteCoinProductRequest, opts ...grpc.CallOption) (*DeleteCoinProductResponse, error)
}

type projectInfoManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectInfoManagerClient(cc grpc.ClientConnInterface) ProjectInfoManagerClient {
	return &projectInfoManagerClient{cc}
}

func (c *projectInfoManagerClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*npool.VersionResponse, error) {
	out := new(npool.VersionResponse)
	err := c.cc.Invoke(ctx, "/project.info.manager.v1.ProjectInfoManager/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) CreateCoinDescription(ctx context.Context, in *CreateCoinDescriptionRequest, opts ...grpc.CallOption) (*CreateCoinDescriptionResponse, error) {
	out := new(CreateCoinDescriptionResponse)
	err := c.cc.Invoke(ctx, "/project.info.manager.v1.ProjectInfoManager/CreateCoinDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) CreateCoinDescriptions(ctx context.Context, in *CreateCoinDescriptionsRequest, opts ...grpc.CallOption) (*CreateCoinDescriptionsResponse, error) {
	out := new(CreateCoinDescriptionsResponse)
	err := c.cc.Invoke(ctx, "/project.info.manager.v1.ProjectInfoManager/CreateCoinDescriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) CreateAppCoinDescription(ctx context.Context, in *CreateAppCoinDescriptionRequest, opts ...grpc.CallOption) (*CreateAppCoinDescriptionResponse, error) {
	out := new(CreateAppCoinDescriptionResponse)
	err := c.cc.Invoke(ctx, "/project.info.manager.v1.ProjectInfoManager/CreateAppCoinDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) CreateAppCoinDescriptions(ctx context.Context, in *CreateAppCoinDescriptionsRequest, opts ...grpc.CallOption) (*CreateAppCoinDescriptionsResponse, error) {
	out := new(CreateAppCoinDescriptionsResponse)
	err := c.cc.Invoke(ctx, "/project.info.manager.v1.ProjectInfoManager/CreateAppCoinDescriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) UpdateCoinDescription(ctx context.Context, in *UpdateCoinDescriptionRequest, opts ...grpc.CallOption) (*UpdateCoinDescriptionResponse, error) {
	out := new(UpdateCoinDescriptionResponse)
	err := c.cc.Invoke(ctx, "/project.info.manager.v1.ProjectInfoManager/UpdateCoinDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) GetCoinDescription(ctx context.Context, in *GetCoinDescriptionRequest, opts ...grpc.CallOption) (*GetCoinDescriptionResponse, error) {
	out := new(GetCoinDescriptionResponse)
	err := c.cc.Invoke(ctx, "/project.info.manager.v1.ProjectInfoManager/GetCoinDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) GetCoinDescriptions(ctx context.Context, in *GetCoinDescriptionsRequest, opts ...grpc.CallOption) (*GetCoinDescriptionsResponse, error) {
	out := new(GetCoinDescriptionsResponse)
	err := c.cc.Invoke(ctx, "/project.info.manager.v1.ProjectInfoManager/GetCoinDescriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) GetCoinDescriptionOnly(ctx context.Context, in *GetCoinDescriptionOnlyRequest, opts ...grpc.CallOption) (*GetCoinDescriptionOnlyResponse, error) {
	out := new(GetCoinDescriptionOnlyResponse)
	err := c.cc.Invoke(ctx, "/project.info.manager.v1.ProjectInfoManager/GetCoinDescriptionOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) GetAppCoinDescriptions(ctx context.Context, in *GetAppCoinDescriptionsRequest, opts ...grpc.CallOption) (*GetAppCoinDescriptionsResponse, error) {
	out := new(GetAppCoinDescriptionsResponse)
	err := c.cc.Invoke(ctx, "/project.info.manager.v1.ProjectInfoManager/GetAppCoinDescriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) GetAppCoinDescriptionOnly(ctx context.Context, in *GetAppCoinDescriptionOnlyRequest, opts ...grpc.CallOption) (*GetAppCoinDescriptionOnlyResponse, error) {
	out := new(GetAppCoinDescriptionOnlyResponse)
	err := c.cc.Invoke(ctx, "/project.info.manager.v1.ProjectInfoManager/GetAppCoinDescriptionOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) DeleteCoinDescription(ctx context.Context, in *DeleteCoinDescriptionRequest, opts ...grpc.CallOption) (*DeleteCoinDescriptionResponse, error) {
	out := new(DeleteCoinDescriptionResponse)
	err := c.cc.Invoke(ctx, "/project.info.manager.v1.ProjectInfoManager/DeleteCoinDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) CreateCoinProduct(ctx context.Context, in *CreateCoinProductRequest, opts ...grpc.CallOption) (*CreateCoinProductResponse, error) {
	out := new(CreateCoinProductResponse)
	err := c.cc.Invoke(ctx, "/project.info.manager.v1.ProjectInfoManager/CreateCoinProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) CreateCoinProducts(ctx context.Context, in *CreateCoinProductsRequest, opts ...grpc.CallOption) (*CreateCoinProductsResponse, error) {
	out := new(CreateCoinProductsResponse)
	err := c.cc.Invoke(ctx, "/project.info.manager.v1.ProjectInfoManager/CreateCoinProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) CreateAppCoinProduct(ctx context.Context, in *CreateAppCoinProductRequest, opts ...grpc.CallOption) (*CreateAppCoinProductResponse, error) {
	out := new(CreateAppCoinProductResponse)
	err := c.cc.Invoke(ctx, "/project.info.manager.v1.ProjectInfoManager/CreateAppCoinProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) CreateAppCoinProducts(ctx context.Context, in *CreateAppCoinProductsRequest, opts ...grpc.CallOption) (*CreateAppCoinProductsResponse, error) {
	out := new(CreateAppCoinProductsResponse)
	err := c.cc.Invoke(ctx, "/project.info.manager.v1.ProjectInfoManager/CreateAppCoinProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) UpdateCoinProduct(ctx context.Context, in *UpdateCoinProductRequest, opts ...grpc.CallOption) (*UpdateCoinProductResponse, error) {
	out := new(UpdateCoinProductResponse)
	err := c.cc.Invoke(ctx, "/project.info.manager.v1.ProjectInfoManager/UpdateCoinProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) GetCoinProduct(ctx context.Context, in *GetCoinProductRequest, opts ...grpc.CallOption) (*GetCoinProductResponse, error) {
	out := new(GetCoinProductResponse)
	err := c.cc.Invoke(ctx, "/project.info.manager.v1.ProjectInfoManager/GetCoinProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) GetCoinProducts(ctx context.Context, in *GetCoinProductsRequest, opts ...grpc.CallOption) (*GetCoinProductsResponse, error) {
	out := new(GetCoinProductsResponse)
	err := c.cc.Invoke(ctx, "/project.info.manager.v1.ProjectInfoManager/GetCoinProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) GetCoinProductOnly(ctx context.Context, in *GetCoinProductOnlyRequest, opts ...grpc.CallOption) (*GetCoinProductOnlyResponse, error) {
	out := new(GetCoinProductOnlyResponse)
	err := c.cc.Invoke(ctx, "/project.info.manager.v1.ProjectInfoManager/GetCoinProductOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) GetAppCoinProducts(ctx context.Context, in *GetAppCoinProductsRequest, opts ...grpc.CallOption) (*GetAppCoinProductsResponse, error) {
	out := new(GetAppCoinProductsResponse)
	err := c.cc.Invoke(ctx, "/project.info.manager.v1.ProjectInfoManager/GetAppCoinProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) GetAppCoinProductOnly(ctx context.Context, in *GetAppCoinProductOnlyRequest, opts ...grpc.CallOption) (*GetAppCoinProductOnlyResponse, error) {
	out := new(GetAppCoinProductOnlyResponse)
	err := c.cc.Invoke(ctx, "/project.info.manager.v1.ProjectInfoManager/GetAppCoinProductOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) DeleteCoinProduct(ctx context.Context, in *DeleteCoinProductRequest, opts ...grpc.CallOption) (*DeleteCoinProductResponse, error) {
	out := new(DeleteCoinProductResponse)
	err := c.cc.Invoke(ctx, "/project.info.manager.v1.ProjectInfoManager/DeleteCoinProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectInfoManagerServer is the server API for ProjectInfoManager service.
// All implementations must embed UnimplementedProjectInfoManagerServer
// for forward compatibility
type ProjectInfoManagerServer interface {
	Version(context.Context, *emptypb.Empty) (*npool.VersionResponse, error)
	CreateCoinDescription(context.Context, *CreateCoinDescriptionRequest) (*CreateCoinDescriptionResponse, error)
	CreateCoinDescriptions(context.Context, *CreateCoinDescriptionsRequest) (*CreateCoinDescriptionsResponse, error)
	CreateAppCoinDescription(context.Context, *CreateAppCoinDescriptionRequest) (*CreateAppCoinDescriptionResponse, error)
	CreateAppCoinDescriptions(context.Context, *CreateAppCoinDescriptionsRequest) (*CreateAppCoinDescriptionsResponse, error)
	UpdateCoinDescription(context.Context, *UpdateCoinDescriptionRequest) (*UpdateCoinDescriptionResponse, error)
	GetCoinDescription(context.Context, *GetCoinDescriptionRequest) (*GetCoinDescriptionResponse, error)
	GetCoinDescriptions(context.Context, *GetCoinDescriptionsRequest) (*GetCoinDescriptionsResponse, error)
	GetCoinDescriptionOnly(context.Context, *GetCoinDescriptionOnlyRequest) (*GetCoinDescriptionOnlyResponse, error)
	GetAppCoinDescriptions(context.Context, *GetAppCoinDescriptionsRequest) (*GetAppCoinDescriptionsResponse, error)
	GetAppCoinDescriptionOnly(context.Context, *GetAppCoinDescriptionOnlyRequest) (*GetAppCoinDescriptionOnlyResponse, error)
	DeleteCoinDescription(context.Context, *DeleteCoinDescriptionRequest) (*DeleteCoinDescriptionResponse, error)
	CreateCoinProduct(context.Context, *CreateCoinProductRequest) (*CreateCoinProductResponse, error)
	CreateCoinProducts(context.Context, *CreateCoinProductsRequest) (*CreateCoinProductsResponse, error)
	CreateAppCoinProduct(context.Context, *CreateAppCoinProductRequest) (*CreateAppCoinProductResponse, error)
	CreateAppCoinProducts(context.Context, *CreateAppCoinProductsRequest) (*CreateAppCoinProductsResponse, error)
	UpdateCoinProduct(context.Context, *UpdateCoinProductRequest) (*UpdateCoinProductResponse, error)
	GetCoinProduct(context.Context, *GetCoinProductRequest) (*GetCoinProductResponse, error)
	GetCoinProducts(context.Context, *GetCoinProductsRequest) (*GetCoinProductsResponse, error)
	GetCoinProductOnly(context.Context, *GetCoinProductOnlyRequest) (*GetCoinProductOnlyResponse, error)
	GetAppCoinProducts(context.Context, *GetAppCoinProductsRequest) (*GetAppCoinProductsResponse, error)
	GetAppCoinProductOnly(context.Context, *GetAppCoinProductOnlyRequest) (*GetAppCoinProductOnlyResponse, error)
	DeleteCoinProduct(context.Context, *DeleteCoinProductRequest) (*DeleteCoinProductResponse, error)
	mustEmbedUnimplementedProjectInfoManagerServer()
}

// UnimplementedProjectInfoManagerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectInfoManagerServer struct {
}

func (UnimplementedProjectInfoManagerServer) Version(context.Context, *emptypb.Empty) (*npool.VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedProjectInfoManagerServer) CreateCoinDescription(context.Context, *CreateCoinDescriptionRequest) (*CreateCoinDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCoinDescription not implemented")
}
func (UnimplementedProjectInfoManagerServer) CreateCoinDescriptions(context.Context, *CreateCoinDescriptionsRequest) (*CreateCoinDescriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCoinDescriptions not implemented")
}
func (UnimplementedProjectInfoManagerServer) CreateAppCoinDescription(context.Context, *CreateAppCoinDescriptionRequest) (*CreateAppCoinDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppCoinDescription not implemented")
}
func (UnimplementedProjectInfoManagerServer) CreateAppCoinDescriptions(context.Context, *CreateAppCoinDescriptionsRequest) (*CreateAppCoinDescriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppCoinDescriptions not implemented")
}
func (UnimplementedProjectInfoManagerServer) UpdateCoinDescription(context.Context, *UpdateCoinDescriptionRequest) (*UpdateCoinDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCoinDescription not implemented")
}
func (UnimplementedProjectInfoManagerServer) GetCoinDescription(context.Context, *GetCoinDescriptionRequest) (*GetCoinDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinDescription not implemented")
}
func (UnimplementedProjectInfoManagerServer) GetCoinDescriptions(context.Context, *GetCoinDescriptionsRequest) (*GetCoinDescriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinDescriptions not implemented")
}
func (UnimplementedProjectInfoManagerServer) GetCoinDescriptionOnly(context.Context, *GetCoinDescriptionOnlyRequest) (*GetCoinDescriptionOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinDescriptionOnly not implemented")
}
func (UnimplementedProjectInfoManagerServer) GetAppCoinDescriptions(context.Context, *GetAppCoinDescriptionsRequest) (*GetAppCoinDescriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppCoinDescriptions not implemented")
}
func (UnimplementedProjectInfoManagerServer) GetAppCoinDescriptionOnly(context.Context, *GetAppCoinDescriptionOnlyRequest) (*GetAppCoinDescriptionOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppCoinDescriptionOnly not implemented")
}
func (UnimplementedProjectInfoManagerServer) DeleteCoinDescription(context.Context, *DeleteCoinDescriptionRequest) (*DeleteCoinDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCoinDescription not implemented")
}
func (UnimplementedProjectInfoManagerServer) CreateCoinProduct(context.Context, *CreateCoinProductRequest) (*CreateCoinProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCoinProduct not implemented")
}
func (UnimplementedProjectInfoManagerServer) CreateCoinProducts(context.Context, *CreateCoinProductsRequest) (*CreateCoinProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCoinProducts not implemented")
}
func (UnimplementedProjectInfoManagerServer) CreateAppCoinProduct(context.Context, *CreateAppCoinProductRequest) (*CreateAppCoinProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppCoinProduct not implemented")
}
func (UnimplementedProjectInfoManagerServer) CreateAppCoinProducts(context.Context, *CreateAppCoinProductsRequest) (*CreateAppCoinProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppCoinProducts not implemented")
}
func (UnimplementedProjectInfoManagerServer) UpdateCoinProduct(context.Context, *UpdateCoinProductRequest) (*UpdateCoinProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCoinProduct not implemented")
}
func (UnimplementedProjectInfoManagerServer) GetCoinProduct(context.Context, *GetCoinProductRequest) (*GetCoinProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinProduct not implemented")
}
func (UnimplementedProjectInfoManagerServer) GetCoinProducts(context.Context, *GetCoinProductsRequest) (*GetCoinProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinProducts not implemented")
}
func (UnimplementedProjectInfoManagerServer) GetCoinProductOnly(context.Context, *GetCoinProductOnlyRequest) (*GetCoinProductOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinProductOnly not implemented")
}
func (UnimplementedProjectInfoManagerServer) GetAppCoinProducts(context.Context, *GetAppCoinProductsRequest) (*GetAppCoinProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppCoinProducts not implemented")
}
func (UnimplementedProjectInfoManagerServer) GetAppCoinProductOnly(context.Context, *GetAppCoinProductOnlyRequest) (*GetAppCoinProductOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppCoinProductOnly not implemented")
}
func (UnimplementedProjectInfoManagerServer) DeleteCoinProduct(context.Context, *DeleteCoinProductRequest) (*DeleteCoinProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCoinProduct not implemented")
}
func (UnimplementedProjectInfoManagerServer) mustEmbedUnimplementedProjectInfoManagerServer() {}

// UnsafeProjectInfoManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectInfoManagerServer will
// result in compilation errors.
type UnsafeProjectInfoManagerServer interface {
	mustEmbedUnimplementedProjectInfoManagerServer()
}

func RegisterProjectInfoManagerServer(s grpc.ServiceRegistrar, srv ProjectInfoManagerServer) {
	s.RegisterService(&ProjectInfoManager_ServiceDesc, srv)
}

func _ProjectInfoManager_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.info.manager.v1.ProjectInfoManager/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_CreateCoinDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCoinDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).CreateCoinDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.info.manager.v1.ProjectInfoManager/CreateCoinDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).CreateCoinDescription(ctx, req.(*CreateCoinDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_CreateCoinDescriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCoinDescriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).CreateCoinDescriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.info.manager.v1.ProjectInfoManager/CreateCoinDescriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).CreateCoinDescriptions(ctx, req.(*CreateCoinDescriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_CreateAppCoinDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppCoinDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).CreateAppCoinDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.info.manager.v1.ProjectInfoManager/CreateAppCoinDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).CreateAppCoinDescription(ctx, req.(*CreateAppCoinDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_CreateAppCoinDescriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppCoinDescriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).CreateAppCoinDescriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.info.manager.v1.ProjectInfoManager/CreateAppCoinDescriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).CreateAppCoinDescriptions(ctx, req.(*CreateAppCoinDescriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_UpdateCoinDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCoinDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).UpdateCoinDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.info.manager.v1.ProjectInfoManager/UpdateCoinDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).UpdateCoinDescription(ctx, req.(*UpdateCoinDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_GetCoinDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).GetCoinDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.info.manager.v1.ProjectInfoManager/GetCoinDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).GetCoinDescription(ctx, req.(*GetCoinDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_GetCoinDescriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinDescriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).GetCoinDescriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.info.manager.v1.ProjectInfoManager/GetCoinDescriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).GetCoinDescriptions(ctx, req.(*GetCoinDescriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_GetCoinDescriptionOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinDescriptionOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).GetCoinDescriptionOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.info.manager.v1.ProjectInfoManager/GetCoinDescriptionOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).GetCoinDescriptionOnly(ctx, req.(*GetCoinDescriptionOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_GetAppCoinDescriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppCoinDescriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).GetAppCoinDescriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.info.manager.v1.ProjectInfoManager/GetAppCoinDescriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).GetAppCoinDescriptions(ctx, req.(*GetAppCoinDescriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_GetAppCoinDescriptionOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppCoinDescriptionOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).GetAppCoinDescriptionOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.info.manager.v1.ProjectInfoManager/GetAppCoinDescriptionOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).GetAppCoinDescriptionOnly(ctx, req.(*GetAppCoinDescriptionOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_DeleteCoinDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCoinDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).DeleteCoinDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.info.manager.v1.ProjectInfoManager/DeleteCoinDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).DeleteCoinDescription(ctx, req.(*DeleteCoinDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_CreateCoinProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCoinProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).CreateCoinProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.info.manager.v1.ProjectInfoManager/CreateCoinProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).CreateCoinProduct(ctx, req.(*CreateCoinProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_CreateCoinProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCoinProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).CreateCoinProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.info.manager.v1.ProjectInfoManager/CreateCoinProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).CreateCoinProducts(ctx, req.(*CreateCoinProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_CreateAppCoinProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppCoinProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).CreateAppCoinProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.info.manager.v1.ProjectInfoManager/CreateAppCoinProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).CreateAppCoinProduct(ctx, req.(*CreateAppCoinProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_CreateAppCoinProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppCoinProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).CreateAppCoinProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.info.manager.v1.ProjectInfoManager/CreateAppCoinProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).CreateAppCoinProducts(ctx, req.(*CreateAppCoinProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_UpdateCoinProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCoinProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).UpdateCoinProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.info.manager.v1.ProjectInfoManager/UpdateCoinProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).UpdateCoinProduct(ctx, req.(*UpdateCoinProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_GetCoinProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).GetCoinProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.info.manager.v1.ProjectInfoManager/GetCoinProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).GetCoinProduct(ctx, req.(*GetCoinProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_GetCoinProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).GetCoinProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.info.manager.v1.ProjectInfoManager/GetCoinProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).GetCoinProducts(ctx, req.(*GetCoinProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_GetCoinProductOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinProductOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).GetCoinProductOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.info.manager.v1.ProjectInfoManager/GetCoinProductOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).GetCoinProductOnly(ctx, req.(*GetCoinProductOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_GetAppCoinProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppCoinProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).GetAppCoinProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.info.manager.v1.ProjectInfoManager/GetAppCoinProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).GetAppCoinProducts(ctx, req.(*GetAppCoinProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_GetAppCoinProductOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppCoinProductOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).GetAppCoinProductOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.info.manager.v1.ProjectInfoManager/GetAppCoinProductOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).GetAppCoinProductOnly(ctx, req.(*GetAppCoinProductOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_DeleteCoinProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCoinProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).DeleteCoinProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.info.manager.v1.ProjectInfoManager/DeleteCoinProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).DeleteCoinProduct(ctx, req.(*DeleteCoinProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectInfoManager_ServiceDesc is the grpc.ServiceDesc for ProjectInfoManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectInfoManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "project.info.manager.v1.ProjectInfoManager",
	HandlerType: (*ProjectInfoManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _ProjectInfoManager_Version_Handler,
		},
		{
			MethodName: "CreateCoinDescription",
			Handler:    _ProjectInfoManager_CreateCoinDescription_Handler,
		},
		{
			MethodName: "CreateCoinDescriptions",
			Handler:    _ProjectInfoManager_CreateCoinDescriptions_Handler,
		},
		{
			MethodName: "CreateAppCoinDescription",
			Handler:    _ProjectInfoManager_CreateAppCoinDescription_Handler,
		},
		{
			MethodName: "CreateAppCoinDescriptions",
			Handler:    _ProjectInfoManager_CreateAppCoinDescriptions_Handler,
		},
		{
			MethodName: "UpdateCoinDescription",
			Handler:    _ProjectInfoManager_UpdateCoinDescription_Handler,
		},
		{
			MethodName: "GetCoinDescription",
			Handler:    _ProjectInfoManager_GetCoinDescription_Handler,
		},
		{
			MethodName: "GetCoinDescriptions",
			Handler:    _ProjectInfoManager_GetCoinDescriptions_Handler,
		},
		{
			MethodName: "GetCoinDescriptionOnly",
			Handler:    _ProjectInfoManager_GetCoinDescriptionOnly_Handler,
		},
		{
			MethodName: "GetAppCoinDescriptions",
			Handler:    _ProjectInfoManager_GetAppCoinDescriptions_Handler,
		},
		{
			MethodName: "GetAppCoinDescriptionOnly",
			Handler:    _ProjectInfoManager_GetAppCoinDescriptionOnly_Handler,
		},
		{
			MethodName: "DeleteCoinDescription",
			Handler:    _ProjectInfoManager_DeleteCoinDescription_Handler,
		},
		{
			MethodName: "CreateCoinProduct",
			Handler:    _ProjectInfoManager_CreateCoinProduct_Handler,
		},
		{
			MethodName: "CreateCoinProducts",
			Handler:    _ProjectInfoManager_CreateCoinProducts_Handler,
		},
		{
			MethodName: "CreateAppCoinProduct",
			Handler:    _ProjectInfoManager_CreateAppCoinProduct_Handler,
		},
		{
			MethodName: "CreateAppCoinProducts",
			Handler:    _ProjectInfoManager_CreateAppCoinProducts_Handler,
		},
		{
			MethodName: "UpdateCoinProduct",
			Handler:    _ProjectInfoManager_UpdateCoinProduct_Handler,
		},
		{
			MethodName: "GetCoinProduct",
			Handler:    _ProjectInfoManager_GetCoinProduct_Handler,
		},
		{
			MethodName: "GetCoinProducts",
			Handler:    _ProjectInfoManager_GetCoinProducts_Handler,
		},
		{
			MethodName: "GetCoinProductOnly",
			Handler:    _ProjectInfoManager_GetCoinProductOnly_Handler,
		},
		{
			MethodName: "GetAppCoinProducts",
			Handler:    _ProjectInfoManager_GetAppCoinProducts_Handler,
		},
		{
			MethodName: "GetAppCoinProductOnly",
			Handler:    _ProjectInfoManager_GetAppCoinProductOnly_Handler,
		},
		{
			MethodName: "DeleteCoinProduct",
			Handler:    _ProjectInfoManager_DeleteCoinProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/projectinfomgr/projectinfomgr.proto",
}
