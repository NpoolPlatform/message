syntax = "proto3";

package verification.door.v1;

option go_package = "github.com/NpoolPlatform/message/npool/verification";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "npool/npool.proto";

// Service Name
service VerificationDoor {
    // Method Version
    rpc Version (google.protobuf.Empty) returns (npool.v1.VersionResponse){
        option (google.api.http) = {
            post: "/version"
            body: "*"
        };
    };
    // get google authentication qr code url
    rpc GetQRcodeURL (GetQRcodeURLRequest) returns (GetQRcodeURLResponse) {
        option (google.api.http) = {
            post: "/v1/get/qrcode/url"
            body: "*"
        };
    };
    // verify user google authentication(user's input code)
    rpc VerifyGoogleAuth (VerifyGoogleAuthRequest) returns (VerifyGoogleAuthResponse) {
        option (google.api.http) = {
            post: "/v1/verify/google/auth"
            body: "*"
        };
    };
    // delete user google authentication record
    rpc DeleteUserGoogleAuth (DeleteUserGoogleAuthRequest) returns (DeleteUserGoogleAuthResponse) {
        option (google.api.http) = {
            post: "/v1/delete/user/google/auth"
            body: "*"
        };
    };
    // send email to user
    rpc SendEmail (SendEmailRequest) returns (SendEmailResponse) {
        option (google.api.http) = {
            post: "/v1/send/email"
            body: "*"
        };
    };
    // send sms to user(todo......)
    rpc SendSms (SendSmsRequest) returns (SendSmsResponse) {
        option (google.api.http) = {
            post: "/v1/send/sms"
            body: "*"
        };
    };
    // verify code with user id.
    rpc VerifyCodeWithUserID (VerifyCodeWithUserIDRequest) returns (VerifyCodeWithUserIDResponse) {
        option (google.api.http) = {
            post: "/v1/verify/code/with/userid"
            body: "*"
        };
    };
    // verify code user input. (can verify email code and sms code, verify sms code is todo......)
    rpc VerifyCode (VerifyCodeRequest) returns (VerifyCodeResponse) {
        option (google.api.http) = {
            post: "/v1/verify/code"
            body: "*"
        };
    };
    // verify google recaptcha.
    rpc VerifyGoogleRecaptcha (VerifyGoogleRecaptchaRequest) returns (VerifyGoogleRecaptchaResponse) {
        option (google.api.http) = {
            post: "/v1/verify/google/recaptcha"
            body: "*"
        };
    };
    // get captcher imgine url
    rpc GetCaptcherImg (GetCaptcherImgRequest) returns (GetCaptcherImgResponse) {
        option (google.api.http) = {
            post: "/v1/get/captcher/img"
            body: "*"
        };
    };
    // verify captcher input
    rpc VerifyCaptcher (VerifyCaptcherRequest) returns (VerifyCaptcherResponse) {
        option (google.api.http) = {
            post: "/v1/verify/captcher"
            body: "*"
        };
    };
    // Send user site contact email
    rpc SendUserSiteContactEmail (SendUserSiteContactEmailRequest) returns (SendUserSiteContactEmailResponse) {
        option (google.api.http) = {
            post: "/v1/send/user/site/contact/email"
            body: "*"
        };
    };
}

// request body and response
message GetQRcodeURLRequest {
    string Username = 10;
    string UserID = 20;
    string AppID = 30;
}

message QRCodeInfo {
    string CodeURL = 10;
    string Secret = 20;
}

message GetQRcodeURLResponse {
    QRCodeInfo Info = 10;
}

message VerifyGoogleAuthRequest {
    string UserID = 10;
    string Code = 20;
    string AppID = 30;
}

message VerifyGoogleAuthResponse {
    string Info = 10;
}

message DeleteUserGoogleAuthRequest {
    string UserID = 10;
    string AppID = 20;
}

message DeleteUserGoogleAuthResponse {
    string Info = 10;
}

message SendEmailRequest {
    string AppID = 10;
    string Email = 20;
    string Intention = 30;
    string Lang = 40;
    string Username = 50;
}

message SendEmailResponse {
    string Info = 10;
}

message SendSmsRequest {
    string AppID = 10;
    string Phone = 20;
    string Lang = 30;
    string Intention = 40;
}

message SendSmsResponse {
    string Info = 10;
}

message VerifyCodeRequest {
    string Param = 10;
    string Code = 20;
    string VerifyType = 30;
    string AppID = 40;
}

message VerifyCodeResponse {
    string Info = 10;
}

message VerifyCodeWithUserIDRequest {
    string UserID = 10;
    string Param = 20;
    string Code = 30;
    string VerifyType = 40;
    string AppID = 50;
}

message VerifyCodeWithUserIDResponse {
    string Info = 10;
}

message VerifyGoogleRecaptchaRequest {
    string Response = 10;
}

message VerifyGoogleRecaptchaResponse {
    bool Info = 10;
}

message GetCaptcherImgRequest {
    string AppID = 10;
    string UserID = 20;
}

message CaptcherResp {
    string ID = 10;
    string Base64URL = 20;
}

message GetCaptcherImgResponse {
    CaptcherResp Info = 10;
}

message VerifyCaptcherRequest {
    string ID = 10;
    string Input = 20;
}

message VerifyCaptcherResponse {
    string Info = 10;
}

message SendUserSiteContactEmailRequest {
    string AppID = 10;
    string From = 20;
    string To = 30;
    string Text = 40;
    string Subject = 50;
    string Username = 60;
}

message SendUserSiteContactEmailResponse {
    string Info = 10;
}
