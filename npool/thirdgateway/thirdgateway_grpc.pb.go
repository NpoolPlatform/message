// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/thirdgateway/thirdgateway.proto

package thirdgateway

import (
	context "context"
	npool "github.com/NpoolPlatform/message/npool"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ThirdGatewayClient is the client API for ThirdGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThirdGatewayClient interface {
	// Method Version
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*npool.VersionResponse, error)
	SendSMSCode(ctx context.Context, in *SendSMSCodeRequest, opts ...grpc.CallOption) (*SendSMSCodeResponse, error)
	VerifySMSCode(ctx context.Context, in *VerifySMSCodeRequest, opts ...grpc.CallOption) (*VerifySMSCodeResponse, error)
	SendEmailCode(ctx context.Context, in *SendEmailCodeRequest, opts ...grpc.CallOption) (*SendEmailCodeResponse, error)
	VerifyEmailCode(ctx context.Context, in *VerifyEmailCodeRequest, opts ...grpc.CallOption) (*VerifyEmailCodeResponse, error)
}

type thirdGatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewThirdGatewayClient(cc grpc.ClientConnInterface) ThirdGatewayClient {
	return &thirdGatewayClient{cc}
}

func (c *thirdGatewayClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*npool.VersionResponse, error) {
	out := new(npool.VersionResponse)
	err := c.cc.Invoke(ctx, "/third.gateway.v1.ThirdGateway/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thirdGatewayClient) SendSMSCode(ctx context.Context, in *SendSMSCodeRequest, opts ...grpc.CallOption) (*SendSMSCodeResponse, error) {
	out := new(SendSMSCodeResponse)
	err := c.cc.Invoke(ctx, "/third.gateway.v1.ThirdGateway/SendSMSCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thirdGatewayClient) VerifySMSCode(ctx context.Context, in *VerifySMSCodeRequest, opts ...grpc.CallOption) (*VerifySMSCodeResponse, error) {
	out := new(VerifySMSCodeResponse)
	err := c.cc.Invoke(ctx, "/third.gateway.v1.ThirdGateway/VerifySMSCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thirdGatewayClient) SendEmailCode(ctx context.Context, in *SendEmailCodeRequest, opts ...grpc.CallOption) (*SendEmailCodeResponse, error) {
	out := new(SendEmailCodeResponse)
	err := c.cc.Invoke(ctx, "/third.gateway.v1.ThirdGateway/SendEmailCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thirdGatewayClient) VerifyEmailCode(ctx context.Context, in *VerifyEmailCodeRequest, opts ...grpc.CallOption) (*VerifyEmailCodeResponse, error) {
	out := new(VerifyEmailCodeResponse)
	err := c.cc.Invoke(ctx, "/third.gateway.v1.ThirdGateway/VerifyEmailCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThirdGatewayServer is the server API for ThirdGateway service.
// All implementations must embed UnimplementedThirdGatewayServer
// for forward compatibility
type ThirdGatewayServer interface {
	// Method Version
	Version(context.Context, *emptypb.Empty) (*npool.VersionResponse, error)
	SendSMSCode(context.Context, *SendSMSCodeRequest) (*SendSMSCodeResponse, error)
	VerifySMSCode(context.Context, *VerifySMSCodeRequest) (*VerifySMSCodeResponse, error)
	SendEmailCode(context.Context, *SendEmailCodeRequest) (*SendEmailCodeResponse, error)
	VerifyEmailCode(context.Context, *VerifyEmailCodeRequest) (*VerifyEmailCodeResponse, error)
	mustEmbedUnimplementedThirdGatewayServer()
}

// UnimplementedThirdGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedThirdGatewayServer struct {
}

func (UnimplementedThirdGatewayServer) Version(context.Context, *emptypb.Empty) (*npool.VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedThirdGatewayServer) SendSMSCode(context.Context, *SendSMSCodeRequest) (*SendSMSCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSMSCode not implemented")
}
func (UnimplementedThirdGatewayServer) VerifySMSCode(context.Context, *VerifySMSCodeRequest) (*VerifySMSCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifySMSCode not implemented")
}
func (UnimplementedThirdGatewayServer) SendEmailCode(context.Context, *SendEmailCodeRequest) (*SendEmailCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmailCode not implemented")
}
func (UnimplementedThirdGatewayServer) VerifyEmailCode(context.Context, *VerifyEmailCodeRequest) (*VerifyEmailCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmailCode not implemented")
}
func (UnimplementedThirdGatewayServer) mustEmbedUnimplementedThirdGatewayServer() {}

// UnsafeThirdGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThirdGatewayServer will
// result in compilation errors.
type UnsafeThirdGatewayServer interface {
	mustEmbedUnimplementedThirdGatewayServer()
}

func RegisterThirdGatewayServer(s grpc.ServiceRegistrar, srv ThirdGatewayServer) {
	s.RegisterService(&ThirdGateway_ServiceDesc, srv)
}

func _ThirdGateway_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThirdGatewayServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/third.gateway.v1.ThirdGateway/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThirdGatewayServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThirdGateway_SendSMSCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSMSCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThirdGatewayServer).SendSMSCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/third.gateway.v1.ThirdGateway/SendSMSCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThirdGatewayServer).SendSMSCode(ctx, req.(*SendSMSCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThirdGateway_VerifySMSCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifySMSCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThirdGatewayServer).VerifySMSCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/third.gateway.v1.ThirdGateway/VerifySMSCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThirdGatewayServer).VerifySMSCode(ctx, req.(*VerifySMSCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThirdGateway_SendEmailCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEmailCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThirdGatewayServer).SendEmailCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/third.gateway.v1.ThirdGateway/SendEmailCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThirdGatewayServer).SendEmailCode(ctx, req.(*SendEmailCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThirdGateway_VerifyEmailCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyEmailCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThirdGatewayServer).VerifyEmailCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/third.gateway.v1.ThirdGateway/VerifyEmailCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThirdGatewayServer).VerifyEmailCode(ctx, req.(*VerifyEmailCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ThirdGateway_ServiceDesc is the grpc.ServiceDesc for ThirdGateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ThirdGateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "third.gateway.v1.ThirdGateway",
	HandlerType: (*ThirdGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _ThirdGateway_Version_Handler,
		},
		{
			MethodName: "SendSMSCode",
			Handler:    _ThirdGateway_SendSMSCode_Handler,
		},
		{
			MethodName: "VerifySMSCode",
			Handler:    _ThirdGateway_VerifySMSCode_Handler,
		},
		{
			MethodName: "SendEmailCode",
			Handler:    _ThirdGateway_SendEmailCode_Handler,
		},
		{
			MethodName: "VerifyEmailCode",
			Handler:    _ThirdGateway_VerifyEmailCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/thirdgateway/thirdgateway.proto",
}
