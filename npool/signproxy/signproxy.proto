syntax = "proto3";

package sphinx.proxy.v1;

option go_package = "github.com/NpoolPlatform/message/npool/signproxy";

import "google/api/annotations.proto";
import "npool/sphinxplugin/sphinxplugin.proto";

// TODO 分开 sign 和 proxy 的队列
// Service Name
service SignProxy {
    rpc ProxyPlugin (stream ProxyPluginResponse) returns (stream ProxyPluginRequest) {}
    rpc ProxySign (stream ProxySignResponse) returns (stream ProxySignRequest) {}
    // WalletBalance needed by trading service (through proxy); TODO
    // Notice that sphixn.plugin.types are reused here; of logic we should seperately define request and response types in sphinx.proxy for grpc use; in v1 MVP these definitions are not essential
    rpc WalletBalance (sphinx.plugin.v1.WalletBalanceRequest) returns (sphinx.plugin.v1.WalletBalanceInfo) {
        option (google.api.http) = {
            post: "/v1/wallet/balance"
            body: "*"
        };
    }
    // WalletNew needed by trading service; TODO
    // types undefined in sphinx.sign; implements needed, since stream communications are not yet supported between signproxy and tradingservice
    rpc WalletNew (WalletNewRequest) returns (AccountInfo) {
        option (google.api.http) = {
            post: "/v1/wallet/new"
            body: "*"
        };}
}

// RegisterCoin ..
message ProxyPluginResponse {
    sphinx.plugin.v1.CoinType CoinType          = 100;
    TransactionType TransactionType             = 110;
    uint64 Nonce                                = 120;
    string CID                                  = 130;
}

// MpoolGetNonce WalletBalance MpoolPush ..
message ProxyPluginRequest {
    sphinx.plugin.v1.CoinType CoinType          = 100;
    TransactionType TransactionType             = 110;
    string Address                              = 120;
    sphinx.plugin.v1.UnsignedMessage Message    = 130;
}

// Sign WalletNew ..
message ProxySignRequest {
    sphinx.plugin.v1.CoinType CoinType          = 100;
    TransactionType TransactionType             = 110;
    sphinx.plugin.v1.UnsignedMessage Message    = 130;
}

message ProxySignResponse {
    sphinx.plugin.v1.CoinType CoinType          = 100;
    TransactionType TransactionType             = 110;
    ProxySignResponseInfo Info                  = 120;
}

message ProxySignResponseInfo {
    string Address                              = 100;// create new account address
    sphinx.plugin.v1.UnsignedMessage Message    = 110;
	sphinx.plugin.v1.Signature       Signature  = 120;
}

enum TransactionType {
    Invalid         = 0;
    WalletNew       = 1; // proxy -> sign
    Signature       = 2; // proxy -> sign
    Balance         = 3; // proxy -> plugin
    PreSign         = 4; // proxy -> pluign get nonce
    Broadcast       = 5; // proxy -> plugin mpool push
    RegisterCoin    = 6; // plugin -> proxy
}

message WalletNewRequest {
    sphinx.plugin.v1.CoinType CoinType = 100;
}

message AccountInfo {
    string SigType = 100;// secp256k1
    string Address = 110;
}

