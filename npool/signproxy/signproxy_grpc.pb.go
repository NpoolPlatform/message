// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package signproxy

import (
	context "context"
	sphinxplugin "github.com/NpoolPlatform/message/npool/sphinxplugin"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SignProxyClient is the client API for SignProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SignProxyClient interface {
	ProxyPlugin(ctx context.Context, opts ...grpc.CallOption) (SignProxy_ProxyPluginClient, error)
	ProxySign(ctx context.Context, opts ...grpc.CallOption) (SignProxy_ProxySignClient, error)
	// WalletBalance needed by trading service (through proxy)
	WalletBalance(ctx context.Context, in *sphinxplugin.WalletBalanceRequest, opts ...grpc.CallOption) (*sphinxplugin.WalletBalanceInfo, error)
}

type signProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewSignProxyClient(cc grpc.ClientConnInterface) SignProxyClient {
	return &signProxyClient{cc}
}

func (c *signProxyClient) ProxyPlugin(ctx context.Context, opts ...grpc.CallOption) (SignProxy_ProxyPluginClient, error) {
	stream, err := c.cc.NewStream(ctx, &SignProxy_ServiceDesc.Streams[0], "/sphinx.proxy.v1.SignProxy/ProxyPlugin", opts...)
	if err != nil {
		return nil, err
	}
	x := &signProxyProxyPluginClient{stream}
	return x, nil
}

type SignProxy_ProxyPluginClient interface {
	Send(*ProxyPluginResponse) error
	Recv() (*ProxyPluginRequest, error)
	grpc.ClientStream
}

type signProxyProxyPluginClient struct {
	grpc.ClientStream
}

func (x *signProxyProxyPluginClient) Send(m *ProxyPluginResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *signProxyProxyPluginClient) Recv() (*ProxyPluginRequest, error) {
	m := new(ProxyPluginRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *signProxyClient) ProxySign(ctx context.Context, opts ...grpc.CallOption) (SignProxy_ProxySignClient, error) {
	stream, err := c.cc.NewStream(ctx, &SignProxy_ServiceDesc.Streams[1], "/sphinx.proxy.v1.SignProxy/ProxySign", opts...)
	if err != nil {
		return nil, err
	}
	x := &signProxyProxySignClient{stream}
	return x, nil
}

type SignProxy_ProxySignClient interface {
	Send(*ProxySignResponse) error
	Recv() (*ProxySignRequest, error)
	grpc.ClientStream
}

type signProxyProxySignClient struct {
	grpc.ClientStream
}

func (x *signProxyProxySignClient) Send(m *ProxySignResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *signProxyProxySignClient) Recv() (*ProxySignRequest, error) {
	m := new(ProxySignRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *signProxyClient) WalletBalance(ctx context.Context, in *sphinxplugin.WalletBalanceRequest, opts ...grpc.CallOption) (*sphinxplugin.WalletBalanceInfo, error) {
	out := new(sphinxplugin.WalletBalanceInfo)
	err := c.cc.Invoke(ctx, "/sphinx.proxy.v1.SignProxy/WalletBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SignProxyServer is the server API for SignProxy service.
// All implementations must embed UnimplementedSignProxyServer
// for forward compatibility
type SignProxyServer interface {
	ProxyPlugin(SignProxy_ProxyPluginServer) error
	ProxySign(SignProxy_ProxySignServer) error
	// WalletBalance needed by trading service (through proxy)
	WalletBalance(context.Context, *sphinxplugin.WalletBalanceRequest) (*sphinxplugin.WalletBalanceInfo, error)
	mustEmbedUnimplementedSignProxyServer()
}

// UnimplementedSignProxyServer must be embedded to have forward compatible implementations.
type UnimplementedSignProxyServer struct {
}

func (UnimplementedSignProxyServer) ProxyPlugin(SignProxy_ProxyPluginServer) error {
	return status.Errorf(codes.Unimplemented, "method ProxyPlugin not implemented")
}
func (UnimplementedSignProxyServer) ProxySign(SignProxy_ProxySignServer) error {
	return status.Errorf(codes.Unimplemented, "method ProxySign not implemented")
}
func (UnimplementedSignProxyServer) WalletBalance(context.Context, *sphinxplugin.WalletBalanceRequest) (*sphinxplugin.WalletBalanceInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WalletBalance not implemented")
}
func (UnimplementedSignProxyServer) mustEmbedUnimplementedSignProxyServer() {}

// UnsafeSignProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SignProxyServer will
// result in compilation errors.
type UnsafeSignProxyServer interface {
	mustEmbedUnimplementedSignProxyServer()
}

func RegisterSignProxyServer(s grpc.ServiceRegistrar, srv SignProxyServer) {
	s.RegisterService(&SignProxy_ServiceDesc, srv)
}

func _SignProxy_ProxyPlugin_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SignProxyServer).ProxyPlugin(&signProxyProxyPluginServer{stream})
}

type SignProxy_ProxyPluginServer interface {
	Send(*ProxyPluginRequest) error
	Recv() (*ProxyPluginResponse, error)
	grpc.ServerStream
}

type signProxyProxyPluginServer struct {
	grpc.ServerStream
}

func (x *signProxyProxyPluginServer) Send(m *ProxyPluginRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *signProxyProxyPluginServer) Recv() (*ProxyPluginResponse, error) {
	m := new(ProxyPluginResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SignProxy_ProxySign_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SignProxyServer).ProxySign(&signProxyProxySignServer{stream})
}

type SignProxy_ProxySignServer interface {
	Send(*ProxySignRequest) error
	Recv() (*ProxySignResponse, error)
	grpc.ServerStream
}

type signProxyProxySignServer struct {
	grpc.ServerStream
}

func (x *signProxyProxySignServer) Send(m *ProxySignRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *signProxyProxySignServer) Recv() (*ProxySignResponse, error) {
	m := new(ProxySignResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SignProxy_WalletBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(sphinxplugin.WalletBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignProxyServer).WalletBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sphinx.proxy.v1.SignProxy/WalletBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignProxyServer).WalletBalance(ctx, req.(*sphinxplugin.WalletBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SignProxy_ServiceDesc is the grpc.ServiceDesc for SignProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SignProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sphinx.proxy.v1.SignProxy",
	HandlerType: (*SignProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WalletBalance",
			Handler:    _SignProxy_WalletBalance_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProxyPlugin",
			Handler:       _SignProxy_ProxyPlugin_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ProxySign",
			Handler:       _SignProxy_ProxySign_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "npool/signproxy/signproxy.proto",
}
