// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/oraclemgr/oraclemgr.proto

package oraclemgr

import (
	context "context"
	npool "github.com/NpoolPlatform/message/npool"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OracleManagerClient is the client API for OracleManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OracleManagerClient interface {
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*npool.VersionResponse, error)
	CreateReward(ctx context.Context, in *CreateRewardRequest, opts ...grpc.CallOption) (*CreateRewardResponse, error)
	CreateRewards(ctx context.Context, in *CreateRewardsRequest, opts ...grpc.CallOption) (*CreateRewardsResponse, error)
	UpdateReward(ctx context.Context, in *UpdateRewardRequest, opts ...grpc.CallOption) (*UpdateRewardResponse, error)
	GetReward(ctx context.Context, in *GetRewardRequest, opts ...grpc.CallOption) (*GetRewardResponse, error)
	GetRewardOnly(ctx context.Context, in *GetRewardOnlyRequest, opts ...grpc.CallOption) (*GetRewardOnlyResponse, error)
	GetRewards(ctx context.Context, in *GetRewardsRequest, opts ...grpc.CallOption) (*GetRewardsResponse, error)
	ExistReward(ctx context.Context, in *ExistRewardRequest, opts ...grpc.CallOption) (*ExistRewardResponse, error)
	ExistRewardConds(ctx context.Context, in *ExistRewardCondsRequest, opts ...grpc.CallOption) (*ExistRewardCondsResponse, error)
	DeleteReward(ctx context.Context, in *DeleteRewardRequest, opts ...grpc.CallOption) (*DeleteRewardResponse, error)
}

type oracleManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewOracleManagerClient(cc grpc.ClientConnInterface) OracleManagerClient {
	return &oracleManagerClient{cc}
}

func (c *oracleManagerClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*npool.VersionResponse, error) {
	out := new(npool.VersionResponse)
	err := c.cc.Invoke(ctx, "/oracle.manager.v1.OracleManager/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oracleManagerClient) CreateReward(ctx context.Context, in *CreateRewardRequest, opts ...grpc.CallOption) (*CreateRewardResponse, error) {
	out := new(CreateRewardResponse)
	err := c.cc.Invoke(ctx, "/oracle.manager.v1.OracleManager/CreateReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oracleManagerClient) CreateRewards(ctx context.Context, in *CreateRewardsRequest, opts ...grpc.CallOption) (*CreateRewardsResponse, error) {
	out := new(CreateRewardsResponse)
	err := c.cc.Invoke(ctx, "/oracle.manager.v1.OracleManager/CreateRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oracleManagerClient) UpdateReward(ctx context.Context, in *UpdateRewardRequest, opts ...grpc.CallOption) (*UpdateRewardResponse, error) {
	out := new(UpdateRewardResponse)
	err := c.cc.Invoke(ctx, "/oracle.manager.v1.OracleManager/UpdateReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oracleManagerClient) GetReward(ctx context.Context, in *GetRewardRequest, opts ...grpc.CallOption) (*GetRewardResponse, error) {
	out := new(GetRewardResponse)
	err := c.cc.Invoke(ctx, "/oracle.manager.v1.OracleManager/GetReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oracleManagerClient) GetRewardOnly(ctx context.Context, in *GetRewardOnlyRequest, opts ...grpc.CallOption) (*GetRewardOnlyResponse, error) {
	out := new(GetRewardOnlyResponse)
	err := c.cc.Invoke(ctx, "/oracle.manager.v1.OracleManager/GetRewardOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oracleManagerClient) GetRewards(ctx context.Context, in *GetRewardsRequest, opts ...grpc.CallOption) (*GetRewardsResponse, error) {
	out := new(GetRewardsResponse)
	err := c.cc.Invoke(ctx, "/oracle.manager.v1.OracleManager/GetRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oracleManagerClient) ExistReward(ctx context.Context, in *ExistRewardRequest, opts ...grpc.CallOption) (*ExistRewardResponse, error) {
	out := new(ExistRewardResponse)
	err := c.cc.Invoke(ctx, "/oracle.manager.v1.OracleManager/ExistReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oracleManagerClient) ExistRewardConds(ctx context.Context, in *ExistRewardCondsRequest, opts ...grpc.CallOption) (*ExistRewardCondsResponse, error) {
	out := new(ExistRewardCondsResponse)
	err := c.cc.Invoke(ctx, "/oracle.manager.v1.OracleManager/ExistRewardConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oracleManagerClient) DeleteReward(ctx context.Context, in *DeleteRewardRequest, opts ...grpc.CallOption) (*DeleteRewardResponse, error) {
	out := new(DeleteRewardResponse)
	err := c.cc.Invoke(ctx, "/oracle.manager.v1.OracleManager/DeleteReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OracleManagerServer is the server API for OracleManager service.
// All implementations must embed UnimplementedOracleManagerServer
// for forward compatibility
type OracleManagerServer interface {
	Version(context.Context, *emptypb.Empty) (*npool.VersionResponse, error)
	CreateReward(context.Context, *CreateRewardRequest) (*CreateRewardResponse, error)
	CreateRewards(context.Context, *CreateRewardsRequest) (*CreateRewardsResponse, error)
	UpdateReward(context.Context, *UpdateRewardRequest) (*UpdateRewardResponse, error)
	GetReward(context.Context, *GetRewardRequest) (*GetRewardResponse, error)
	GetRewardOnly(context.Context, *GetRewardOnlyRequest) (*GetRewardOnlyResponse, error)
	GetRewards(context.Context, *GetRewardsRequest) (*GetRewardsResponse, error)
	ExistReward(context.Context, *ExistRewardRequest) (*ExistRewardResponse, error)
	ExistRewardConds(context.Context, *ExistRewardCondsRequest) (*ExistRewardCondsResponse, error)
	DeleteReward(context.Context, *DeleteRewardRequest) (*DeleteRewardResponse, error)
	mustEmbedUnimplementedOracleManagerServer()
}

// UnimplementedOracleManagerServer must be embedded to have forward compatible implementations.
type UnimplementedOracleManagerServer struct {
}

func (UnimplementedOracleManagerServer) Version(context.Context, *emptypb.Empty) (*npool.VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedOracleManagerServer) CreateReward(context.Context, *CreateRewardRequest) (*CreateRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReward not implemented")
}
func (UnimplementedOracleManagerServer) CreateRewards(context.Context, *CreateRewardsRequest) (*CreateRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRewards not implemented")
}
func (UnimplementedOracleManagerServer) UpdateReward(context.Context, *UpdateRewardRequest) (*UpdateRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReward not implemented")
}
func (UnimplementedOracleManagerServer) GetReward(context.Context, *GetRewardRequest) (*GetRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReward not implemented")
}
func (UnimplementedOracleManagerServer) GetRewardOnly(context.Context, *GetRewardOnlyRequest) (*GetRewardOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRewardOnly not implemented")
}
func (UnimplementedOracleManagerServer) GetRewards(context.Context, *GetRewardsRequest) (*GetRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRewards not implemented")
}
func (UnimplementedOracleManagerServer) ExistReward(context.Context, *ExistRewardRequest) (*ExistRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistReward not implemented")
}
func (UnimplementedOracleManagerServer) ExistRewardConds(context.Context, *ExistRewardCondsRequest) (*ExistRewardCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistRewardConds not implemented")
}
func (UnimplementedOracleManagerServer) DeleteReward(context.Context, *DeleteRewardRequest) (*DeleteRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReward not implemented")
}
func (UnimplementedOracleManagerServer) mustEmbedUnimplementedOracleManagerServer() {}

// UnsafeOracleManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OracleManagerServer will
// result in compilation errors.
type UnsafeOracleManagerServer interface {
	mustEmbedUnimplementedOracleManagerServer()
}

func RegisterOracleManagerServer(s grpc.ServiceRegistrar, srv OracleManagerServer) {
	s.RegisterService(&OracleManager_ServiceDesc, srv)
}

func _OracleManager_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OracleManagerServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oracle.manager.v1.OracleManager/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OracleManagerServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OracleManager_CreateReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OracleManagerServer).CreateReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oracle.manager.v1.OracleManager/CreateReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OracleManagerServer).CreateReward(ctx, req.(*CreateRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OracleManager_CreateRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OracleManagerServer).CreateRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oracle.manager.v1.OracleManager/CreateRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OracleManagerServer).CreateRewards(ctx, req.(*CreateRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OracleManager_UpdateReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OracleManagerServer).UpdateReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oracle.manager.v1.OracleManager/UpdateReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OracleManagerServer).UpdateReward(ctx, req.(*UpdateRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OracleManager_GetReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OracleManagerServer).GetReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oracle.manager.v1.OracleManager/GetReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OracleManagerServer).GetReward(ctx, req.(*GetRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OracleManager_GetRewardOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRewardOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OracleManagerServer).GetRewardOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oracle.manager.v1.OracleManager/GetRewardOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OracleManagerServer).GetRewardOnly(ctx, req.(*GetRewardOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OracleManager_GetRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OracleManagerServer).GetRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oracle.manager.v1.OracleManager/GetRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OracleManagerServer).GetRewards(ctx, req.(*GetRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OracleManager_ExistReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OracleManagerServer).ExistReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oracle.manager.v1.OracleManager/ExistReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OracleManagerServer).ExistReward(ctx, req.(*ExistRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OracleManager_ExistRewardConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistRewardCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OracleManagerServer).ExistRewardConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oracle.manager.v1.OracleManager/ExistRewardConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OracleManagerServer).ExistRewardConds(ctx, req.(*ExistRewardCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OracleManager_DeleteReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OracleManagerServer).DeleteReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oracle.manager.v1.OracleManager/DeleteReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OracleManagerServer).DeleteReward(ctx, req.(*DeleteRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OracleManager_ServiceDesc is the grpc.ServiceDesc for OracleManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OracleManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "oracle.manager.v1.OracleManager",
	HandlerType: (*OracleManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _OracleManager_Version_Handler,
		},
		{
			MethodName: "CreateReward",
			Handler:    _OracleManager_CreateReward_Handler,
		},
		{
			MethodName: "CreateRewards",
			Handler:    _OracleManager_CreateRewards_Handler,
		},
		{
			MethodName: "UpdateReward",
			Handler:    _OracleManager_UpdateReward_Handler,
		},
		{
			MethodName: "GetReward",
			Handler:    _OracleManager_GetReward_Handler,
		},
		{
			MethodName: "GetRewardOnly",
			Handler:    _OracleManager_GetRewardOnly_Handler,
		},
		{
			MethodName: "GetRewards",
			Handler:    _OracleManager_GetRewards_Handler,
		},
		{
			MethodName: "ExistReward",
			Handler:    _OracleManager_ExistReward_Handler,
		},
		{
			MethodName: "ExistRewardConds",
			Handler:    _OracleManager_ExistRewardConds_Handler,
		},
		{
			MethodName: "DeleteReward",
			Handler:    _OracleManager_DeleteReward_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/oraclemgr/oraclemgr.proto",
}
