syntax = "proto3";

package oracle.manager.v1;

option go_package = "github.com/NpoolPlatform/message/npool/oraclemgr";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "npool/npool.proto";

service OracleManager {
    rpc Version (google.protobuf.Empty) returns (npool.v1.VersionResponse){
        option (google.api.http) = {
            post: "/version"
            body: "*"
        };
    }

    rpc CreateReward (CreateRewardRequest) returns (CreateRewardResponse) {
        option (google.api.http) = {
            post: "/v1/create/reward"
            body: "*"
        };
    }

    rpc CreateRewards (CreateRewardsRequest) returns (CreateRewardsResponse) {
        option (google.api.http) = {
            post: "/v1/create/rewards"
            body: "*"
        };
    }

    rpc UpdateReward (UpdateRewardRequest) returns (UpdateRewardResponse) {
        option (google.api.http) = {
            post: "/v1/update/reward"
            body: "*"
        };
    }

    rpc GetReward (GetRewardRequest) returns (GetRewardResponse) {
        option (google.api.http) = {
            post: "/v1/get/reward"
            body: "*"
        };
    }

    rpc GetRewardOnly (GetRewardOnlyRequest) returns (GetRewardOnlyResponse) {
        option (google.api.http) = {
            post: "/v1/get/reward/only"
            body: "*"
        };
    }

    rpc GetRewards (GetRewardsRequest) returns (GetRewardsResponse) {
        option (google.api.http) = {
            post: "/v1/get/rewards"
            body: "*"
        };
    }

    rpc ExistReward (ExistRewardRequest) returns (ExistRewardResponse) {
        option (google.api.http) = {
            post: "/v1/exist/reward"
            body: "*"
        };
    }

    rpc ExistRewardConds (ExistRewardCondsRequest) returns (ExistRewardCondsResponse) {
        option (google.api.http) = {
            post: "/v1/exist/reward/conds"
            body: "*"
        };
    }

    rpc DeleteReward (DeleteRewardRequest) returns (DeleteRewardResponse) {
        option (google.api.http) = {
            post: "/v1/delete/reward"
            body: "*"
        };
    }

    rpc CreateCurrency (CreateCurrencyRequest) returns (CreateCurrencyResponse) {
        option (google.api.http) = {
            post: "/v1/create/currency"
            body: "*"
        };
    }

    rpc CreateAppCurrency (CreateAppCurrencyRequest) returns (CreateAppCurrencyResponse) {
        option (google.api.http) = {
            post: "/v1/create/app/currency"
            body: "*"
        };
    }

    rpc UpdateCurrency (UpdateCurrencyRequest) returns (UpdateCurrencyResponse) {
        option (google.api.http) = {
            post: "/v1/update/currency"
            body: "*"
        };
    }

    rpc GetCurrency (GetCurrencyRequest) returns (GetCurrencyResponse) {
        option (google.api.http) = {
            post: "/v1/get/currency"
            body: "*"
        };
    }

    rpc GetCurrencyOnly (GetCurrencyOnlyRequest) returns (GetCurrencyOnlyResponse) {
        option (google.api.http) = {
            post: "/v1/get/currency/only"
            body: "*"
        };
    }

    rpc GetCurrencies (GetCurrenciesRequest) returns (GetCurrenciesResponse) {
        option (google.api.http) = {
            post: "/v1/get/currencies"
            body: "*"
        };
    }

    rpc GetAppCurrencies (GetAppCurrenciesRequest) returns (GetAppCurrenciesResponse) {
        option (google.api.http) = {
            post: "/v1/get/app/currencies"
            body: "*"
        };
    }

    rpc DeleteCurrency (DeleteCurrencyRequest) returns (DeleteCurrencyResponse) {
        option (google.api.http) = {
            post: "/v1/delete/currency"
            body: "*"
        };
    }

    rpc Currencies (CurrenciesRequest) returns (CurrenciesResponse) {
        option (google.api.http) = {
            post: "/v1/currency"
            body: "*"
        };
    }
}

message Reward {
    string ID = 10;
    string CoinTypeID = 20;
    double DailyReward = 30;
}

message CreateRewardRequest {
    Reward Info = 10;
}

message CreateRewardResponse {
    Reward Info = 10;
}

message CreateRewardsRequest {
    repeated Reward Infos = 10;
}

message CreateRewardsResponse {
    repeated Reward Infos = 10;
}

message UpdateRewardRequest {
    Reward Info = 10;
}

message UpdateRewardResponse {
    Reward Info = 10;
}

message GetRewardRequest {
    string ID = 10;
}

message GetRewardResponse {
    Reward Info = 10;
}

message GetRewardOnlyRequest {
    map<string, npool.v1.FilterCond> Conds = 10;
}

message GetRewardOnlyResponse {
    Reward Info = 10;
}

message GetRewardsRequest {
    map<string, npool.v1.FilterCond> Conds = 10;
    int32 Offset = 20;
    int32 Limit = 30;
}

message GetRewardsResponse {
    repeated Reward Infos = 10;
    int32 Total = 20;
}

message ExistRewardRequest {
    string ID = 10;
}

message ExistRewardResponse {
    bool Result = 10;
}

message ExistRewardCondsRequest {
    map<string, npool.v1.FilterCond> Conds = 10;
}

message ExistRewardCondsResponse {
    bool Result = 10;
}

message CountRewardsRequest {
    map<string, npool.v1.FilterCond> Conds = 10;
}

message CountRewardsResponse {
    uint32 Result = 10;
}

message DeleteRewardRequest {
    string ID = 10;
}

message DeleteRewardResponse {
    Reward Info = 10;
}

message Currency {
    string ID = 10;
    string AppID = 20;
    string CoinTypeID = 30;
    double PriceVSUSDT = 40;
    double AppPriceVSUSDT = 50;
}

message CreateCurrencyRequest {
    Currency Info = 10;
}

message CreateCurrencyResponse {
    Currency Info = 10;
}

message CreateAppCurrencyRequest {
    string TargetAppID = 10;
    Currency Info = 20;
}

message CreateAppCurrencyResponse {
    Currency Info = 10;
}

message UpdateCurrencyRequest {
    Currency Info = 10;
}

message UpdateCurrencyResponse {
    Currency Info = 10;
}

message GetCurrencyRequest {
    string ID = 10;
}

message GetCurrencyResponse {
    Currency Info = 10;
}

message GetCurrencyOnlyRequest {
    map<string, npool.v1.FilterCond> Conds = 10;
}

message GetCurrencyOnlyResponse {
    Currency Info = 10;
}

message GetCurrenciesRequest {
    string AppID = 10;
    map<string, npool.v1.FilterCond> Conds = 20;
    int32 Offset = 30;
    int32 Limit = 40;
}

message GetCurrenciesResponse {
    repeated Currency Infos = 10;
    int32 Total = 20;
}

message GetAppCurrenciesRequest {
    string TargetAppID = 10;
    map<string, npool.v1.FilterCond> Conds = 20;
    int32 Offset = 30;
    int32 Limit = 40;
}

message GetAppCurrenciesResponse {
    repeated Currency Infos = 10;
    int32 Total = 20;
}

message DeleteCurrencyRequest {
    string ID = 10;
}

message DeleteCurrencyResponse {
    Currency Info = 10;
}

message CurrencyAmount {
    string CoinTypeID = 10;
    double Amount = 20;
}

message CurrenciesRequest {
    string AppID = 10;
    repeated string CoinTypeIDs = 20;
}

message CurrenciesResponse {
    repeated CurrencyAmount Infos = 10;
}
