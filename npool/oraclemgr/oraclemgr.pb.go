// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: npool/oraclemgr/oraclemgr.proto

package oraclemgr

import (
	npool "github.com/NpoolPlatform/message/npool"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Reward struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          string  `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	CoinTypeID  string  `protobuf:"bytes,20,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty"`
	DailyReward float64 `protobuf:"fixed64,30,opt,name=DailyReward,proto3" json:"DailyReward,omitempty"`
}

func (x *Reward) Reset() {
	*x = Reward{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reward) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reward) ProtoMessage() {}

func (x *Reward) ProtoReflect() protoreflect.Message {
	mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reward.ProtoReflect.Descriptor instead.
func (*Reward) Descriptor() ([]byte, []int) {
	return file_npool_oraclemgr_oraclemgr_proto_rawDescGZIP(), []int{0}
}

func (x *Reward) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Reward) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

func (x *Reward) GetDailyReward() float64 {
	if x != nil {
		return x.DailyReward
	}
	return 0
}

type CreateRewardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Reward `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateRewardRequest) Reset() {
	*x = CreateRewardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRewardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRewardRequest) ProtoMessage() {}

func (x *CreateRewardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRewardRequest.ProtoReflect.Descriptor instead.
func (*CreateRewardRequest) Descriptor() ([]byte, []int) {
	return file_npool_oraclemgr_oraclemgr_proto_rawDescGZIP(), []int{1}
}

func (x *CreateRewardRequest) GetInfo() *Reward {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateRewardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Reward `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateRewardResponse) Reset() {
	*x = CreateRewardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRewardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRewardResponse) ProtoMessage() {}

func (x *CreateRewardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRewardResponse.ProtoReflect.Descriptor instead.
func (*CreateRewardResponse) Descriptor() ([]byte, []int) {
	return file_npool_oraclemgr_oraclemgr_proto_rawDescGZIP(), []int{2}
}

func (x *CreateRewardResponse) GetInfo() *Reward {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateRewardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Reward `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateRewardsRequest) Reset() {
	*x = CreateRewardsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRewardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRewardsRequest) ProtoMessage() {}

func (x *CreateRewardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRewardsRequest.ProtoReflect.Descriptor instead.
func (*CreateRewardsRequest) Descriptor() ([]byte, []int) {
	return file_npool_oraclemgr_oraclemgr_proto_rawDescGZIP(), []int{3}
}

func (x *CreateRewardsRequest) GetInfos() []*Reward {
	if x != nil {
		return x.Infos
	}
	return nil
}

type CreateRewardsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Reward `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateRewardsResponse) Reset() {
	*x = CreateRewardsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRewardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRewardsResponse) ProtoMessage() {}

func (x *CreateRewardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRewardsResponse.ProtoReflect.Descriptor instead.
func (*CreateRewardsResponse) Descriptor() ([]byte, []int) {
	return file_npool_oraclemgr_oraclemgr_proto_rawDescGZIP(), []int{4}
}

func (x *CreateRewardsResponse) GetInfos() []*Reward {
	if x != nil {
		return x.Infos
	}
	return nil
}

type UpdateRewardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Reward `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateRewardRequest) Reset() {
	*x = UpdateRewardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRewardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRewardRequest) ProtoMessage() {}

func (x *UpdateRewardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRewardRequest.ProtoReflect.Descriptor instead.
func (*UpdateRewardRequest) Descriptor() ([]byte, []int) {
	return file_npool_oraclemgr_oraclemgr_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateRewardRequest) GetInfo() *Reward {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateRewardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Reward `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateRewardResponse) Reset() {
	*x = UpdateRewardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRewardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRewardResponse) ProtoMessage() {}

func (x *UpdateRewardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRewardResponse.ProtoReflect.Descriptor instead.
func (*UpdateRewardResponse) Descriptor() ([]byte, []int) {
	return file_npool_oraclemgr_oraclemgr_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateRewardResponse) GetInfo() *Reward {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetRewardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetRewardRequest) Reset() {
	*x = GetRewardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRewardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRewardRequest) ProtoMessage() {}

func (x *GetRewardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRewardRequest.ProtoReflect.Descriptor instead.
func (*GetRewardRequest) Descriptor() ([]byte, []int) {
	return file_npool_oraclemgr_oraclemgr_proto_rawDescGZIP(), []int{7}
}

func (x *GetRewardRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetRewardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Reward `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetRewardResponse) Reset() {
	*x = GetRewardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRewardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRewardResponse) ProtoMessage() {}

func (x *GetRewardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRewardResponse.ProtoReflect.Descriptor instead.
func (*GetRewardResponse) Descriptor() ([]byte, []int) {
	return file_npool_oraclemgr_oraclemgr_proto_rawDescGZIP(), []int{8}
}

func (x *GetRewardResponse) GetInfo() *Reward {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetRewardOnlyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds map[string]*npool.FilterCond `protobuf:"bytes,10,rep,name=Conds,proto3" json:"Conds,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetRewardOnlyRequest) Reset() {
	*x = GetRewardOnlyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRewardOnlyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRewardOnlyRequest) ProtoMessage() {}

func (x *GetRewardOnlyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRewardOnlyRequest.ProtoReflect.Descriptor instead.
func (*GetRewardOnlyRequest) Descriptor() ([]byte, []int) {
	return file_npool_oraclemgr_oraclemgr_proto_rawDescGZIP(), []int{9}
}

func (x *GetRewardOnlyRequest) GetConds() map[string]*npool.FilterCond {
	if x != nil {
		return x.Conds
	}
	return nil
}

type GetRewardOnlyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Reward `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetRewardOnlyResponse) Reset() {
	*x = GetRewardOnlyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRewardOnlyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRewardOnlyResponse) ProtoMessage() {}

func (x *GetRewardOnlyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRewardOnlyResponse.ProtoReflect.Descriptor instead.
func (*GetRewardOnlyResponse) Descriptor() ([]byte, []int) {
	return file_npool_oraclemgr_oraclemgr_proto_rawDescGZIP(), []int{10}
}

func (x *GetRewardOnlyResponse) GetInfo() *Reward {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetRewardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  map[string]*npool.FilterCond `protobuf:"bytes,10,rep,name=Conds,proto3" json:"Conds,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Offset int32                        `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32                        `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetRewardsRequest) Reset() {
	*x = GetRewardsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRewardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRewardsRequest) ProtoMessage() {}

func (x *GetRewardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRewardsRequest.ProtoReflect.Descriptor instead.
func (*GetRewardsRequest) Descriptor() ([]byte, []int) {
	return file_npool_oraclemgr_oraclemgr_proto_rawDescGZIP(), []int{11}
}

func (x *GetRewardsRequest) GetConds() map[string]*npool.FilterCond {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetRewardsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetRewardsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetRewardsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Reward `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total int32     `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetRewardsResponse) Reset() {
	*x = GetRewardsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRewardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRewardsResponse) ProtoMessage() {}

func (x *GetRewardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRewardsResponse.ProtoReflect.Descriptor instead.
func (*GetRewardsResponse) Descriptor() ([]byte, []int) {
	return file_npool_oraclemgr_oraclemgr_proto_rawDescGZIP(), []int{12}
}

func (x *GetRewardsResponse) GetInfos() []*Reward {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetRewardsResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ExistRewardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ExistRewardRequest) Reset() {
	*x = ExistRewardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistRewardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistRewardRequest) ProtoMessage() {}

func (x *ExistRewardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistRewardRequest.ProtoReflect.Descriptor instead.
func (*ExistRewardRequest) Descriptor() ([]byte, []int) {
	return file_npool_oraclemgr_oraclemgr_proto_rawDescGZIP(), []int{13}
}

func (x *ExistRewardRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ExistRewardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,10,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (x *ExistRewardResponse) Reset() {
	*x = ExistRewardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistRewardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistRewardResponse) ProtoMessage() {}

func (x *ExistRewardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistRewardResponse.ProtoReflect.Descriptor instead.
func (*ExistRewardResponse) Descriptor() ([]byte, []int) {
	return file_npool_oraclemgr_oraclemgr_proto_rawDescGZIP(), []int{14}
}

func (x *ExistRewardResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type ExistRewardCondsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds map[string]*npool.FilterCond `protobuf:"bytes,10,rep,name=Conds,proto3" json:"Conds,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ExistRewardCondsRequest) Reset() {
	*x = ExistRewardCondsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistRewardCondsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistRewardCondsRequest) ProtoMessage() {}

func (x *ExistRewardCondsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistRewardCondsRequest.ProtoReflect.Descriptor instead.
func (*ExistRewardCondsRequest) Descriptor() ([]byte, []int) {
	return file_npool_oraclemgr_oraclemgr_proto_rawDescGZIP(), []int{15}
}

func (x *ExistRewardCondsRequest) GetConds() map[string]*npool.FilterCond {
	if x != nil {
		return x.Conds
	}
	return nil
}

type ExistRewardCondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,10,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (x *ExistRewardCondsResponse) Reset() {
	*x = ExistRewardCondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistRewardCondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistRewardCondsResponse) ProtoMessage() {}

func (x *ExistRewardCondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistRewardCondsResponse.ProtoReflect.Descriptor instead.
func (*ExistRewardCondsResponse) Descriptor() ([]byte, []int) {
	return file_npool_oraclemgr_oraclemgr_proto_rawDescGZIP(), []int{16}
}

func (x *ExistRewardCondsResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type CountRewardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds map[string]*npool.FilterCond `protobuf:"bytes,10,rep,name=Conds,proto3" json:"Conds,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CountRewardsRequest) Reset() {
	*x = CountRewardsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountRewardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountRewardsRequest) ProtoMessage() {}

func (x *CountRewardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountRewardsRequest.ProtoReflect.Descriptor instead.
func (*CountRewardsRequest) Descriptor() ([]byte, []int) {
	return file_npool_oraclemgr_oraclemgr_proto_rawDescGZIP(), []int{17}
}

func (x *CountRewardsRequest) GetConds() map[string]*npool.FilterCond {
	if x != nil {
		return x.Conds
	}
	return nil
}

type CountRewardsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result uint32 `protobuf:"varint,10,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (x *CountRewardsResponse) Reset() {
	*x = CountRewardsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountRewardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountRewardsResponse) ProtoMessage() {}

func (x *CountRewardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountRewardsResponse.ProtoReflect.Descriptor instead.
func (*CountRewardsResponse) Descriptor() ([]byte, []int) {
	return file_npool_oraclemgr_oraclemgr_proto_rawDescGZIP(), []int{18}
}

func (x *CountRewardsResponse) GetResult() uint32 {
	if x != nil {
		return x.Result
	}
	return 0
}

type DeleteRewardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *DeleteRewardRequest) Reset() {
	*x = DeleteRewardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRewardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRewardRequest) ProtoMessage() {}

func (x *DeleteRewardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRewardRequest.ProtoReflect.Descriptor instead.
func (*DeleteRewardRequest) Descriptor() ([]byte, []int) {
	return file_npool_oraclemgr_oraclemgr_proto_rawDescGZIP(), []int{19}
}

func (x *DeleteRewardRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type DeleteRewardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Reward `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteRewardResponse) Reset() {
	*x = DeleteRewardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRewardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRewardResponse) ProtoMessage() {}

func (x *DeleteRewardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRewardResponse.ProtoReflect.Descriptor instead.
func (*DeleteRewardResponse) Descriptor() ([]byte, []int) {
	return file_npool_oraclemgr_oraclemgr_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteRewardResponse) GetInfo() *Reward {
	if x != nil {
		return x.Info
	}
	return nil
}

type Currency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             string  `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID          string  `protobuf:"bytes,20,opt,name=AppID,proto3" json:"AppID,omitempty"`
	CoinTypeID     string  `protobuf:"bytes,30,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty"`
	PriceVSUSDT    float64 `protobuf:"fixed64,40,opt,name=PriceVSUSDT,proto3" json:"PriceVSUSDT,omitempty"`
	AppPriceVSUSDT float64 `protobuf:"fixed64,50,opt,name=AppPriceVSUSDT,proto3" json:"AppPriceVSUSDT,omitempty"`
	OverPercent    int32   `protobuf:"varint,60,opt,name=OverPercent,proto3" json:"OverPercent,omitempty"`
	CurrencyMethod string  `protobuf:"bytes,70,opt,name=CurrencyMethod,proto3" json:"CurrencyMethod,omitempty"`
}

func (x *Currency) Reset() {
	*x = Currency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Currency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Currency) ProtoMessage() {}

func (x *Currency) ProtoReflect() protoreflect.Message {
	mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Currency.ProtoReflect.Descriptor instead.
func (*Currency) Descriptor() ([]byte, []int) {
	return file_npool_oraclemgr_oraclemgr_proto_rawDescGZIP(), []int{21}
}

func (x *Currency) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Currency) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *Currency) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

func (x *Currency) GetPriceVSUSDT() float64 {
	if x != nil {
		return x.PriceVSUSDT
	}
	return 0
}

func (x *Currency) GetAppPriceVSUSDT() float64 {
	if x != nil {
		return x.AppPriceVSUSDT
	}
	return 0
}

func (x *Currency) GetOverPercent() int32 {
	if x != nil {
		return x.OverPercent
	}
	return 0
}

func (x *Currency) GetCurrencyMethod() string {
	if x != nil {
		return x.CurrencyMethod
	}
	return ""
}

type CreateCurrencyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Currency `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateCurrencyRequest) Reset() {
	*x = CreateCurrencyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCurrencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCurrencyRequest) ProtoMessage() {}

func (x *CreateCurrencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCurrencyRequest.ProtoReflect.Descriptor instead.
func (*CreateCurrencyRequest) Descriptor() ([]byte, []int) {
	return file_npool_oraclemgr_oraclemgr_proto_rawDescGZIP(), []int{22}
}

func (x *CreateCurrencyRequest) GetInfo() *Currency {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateCurrencyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Currency `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateCurrencyResponse) Reset() {
	*x = CreateCurrencyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCurrencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCurrencyResponse) ProtoMessage() {}

func (x *CreateCurrencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCurrencyResponse.ProtoReflect.Descriptor instead.
func (*CreateCurrencyResponse) Descriptor() ([]byte, []int) {
	return file_npool_oraclemgr_oraclemgr_proto_rawDescGZIP(), []int{23}
}

func (x *CreateCurrencyResponse) GetInfo() *Currency {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateAppCurrencyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetAppID string    `protobuf:"bytes,10,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
	Info        *Currency `protobuf:"bytes,20,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateAppCurrencyRequest) Reset() {
	*x = CreateAppCurrencyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAppCurrencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAppCurrencyRequest) ProtoMessage() {}

func (x *CreateAppCurrencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAppCurrencyRequest.ProtoReflect.Descriptor instead.
func (*CreateAppCurrencyRequest) Descriptor() ([]byte, []int) {
	return file_npool_oraclemgr_oraclemgr_proto_rawDescGZIP(), []int{24}
}

func (x *CreateAppCurrencyRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

func (x *CreateAppCurrencyRequest) GetInfo() *Currency {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateAppCurrencyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Currency `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateAppCurrencyResponse) Reset() {
	*x = CreateAppCurrencyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAppCurrencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAppCurrencyResponse) ProtoMessage() {}

func (x *CreateAppCurrencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAppCurrencyResponse.ProtoReflect.Descriptor instead.
func (*CreateAppCurrencyResponse) Descriptor() ([]byte, []int) {
	return file_npool_oraclemgr_oraclemgr_proto_rawDescGZIP(), []int{25}
}

func (x *CreateAppCurrencyResponse) GetInfo() *Currency {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateCurrencyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Currency `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateCurrencyRequest) Reset() {
	*x = UpdateCurrencyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCurrencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCurrencyRequest) ProtoMessage() {}

func (x *UpdateCurrencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCurrencyRequest.ProtoReflect.Descriptor instead.
func (*UpdateCurrencyRequest) Descriptor() ([]byte, []int) {
	return file_npool_oraclemgr_oraclemgr_proto_rawDescGZIP(), []int{26}
}

func (x *UpdateCurrencyRequest) GetInfo() *Currency {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateCurrencyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Currency `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateCurrencyResponse) Reset() {
	*x = UpdateCurrencyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCurrencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCurrencyResponse) ProtoMessage() {}

func (x *UpdateCurrencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCurrencyResponse.ProtoReflect.Descriptor instead.
func (*UpdateCurrencyResponse) Descriptor() ([]byte, []int) {
	return file_npool_oraclemgr_oraclemgr_proto_rawDescGZIP(), []int{27}
}

func (x *UpdateCurrencyResponse) GetInfo() *Currency {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetCurrencyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetCurrencyRequest) Reset() {
	*x = GetCurrencyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrencyRequest) ProtoMessage() {}

func (x *GetCurrencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrencyRequest.ProtoReflect.Descriptor instead.
func (*GetCurrencyRequest) Descriptor() ([]byte, []int) {
	return file_npool_oraclemgr_oraclemgr_proto_rawDescGZIP(), []int{28}
}

func (x *GetCurrencyRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetCurrencyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Currency `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetCurrencyResponse) Reset() {
	*x = GetCurrencyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrencyResponse) ProtoMessage() {}

func (x *GetCurrencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrencyResponse.ProtoReflect.Descriptor instead.
func (*GetCurrencyResponse) Descriptor() ([]byte, []int) {
	return file_npool_oraclemgr_oraclemgr_proto_rawDescGZIP(), []int{29}
}

func (x *GetCurrencyResponse) GetInfo() *Currency {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetCurrencyOnlyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds map[string]*npool.FilterCond `protobuf:"bytes,10,rep,name=Conds,proto3" json:"Conds,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetCurrencyOnlyRequest) Reset() {
	*x = GetCurrencyOnlyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrencyOnlyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrencyOnlyRequest) ProtoMessage() {}

func (x *GetCurrencyOnlyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrencyOnlyRequest.ProtoReflect.Descriptor instead.
func (*GetCurrencyOnlyRequest) Descriptor() ([]byte, []int) {
	return file_npool_oraclemgr_oraclemgr_proto_rawDescGZIP(), []int{30}
}

func (x *GetCurrencyOnlyRequest) GetConds() map[string]*npool.FilterCond {
	if x != nil {
		return x.Conds
	}
	return nil
}

type GetCurrencyOnlyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Currency `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetCurrencyOnlyResponse) Reset() {
	*x = GetCurrencyOnlyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrencyOnlyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrencyOnlyResponse) ProtoMessage() {}

func (x *GetCurrencyOnlyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrencyOnlyResponse.ProtoReflect.Descriptor instead.
func (*GetCurrencyOnlyResponse) Descriptor() ([]byte, []int) {
	return file_npool_oraclemgr_oraclemgr_proto_rawDescGZIP(), []int{31}
}

func (x *GetCurrencyOnlyResponse) GetInfo() *Currency {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetCurrenciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID  string                       `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	Conds  map[string]*npool.FilterCond `protobuf:"bytes,20,rep,name=Conds,proto3" json:"Conds,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Offset int32                        `protobuf:"varint,30,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32                        `protobuf:"varint,40,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetCurrenciesRequest) Reset() {
	*x = GetCurrenciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrenciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrenciesRequest) ProtoMessage() {}

func (x *GetCurrenciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrenciesRequest.ProtoReflect.Descriptor instead.
func (*GetCurrenciesRequest) Descriptor() ([]byte, []int) {
	return file_npool_oraclemgr_oraclemgr_proto_rawDescGZIP(), []int{32}
}

func (x *GetCurrenciesRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetCurrenciesRequest) GetConds() map[string]*npool.FilterCond {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetCurrenciesRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetCurrenciesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetCurrenciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Currency `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total int32       `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetCurrenciesResponse) Reset() {
	*x = GetCurrenciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrenciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrenciesResponse) ProtoMessage() {}

func (x *GetCurrenciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrenciesResponse.ProtoReflect.Descriptor instead.
func (*GetCurrenciesResponse) Descriptor() ([]byte, []int) {
	return file_npool_oraclemgr_oraclemgr_proto_rawDescGZIP(), []int{33}
}

func (x *GetCurrenciesResponse) GetInfos() []*Currency {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetCurrenciesResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetAppCurrenciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetAppID string                       `protobuf:"bytes,10,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
	Conds       map[string]*npool.FilterCond `protobuf:"bytes,20,rep,name=Conds,proto3" json:"Conds,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Offset      int32                        `protobuf:"varint,30,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit       int32                        `protobuf:"varint,40,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetAppCurrenciesRequest) Reset() {
	*x = GetAppCurrenciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppCurrenciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppCurrenciesRequest) ProtoMessage() {}

func (x *GetAppCurrenciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppCurrenciesRequest.ProtoReflect.Descriptor instead.
func (*GetAppCurrenciesRequest) Descriptor() ([]byte, []int) {
	return file_npool_oraclemgr_oraclemgr_proto_rawDescGZIP(), []int{34}
}

func (x *GetAppCurrenciesRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

func (x *GetAppCurrenciesRequest) GetConds() map[string]*npool.FilterCond {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetAppCurrenciesRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetAppCurrenciesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetAppCurrenciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Currency `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total int32       `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetAppCurrenciesResponse) Reset() {
	*x = GetAppCurrenciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppCurrenciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppCurrenciesResponse) ProtoMessage() {}

func (x *GetAppCurrenciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppCurrenciesResponse.ProtoReflect.Descriptor instead.
func (*GetAppCurrenciesResponse) Descriptor() ([]byte, []int) {
	return file_npool_oraclemgr_oraclemgr_proto_rawDescGZIP(), []int{35}
}

func (x *GetAppCurrenciesResponse) GetInfos() []*Currency {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetAppCurrenciesResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type DeleteCurrencyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *DeleteCurrencyRequest) Reset() {
	*x = DeleteCurrencyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCurrencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCurrencyRequest) ProtoMessage() {}

func (x *DeleteCurrencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCurrencyRequest.ProtoReflect.Descriptor instead.
func (*DeleteCurrencyRequest) Descriptor() ([]byte, []int) {
	return file_npool_oraclemgr_oraclemgr_proto_rawDescGZIP(), []int{36}
}

func (x *DeleteCurrencyRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type DeleteCurrencyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Currency `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteCurrencyResponse) Reset() {
	*x = DeleteCurrencyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCurrencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCurrencyResponse) ProtoMessage() {}

func (x *DeleteCurrencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCurrencyResponse.ProtoReflect.Descriptor instead.
func (*DeleteCurrencyResponse) Descriptor() ([]byte, []int) {
	return file_npool_oraclemgr_oraclemgr_proto_rawDescGZIP(), []int{37}
}

func (x *DeleteCurrencyResponse) GetInfo() *Currency {
	if x != nil {
		return x.Info
	}
	return nil
}

type CurrencyAmount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CoinTypeID string  `protobuf:"bytes,10,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty"`
	Amount     float64 `protobuf:"fixed64,20,opt,name=Amount,proto3" json:"Amount,omitempty"`
}

func (x *CurrencyAmount) Reset() {
	*x = CurrencyAmount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyAmount) ProtoMessage() {}

func (x *CurrencyAmount) ProtoReflect() protoreflect.Message {
	mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyAmount.ProtoReflect.Descriptor instead.
func (*CurrencyAmount) Descriptor() ([]byte, []int) {
	return file_npool_oraclemgr_oraclemgr_proto_rawDescGZIP(), []int{38}
}

func (x *CurrencyAmount) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

func (x *CurrencyAmount) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type CurrencyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID      string `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	CoinTypeID string `protobuf:"bytes,20,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty"`
}

func (x *CurrencyRequest) Reset() {
	*x = CurrencyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyRequest) ProtoMessage() {}

func (x *CurrencyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyRequest.ProtoReflect.Descriptor instead.
func (*CurrencyRequest) Descriptor() ([]byte, []int) {
	return file_npool_oraclemgr_oraclemgr_proto_rawDescGZIP(), []int{39}
}

func (x *CurrencyRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *CurrencyRequest) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

type CurrencyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CurrencyAmount `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CurrencyResponse) Reset() {
	*x = CurrencyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CurrencyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CurrencyResponse) ProtoMessage() {}

func (x *CurrencyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_oraclemgr_oraclemgr_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CurrencyResponse.ProtoReflect.Descriptor instead.
func (*CurrencyResponse) Descriptor() ([]byte, []int) {
	return file_npool_oraclemgr_oraclemgr_proto_rawDescGZIP(), []int{40}
}

func (x *CurrencyResponse) GetInfo() *CurrencyAmount {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_oraclemgr_oraclemgr_proto protoreflect.FileDescriptor

var file_npool_oraclemgr_oraclemgr_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x6d, 0x67,
	0x72, 0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x6d, 0x67, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x11, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x11, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x5a, 0x0a, 0x06, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x22, 0x44,
	0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x45, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x47, 0x0a, 0x14, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x05, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x22, 0x48, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a,
	0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x44,
	0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x45, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x22, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22,
	0x42, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0xb0, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x05,
	0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x1a, 0x4e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x46, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2d, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xd8,
	0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x4e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5b, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2f, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x24, 0x0a, 0x12, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x2d, 0x0a, 0x13,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb6, 0x01, 0x0a, 0x17,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x1a, 0x4e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x32, 0x0a, 0x18, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xae, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x47, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x1a, 0x4e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2e, 0x0a, 0x14, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x25, 0x0a, 0x13, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x22, 0x45, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xe4, 0x01, 0x0a, 0x08, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x56, 0x53, 0x55, 0x53, 0x44, 0x54, 0x18, 0x28, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x50, 0x72, 0x69, 0x63, 0x65, 0x56, 0x53, 0x55, 0x53, 0x44, 0x54, 0x12, 0x26, 0x0a, 0x0e,
	0x41, 0x70, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x56, 0x53, 0x55, 0x53, 0x44, 0x54, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x41, 0x70, 0x70, 0x50, 0x72, 0x69, 0x63, 0x65, 0x56, 0x53,
	0x55, 0x53, 0x44, 0x54, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x76, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4f, 0x76, 0x65, 0x72, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x48,
	0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x49, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x6d, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x12, 0x2f, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x4c, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2f, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x48, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x49, 0x0a, 0x16, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x24, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x46, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0xb4, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a,
	0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4f, 0x6e, 0x6c,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x1a, 0x4e, 0x0a, 0x0a, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x70, 0x6f, 0x6f,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4a, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xf4, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x48, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x4e, 0x0a,
	0x0a, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x60, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22,
	0x86, 0x02, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x4b, 0x0a,
	0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x4e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x63, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x27, 0x0a,
	0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x49, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2f, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x48, 0x0a, 0x0e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x47, 0x0a, 0x0f, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x44, 0x22, 0x49, 0x0a, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x32,
	0x96, 0x13, 0x0a, 0x0d, 0x4f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x12, 0x51, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x22, 0x08, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x7d, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x12, 0x26, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x3a, 0x01, 0x2a, 0x12, 0x81, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x27, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28,
	0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17,
	0x22, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x7d, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x26, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16,
	0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x71, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x12, 0x23, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x3a, 0x01, 0x2a, 0x12, 0x82, 0x01, 0x0a, 0x0d, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x27, 0x2e, 0x6f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f,
	0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2f, 0x6f, 0x6e, 0x6c, 0x79, 0x3a, 0x01, 0x2a, 0x12, 0x75,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x24, 0x2e, 0x6f,
	0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x14, 0x22, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x79, 0x0a, 0x0b, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x12, 0x25, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x76, 0x31,
	0x2f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x3a, 0x01, 0x2a,
	0x12, 0x8e, 0x01, 0x0a, 0x10, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2a, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x3a, 0x01,
	0x2a, 0x12, 0x7d, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x12, 0x26, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6f, 0x72, 0x61, 0x63,
	0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x3a, 0x01, 0x2a,
	0x12, 0x85, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x28, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e,
	0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18,
	0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x3a, 0x01, 0x2a, 0x12, 0x92, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2b,
	0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1c, 0x22, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x70,
	0x70, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x3a, 0x01, 0x2a, 0x12, 0x85, 0x01,
	0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x28, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f,
	0x76, 0x31, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x3a, 0x01, 0x2a, 0x12, 0x79, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x25, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6f, 0x72,
	0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x76, 0x31,
	0x2f, 0x67, 0x65, 0x74, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x3a, 0x01, 0x2a,
	0x12, 0x8a, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x29, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2a, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4f,
	0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x20, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1a, 0x22, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x6f, 0x6e, 0x6c, 0x79, 0x3a, 0x01, 0x2a, 0x12, 0x81, 0x01,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12,
	0x27, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c,
	0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x22, 0x12, 0x2f, 0x76, 0x31, 0x2f,
	0x67, 0x65, 0x74, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x3a, 0x01,
	0x2a, 0x12, 0x8e, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x2a, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70,
	0x70, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74,
	0x2f, 0x61, 0x70, 0x70, 0x2f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x3a,
	0x01, 0x2a, 0x12, 0x85, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x28, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x18, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2f, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x3a, 0x01, 0x2a, 0x12, 0x6c, 0x0a, 0x08, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x22, 0x2e, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6f, 0x72, 0x61,
	0x63, 0x6c, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x22, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x3a, 0x01, 0x2a, 0x42, 0x32, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f,
	0x6f, 0x6c, 0x2f, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x6d, 0x67, 0x72, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_oraclemgr_oraclemgr_proto_rawDescOnce sync.Once
	file_npool_oraclemgr_oraclemgr_proto_rawDescData = file_npool_oraclemgr_oraclemgr_proto_rawDesc
)

func file_npool_oraclemgr_oraclemgr_proto_rawDescGZIP() []byte {
	file_npool_oraclemgr_oraclemgr_proto_rawDescOnce.Do(func() {
		file_npool_oraclemgr_oraclemgr_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_oraclemgr_oraclemgr_proto_rawDescData)
	})
	return file_npool_oraclemgr_oraclemgr_proto_rawDescData
}

var file_npool_oraclemgr_oraclemgr_proto_msgTypes = make([]protoimpl.MessageInfo, 48)
var file_npool_oraclemgr_oraclemgr_proto_goTypes = []interface{}{
	(*Reward)(nil),                    // 0: oracle.manager.v1.Reward
	(*CreateRewardRequest)(nil),       // 1: oracle.manager.v1.CreateRewardRequest
	(*CreateRewardResponse)(nil),      // 2: oracle.manager.v1.CreateRewardResponse
	(*CreateRewardsRequest)(nil),      // 3: oracle.manager.v1.CreateRewardsRequest
	(*CreateRewardsResponse)(nil),     // 4: oracle.manager.v1.CreateRewardsResponse
	(*UpdateRewardRequest)(nil),       // 5: oracle.manager.v1.UpdateRewardRequest
	(*UpdateRewardResponse)(nil),      // 6: oracle.manager.v1.UpdateRewardResponse
	(*GetRewardRequest)(nil),          // 7: oracle.manager.v1.GetRewardRequest
	(*GetRewardResponse)(nil),         // 8: oracle.manager.v1.GetRewardResponse
	(*GetRewardOnlyRequest)(nil),      // 9: oracle.manager.v1.GetRewardOnlyRequest
	(*GetRewardOnlyResponse)(nil),     // 10: oracle.manager.v1.GetRewardOnlyResponse
	(*GetRewardsRequest)(nil),         // 11: oracle.manager.v1.GetRewardsRequest
	(*GetRewardsResponse)(nil),        // 12: oracle.manager.v1.GetRewardsResponse
	(*ExistRewardRequest)(nil),        // 13: oracle.manager.v1.ExistRewardRequest
	(*ExistRewardResponse)(nil),       // 14: oracle.manager.v1.ExistRewardResponse
	(*ExistRewardCondsRequest)(nil),   // 15: oracle.manager.v1.ExistRewardCondsRequest
	(*ExistRewardCondsResponse)(nil),  // 16: oracle.manager.v1.ExistRewardCondsResponse
	(*CountRewardsRequest)(nil),       // 17: oracle.manager.v1.CountRewardsRequest
	(*CountRewardsResponse)(nil),      // 18: oracle.manager.v1.CountRewardsResponse
	(*DeleteRewardRequest)(nil),       // 19: oracle.manager.v1.DeleteRewardRequest
	(*DeleteRewardResponse)(nil),      // 20: oracle.manager.v1.DeleteRewardResponse
	(*Currency)(nil),                  // 21: oracle.manager.v1.Currency
	(*CreateCurrencyRequest)(nil),     // 22: oracle.manager.v1.CreateCurrencyRequest
	(*CreateCurrencyResponse)(nil),    // 23: oracle.manager.v1.CreateCurrencyResponse
	(*CreateAppCurrencyRequest)(nil),  // 24: oracle.manager.v1.CreateAppCurrencyRequest
	(*CreateAppCurrencyResponse)(nil), // 25: oracle.manager.v1.CreateAppCurrencyResponse
	(*UpdateCurrencyRequest)(nil),     // 26: oracle.manager.v1.UpdateCurrencyRequest
	(*UpdateCurrencyResponse)(nil),    // 27: oracle.manager.v1.UpdateCurrencyResponse
	(*GetCurrencyRequest)(nil),        // 28: oracle.manager.v1.GetCurrencyRequest
	(*GetCurrencyResponse)(nil),       // 29: oracle.manager.v1.GetCurrencyResponse
	(*GetCurrencyOnlyRequest)(nil),    // 30: oracle.manager.v1.GetCurrencyOnlyRequest
	(*GetCurrencyOnlyResponse)(nil),   // 31: oracle.manager.v1.GetCurrencyOnlyResponse
	(*GetCurrenciesRequest)(nil),      // 32: oracle.manager.v1.GetCurrenciesRequest
	(*GetCurrenciesResponse)(nil),     // 33: oracle.manager.v1.GetCurrenciesResponse
	(*GetAppCurrenciesRequest)(nil),   // 34: oracle.manager.v1.GetAppCurrenciesRequest
	(*GetAppCurrenciesResponse)(nil),  // 35: oracle.manager.v1.GetAppCurrenciesResponse
	(*DeleteCurrencyRequest)(nil),     // 36: oracle.manager.v1.DeleteCurrencyRequest
	(*DeleteCurrencyResponse)(nil),    // 37: oracle.manager.v1.DeleteCurrencyResponse
	(*CurrencyAmount)(nil),            // 38: oracle.manager.v1.CurrencyAmount
	(*CurrencyRequest)(nil),           // 39: oracle.manager.v1.CurrencyRequest
	(*CurrencyResponse)(nil),          // 40: oracle.manager.v1.CurrencyResponse
	nil,                               // 41: oracle.manager.v1.GetRewardOnlyRequest.CondsEntry
	nil,                               // 42: oracle.manager.v1.GetRewardsRequest.CondsEntry
	nil,                               // 43: oracle.manager.v1.ExistRewardCondsRequest.CondsEntry
	nil,                               // 44: oracle.manager.v1.CountRewardsRequest.CondsEntry
	nil,                               // 45: oracle.manager.v1.GetCurrencyOnlyRequest.CondsEntry
	nil,                               // 46: oracle.manager.v1.GetCurrenciesRequest.CondsEntry
	nil,                               // 47: oracle.manager.v1.GetAppCurrenciesRequest.CondsEntry
	(*npool.FilterCond)(nil),          // 48: npool.v1.FilterCond
	(*emptypb.Empty)(nil),             // 49: google.protobuf.Empty
	(*npool.VersionResponse)(nil),     // 50: npool.v1.VersionResponse
}
var file_npool_oraclemgr_oraclemgr_proto_depIdxs = []int32{
	0,  // 0: oracle.manager.v1.CreateRewardRequest.Info:type_name -> oracle.manager.v1.Reward
	0,  // 1: oracle.manager.v1.CreateRewardResponse.Info:type_name -> oracle.manager.v1.Reward
	0,  // 2: oracle.manager.v1.CreateRewardsRequest.Infos:type_name -> oracle.manager.v1.Reward
	0,  // 3: oracle.manager.v1.CreateRewardsResponse.Infos:type_name -> oracle.manager.v1.Reward
	0,  // 4: oracle.manager.v1.UpdateRewardRequest.Info:type_name -> oracle.manager.v1.Reward
	0,  // 5: oracle.manager.v1.UpdateRewardResponse.Info:type_name -> oracle.manager.v1.Reward
	0,  // 6: oracle.manager.v1.GetRewardResponse.Info:type_name -> oracle.manager.v1.Reward
	41, // 7: oracle.manager.v1.GetRewardOnlyRequest.Conds:type_name -> oracle.manager.v1.GetRewardOnlyRequest.CondsEntry
	0,  // 8: oracle.manager.v1.GetRewardOnlyResponse.Info:type_name -> oracle.manager.v1.Reward
	42, // 9: oracle.manager.v1.GetRewardsRequest.Conds:type_name -> oracle.manager.v1.GetRewardsRequest.CondsEntry
	0,  // 10: oracle.manager.v1.GetRewardsResponse.Infos:type_name -> oracle.manager.v1.Reward
	43, // 11: oracle.manager.v1.ExistRewardCondsRequest.Conds:type_name -> oracle.manager.v1.ExistRewardCondsRequest.CondsEntry
	44, // 12: oracle.manager.v1.CountRewardsRequest.Conds:type_name -> oracle.manager.v1.CountRewardsRequest.CondsEntry
	0,  // 13: oracle.manager.v1.DeleteRewardResponse.Info:type_name -> oracle.manager.v1.Reward
	21, // 14: oracle.manager.v1.CreateCurrencyRequest.Info:type_name -> oracle.manager.v1.Currency
	21, // 15: oracle.manager.v1.CreateCurrencyResponse.Info:type_name -> oracle.manager.v1.Currency
	21, // 16: oracle.manager.v1.CreateAppCurrencyRequest.Info:type_name -> oracle.manager.v1.Currency
	21, // 17: oracle.manager.v1.CreateAppCurrencyResponse.Info:type_name -> oracle.manager.v1.Currency
	21, // 18: oracle.manager.v1.UpdateCurrencyRequest.Info:type_name -> oracle.manager.v1.Currency
	21, // 19: oracle.manager.v1.UpdateCurrencyResponse.Info:type_name -> oracle.manager.v1.Currency
	21, // 20: oracle.manager.v1.GetCurrencyResponse.Info:type_name -> oracle.manager.v1.Currency
	45, // 21: oracle.manager.v1.GetCurrencyOnlyRequest.Conds:type_name -> oracle.manager.v1.GetCurrencyOnlyRequest.CondsEntry
	21, // 22: oracle.manager.v1.GetCurrencyOnlyResponse.Info:type_name -> oracle.manager.v1.Currency
	46, // 23: oracle.manager.v1.GetCurrenciesRequest.Conds:type_name -> oracle.manager.v1.GetCurrenciesRequest.CondsEntry
	21, // 24: oracle.manager.v1.GetCurrenciesResponse.Infos:type_name -> oracle.manager.v1.Currency
	47, // 25: oracle.manager.v1.GetAppCurrenciesRequest.Conds:type_name -> oracle.manager.v1.GetAppCurrenciesRequest.CondsEntry
	21, // 26: oracle.manager.v1.GetAppCurrenciesResponse.Infos:type_name -> oracle.manager.v1.Currency
	21, // 27: oracle.manager.v1.DeleteCurrencyResponse.Info:type_name -> oracle.manager.v1.Currency
	38, // 28: oracle.manager.v1.CurrencyResponse.Info:type_name -> oracle.manager.v1.CurrencyAmount
	48, // 29: oracle.manager.v1.GetRewardOnlyRequest.CondsEntry.value:type_name -> npool.v1.FilterCond
	48, // 30: oracle.manager.v1.GetRewardsRequest.CondsEntry.value:type_name -> npool.v1.FilterCond
	48, // 31: oracle.manager.v1.ExistRewardCondsRequest.CondsEntry.value:type_name -> npool.v1.FilterCond
	48, // 32: oracle.manager.v1.CountRewardsRequest.CondsEntry.value:type_name -> npool.v1.FilterCond
	48, // 33: oracle.manager.v1.GetCurrencyOnlyRequest.CondsEntry.value:type_name -> npool.v1.FilterCond
	48, // 34: oracle.manager.v1.GetCurrenciesRequest.CondsEntry.value:type_name -> npool.v1.FilterCond
	48, // 35: oracle.manager.v1.GetAppCurrenciesRequest.CondsEntry.value:type_name -> npool.v1.FilterCond
	49, // 36: oracle.manager.v1.OracleManager.Version:input_type -> google.protobuf.Empty
	1,  // 37: oracle.manager.v1.OracleManager.CreateReward:input_type -> oracle.manager.v1.CreateRewardRequest
	3,  // 38: oracle.manager.v1.OracleManager.CreateRewards:input_type -> oracle.manager.v1.CreateRewardsRequest
	5,  // 39: oracle.manager.v1.OracleManager.UpdateReward:input_type -> oracle.manager.v1.UpdateRewardRequest
	7,  // 40: oracle.manager.v1.OracleManager.GetReward:input_type -> oracle.manager.v1.GetRewardRequest
	9,  // 41: oracle.manager.v1.OracleManager.GetRewardOnly:input_type -> oracle.manager.v1.GetRewardOnlyRequest
	11, // 42: oracle.manager.v1.OracleManager.GetRewards:input_type -> oracle.manager.v1.GetRewardsRequest
	13, // 43: oracle.manager.v1.OracleManager.ExistReward:input_type -> oracle.manager.v1.ExistRewardRequest
	15, // 44: oracle.manager.v1.OracleManager.ExistRewardConds:input_type -> oracle.manager.v1.ExistRewardCondsRequest
	19, // 45: oracle.manager.v1.OracleManager.DeleteReward:input_type -> oracle.manager.v1.DeleteRewardRequest
	22, // 46: oracle.manager.v1.OracleManager.CreateCurrency:input_type -> oracle.manager.v1.CreateCurrencyRequest
	24, // 47: oracle.manager.v1.OracleManager.CreateAppCurrency:input_type -> oracle.manager.v1.CreateAppCurrencyRequest
	26, // 48: oracle.manager.v1.OracleManager.UpdateCurrency:input_type -> oracle.manager.v1.UpdateCurrencyRequest
	28, // 49: oracle.manager.v1.OracleManager.GetCurrency:input_type -> oracle.manager.v1.GetCurrencyRequest
	30, // 50: oracle.manager.v1.OracleManager.GetCurrencyOnly:input_type -> oracle.manager.v1.GetCurrencyOnlyRequest
	32, // 51: oracle.manager.v1.OracleManager.GetCurrencies:input_type -> oracle.manager.v1.GetCurrenciesRequest
	34, // 52: oracle.manager.v1.OracleManager.GetAppCurrencies:input_type -> oracle.manager.v1.GetAppCurrenciesRequest
	36, // 53: oracle.manager.v1.OracleManager.DeleteCurrency:input_type -> oracle.manager.v1.DeleteCurrencyRequest
	39, // 54: oracle.manager.v1.OracleManager.Currency:input_type -> oracle.manager.v1.CurrencyRequest
	50, // 55: oracle.manager.v1.OracleManager.Version:output_type -> npool.v1.VersionResponse
	2,  // 56: oracle.manager.v1.OracleManager.CreateReward:output_type -> oracle.manager.v1.CreateRewardResponse
	4,  // 57: oracle.manager.v1.OracleManager.CreateRewards:output_type -> oracle.manager.v1.CreateRewardsResponse
	6,  // 58: oracle.manager.v1.OracleManager.UpdateReward:output_type -> oracle.manager.v1.UpdateRewardResponse
	8,  // 59: oracle.manager.v1.OracleManager.GetReward:output_type -> oracle.manager.v1.GetRewardResponse
	10, // 60: oracle.manager.v1.OracleManager.GetRewardOnly:output_type -> oracle.manager.v1.GetRewardOnlyResponse
	12, // 61: oracle.manager.v1.OracleManager.GetRewards:output_type -> oracle.manager.v1.GetRewardsResponse
	14, // 62: oracle.manager.v1.OracleManager.ExistReward:output_type -> oracle.manager.v1.ExistRewardResponse
	16, // 63: oracle.manager.v1.OracleManager.ExistRewardConds:output_type -> oracle.manager.v1.ExistRewardCondsResponse
	20, // 64: oracle.manager.v1.OracleManager.DeleteReward:output_type -> oracle.manager.v1.DeleteRewardResponse
	23, // 65: oracle.manager.v1.OracleManager.CreateCurrency:output_type -> oracle.manager.v1.CreateCurrencyResponse
	25, // 66: oracle.manager.v1.OracleManager.CreateAppCurrency:output_type -> oracle.manager.v1.CreateAppCurrencyResponse
	27, // 67: oracle.manager.v1.OracleManager.UpdateCurrency:output_type -> oracle.manager.v1.UpdateCurrencyResponse
	29, // 68: oracle.manager.v1.OracleManager.GetCurrency:output_type -> oracle.manager.v1.GetCurrencyResponse
	31, // 69: oracle.manager.v1.OracleManager.GetCurrencyOnly:output_type -> oracle.manager.v1.GetCurrencyOnlyResponse
	33, // 70: oracle.manager.v1.OracleManager.GetCurrencies:output_type -> oracle.manager.v1.GetCurrenciesResponse
	35, // 71: oracle.manager.v1.OracleManager.GetAppCurrencies:output_type -> oracle.manager.v1.GetAppCurrenciesResponse
	37, // 72: oracle.manager.v1.OracleManager.DeleteCurrency:output_type -> oracle.manager.v1.DeleteCurrencyResponse
	40, // 73: oracle.manager.v1.OracleManager.Currency:output_type -> oracle.manager.v1.CurrencyResponse
	55, // [55:74] is the sub-list for method output_type
	36, // [36:55] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_npool_oraclemgr_oraclemgr_proto_init() }
func file_npool_oraclemgr_oraclemgr_proto_init() {
	if File_npool_oraclemgr_oraclemgr_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_oraclemgr_oraclemgr_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reward); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_oraclemgr_oraclemgr_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRewardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_oraclemgr_oraclemgr_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRewardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_oraclemgr_oraclemgr_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRewardsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_oraclemgr_oraclemgr_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRewardsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_oraclemgr_oraclemgr_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRewardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_oraclemgr_oraclemgr_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRewardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_oraclemgr_oraclemgr_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRewardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_oraclemgr_oraclemgr_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRewardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_oraclemgr_oraclemgr_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRewardOnlyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_oraclemgr_oraclemgr_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRewardOnlyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_oraclemgr_oraclemgr_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRewardsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_oraclemgr_oraclemgr_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRewardsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_oraclemgr_oraclemgr_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistRewardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_oraclemgr_oraclemgr_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistRewardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_oraclemgr_oraclemgr_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistRewardCondsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_oraclemgr_oraclemgr_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistRewardCondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_oraclemgr_oraclemgr_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountRewardsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_oraclemgr_oraclemgr_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountRewardsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_oraclemgr_oraclemgr_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRewardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_oraclemgr_oraclemgr_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRewardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_oraclemgr_oraclemgr_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Currency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_oraclemgr_oraclemgr_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCurrencyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_oraclemgr_oraclemgr_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCurrencyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_oraclemgr_oraclemgr_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAppCurrencyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_oraclemgr_oraclemgr_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAppCurrencyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_oraclemgr_oraclemgr_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCurrencyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_oraclemgr_oraclemgr_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCurrencyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_oraclemgr_oraclemgr_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrencyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_oraclemgr_oraclemgr_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrencyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_oraclemgr_oraclemgr_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrencyOnlyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_oraclemgr_oraclemgr_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrencyOnlyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_oraclemgr_oraclemgr_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrenciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_oraclemgr_oraclemgr_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrenciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_oraclemgr_oraclemgr_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppCurrenciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_oraclemgr_oraclemgr_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppCurrenciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_oraclemgr_oraclemgr_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCurrencyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_oraclemgr_oraclemgr_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCurrencyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_oraclemgr_oraclemgr_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyAmount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_oraclemgr_oraclemgr_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_oraclemgr_oraclemgr_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CurrencyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_oraclemgr_oraclemgr_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   48,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_oraclemgr_oraclemgr_proto_goTypes,
		DependencyIndexes: file_npool_oraclemgr_oraclemgr_proto_depIdxs,
		MessageInfos:      file_npool_oraclemgr_oraclemgr_proto_msgTypes,
	}.Build()
	File_npool_oraclemgr_oraclemgr_proto = out.File
	file_npool_oraclemgr_oraclemgr_proto_rawDesc = nil
	file_npool_oraclemgr_oraclemgr_proto_goTypes = nil
	file_npool_oraclemgr_oraclemgr_proto_depIdxs = nil
}
