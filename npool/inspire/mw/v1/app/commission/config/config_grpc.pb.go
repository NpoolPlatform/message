// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/inspire/mw/v1/app/commission/config/config.proto

package config

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
	CreateAppCommissionConfig(ctx context.Context, in *CreateAppCommissionConfigRequest, opts ...grpc.CallOption) (*CreateAppCommissionConfigResponse, error)
	UpdateAppCommissionConfig(ctx context.Context, in *UpdateAppCommissionConfigRequest, opts ...grpc.CallOption) (*UpdateAppCommissionConfigResponse, error)
	GetAppCommissionConfig(ctx context.Context, in *GetAppCommissionConfigRequest, opts ...grpc.CallOption) (*GetAppCommissionConfigResponse, error)
	GetAppCommissionConfigs(ctx context.Context, in *GetAppCommissionConfigsRequest, opts ...grpc.CallOption) (*GetAppCommissionConfigsResponse, error)
	ExistAppCommissionConfigConds(ctx context.Context, in *ExistAppCommissionConfigCondsRequest, opts ...grpc.CallOption) (*ExistAppCommissionConfigCondsResponse, error)
	DeleteAppCommissionConfig(ctx context.Context, in *DeleteAppCommissionConfigRequest, opts ...grpc.CallOption) (*DeleteAppCommissionConfigResponse, error)
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) CreateAppCommissionConfig(ctx context.Context, in *CreateAppCommissionConfigRequest, opts ...grpc.CallOption) (*CreateAppCommissionConfigResponse, error) {
	out := new(CreateAppCommissionConfigResponse)
	err := c.cc.Invoke(ctx, "/inspire.middleware.app.commission.config.v1.Middleware/CreateAppCommissionConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) UpdateAppCommissionConfig(ctx context.Context, in *UpdateAppCommissionConfigRequest, opts ...grpc.CallOption) (*UpdateAppCommissionConfigResponse, error) {
	out := new(UpdateAppCommissionConfigResponse)
	err := c.cc.Invoke(ctx, "/inspire.middleware.app.commission.config.v1.Middleware/UpdateAppCommissionConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetAppCommissionConfig(ctx context.Context, in *GetAppCommissionConfigRequest, opts ...grpc.CallOption) (*GetAppCommissionConfigResponse, error) {
	out := new(GetAppCommissionConfigResponse)
	err := c.cc.Invoke(ctx, "/inspire.middleware.app.commission.config.v1.Middleware/GetAppCommissionConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetAppCommissionConfigs(ctx context.Context, in *GetAppCommissionConfigsRequest, opts ...grpc.CallOption) (*GetAppCommissionConfigsResponse, error) {
	out := new(GetAppCommissionConfigsResponse)
	err := c.cc.Invoke(ctx, "/inspire.middleware.app.commission.config.v1.Middleware/GetAppCommissionConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ExistAppCommissionConfigConds(ctx context.Context, in *ExistAppCommissionConfigCondsRequest, opts ...grpc.CallOption) (*ExistAppCommissionConfigCondsResponse, error) {
	out := new(ExistAppCommissionConfigCondsResponse)
	err := c.cc.Invoke(ctx, "/inspire.middleware.app.commission.config.v1.Middleware/ExistAppCommissionConfigConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) DeleteAppCommissionConfig(ctx context.Context, in *DeleteAppCommissionConfigRequest, opts ...grpc.CallOption) (*DeleteAppCommissionConfigResponse, error) {
	out := new(DeleteAppCommissionConfigResponse)
	err := c.cc.Invoke(ctx, "/inspire.middleware.app.commission.config.v1.Middleware/DeleteAppCommissionConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
	CreateAppCommissionConfig(context.Context, *CreateAppCommissionConfigRequest) (*CreateAppCommissionConfigResponse, error)
	UpdateAppCommissionConfig(context.Context, *UpdateAppCommissionConfigRequest) (*UpdateAppCommissionConfigResponse, error)
	GetAppCommissionConfig(context.Context, *GetAppCommissionConfigRequest) (*GetAppCommissionConfigResponse, error)
	GetAppCommissionConfigs(context.Context, *GetAppCommissionConfigsRequest) (*GetAppCommissionConfigsResponse, error)
	ExistAppCommissionConfigConds(context.Context, *ExistAppCommissionConfigCondsRequest) (*ExistAppCommissionConfigCondsResponse, error)
	DeleteAppCommissionConfig(context.Context, *DeleteAppCommissionConfigRequest) (*DeleteAppCommissionConfigResponse, error)
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) CreateAppCommissionConfig(context.Context, *CreateAppCommissionConfigRequest) (*CreateAppCommissionConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppCommissionConfig not implemented")
}
func (UnimplementedMiddlewareServer) UpdateAppCommissionConfig(context.Context, *UpdateAppCommissionConfigRequest) (*UpdateAppCommissionConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppCommissionConfig not implemented")
}
func (UnimplementedMiddlewareServer) GetAppCommissionConfig(context.Context, *GetAppCommissionConfigRequest) (*GetAppCommissionConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppCommissionConfig not implemented")
}
func (UnimplementedMiddlewareServer) GetAppCommissionConfigs(context.Context, *GetAppCommissionConfigsRequest) (*GetAppCommissionConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppCommissionConfigs not implemented")
}
func (UnimplementedMiddlewareServer) ExistAppCommissionConfigConds(context.Context, *ExistAppCommissionConfigCondsRequest) (*ExistAppCommissionConfigCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistAppCommissionConfigConds not implemented")
}
func (UnimplementedMiddlewareServer) DeleteAppCommissionConfig(context.Context, *DeleteAppCommissionConfigRequest) (*DeleteAppCommissionConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppCommissionConfig not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_CreateAppCommissionConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppCommissionConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateAppCommissionConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.middleware.app.commission.config.v1.Middleware/CreateAppCommissionConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateAppCommissionConfig(ctx, req.(*CreateAppCommissionConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_UpdateAppCommissionConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppCommissionConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).UpdateAppCommissionConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.middleware.app.commission.config.v1.Middleware/UpdateAppCommissionConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).UpdateAppCommissionConfig(ctx, req.(*UpdateAppCommissionConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetAppCommissionConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppCommissionConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetAppCommissionConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.middleware.app.commission.config.v1.Middleware/GetAppCommissionConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetAppCommissionConfig(ctx, req.(*GetAppCommissionConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetAppCommissionConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppCommissionConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetAppCommissionConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.middleware.app.commission.config.v1.Middleware/GetAppCommissionConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetAppCommissionConfigs(ctx, req.(*GetAppCommissionConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ExistAppCommissionConfigConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistAppCommissionConfigCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ExistAppCommissionConfigConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.middleware.app.commission.config.v1.Middleware/ExistAppCommissionConfigConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ExistAppCommissionConfigConds(ctx, req.(*ExistAppCommissionConfigCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_DeleteAppCommissionConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppCommissionConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).DeleteAppCommissionConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.middleware.app.commission.config.v1.Middleware/DeleteAppCommissionConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).DeleteAppCommissionConfig(ctx, req.(*DeleteAppCommissionConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inspire.middleware.app.commission.config.v1.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAppCommissionConfig",
			Handler:    _Middleware_CreateAppCommissionConfig_Handler,
		},
		{
			MethodName: "UpdateAppCommissionConfig",
			Handler:    _Middleware_UpdateAppCommissionConfig_Handler,
		},
		{
			MethodName: "GetAppCommissionConfig",
			Handler:    _Middleware_GetAppCommissionConfig_Handler,
		},
		{
			MethodName: "GetAppCommissionConfigs",
			Handler:    _Middleware_GetAppCommissionConfigs_Handler,
		},
		{
			MethodName: "ExistAppCommissionConfigConds",
			Handler:    _Middleware_ExistAppCommissionConfigConds_Handler,
		},
		{
			MethodName: "DeleteAppCommissionConfig",
			Handler:    _Middleware_DeleteAppCommissionConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/inspire/mw/v1/app/commission/config/config.proto",
}
