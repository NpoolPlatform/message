// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/inspire/mw/v1/user/reward/reward.proto

package reward

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Middleware_GetUserReward_FullMethodName        = "/inspire.middleware.user.reward.v1.Middleware/GetUserReward"
	Middleware_GetUserRewards_FullMethodName       = "/inspire.middleware.user.reward.v1.Middleware/GetUserRewards"
	Middleware_ExistUserRewardConds_FullMethodName = "/inspire.middleware.user.reward.v1.Middleware/ExistUserRewardConds"
	Middleware_DeleteUserReward_FullMethodName     = "/inspire.middleware.user.reward.v1.Middleware/DeleteUserReward"
	Middleware_AddUserReward_FullMethodName        = "/inspire.middleware.user.reward.v1.Middleware/AddUserReward"
	Middleware_SubUserReward_FullMethodName        = "/inspire.middleware.user.reward.v1.Middleware/SubUserReward"
)

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
	GetUserReward(ctx context.Context, in *GetUserRewardRequest, opts ...grpc.CallOption) (*GetUserRewardResponse, error)
	GetUserRewards(ctx context.Context, in *GetUserRewardsRequest, opts ...grpc.CallOption) (*GetUserRewardsResponse, error)
	ExistUserRewardConds(ctx context.Context, in *ExistUserRewardCondsRequest, opts ...grpc.CallOption) (*ExistUserRewardCondsResponse, error)
	DeleteUserReward(ctx context.Context, in *DeleteUserRewardRequest, opts ...grpc.CallOption) (*DeleteUserRewardResponse, error)
	AddUserReward(ctx context.Context, in *AddUserRewardRequest, opts ...grpc.CallOption) (*AddUserRewardResponse, error)
	SubUserReward(ctx context.Context, in *SubUserRewardRequest, opts ...grpc.CallOption) (*SubUserRewardResponse, error)
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) GetUserReward(ctx context.Context, in *GetUserRewardRequest, opts ...grpc.CallOption) (*GetUserRewardResponse, error) {
	out := new(GetUserRewardResponse)
	err := c.cc.Invoke(ctx, Middleware_GetUserReward_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetUserRewards(ctx context.Context, in *GetUserRewardsRequest, opts ...grpc.CallOption) (*GetUserRewardsResponse, error) {
	out := new(GetUserRewardsResponse)
	err := c.cc.Invoke(ctx, Middleware_GetUserRewards_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ExistUserRewardConds(ctx context.Context, in *ExistUserRewardCondsRequest, opts ...grpc.CallOption) (*ExistUserRewardCondsResponse, error) {
	out := new(ExistUserRewardCondsResponse)
	err := c.cc.Invoke(ctx, Middleware_ExistUserRewardConds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) DeleteUserReward(ctx context.Context, in *DeleteUserRewardRequest, opts ...grpc.CallOption) (*DeleteUserRewardResponse, error) {
	out := new(DeleteUserRewardResponse)
	err := c.cc.Invoke(ctx, Middleware_DeleteUserReward_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) AddUserReward(ctx context.Context, in *AddUserRewardRequest, opts ...grpc.CallOption) (*AddUserRewardResponse, error) {
	out := new(AddUserRewardResponse)
	err := c.cc.Invoke(ctx, Middleware_AddUserReward_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) SubUserReward(ctx context.Context, in *SubUserRewardRequest, opts ...grpc.CallOption) (*SubUserRewardResponse, error) {
	out := new(SubUserRewardResponse)
	err := c.cc.Invoke(ctx, Middleware_SubUserReward_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
	GetUserReward(context.Context, *GetUserRewardRequest) (*GetUserRewardResponse, error)
	GetUserRewards(context.Context, *GetUserRewardsRequest) (*GetUserRewardsResponse, error)
	ExistUserRewardConds(context.Context, *ExistUserRewardCondsRequest) (*ExistUserRewardCondsResponse, error)
	DeleteUserReward(context.Context, *DeleteUserRewardRequest) (*DeleteUserRewardResponse, error)
	AddUserReward(context.Context, *AddUserRewardRequest) (*AddUserRewardResponse, error)
	SubUserReward(context.Context, *SubUserRewardRequest) (*SubUserRewardResponse, error)
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) GetUserReward(context.Context, *GetUserRewardRequest) (*GetUserRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserReward not implemented")
}
func (UnimplementedMiddlewareServer) GetUserRewards(context.Context, *GetUserRewardsRequest) (*GetUserRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRewards not implemented")
}
func (UnimplementedMiddlewareServer) ExistUserRewardConds(context.Context, *ExistUserRewardCondsRequest) (*ExistUserRewardCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistUserRewardConds not implemented")
}
func (UnimplementedMiddlewareServer) DeleteUserReward(context.Context, *DeleteUserRewardRequest) (*DeleteUserRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserReward not implemented")
}
func (UnimplementedMiddlewareServer) AddUserReward(context.Context, *AddUserRewardRequest) (*AddUserRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserReward not implemented")
}
func (UnimplementedMiddlewareServer) SubUserReward(context.Context, *SubUserRewardRequest) (*SubUserRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubUserReward not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_GetUserReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetUserReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetUserReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetUserReward(ctx, req.(*GetUserRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetUserRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetUserRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetUserRewards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetUserRewards(ctx, req.(*GetUserRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ExistUserRewardConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistUserRewardCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ExistUserRewardConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_ExistUserRewardConds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ExistUserRewardConds(ctx, req.(*ExistUserRewardCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_DeleteUserReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).DeleteUserReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_DeleteUserReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).DeleteUserReward(ctx, req.(*DeleteUserRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_AddUserReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).AddUserReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_AddUserReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).AddUserReward(ctx, req.(*AddUserRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_SubUserReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubUserRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).SubUserReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_SubUserReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).SubUserReward(ctx, req.(*SubUserRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inspire.middleware.user.reward.v1.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserReward",
			Handler:    _Middleware_GetUserReward_Handler,
		},
		{
			MethodName: "GetUserRewards",
			Handler:    _Middleware_GetUserRewards_Handler,
		},
		{
			MethodName: "ExistUserRewardConds",
			Handler:    _Middleware_ExistUserRewardConds_Handler,
		},
		{
			MethodName: "DeleteUserReward",
			Handler:    _Middleware_DeleteUserReward_Handler,
		},
		{
			MethodName: "AddUserReward",
			Handler:    _Middleware_AddUserReward_Handler,
		},
		{
			MethodName: "SubUserReward",
			Handler:    _Middleware_SubUserReward_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/inspire/mw/v1/user/reward/reward.proto",
}
