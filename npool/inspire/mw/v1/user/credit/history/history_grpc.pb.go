// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/inspire/mw/v1/user/credit/history/history.proto

package history

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Middleware_CreateUserCreditHistory_FullMethodName     = "/inspire.middleware.user.credit.history.v1.Middleware/CreateUserCreditHistory"
	Middleware_UpdateUserCreditHistory_FullMethodName     = "/inspire.middleware.user.credit.history.v1.Middleware/UpdateUserCreditHistory"
	Middleware_GetUserCreditHistory_FullMethodName        = "/inspire.middleware.user.credit.history.v1.Middleware/GetUserCreditHistory"
	Middleware_GetUserCreditHistories_FullMethodName      = "/inspire.middleware.user.credit.history.v1.Middleware/GetUserCreditHistories"
	Middleware_ExistUserCreditHistoryConds_FullMethodName = "/inspire.middleware.user.credit.history.v1.Middleware/ExistUserCreditHistoryConds"
	Middleware_DeleteUserCreditHistory_FullMethodName     = "/inspire.middleware.user.credit.history.v1.Middleware/DeleteUserCreditHistory"
)

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
	CreateUserCreditHistory(ctx context.Context, in *CreateUserCreditHistoryRequest, opts ...grpc.CallOption) (*CreateUserCreditHistoryResponse, error)
	UpdateUserCreditHistory(ctx context.Context, in *UpdateUserCreditHistoryRequest, opts ...grpc.CallOption) (*UpdateUserCreditHistoryResponse, error)
	GetUserCreditHistory(ctx context.Context, in *GetUserCreditHistoryRequest, opts ...grpc.CallOption) (*GetUserCreditHistoryResponse, error)
	GetUserCreditHistories(ctx context.Context, in *GetUserCreditHistoriesRequest, opts ...grpc.CallOption) (*GetUserCreditHistoriesResponse, error)
	ExistUserCreditHistoryConds(ctx context.Context, in *ExistUserCreditHistoryCondsRequest, opts ...grpc.CallOption) (*ExistUserCreditHistoryCondsResponse, error)
	DeleteUserCreditHistory(ctx context.Context, in *DeleteUserCreditHistoryRequest, opts ...grpc.CallOption) (*DeleteUserCreditHistoryResponse, error)
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) CreateUserCreditHistory(ctx context.Context, in *CreateUserCreditHistoryRequest, opts ...grpc.CallOption) (*CreateUserCreditHistoryResponse, error) {
	out := new(CreateUserCreditHistoryResponse)
	err := c.cc.Invoke(ctx, Middleware_CreateUserCreditHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) UpdateUserCreditHistory(ctx context.Context, in *UpdateUserCreditHistoryRequest, opts ...grpc.CallOption) (*UpdateUserCreditHistoryResponse, error) {
	out := new(UpdateUserCreditHistoryResponse)
	err := c.cc.Invoke(ctx, Middleware_UpdateUserCreditHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetUserCreditHistory(ctx context.Context, in *GetUserCreditHistoryRequest, opts ...grpc.CallOption) (*GetUserCreditHistoryResponse, error) {
	out := new(GetUserCreditHistoryResponse)
	err := c.cc.Invoke(ctx, Middleware_GetUserCreditHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetUserCreditHistories(ctx context.Context, in *GetUserCreditHistoriesRequest, opts ...grpc.CallOption) (*GetUserCreditHistoriesResponse, error) {
	out := new(GetUserCreditHistoriesResponse)
	err := c.cc.Invoke(ctx, Middleware_GetUserCreditHistories_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ExistUserCreditHistoryConds(ctx context.Context, in *ExistUserCreditHistoryCondsRequest, opts ...grpc.CallOption) (*ExistUserCreditHistoryCondsResponse, error) {
	out := new(ExistUserCreditHistoryCondsResponse)
	err := c.cc.Invoke(ctx, Middleware_ExistUserCreditHistoryConds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) DeleteUserCreditHistory(ctx context.Context, in *DeleteUserCreditHistoryRequest, opts ...grpc.CallOption) (*DeleteUserCreditHistoryResponse, error) {
	out := new(DeleteUserCreditHistoryResponse)
	err := c.cc.Invoke(ctx, Middleware_DeleteUserCreditHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
	CreateUserCreditHistory(context.Context, *CreateUserCreditHistoryRequest) (*CreateUserCreditHistoryResponse, error)
	UpdateUserCreditHistory(context.Context, *UpdateUserCreditHistoryRequest) (*UpdateUserCreditHistoryResponse, error)
	GetUserCreditHistory(context.Context, *GetUserCreditHistoryRequest) (*GetUserCreditHistoryResponse, error)
	GetUserCreditHistories(context.Context, *GetUserCreditHistoriesRequest) (*GetUserCreditHistoriesResponse, error)
	ExistUserCreditHistoryConds(context.Context, *ExistUserCreditHistoryCondsRequest) (*ExistUserCreditHistoryCondsResponse, error)
	DeleteUserCreditHistory(context.Context, *DeleteUserCreditHistoryRequest) (*DeleteUserCreditHistoryResponse, error)
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) CreateUserCreditHistory(context.Context, *CreateUserCreditHistoryRequest) (*CreateUserCreditHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserCreditHistory not implemented")
}
func (UnimplementedMiddlewareServer) UpdateUserCreditHistory(context.Context, *UpdateUserCreditHistoryRequest) (*UpdateUserCreditHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserCreditHistory not implemented")
}
func (UnimplementedMiddlewareServer) GetUserCreditHistory(context.Context, *GetUserCreditHistoryRequest) (*GetUserCreditHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCreditHistory not implemented")
}
func (UnimplementedMiddlewareServer) GetUserCreditHistories(context.Context, *GetUserCreditHistoriesRequest) (*GetUserCreditHistoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCreditHistories not implemented")
}
func (UnimplementedMiddlewareServer) ExistUserCreditHistoryConds(context.Context, *ExistUserCreditHistoryCondsRequest) (*ExistUserCreditHistoryCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistUserCreditHistoryConds not implemented")
}
func (UnimplementedMiddlewareServer) DeleteUserCreditHistory(context.Context, *DeleteUserCreditHistoryRequest) (*DeleteUserCreditHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserCreditHistory not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_CreateUserCreditHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserCreditHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateUserCreditHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_CreateUserCreditHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateUserCreditHistory(ctx, req.(*CreateUserCreditHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_UpdateUserCreditHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserCreditHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).UpdateUserCreditHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_UpdateUserCreditHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).UpdateUserCreditHistory(ctx, req.(*UpdateUserCreditHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetUserCreditHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCreditHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetUserCreditHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetUserCreditHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetUserCreditHistory(ctx, req.(*GetUserCreditHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetUserCreditHistories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCreditHistoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetUserCreditHistories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetUserCreditHistories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetUserCreditHistories(ctx, req.(*GetUserCreditHistoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ExistUserCreditHistoryConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistUserCreditHistoryCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ExistUserCreditHistoryConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_ExistUserCreditHistoryConds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ExistUserCreditHistoryConds(ctx, req.(*ExistUserCreditHistoryCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_DeleteUserCreditHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserCreditHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).DeleteUserCreditHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_DeleteUserCreditHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).DeleteUserCreditHistory(ctx, req.(*DeleteUserCreditHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inspire.middleware.user.credit.history.v1.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserCreditHistory",
			Handler:    _Middleware_CreateUserCreditHistory_Handler,
		},
		{
			MethodName: "UpdateUserCreditHistory",
			Handler:    _Middleware_UpdateUserCreditHistory_Handler,
		},
		{
			MethodName: "GetUserCreditHistory",
			Handler:    _Middleware_GetUserCreditHistory_Handler,
		},
		{
			MethodName: "GetUserCreditHistories",
			Handler:    _Middleware_GetUserCreditHistories_Handler,
		},
		{
			MethodName: "ExistUserCreditHistoryConds",
			Handler:    _Middleware_ExistUserCreditHistoryConds_Handler,
		},
		{
			MethodName: "DeleteUserCreditHistory",
			Handler:    _Middleware_DeleteUserCreditHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/inspire/mw/v1/user/credit/history/history.proto",
}
