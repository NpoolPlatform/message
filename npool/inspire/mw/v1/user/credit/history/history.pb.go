// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.18.1
// source: npool/inspire/mw/v1/user/credit/history/history.proto

package history

import (
	v1 "github.com/NpoolPlatform/message/npool/basetypes/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserCreditHistoryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      *uint32 `protobuf:"varint,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID   *string `protobuf:"bytes,20,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	AppID   *string `protobuf:"bytes,30,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	UserID  *string `protobuf:"bytes,40,opt,name=UserID,proto3,oneof" json:"UserID,omitempty"`
	TaskID  *string `protobuf:"bytes,50,opt,name=TaskID,proto3,oneof" json:"TaskID,omitempty"`
	EventID *string `protobuf:"bytes,60,opt,name=EventID,proto3,oneof" json:"EventID,omitempty"`
	Credits *string `protobuf:"bytes,70,opt,name=Credits,proto3,oneof" json:"Credits,omitempty"`
}

func (x *UserCreditHistoryReq) Reset() {
	*x = UserCreditHistoryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mw_v1_user_credit_history_history_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCreditHistoryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCreditHistoryReq) ProtoMessage() {}

func (x *UserCreditHistoryReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mw_v1_user_credit_history_history_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCreditHistoryReq.ProtoReflect.Descriptor instead.
func (*UserCreditHistoryReq) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mw_v1_user_credit_history_history_proto_rawDescGZIP(), []int{0}
}

func (x *UserCreditHistoryReq) GetID() uint32 {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return 0
}

func (x *UserCreditHistoryReq) GetEntID() string {
	if x != nil && x.EntID != nil {
		return *x.EntID
	}
	return ""
}

func (x *UserCreditHistoryReq) GetAppID() string {
	if x != nil && x.AppID != nil {
		return *x.AppID
	}
	return ""
}

func (x *UserCreditHistoryReq) GetUserID() string {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return ""
}

func (x *UserCreditHistoryReq) GetTaskID() string {
	if x != nil && x.TaskID != nil {
		return *x.TaskID
	}
	return ""
}

func (x *UserCreditHistoryReq) GetEventID() string {
	if x != nil && x.EventID != nil {
		return *x.EventID
	}
	return ""
}

func (x *UserCreditHistoryReq) GetCredits() string {
	if x != nil && x.Credits != nil {
		return *x.Credits
	}
	return ""
}

type UserCreditHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: sql:"id"
	ID uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty" sql:"id"`
	// @inject_tag: sql:"ent_id"
	EntID string `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty" sql:"ent_id"`
	// @inject_tag: sql:"app_id"
	AppID string `protobuf:"bytes,30,opt,name=AppID,proto3" json:"AppID,omitempty" sql:"app_id"`
	// @inject_tag: sql:"user_id"
	UserID string `protobuf:"bytes,40,opt,name=UserID,proto3" json:"UserID,omitempty" sql:"user_id"`
	// @inject_tag: sql:"task_id"
	TaskID string `protobuf:"bytes,50,opt,name=TaskID,proto3" json:"TaskID,omitempty" sql:"task_id"`
	// @inject_tag: sql:"event_id"
	EventID string `protobuf:"bytes,60,opt,name=EventID,proto3" json:"EventID,omitempty" sql:"event_id"`
	// @inject_tag: sql:"credits"
	Credits string `protobuf:"bytes,70,opt,name=Credits,proto3" json:"Credits,omitempty" sql:"credits"`
	// @inject_tag: sql:"created_at"
	CreatedAt uint32 `protobuf:"varint,1000,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
	// @inject_tag: sql:"updated_at"
	UpdatedAt uint32 `protobuf:"varint,1010,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty" sql:"updated_at"`
}

func (x *UserCreditHistory) Reset() {
	*x = UserCreditHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mw_v1_user_credit_history_history_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCreditHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCreditHistory) ProtoMessage() {}

func (x *UserCreditHistory) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mw_v1_user_credit_history_history_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCreditHistory.ProtoReflect.Descriptor instead.
func (*UserCreditHistory) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mw_v1_user_credit_history_history_proto_rawDescGZIP(), []int{1}
}

func (x *UserCreditHistory) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *UserCreditHistory) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *UserCreditHistory) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *UserCreditHistory) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UserCreditHistory) GetTaskID() string {
	if x != nil {
		return x.TaskID
	}
	return ""
}

func (x *UserCreditHistory) GetEventID() string {
	if x != nil {
		return x.EventID
	}
	return ""
}

func (x *UserCreditHistory) GetCredits() string {
	if x != nil {
		return x.Credits
	}
	return ""
}

func (x *UserCreditHistory) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *UserCreditHistory) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntID   *v1.StringVal      `protobuf:"bytes,10,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	AppID   *v1.StringVal      `protobuf:"bytes,20,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	EntIDs  *v1.StringSliceVal `protobuf:"bytes,30,opt,name=EntIDs,proto3,oneof" json:"EntIDs,omitempty"`
	UserID  *v1.StringVal      `protobuf:"bytes,40,opt,name=UserID,proto3,oneof" json:"UserID,omitempty"`
	TaskID  *v1.StringVal      `protobuf:"bytes,50,opt,name=TaskID,proto3,oneof" json:"TaskID,omitempty"`
	EventID *v1.StringVal      `protobuf:"bytes,60,opt,name=EventID,proto3,oneof" json:"EventID,omitempty"`
	ID      *v1.Uint32Val      `protobuf:"bytes,70,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mw_v1_user_credit_history_history_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mw_v1_user_credit_history_history_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mw_v1_user_credit_history_history_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetEntID() *v1.StringVal {
	if x != nil {
		return x.EntID
	}
	return nil
}

func (x *Conds) GetAppID() *v1.StringVal {
	if x != nil {
		return x.AppID
	}
	return nil
}

func (x *Conds) GetEntIDs() *v1.StringSliceVal {
	if x != nil {
		return x.EntIDs
	}
	return nil
}

func (x *Conds) GetUserID() *v1.StringVal {
	if x != nil {
		return x.UserID
	}
	return nil
}

func (x *Conds) GetTaskID() *v1.StringVal {
	if x != nil {
		return x.TaskID
	}
	return nil
}

func (x *Conds) GetEventID() *v1.StringVal {
	if x != nil {
		return x.EventID
	}
	return nil
}

func (x *Conds) GetID() *v1.Uint32Val {
	if x != nil {
		return x.ID
	}
	return nil
}

type GetUserCreditHistoriesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetUserCreditHistoriesRequest) Reset() {
	*x = GetUserCreditHistoriesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mw_v1_user_credit_history_history_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserCreditHistoriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCreditHistoriesRequest) ProtoMessage() {}

func (x *GetUserCreditHistoriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mw_v1_user_credit_history_history_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCreditHistoriesRequest.ProtoReflect.Descriptor instead.
func (*GetUserCreditHistoriesRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mw_v1_user_credit_history_history_proto_rawDescGZIP(), []int{3}
}

func (x *GetUserCreditHistoriesRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetUserCreditHistoriesRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetUserCreditHistoriesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetUserCreditHistoriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*UserCreditHistory `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32               `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetUserCreditHistoriesResponse) Reset() {
	*x = GetUserCreditHistoriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mw_v1_user_credit_history_history_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserCreditHistoriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCreditHistoriesResponse) ProtoMessage() {}

func (x *GetUserCreditHistoriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mw_v1_user_credit_history_history_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCreditHistoriesResponse.ProtoReflect.Descriptor instead.
func (*GetUserCreditHistoriesResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mw_v1_user_credit_history_history_proto_rawDescGZIP(), []int{4}
}

func (x *GetUserCreditHistoriesResponse) GetInfos() []*UserCreditHistory {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetUserCreditHistoriesResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type CreateUserCreditHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *UserCreditHistoryReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateUserCreditHistoryRequest) Reset() {
	*x = CreateUserCreditHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mw_v1_user_credit_history_history_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserCreditHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserCreditHistoryRequest) ProtoMessage() {}

func (x *CreateUserCreditHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mw_v1_user_credit_history_history_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserCreditHistoryRequest.ProtoReflect.Descriptor instead.
func (*CreateUserCreditHistoryRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mw_v1_user_credit_history_history_proto_rawDescGZIP(), []int{5}
}

func (x *CreateUserCreditHistoryRequest) GetInfo() *UserCreditHistoryReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateUserCreditHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *UserCreditHistory `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateUserCreditHistoryResponse) Reset() {
	*x = CreateUserCreditHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mw_v1_user_credit_history_history_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserCreditHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserCreditHistoryResponse) ProtoMessage() {}

func (x *CreateUserCreditHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mw_v1_user_credit_history_history_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserCreditHistoryResponse.ProtoReflect.Descriptor instead.
func (*CreateUserCreditHistoryResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mw_v1_user_credit_history_history_proto_rawDescGZIP(), []int{6}
}

func (x *CreateUserCreditHistoryResponse) GetInfo() *UserCreditHistory {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateUserCreditHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *UserCreditHistoryReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateUserCreditHistoryRequest) Reset() {
	*x = UpdateUserCreditHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mw_v1_user_credit_history_history_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserCreditHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserCreditHistoryRequest) ProtoMessage() {}

func (x *UpdateUserCreditHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mw_v1_user_credit_history_history_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserCreditHistoryRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserCreditHistoryRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mw_v1_user_credit_history_history_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateUserCreditHistoryRequest) GetInfo() *UserCreditHistoryReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateUserCreditHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *UserCreditHistory `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateUserCreditHistoryResponse) Reset() {
	*x = UpdateUserCreditHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mw_v1_user_credit_history_history_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserCreditHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserCreditHistoryResponse) ProtoMessage() {}

func (x *UpdateUserCreditHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mw_v1_user_credit_history_history_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserCreditHistoryResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserCreditHistoryResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mw_v1_user_credit_history_history_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateUserCreditHistoryResponse) GetInfo() *UserCreditHistory {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetUserCreditHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntID string `protobuf:"bytes,10,opt,name=EntID,proto3" json:"EntID,omitempty"`
}

func (x *GetUserCreditHistoryRequest) Reset() {
	*x = GetUserCreditHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mw_v1_user_credit_history_history_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserCreditHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCreditHistoryRequest) ProtoMessage() {}

func (x *GetUserCreditHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mw_v1_user_credit_history_history_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCreditHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetUserCreditHistoryRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mw_v1_user_credit_history_history_proto_rawDescGZIP(), []int{9}
}

func (x *GetUserCreditHistoryRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

type GetUserCreditHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *UserCreditHistory `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetUserCreditHistoryResponse) Reset() {
	*x = GetUserCreditHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mw_v1_user_credit_history_history_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserCreditHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCreditHistoryResponse) ProtoMessage() {}

func (x *GetUserCreditHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mw_v1_user_credit_history_history_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCreditHistoryResponse.ProtoReflect.Descriptor instead.
func (*GetUserCreditHistoryResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mw_v1_user_credit_history_history_proto_rawDescGZIP(), []int{10}
}

func (x *GetUserCreditHistoryResponse) GetInfo() *UserCreditHistory {
	if x != nil {
		return x.Info
	}
	return nil
}

type ExistUserCreditHistoryCondsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *ExistUserCreditHistoryCondsRequest) Reset() {
	*x = ExistUserCreditHistoryCondsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mw_v1_user_credit_history_history_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistUserCreditHistoryCondsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistUserCreditHistoryCondsRequest) ProtoMessage() {}

func (x *ExistUserCreditHistoryCondsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mw_v1_user_credit_history_history_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistUserCreditHistoryCondsRequest.ProtoReflect.Descriptor instead.
func (*ExistUserCreditHistoryCondsRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mw_v1_user_credit_history_history_proto_rawDescGZIP(), []int{11}
}

func (x *ExistUserCreditHistoryCondsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type ExistUserCreditHistoryCondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistUserCreditHistoryCondsResponse) Reset() {
	*x = ExistUserCreditHistoryCondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mw_v1_user_credit_history_history_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistUserCreditHistoryCondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistUserCreditHistoryCondsResponse) ProtoMessage() {}

func (x *ExistUserCreditHistoryCondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mw_v1_user_credit_history_history_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistUserCreditHistoryCondsResponse.ProtoReflect.Descriptor instead.
func (*ExistUserCreditHistoryCondsResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mw_v1_user_credit_history_history_proto_rawDescGZIP(), []int{12}
}

func (x *ExistUserCreditHistoryCondsResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type DeleteUserCreditHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *UserCreditHistoryReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteUserCreditHistoryRequest) Reset() {
	*x = DeleteUserCreditHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mw_v1_user_credit_history_history_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserCreditHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserCreditHistoryRequest) ProtoMessage() {}

func (x *DeleteUserCreditHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mw_v1_user_credit_history_history_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserCreditHistoryRequest.ProtoReflect.Descriptor instead.
func (*DeleteUserCreditHistoryRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mw_v1_user_credit_history_history_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteUserCreditHistoryRequest) GetInfo() *UserCreditHistoryReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type DeleteUserCreditHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *UserCreditHistory `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteUserCreditHistoryResponse) Reset() {
	*x = DeleteUserCreditHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mw_v1_user_credit_history_history_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserCreditHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserCreditHistoryResponse) ProtoMessage() {}

func (x *DeleteUserCreditHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mw_v1_user_credit_history_history_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserCreditHistoryResponse.ProtoReflect.Descriptor instead.
func (*DeleteUserCreditHistoryResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mw_v1_user_credit_history_history_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteUserCreditHistoryResponse) GetInfo() *UserCreditHistory {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_inspire_mw_v1_user_credit_history_history_proto protoreflect.FileDescriptor

var file_npool_inspire_mw_v1_user_credit_history_history_proto_rawDesc = []byte{
	0x0a, 0x35, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f,
	0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x63, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x29, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e,
	0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xa2, 0x02, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x07, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x05, 0x52, 0x07, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x07, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06,
	0x52, 0x07, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03,
	0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x41, 0x70, 0x70, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x73, 0x22, 0xf1, 0x01, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x46, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xf2, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xc4, 0x03, 0x0a, 0x05, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x05, 0x45,
	0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48,
	0x01, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x06, 0x45,
	0x6e, 0x74, 0x49, 0x44, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x02, 0x52, 0x06, 0x45, 0x6e, 0x74,
	0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48,
	0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x06,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x04, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x12, 0x36, 0x0a, 0x07, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x3c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x05, 0x52, 0x07,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48,
	0x06, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x74,
	0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x41, 0x70, 0x70, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44,
	0x22, 0x95, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x46, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x05, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x2e, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x75, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x73, 0x0a, 0x1f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x50, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x2e, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x75, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3f, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x73, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x69, 0x6e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x33, 0x0a,
	0x1b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74,
	0x49, 0x44, 0x22, 0x70, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x50, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6c, 0x0a, 0x22, 0x45, 0x78, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x05, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x69, 0x6e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x22, 0x39, 0x0a, 0x23, 0x45, 0x78, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x75, 0x0a,
	0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x53, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x2e, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x73, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x82, 0x09, 0x0a, 0x0a, 0x4d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x12, 0xb2, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x49, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x4a, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xb2, 0x01,
	0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x49, 0x2e, 0x69, 0x6e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x4a, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0xa9, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x46, 0x2e, 0x69, 0x6e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x2e, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x47, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xaf,
	0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x48, 0x2e, 0x69, 0x6e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65,
	0x64, 0x69, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x49, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0xbe, 0x01, 0x0a, 0x1b, 0x45, 0x78, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72,
	0x65, 0x64, 0x69, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x4d, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69,
	0x74, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x4e, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74,
	0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0xea, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x49, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x2e, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4a, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x2e, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x72, 0x65, 0x64, 0x69, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32, 0x3a, 0x01, 0x2a, 0x22,
	0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x42, 0x4a,
	0x5a, 0x48, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f,
	0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x63, 0x72, 0x65, 0x64,
	0x69, 0x74, 0x2f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_npool_inspire_mw_v1_user_credit_history_history_proto_rawDescOnce sync.Once
	file_npool_inspire_mw_v1_user_credit_history_history_proto_rawDescData = file_npool_inspire_mw_v1_user_credit_history_history_proto_rawDesc
)

func file_npool_inspire_mw_v1_user_credit_history_history_proto_rawDescGZIP() []byte {
	file_npool_inspire_mw_v1_user_credit_history_history_proto_rawDescOnce.Do(func() {
		file_npool_inspire_mw_v1_user_credit_history_history_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_inspire_mw_v1_user_credit_history_history_proto_rawDescData)
	})
	return file_npool_inspire_mw_v1_user_credit_history_history_proto_rawDescData
}

var file_npool_inspire_mw_v1_user_credit_history_history_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_npool_inspire_mw_v1_user_credit_history_history_proto_goTypes = []interface{}{
	(*UserCreditHistoryReq)(nil),                // 0: inspire.middleware.user.credit.history.v1.UserCreditHistoryReq
	(*UserCreditHistory)(nil),                   // 1: inspire.middleware.user.credit.history.v1.UserCreditHistory
	(*Conds)(nil),                               // 2: inspire.middleware.user.credit.history.v1.Conds
	(*GetUserCreditHistoriesRequest)(nil),       // 3: inspire.middleware.user.credit.history.v1.GetUserCreditHistoriesRequest
	(*GetUserCreditHistoriesResponse)(nil),      // 4: inspire.middleware.user.credit.history.v1.GetUserCreditHistoriesResponse
	(*CreateUserCreditHistoryRequest)(nil),      // 5: inspire.middleware.user.credit.history.v1.CreateUserCreditHistoryRequest
	(*CreateUserCreditHistoryResponse)(nil),     // 6: inspire.middleware.user.credit.history.v1.CreateUserCreditHistoryResponse
	(*UpdateUserCreditHistoryRequest)(nil),      // 7: inspire.middleware.user.credit.history.v1.UpdateUserCreditHistoryRequest
	(*UpdateUserCreditHistoryResponse)(nil),     // 8: inspire.middleware.user.credit.history.v1.UpdateUserCreditHistoryResponse
	(*GetUserCreditHistoryRequest)(nil),         // 9: inspire.middleware.user.credit.history.v1.GetUserCreditHistoryRequest
	(*GetUserCreditHistoryResponse)(nil),        // 10: inspire.middleware.user.credit.history.v1.GetUserCreditHistoryResponse
	(*ExistUserCreditHistoryCondsRequest)(nil),  // 11: inspire.middleware.user.credit.history.v1.ExistUserCreditHistoryCondsRequest
	(*ExistUserCreditHistoryCondsResponse)(nil), // 12: inspire.middleware.user.credit.history.v1.ExistUserCreditHistoryCondsResponse
	(*DeleteUserCreditHistoryRequest)(nil),      // 13: inspire.middleware.user.credit.history.v1.DeleteUserCreditHistoryRequest
	(*DeleteUserCreditHistoryResponse)(nil),     // 14: inspire.middleware.user.credit.history.v1.DeleteUserCreditHistoryResponse
	(*v1.StringVal)(nil),                        // 15: basetypes.v1.StringVal
	(*v1.StringSliceVal)(nil),                   // 16: basetypes.v1.StringSliceVal
	(*v1.Uint32Val)(nil),                        // 17: basetypes.v1.Uint32Val
}
var file_npool_inspire_mw_v1_user_credit_history_history_proto_depIdxs = []int32{
	15, // 0: inspire.middleware.user.credit.history.v1.Conds.EntID:type_name -> basetypes.v1.StringVal
	15, // 1: inspire.middleware.user.credit.history.v1.Conds.AppID:type_name -> basetypes.v1.StringVal
	16, // 2: inspire.middleware.user.credit.history.v1.Conds.EntIDs:type_name -> basetypes.v1.StringSliceVal
	15, // 3: inspire.middleware.user.credit.history.v1.Conds.UserID:type_name -> basetypes.v1.StringVal
	15, // 4: inspire.middleware.user.credit.history.v1.Conds.TaskID:type_name -> basetypes.v1.StringVal
	15, // 5: inspire.middleware.user.credit.history.v1.Conds.EventID:type_name -> basetypes.v1.StringVal
	17, // 6: inspire.middleware.user.credit.history.v1.Conds.ID:type_name -> basetypes.v1.Uint32Val
	2,  // 7: inspire.middleware.user.credit.history.v1.GetUserCreditHistoriesRequest.Conds:type_name -> inspire.middleware.user.credit.history.v1.Conds
	1,  // 8: inspire.middleware.user.credit.history.v1.GetUserCreditHistoriesResponse.Infos:type_name -> inspire.middleware.user.credit.history.v1.UserCreditHistory
	0,  // 9: inspire.middleware.user.credit.history.v1.CreateUserCreditHistoryRequest.Info:type_name -> inspire.middleware.user.credit.history.v1.UserCreditHistoryReq
	1,  // 10: inspire.middleware.user.credit.history.v1.CreateUserCreditHistoryResponse.Info:type_name -> inspire.middleware.user.credit.history.v1.UserCreditHistory
	0,  // 11: inspire.middleware.user.credit.history.v1.UpdateUserCreditHistoryRequest.Info:type_name -> inspire.middleware.user.credit.history.v1.UserCreditHistoryReq
	1,  // 12: inspire.middleware.user.credit.history.v1.UpdateUserCreditHistoryResponse.Info:type_name -> inspire.middleware.user.credit.history.v1.UserCreditHistory
	1,  // 13: inspire.middleware.user.credit.history.v1.GetUserCreditHistoryResponse.Info:type_name -> inspire.middleware.user.credit.history.v1.UserCreditHistory
	2,  // 14: inspire.middleware.user.credit.history.v1.ExistUserCreditHistoryCondsRequest.Conds:type_name -> inspire.middleware.user.credit.history.v1.Conds
	0,  // 15: inspire.middleware.user.credit.history.v1.DeleteUserCreditHistoryRequest.Info:type_name -> inspire.middleware.user.credit.history.v1.UserCreditHistoryReq
	1,  // 16: inspire.middleware.user.credit.history.v1.DeleteUserCreditHistoryResponse.Info:type_name -> inspire.middleware.user.credit.history.v1.UserCreditHistory
	5,  // 17: inspire.middleware.user.credit.history.v1.Middleware.CreateUserCreditHistory:input_type -> inspire.middleware.user.credit.history.v1.CreateUserCreditHistoryRequest
	7,  // 18: inspire.middleware.user.credit.history.v1.Middleware.UpdateUserCreditHistory:input_type -> inspire.middleware.user.credit.history.v1.UpdateUserCreditHistoryRequest
	9,  // 19: inspire.middleware.user.credit.history.v1.Middleware.GetUserCreditHistory:input_type -> inspire.middleware.user.credit.history.v1.GetUserCreditHistoryRequest
	3,  // 20: inspire.middleware.user.credit.history.v1.Middleware.GetUserCreditHistories:input_type -> inspire.middleware.user.credit.history.v1.GetUserCreditHistoriesRequest
	11, // 21: inspire.middleware.user.credit.history.v1.Middleware.ExistUserCreditHistoryConds:input_type -> inspire.middleware.user.credit.history.v1.ExistUserCreditHistoryCondsRequest
	13, // 22: inspire.middleware.user.credit.history.v1.Middleware.DeleteUserCreditHistory:input_type -> inspire.middleware.user.credit.history.v1.DeleteUserCreditHistoryRequest
	6,  // 23: inspire.middleware.user.credit.history.v1.Middleware.CreateUserCreditHistory:output_type -> inspire.middleware.user.credit.history.v1.CreateUserCreditHistoryResponse
	8,  // 24: inspire.middleware.user.credit.history.v1.Middleware.UpdateUserCreditHistory:output_type -> inspire.middleware.user.credit.history.v1.UpdateUserCreditHistoryResponse
	10, // 25: inspire.middleware.user.credit.history.v1.Middleware.GetUserCreditHistory:output_type -> inspire.middleware.user.credit.history.v1.GetUserCreditHistoryResponse
	4,  // 26: inspire.middleware.user.credit.history.v1.Middleware.GetUserCreditHistories:output_type -> inspire.middleware.user.credit.history.v1.GetUserCreditHistoriesResponse
	12, // 27: inspire.middleware.user.credit.history.v1.Middleware.ExistUserCreditHistoryConds:output_type -> inspire.middleware.user.credit.history.v1.ExistUserCreditHistoryCondsResponse
	14, // 28: inspire.middleware.user.credit.history.v1.Middleware.DeleteUserCreditHistory:output_type -> inspire.middleware.user.credit.history.v1.DeleteUserCreditHistoryResponse
	23, // [23:29] is the sub-list for method output_type
	17, // [17:23] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_npool_inspire_mw_v1_user_credit_history_history_proto_init() }
func file_npool_inspire_mw_v1_user_credit_history_history_proto_init() {
	if File_npool_inspire_mw_v1_user_credit_history_history_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_inspire_mw_v1_user_credit_history_history_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserCreditHistoryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mw_v1_user_credit_history_history_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserCreditHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mw_v1_user_credit_history_history_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mw_v1_user_credit_history_history_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserCreditHistoriesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mw_v1_user_credit_history_history_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserCreditHistoriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mw_v1_user_credit_history_history_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserCreditHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mw_v1_user_credit_history_history_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserCreditHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mw_v1_user_credit_history_history_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserCreditHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mw_v1_user_credit_history_history_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserCreditHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mw_v1_user_credit_history_history_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserCreditHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mw_v1_user_credit_history_history_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserCreditHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mw_v1_user_credit_history_history_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistUserCreditHistoryCondsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mw_v1_user_credit_history_history_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistUserCreditHistoryCondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mw_v1_user_credit_history_history_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserCreditHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mw_v1_user_credit_history_history_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserCreditHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_inspire_mw_v1_user_credit_history_history_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_npool_inspire_mw_v1_user_credit_history_history_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_inspire_mw_v1_user_credit_history_history_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_inspire_mw_v1_user_credit_history_history_proto_goTypes,
		DependencyIndexes: file_npool_inspire_mw_v1_user_credit_history_history_proto_depIdxs,
		MessageInfos:      file_npool_inspire_mw_v1_user_credit_history_history_proto_msgTypes,
	}.Build()
	File_npool_inspire_mw_v1_user_credit_history_history_proto = out.File
	file_npool_inspire_mw_v1_user_credit_history_history_proto_rawDesc = nil
	file_npool_inspire_mw_v1_user_credit_history_history_proto_goTypes = nil
	file_npool_inspire_mw_v1_user_credit_history_history_proto_depIdxs = nil
}
