// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/inspire/mw/v1/user/coin/reward/reward.proto

package reward

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Middleware_CreateUserCoinReward_FullMethodName     = "/inspire.middleware.user.coin.reward.v1.Middleware/CreateUserCoinReward"
	Middleware_UpdateUserCoinReward_FullMethodName     = "/inspire.middleware.user.coin.reward.v1.Middleware/UpdateUserCoinReward"
	Middleware_GetUserCoinReward_FullMethodName        = "/inspire.middleware.user.coin.reward.v1.Middleware/GetUserCoinReward"
	Middleware_GetUserCoinRewards_FullMethodName       = "/inspire.middleware.user.coin.reward.v1.Middleware/GetUserCoinRewards"
	Middleware_ExistUserCoinRewardConds_FullMethodName = "/inspire.middleware.user.coin.reward.v1.Middleware/ExistUserCoinRewardConds"
	Middleware_DeleteUserCoinReward_FullMethodName     = "/inspire.middleware.user.coin.reward.v1.Middleware/DeleteUserCoinReward"
)

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
	CreateUserCoinReward(ctx context.Context, in *CreateUserCoinRewardRequest, opts ...grpc.CallOption) (*CreateUserCoinRewardResponse, error)
	UpdateUserCoinReward(ctx context.Context, in *UpdateUserCoinRewardRequest, opts ...grpc.CallOption) (*UpdateUserCoinRewardResponse, error)
	GetUserCoinReward(ctx context.Context, in *GetUserCoinRewardRequest, opts ...grpc.CallOption) (*GetUserCoinRewardResponse, error)
	GetUserCoinRewards(ctx context.Context, in *GetUserCoinRewardsRequest, opts ...grpc.CallOption) (*GetUserCoinRewardsResponse, error)
	ExistUserCoinRewardConds(ctx context.Context, in *ExistUserCoinRewardCondsRequest, opts ...grpc.CallOption) (*ExistUserCoinRewardCondsResponse, error)
	DeleteUserCoinReward(ctx context.Context, in *DeleteUserCoinRewardRequest, opts ...grpc.CallOption) (*DeleteUserCoinRewardResponse, error)
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) CreateUserCoinReward(ctx context.Context, in *CreateUserCoinRewardRequest, opts ...grpc.CallOption) (*CreateUserCoinRewardResponse, error) {
	out := new(CreateUserCoinRewardResponse)
	err := c.cc.Invoke(ctx, Middleware_CreateUserCoinReward_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) UpdateUserCoinReward(ctx context.Context, in *UpdateUserCoinRewardRequest, opts ...grpc.CallOption) (*UpdateUserCoinRewardResponse, error) {
	out := new(UpdateUserCoinRewardResponse)
	err := c.cc.Invoke(ctx, Middleware_UpdateUserCoinReward_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetUserCoinReward(ctx context.Context, in *GetUserCoinRewardRequest, opts ...grpc.CallOption) (*GetUserCoinRewardResponse, error) {
	out := new(GetUserCoinRewardResponse)
	err := c.cc.Invoke(ctx, Middleware_GetUserCoinReward_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetUserCoinRewards(ctx context.Context, in *GetUserCoinRewardsRequest, opts ...grpc.CallOption) (*GetUserCoinRewardsResponse, error) {
	out := new(GetUserCoinRewardsResponse)
	err := c.cc.Invoke(ctx, Middleware_GetUserCoinRewards_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ExistUserCoinRewardConds(ctx context.Context, in *ExistUserCoinRewardCondsRequest, opts ...grpc.CallOption) (*ExistUserCoinRewardCondsResponse, error) {
	out := new(ExistUserCoinRewardCondsResponse)
	err := c.cc.Invoke(ctx, Middleware_ExistUserCoinRewardConds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) DeleteUserCoinReward(ctx context.Context, in *DeleteUserCoinRewardRequest, opts ...grpc.CallOption) (*DeleteUserCoinRewardResponse, error) {
	out := new(DeleteUserCoinRewardResponse)
	err := c.cc.Invoke(ctx, Middleware_DeleteUserCoinReward_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
	CreateUserCoinReward(context.Context, *CreateUserCoinRewardRequest) (*CreateUserCoinRewardResponse, error)
	UpdateUserCoinReward(context.Context, *UpdateUserCoinRewardRequest) (*UpdateUserCoinRewardResponse, error)
	GetUserCoinReward(context.Context, *GetUserCoinRewardRequest) (*GetUserCoinRewardResponse, error)
	GetUserCoinRewards(context.Context, *GetUserCoinRewardsRequest) (*GetUserCoinRewardsResponse, error)
	ExistUserCoinRewardConds(context.Context, *ExistUserCoinRewardCondsRequest) (*ExistUserCoinRewardCondsResponse, error)
	DeleteUserCoinReward(context.Context, *DeleteUserCoinRewardRequest) (*DeleteUserCoinRewardResponse, error)
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) CreateUserCoinReward(context.Context, *CreateUserCoinRewardRequest) (*CreateUserCoinRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserCoinReward not implemented")
}
func (UnimplementedMiddlewareServer) UpdateUserCoinReward(context.Context, *UpdateUserCoinRewardRequest) (*UpdateUserCoinRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserCoinReward not implemented")
}
func (UnimplementedMiddlewareServer) GetUserCoinReward(context.Context, *GetUserCoinRewardRequest) (*GetUserCoinRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCoinReward not implemented")
}
func (UnimplementedMiddlewareServer) GetUserCoinRewards(context.Context, *GetUserCoinRewardsRequest) (*GetUserCoinRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserCoinRewards not implemented")
}
func (UnimplementedMiddlewareServer) ExistUserCoinRewardConds(context.Context, *ExistUserCoinRewardCondsRequest) (*ExistUserCoinRewardCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistUserCoinRewardConds not implemented")
}
func (UnimplementedMiddlewareServer) DeleteUserCoinReward(context.Context, *DeleteUserCoinRewardRequest) (*DeleteUserCoinRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserCoinReward not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_CreateUserCoinReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserCoinRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateUserCoinReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_CreateUserCoinReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateUserCoinReward(ctx, req.(*CreateUserCoinRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_UpdateUserCoinReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserCoinRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).UpdateUserCoinReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_UpdateUserCoinReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).UpdateUserCoinReward(ctx, req.(*UpdateUserCoinRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetUserCoinReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCoinRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetUserCoinReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetUserCoinReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetUserCoinReward(ctx, req.(*GetUserCoinRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetUserCoinRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserCoinRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetUserCoinRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetUserCoinRewards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetUserCoinRewards(ctx, req.(*GetUserCoinRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ExistUserCoinRewardConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistUserCoinRewardCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ExistUserCoinRewardConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_ExistUserCoinRewardConds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ExistUserCoinRewardConds(ctx, req.(*ExistUserCoinRewardCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_DeleteUserCoinReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserCoinRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).DeleteUserCoinReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_DeleteUserCoinReward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).DeleteUserCoinReward(ctx, req.(*DeleteUserCoinRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inspire.middleware.user.coin.reward.v1.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserCoinReward",
			Handler:    _Middleware_CreateUserCoinReward_Handler,
		},
		{
			MethodName: "UpdateUserCoinReward",
			Handler:    _Middleware_UpdateUserCoinReward_Handler,
		},
		{
			MethodName: "GetUserCoinReward",
			Handler:    _Middleware_GetUserCoinReward_Handler,
		},
		{
			MethodName: "GetUserCoinRewards",
			Handler:    _Middleware_GetUserCoinRewards_Handler,
		},
		{
			MethodName: "ExistUserCoinRewardConds",
			Handler:    _Middleware_ExistUserCoinRewardConds_Handler,
		},
		{
			MethodName: "DeleteUserCoinReward",
			Handler:    _Middleware_DeleteUserCoinReward_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/inspire/mw/v1/user/coin/reward/reward.proto",
}
