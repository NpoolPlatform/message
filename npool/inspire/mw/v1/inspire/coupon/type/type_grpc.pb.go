// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/inspire/mw/v1/inspire/coupon/type/type.proto

package _type

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
	GetCouponType(ctx context.Context, in *GetCouponTypeRequest, opts ...grpc.CallOption) (*GetCouponTypeResponse, error)
	GetCouponTypes(ctx context.Context, in *GetCouponTypesRequest, opts ...grpc.CallOption) (*GetCouponTypesResponse, error)
	GetCouponTypeOnly(ctx context.Context, in *GetCouponTypeOnlyRequest, opts ...grpc.CallOption) (*GetCouponTypeOnlyResponse, error)
	CreateCouponType(ctx context.Context, in *CreateCouponTypeRequest, opts ...grpc.CallOption) (*CreateCouponTypeResponse, error)
	UpdateCouponType(ctx context.Context, in *UpdateCouponTypeRequest, opts ...grpc.CallOption) (*UpdateCouponTypeResponse, error)
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) GetCouponType(ctx context.Context, in *GetCouponTypeRequest, opts ...grpc.CallOption) (*GetCouponTypeResponse, error) {
	out := new(GetCouponTypeResponse)
	err := c.cc.Invoke(ctx, "/inspire.middleware.inspire1.coupon.type.v1.Middleware/GetCouponType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetCouponTypes(ctx context.Context, in *GetCouponTypesRequest, opts ...grpc.CallOption) (*GetCouponTypesResponse, error) {
	out := new(GetCouponTypesResponse)
	err := c.cc.Invoke(ctx, "/inspire.middleware.inspire1.coupon.type.v1.Middleware/GetCouponTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetCouponTypeOnly(ctx context.Context, in *GetCouponTypeOnlyRequest, opts ...grpc.CallOption) (*GetCouponTypeOnlyResponse, error) {
	out := new(GetCouponTypeOnlyResponse)
	err := c.cc.Invoke(ctx, "/inspire.middleware.inspire1.coupon.type.v1.Middleware/GetCouponTypeOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) CreateCouponType(ctx context.Context, in *CreateCouponTypeRequest, opts ...grpc.CallOption) (*CreateCouponTypeResponse, error) {
	out := new(CreateCouponTypeResponse)
	err := c.cc.Invoke(ctx, "/inspire.middleware.inspire1.coupon.type.v1.Middleware/CreateCouponType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) UpdateCouponType(ctx context.Context, in *UpdateCouponTypeRequest, opts ...grpc.CallOption) (*UpdateCouponTypeResponse, error) {
	out := new(UpdateCouponTypeResponse)
	err := c.cc.Invoke(ctx, "/inspire.middleware.inspire1.coupon.type.v1.Middleware/UpdateCouponType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
	GetCouponType(context.Context, *GetCouponTypeRequest) (*GetCouponTypeResponse, error)
	GetCouponTypes(context.Context, *GetCouponTypesRequest) (*GetCouponTypesResponse, error)
	GetCouponTypeOnly(context.Context, *GetCouponTypeOnlyRequest) (*GetCouponTypeOnlyResponse, error)
	CreateCouponType(context.Context, *CreateCouponTypeRequest) (*CreateCouponTypeResponse, error)
	UpdateCouponType(context.Context, *UpdateCouponTypeRequest) (*UpdateCouponTypeResponse, error)
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) GetCouponType(context.Context, *GetCouponTypeRequest) (*GetCouponTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCouponType not implemented")
}
func (UnimplementedMiddlewareServer) GetCouponTypes(context.Context, *GetCouponTypesRequest) (*GetCouponTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCouponTypes not implemented")
}
func (UnimplementedMiddlewareServer) GetCouponTypeOnly(context.Context, *GetCouponTypeOnlyRequest) (*GetCouponTypeOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCouponTypeOnly not implemented")
}
func (UnimplementedMiddlewareServer) CreateCouponType(context.Context, *CreateCouponTypeRequest) (*CreateCouponTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCouponType not implemented")
}
func (UnimplementedMiddlewareServer) UpdateCouponType(context.Context, *UpdateCouponTypeRequest) (*UpdateCouponTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCouponType not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_GetCouponType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCouponTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetCouponType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.middleware.inspire1.coupon.type.v1.Middleware/GetCouponType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetCouponType(ctx, req.(*GetCouponTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetCouponTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCouponTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetCouponTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.middleware.inspire1.coupon.type.v1.Middleware/GetCouponTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetCouponTypes(ctx, req.(*GetCouponTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetCouponTypeOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCouponTypeOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetCouponTypeOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.middleware.inspire1.coupon.type.v1.Middleware/GetCouponTypeOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetCouponTypeOnly(ctx, req.(*GetCouponTypeOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_CreateCouponType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCouponTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateCouponType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.middleware.inspire1.coupon.type.v1.Middleware/CreateCouponType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateCouponType(ctx, req.(*CreateCouponTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_UpdateCouponType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCouponTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).UpdateCouponType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.middleware.inspire1.coupon.type.v1.Middleware/UpdateCouponType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).UpdateCouponType(ctx, req.(*UpdateCouponTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inspire.middleware.inspire1.coupon.type.v1.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCouponType",
			Handler:    _Middleware_GetCouponType_Handler,
		},
		{
			MethodName: "GetCouponTypes",
			Handler:    _Middleware_GetCouponTypes_Handler,
		},
		{
			MethodName: "GetCouponTypeOnly",
			Handler:    _Middleware_GetCouponTypeOnly_Handler,
		},
		{
			MethodName: "CreateCouponType",
			Handler:    _Middleware_CreateCouponType_Handler,
		},
		{
			MethodName: "UpdateCouponType",
			Handler:    _Middleware_UpdateCouponType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/inspire/mw/v1/inspire/coupon/type/type.proto",
}
