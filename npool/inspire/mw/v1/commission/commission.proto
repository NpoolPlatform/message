syntax = "proto3";

package inspire.middleware.commission.v1;

option go_package = "github.com/NpoolPlatform/message/npool/inspire/mw/v1/commission";

import "npool/basetypes/v1/conds.proto";
import "npool/basetypes/inspire/v1/enums.proto";

// Service Name
service Middleware {
    rpc CreateCommission   (CreateCommissionRequest)   returns (CreateCommissionResponse)   {}
    rpc UpdateCommission   (UpdateCommissionRequest)   returns (UpdateCommissionResponse)   {}
    rpc GetCommission      (GetCommissionRequest)      returns (GetCommissionResponse)      {}
    rpc GetCommissionOnly  (GetCommissionOnlyRequest)  returns (GetCommissionOnlyResponse)  {}
    rpc GetCommissions     (GetCommissionsRequest)     returns (GetCommissionsResponse)     {}
    rpc CloneCommissions   (CloneCommissionsRequest)   returns (CloneCommissionsResponse)   {}
}

message CommissionReq {
    optional string ID       = 10;
    optional string AppID    = 20;
    optional string UserID   = 30;
    optional string GoodID   = 40;
    optional basetypes.inspire.v1.SettleType SettleType = 50;
    optional basetypes.inspire.v1.SettleMode SettleMode = 60;
    optional basetypes.inspire.v1.SettleInterval SettleInterval = 70;
    optional string AmountOrPercent = 80;
    optional uint32 StartAt  = 100;
    optional string Threshold = 110;
}

// If good commission exist, use good commission
// Else if user commission exist, use user commission
// Else no commission

message Commission {
    // @inject_tag: sql:"id"
    string     ID              = 10;
    // @inject_tag: sql:"app_id"
    string     AppID           = 20;
    // @inject_tag: sql:"user_id"
    string     UserID          = 30;
    // For good specific commission
    // @inject_tag: sql:"good_id"
    optional string GoodID     = 40;
    // @inject_tag: sql:"settle_type"
    string     SettleTypeStr   = 49;
    basetypes.inspire.v1.SettleType SettleType = 50;
    // @inject_tag: sql:"settle_mode"
    string     SettleModeStr   = 59;
    basetypes.inspire.v1.SettleMode SettleMode = 60;
    // @inject_tag: sql:"settle_interval"
    string     SettleIntervalStr = 69;
    basetypes.inspire.v1.SettleInterval SettleInterval = 70;
    // For fix amount or percent commission
    // @inject_tag: sql:"amount_or_percent"
    string AmountOrPercent     = 80;
    // For commission threshold
    // @inject_tag: sql:"threshold"
    string     Threshold       = 100;
    // @inject_tag: sql:"start_at"
    uint32     StartAt         = 110;
    // EndAt == 0 means active commission
    // @inject_tag: sql:"end_at"
    uint32     EndAt           = 120;
    // @inject_tag: sql:"created_at"
    uint32     CreatedAt       = 130;
    // @inject_tag: sql:"updated_at"
    uint32     UpdatedAt       = 140;
    // @inject_tag: sql:"deleted_at"
    uint32     DeletedAt       = 150;
    // @inject_tag: sql:"order_limit"
    uint32     OrderLimit      = 160;
}

message Conds {
    optional basetypes.v1.StringVal ID     = 10;
    optional basetypes.v1.StringVal AppID  = 20;
    optional basetypes.v1.StringVal UserID = 30;
    optional basetypes.v1.StringVal GoodID = 40;
    optional basetypes.v1.Uint32Val SettleType = 50;
    optional basetypes.v1.Uint32Val EndAt  = 60;
    optional basetypes.v1.StringSliceVal UserIDs = 70;
    optional basetypes.v1.StringSliceVal GoodIDs = 80;
    optional basetypes.v1.Uint32Val StartAt = 90;
}

message CreateCommissionRequest {
    CommissionReq Info = 10;
}

message CreateCommissionResponse {
    Commission Info = 10;
}

message UpdateCommissionRequest {
    CommissionReq Info = 10;
}

message UpdateCommissionResponse {
    Commission Info = 10;
}

message GetCommissionRequest {
    string ID = 10;
}

message GetCommissionResponse {
    Commission Info = 10;
}

message GetCommissionOnlyRequest {
    Conds Conds = 10;
}

message GetCommissionOnlyResponse {
    Commission Info = 10;
}

message GetCommissionsRequest {
    Conds  Conds  = 10;
    int32  Offset = 20;
    int32  Limit  = 30;
}

message GetCommissionsResponse {
    repeated Commission Infos = 10;
    uint32              Total = 20;
}

message CloneCommissionsRequest {
    string AppID        = 10;
    string FromGoodID   = 20;
    string ToGoodID     = 30;
    string ScalePercent = 40;
}

message CloneCommissionsResponse {
}
