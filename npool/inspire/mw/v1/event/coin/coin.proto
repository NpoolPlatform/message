syntax = "proto3";

package inspire.middleware.event.coin.v1;

option go_package = "github.com/NpoolPlatform/message/npool/inspire/mw/v1/event/coin";

import "google/api/annotations.proto";
import "npool/basetypes/v1/conds.proto";

// Service Name
service Middleware {
    rpc CreateEventCoin     (CreateEventCoinRequest)     returns (CreateEventCoinResponse)      {}
    rpc UpdateEventCoin     (UpdateEventCoinRequest)     returns (UpdateEventCoinResponse)      {}
    rpc GetEventCoin        (GetEventCoinRequest)        returns (GetEventCoinResponse)         {}
    rpc GetEventCoins       (GetEventCoinsRequest)       returns (GetEventCoinsResponse)        {}
    rpc ExistEventCoinConds (ExistEventCoinCondsRequest) returns (ExistEventCoinCondsResponse)  {}
    rpc DeleteEventCoin     (DeleteEventCoinRequest)     returns (DeleteEventCoinResponse)   {
        option (google.api.http) = {
            post: "/v1/eventcoin_DeleteEventCoin"
            body: "*"
        };
    }
}

message EventCoinReq {
    optional uint32 ID           = 10;
    optional string EntID        = 20;
    optional string AppID        = 30;
    optional string EventID      = 40;
    optional string CoinConfigID = 50;
    optional string CoinValue    = 60;
    optional string CoinPerUSD   = 70;
}

message EventCoin {
    // @inject_tag: sql:"id"
    uint32          ID              = 10;
    // @inject_tag: sql:"ent_id"
    string          EntID           = 20;
    // @inject_tag: sql:"app_id"
    string          AppID           = 30;
    // @inject_tag: sql:"event_id"
    string          EventID         = 40;
    // @inject_tag: sql:"coin_config_id"
    string          CoinConfigID    = 50;
    // @inject_tag: sql:"coin_value"
    string          CoinValue       = 60;
    // @inject_tag: sql:"coin_per_usd"
    string          CoinPerUSD      = 70;

    // @inject_tag: sql:"coin_type_id"
    string          CoinTypeID      = 80;
    
    // @inject_tag: sql:"created_at"
    uint32          CreatedAt       = 1000;
    // @inject_tag: sql:"updated_at"
    uint32          UpdatedAt       = 1010;
}

message Conds {
    optional basetypes.v1.StringVal  EntID         = 10;
    optional basetypes.v1.StringVal  AppID         = 20;
    optional basetypes.v1.StringSliceVal EntIDs    = 30;
    optional basetypes.v1.StringVal  EventID       = 40;
    optional basetypes.v1.StringVal  CoinConfigID  = 50;
    optional basetypes.v1.Uint32Val  ID            = 60;
    optional basetypes.v1.StringSliceVal  EventIDs = 70;
}

message GetEventCoinsRequest {
    Conds  Conds     = 10;
    int32  Offset    = 20;
    int32  Limit     = 30;
}

message GetEventCoinsResponse {
    repeated EventCoin Infos = 10;
    uint32          Total = 20;
}

message CreateEventCoinRequest {
    EventCoinReq Info = 10;
}

message CreateEventCoinResponse {
    EventCoin Info = 10;
}

message UpdateEventCoinRequest {
    EventCoinReq Info = 10;
}

message UpdateEventCoinResponse {
    EventCoin Info = 10;
}

message GetEventCoinRequest {
    string EntID  = 10;
}

message GetEventCoinResponse {
    EventCoin Info = 10;
}

message ExistEventCoinCondsRequest {
  Conds Conds  = 10;
}

message ExistEventCoinCondsResponse {
  bool Info = 10;
}

message DeleteEventCoinRequest {
    EventCoinReq Info = 10;
}

message DeleteEventCoinResponse {
    EventCoin Info = 10;
}
