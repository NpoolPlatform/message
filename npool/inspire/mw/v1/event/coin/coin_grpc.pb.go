// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/inspire/mw/v1/event/coin/coin.proto

package coin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
	CreateEventCoin(ctx context.Context, in *CreateEventCoinRequest, opts ...grpc.CallOption) (*CreateEventCoinResponse, error)
	UpdateEventCoin(ctx context.Context, in *UpdateEventCoinRequest, opts ...grpc.CallOption) (*UpdateEventCoinResponse, error)
	GetEventCoin(ctx context.Context, in *GetEventCoinRequest, opts ...grpc.CallOption) (*GetEventCoinResponse, error)
	GetEventCoins(ctx context.Context, in *GetEventCoinsRequest, opts ...grpc.CallOption) (*GetEventCoinsResponse, error)
	ExistEventCoinConds(ctx context.Context, in *ExistEventCoinCondsRequest, opts ...grpc.CallOption) (*ExistEventCoinCondsResponse, error)
	DeleteEventCoin(ctx context.Context, in *DeleteEventCoinRequest, opts ...grpc.CallOption) (*DeleteEventCoinResponse, error)
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) CreateEventCoin(ctx context.Context, in *CreateEventCoinRequest, opts ...grpc.CallOption) (*CreateEventCoinResponse, error) {
	out := new(CreateEventCoinResponse)
	err := c.cc.Invoke(ctx, "/inspire.middleware.event.coin.v1.Middleware/CreateEventCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) UpdateEventCoin(ctx context.Context, in *UpdateEventCoinRequest, opts ...grpc.CallOption) (*UpdateEventCoinResponse, error) {
	out := new(UpdateEventCoinResponse)
	err := c.cc.Invoke(ctx, "/inspire.middleware.event.coin.v1.Middleware/UpdateEventCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetEventCoin(ctx context.Context, in *GetEventCoinRequest, opts ...grpc.CallOption) (*GetEventCoinResponse, error) {
	out := new(GetEventCoinResponse)
	err := c.cc.Invoke(ctx, "/inspire.middleware.event.coin.v1.Middleware/GetEventCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetEventCoins(ctx context.Context, in *GetEventCoinsRequest, opts ...grpc.CallOption) (*GetEventCoinsResponse, error) {
	out := new(GetEventCoinsResponse)
	err := c.cc.Invoke(ctx, "/inspire.middleware.event.coin.v1.Middleware/GetEventCoins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ExistEventCoinConds(ctx context.Context, in *ExistEventCoinCondsRequest, opts ...grpc.CallOption) (*ExistEventCoinCondsResponse, error) {
	out := new(ExistEventCoinCondsResponse)
	err := c.cc.Invoke(ctx, "/inspire.middleware.event.coin.v1.Middleware/ExistEventCoinConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) DeleteEventCoin(ctx context.Context, in *DeleteEventCoinRequest, opts ...grpc.CallOption) (*DeleteEventCoinResponse, error) {
	out := new(DeleteEventCoinResponse)
	err := c.cc.Invoke(ctx, "/inspire.middleware.event.coin.v1.Middleware/DeleteEventCoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
	CreateEventCoin(context.Context, *CreateEventCoinRequest) (*CreateEventCoinResponse, error)
	UpdateEventCoin(context.Context, *UpdateEventCoinRequest) (*UpdateEventCoinResponse, error)
	GetEventCoin(context.Context, *GetEventCoinRequest) (*GetEventCoinResponse, error)
	GetEventCoins(context.Context, *GetEventCoinsRequest) (*GetEventCoinsResponse, error)
	ExistEventCoinConds(context.Context, *ExistEventCoinCondsRequest) (*ExistEventCoinCondsResponse, error)
	DeleteEventCoin(context.Context, *DeleteEventCoinRequest) (*DeleteEventCoinResponse, error)
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) CreateEventCoin(context.Context, *CreateEventCoinRequest) (*CreateEventCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEventCoin not implemented")
}
func (UnimplementedMiddlewareServer) UpdateEventCoin(context.Context, *UpdateEventCoinRequest) (*UpdateEventCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEventCoin not implemented")
}
func (UnimplementedMiddlewareServer) GetEventCoin(context.Context, *GetEventCoinRequest) (*GetEventCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventCoin not implemented")
}
func (UnimplementedMiddlewareServer) GetEventCoins(context.Context, *GetEventCoinsRequest) (*GetEventCoinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventCoins not implemented")
}
func (UnimplementedMiddlewareServer) ExistEventCoinConds(context.Context, *ExistEventCoinCondsRequest) (*ExistEventCoinCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistEventCoinConds not implemented")
}
func (UnimplementedMiddlewareServer) DeleteEventCoin(context.Context, *DeleteEventCoinRequest) (*DeleteEventCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEventCoin not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_CreateEventCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateEventCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.middleware.event.coin.v1.Middleware/CreateEventCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateEventCoin(ctx, req.(*CreateEventCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_UpdateEventCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEventCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).UpdateEventCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.middleware.event.coin.v1.Middleware/UpdateEventCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).UpdateEventCoin(ctx, req.(*UpdateEventCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetEventCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetEventCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.middleware.event.coin.v1.Middleware/GetEventCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetEventCoin(ctx, req.(*GetEventCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetEventCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventCoinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetEventCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.middleware.event.coin.v1.Middleware/GetEventCoins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetEventCoins(ctx, req.(*GetEventCoinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ExistEventCoinConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistEventCoinCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ExistEventCoinConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.middleware.event.coin.v1.Middleware/ExistEventCoinConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ExistEventCoinConds(ctx, req.(*ExistEventCoinCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_DeleteEventCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEventCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).DeleteEventCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.middleware.event.coin.v1.Middleware/DeleteEventCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).DeleteEventCoin(ctx, req.(*DeleteEventCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inspire.middleware.event.coin.v1.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEventCoin",
			Handler:    _Middleware_CreateEventCoin_Handler,
		},
		{
			MethodName: "UpdateEventCoin",
			Handler:    _Middleware_UpdateEventCoin_Handler,
		},
		{
			MethodName: "GetEventCoin",
			Handler:    _Middleware_GetEventCoin_Handler,
		},
		{
			MethodName: "GetEventCoins",
			Handler:    _Middleware_GetEventCoins_Handler,
		},
		{
			MethodName: "ExistEventCoinConds",
			Handler:    _Middleware_ExistEventCoinConds_Handler,
		},
		{
			MethodName: "DeleteEventCoin",
			Handler:    _Middleware_DeleteEventCoin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/inspire/mw/v1/event/coin/coin.proto",
}
