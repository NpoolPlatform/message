// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/inspire/mw/v1/coupon/app/coin/coin.proto

package coin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Middleware_CreateCouponCoin_FullMethodName     = "/inspire.middleware.coupon.app.coin.v1.Middleware/CreateCouponCoin"
	Middleware_DeleteCouponCoin_FullMethodName     = "/inspire.middleware.coupon.app.coin.v1.Middleware/DeleteCouponCoin"
	Middleware_GetCouponCoins_FullMethodName       = "/inspire.middleware.coupon.app.coin.v1.Middleware/GetCouponCoins"
	Middleware_GetCouponCoin_FullMethodName        = "/inspire.middleware.coupon.app.coin.v1.Middleware/GetCouponCoin"
	Middleware_ExistCouponCoinConds_FullMethodName = "/inspire.middleware.coupon.app.coin.v1.Middleware/ExistCouponCoinConds"
)

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
	CreateCouponCoin(ctx context.Context, in *CreateCouponCoinRequest, opts ...grpc.CallOption) (*CreateCouponCoinResponse, error)
	DeleteCouponCoin(ctx context.Context, in *DeleteCouponCoinRequest, opts ...grpc.CallOption) (*DeleteCouponCoinResponse, error)
	GetCouponCoins(ctx context.Context, in *GetCouponCoinsRequest, opts ...grpc.CallOption) (*GetCouponCoinsResponse, error)
	GetCouponCoin(ctx context.Context, in *GetCouponCoinRequest, opts ...grpc.CallOption) (*GetCouponCoinResponse, error)
	ExistCouponCoinConds(ctx context.Context, in *ExistCouponCoinCondsRequest, opts ...grpc.CallOption) (*ExistCouponCoinCondsResponse, error)
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) CreateCouponCoin(ctx context.Context, in *CreateCouponCoinRequest, opts ...grpc.CallOption) (*CreateCouponCoinResponse, error) {
	out := new(CreateCouponCoinResponse)
	err := c.cc.Invoke(ctx, Middleware_CreateCouponCoin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) DeleteCouponCoin(ctx context.Context, in *DeleteCouponCoinRequest, opts ...grpc.CallOption) (*DeleteCouponCoinResponse, error) {
	out := new(DeleteCouponCoinResponse)
	err := c.cc.Invoke(ctx, Middleware_DeleteCouponCoin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetCouponCoins(ctx context.Context, in *GetCouponCoinsRequest, opts ...grpc.CallOption) (*GetCouponCoinsResponse, error) {
	out := new(GetCouponCoinsResponse)
	err := c.cc.Invoke(ctx, Middleware_GetCouponCoins_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetCouponCoin(ctx context.Context, in *GetCouponCoinRequest, opts ...grpc.CallOption) (*GetCouponCoinResponse, error) {
	out := new(GetCouponCoinResponse)
	err := c.cc.Invoke(ctx, Middleware_GetCouponCoin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ExistCouponCoinConds(ctx context.Context, in *ExistCouponCoinCondsRequest, opts ...grpc.CallOption) (*ExistCouponCoinCondsResponse, error) {
	out := new(ExistCouponCoinCondsResponse)
	err := c.cc.Invoke(ctx, Middleware_ExistCouponCoinConds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
	CreateCouponCoin(context.Context, *CreateCouponCoinRequest) (*CreateCouponCoinResponse, error)
	DeleteCouponCoin(context.Context, *DeleteCouponCoinRequest) (*DeleteCouponCoinResponse, error)
	GetCouponCoins(context.Context, *GetCouponCoinsRequest) (*GetCouponCoinsResponse, error)
	GetCouponCoin(context.Context, *GetCouponCoinRequest) (*GetCouponCoinResponse, error)
	ExistCouponCoinConds(context.Context, *ExistCouponCoinCondsRequest) (*ExistCouponCoinCondsResponse, error)
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) CreateCouponCoin(context.Context, *CreateCouponCoinRequest) (*CreateCouponCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCouponCoin not implemented")
}
func (UnimplementedMiddlewareServer) DeleteCouponCoin(context.Context, *DeleteCouponCoinRequest) (*DeleteCouponCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCouponCoin not implemented")
}
func (UnimplementedMiddlewareServer) GetCouponCoins(context.Context, *GetCouponCoinsRequest) (*GetCouponCoinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCouponCoins not implemented")
}
func (UnimplementedMiddlewareServer) GetCouponCoin(context.Context, *GetCouponCoinRequest) (*GetCouponCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCouponCoin not implemented")
}
func (UnimplementedMiddlewareServer) ExistCouponCoinConds(context.Context, *ExistCouponCoinCondsRequest) (*ExistCouponCoinCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistCouponCoinConds not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_CreateCouponCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCouponCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateCouponCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_CreateCouponCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateCouponCoin(ctx, req.(*CreateCouponCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_DeleteCouponCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCouponCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).DeleteCouponCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_DeleteCouponCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).DeleteCouponCoin(ctx, req.(*DeleteCouponCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetCouponCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCouponCoinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetCouponCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetCouponCoins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetCouponCoins(ctx, req.(*GetCouponCoinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetCouponCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCouponCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetCouponCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetCouponCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetCouponCoin(ctx, req.(*GetCouponCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ExistCouponCoinConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistCouponCoinCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ExistCouponCoinConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_ExistCouponCoinConds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ExistCouponCoinConds(ctx, req.(*ExistCouponCoinCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inspire.middleware.coupon.app.coin.v1.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCouponCoin",
			Handler:    _Middleware_CreateCouponCoin_Handler,
		},
		{
			MethodName: "DeleteCouponCoin",
			Handler:    _Middleware_DeleteCouponCoin_Handler,
		},
		{
			MethodName: "GetCouponCoins",
			Handler:    _Middleware_GetCouponCoins_Handler,
		},
		{
			MethodName: "GetCouponCoin",
			Handler:    _Middleware_GetCouponCoin_Handler,
		},
		{
			MethodName: "ExistCouponCoinConds",
			Handler:    _Middleware_ExistCouponCoinConds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/inspire/mw/v1/coupon/app/coin/coin.proto",
}
