// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/inspire/mw/v1/coupon/app/cashcontrol/cashcontrol.proto

package cashcontrol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Middleware_CreateControl_FullMethodName     = "/inspire.middleware.coupon.cashcontrol.v1.Middleware/CreateControl"
	Middleware_ExistControlConds_FullMethodName = "/inspire.middleware.coupon.cashcontrol.v1.Middleware/ExistControlConds"
	Middleware_GetControl_FullMethodName        = "/inspire.middleware.coupon.cashcontrol.v1.Middleware/GetControl"
	Middleware_GetControls_FullMethodName       = "/inspire.middleware.coupon.cashcontrol.v1.Middleware/GetControls"
	Middleware_DeleteControl_FullMethodName     = "/inspire.middleware.coupon.cashcontrol.v1.Middleware/DeleteControl"
)

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
	CreateControl(ctx context.Context, in *CreateControlRequest, opts ...grpc.CallOption) (*CreateControlResponse, error)
	ExistControlConds(ctx context.Context, in *ExistControlCondsRequest, opts ...grpc.CallOption) (*ExistControlCondsResponse, error)
	GetControl(ctx context.Context, in *GetControlRequest, opts ...grpc.CallOption) (*GetControlResponse, error)
	GetControls(ctx context.Context, in *GetControlsRequest, opts ...grpc.CallOption) (*GetControlsResponse, error)
	DeleteControl(ctx context.Context, in *DeleteControlRequest, opts ...grpc.CallOption) (*DeleteControlResponse, error)
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) CreateControl(ctx context.Context, in *CreateControlRequest, opts ...grpc.CallOption) (*CreateControlResponse, error) {
	out := new(CreateControlResponse)
	err := c.cc.Invoke(ctx, Middleware_CreateControl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ExistControlConds(ctx context.Context, in *ExistControlCondsRequest, opts ...grpc.CallOption) (*ExistControlCondsResponse, error) {
	out := new(ExistControlCondsResponse)
	err := c.cc.Invoke(ctx, Middleware_ExistControlConds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetControl(ctx context.Context, in *GetControlRequest, opts ...grpc.CallOption) (*GetControlResponse, error) {
	out := new(GetControlResponse)
	err := c.cc.Invoke(ctx, Middleware_GetControl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetControls(ctx context.Context, in *GetControlsRequest, opts ...grpc.CallOption) (*GetControlsResponse, error) {
	out := new(GetControlsResponse)
	err := c.cc.Invoke(ctx, Middleware_GetControls_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) DeleteControl(ctx context.Context, in *DeleteControlRequest, opts ...grpc.CallOption) (*DeleteControlResponse, error) {
	out := new(DeleteControlResponse)
	err := c.cc.Invoke(ctx, Middleware_DeleteControl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
	CreateControl(context.Context, *CreateControlRequest) (*CreateControlResponse, error)
	ExistControlConds(context.Context, *ExistControlCondsRequest) (*ExistControlCondsResponse, error)
	GetControl(context.Context, *GetControlRequest) (*GetControlResponse, error)
	GetControls(context.Context, *GetControlsRequest) (*GetControlsResponse, error)
	DeleteControl(context.Context, *DeleteControlRequest) (*DeleteControlResponse, error)
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) CreateControl(context.Context, *CreateControlRequest) (*CreateControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateControl not implemented")
}
func (UnimplementedMiddlewareServer) ExistControlConds(context.Context, *ExistControlCondsRequest) (*ExistControlCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistControlConds not implemented")
}
func (UnimplementedMiddlewareServer) GetControl(context.Context, *GetControlRequest) (*GetControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetControl not implemented")
}
func (UnimplementedMiddlewareServer) GetControls(context.Context, *GetControlsRequest) (*GetControlsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetControls not implemented")
}
func (UnimplementedMiddlewareServer) DeleteControl(context.Context, *DeleteControlRequest) (*DeleteControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteControl not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_CreateControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_CreateControl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateControl(ctx, req.(*CreateControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ExistControlConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistControlCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ExistControlConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_ExistControlConds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ExistControlConds(ctx, req.(*ExistControlCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetControl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetControl(ctx, req.(*GetControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetControls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetControlsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetControls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetControls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetControls(ctx, req.(*GetControlsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_DeleteControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).DeleteControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_DeleteControl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).DeleteControl(ctx, req.(*DeleteControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inspire.middleware.coupon.cashcontrol.v1.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateControl",
			Handler:    _Middleware_CreateControl_Handler,
		},
		{
			MethodName: "ExistControlConds",
			Handler:    _Middleware_ExistControlConds_Handler,
		},
		{
			MethodName: "GetControl",
			Handler:    _Middleware_GetControl_Handler,
		},
		{
			MethodName: "GetControls",
			Handler:    _Middleware_GetControls_Handler,
		},
		{
			MethodName: "DeleteControl",
			Handler:    _Middleware_DeleteControl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/inspire/mw/v1/coupon/app/cashcontrol/cashcontrol.proto",
}
