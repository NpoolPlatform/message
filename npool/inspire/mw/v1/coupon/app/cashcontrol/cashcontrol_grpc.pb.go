// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/inspire/mw/v1/coupon/app/cashcontrol/cashcontrol.proto

package cashcontrol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
	CreateCashControl(ctx context.Context, in *CreateCashControlRequest, opts ...grpc.CallOption) (*CreateCashControlResponse, error)
	ExistCashControlConds(ctx context.Context, in *ExistCashControlCondsRequest, opts ...grpc.CallOption) (*ExistCashControlCondsResponse, error)
	GetCashControl(ctx context.Context, in *GetCashControlRequest, opts ...grpc.CallOption) (*GetCashControlResponse, error)
	GetCashControls(ctx context.Context, in *GetCashControlsRequest, opts ...grpc.CallOption) (*GetCashControlsResponse, error)
	DeleteCashControl(ctx context.Context, in *DeleteCashControlRequest, opts ...grpc.CallOption) (*DeleteCashControlResponse, error)
	UpdateCashControl(ctx context.Context, in *UpdateCashControlRequest, opts ...grpc.CallOption) (*UpdateCashControlResponse, error)
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) CreateCashControl(ctx context.Context, in *CreateCashControlRequest, opts ...grpc.CallOption) (*CreateCashControlResponse, error) {
	out := new(CreateCashControlResponse)
	err := c.cc.Invoke(ctx, "/inspire.middleware.coupon.app.cashcontrol.v1.Middleware/CreateCashControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ExistCashControlConds(ctx context.Context, in *ExistCashControlCondsRequest, opts ...grpc.CallOption) (*ExistCashControlCondsResponse, error) {
	out := new(ExistCashControlCondsResponse)
	err := c.cc.Invoke(ctx, "/inspire.middleware.coupon.app.cashcontrol.v1.Middleware/ExistCashControlConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetCashControl(ctx context.Context, in *GetCashControlRequest, opts ...grpc.CallOption) (*GetCashControlResponse, error) {
	out := new(GetCashControlResponse)
	err := c.cc.Invoke(ctx, "/inspire.middleware.coupon.app.cashcontrol.v1.Middleware/GetCashControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetCashControls(ctx context.Context, in *GetCashControlsRequest, opts ...grpc.CallOption) (*GetCashControlsResponse, error) {
	out := new(GetCashControlsResponse)
	err := c.cc.Invoke(ctx, "/inspire.middleware.coupon.app.cashcontrol.v1.Middleware/GetCashControls", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) DeleteCashControl(ctx context.Context, in *DeleteCashControlRequest, opts ...grpc.CallOption) (*DeleteCashControlResponse, error) {
	out := new(DeleteCashControlResponse)
	err := c.cc.Invoke(ctx, "/inspire.middleware.coupon.app.cashcontrol.v1.Middleware/DeleteCashControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) UpdateCashControl(ctx context.Context, in *UpdateCashControlRequest, opts ...grpc.CallOption) (*UpdateCashControlResponse, error) {
	out := new(UpdateCashControlResponse)
	err := c.cc.Invoke(ctx, "/inspire.middleware.coupon.app.cashcontrol.v1.Middleware/UpdateCashControl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
	CreateCashControl(context.Context, *CreateCashControlRequest) (*CreateCashControlResponse, error)
	ExistCashControlConds(context.Context, *ExistCashControlCondsRequest) (*ExistCashControlCondsResponse, error)
	GetCashControl(context.Context, *GetCashControlRequest) (*GetCashControlResponse, error)
	GetCashControls(context.Context, *GetCashControlsRequest) (*GetCashControlsResponse, error)
	DeleteCashControl(context.Context, *DeleteCashControlRequest) (*DeleteCashControlResponse, error)
	UpdateCashControl(context.Context, *UpdateCashControlRequest) (*UpdateCashControlResponse, error)
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) CreateCashControl(context.Context, *CreateCashControlRequest) (*CreateCashControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCashControl not implemented")
}
func (UnimplementedMiddlewareServer) ExistCashControlConds(context.Context, *ExistCashControlCondsRequest) (*ExistCashControlCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistCashControlConds not implemented")
}
func (UnimplementedMiddlewareServer) GetCashControl(context.Context, *GetCashControlRequest) (*GetCashControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCashControl not implemented")
}
func (UnimplementedMiddlewareServer) GetCashControls(context.Context, *GetCashControlsRequest) (*GetCashControlsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCashControls not implemented")
}
func (UnimplementedMiddlewareServer) DeleteCashControl(context.Context, *DeleteCashControlRequest) (*DeleteCashControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCashControl not implemented")
}
func (UnimplementedMiddlewareServer) UpdateCashControl(context.Context, *UpdateCashControlRequest) (*UpdateCashControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCashControl not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_CreateCashControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCashControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateCashControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.middleware.coupon.app.cashcontrol.v1.Middleware/CreateCashControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateCashControl(ctx, req.(*CreateCashControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ExistCashControlConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistCashControlCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ExistCashControlConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.middleware.coupon.app.cashcontrol.v1.Middleware/ExistCashControlConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ExistCashControlConds(ctx, req.(*ExistCashControlCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetCashControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCashControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetCashControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.middleware.coupon.app.cashcontrol.v1.Middleware/GetCashControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetCashControl(ctx, req.(*GetCashControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetCashControls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCashControlsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetCashControls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.middleware.coupon.app.cashcontrol.v1.Middleware/GetCashControls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetCashControls(ctx, req.(*GetCashControlsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_DeleteCashControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCashControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).DeleteCashControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.middleware.coupon.app.cashcontrol.v1.Middleware/DeleteCashControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).DeleteCashControl(ctx, req.(*DeleteCashControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_UpdateCashControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCashControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).UpdateCashControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.middleware.coupon.app.cashcontrol.v1.Middleware/UpdateCashControl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).UpdateCashControl(ctx, req.(*UpdateCashControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inspire.middleware.coupon.app.cashcontrol.v1.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCashControl",
			Handler:    _Middleware_CreateCashControl_Handler,
		},
		{
			MethodName: "ExistCashControlConds",
			Handler:    _Middleware_ExistCashControlConds_Handler,
		},
		{
			MethodName: "GetCashControl",
			Handler:    _Middleware_GetCashControl_Handler,
		},
		{
			MethodName: "GetCashControls",
			Handler:    _Middleware_GetCashControls_Handler,
		},
		{
			MethodName: "DeleteCashControl",
			Handler:    _Middleware_DeleteCashControl_Handler,
		},
		{
			MethodName: "UpdateCashControl",
			Handler:    _Middleware_UpdateCashControl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/inspire/mw/v1/coupon/app/cashcontrol/cashcontrol.proto",
}
