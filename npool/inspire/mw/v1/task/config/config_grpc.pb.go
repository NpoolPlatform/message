// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/inspire/mw/v1/task/config/config.proto

package config

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Middleware_CreateTaskConfig_FullMethodName     = "/inspire.middleware.task.config.v1.Middleware/CreateTaskConfig"
	Middleware_UpdateTaskConfig_FullMethodName     = "/inspire.middleware.task.config.v1.Middleware/UpdateTaskConfig"
	Middleware_GetTaskConfig_FullMethodName        = "/inspire.middleware.task.config.v1.Middleware/GetTaskConfig"
	Middleware_GetTaskConfigs_FullMethodName       = "/inspire.middleware.task.config.v1.Middleware/GetTaskConfigs"
	Middleware_ExistTaskConfigConds_FullMethodName = "/inspire.middleware.task.config.v1.Middleware/ExistTaskConfigConds"
	Middleware_DeleteTaskConfig_FullMethodName     = "/inspire.middleware.task.config.v1.Middleware/DeleteTaskConfig"
)

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
	CreateTaskConfig(ctx context.Context, in *CreateTaskConfigRequest, opts ...grpc.CallOption) (*CreateTaskConfigResponse, error)
	UpdateTaskConfig(ctx context.Context, in *UpdateTaskConfigRequest, opts ...grpc.CallOption) (*UpdateTaskConfigResponse, error)
	GetTaskConfig(ctx context.Context, in *GetTaskConfigRequest, opts ...grpc.CallOption) (*GetTaskConfigResponse, error)
	GetTaskConfigs(ctx context.Context, in *GetTaskConfigsRequest, opts ...grpc.CallOption) (*GetTaskConfigsResponse, error)
	ExistTaskConfigConds(ctx context.Context, in *ExistTaskConfigCondsRequest, opts ...grpc.CallOption) (*ExistTaskConfigCondsResponse, error)
	DeleteTaskConfig(ctx context.Context, in *DeleteTaskConfigRequest, opts ...grpc.CallOption) (*DeleteTaskConfigResponse, error)
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) CreateTaskConfig(ctx context.Context, in *CreateTaskConfigRequest, opts ...grpc.CallOption) (*CreateTaskConfigResponse, error) {
	out := new(CreateTaskConfigResponse)
	err := c.cc.Invoke(ctx, Middleware_CreateTaskConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) UpdateTaskConfig(ctx context.Context, in *UpdateTaskConfigRequest, opts ...grpc.CallOption) (*UpdateTaskConfigResponse, error) {
	out := new(UpdateTaskConfigResponse)
	err := c.cc.Invoke(ctx, Middleware_UpdateTaskConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetTaskConfig(ctx context.Context, in *GetTaskConfigRequest, opts ...grpc.CallOption) (*GetTaskConfigResponse, error) {
	out := new(GetTaskConfigResponse)
	err := c.cc.Invoke(ctx, Middleware_GetTaskConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetTaskConfigs(ctx context.Context, in *GetTaskConfigsRequest, opts ...grpc.CallOption) (*GetTaskConfigsResponse, error) {
	out := new(GetTaskConfigsResponse)
	err := c.cc.Invoke(ctx, Middleware_GetTaskConfigs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ExistTaskConfigConds(ctx context.Context, in *ExistTaskConfigCondsRequest, opts ...grpc.CallOption) (*ExistTaskConfigCondsResponse, error) {
	out := new(ExistTaskConfigCondsResponse)
	err := c.cc.Invoke(ctx, Middleware_ExistTaskConfigConds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) DeleteTaskConfig(ctx context.Context, in *DeleteTaskConfigRequest, opts ...grpc.CallOption) (*DeleteTaskConfigResponse, error) {
	out := new(DeleteTaskConfigResponse)
	err := c.cc.Invoke(ctx, Middleware_DeleteTaskConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
	CreateTaskConfig(context.Context, *CreateTaskConfigRequest) (*CreateTaskConfigResponse, error)
	UpdateTaskConfig(context.Context, *UpdateTaskConfigRequest) (*UpdateTaskConfigResponse, error)
	GetTaskConfig(context.Context, *GetTaskConfigRequest) (*GetTaskConfigResponse, error)
	GetTaskConfigs(context.Context, *GetTaskConfigsRequest) (*GetTaskConfigsResponse, error)
	ExistTaskConfigConds(context.Context, *ExistTaskConfigCondsRequest) (*ExistTaskConfigCondsResponse, error)
	DeleteTaskConfig(context.Context, *DeleteTaskConfigRequest) (*DeleteTaskConfigResponse, error)
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) CreateTaskConfig(context.Context, *CreateTaskConfigRequest) (*CreateTaskConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaskConfig not implemented")
}
func (UnimplementedMiddlewareServer) UpdateTaskConfig(context.Context, *UpdateTaskConfigRequest) (*UpdateTaskConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTaskConfig not implemented")
}
func (UnimplementedMiddlewareServer) GetTaskConfig(context.Context, *GetTaskConfigRequest) (*GetTaskConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskConfig not implemented")
}
func (UnimplementedMiddlewareServer) GetTaskConfigs(context.Context, *GetTaskConfigsRequest) (*GetTaskConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskConfigs not implemented")
}
func (UnimplementedMiddlewareServer) ExistTaskConfigConds(context.Context, *ExistTaskConfigCondsRequest) (*ExistTaskConfigCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistTaskConfigConds not implemented")
}
func (UnimplementedMiddlewareServer) DeleteTaskConfig(context.Context, *DeleteTaskConfigRequest) (*DeleteTaskConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTaskConfig not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_CreateTaskConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateTaskConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_CreateTaskConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateTaskConfig(ctx, req.(*CreateTaskConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_UpdateTaskConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).UpdateTaskConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_UpdateTaskConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).UpdateTaskConfig(ctx, req.(*UpdateTaskConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetTaskConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetTaskConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetTaskConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetTaskConfig(ctx, req.(*GetTaskConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetTaskConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetTaskConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetTaskConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetTaskConfigs(ctx, req.(*GetTaskConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ExistTaskConfigConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistTaskConfigCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ExistTaskConfigConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_ExistTaskConfigConds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ExistTaskConfigConds(ctx, req.(*ExistTaskConfigCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_DeleteTaskConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).DeleteTaskConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_DeleteTaskConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).DeleteTaskConfig(ctx, req.(*DeleteTaskConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inspire.middleware.task.config.v1.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTaskConfig",
			Handler:    _Middleware_CreateTaskConfig_Handler,
		},
		{
			MethodName: "UpdateTaskConfig",
			Handler:    _Middleware_UpdateTaskConfig_Handler,
		},
		{
			MethodName: "GetTaskConfig",
			Handler:    _Middleware_GetTaskConfig_Handler,
		},
		{
			MethodName: "GetTaskConfigs",
			Handler:    _Middleware_GetTaskConfigs_Handler,
		},
		{
			MethodName: "ExistTaskConfigConds",
			Handler:    _Middleware_ExistTaskConfigConds_Handler,
		},
		{
			MethodName: "DeleteTaskConfig",
			Handler:    _Middleware_DeleteTaskConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/inspire/mw/v1/task/config/config.proto",
}
