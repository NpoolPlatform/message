syntax = "proto3";

package inspire.middleware.task.config.v1;

option go_package = "github.com/NpoolPlatform/message/npool/inspire/mw/v1/task/config";

import "google/api/annotations.proto";
import "npool/basetypes/v1/conds.proto";
import "npool/basetypes/inspire/v1/enums.proto";

// Service Name
service Middleware {
    rpc CreateTaskConfig     (CreateTaskConfigRequest)     returns (CreateTaskConfigResponse)      {}
    rpc UpdateTaskConfig     (UpdateTaskConfigRequest)     returns (UpdateTaskConfigResponse)      {}
    rpc GetTaskConfig        (GetTaskConfigRequest)        returns (GetTaskConfigResponse)         {}
    rpc GetTaskConfigs       (GetTaskConfigsRequest)       returns (GetTaskConfigsResponse)        {}
    rpc ExistTaskConfigConds (ExistTaskConfigCondsRequest) returns (ExistTaskConfigCondsResponse)  {}
    rpc DeleteTaskConfig     (DeleteTaskConfigRequest)     returns (DeleteTaskConfigResponse)   {
        option (google.api.http) = {
            post: "/v1/taskconfig_DeleteTaskConfig"
            body: "*"
        };
    }
}

message TaskConfigReq {
    optional uint32 ID           = 10;
    optional string EntID        = 20;
    optional string AppID        = 30;
    optional string EventID      = 40;
    optional basetypes.inspire.v1.TaskType TaskType = 50;
    optional string Name             = 60;
    optional string TaskDesc         = 70;
    optional string StepGuide        = 80;
    optional string RecommendMessage = 90;
    optional uint32 Index            = 100;
    optional string LastTaskID       = 110;
    optional uint32 MaxRewardCount   = 120;
    optional uint32 CooldownSecond   = 130;
    optional bool IntervalReset = 140;
    optional uint32 IntervalResetSecond = 150;
    optional uint32 MaxIntervalRewardCount = 160;
}

message TaskConfig {
    // @inject_tag: sql:"id"
    uint32          ID               = 10;
    // @inject_tag: sql:"ent_id"
    string          EntID            = 20;
    // @inject_tag: sql:"app_id"
    string          AppID            = 30;
    // @inject_tag: sql:"event_id"
    string          EventID          = 40;
    // @inject_tag: sql:"task_type"
    string          TaskTypeStr      = 50;
    basetypes.inspire.v1.TaskType TaskType = 60;
    // @inject_tag: sql:"name"
    string          Name             = 70;
    // @inject_tag: sql:"task_desc"
    string          TaskDesc         = 80;
    // @inject_tag: sql:"step_guide"
    string          StepGuide        = 90;
    // @inject_tag: sql:"recommend_message"
    string          RecommendMessage = 100;
    // @inject_tag: sql:"index"
    uint32          Index            = 110;
    // @inject_tag: sql:"last_task_id"
    string          LastTaskID       = 120;
    // @inject_tag: sql:"max_reward_count"
    uint32          MaxRewardCount   = 130;
    // @inject_tag: sql:"cooldown_second"
    uint32          CooldownSecond   = 140;
    // @inject_tag: sql:"interval_reset"
    bool IntervalReset = 150;
    // @inject_tag: sql:"interval_reset_second"
    uint32 IntervalResetSecond = 160;
    // @inject_tag: sql:"max_interval_reward_count"
    uint32 MaxIntervalRewardCount = 170;
    // @inject_tag: sql:"created_at"
    uint32          CreatedAt        = 1000;
    // @inject_tag: sql:"updated_at"
    uint32          UpdatedAt        = 1010;
}

message Conds {
    optional basetypes.v1.StringVal  EntID         = 10;
    optional basetypes.v1.Uint32Val  TaskType      = 20;
    optional basetypes.v1.StringVal  AppID         = 30;
    optional basetypes.v1.StringVal  Name          = 40;
    optional basetypes.v1.StringSliceVal EntIDs    = 50;
    optional basetypes.v1.Uint32Val  Index         = 60;
    optional basetypes.v1.StringVal  LastTaskID    = 70;
    optional basetypes.v1.StringVal  EventID       = 80;
    optional basetypes.v1.Uint32Val  ID            = 90;
    optional basetypes.v1.BoolVal IntervalReset = 100;
}

message GetTaskConfigsRequest {
    Conds  Conds     = 10;
    int32  Offset    = 20;
    int32  Limit     = 30;
}

message GetTaskConfigsResponse {
    repeated TaskConfig Infos = 10;
    uint32          Total = 20;
}

message CreateTaskConfigRequest {
    TaskConfigReq Info = 10;
}

message CreateTaskConfigResponse {
    TaskConfig Info = 10;
}

message UpdateTaskConfigRequest {
    TaskConfigReq Info = 10;
}

message UpdateTaskConfigResponse {
    TaskConfig Info = 10;
}

message GetTaskConfigRequest {
    string EntID  = 10;
}

message GetTaskConfigResponse {
    TaskConfig Info = 10;
}

message ExistTaskConfigCondsRequest {
  Conds Conds  = 10;
}

message ExistTaskConfigCondsResponse {
  bool Info = 10;
}

message DeleteTaskConfigRequest {
    TaskConfigReq Info = 10;
}

message DeleteTaskConfigResponse {
    TaskConfig Info = 10;
}
