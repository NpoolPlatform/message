// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/inspire/mw/v1/task/user/user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Middleware_CreateTaskUser_FullMethodName     = "/inspire.middleware.task.user.v1.Middleware/CreateTaskUser"
	Middleware_UpdateTaskUser_FullMethodName     = "/inspire.middleware.task.user.v1.Middleware/UpdateTaskUser"
	Middleware_GetTaskUser_FullMethodName        = "/inspire.middleware.task.user.v1.Middleware/GetTaskUser"
	Middleware_GetTaskUsers_FullMethodName       = "/inspire.middleware.task.user.v1.Middleware/GetTaskUsers"
	Middleware_ExistTaskUserConds_FullMethodName = "/inspire.middleware.task.user.v1.Middleware/ExistTaskUserConds"
	Middleware_DeleteTaskUser_FullMethodName     = "/inspire.middleware.task.user.v1.Middleware/DeleteTaskUser"
)

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
	CreateTaskUser(ctx context.Context, in *CreateTaskUserRequest, opts ...grpc.CallOption) (*CreateTaskUserResponse, error)
	UpdateTaskUser(ctx context.Context, in *UpdateTaskUserRequest, opts ...grpc.CallOption) (*UpdateTaskUserResponse, error)
	GetTaskUser(ctx context.Context, in *GetTaskUserRequest, opts ...grpc.CallOption) (*GetTaskUserResponse, error)
	GetTaskUsers(ctx context.Context, in *GetTaskUsersRequest, opts ...grpc.CallOption) (*GetTaskUsersResponse, error)
	ExistTaskUserConds(ctx context.Context, in *ExistTaskUserCondsRequest, opts ...grpc.CallOption) (*ExistTaskUserCondsResponse, error)
	DeleteTaskUser(ctx context.Context, in *DeleteTaskUserRequest, opts ...grpc.CallOption) (*DeleteTaskUserResponse, error)
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) CreateTaskUser(ctx context.Context, in *CreateTaskUserRequest, opts ...grpc.CallOption) (*CreateTaskUserResponse, error) {
	out := new(CreateTaskUserResponse)
	err := c.cc.Invoke(ctx, Middleware_CreateTaskUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) UpdateTaskUser(ctx context.Context, in *UpdateTaskUserRequest, opts ...grpc.CallOption) (*UpdateTaskUserResponse, error) {
	out := new(UpdateTaskUserResponse)
	err := c.cc.Invoke(ctx, Middleware_UpdateTaskUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetTaskUser(ctx context.Context, in *GetTaskUserRequest, opts ...grpc.CallOption) (*GetTaskUserResponse, error) {
	out := new(GetTaskUserResponse)
	err := c.cc.Invoke(ctx, Middleware_GetTaskUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetTaskUsers(ctx context.Context, in *GetTaskUsersRequest, opts ...grpc.CallOption) (*GetTaskUsersResponse, error) {
	out := new(GetTaskUsersResponse)
	err := c.cc.Invoke(ctx, Middleware_GetTaskUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ExistTaskUserConds(ctx context.Context, in *ExistTaskUserCondsRequest, opts ...grpc.CallOption) (*ExistTaskUserCondsResponse, error) {
	out := new(ExistTaskUserCondsResponse)
	err := c.cc.Invoke(ctx, Middleware_ExistTaskUserConds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) DeleteTaskUser(ctx context.Context, in *DeleteTaskUserRequest, opts ...grpc.CallOption) (*DeleteTaskUserResponse, error) {
	out := new(DeleteTaskUserResponse)
	err := c.cc.Invoke(ctx, Middleware_DeleteTaskUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
	CreateTaskUser(context.Context, *CreateTaskUserRequest) (*CreateTaskUserResponse, error)
	UpdateTaskUser(context.Context, *UpdateTaskUserRequest) (*UpdateTaskUserResponse, error)
	GetTaskUser(context.Context, *GetTaskUserRequest) (*GetTaskUserResponse, error)
	GetTaskUsers(context.Context, *GetTaskUsersRequest) (*GetTaskUsersResponse, error)
	ExistTaskUserConds(context.Context, *ExistTaskUserCondsRequest) (*ExistTaskUserCondsResponse, error)
	DeleteTaskUser(context.Context, *DeleteTaskUserRequest) (*DeleteTaskUserResponse, error)
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) CreateTaskUser(context.Context, *CreateTaskUserRequest) (*CreateTaskUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTaskUser not implemented")
}
func (UnimplementedMiddlewareServer) UpdateTaskUser(context.Context, *UpdateTaskUserRequest) (*UpdateTaskUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTaskUser not implemented")
}
func (UnimplementedMiddlewareServer) GetTaskUser(context.Context, *GetTaskUserRequest) (*GetTaskUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskUser not implemented")
}
func (UnimplementedMiddlewareServer) GetTaskUsers(context.Context, *GetTaskUsersRequest) (*GetTaskUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskUsers not implemented")
}
func (UnimplementedMiddlewareServer) ExistTaskUserConds(context.Context, *ExistTaskUserCondsRequest) (*ExistTaskUserCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistTaskUserConds not implemented")
}
func (UnimplementedMiddlewareServer) DeleteTaskUser(context.Context, *DeleteTaskUserRequest) (*DeleteTaskUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTaskUser not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_CreateTaskUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateTaskUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_CreateTaskUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateTaskUser(ctx, req.(*CreateTaskUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_UpdateTaskUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).UpdateTaskUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_UpdateTaskUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).UpdateTaskUser(ctx, req.(*UpdateTaskUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetTaskUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetTaskUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetTaskUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetTaskUser(ctx, req.(*GetTaskUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetTaskUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetTaskUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetTaskUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetTaskUsers(ctx, req.(*GetTaskUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ExistTaskUserConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistTaskUserCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ExistTaskUserConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_ExistTaskUserConds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ExistTaskUserConds(ctx, req.(*ExistTaskUserCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_DeleteTaskUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).DeleteTaskUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_DeleteTaskUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).DeleteTaskUser(ctx, req.(*DeleteTaskUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inspire.middleware.task.user.v1.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTaskUser",
			Handler:    _Middleware_CreateTaskUser_Handler,
		},
		{
			MethodName: "UpdateTaskUser",
			Handler:    _Middleware_UpdateTaskUser_Handler,
		},
		{
			MethodName: "GetTaskUser",
			Handler:    _Middleware_GetTaskUser_Handler,
		},
		{
			MethodName: "GetTaskUsers",
			Handler:    _Middleware_GetTaskUsers_Handler,
		},
		{
			MethodName: "ExistTaskUserConds",
			Handler:    _Middleware_ExistTaskUserConds_Handler,
		},
		{
			MethodName: "DeleteTaskUser",
			Handler:    _Middleware_DeleteTaskUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/inspire/mw/v1/task/user/user.proto",
}
