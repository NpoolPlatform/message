// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/inspire/gw/v1/coupon/app/cashcontrol/cashcontrol.proto

package cashcontrol

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gateway_GetCashControls_FullMethodName    = "/inspire.gateway.coupon.app.cashcontrol.v1.Gateway/GetCashControls"
	Gateway_CreateCashControl_FullMethodName  = "/inspire.gateway.coupon.app.cashcontrol.v1.Gateway/CreateCashControl"
	Gateway_DeleteCashControl_FullMethodName  = "/inspire.gateway.coupon.app.cashcontrol.v1.Gateway/DeleteCashControl"
	Gateway_GetAppCashControls_FullMethodName = "/inspire.gateway.coupon.app.cashcontrol.v1.Gateway/GetAppCashControls"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	GetCashControls(ctx context.Context, in *GetCashControlsRequest, opts ...grpc.CallOption) (*GetCashControlsResponse, error)
	CreateCashControl(ctx context.Context, in *CreateCashControlRequest, opts ...grpc.CallOption) (*CreateCashControlResponse, error)
	DeleteCashControl(ctx context.Context, in *DeleteCashControlRequest, opts ...grpc.CallOption) (*DeleteCashControlResponse, error)
	GetAppCashControls(ctx context.Context, in *GetAppCashControlsRequest, opts ...grpc.CallOption) (*GetAppCashControlsResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) GetCashControls(ctx context.Context, in *GetCashControlsRequest, opts ...grpc.CallOption) (*GetCashControlsResponse, error) {
	out := new(GetCashControlsResponse)
	err := c.cc.Invoke(ctx, Gateway_GetCashControls_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) CreateCashControl(ctx context.Context, in *CreateCashControlRequest, opts ...grpc.CallOption) (*CreateCashControlResponse, error) {
	out := new(CreateCashControlResponse)
	err := c.cc.Invoke(ctx, Gateway_CreateCashControl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) DeleteCashControl(ctx context.Context, in *DeleteCashControlRequest, opts ...grpc.CallOption) (*DeleteCashControlResponse, error) {
	out := new(DeleteCashControlResponse)
	err := c.cc.Invoke(ctx, Gateway_DeleteCashControl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetAppCashControls(ctx context.Context, in *GetAppCashControlsRequest, opts ...grpc.CallOption) (*GetAppCashControlsResponse, error) {
	out := new(GetAppCashControlsResponse)
	err := c.cc.Invoke(ctx, Gateway_GetAppCashControls_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	GetCashControls(context.Context, *GetCashControlsRequest) (*GetCashControlsResponse, error)
	CreateCashControl(context.Context, *CreateCashControlRequest) (*CreateCashControlResponse, error)
	DeleteCashControl(context.Context, *DeleteCashControlRequest) (*DeleteCashControlResponse, error)
	GetAppCashControls(context.Context, *GetAppCashControlsRequest) (*GetAppCashControlsResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) GetCashControls(context.Context, *GetCashControlsRequest) (*GetCashControlsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCashControls not implemented")
}
func (UnimplementedGatewayServer) CreateCashControl(context.Context, *CreateCashControlRequest) (*CreateCashControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCashControl not implemented")
}
func (UnimplementedGatewayServer) DeleteCashControl(context.Context, *DeleteCashControlRequest) (*DeleteCashControlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCashControl not implemented")
}
func (UnimplementedGatewayServer) GetAppCashControls(context.Context, *GetAppCashControlsRequest) (*GetAppCashControlsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppCashControls not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_GetCashControls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCashControlsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetCashControls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetCashControls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetCashControls(ctx, req.(*GetCashControlsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_CreateCashControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCashControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateCashControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_CreateCashControl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateCashControl(ctx, req.(*CreateCashControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_DeleteCashControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCashControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).DeleteCashControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_DeleteCashControl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).DeleteCashControl(ctx, req.(*DeleteCashControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetAppCashControls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppCashControlsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetAppCashControls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetAppCashControls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetAppCashControls(ctx, req.(*GetAppCashControlsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inspire.gateway.coupon.app.cashcontrol.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCashControls",
			Handler:    _Gateway_GetCashControls_Handler,
		},
		{
			MethodName: "CreateCashControl",
			Handler:    _Gateway_CreateCashControl_Handler,
		},
		{
			MethodName: "DeleteCashControl",
			Handler:    _Gateway_DeleteCashControl_Handler,
		},
		{
			MethodName: "GetAppCashControls",
			Handler:    _Gateway_GetAppCashControls_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/inspire/gw/v1/coupon/app/cashcontrol/cashcontrol.proto",
}
