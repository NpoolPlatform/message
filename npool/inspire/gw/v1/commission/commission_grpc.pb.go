// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/inspire/gw/v1/commission/commission.proto

package commission

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gateway_CreateCommission_FullMethodName     = "/inspire.gateway.commission.v1.Gateway/CreateCommission"
	Gateway_CreateUserCommission_FullMethodName = "/inspire.gateway.commission.v1.Gateway/CreateUserCommission"
	Gateway_UpdateCommission_FullMethodName     = "/inspire.gateway.commission.v1.Gateway/UpdateCommission"
	Gateway_GetCommissions_FullMethodName       = "/inspire.gateway.commission.v1.Gateway/GetCommissions"
	Gateway_GetAppCommissions_FullMethodName    = "/inspire.gateway.commission.v1.Gateway/GetAppCommissions"
	Gateway_CloneCommissions_FullMethodName     = "/inspire.gateway.commission.v1.Gateway/CloneCommissions"
	Gateway_CloneAppCommissions_FullMethodName  = "/inspire.gateway.commission.v1.Gateway/CloneAppCommissions"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	CreateCommission(ctx context.Context, in *CreateCommissionRequest, opts ...grpc.CallOption) (*CreateCommissionResponse, error)
	CreateUserCommission(ctx context.Context, in *CreateUserCommissionRequest, opts ...grpc.CallOption) (*CreateUserCommissionResponse, error)
	UpdateCommission(ctx context.Context, in *UpdateCommissionRequest, opts ...grpc.CallOption) (*UpdateCommissionResponse, error)
	GetCommissions(ctx context.Context, in *GetCommissionsRequest, opts ...grpc.CallOption) (*GetCommissionsResponse, error)
	GetAppCommissions(ctx context.Context, in *GetAppCommissionsRequest, opts ...grpc.CallOption) (*GetAppCommissionsResponse, error)
	CloneCommissions(ctx context.Context, in *CloneCommissionsRequest, opts ...grpc.CallOption) (*CloneCommissionsResponse, error)
	CloneAppCommissions(ctx context.Context, in *CloneAppCommissionsRequest, opts ...grpc.CallOption) (*CloneAppCommissionsResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) CreateCommission(ctx context.Context, in *CreateCommissionRequest, opts ...grpc.CallOption) (*CreateCommissionResponse, error) {
	out := new(CreateCommissionResponse)
	err := c.cc.Invoke(ctx, Gateway_CreateCommission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) CreateUserCommission(ctx context.Context, in *CreateUserCommissionRequest, opts ...grpc.CallOption) (*CreateUserCommissionResponse, error) {
	out := new(CreateUserCommissionResponse)
	err := c.cc.Invoke(ctx, Gateway_CreateUserCommission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdateCommission(ctx context.Context, in *UpdateCommissionRequest, opts ...grpc.CallOption) (*UpdateCommissionResponse, error) {
	out := new(UpdateCommissionResponse)
	err := c.cc.Invoke(ctx, Gateway_UpdateCommission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetCommissions(ctx context.Context, in *GetCommissionsRequest, opts ...grpc.CallOption) (*GetCommissionsResponse, error) {
	out := new(GetCommissionsResponse)
	err := c.cc.Invoke(ctx, Gateway_GetCommissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetAppCommissions(ctx context.Context, in *GetAppCommissionsRequest, opts ...grpc.CallOption) (*GetAppCommissionsResponse, error) {
	out := new(GetAppCommissionsResponse)
	err := c.cc.Invoke(ctx, Gateway_GetAppCommissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) CloneCommissions(ctx context.Context, in *CloneCommissionsRequest, opts ...grpc.CallOption) (*CloneCommissionsResponse, error) {
	out := new(CloneCommissionsResponse)
	err := c.cc.Invoke(ctx, Gateway_CloneCommissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) CloneAppCommissions(ctx context.Context, in *CloneAppCommissionsRequest, opts ...grpc.CallOption) (*CloneAppCommissionsResponse, error) {
	out := new(CloneAppCommissionsResponse)
	err := c.cc.Invoke(ctx, Gateway_CloneAppCommissions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	CreateCommission(context.Context, *CreateCommissionRequest) (*CreateCommissionResponse, error)
	CreateUserCommission(context.Context, *CreateUserCommissionRequest) (*CreateUserCommissionResponse, error)
	UpdateCommission(context.Context, *UpdateCommissionRequest) (*UpdateCommissionResponse, error)
	GetCommissions(context.Context, *GetCommissionsRequest) (*GetCommissionsResponse, error)
	GetAppCommissions(context.Context, *GetAppCommissionsRequest) (*GetAppCommissionsResponse, error)
	CloneCommissions(context.Context, *CloneCommissionsRequest) (*CloneCommissionsResponse, error)
	CloneAppCommissions(context.Context, *CloneAppCommissionsRequest) (*CloneAppCommissionsResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) CreateCommission(context.Context, *CreateCommissionRequest) (*CreateCommissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommission not implemented")
}
func (UnimplementedGatewayServer) CreateUserCommission(context.Context, *CreateUserCommissionRequest) (*CreateUserCommissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserCommission not implemented")
}
func (UnimplementedGatewayServer) UpdateCommission(context.Context, *UpdateCommissionRequest) (*UpdateCommissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCommission not implemented")
}
func (UnimplementedGatewayServer) GetCommissions(context.Context, *GetCommissionsRequest) (*GetCommissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommissions not implemented")
}
func (UnimplementedGatewayServer) GetAppCommissions(context.Context, *GetAppCommissionsRequest) (*GetAppCommissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppCommissions not implemented")
}
func (UnimplementedGatewayServer) CloneCommissions(context.Context, *CloneCommissionsRequest) (*CloneCommissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloneCommissions not implemented")
}
func (UnimplementedGatewayServer) CloneAppCommissions(context.Context, *CloneAppCommissionsRequest) (*CloneAppCommissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloneAppCommissions not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_CreateCommission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateCommission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_CreateCommission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateCommission(ctx, req.(*CreateCommissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_CreateUserCommission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserCommissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateUserCommission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_CreateUserCommission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateUserCommission(ctx, req.(*CreateUserCommissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdateCommission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateCommission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_UpdateCommission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateCommission(ctx, req.(*UpdateCommissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetCommissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetCommissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetCommissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetCommissions(ctx, req.(*GetCommissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetAppCommissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppCommissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetAppCommissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetAppCommissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetAppCommissions(ctx, req.(*GetAppCommissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_CloneCommissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloneCommissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CloneCommissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_CloneCommissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CloneCommissions(ctx, req.(*CloneCommissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_CloneAppCommissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloneAppCommissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CloneAppCommissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_CloneAppCommissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CloneAppCommissions(ctx, req.(*CloneAppCommissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inspire.gateway.commission.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCommission",
			Handler:    _Gateway_CreateCommission_Handler,
		},
		{
			MethodName: "CreateUserCommission",
			Handler:    _Gateway_CreateUserCommission_Handler,
		},
		{
			MethodName: "UpdateCommission",
			Handler:    _Gateway_UpdateCommission_Handler,
		},
		{
			MethodName: "GetCommissions",
			Handler:    _Gateway_GetCommissions_Handler,
		},
		{
			MethodName: "GetAppCommissions",
			Handler:    _Gateway_GetAppCommissions_Handler,
		},
		{
			MethodName: "CloneCommissions",
			Handler:    _Gateway_CloneCommissions_Handler,
		},
		{
			MethodName: "CloneAppCommissions",
			Handler:    _Gateway_CloneAppCommissions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/inspire/gw/v1/commission/commission.proto",
}
