syntax = "proto3";

package inspire.gateway.task.config.v1;

option go_package = "github.com/NpoolPlatform/message/npool/inspire/gw/v1/task/config";

import "google/api/annotations.proto";
import "npool/basetypes/inspire/v1/enums.proto";
import "npool/basetypes/v1/usedfor.proto";

// Service Name
service Gateway {
  rpc AdminCreateTaskConfig(AdminCreateTaskConfigRequest)
      returns (AdminCreateTaskConfigResponse) {
    option (google.api.http) = {
      post : "/v1/admin/create/taskconfig"
      body : "*"
    };
  }
  rpc AdminUpdateTaskConfig(AdminUpdateTaskConfigRequest)
      returns (AdminUpdateTaskConfigResponse) {
    option (google.api.http) = {
      post : "/v1/admin/update/taskconfig"
      body : "*"
    };
  }
  rpc AdminDeleteTaskConfig(AdminDeleteTaskConfigRequest)
      returns (AdminDeleteTaskConfigResponse) {
    option (google.api.http) = {
      post : "/v1/admin/delete/taskconfig"
      body : "*"
    };
  }
  rpc AdminGetTaskConfigs(AdminGetTaskConfigsRequest) returns (AdminGetTaskConfigsResponse) {
    option (google.api.http) = {
      post : "/v1/admin/get/taskconfigs"
      body : "*"
    };
  }
}

message TaskConfig {
  uint32 ID = 10;
  string EntID = 20;
  string AppID = 30;
  string EventID = 40;
  basetypes.inspire.v1.TaskType TaskType = 50;
  string Name = 60;
  string TaskDesc = 70;
  string StepGuide = 80;
  string RecommendMessage = 90;
  uint32 Index = 100;
  string LastTaskID = 110;
  uint32 MaxRewardCount = 120;
  uint32 CooldownSecond = 130;
  basetypes.v1.UsedFor EventType = 140;
  bool IntervalReset = 150;
  uint32 IntervalResetSecond = 160;
  uint32 MaxIntervalRewardCount = 170;
  uint32 CreatedAt = 1000;
  uint32 UpdatedAt = 1010;
}

message AdminCreateTaskConfigRequest {
  string TargetAppID = 10;
  string EventID = 20;
  basetypes.inspire.v1.TaskType TaskType = 30;
  string Name = 40;
  string TaskDesc = 50;
  string StepGuide = 60;
  string RecommendMessage = 70;
  uint32 Index = 80;
  uint32 MaxRewardCount = 90;
  uint32 CooldownSecond = 100;
  optional string LastTaskID = 110;
  optional bool IntervalReset = 120;
  optional uint32 IntervalResetSecond = 130;
  optional uint32 MaxIntervalRewardCount = 140;
}

message AdminCreateTaskConfigResponse { TaskConfig Info = 10; }

message AdminUpdateTaskConfigRequest {
  uint32 ID = 10;
  string EntID = 20;
  string TargetAppID = 30;
  optional basetypes.inspire.v1.TaskType TaskType = 40;
  optional string Name = 50;
  optional string TaskDesc = 60;
  optional string StepGuide = 70;
  optional string RecommendMessage = 80;
  optional uint32 Index = 90;
  optional uint32 MaxRewardCount = 100;
  optional uint32 CooldownSecond = 110;
  optional string LastTaskID = 120;
  optional bool IntervalReset = 130;
  optional uint32 IntervalResetSecond = 140;
  optional uint32 MaxIntervalRewardCount = 150;
}

message AdminUpdateTaskConfigResponse { TaskConfig Info = 10; }

message AdminGetTaskConfigsRequest {
  string TargetAppID = 10;
  int32 Offset = 30;
  int32 Limit = 40;
}

message AdminGetTaskConfigsResponse {
  repeated TaskConfig Infos = 10;
  uint32 Total = 20;
}

message AdminDeleteTaskConfigRequest {
  uint32 ID = 10;
  string EntID = 20;
}

message AdminDeleteTaskConfigResponse { TaskConfig Info = 10; }
