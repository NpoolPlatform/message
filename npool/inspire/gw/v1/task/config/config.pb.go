// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.18.1
// source: npool/inspire/gw/v1/task/config/config.proto

package config

import (
	v1 "github.com/NpoolPlatform/message/npool/basetypes/inspire/v1"
	v11 "github.com/NpoolPlatform/message/npool/basetypes/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserTaskConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               uint32         `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID            string         `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty"`
	AppID            string         `protobuf:"bytes,30,opt,name=AppID,proto3" json:"AppID,omitempty"`
	EventID          string         `protobuf:"bytes,40,opt,name=EventID,proto3" json:"EventID,omitempty"`
	TaskType         v1.TaskType    `protobuf:"varint,50,opt,name=TaskType,proto3,enum=basetypes.inspire.v1.TaskType" json:"TaskType,omitempty"`
	Name             string         `protobuf:"bytes,60,opt,name=Name,proto3" json:"Name,omitempty"`
	TaskDesc         string         `protobuf:"bytes,70,opt,name=TaskDesc,proto3" json:"TaskDesc,omitempty"`
	StepGuide        string         `protobuf:"bytes,80,opt,name=StepGuide,proto3" json:"StepGuide,omitempty"`
	RecommendMessage string         `protobuf:"bytes,90,opt,name=RecommendMessage,proto3" json:"RecommendMessage,omitempty"`
	Index            uint32         `protobuf:"varint,100,opt,name=Index,proto3" json:"Index,omitempty"`
	LastTaskID       string         `protobuf:"bytes,110,opt,name=LastTaskID,proto3" json:"LastTaskID,omitempty"`
	MaxRewardCount   uint32         `protobuf:"varint,120,opt,name=MaxRewardCount,proto3" json:"MaxRewardCount,omitempty"`
	CooldownSecord   uint32         `protobuf:"varint,130,opt,name=CooldownSecord,proto3" json:"CooldownSecord,omitempty"`
	CompletionTimes  uint32         `protobuf:"varint,140,opt,name=CompletionTimes,proto3" json:"CompletionTimes,omitempty"`
	NextStartAt      uint32         `protobuf:"varint,150,opt,name=NextStartAt,proto3" json:"NextStartAt,omitempty"`
	TaskState        v1.TaskState   `protobuf:"varint,160,opt,name=TaskState,proto3,enum=basetypes.inspire.v1.TaskState" json:"TaskState,omitempty"`
	RewardState      v1.RewardState `protobuf:"varint,170,opt,name=RewardState,proto3,enum=basetypes.inspire.v1.RewardState" json:"RewardState,omitempty"`
	CreatedAt        uint32         `protobuf:"varint,1000,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt        uint32         `protobuf:"varint,1010,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (x *UserTaskConfig) Reset() {
	*x = UserTaskConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_gw_v1_task_config_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTaskConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTaskConfig) ProtoMessage() {}

func (x *UserTaskConfig) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_gw_v1_task_config_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTaskConfig.ProtoReflect.Descriptor instead.
func (*UserTaskConfig) Descriptor() ([]byte, []int) {
	return file_npool_inspire_gw_v1_task_config_config_proto_rawDescGZIP(), []int{0}
}

func (x *UserTaskConfig) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *UserTaskConfig) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *UserTaskConfig) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *UserTaskConfig) GetEventID() string {
	if x != nil {
		return x.EventID
	}
	return ""
}

func (x *UserTaskConfig) GetTaskType() v1.TaskType {
	if x != nil {
		return x.TaskType
	}
	return v1.TaskType(0)
}

func (x *UserTaskConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserTaskConfig) GetTaskDesc() string {
	if x != nil {
		return x.TaskDesc
	}
	return ""
}

func (x *UserTaskConfig) GetStepGuide() string {
	if x != nil {
		return x.StepGuide
	}
	return ""
}

func (x *UserTaskConfig) GetRecommendMessage() string {
	if x != nil {
		return x.RecommendMessage
	}
	return ""
}

func (x *UserTaskConfig) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *UserTaskConfig) GetLastTaskID() string {
	if x != nil {
		return x.LastTaskID
	}
	return ""
}

func (x *UserTaskConfig) GetMaxRewardCount() uint32 {
	if x != nil {
		return x.MaxRewardCount
	}
	return 0
}

func (x *UserTaskConfig) GetCooldownSecord() uint32 {
	if x != nil {
		return x.CooldownSecord
	}
	return 0
}

func (x *UserTaskConfig) GetCompletionTimes() uint32 {
	if x != nil {
		return x.CompletionTimes
	}
	return 0
}

func (x *UserTaskConfig) GetNextStartAt() uint32 {
	if x != nil {
		return x.NextStartAt
	}
	return 0
}

func (x *UserTaskConfig) GetTaskState() v1.TaskState {
	if x != nil {
		return x.TaskState
	}
	return v1.TaskState(0)
}

func (x *UserTaskConfig) GetRewardState() v1.RewardState {
	if x != nil {
		return x.RewardState
	}
	return v1.RewardState(0)
}

func (x *UserTaskConfig) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *UserTaskConfig) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type TaskConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               uint32      `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID            string      `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty"`
	AppID            string      `protobuf:"bytes,30,opt,name=AppID,proto3" json:"AppID,omitempty"`
	EventID          string      `protobuf:"bytes,40,opt,name=EventID,proto3" json:"EventID,omitempty"`
	TaskType         v1.TaskType `protobuf:"varint,50,opt,name=TaskType,proto3,enum=basetypes.inspire.v1.TaskType" json:"TaskType,omitempty"`
	Name             string      `protobuf:"bytes,60,opt,name=Name,proto3" json:"Name,omitempty"`
	TaskDesc         string      `protobuf:"bytes,70,opt,name=TaskDesc,proto3" json:"TaskDesc,omitempty"`
	StepGuide        string      `protobuf:"bytes,80,opt,name=StepGuide,proto3" json:"StepGuide,omitempty"`
	RecommendMessage string      `protobuf:"bytes,90,opt,name=RecommendMessage,proto3" json:"RecommendMessage,omitempty"`
	Index            uint32      `protobuf:"varint,100,opt,name=Index,proto3" json:"Index,omitempty"`
	LastTaskID       string      `protobuf:"bytes,110,opt,name=LastTaskID,proto3" json:"LastTaskID,omitempty"`
	MaxRewardCount   uint32      `protobuf:"varint,120,opt,name=MaxRewardCount,proto3" json:"MaxRewardCount,omitempty"`
	CooldownSecord   uint32      `protobuf:"varint,130,opt,name=CooldownSecord,proto3" json:"CooldownSecord,omitempty"`
	EventType        v11.UsedFor `protobuf:"varint,140,opt,name=EventType,proto3,enum=basetypes.v1.UsedFor" json:"EventType,omitempty"`
	CreatedAt        uint32      `protobuf:"varint,1000,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt        uint32      `protobuf:"varint,1010,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (x *TaskConfig) Reset() {
	*x = TaskConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_gw_v1_task_config_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskConfig) ProtoMessage() {}

func (x *TaskConfig) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_gw_v1_task_config_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskConfig.ProtoReflect.Descriptor instead.
func (*TaskConfig) Descriptor() ([]byte, []int) {
	return file_npool_inspire_gw_v1_task_config_config_proto_rawDescGZIP(), []int{1}
}

func (x *TaskConfig) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *TaskConfig) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *TaskConfig) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *TaskConfig) GetEventID() string {
	if x != nil {
		return x.EventID
	}
	return ""
}

func (x *TaskConfig) GetTaskType() v1.TaskType {
	if x != nil {
		return x.TaskType
	}
	return v1.TaskType(0)
}

func (x *TaskConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskConfig) GetTaskDesc() string {
	if x != nil {
		return x.TaskDesc
	}
	return ""
}

func (x *TaskConfig) GetStepGuide() string {
	if x != nil {
		return x.StepGuide
	}
	return ""
}

func (x *TaskConfig) GetRecommendMessage() string {
	if x != nil {
		return x.RecommendMessage
	}
	return ""
}

func (x *TaskConfig) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *TaskConfig) GetLastTaskID() string {
	if x != nil {
		return x.LastTaskID
	}
	return ""
}

func (x *TaskConfig) GetMaxRewardCount() uint32 {
	if x != nil {
		return x.MaxRewardCount
	}
	return 0
}

func (x *TaskConfig) GetCooldownSecord() uint32 {
	if x != nil {
		return x.CooldownSecord
	}
	return 0
}

func (x *TaskConfig) GetEventType() v11.UsedFor {
	if x != nil {
		return x.EventType
	}
	return v11.UsedFor(0)
}

func (x *TaskConfig) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *TaskConfig) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type AdminCreateTaskConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetAppID      string      `protobuf:"bytes,10,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
	EventID          string      `protobuf:"bytes,20,opt,name=EventID,proto3" json:"EventID,omitempty"`
	TaskType         v1.TaskType `protobuf:"varint,30,opt,name=TaskType,proto3,enum=basetypes.inspire.v1.TaskType" json:"TaskType,omitempty"`
	Name             string      `protobuf:"bytes,40,opt,name=Name,proto3" json:"Name,omitempty"`
	TaskDesc         string      `protobuf:"bytes,50,opt,name=TaskDesc,proto3" json:"TaskDesc,omitempty"`
	StepGuide        string      `protobuf:"bytes,60,opt,name=StepGuide,proto3" json:"StepGuide,omitempty"`
	RecommendMessage string      `protobuf:"bytes,70,opt,name=RecommendMessage,proto3" json:"RecommendMessage,omitempty"`
	Index            uint32      `protobuf:"varint,80,opt,name=Index,proto3" json:"Index,omitempty"`
	MaxRewardCount   uint32      `protobuf:"varint,90,opt,name=MaxRewardCount,proto3" json:"MaxRewardCount,omitempty"`
	CooldownSecord   uint32      `protobuf:"varint,100,opt,name=CooldownSecord,proto3" json:"CooldownSecord,omitempty"`
	LastTaskID       *string     `protobuf:"bytes,110,opt,name=LastTaskID,proto3,oneof" json:"LastTaskID,omitempty"`
}

func (x *AdminCreateTaskConfigRequest) Reset() {
	*x = AdminCreateTaskConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_gw_v1_task_config_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminCreateTaskConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminCreateTaskConfigRequest) ProtoMessage() {}

func (x *AdminCreateTaskConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_gw_v1_task_config_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminCreateTaskConfigRequest.ProtoReflect.Descriptor instead.
func (*AdminCreateTaskConfigRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_gw_v1_task_config_config_proto_rawDescGZIP(), []int{2}
}

func (x *AdminCreateTaskConfigRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

func (x *AdminCreateTaskConfigRequest) GetEventID() string {
	if x != nil {
		return x.EventID
	}
	return ""
}

func (x *AdminCreateTaskConfigRequest) GetTaskType() v1.TaskType {
	if x != nil {
		return x.TaskType
	}
	return v1.TaskType(0)
}

func (x *AdminCreateTaskConfigRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AdminCreateTaskConfigRequest) GetTaskDesc() string {
	if x != nil {
		return x.TaskDesc
	}
	return ""
}

func (x *AdminCreateTaskConfigRequest) GetStepGuide() string {
	if x != nil {
		return x.StepGuide
	}
	return ""
}

func (x *AdminCreateTaskConfigRequest) GetRecommendMessage() string {
	if x != nil {
		return x.RecommendMessage
	}
	return ""
}

func (x *AdminCreateTaskConfigRequest) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *AdminCreateTaskConfigRequest) GetMaxRewardCount() uint32 {
	if x != nil {
		return x.MaxRewardCount
	}
	return 0
}

func (x *AdminCreateTaskConfigRequest) GetCooldownSecord() uint32 {
	if x != nil {
		return x.CooldownSecord
	}
	return 0
}

func (x *AdminCreateTaskConfigRequest) GetLastTaskID() string {
	if x != nil && x.LastTaskID != nil {
		return *x.LastTaskID
	}
	return ""
}

type AdminCreateTaskConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *TaskConfig `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *AdminCreateTaskConfigResponse) Reset() {
	*x = AdminCreateTaskConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_gw_v1_task_config_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminCreateTaskConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminCreateTaskConfigResponse) ProtoMessage() {}

func (x *AdminCreateTaskConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_gw_v1_task_config_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminCreateTaskConfigResponse.ProtoReflect.Descriptor instead.
func (*AdminCreateTaskConfigResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_gw_v1_task_config_config_proto_rawDescGZIP(), []int{3}
}

func (x *AdminCreateTaskConfigResponse) GetInfo() *TaskConfig {
	if x != nil {
		return x.Info
	}
	return nil
}

type AdminUpdateTaskConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               uint32       `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID            string       `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty"`
	TargetAppID      string       `protobuf:"bytes,30,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
	TaskType         *v1.TaskType `protobuf:"varint,40,opt,name=TaskType,proto3,enum=basetypes.inspire.v1.TaskType,oneof" json:"TaskType,omitempty"`
	Name             *string      `protobuf:"bytes,50,opt,name=Name,proto3,oneof" json:"Name,omitempty"`
	TaskDesc         *string      `protobuf:"bytes,60,opt,name=TaskDesc,proto3,oneof" json:"TaskDesc,omitempty"`
	StepGuide        *string      `protobuf:"bytes,70,opt,name=StepGuide,proto3,oneof" json:"StepGuide,omitempty"`
	RecommendMessage *string      `protobuf:"bytes,80,opt,name=RecommendMessage,proto3,oneof" json:"RecommendMessage,omitempty"`
	Index            *uint32      `protobuf:"varint,90,opt,name=Index,proto3,oneof" json:"Index,omitempty"`
	MaxRewardCount   *uint32      `protobuf:"varint,100,opt,name=MaxRewardCount,proto3,oneof" json:"MaxRewardCount,omitempty"`
	CooldownSecord   *uint32      `protobuf:"varint,110,opt,name=CooldownSecord,proto3,oneof" json:"CooldownSecord,omitempty"`
	LastTaskID       *string      `protobuf:"bytes,120,opt,name=LastTaskID,proto3,oneof" json:"LastTaskID,omitempty"`
}

func (x *AdminUpdateTaskConfigRequest) Reset() {
	*x = AdminUpdateTaskConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_gw_v1_task_config_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminUpdateTaskConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminUpdateTaskConfigRequest) ProtoMessage() {}

func (x *AdminUpdateTaskConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_gw_v1_task_config_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminUpdateTaskConfigRequest.ProtoReflect.Descriptor instead.
func (*AdminUpdateTaskConfigRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_gw_v1_task_config_config_proto_rawDescGZIP(), []int{4}
}

func (x *AdminUpdateTaskConfigRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *AdminUpdateTaskConfigRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *AdminUpdateTaskConfigRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

func (x *AdminUpdateTaskConfigRequest) GetTaskType() v1.TaskType {
	if x != nil && x.TaskType != nil {
		return *x.TaskType
	}
	return v1.TaskType(0)
}

func (x *AdminUpdateTaskConfigRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *AdminUpdateTaskConfigRequest) GetTaskDesc() string {
	if x != nil && x.TaskDesc != nil {
		return *x.TaskDesc
	}
	return ""
}

func (x *AdminUpdateTaskConfigRequest) GetStepGuide() string {
	if x != nil && x.StepGuide != nil {
		return *x.StepGuide
	}
	return ""
}

func (x *AdminUpdateTaskConfigRequest) GetRecommendMessage() string {
	if x != nil && x.RecommendMessage != nil {
		return *x.RecommendMessage
	}
	return ""
}

func (x *AdminUpdateTaskConfigRequest) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *AdminUpdateTaskConfigRequest) GetMaxRewardCount() uint32 {
	if x != nil && x.MaxRewardCount != nil {
		return *x.MaxRewardCount
	}
	return 0
}

func (x *AdminUpdateTaskConfigRequest) GetCooldownSecord() uint32 {
	if x != nil && x.CooldownSecord != nil {
		return *x.CooldownSecord
	}
	return 0
}

func (x *AdminUpdateTaskConfigRequest) GetLastTaskID() string {
	if x != nil && x.LastTaskID != nil {
		return *x.LastTaskID
	}
	return ""
}

type AdminUpdateTaskConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *TaskConfig `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *AdminUpdateTaskConfigResponse) Reset() {
	*x = AdminUpdateTaskConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_gw_v1_task_config_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminUpdateTaskConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminUpdateTaskConfigResponse) ProtoMessage() {}

func (x *AdminUpdateTaskConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_gw_v1_task_config_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminUpdateTaskConfigResponse.ProtoReflect.Descriptor instead.
func (*AdminUpdateTaskConfigResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_gw_v1_task_config_config_proto_rawDescGZIP(), []int{5}
}

func (x *AdminUpdateTaskConfigResponse) GetInfo() *TaskConfig {
	if x != nil {
		return x.Info
	}
	return nil
}

type UserGetTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID  string `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	UserID string `protobuf:"bytes,20,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Offset int32  `protobuf:"varint,30,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,40,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *UserGetTasksRequest) Reset() {
	*x = UserGetTasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_gw_v1_task_config_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserGetTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGetTasksRequest) ProtoMessage() {}

func (x *UserGetTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_gw_v1_task_config_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGetTasksRequest.ProtoReflect.Descriptor instead.
func (*UserGetTasksRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_gw_v1_task_config_config_proto_rawDescGZIP(), []int{6}
}

func (x *UserGetTasksRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *UserGetTasksRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UserGetTasksRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *UserGetTasksRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type UserGetTasksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*UserTaskConfig `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32            `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *UserGetTasksResponse) Reset() {
	*x = UserGetTasksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_gw_v1_task_config_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserGetTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserGetTasksResponse) ProtoMessage() {}

func (x *UserGetTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_gw_v1_task_config_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserGetTasksResponse.ProtoReflect.Descriptor instead.
func (*UserGetTasksResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_gw_v1_task_config_config_proto_rawDescGZIP(), []int{7}
}

func (x *UserGetTasksResponse) GetInfos() []*UserTaskConfig {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *UserGetTasksResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type AdminGetTaskConfigsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetAppID string `protobuf:"bytes,10,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
	Offset      int32  `protobuf:"varint,30,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit       int32  `protobuf:"varint,40,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *AdminGetTaskConfigsRequest) Reset() {
	*x = AdminGetTaskConfigsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_gw_v1_task_config_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminGetTaskConfigsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminGetTaskConfigsRequest) ProtoMessage() {}

func (x *AdminGetTaskConfigsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_gw_v1_task_config_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminGetTaskConfigsRequest.ProtoReflect.Descriptor instead.
func (*AdminGetTaskConfigsRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_gw_v1_task_config_config_proto_rawDescGZIP(), []int{8}
}

func (x *AdminGetTaskConfigsRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

func (x *AdminGetTaskConfigsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *AdminGetTaskConfigsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type AdminGetTaskConfigsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*TaskConfig `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32        `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *AdminGetTaskConfigsResponse) Reset() {
	*x = AdminGetTaskConfigsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_gw_v1_task_config_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminGetTaskConfigsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminGetTaskConfigsResponse) ProtoMessage() {}

func (x *AdminGetTaskConfigsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_gw_v1_task_config_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminGetTaskConfigsResponse.ProtoReflect.Descriptor instead.
func (*AdminGetTaskConfigsResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_gw_v1_task_config_config_proto_rawDescGZIP(), []int{9}
}

func (x *AdminGetTaskConfigsResponse) GetInfos() []*TaskConfig {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *AdminGetTaskConfigsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type AdminDeleteTaskConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID    uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID string `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty"`
}

func (x *AdminDeleteTaskConfigRequest) Reset() {
	*x = AdminDeleteTaskConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_gw_v1_task_config_config_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminDeleteTaskConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminDeleteTaskConfigRequest) ProtoMessage() {}

func (x *AdminDeleteTaskConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_gw_v1_task_config_config_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminDeleteTaskConfigRequest.ProtoReflect.Descriptor instead.
func (*AdminDeleteTaskConfigRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_gw_v1_task_config_config_proto_rawDescGZIP(), []int{10}
}

func (x *AdminDeleteTaskConfigRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *AdminDeleteTaskConfigRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

type AdminDeleteTaskConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *TaskConfig `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *AdminDeleteTaskConfigResponse) Reset() {
	*x = AdminDeleteTaskConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_gw_v1_task_config_config_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminDeleteTaskConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminDeleteTaskConfigResponse) ProtoMessage() {}

func (x *AdminDeleteTaskConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_gw_v1_task_config_config_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminDeleteTaskConfigResponse.ProtoReflect.Descriptor instead.
func (*AdminDeleteTaskConfigResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_gw_v1_task_config_config_proto_rawDescGZIP(), []int{11}
}

func (x *AdminDeleteTaskConfigResponse) GetInfo() *TaskConfig {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_inspire_gw_v1_task_config_config_proto protoreflect.FileDescriptor

var file_npool_inspire_gw_v1_task_config_config_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f,
	0x67, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x6e, 0x70,
	0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x69, 0x6e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x64, 0x66, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb5, 0x05, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x54,
	0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x3a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x69, 0x6e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x18, 0x46, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x53,
	0x74, 0x65, 0x70, 0x47, 0x75, 0x69, 0x64, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x53, 0x74, 0x65, 0x70, 0x47, 0x75, 0x69, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x5a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x4c,
	0x61, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x4d,
	0x61, 0x78, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x78, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0e, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x53,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x43, 0x6f,
	0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x29, 0x0a, 0x0f,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18,
	0x8c, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0b, 0x4e, 0x65, 0x78, 0x74, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x4e,
	0x65, 0x78, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x3e, 0x0a, 0x09, 0x54, 0x61,
	0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x09, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x0b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x1d, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xe8, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1d, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xf2, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x93,
	0x04, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a,
	0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x18,
	0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x12,
	0x1c, 0x0a, 0x09, 0x53, 0x74, 0x65, 0x70, 0x47, 0x75, 0x69, 0x64, 0x65, 0x18, 0x50, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x65, 0x70, 0x47, 0x75, 0x69, 0x64, 0x65, 0x12, 0x2a, 0x0a,
	0x10, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x1e, 0x0a, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x6e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12,
	0x26, 0x0a, 0x0e, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0e, 0x43, 0x6f, 0x6f, 0x6c, 0x64,
	0x6f, 0x77, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0e, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x34, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x8c, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x52, 0x09, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0xf2, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x22, 0xaa, 0x03, 0x0a, 0x1c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x3a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a,
	0x09, 0x53, 0x74, 0x65, 0x70, 0x47, 0x75, 0x69, 0x64, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x53, 0x74, 0x65, 0x70, 0x47, 0x75, 0x69, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x50, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26, 0x0a,
	0x0e, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x5a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77,
	0x6e, 0x53, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x43,
	0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x23, 0x0a,
	0x0a, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x6e, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x44, 0x22, 0x5f, 0x0a, 0x1d, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0xd4, 0x04, 0x0a, 0x1c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x3f, 0x0a, 0x08, 0x54,
	0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52,
	0x08, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x44, 0x65, 0x73,
	0x63, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x44,
	0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x53, 0x74, 0x65, 0x70, 0x47, 0x75,
	0x69, 0x64, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x53, 0x74, 0x65,
	0x70, 0x47, 0x75, 0x69, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x50, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x10, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x05, 0x52, 0x05, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x06, 0x52,
	0x0e, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x53, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x07, 0x52, 0x0e, 0x43, 0x6f,
	0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x23, 0x0a, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x78, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x54,
	0x61, 0x73, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x53, 0x74, 0x65, 0x70,
	0x47, 0x75, 0x69, 0x64, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x43, 0x6f, 0x6f, 0x6c,
	0x64, 0x6f, 0x77, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x4c,
	0x61, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x22, 0x5f, 0x0a, 0x1d, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x71, 0x0a, 0x13, 0x55, 0x73,
	0x65, 0x72, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x72, 0x0a,
	0x14, 0x55, 0x73, 0x65, 0x72, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x22, 0x6c, 0x0a, 0x1a, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22,
	0x75, 0x0a, 0x1b, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40,
	0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x44, 0x0a, 0x1c, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x5f, 0x0a, 0x1d,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x98, 0x07,
	0x0a, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0xbc, 0x01, 0x0a, 0x15, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x3c, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3d, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x61,
	0x73, 0x6b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xbc, 0x01, 0x0a, 0x15, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x3c, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3d, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x73,
	0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x61, 0x73,
	0x6b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xbc, 0x01, 0x0a, 0x15, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x3c, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61,
	0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3d, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2f, 0x74, 0x61, 0x73, 0x6b,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0xb4, 0x01, 0x0a, 0x13, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x3a,
	0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a,
	0x01, 0x2a, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x67, 0x65,
	0x74, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x98, 0x01,
	0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x33,
	0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x17, 0x3a, 0x01, 0x2a, 0x22, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x67,
	0x65, 0x74, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x42, 0x42, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f,
	0x6f, 0x6c, 0x2f, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f, 0x67, 0x77, 0x2f, 0x76, 0x31,
	0x2f, 0x74, 0x61, 0x73, 0x6b, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_inspire_gw_v1_task_config_config_proto_rawDescOnce sync.Once
	file_npool_inspire_gw_v1_task_config_config_proto_rawDescData = file_npool_inspire_gw_v1_task_config_config_proto_rawDesc
)

func file_npool_inspire_gw_v1_task_config_config_proto_rawDescGZIP() []byte {
	file_npool_inspire_gw_v1_task_config_config_proto_rawDescOnce.Do(func() {
		file_npool_inspire_gw_v1_task_config_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_inspire_gw_v1_task_config_config_proto_rawDescData)
	})
	return file_npool_inspire_gw_v1_task_config_config_proto_rawDescData
}

var file_npool_inspire_gw_v1_task_config_config_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_npool_inspire_gw_v1_task_config_config_proto_goTypes = []interface{}{
	(*UserTaskConfig)(nil),                // 0: inspire.gateway.task.config.v1.UserTaskConfig
	(*TaskConfig)(nil),                    // 1: inspire.gateway.task.config.v1.TaskConfig
	(*AdminCreateTaskConfigRequest)(nil),  // 2: inspire.gateway.task.config.v1.AdminCreateTaskConfigRequest
	(*AdminCreateTaskConfigResponse)(nil), // 3: inspire.gateway.task.config.v1.AdminCreateTaskConfigResponse
	(*AdminUpdateTaskConfigRequest)(nil),  // 4: inspire.gateway.task.config.v1.AdminUpdateTaskConfigRequest
	(*AdminUpdateTaskConfigResponse)(nil), // 5: inspire.gateway.task.config.v1.AdminUpdateTaskConfigResponse
	(*UserGetTasksRequest)(nil),           // 6: inspire.gateway.task.config.v1.UserGetTasksRequest
	(*UserGetTasksResponse)(nil),          // 7: inspire.gateway.task.config.v1.UserGetTasksResponse
	(*AdminGetTaskConfigsRequest)(nil),    // 8: inspire.gateway.task.config.v1.AdminGetTaskConfigsRequest
	(*AdminGetTaskConfigsResponse)(nil),   // 9: inspire.gateway.task.config.v1.AdminGetTaskConfigsResponse
	(*AdminDeleteTaskConfigRequest)(nil),  // 10: inspire.gateway.task.config.v1.AdminDeleteTaskConfigRequest
	(*AdminDeleteTaskConfigResponse)(nil), // 11: inspire.gateway.task.config.v1.AdminDeleteTaskConfigResponse
	(v1.TaskType)(0),                      // 12: basetypes.inspire.v1.TaskType
	(v1.TaskState)(0),                     // 13: basetypes.inspire.v1.TaskState
	(v1.RewardState)(0),                   // 14: basetypes.inspire.v1.RewardState
	(v11.UsedFor)(0),                      // 15: basetypes.v1.UsedFor
}
var file_npool_inspire_gw_v1_task_config_config_proto_depIdxs = []int32{
	12, // 0: inspire.gateway.task.config.v1.UserTaskConfig.TaskType:type_name -> basetypes.inspire.v1.TaskType
	13, // 1: inspire.gateway.task.config.v1.UserTaskConfig.TaskState:type_name -> basetypes.inspire.v1.TaskState
	14, // 2: inspire.gateway.task.config.v1.UserTaskConfig.RewardState:type_name -> basetypes.inspire.v1.RewardState
	12, // 3: inspire.gateway.task.config.v1.TaskConfig.TaskType:type_name -> basetypes.inspire.v1.TaskType
	15, // 4: inspire.gateway.task.config.v1.TaskConfig.EventType:type_name -> basetypes.v1.UsedFor
	12, // 5: inspire.gateway.task.config.v1.AdminCreateTaskConfigRequest.TaskType:type_name -> basetypes.inspire.v1.TaskType
	1,  // 6: inspire.gateway.task.config.v1.AdminCreateTaskConfigResponse.Info:type_name -> inspire.gateway.task.config.v1.TaskConfig
	12, // 7: inspire.gateway.task.config.v1.AdminUpdateTaskConfigRequest.TaskType:type_name -> basetypes.inspire.v1.TaskType
	1,  // 8: inspire.gateway.task.config.v1.AdminUpdateTaskConfigResponse.Info:type_name -> inspire.gateway.task.config.v1.TaskConfig
	0,  // 9: inspire.gateway.task.config.v1.UserGetTasksResponse.Infos:type_name -> inspire.gateway.task.config.v1.UserTaskConfig
	1,  // 10: inspire.gateway.task.config.v1.AdminGetTaskConfigsResponse.Infos:type_name -> inspire.gateway.task.config.v1.TaskConfig
	1,  // 11: inspire.gateway.task.config.v1.AdminDeleteTaskConfigResponse.Info:type_name -> inspire.gateway.task.config.v1.TaskConfig
	2,  // 12: inspire.gateway.task.config.v1.Gateway.AdminCreateTaskConfig:input_type -> inspire.gateway.task.config.v1.AdminCreateTaskConfigRequest
	4,  // 13: inspire.gateway.task.config.v1.Gateway.AdminUpdateTaskConfig:input_type -> inspire.gateway.task.config.v1.AdminUpdateTaskConfigRequest
	10, // 14: inspire.gateway.task.config.v1.Gateway.AdminDeleteTaskConfig:input_type -> inspire.gateway.task.config.v1.AdminDeleteTaskConfigRequest
	8,  // 15: inspire.gateway.task.config.v1.Gateway.AdminGetTaskConfigs:input_type -> inspire.gateway.task.config.v1.AdminGetTaskConfigsRequest
	6,  // 16: inspire.gateway.task.config.v1.Gateway.UserGetTasks:input_type -> inspire.gateway.task.config.v1.UserGetTasksRequest
	3,  // 17: inspire.gateway.task.config.v1.Gateway.AdminCreateTaskConfig:output_type -> inspire.gateway.task.config.v1.AdminCreateTaskConfigResponse
	5,  // 18: inspire.gateway.task.config.v1.Gateway.AdminUpdateTaskConfig:output_type -> inspire.gateway.task.config.v1.AdminUpdateTaskConfigResponse
	11, // 19: inspire.gateway.task.config.v1.Gateway.AdminDeleteTaskConfig:output_type -> inspire.gateway.task.config.v1.AdminDeleteTaskConfigResponse
	9,  // 20: inspire.gateway.task.config.v1.Gateway.AdminGetTaskConfigs:output_type -> inspire.gateway.task.config.v1.AdminGetTaskConfigsResponse
	7,  // 21: inspire.gateway.task.config.v1.Gateway.UserGetTasks:output_type -> inspire.gateway.task.config.v1.UserGetTasksResponse
	17, // [17:22] is the sub-list for method output_type
	12, // [12:17] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_npool_inspire_gw_v1_task_config_config_proto_init() }
func file_npool_inspire_gw_v1_task_config_config_proto_init() {
	if File_npool_inspire_gw_v1_task_config_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_inspire_gw_v1_task_config_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTaskConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_gw_v1_task_config_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_gw_v1_task_config_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminCreateTaskConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_gw_v1_task_config_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminCreateTaskConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_gw_v1_task_config_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminUpdateTaskConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_gw_v1_task_config_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminUpdateTaskConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_gw_v1_task_config_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserGetTasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_gw_v1_task_config_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserGetTasksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_gw_v1_task_config_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminGetTaskConfigsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_gw_v1_task_config_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminGetTaskConfigsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_gw_v1_task_config_config_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminDeleteTaskConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_gw_v1_task_config_config_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminDeleteTaskConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_inspire_gw_v1_task_config_config_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_npool_inspire_gw_v1_task_config_config_proto_msgTypes[4].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_inspire_gw_v1_task_config_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_inspire_gw_v1_task_config_config_proto_goTypes,
		DependencyIndexes: file_npool_inspire_gw_v1_task_config_config_proto_depIdxs,
		MessageInfos:      file_npool_inspire_gw_v1_task_config_config_proto_msgTypes,
	}.Build()
	File_npool_inspire_gw_v1_task_config_config_proto = out.File
	file_npool_inspire_gw_v1_task_config_config_proto_rawDesc = nil
	file_npool_inspire_gw_v1_task_config_config_proto_goTypes = nil
	file_npool_inspire_gw_v1_task_config_config_proto_depIdxs = nil
}
