// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/inspire/gw/v1/event/coin/coin.proto

package coin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gateway_CreateEventCoin_FullMethodName      = "/inspire.gateway.event.coin.v1.Gateway/CreateEventCoin"
	Gateway_GetEventCoins_FullMethodName        = "/inspire.gateway.event.coin.v1.Gateway/GetEventCoins"
	Gateway_UpdateEventCoin_FullMethodName      = "/inspire.gateway.event.coin.v1.Gateway/UpdateEventCoin"
	Gateway_AdminGetEventCoins_FullMethodName   = "/inspire.gateway.event.coin.v1.Gateway/AdminGetEventCoins"
	Gateway_AdminCreateEventCoin_FullMethodName = "/inspire.gateway.event.coin.v1.Gateway/AdminCreateEventCoin"
	Gateway_AdminUpdateEventCoin_FullMethodName = "/inspire.gateway.event.coin.v1.Gateway/AdminUpdateEventCoin"
	Gateway_AdminDeleteEventCoin_FullMethodName = "/inspire.gateway.event.coin.v1.Gateway/AdminDeleteEventCoin"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	CreateEventCoin(ctx context.Context, in *CreateEventCoinRequest, opts ...grpc.CallOption) (*CreateEventCoinResponse, error)
	GetEventCoins(ctx context.Context, in *GetEventCoinsRequest, opts ...grpc.CallOption) (*GetEventCoinsResponse, error)
	UpdateEventCoin(ctx context.Context, in *UpdateEventCoinRequest, opts ...grpc.CallOption) (*UpdateEventCoinResponse, error)
	AdminGetEventCoins(ctx context.Context, in *AdminGetEventCoinsRequest, opts ...grpc.CallOption) (*AdminGetEventCoinsResponse, error)
	AdminCreateEventCoin(ctx context.Context, in *AdminCreateEventCoinRequest, opts ...grpc.CallOption) (*AdminCreateEventCoinResponse, error)
	AdminUpdateEventCoin(ctx context.Context, in *AdminUpdateEventCoinRequest, opts ...grpc.CallOption) (*AdminUpdateEventCoinResponse, error)
	AdminDeleteEventCoin(ctx context.Context, in *AdminDeleteEventCoinRequest, opts ...grpc.CallOption) (*AdminDeleteEventCoinResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) CreateEventCoin(ctx context.Context, in *CreateEventCoinRequest, opts ...grpc.CallOption) (*CreateEventCoinResponse, error) {
	out := new(CreateEventCoinResponse)
	err := c.cc.Invoke(ctx, Gateway_CreateEventCoin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetEventCoins(ctx context.Context, in *GetEventCoinsRequest, opts ...grpc.CallOption) (*GetEventCoinsResponse, error) {
	out := new(GetEventCoinsResponse)
	err := c.cc.Invoke(ctx, Gateway_GetEventCoins_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdateEventCoin(ctx context.Context, in *UpdateEventCoinRequest, opts ...grpc.CallOption) (*UpdateEventCoinResponse, error) {
	out := new(UpdateEventCoinResponse)
	err := c.cc.Invoke(ctx, Gateway_UpdateEventCoin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminGetEventCoins(ctx context.Context, in *AdminGetEventCoinsRequest, opts ...grpc.CallOption) (*AdminGetEventCoinsResponse, error) {
	out := new(AdminGetEventCoinsResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminGetEventCoins_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminCreateEventCoin(ctx context.Context, in *AdminCreateEventCoinRequest, opts ...grpc.CallOption) (*AdminCreateEventCoinResponse, error) {
	out := new(AdminCreateEventCoinResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminCreateEventCoin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminUpdateEventCoin(ctx context.Context, in *AdminUpdateEventCoinRequest, opts ...grpc.CallOption) (*AdminUpdateEventCoinResponse, error) {
	out := new(AdminUpdateEventCoinResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminUpdateEventCoin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminDeleteEventCoin(ctx context.Context, in *AdminDeleteEventCoinRequest, opts ...grpc.CallOption) (*AdminDeleteEventCoinResponse, error) {
	out := new(AdminDeleteEventCoinResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminDeleteEventCoin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	CreateEventCoin(context.Context, *CreateEventCoinRequest) (*CreateEventCoinResponse, error)
	GetEventCoins(context.Context, *GetEventCoinsRequest) (*GetEventCoinsResponse, error)
	UpdateEventCoin(context.Context, *UpdateEventCoinRequest) (*UpdateEventCoinResponse, error)
	AdminGetEventCoins(context.Context, *AdminGetEventCoinsRequest) (*AdminGetEventCoinsResponse, error)
	AdminCreateEventCoin(context.Context, *AdminCreateEventCoinRequest) (*AdminCreateEventCoinResponse, error)
	AdminUpdateEventCoin(context.Context, *AdminUpdateEventCoinRequest) (*AdminUpdateEventCoinResponse, error)
	AdminDeleteEventCoin(context.Context, *AdminDeleteEventCoinRequest) (*AdminDeleteEventCoinResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) CreateEventCoin(context.Context, *CreateEventCoinRequest) (*CreateEventCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEventCoin not implemented")
}
func (UnimplementedGatewayServer) GetEventCoins(context.Context, *GetEventCoinsRequest) (*GetEventCoinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventCoins not implemented")
}
func (UnimplementedGatewayServer) UpdateEventCoin(context.Context, *UpdateEventCoinRequest) (*UpdateEventCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEventCoin not implemented")
}
func (UnimplementedGatewayServer) AdminGetEventCoins(context.Context, *AdminGetEventCoinsRequest) (*AdminGetEventCoinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetEventCoins not implemented")
}
func (UnimplementedGatewayServer) AdminCreateEventCoin(context.Context, *AdminCreateEventCoinRequest) (*AdminCreateEventCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCreateEventCoin not implemented")
}
func (UnimplementedGatewayServer) AdminUpdateEventCoin(context.Context, *AdminUpdateEventCoinRequest) (*AdminUpdateEventCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateEventCoin not implemented")
}
func (UnimplementedGatewayServer) AdminDeleteEventCoin(context.Context, *AdminDeleteEventCoinRequest) (*AdminDeleteEventCoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDeleteEventCoin not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_CreateEventCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateEventCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_CreateEventCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateEventCoin(ctx, req.(*CreateEventCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetEventCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventCoinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetEventCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetEventCoins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetEventCoins(ctx, req.(*GetEventCoinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdateEventCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEventCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateEventCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_UpdateEventCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateEventCoin(ctx, req.(*UpdateEventCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminGetEventCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetEventCoinsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminGetEventCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminGetEventCoins_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminGetEventCoins(ctx, req.(*AdminGetEventCoinsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminCreateEventCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCreateEventCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminCreateEventCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminCreateEventCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminCreateEventCoin(ctx, req.(*AdminCreateEventCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminUpdateEventCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateEventCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminUpdateEventCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminUpdateEventCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminUpdateEventCoin(ctx, req.(*AdminUpdateEventCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminDeleteEventCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDeleteEventCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminDeleteEventCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminDeleteEventCoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminDeleteEventCoin(ctx, req.(*AdminDeleteEventCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inspire.gateway.event.coin.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEventCoin",
			Handler:    _Gateway_CreateEventCoin_Handler,
		},
		{
			MethodName: "GetEventCoins",
			Handler:    _Gateway_GetEventCoins_Handler,
		},
		{
			MethodName: "UpdateEventCoin",
			Handler:    _Gateway_UpdateEventCoin_Handler,
		},
		{
			MethodName: "AdminGetEventCoins",
			Handler:    _Gateway_AdminGetEventCoins_Handler,
		},
		{
			MethodName: "AdminCreateEventCoin",
			Handler:    _Gateway_AdminCreateEventCoin_Handler,
		},
		{
			MethodName: "AdminUpdateEventCoin",
			Handler:    _Gateway_AdminUpdateEventCoin_Handler,
		},
		{
			MethodName: "AdminDeleteEventCoin",
			Handler:    _Gateway_AdminDeleteEventCoin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/inspire/gw/v1/event/coin/coin.proto",
}
