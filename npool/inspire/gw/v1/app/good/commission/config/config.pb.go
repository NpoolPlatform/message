// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: npool/inspire/gw/v1/app/good/commission/config/config.proto

package config

import (
	v1 "github.com/NpoolPlatform/message/npool/basetypes/inspire/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AppGoodCommissionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              uint32        `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID           string        `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty"`
	AppID           string        `protobuf:"bytes,30,opt,name=AppID,proto3" json:"AppID,omitempty"`
	SettleType      v1.SettleType `protobuf:"varint,40,opt,name=SettleType,proto3,enum=basetypes.inspire.v1.SettleType" json:"SettleType,omitempty"`
	GoodID          string        `protobuf:"bytes,50,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
	GoodTitle       string        `protobuf:"bytes,60,opt,name=GoodTitle,proto3" json:"GoodTitle,omitempty"`
	CoinTypeID      string        `protobuf:"bytes,70,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty"`
	CoinName        string        `protobuf:"bytes,80,opt,name=CoinName,proto3" json:"CoinName,omitempty"`
	CoinLogo        string        `protobuf:"bytes,90,opt,name=CoinLogo,proto3" json:"CoinLogo,omitempty"`
	AmountOrPercent string        `protobuf:"bytes,100,opt,name=AmountOrPercent,proto3" json:"AmountOrPercent,omitempty"`
	ThresholdAmount string        `protobuf:"bytes,110,opt,name=ThresholdAmount,proto3" json:"ThresholdAmount,omitempty"`
	Invites         uint32        `protobuf:"varint,120,opt,name=Invites,proto3" json:"Invites,omitempty"`
	StartAt         uint32        `protobuf:"varint,130,opt,name=StartAt,proto3" json:"StartAt,omitempty"`
	EndAt           uint32        `protobuf:"varint,140,opt,name=EndAt,proto3" json:"EndAt,omitempty"`
	AppGoodID       string        `protobuf:"bytes,150,opt,name=AppGoodID,proto3" json:"AppGoodID,omitempty"`
	GoodName        string        `protobuf:"bytes,160,opt,name=GoodName,proto3" json:"GoodName,omitempty"`
	Disabled        bool          `protobuf:"varint,170,opt,name=Disabled,proto3" json:"Disabled,omitempty"`
	Level           uint32        `protobuf:"varint,180,opt,name=Level,proto3" json:"Level,omitempty"`
	CreatedAt       uint32        `protobuf:"varint,1000,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt       uint32        `protobuf:"varint,1010,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (x *AppGoodCommissionConfig) Reset() {
	*x = AppGoodCommissionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppGoodCommissionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppGoodCommissionConfig) ProtoMessage() {}

func (x *AppGoodCommissionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppGoodCommissionConfig.ProtoReflect.Descriptor instead.
func (*AppGoodCommissionConfig) Descriptor() ([]byte, []int) {
	return file_npool_inspire_gw_v1_app_good_commission_config_config_proto_rawDescGZIP(), []int{0}
}

func (x *AppGoodCommissionConfig) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *AppGoodCommissionConfig) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *AppGoodCommissionConfig) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *AppGoodCommissionConfig) GetSettleType() v1.SettleType {
	if x != nil {
		return x.SettleType
	}
	return v1.SettleType(0)
}

func (x *AppGoodCommissionConfig) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *AppGoodCommissionConfig) GetGoodTitle() string {
	if x != nil {
		return x.GoodTitle
	}
	return ""
}

func (x *AppGoodCommissionConfig) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

func (x *AppGoodCommissionConfig) GetCoinName() string {
	if x != nil {
		return x.CoinName
	}
	return ""
}

func (x *AppGoodCommissionConfig) GetCoinLogo() string {
	if x != nil {
		return x.CoinLogo
	}
	return ""
}

func (x *AppGoodCommissionConfig) GetAmountOrPercent() string {
	if x != nil {
		return x.AmountOrPercent
	}
	return ""
}

func (x *AppGoodCommissionConfig) GetThresholdAmount() string {
	if x != nil {
		return x.ThresholdAmount
	}
	return ""
}

func (x *AppGoodCommissionConfig) GetInvites() uint32 {
	if x != nil {
		return x.Invites
	}
	return 0
}

func (x *AppGoodCommissionConfig) GetStartAt() uint32 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *AppGoodCommissionConfig) GetEndAt() uint32 {
	if x != nil {
		return x.EndAt
	}
	return 0
}

func (x *AppGoodCommissionConfig) GetAppGoodID() string {
	if x != nil {
		return x.AppGoodID
	}
	return ""
}

func (x *AppGoodCommissionConfig) GetGoodName() string {
	if x != nil {
		return x.GoodName
	}
	return ""
}

func (x *AppGoodCommissionConfig) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *AppGoodCommissionConfig) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *AppGoodCommissionConfig) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *AppGoodCommissionConfig) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type CreateAppGoodCommissionConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID           string        `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	AppGoodID       string        `protobuf:"bytes,20,opt,name=AppGoodID,proto3" json:"AppGoodID,omitempty"`
	ThresholdAmount string        `protobuf:"bytes,30,opt,name=ThresholdAmount,proto3" json:"ThresholdAmount,omitempty"`
	AmountOrPercent string        `protobuf:"bytes,40,opt,name=AmountOrPercent,proto3" json:"AmountOrPercent,omitempty"`
	StartAt         *uint32       `protobuf:"varint,50,opt,name=StartAt,proto3,oneof" json:"StartAt,omitempty"`
	Invites         uint32        `protobuf:"varint,60,opt,name=Invites,proto3" json:"Invites,omitempty"`
	SettleType      v1.SettleType `protobuf:"varint,70,opt,name=SettleType,proto3,enum=basetypes.inspire.v1.SettleType" json:"SettleType,omitempty"`
	Disabled        bool          `protobuf:"varint,80,opt,name=Disabled,proto3" json:"Disabled,omitempty"`
	Level           uint32        `protobuf:"varint,90,opt,name=Level,proto3" json:"Level,omitempty"`
}

func (x *CreateAppGoodCommissionConfigRequest) Reset() {
	*x = CreateAppGoodCommissionConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAppGoodCommissionConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAppGoodCommissionConfigRequest) ProtoMessage() {}

func (x *CreateAppGoodCommissionConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAppGoodCommissionConfigRequest.ProtoReflect.Descriptor instead.
func (*CreateAppGoodCommissionConfigRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_gw_v1_app_good_commission_config_config_proto_rawDescGZIP(), []int{1}
}

func (x *CreateAppGoodCommissionConfigRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *CreateAppGoodCommissionConfigRequest) GetAppGoodID() string {
	if x != nil {
		return x.AppGoodID
	}
	return ""
}

func (x *CreateAppGoodCommissionConfigRequest) GetThresholdAmount() string {
	if x != nil {
		return x.ThresholdAmount
	}
	return ""
}

func (x *CreateAppGoodCommissionConfigRequest) GetAmountOrPercent() string {
	if x != nil {
		return x.AmountOrPercent
	}
	return ""
}

func (x *CreateAppGoodCommissionConfigRequest) GetStartAt() uint32 {
	if x != nil && x.StartAt != nil {
		return *x.StartAt
	}
	return 0
}

func (x *CreateAppGoodCommissionConfigRequest) GetInvites() uint32 {
	if x != nil {
		return x.Invites
	}
	return 0
}

func (x *CreateAppGoodCommissionConfigRequest) GetSettleType() v1.SettleType {
	if x != nil {
		return x.SettleType
	}
	return v1.SettleType(0)
}

func (x *CreateAppGoodCommissionConfigRequest) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *CreateAppGoodCommissionConfigRequest) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

type CreateAppGoodCommissionConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppGoodCommissionConfig `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateAppGoodCommissionConfigResponse) Reset() {
	*x = CreateAppGoodCommissionConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAppGoodCommissionConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAppGoodCommissionConfigResponse) ProtoMessage() {}

func (x *CreateAppGoodCommissionConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAppGoodCommissionConfigResponse.ProtoReflect.Descriptor instead.
func (*CreateAppGoodCommissionConfigResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_gw_v1_app_good_commission_config_config_proto_rawDescGZIP(), []int{2}
}

func (x *CreateAppGoodCommissionConfigResponse) GetInfo() *AppGoodCommissionConfig {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateNAppGoodCommissionConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetAppID     string        `protobuf:"bytes,10,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
	AppGoodID       string        `protobuf:"bytes,20,opt,name=AppGoodID,proto3" json:"AppGoodID,omitempty"`
	ThresholdAmount string        `protobuf:"bytes,30,opt,name=ThresholdAmount,proto3" json:"ThresholdAmount,omitempty"`
	AmountOrPercent string        `protobuf:"bytes,40,opt,name=AmountOrPercent,proto3" json:"AmountOrPercent,omitempty"`
	StartAt         *uint32       `protobuf:"varint,50,opt,name=StartAt,proto3,oneof" json:"StartAt,omitempty"`
	Invites         uint32        `protobuf:"varint,60,opt,name=Invites,proto3" json:"Invites,omitempty"`
	SettleType      v1.SettleType `protobuf:"varint,70,opt,name=SettleType,proto3,enum=basetypes.inspire.v1.SettleType" json:"SettleType,omitempty"`
	Disabled        bool          `protobuf:"varint,80,opt,name=Disabled,proto3" json:"Disabled,omitempty"`
	Level           uint32        `protobuf:"varint,90,opt,name=Level,proto3" json:"Level,omitempty"`
}

func (x *CreateNAppGoodCommissionConfigRequest) Reset() {
	*x = CreateNAppGoodCommissionConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNAppGoodCommissionConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNAppGoodCommissionConfigRequest) ProtoMessage() {}

func (x *CreateNAppGoodCommissionConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNAppGoodCommissionConfigRequest.ProtoReflect.Descriptor instead.
func (*CreateNAppGoodCommissionConfigRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_gw_v1_app_good_commission_config_config_proto_rawDescGZIP(), []int{3}
}

func (x *CreateNAppGoodCommissionConfigRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

func (x *CreateNAppGoodCommissionConfigRequest) GetAppGoodID() string {
	if x != nil {
		return x.AppGoodID
	}
	return ""
}

func (x *CreateNAppGoodCommissionConfigRequest) GetThresholdAmount() string {
	if x != nil {
		return x.ThresholdAmount
	}
	return ""
}

func (x *CreateNAppGoodCommissionConfigRequest) GetAmountOrPercent() string {
	if x != nil {
		return x.AmountOrPercent
	}
	return ""
}

func (x *CreateNAppGoodCommissionConfigRequest) GetStartAt() uint32 {
	if x != nil && x.StartAt != nil {
		return *x.StartAt
	}
	return 0
}

func (x *CreateNAppGoodCommissionConfigRequest) GetInvites() uint32 {
	if x != nil {
		return x.Invites
	}
	return 0
}

func (x *CreateNAppGoodCommissionConfigRequest) GetSettleType() v1.SettleType {
	if x != nil {
		return x.SettleType
	}
	return v1.SettleType(0)
}

func (x *CreateNAppGoodCommissionConfigRequest) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *CreateNAppGoodCommissionConfigRequest) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

type CreateNAppGoodCommissionConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppGoodCommissionConfig `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateNAppGoodCommissionConfigResponse) Reset() {
	*x = CreateNAppGoodCommissionConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateNAppGoodCommissionConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateNAppGoodCommissionConfigResponse) ProtoMessage() {}

func (x *CreateNAppGoodCommissionConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateNAppGoodCommissionConfigResponse.ProtoReflect.Descriptor instead.
func (*CreateNAppGoodCommissionConfigResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_gw_v1_app_good_commission_config_config_proto_rawDescGZIP(), []int{4}
}

func (x *CreateNAppGoodCommissionConfigResponse) GetInfo() *AppGoodCommissionConfig {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateAppGoodCommissionConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              uint32  `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID           string  `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty"`
	AppID           string  `protobuf:"bytes,30,opt,name=AppID,proto3" json:"AppID,omitempty"`
	StartAt         *uint32 `protobuf:"varint,40,opt,name=StartAt,proto3,oneof" json:"StartAt,omitempty"`
	ThresholdAmount *string `protobuf:"bytes,50,opt,name=ThresholdAmount,proto3,oneof" json:"ThresholdAmount,omitempty"`
	Invites         *uint32 `protobuf:"varint,60,opt,name=Invites,proto3,oneof" json:"Invites,omitempty"`
	Disabled        *bool   `protobuf:"varint,70,opt,name=Disabled,proto3,oneof" json:"Disabled,omitempty"`
	Level           *uint32 `protobuf:"varint,80,opt,name=Level,proto3,oneof" json:"Level,omitempty"`
}

func (x *UpdateAppGoodCommissionConfigRequest) Reset() {
	*x = UpdateAppGoodCommissionConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppGoodCommissionConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppGoodCommissionConfigRequest) ProtoMessage() {}

func (x *UpdateAppGoodCommissionConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppGoodCommissionConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateAppGoodCommissionConfigRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_gw_v1_app_good_commission_config_config_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateAppGoodCommissionConfigRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *UpdateAppGoodCommissionConfigRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *UpdateAppGoodCommissionConfigRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *UpdateAppGoodCommissionConfigRequest) GetStartAt() uint32 {
	if x != nil && x.StartAt != nil {
		return *x.StartAt
	}
	return 0
}

func (x *UpdateAppGoodCommissionConfigRequest) GetThresholdAmount() string {
	if x != nil && x.ThresholdAmount != nil {
		return *x.ThresholdAmount
	}
	return ""
}

func (x *UpdateAppGoodCommissionConfigRequest) GetInvites() uint32 {
	if x != nil && x.Invites != nil {
		return *x.Invites
	}
	return 0
}

func (x *UpdateAppGoodCommissionConfigRequest) GetDisabled() bool {
	if x != nil && x.Disabled != nil {
		return *x.Disabled
	}
	return false
}

func (x *UpdateAppGoodCommissionConfigRequest) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

type UpdateAppGoodCommissionConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppGoodCommissionConfig `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateAppGoodCommissionConfigResponse) Reset() {
	*x = UpdateAppGoodCommissionConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAppGoodCommissionConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAppGoodCommissionConfigResponse) ProtoMessage() {}

func (x *UpdateAppGoodCommissionConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAppGoodCommissionConfigResponse.ProtoReflect.Descriptor instead.
func (*UpdateAppGoodCommissionConfigResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_gw_v1_app_good_commission_config_config_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateAppGoodCommissionConfigResponse) GetInfo() *AppGoodCommissionConfig {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateNAppGoodCommissionConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              uint32  `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID           string  `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty"`
	TargetAppID     string  `protobuf:"bytes,30,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
	StartAt         *uint32 `protobuf:"varint,40,opt,name=StartAt,proto3,oneof" json:"StartAt,omitempty"`
	ThresholdAmount *string `protobuf:"bytes,50,opt,name=ThresholdAmount,proto3,oneof" json:"ThresholdAmount,omitempty"`
	Invites         *uint32 `protobuf:"varint,60,opt,name=Invites,proto3,oneof" json:"Invites,omitempty"`
	Disabled        *bool   `protobuf:"varint,70,opt,name=Disabled,proto3,oneof" json:"Disabled,omitempty"`
	Level           *uint32 `protobuf:"varint,80,opt,name=Level,proto3,oneof" json:"Level,omitempty"`
}

func (x *UpdateNAppGoodCommissionConfigRequest) Reset() {
	*x = UpdateNAppGoodCommissionConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNAppGoodCommissionConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNAppGoodCommissionConfigRequest) ProtoMessage() {}

func (x *UpdateNAppGoodCommissionConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNAppGoodCommissionConfigRequest.ProtoReflect.Descriptor instead.
func (*UpdateNAppGoodCommissionConfigRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_gw_v1_app_good_commission_config_config_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateNAppGoodCommissionConfigRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *UpdateNAppGoodCommissionConfigRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *UpdateNAppGoodCommissionConfigRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

func (x *UpdateNAppGoodCommissionConfigRequest) GetStartAt() uint32 {
	if x != nil && x.StartAt != nil {
		return *x.StartAt
	}
	return 0
}

func (x *UpdateNAppGoodCommissionConfigRequest) GetThresholdAmount() string {
	if x != nil && x.ThresholdAmount != nil {
		return *x.ThresholdAmount
	}
	return ""
}

func (x *UpdateNAppGoodCommissionConfigRequest) GetInvites() uint32 {
	if x != nil && x.Invites != nil {
		return *x.Invites
	}
	return 0
}

func (x *UpdateNAppGoodCommissionConfigRequest) GetDisabled() bool {
	if x != nil && x.Disabled != nil {
		return *x.Disabled
	}
	return false
}

func (x *UpdateNAppGoodCommissionConfigRequest) GetLevel() uint32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

type UpdateNAppGoodCommissionConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AppGoodCommissionConfig `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateNAppGoodCommissionConfigResponse) Reset() {
	*x = UpdateNAppGoodCommissionConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateNAppGoodCommissionConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateNAppGoodCommissionConfigResponse) ProtoMessage() {}

func (x *UpdateNAppGoodCommissionConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateNAppGoodCommissionConfigResponse.ProtoReflect.Descriptor instead.
func (*UpdateNAppGoodCommissionConfigResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_gw_v1_app_good_commission_config_config_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateNAppGoodCommissionConfigResponse) GetInfo() *AppGoodCommissionConfig {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetAppGoodCommissionConfigsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID  string  `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	EndAt  *uint32 `protobuf:"varint,20,opt,name=EndAt,proto3,oneof" json:"EndAt,omitempty"`
	Offset int32   `protobuf:"varint,30,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32   `protobuf:"varint,40,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetAppGoodCommissionConfigsRequest) Reset() {
	*x = GetAppGoodCommissionConfigsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppGoodCommissionConfigsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppGoodCommissionConfigsRequest) ProtoMessage() {}

func (x *GetAppGoodCommissionConfigsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppGoodCommissionConfigsRequest.ProtoReflect.Descriptor instead.
func (*GetAppGoodCommissionConfigsRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_gw_v1_app_good_commission_config_config_proto_rawDescGZIP(), []int{9}
}

func (x *GetAppGoodCommissionConfigsRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetAppGoodCommissionConfigsRequest) GetEndAt() uint32 {
	if x != nil && x.EndAt != nil {
		return *x.EndAt
	}
	return 0
}

func (x *GetAppGoodCommissionConfigsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetAppGoodCommissionConfigsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetAppGoodCommissionConfigsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*AppGoodCommissionConfig `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32                     `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetAppGoodCommissionConfigsResponse) Reset() {
	*x = GetAppGoodCommissionConfigsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppGoodCommissionConfigsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppGoodCommissionConfigsResponse) ProtoMessage() {}

func (x *GetAppGoodCommissionConfigsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppGoodCommissionConfigsResponse.ProtoReflect.Descriptor instead.
func (*GetAppGoodCommissionConfigsResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_gw_v1_app_good_commission_config_config_proto_rawDescGZIP(), []int{10}
}

func (x *GetAppGoodCommissionConfigsResponse) GetInfos() []*AppGoodCommissionConfig {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetAppGoodCommissionConfigsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetNAppGoodCommissionConfigsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetAppID string  `protobuf:"bytes,10,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
	EndAt       *uint32 `protobuf:"varint,20,opt,name=EndAt,proto3,oneof" json:"EndAt,omitempty"`
	Offset      int32   `protobuf:"varint,30,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit       int32   `protobuf:"varint,40,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetNAppGoodCommissionConfigsRequest) Reset() {
	*x = GetNAppGoodCommissionConfigsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNAppGoodCommissionConfigsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNAppGoodCommissionConfigsRequest) ProtoMessage() {}

func (x *GetNAppGoodCommissionConfigsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNAppGoodCommissionConfigsRequest.ProtoReflect.Descriptor instead.
func (*GetNAppGoodCommissionConfigsRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_gw_v1_app_good_commission_config_config_proto_rawDescGZIP(), []int{11}
}

func (x *GetNAppGoodCommissionConfigsRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

func (x *GetNAppGoodCommissionConfigsRequest) GetEndAt() uint32 {
	if x != nil && x.EndAt != nil {
		return *x.EndAt
	}
	return 0
}

func (x *GetNAppGoodCommissionConfigsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetNAppGoodCommissionConfigsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetNAppGoodCommissionConfigsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*AppGoodCommissionConfig `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32                     `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetNAppGoodCommissionConfigsResponse) Reset() {
	*x = GetNAppGoodCommissionConfigsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNAppGoodCommissionConfigsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNAppGoodCommissionConfigsResponse) ProtoMessage() {}

func (x *GetNAppGoodCommissionConfigsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNAppGoodCommissionConfigsResponse.ProtoReflect.Descriptor instead.
func (*GetNAppGoodCommissionConfigsResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_gw_v1_app_good_commission_config_config_proto_rawDescGZIP(), []int{12}
}

func (x *GetNAppGoodCommissionConfigsResponse) GetInfos() []*AppGoodCommissionConfig {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetNAppGoodCommissionConfigsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type CloneAppGoodCommissionConfigsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID         string `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	FromAppGoodID string `protobuf:"bytes,20,opt,name=FromAppGoodID,proto3" json:"FromAppGoodID,omitempty"`
	ToAppGoodID   string `protobuf:"bytes,30,opt,name=ToAppGoodID,proto3" json:"ToAppGoodID,omitempty"`
	ScalePercent  string `protobuf:"bytes,40,opt,name=ScalePercent,proto3" json:"ScalePercent,omitempty"`
}

func (x *CloneAppGoodCommissionConfigsRequest) Reset() {
	*x = CloneAppGoodCommissionConfigsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloneAppGoodCommissionConfigsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloneAppGoodCommissionConfigsRequest) ProtoMessage() {}

func (x *CloneAppGoodCommissionConfigsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloneAppGoodCommissionConfigsRequest.ProtoReflect.Descriptor instead.
func (*CloneAppGoodCommissionConfigsRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_gw_v1_app_good_commission_config_config_proto_rawDescGZIP(), []int{13}
}

func (x *CloneAppGoodCommissionConfigsRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *CloneAppGoodCommissionConfigsRequest) GetFromAppGoodID() string {
	if x != nil {
		return x.FromAppGoodID
	}
	return ""
}

func (x *CloneAppGoodCommissionConfigsRequest) GetToAppGoodID() string {
	if x != nil {
		return x.ToAppGoodID
	}
	return ""
}

func (x *CloneAppGoodCommissionConfigsRequest) GetScalePercent() string {
	if x != nil {
		return x.ScalePercent
	}
	return ""
}

type CloneAppGoodCommissionConfigsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CloneAppGoodCommissionConfigsResponse) Reset() {
	*x = CloneAppGoodCommissionConfigsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloneAppGoodCommissionConfigsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloneAppGoodCommissionConfigsResponse) ProtoMessage() {}

func (x *CloneAppGoodCommissionConfigsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloneAppGoodCommissionConfigsResponse.ProtoReflect.Descriptor instead.
func (*CloneAppGoodCommissionConfigsResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_gw_v1_app_good_commission_config_config_proto_rawDescGZIP(), []int{14}
}

type CloneNAppGoodCommissionConfigsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetAppID   string `protobuf:"bytes,10,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
	FromAppGoodID string `protobuf:"bytes,20,opt,name=FromAppGoodID,proto3" json:"FromAppGoodID,omitempty"`
	ToAppGoodID   string `protobuf:"bytes,30,opt,name=ToAppGoodID,proto3" json:"ToAppGoodID,omitempty"`
	ScalePercent  string `protobuf:"bytes,40,opt,name=ScalePercent,proto3" json:"ScalePercent,omitempty"`
}

func (x *CloneNAppGoodCommissionConfigsRequest) Reset() {
	*x = CloneNAppGoodCommissionConfigsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloneNAppGoodCommissionConfigsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloneNAppGoodCommissionConfigsRequest) ProtoMessage() {}

func (x *CloneNAppGoodCommissionConfigsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloneNAppGoodCommissionConfigsRequest.ProtoReflect.Descriptor instead.
func (*CloneNAppGoodCommissionConfigsRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_gw_v1_app_good_commission_config_config_proto_rawDescGZIP(), []int{15}
}

func (x *CloneNAppGoodCommissionConfigsRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

func (x *CloneNAppGoodCommissionConfigsRequest) GetFromAppGoodID() string {
	if x != nil {
		return x.FromAppGoodID
	}
	return ""
}

func (x *CloneNAppGoodCommissionConfigsRequest) GetToAppGoodID() string {
	if x != nil {
		return x.ToAppGoodID
	}
	return ""
}

func (x *CloneNAppGoodCommissionConfigsRequest) GetScalePercent() string {
	if x != nil {
		return x.ScalePercent
	}
	return ""
}

type CloneNAppGoodCommissionConfigsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CloneNAppGoodCommissionConfigsResponse) Reset() {
	*x = CloneNAppGoodCommissionConfigsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CloneNAppGoodCommissionConfigsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloneNAppGoodCommissionConfigsResponse) ProtoMessage() {}

func (x *CloneNAppGoodCommissionConfigsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloneNAppGoodCommissionConfigsResponse.ProtoReflect.Descriptor instead.
func (*CloneNAppGoodCommissionConfigsResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_gw_v1_app_good_commission_config_config_proto_rawDescGZIP(), []int{16}
}

var File_npool_inspire_gw_v1_app_good_commission_config_config_proto protoreflect.FileDescriptor

var file_npool_inspire_gw_v1_app_good_commission_config_config_proto_rawDesc = []byte{
	0x0a, 0x3b, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f,
	0x67, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2d, 0x69,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x6e, 0x70, 0x6f, 0x6f,
	0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x69, 0x6e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xf3, 0x04, 0x0a, 0x17, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x40, 0x0a, 0x0a, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0a, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f,
	0x6f, 0x64, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44,
	0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x50,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x74, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x41, 0x74, 0x12, 0x15, 0x0a, 0x05, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x8c, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x41, 0x70,
	0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x08, 0x47, 0x6f, 0x6f,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x47, 0x6f,
	0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x15, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0xb4, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xf2, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xe7, 0x02, 0x0a, 0x24, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f,
	0x6f, 0x64, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x70, 0x70, 0x47,
	0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x28, 0x0a, 0x0f, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x4f, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x07, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x41, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x07, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x73, 0x12, 0x40, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x46, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x50, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x74, 0x22, 0x83, 0x01, 0x0a, 0x25, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70,
	0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x47, 0x6f,
	0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xf4, 0x02, 0x0a, 0x25, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49,
	0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64,
	0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73,
	0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12,
	0x40, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x46, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x50, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x22,
	0x84, 0x01, 0x0a, 0x26, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x41, 0x70, 0x70, 0x47, 0x6f,
	0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xce, 0x02, 0x0a, 0x24, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x07, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x07,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x0f, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0f, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x07, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x46, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x08, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74,
	0x42, 0x12, 0x0a, 0x10, 0x5f, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x83, 0x01, 0x0a, 0x25, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5a, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x46, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xdb, 0x02,
	0x0a, 0x25, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a,
	0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12,
	0x1d, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x00, 0x52, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2d,
	0x0a, 0x0f, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0f, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x07, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02,
	0x52, 0x07, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x46, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03,
	0x52, 0x08, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x05,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x41, 0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x84, 0x01, 0x0a, 0x26,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x8d, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f,
	0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12,
	0x19, 0x0a, 0x05, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00,
	0x52, 0x05, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x64,
	0x41, 0x74, 0x22, 0x99, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f,
	0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x05, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x69, 0x6e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f,
	0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x9a,
	0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x4e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x19, 0x0a, 0x05, 0x45, 0x6e, 0x64, 0x41,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x05, 0x45, 0x6e, 0x64, 0x41, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x22, 0x9a, 0x01, 0x0a, 0x24,
	0x47, 0x65, 0x74, 0x4e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xa8, 0x01, 0x0a, 0x24, 0x43, 0x6c, 0x6f,
	0x6e, 0x65, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x72, 0x6f, 0x6d, 0x41,
	0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x46, 0x72, 0x6f, 0x6d, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x20, 0x0a,
	0x0b, 0x54, 0x6f, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x54, 0x6f, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x0c, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x22, 0x27, 0x0a, 0x25, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x41, 0x70, 0x70, 0x47,
	0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb5, 0x01, 0x0a,
	0x25, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x4e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x72, 0x6f, 0x6d,
	0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x20,
	0x0a, 0x0b, 0x54, 0x6f, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x54, 0x6f, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44,
	0x12, 0x22, 0x0a, 0x0c, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x22, 0x28, 0x0a, 0x26, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x4e, 0x41, 0x70,
	0x70, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x85,
	0x10, 0x0a, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0xfc, 0x01, 0x0a, 0x1d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x53, 0x2e, 0x69,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x54, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x22,
	0x25, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x61, 0x70, 0x70, 0x2f,
	0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0x81, 0x02, 0x0a, 0x1e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x54, 0x2e, 0x69,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x55, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f,
	0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2c, 0x22, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x6e, 0x2f,
	0x61, 0x70, 0x70, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0xfc, 0x01,
	0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x53, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x54, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x70, 0x47, 0x6f,
	0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2a, 0x22, 0x25, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x61,
	0x70, 0x70, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3a, 0x01, 0x2a, 0x12, 0x81, 0x02, 0x0a,
	0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x54, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x55, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4e, 0x41, 0x70, 0x70,
	0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2c, 0x22, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x2f, 0x6e, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x3a, 0x01, 0x2a,
	0x12, 0xf4, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x12, 0x51, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x52, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x22,
	0x23, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67, 0x6f, 0x6f,
	0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xf9, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4e,
	0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x52, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x41, 0x70, 0x70,
	0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x53, 0x2e, 0x69,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x22, 0x25, 0x2f, 0x76, 0x31, 0x2f, 0x67,
	0x65, 0x74, 0x2f, 0x6e, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x3a, 0x01, 0x2a, 0x12, 0xfc, 0x01, 0x0a, 0x1d, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x41, 0x70, 0x70,
	0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x53, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x41, 0x70, 0x70, 0x47, 0x6f,
	0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x54, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x6e, 0x65,
	0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x22, 0x25, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c,
	0x6f, 0x6e, 0x65, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x3a,
	0x01, 0x2a, 0x12, 0x81, 0x02, 0x0a, 0x1e, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x4e, 0x41, 0x70, 0x70,
	0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x54, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x4e, 0x41, 0x70, 0x70, 0x47,
	0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x55, 0x2e, 0x69, 0x6e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x6e,
	0x65, 0x4e, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x22, 0x27, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x2f, 0x6e, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67, 0x6f, 0x6f, 0x64,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x3a, 0x01, 0x2a, 0x42, 0x51, 0x5a, 0x4f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c,
	0x2f, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f, 0x67, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x70, 0x70, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_npool_inspire_gw_v1_app_good_commission_config_config_proto_rawDescOnce sync.Once
	file_npool_inspire_gw_v1_app_good_commission_config_config_proto_rawDescData = file_npool_inspire_gw_v1_app_good_commission_config_config_proto_rawDesc
)

func file_npool_inspire_gw_v1_app_good_commission_config_config_proto_rawDescGZIP() []byte {
	file_npool_inspire_gw_v1_app_good_commission_config_config_proto_rawDescOnce.Do(func() {
		file_npool_inspire_gw_v1_app_good_commission_config_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_inspire_gw_v1_app_good_commission_config_config_proto_rawDescData)
	})
	return file_npool_inspire_gw_v1_app_good_commission_config_config_proto_rawDescData
}

var file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_npool_inspire_gw_v1_app_good_commission_config_config_proto_goTypes = []interface{}{
	(*AppGoodCommissionConfig)(nil),                // 0: inspire.gateway.app.good.commission.config.v1.AppGoodCommissionConfig
	(*CreateAppGoodCommissionConfigRequest)(nil),   // 1: inspire.gateway.app.good.commission.config.v1.CreateAppGoodCommissionConfigRequest
	(*CreateAppGoodCommissionConfigResponse)(nil),  // 2: inspire.gateway.app.good.commission.config.v1.CreateAppGoodCommissionConfigResponse
	(*CreateNAppGoodCommissionConfigRequest)(nil),  // 3: inspire.gateway.app.good.commission.config.v1.CreateNAppGoodCommissionConfigRequest
	(*CreateNAppGoodCommissionConfigResponse)(nil), // 4: inspire.gateway.app.good.commission.config.v1.CreateNAppGoodCommissionConfigResponse
	(*UpdateAppGoodCommissionConfigRequest)(nil),   // 5: inspire.gateway.app.good.commission.config.v1.UpdateAppGoodCommissionConfigRequest
	(*UpdateAppGoodCommissionConfigResponse)(nil),  // 6: inspire.gateway.app.good.commission.config.v1.UpdateAppGoodCommissionConfigResponse
	(*UpdateNAppGoodCommissionConfigRequest)(nil),  // 7: inspire.gateway.app.good.commission.config.v1.UpdateNAppGoodCommissionConfigRequest
	(*UpdateNAppGoodCommissionConfigResponse)(nil), // 8: inspire.gateway.app.good.commission.config.v1.UpdateNAppGoodCommissionConfigResponse
	(*GetAppGoodCommissionConfigsRequest)(nil),     // 9: inspire.gateway.app.good.commission.config.v1.GetAppGoodCommissionConfigsRequest
	(*GetAppGoodCommissionConfigsResponse)(nil),    // 10: inspire.gateway.app.good.commission.config.v1.GetAppGoodCommissionConfigsResponse
	(*GetNAppGoodCommissionConfigsRequest)(nil),    // 11: inspire.gateway.app.good.commission.config.v1.GetNAppGoodCommissionConfigsRequest
	(*GetNAppGoodCommissionConfigsResponse)(nil),   // 12: inspire.gateway.app.good.commission.config.v1.GetNAppGoodCommissionConfigsResponse
	(*CloneAppGoodCommissionConfigsRequest)(nil),   // 13: inspire.gateway.app.good.commission.config.v1.CloneAppGoodCommissionConfigsRequest
	(*CloneAppGoodCommissionConfigsResponse)(nil),  // 14: inspire.gateway.app.good.commission.config.v1.CloneAppGoodCommissionConfigsResponse
	(*CloneNAppGoodCommissionConfigsRequest)(nil),  // 15: inspire.gateway.app.good.commission.config.v1.CloneNAppGoodCommissionConfigsRequest
	(*CloneNAppGoodCommissionConfigsResponse)(nil), // 16: inspire.gateway.app.good.commission.config.v1.CloneNAppGoodCommissionConfigsResponse
	(v1.SettleType)(0),                             // 17: basetypes.inspire.v1.SettleType
}
var file_npool_inspire_gw_v1_app_good_commission_config_config_proto_depIdxs = []int32{
	17, // 0: inspire.gateway.app.good.commission.config.v1.AppGoodCommissionConfig.SettleType:type_name -> basetypes.inspire.v1.SettleType
	17, // 1: inspire.gateway.app.good.commission.config.v1.CreateAppGoodCommissionConfigRequest.SettleType:type_name -> basetypes.inspire.v1.SettleType
	0,  // 2: inspire.gateway.app.good.commission.config.v1.CreateAppGoodCommissionConfigResponse.Info:type_name -> inspire.gateway.app.good.commission.config.v1.AppGoodCommissionConfig
	17, // 3: inspire.gateway.app.good.commission.config.v1.CreateNAppGoodCommissionConfigRequest.SettleType:type_name -> basetypes.inspire.v1.SettleType
	0,  // 4: inspire.gateway.app.good.commission.config.v1.CreateNAppGoodCommissionConfigResponse.Info:type_name -> inspire.gateway.app.good.commission.config.v1.AppGoodCommissionConfig
	0,  // 5: inspire.gateway.app.good.commission.config.v1.UpdateAppGoodCommissionConfigResponse.Info:type_name -> inspire.gateway.app.good.commission.config.v1.AppGoodCommissionConfig
	0,  // 6: inspire.gateway.app.good.commission.config.v1.UpdateNAppGoodCommissionConfigResponse.Info:type_name -> inspire.gateway.app.good.commission.config.v1.AppGoodCommissionConfig
	0,  // 7: inspire.gateway.app.good.commission.config.v1.GetAppGoodCommissionConfigsResponse.Infos:type_name -> inspire.gateway.app.good.commission.config.v1.AppGoodCommissionConfig
	0,  // 8: inspire.gateway.app.good.commission.config.v1.GetNAppGoodCommissionConfigsResponse.Infos:type_name -> inspire.gateway.app.good.commission.config.v1.AppGoodCommissionConfig
	1,  // 9: inspire.gateway.app.good.commission.config.v1.Gateway.CreateAppGoodCommissionConfig:input_type -> inspire.gateway.app.good.commission.config.v1.CreateAppGoodCommissionConfigRequest
	3,  // 10: inspire.gateway.app.good.commission.config.v1.Gateway.CreateNAppGoodCommissionConfig:input_type -> inspire.gateway.app.good.commission.config.v1.CreateNAppGoodCommissionConfigRequest
	5,  // 11: inspire.gateway.app.good.commission.config.v1.Gateway.UpdateAppGoodCommissionConfig:input_type -> inspire.gateway.app.good.commission.config.v1.UpdateAppGoodCommissionConfigRequest
	7,  // 12: inspire.gateway.app.good.commission.config.v1.Gateway.UpdateNAppGoodCommissionConfig:input_type -> inspire.gateway.app.good.commission.config.v1.UpdateNAppGoodCommissionConfigRequest
	9,  // 13: inspire.gateway.app.good.commission.config.v1.Gateway.GetAppGoodCommissionConfigs:input_type -> inspire.gateway.app.good.commission.config.v1.GetAppGoodCommissionConfigsRequest
	11, // 14: inspire.gateway.app.good.commission.config.v1.Gateway.GetNAppGoodCommissionConfigs:input_type -> inspire.gateway.app.good.commission.config.v1.GetNAppGoodCommissionConfigsRequest
	13, // 15: inspire.gateway.app.good.commission.config.v1.Gateway.CloneAppGoodCommissionConfigs:input_type -> inspire.gateway.app.good.commission.config.v1.CloneAppGoodCommissionConfigsRequest
	15, // 16: inspire.gateway.app.good.commission.config.v1.Gateway.CloneNAppGoodCommissionConfigs:input_type -> inspire.gateway.app.good.commission.config.v1.CloneNAppGoodCommissionConfigsRequest
	2,  // 17: inspire.gateway.app.good.commission.config.v1.Gateway.CreateAppGoodCommissionConfig:output_type -> inspire.gateway.app.good.commission.config.v1.CreateAppGoodCommissionConfigResponse
	4,  // 18: inspire.gateway.app.good.commission.config.v1.Gateway.CreateNAppGoodCommissionConfig:output_type -> inspire.gateway.app.good.commission.config.v1.CreateNAppGoodCommissionConfigResponse
	6,  // 19: inspire.gateway.app.good.commission.config.v1.Gateway.UpdateAppGoodCommissionConfig:output_type -> inspire.gateway.app.good.commission.config.v1.UpdateAppGoodCommissionConfigResponse
	8,  // 20: inspire.gateway.app.good.commission.config.v1.Gateway.UpdateNAppGoodCommissionConfig:output_type -> inspire.gateway.app.good.commission.config.v1.UpdateNAppGoodCommissionConfigResponse
	10, // 21: inspire.gateway.app.good.commission.config.v1.Gateway.GetAppGoodCommissionConfigs:output_type -> inspire.gateway.app.good.commission.config.v1.GetAppGoodCommissionConfigsResponse
	12, // 22: inspire.gateway.app.good.commission.config.v1.Gateway.GetNAppGoodCommissionConfigs:output_type -> inspire.gateway.app.good.commission.config.v1.GetNAppGoodCommissionConfigsResponse
	14, // 23: inspire.gateway.app.good.commission.config.v1.Gateway.CloneAppGoodCommissionConfigs:output_type -> inspire.gateway.app.good.commission.config.v1.CloneAppGoodCommissionConfigsResponse
	16, // 24: inspire.gateway.app.good.commission.config.v1.Gateway.CloneNAppGoodCommissionConfigs:output_type -> inspire.gateway.app.good.commission.config.v1.CloneNAppGoodCommissionConfigsResponse
	17, // [17:25] is the sub-list for method output_type
	9,  // [9:17] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_npool_inspire_gw_v1_app_good_commission_config_config_proto_init() }
func file_npool_inspire_gw_v1_app_good_commission_config_config_proto_init() {
	if File_npool_inspire_gw_v1_app_good_commission_config_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppGoodCommissionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAppGoodCommissionConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAppGoodCommissionConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNAppGoodCommissionConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateNAppGoodCommissionConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppGoodCommissionConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAppGoodCommissionConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNAppGoodCommissionConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateNAppGoodCommissionConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppGoodCommissionConfigsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppGoodCommissionConfigsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNAppGoodCommissionConfigsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNAppGoodCommissionConfigsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloneAppGoodCommissionConfigsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloneAppGoodCommissionConfigsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloneNAppGoodCommissionConfigsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CloneNAppGoodCommissionConfigsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes[11].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_inspire_gw_v1_app_good_commission_config_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_inspire_gw_v1_app_good_commission_config_config_proto_goTypes,
		DependencyIndexes: file_npool_inspire_gw_v1_app_good_commission_config_config_proto_depIdxs,
		MessageInfos:      file_npool_inspire_gw_v1_app_good_commission_config_config_proto_msgTypes,
	}.Build()
	File_npool_inspire_gw_v1_app_good_commission_config_config_proto = out.File
	file_npool_inspire_gw_v1_app_good_commission_config_config_proto_rawDesc = nil
	file_npool_inspire_gw_v1_app_good_commission_config_config_proto_goTypes = nil
	file_npool_inspire_gw_v1_app_good_commission_config_config_proto_depIdxs = nil
}
