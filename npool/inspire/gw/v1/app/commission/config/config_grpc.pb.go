// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/inspire/gw/v1/app/commission/config/config.proto

package config

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gateway_CreateAppCommissionConfig_FullMethodName  = "/inspire.gateway.app.commission.config.v1.Gateway/CreateAppCommissionConfig"
	Gateway_CreateNAppCommissionConfig_FullMethodName = "/inspire.gateway.app.commission.config.v1.Gateway/CreateNAppCommissionConfig"
	Gateway_UpdateAppCommissionConfig_FullMethodName  = "/inspire.gateway.app.commission.config.v1.Gateway/UpdateAppCommissionConfig"
	Gateway_UpdateNAppCommissionConfig_FullMethodName = "/inspire.gateway.app.commission.config.v1.Gateway/UpdateNAppCommissionConfig"
	Gateway_GetAppCommissionConfigs_FullMethodName    = "/inspire.gateway.app.commission.config.v1.Gateway/GetAppCommissionConfigs"
	Gateway_GetNAppCommissionConfigs_FullMethodName   = "/inspire.gateway.app.commission.config.v1.Gateway/GetNAppCommissionConfigs"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	CreateAppCommissionConfig(ctx context.Context, in *CreateAppCommissionConfigRequest, opts ...grpc.CallOption) (*CreateAppCommissionConfigResponse, error)
	CreateNAppCommissionConfig(ctx context.Context, in *CreateNAppCommissionConfigRequest, opts ...grpc.CallOption) (*CreateNAppCommissionConfigResponse, error)
	UpdateAppCommissionConfig(ctx context.Context, in *UpdateAppCommissionConfigRequest, opts ...grpc.CallOption) (*UpdateAppCommissionConfigResponse, error)
	UpdateNAppCommissionConfig(ctx context.Context, in *UpdateNAppCommissionConfigRequest, opts ...grpc.CallOption) (*UpdateNAppCommissionConfigResponse, error)
	GetAppCommissionConfigs(ctx context.Context, in *GetAppCommissionConfigsRequest, opts ...grpc.CallOption) (*GetAppCommissionConfigsResponse, error)
	GetNAppCommissionConfigs(ctx context.Context, in *GetNAppCommissionConfigsRequest, opts ...grpc.CallOption) (*GetNAppCommissionConfigsResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) CreateAppCommissionConfig(ctx context.Context, in *CreateAppCommissionConfigRequest, opts ...grpc.CallOption) (*CreateAppCommissionConfigResponse, error) {
	out := new(CreateAppCommissionConfigResponse)
	err := c.cc.Invoke(ctx, Gateway_CreateAppCommissionConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) CreateNAppCommissionConfig(ctx context.Context, in *CreateNAppCommissionConfigRequest, opts ...grpc.CallOption) (*CreateNAppCommissionConfigResponse, error) {
	out := new(CreateNAppCommissionConfigResponse)
	err := c.cc.Invoke(ctx, Gateway_CreateNAppCommissionConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdateAppCommissionConfig(ctx context.Context, in *UpdateAppCommissionConfigRequest, opts ...grpc.CallOption) (*UpdateAppCommissionConfigResponse, error) {
	out := new(UpdateAppCommissionConfigResponse)
	err := c.cc.Invoke(ctx, Gateway_UpdateAppCommissionConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdateNAppCommissionConfig(ctx context.Context, in *UpdateNAppCommissionConfigRequest, opts ...grpc.CallOption) (*UpdateNAppCommissionConfigResponse, error) {
	out := new(UpdateNAppCommissionConfigResponse)
	err := c.cc.Invoke(ctx, Gateway_UpdateNAppCommissionConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetAppCommissionConfigs(ctx context.Context, in *GetAppCommissionConfigsRequest, opts ...grpc.CallOption) (*GetAppCommissionConfigsResponse, error) {
	out := new(GetAppCommissionConfigsResponse)
	err := c.cc.Invoke(ctx, Gateway_GetAppCommissionConfigs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetNAppCommissionConfigs(ctx context.Context, in *GetNAppCommissionConfigsRequest, opts ...grpc.CallOption) (*GetNAppCommissionConfigsResponse, error) {
	out := new(GetNAppCommissionConfigsResponse)
	err := c.cc.Invoke(ctx, Gateway_GetNAppCommissionConfigs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	CreateAppCommissionConfig(context.Context, *CreateAppCommissionConfigRequest) (*CreateAppCommissionConfigResponse, error)
	CreateNAppCommissionConfig(context.Context, *CreateNAppCommissionConfigRequest) (*CreateNAppCommissionConfigResponse, error)
	UpdateAppCommissionConfig(context.Context, *UpdateAppCommissionConfigRequest) (*UpdateAppCommissionConfigResponse, error)
	UpdateNAppCommissionConfig(context.Context, *UpdateNAppCommissionConfigRequest) (*UpdateNAppCommissionConfigResponse, error)
	GetAppCommissionConfigs(context.Context, *GetAppCommissionConfigsRequest) (*GetAppCommissionConfigsResponse, error)
	GetNAppCommissionConfigs(context.Context, *GetNAppCommissionConfigsRequest) (*GetNAppCommissionConfigsResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) CreateAppCommissionConfig(context.Context, *CreateAppCommissionConfigRequest) (*CreateAppCommissionConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppCommissionConfig not implemented")
}
func (UnimplementedGatewayServer) CreateNAppCommissionConfig(context.Context, *CreateNAppCommissionConfigRequest) (*CreateNAppCommissionConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNAppCommissionConfig not implemented")
}
func (UnimplementedGatewayServer) UpdateAppCommissionConfig(context.Context, *UpdateAppCommissionConfigRequest) (*UpdateAppCommissionConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppCommissionConfig not implemented")
}
func (UnimplementedGatewayServer) UpdateNAppCommissionConfig(context.Context, *UpdateNAppCommissionConfigRequest) (*UpdateNAppCommissionConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNAppCommissionConfig not implemented")
}
func (UnimplementedGatewayServer) GetAppCommissionConfigs(context.Context, *GetAppCommissionConfigsRequest) (*GetAppCommissionConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppCommissionConfigs not implemented")
}
func (UnimplementedGatewayServer) GetNAppCommissionConfigs(context.Context, *GetNAppCommissionConfigsRequest) (*GetNAppCommissionConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNAppCommissionConfigs not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_CreateAppCommissionConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppCommissionConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateAppCommissionConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_CreateAppCommissionConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateAppCommissionConfig(ctx, req.(*CreateAppCommissionConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_CreateNAppCommissionConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNAppCommissionConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateNAppCommissionConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_CreateNAppCommissionConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateNAppCommissionConfig(ctx, req.(*CreateNAppCommissionConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdateAppCommissionConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppCommissionConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateAppCommissionConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_UpdateAppCommissionConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateAppCommissionConfig(ctx, req.(*UpdateAppCommissionConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdateNAppCommissionConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNAppCommissionConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateNAppCommissionConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_UpdateNAppCommissionConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateNAppCommissionConfig(ctx, req.(*UpdateNAppCommissionConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetAppCommissionConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppCommissionConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetAppCommissionConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetAppCommissionConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetAppCommissionConfigs(ctx, req.(*GetAppCommissionConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetNAppCommissionConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNAppCommissionConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetNAppCommissionConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetNAppCommissionConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetNAppCommissionConfigs(ctx, req.(*GetNAppCommissionConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inspire.gateway.app.commission.config.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAppCommissionConfig",
			Handler:    _Gateway_CreateAppCommissionConfig_Handler,
		},
		{
			MethodName: "CreateNAppCommissionConfig",
			Handler:    _Gateway_CreateNAppCommissionConfig_Handler,
		},
		{
			MethodName: "UpdateAppCommissionConfig",
			Handler:    _Gateway_UpdateAppCommissionConfig_Handler,
		},
		{
			MethodName: "UpdateNAppCommissionConfig",
			Handler:    _Gateway_UpdateNAppCommissionConfig_Handler,
		},
		{
			MethodName: "GetAppCommissionConfigs",
			Handler:    _Gateway_GetAppCommissionConfigs_Handler,
		},
		{
			MethodName: "GetNAppCommissionConfigs",
			Handler:    _Gateway_GetNAppCommissionConfigs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/inspire/gw/v1/app/commission/config/config.proto",
}
