// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: npool/inspire/gw/v1/achievement/achievement.proto

package achievement

import (
	v1 "github.com/NpoolPlatform/message/npool/basetypes/inspire/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserAchievement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCommission      string `protobuf:"bytes,10,opt,name=TotalCommission,proto3" json:"TotalCommission,omitempty"`
	SelfCommission       string `protobuf:"bytes,20,opt,name=SelfCommission,proto3" json:"SelfCommission,omitempty"`
	DirectInvites        string `protobuf:"bytes,30,opt,name=DirectInvites,proto3" json:"DirectInvites,omitempty"`
	IndirectInvites      string `protobuf:"bytes,40,opt,name=IndirectInvites,proto3" json:"IndirectInvites,omitempty"`
	DirectConsumeAmount  string `protobuf:"bytes,50,opt,name=DirectConsumeAmount,proto3" json:"DirectConsumeAmount,omitempty"`
	InviteeConsumeAmount string `protobuf:"bytes,60,opt,name=InviteeConsumeAmount,proto3" json:"InviteeConsumeAmount,omitempty"`
}

func (x *UserAchievement) Reset() {
	*x = UserAchievement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_gw_v1_achievement_achievement_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAchievement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAchievement) ProtoMessage() {}

func (x *UserAchievement) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_gw_v1_achievement_achievement_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAchievement.ProtoReflect.Descriptor instead.
func (*UserAchievement) Descriptor() ([]byte, []int) {
	return file_npool_inspire_gw_v1_achievement_achievement_proto_rawDescGZIP(), []int{0}
}

func (x *UserAchievement) GetTotalCommission() string {
	if x != nil {
		return x.TotalCommission
	}
	return ""
}

func (x *UserAchievement) GetSelfCommission() string {
	if x != nil {
		return x.SelfCommission
	}
	return ""
}

func (x *UserAchievement) GetDirectInvites() string {
	if x != nil {
		return x.DirectInvites
	}
	return ""
}

func (x *UserAchievement) GetIndirectInvites() string {
	if x != nil {
		return x.IndirectInvites
	}
	return ""
}

func (x *UserAchievement) GetDirectConsumeAmount() string {
	if x != nil {
		return x.DirectConsumeAmount
	}
	return ""
}

func (x *UserAchievement) GetInviteeConsumeAmount() string {
	if x != nil {
		return x.InviteeConsumeAmount
	}
	return ""
}

type GoodAchievement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoodID                     string              `protobuf:"bytes,10,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
	GoodName                   string              `protobuf:"bytes,20,opt,name=GoodName,proto3" json:"GoodName,omitempty"`
	GoodUnit                   string              `protobuf:"bytes,30,opt,name=GoodUnit,proto3" json:"GoodUnit,omitempty"`
	CommissionValue            string              `protobuf:"bytes,40,opt,name=CommissionValue,proto3" json:"CommissionValue,omitempty"`
	CommissionSettleType       v1.SettleType       `protobuf:"varint,41,opt,name=CommissionSettleType,proto3,enum=basetypes.inspire.v1.SettleType" json:"CommissionSettleType,omitempty"`
	CommissionSettleAmountType v1.SettleAmountType `protobuf:"varint,42,opt,name=CommissionSettleAmountType,proto3,enum=basetypes.inspire.v1.SettleAmountType" json:"CommissionSettleAmountType,omitempty"`
	CommissionSettleMode       v1.SettleMode       `protobuf:"varint,43,opt,name=CommissionSettleMode,proto3,enum=basetypes.inspire.v1.SettleMode" json:"CommissionSettleMode,omitempty"`
	CommissionSettleInterval   v1.SettleInterval   `protobuf:"varint,44,opt,name=CommissionSettleInterval,proto3,enum=basetypes.inspire.v1.SettleInterval" json:"CommissionSettleInterval,omitempty"`
	CommissionThreshold        string              `protobuf:"bytes,45,opt,name=CommissionThreshold,proto3" json:"CommissionThreshold,omitempty"`
	CoinTypeID                 string              `protobuf:"bytes,50,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty"`
	CoinName                   string              `protobuf:"bytes,60,opt,name=CoinName,proto3" json:"CoinName,omitempty"`
	CoinLogo                   string              `protobuf:"bytes,70,opt,name=CoinLogo,proto3" json:"CoinLogo,omitempty"`
	CoinUnit                   string              `protobuf:"bytes,80,opt,name=CoinUnit,proto3" json:"CoinUnit,omitempty"`
	TotalUnits                 string              `protobuf:"bytes,90,opt,name=TotalUnits,proto3" json:"TotalUnits,omitempty"`
	SelfUnits                  string              `protobuf:"bytes,100,opt,name=SelfUnits,proto3" json:"SelfUnits,omitempty"`
	// In USD
	TotalAmount        string `protobuf:"bytes,110,opt,name=TotalAmount,proto3" json:"TotalAmount,omitempty"`
	SelfAmount         string `protobuf:"bytes,120,opt,name=SelfAmount,proto3" json:"SelfAmount,omitempty"`
	TotalCommission    string `protobuf:"bytes,130,opt,name=TotalCommission,proto3" json:"TotalCommission,omitempty"`
	SelfCommission     string `protobuf:"bytes,140,opt,name=SelfCommission,proto3" json:"SelfCommission,omitempty"`
	SuperiorCommission string `protobuf:"bytes,150,opt,name=SuperiorCommission,proto3" json:"SuperiorCommission,omitempty"`
	AppGoodID          string `protobuf:"bytes,160,opt,name=AppGoodID,proto3" json:"AppGoodID,omitempty"`
}

func (x *GoodAchievement) Reset() {
	*x = GoodAchievement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_gw_v1_achievement_achievement_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodAchievement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodAchievement) ProtoMessage() {}

func (x *GoodAchievement) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_gw_v1_achievement_achievement_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodAchievement.ProtoReflect.Descriptor instead.
func (*GoodAchievement) Descriptor() ([]byte, []int) {
	return file_npool_inspire_gw_v1_achievement_achievement_proto_rawDescGZIP(), []int{1}
}

func (x *GoodAchievement) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *GoodAchievement) GetGoodName() string {
	if x != nil {
		return x.GoodName
	}
	return ""
}

func (x *GoodAchievement) GetGoodUnit() string {
	if x != nil {
		return x.GoodUnit
	}
	return ""
}

func (x *GoodAchievement) GetCommissionValue() string {
	if x != nil {
		return x.CommissionValue
	}
	return ""
}

func (x *GoodAchievement) GetCommissionSettleType() v1.SettleType {
	if x != nil {
		return x.CommissionSettleType
	}
	return v1.SettleType(0)
}

func (x *GoodAchievement) GetCommissionSettleAmountType() v1.SettleAmountType {
	if x != nil {
		return x.CommissionSettleAmountType
	}
	return v1.SettleAmountType(0)
}

func (x *GoodAchievement) GetCommissionSettleMode() v1.SettleMode {
	if x != nil {
		return x.CommissionSettleMode
	}
	return v1.SettleMode(0)
}

func (x *GoodAchievement) GetCommissionSettleInterval() v1.SettleInterval {
	if x != nil {
		return x.CommissionSettleInterval
	}
	return v1.SettleInterval(0)
}

func (x *GoodAchievement) GetCommissionThreshold() string {
	if x != nil {
		return x.CommissionThreshold
	}
	return ""
}

func (x *GoodAchievement) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

func (x *GoodAchievement) GetCoinName() string {
	if x != nil {
		return x.CoinName
	}
	return ""
}

func (x *GoodAchievement) GetCoinLogo() string {
	if x != nil {
		return x.CoinLogo
	}
	return ""
}

func (x *GoodAchievement) GetCoinUnit() string {
	if x != nil {
		return x.CoinUnit
	}
	return ""
}

func (x *GoodAchievement) GetTotalUnits() string {
	if x != nil {
		return x.TotalUnits
	}
	return ""
}

func (x *GoodAchievement) GetSelfUnits() string {
	if x != nil {
		return x.SelfUnits
	}
	return ""
}

func (x *GoodAchievement) GetTotalAmount() string {
	if x != nil {
		return x.TotalAmount
	}
	return ""
}

func (x *GoodAchievement) GetSelfAmount() string {
	if x != nil {
		return x.SelfAmount
	}
	return ""
}

func (x *GoodAchievement) GetTotalCommission() string {
	if x != nil {
		return x.TotalCommission
	}
	return ""
}

func (x *GoodAchievement) GetSelfCommission() string {
	if x != nil {
		return x.SelfCommission
	}
	return ""
}

func (x *GoodAchievement) GetSuperiorCommission() string {
	if x != nil {
		return x.SuperiorCommission
	}
	return ""
}

func (x *GoodAchievement) GetAppGoodID() string {
	if x != nil {
		return x.AppGoodID
	}
	return ""
}

type Achievement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InviterID       *string            `protobuf:"bytes,9,opt,name=InviterID,proto3,oneof" json:"InviterID,omitempty"`
	UserID          string             `protobuf:"bytes,10,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Username        string             `protobuf:"bytes,20,opt,name=Username,proto3" json:"Username,omitempty"`
	EmailAddress    string             `protobuf:"bytes,30,opt,name=EmailAddress,proto3" json:"EmailAddress,omitempty"`
	PhoneNO         string             `protobuf:"bytes,40,opt,name=PhoneNO,proto3" json:"PhoneNO,omitempty"`
	FirstName       string             `protobuf:"bytes,50,opt,name=FirstName,proto3" json:"FirstName,omitempty"`
	LastName        string             `protobuf:"bytes,60,opt,name=LastName,proto3" json:"LastName,omitempty"`
	Kol             bool               `protobuf:"varint,70,opt,name=Kol,proto3" json:"Kol,omitempty"`
	TotalInvitees   uint32             `protobuf:"varint,80,opt,name=TotalInvitees,proto3" json:"TotalInvitees,omitempty"`
	Achievements    []*GoodAchievement `protobuf:"bytes,90,rep,name=Achievements,proto3" json:"Achievements,omitempty"`
	UserAchievement *UserAchievement   `protobuf:"bytes,100,opt,name=UserAchievement,proto3" json:"UserAchievement,omitempty"`
	CreatedAt       uint32             `protobuf:"varint,110,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	InvitedAt       uint32             `protobuf:"varint,120,opt,name=InvitedAt,proto3" json:"InvitedAt,omitempty"`
}

func (x *Achievement) Reset() {
	*x = Achievement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_gw_v1_achievement_achievement_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Achievement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Achievement) ProtoMessage() {}

func (x *Achievement) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_gw_v1_achievement_achievement_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Achievement.ProtoReflect.Descriptor instead.
func (*Achievement) Descriptor() ([]byte, []int) {
	return file_npool_inspire_gw_v1_achievement_achievement_proto_rawDescGZIP(), []int{2}
}

func (x *Achievement) GetInviterID() string {
	if x != nil && x.InviterID != nil {
		return *x.InviterID
	}
	return ""
}

func (x *Achievement) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *Achievement) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Achievement) GetEmailAddress() string {
	if x != nil {
		return x.EmailAddress
	}
	return ""
}

func (x *Achievement) GetPhoneNO() string {
	if x != nil {
		return x.PhoneNO
	}
	return ""
}

func (x *Achievement) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *Achievement) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *Achievement) GetKol() bool {
	if x != nil {
		return x.Kol
	}
	return false
}

func (x *Achievement) GetTotalInvitees() uint32 {
	if x != nil {
		return x.TotalInvitees
	}
	return 0
}

func (x *Achievement) GetAchievements() []*GoodAchievement {
	if x != nil {
		return x.Achievements
	}
	return nil
}

func (x *Achievement) GetUserAchievement() *UserAchievement {
	if x != nil {
		return x.UserAchievement
	}
	return nil
}

func (x *Achievement) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Achievement) GetInvitedAt() uint32 {
	if x != nil {
		return x.InvitedAt
	}
	return 0
}

type GetAchievementsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID  string `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	UserID string `protobuf:"bytes,20,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Offset int32  `protobuf:"varint,30,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,40,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetAchievementsRequest) Reset() {
	*x = GetAchievementsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_gw_v1_achievement_achievement_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAchievementsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAchievementsRequest) ProtoMessage() {}

func (x *GetAchievementsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_gw_v1_achievement_achievement_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAchievementsRequest.ProtoReflect.Descriptor instead.
func (*GetAchievementsRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_gw_v1_achievement_achievement_proto_rawDescGZIP(), []int{3}
}

func (x *GetAchievementsRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetAchievementsRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetAchievementsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetAchievementsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetAchievementsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Achievement `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"` // Each user
	Total uint32         `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetAchievementsResponse) Reset() {
	*x = GetAchievementsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_gw_v1_achievement_achievement_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAchievementsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAchievementsResponse) ProtoMessage() {}

func (x *GetAchievementsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_gw_v1_achievement_achievement_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAchievementsResponse.ProtoReflect.Descriptor instead.
func (*GetAchievementsResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_gw_v1_achievement_achievement_proto_rawDescGZIP(), []int{4}
}

func (x *GetAchievementsResponse) GetInfos() []*Achievement {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetAchievementsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetUserAchievementsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID   string   `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	UserIDs []string `protobuf:"bytes,20,rep,name=UserIDs,proto3" json:"UserIDs,omitempty"`
	Offset  int32    `protobuf:"varint,30,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit   int32    `protobuf:"varint,40,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetUserAchievementsRequest) Reset() {
	*x = GetUserAchievementsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_gw_v1_achievement_achievement_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserAchievementsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserAchievementsRequest) ProtoMessage() {}

func (x *GetUserAchievementsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_gw_v1_achievement_achievement_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserAchievementsRequest.ProtoReflect.Descriptor instead.
func (*GetUserAchievementsRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_gw_v1_achievement_achievement_proto_rawDescGZIP(), []int{5}
}

func (x *GetUserAchievementsRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetUserAchievementsRequest) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

func (x *GetUserAchievementsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetUserAchievementsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetUserAchievementsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Achievement `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32         `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetUserAchievementsResponse) Reset() {
	*x = GetUserAchievementsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_gw_v1_achievement_achievement_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserAchievementsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserAchievementsResponse) ProtoMessage() {}

func (x *GetUserAchievementsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_gw_v1_achievement_achievement_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserAchievementsResponse.ProtoReflect.Descriptor instead.
func (*GetUserAchievementsResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_gw_v1_achievement_achievement_proto_rawDescGZIP(), []int{6}
}

func (x *GetUserAchievementsResponse) GetInfos() []*Achievement {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetUserAchievementsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

var File_npool_inspire_gw_v1_achievement_achievement_proto protoreflect.FileDescriptor

var file_npool_inspire_gw_v1_achievement_achievement_proto_rawDesc = []byte{
	0x0a, 0x31, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f,
	0x67, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x2f, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x26, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2f, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x99, 0x02, 0x0a, 0x0f, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x65, 0x6c, 0x66, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x24, 0x0a, 0x0d, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x6e, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x49, 0x6e, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12,
	0x30, 0x0a, 0x13, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x32, 0x0a, 0x14, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xcb, 0x07, 0x0a, 0x0f, 0x47, 0x6f, 0x6f, 0x64, 0x41, 0x63,
	0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x6f, 0x6f,
	0x64, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x47, 0x6f, 0x6f, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x47, 0x6f, 0x6f, 0x64, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x54, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x20, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x69, 0x6e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x66, 0x0a, 0x1a, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x1a, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x54, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x20, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x60, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52,
	0x18, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x43,
	0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x43,
	0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43,
	0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x4c,
	0x6f, 0x67, 0x6f, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x4c,
	0x6f, 0x67, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x18,
	0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x55, 0x6e, 0x69, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x5a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x53, 0x65, 0x6c, 0x66, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x53, 0x65, 0x6c, 0x66, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x6e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x53, 0x65, 0x6c, 0x66, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x78, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x65, 0x6c, 0x66, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x29, 0x0a, 0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0e, 0x53, 0x65,
	0x6c, 0x66, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x8c, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x12, 0x53, 0x75, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x53, 0x75, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f, 0x64, 0x49,
	0x44, 0x18, 0xa0, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x70, 0x70, 0x47, 0x6f, 0x6f,
	0x64, 0x49, 0x44, 0x22, 0x8e, 0x04, 0x0a, 0x0b, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x09, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x4f, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x4f, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x6f, 0x6c, 0x18, 0x46, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x03, 0x4b, 0x6f, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x65, 0x73, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x0c, 0x41, 0x63,
	0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x5a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x0c, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x59, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x63, 0x68, 0x69, 0x65,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63,
	0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x22, 0x74, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x63, 0x68, 0x69, 0x65,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x72, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x7a,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x14, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x76, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x63, 0x68, 0x69, 0x65,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x32, 0xe6, 0x02, 0x0a, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0xa3,
	0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x36, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x63, 0x68,
	0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x14, 0x2f, 0x76, 0x31,
	0x2f, 0x67, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x3a, 0x01, 0x2a, 0x12, 0xb4, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3a, 0x2e, 0x69,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61,
	0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3b, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x61, 0x63, 0x68, 0x69, 0x65,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f,
	0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x61, 0x63, 0x68, 0x69,
	0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x42, 0x42, 0x5a, 0x40, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f,
	0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f, 0x67, 0x77,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x68, 0x69, 0x65, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_inspire_gw_v1_achievement_achievement_proto_rawDescOnce sync.Once
	file_npool_inspire_gw_v1_achievement_achievement_proto_rawDescData = file_npool_inspire_gw_v1_achievement_achievement_proto_rawDesc
)

func file_npool_inspire_gw_v1_achievement_achievement_proto_rawDescGZIP() []byte {
	file_npool_inspire_gw_v1_achievement_achievement_proto_rawDescOnce.Do(func() {
		file_npool_inspire_gw_v1_achievement_achievement_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_inspire_gw_v1_achievement_achievement_proto_rawDescData)
	})
	return file_npool_inspire_gw_v1_achievement_achievement_proto_rawDescData
}

var file_npool_inspire_gw_v1_achievement_achievement_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_npool_inspire_gw_v1_achievement_achievement_proto_goTypes = []interface{}{
	(*UserAchievement)(nil),             // 0: inspire.gateway.achievement.v1.UserAchievement
	(*GoodAchievement)(nil),             // 1: inspire.gateway.achievement.v1.GoodAchievement
	(*Achievement)(nil),                 // 2: inspire.gateway.achievement.v1.Achievement
	(*GetAchievementsRequest)(nil),      // 3: inspire.gateway.achievement.v1.GetAchievementsRequest
	(*GetAchievementsResponse)(nil),     // 4: inspire.gateway.achievement.v1.GetAchievementsResponse
	(*GetUserAchievementsRequest)(nil),  // 5: inspire.gateway.achievement.v1.GetUserAchievementsRequest
	(*GetUserAchievementsResponse)(nil), // 6: inspire.gateway.achievement.v1.GetUserAchievementsResponse
	(v1.SettleType)(0),                  // 7: basetypes.inspire.v1.SettleType
	(v1.SettleAmountType)(0),            // 8: basetypes.inspire.v1.SettleAmountType
	(v1.SettleMode)(0),                  // 9: basetypes.inspire.v1.SettleMode
	(v1.SettleInterval)(0),              // 10: basetypes.inspire.v1.SettleInterval
}
var file_npool_inspire_gw_v1_achievement_achievement_proto_depIdxs = []int32{
	7,  // 0: inspire.gateway.achievement.v1.GoodAchievement.CommissionSettleType:type_name -> basetypes.inspire.v1.SettleType
	8,  // 1: inspire.gateway.achievement.v1.GoodAchievement.CommissionSettleAmountType:type_name -> basetypes.inspire.v1.SettleAmountType
	9,  // 2: inspire.gateway.achievement.v1.GoodAchievement.CommissionSettleMode:type_name -> basetypes.inspire.v1.SettleMode
	10, // 3: inspire.gateway.achievement.v1.GoodAchievement.CommissionSettleInterval:type_name -> basetypes.inspire.v1.SettleInterval
	1,  // 4: inspire.gateway.achievement.v1.Achievement.Achievements:type_name -> inspire.gateway.achievement.v1.GoodAchievement
	0,  // 5: inspire.gateway.achievement.v1.Achievement.UserAchievement:type_name -> inspire.gateway.achievement.v1.UserAchievement
	2,  // 6: inspire.gateway.achievement.v1.GetAchievementsResponse.Infos:type_name -> inspire.gateway.achievement.v1.Achievement
	2,  // 7: inspire.gateway.achievement.v1.GetUserAchievementsResponse.Infos:type_name -> inspire.gateway.achievement.v1.Achievement
	3,  // 8: inspire.gateway.achievement.v1.Gateway.GetAchievements:input_type -> inspire.gateway.achievement.v1.GetAchievementsRequest
	5,  // 9: inspire.gateway.achievement.v1.Gateway.GetUserAchievements:input_type -> inspire.gateway.achievement.v1.GetUserAchievementsRequest
	4,  // 10: inspire.gateway.achievement.v1.Gateway.GetAchievements:output_type -> inspire.gateway.achievement.v1.GetAchievementsResponse
	6,  // 11: inspire.gateway.achievement.v1.Gateway.GetUserAchievements:output_type -> inspire.gateway.achievement.v1.GetUserAchievementsResponse
	10, // [10:12] is the sub-list for method output_type
	8,  // [8:10] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_npool_inspire_gw_v1_achievement_achievement_proto_init() }
func file_npool_inspire_gw_v1_achievement_achievement_proto_init() {
	if File_npool_inspire_gw_v1_achievement_achievement_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_inspire_gw_v1_achievement_achievement_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAchievement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_gw_v1_achievement_achievement_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodAchievement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_gw_v1_achievement_achievement_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Achievement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_gw_v1_achievement_achievement_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAchievementsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_gw_v1_achievement_achievement_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAchievementsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_gw_v1_achievement_achievement_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserAchievementsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_gw_v1_achievement_achievement_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserAchievementsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_inspire_gw_v1_achievement_achievement_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_inspire_gw_v1_achievement_achievement_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_inspire_gw_v1_achievement_achievement_proto_goTypes,
		DependencyIndexes: file_npool_inspire_gw_v1_achievement_achievement_proto_depIdxs,
		MessageInfos:      file_npool_inspire_gw_v1_achievement_achievement_proto_msgTypes,
	}.Build()
	File_npool_inspire_gw_v1_achievement_achievement_proto = out.File
	file_npool_inspire_gw_v1_achievement_achievement_proto_rawDesc = nil
	file_npool_inspire_gw_v1_achievement_achievement_proto_goTypes = nil
	file_npool_inspire_gw_v1_achievement_achievement_proto_depIdxs = nil
}
