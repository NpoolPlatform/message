// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/inspire/mgr/v1/inspire/coupon/discountpool/discountpool.proto

package discountpool

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateDiscountPool(ctx context.Context, in *CreateDiscountPoolRequest, opts ...grpc.CallOption) (*CreateDiscountPoolResponse, error)
	CreateDiscountPools(ctx context.Context, in *CreateDiscountPoolsRequest, opts ...grpc.CallOption) (*CreateDiscountPoolsResponse, error)
	UpdateDiscountPool(ctx context.Context, in *UpdateDiscountPoolRequest, opts ...grpc.CallOption) (*UpdateDiscountPoolResponse, error)
	GetDiscountPool(ctx context.Context, in *GetDiscountPoolRequest, opts ...grpc.CallOption) (*GetDiscountPoolResponse, error)
	GetDiscountPoolOnly(ctx context.Context, in *GetDiscountPoolOnlyRequest, opts ...grpc.CallOption) (*GetDiscountPoolOnlyResponse, error)
	GetDiscountPools(ctx context.Context, in *GetDiscountPoolsRequest, opts ...grpc.CallOption) (*GetDiscountPoolsResponse, error)
	ExistDiscountPool(ctx context.Context, in *ExistDiscountPoolRequest, opts ...grpc.CallOption) (*ExistDiscountPoolResponse, error)
	ExistDiscountPoolConds(ctx context.Context, in *ExistDiscountPoolCondsRequest, opts ...grpc.CallOption) (*ExistDiscountPoolCondsResponse, error)
	CountDiscountPools(ctx context.Context, in *CountDiscountPoolsRequest, opts ...grpc.CallOption) (*CountDiscountPoolsResponse, error)
	DeleteDiscountPool(ctx context.Context, in *DeleteDiscountPoolRequest, opts ...grpc.CallOption) (*DeleteDiscountPoolResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateDiscountPool(ctx context.Context, in *CreateDiscountPoolRequest, opts ...grpc.CallOption) (*CreateDiscountPoolResponse, error) {
	out := new(CreateDiscountPoolResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.inspire.coupon.discountpool.v1.Manager/CreateDiscountPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateDiscountPools(ctx context.Context, in *CreateDiscountPoolsRequest, opts ...grpc.CallOption) (*CreateDiscountPoolsResponse, error) {
	out := new(CreateDiscountPoolsResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.inspire.coupon.discountpool.v1.Manager/CreateDiscountPools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateDiscountPool(ctx context.Context, in *UpdateDiscountPoolRequest, opts ...grpc.CallOption) (*UpdateDiscountPoolResponse, error) {
	out := new(UpdateDiscountPoolResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.inspire.coupon.discountpool.v1.Manager/UpdateDiscountPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetDiscountPool(ctx context.Context, in *GetDiscountPoolRequest, opts ...grpc.CallOption) (*GetDiscountPoolResponse, error) {
	out := new(GetDiscountPoolResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.inspire.coupon.discountpool.v1.Manager/GetDiscountPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetDiscountPoolOnly(ctx context.Context, in *GetDiscountPoolOnlyRequest, opts ...grpc.CallOption) (*GetDiscountPoolOnlyResponse, error) {
	out := new(GetDiscountPoolOnlyResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.inspire.coupon.discountpool.v1.Manager/GetDiscountPoolOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetDiscountPools(ctx context.Context, in *GetDiscountPoolsRequest, opts ...grpc.CallOption) (*GetDiscountPoolsResponse, error) {
	out := new(GetDiscountPoolsResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.inspire.coupon.discountpool.v1.Manager/GetDiscountPools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistDiscountPool(ctx context.Context, in *ExistDiscountPoolRequest, opts ...grpc.CallOption) (*ExistDiscountPoolResponse, error) {
	out := new(ExistDiscountPoolResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.inspire.coupon.discountpool.v1.Manager/ExistDiscountPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistDiscountPoolConds(ctx context.Context, in *ExistDiscountPoolCondsRequest, opts ...grpc.CallOption) (*ExistDiscountPoolCondsResponse, error) {
	out := new(ExistDiscountPoolCondsResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.inspire.coupon.discountpool.v1.Manager/ExistDiscountPoolConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountDiscountPools(ctx context.Context, in *CountDiscountPoolsRequest, opts ...grpc.CallOption) (*CountDiscountPoolsResponse, error) {
	out := new(CountDiscountPoolsResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.inspire.coupon.discountpool.v1.Manager/CountDiscountPools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteDiscountPool(ctx context.Context, in *DeleteDiscountPoolRequest, opts ...grpc.CallOption) (*DeleteDiscountPoolResponse, error) {
	out := new(DeleteDiscountPoolResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.inspire.coupon.discountpool.v1.Manager/DeleteDiscountPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateDiscountPool(context.Context, *CreateDiscountPoolRequest) (*CreateDiscountPoolResponse, error)
	CreateDiscountPools(context.Context, *CreateDiscountPoolsRequest) (*CreateDiscountPoolsResponse, error)
	UpdateDiscountPool(context.Context, *UpdateDiscountPoolRequest) (*UpdateDiscountPoolResponse, error)
	GetDiscountPool(context.Context, *GetDiscountPoolRequest) (*GetDiscountPoolResponse, error)
	GetDiscountPoolOnly(context.Context, *GetDiscountPoolOnlyRequest) (*GetDiscountPoolOnlyResponse, error)
	GetDiscountPools(context.Context, *GetDiscountPoolsRequest) (*GetDiscountPoolsResponse, error)
	ExistDiscountPool(context.Context, *ExistDiscountPoolRequest) (*ExistDiscountPoolResponse, error)
	ExistDiscountPoolConds(context.Context, *ExistDiscountPoolCondsRequest) (*ExistDiscountPoolCondsResponse, error)
	CountDiscountPools(context.Context, *CountDiscountPoolsRequest) (*CountDiscountPoolsResponse, error)
	DeleteDiscountPool(context.Context, *DeleteDiscountPoolRequest) (*DeleteDiscountPoolResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateDiscountPool(context.Context, *CreateDiscountPoolRequest) (*CreateDiscountPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDiscountPool not implemented")
}
func (UnimplementedManagerServer) CreateDiscountPools(context.Context, *CreateDiscountPoolsRequest) (*CreateDiscountPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDiscountPools not implemented")
}
func (UnimplementedManagerServer) UpdateDiscountPool(context.Context, *UpdateDiscountPoolRequest) (*UpdateDiscountPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDiscountPool not implemented")
}
func (UnimplementedManagerServer) GetDiscountPool(context.Context, *GetDiscountPoolRequest) (*GetDiscountPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiscountPool not implemented")
}
func (UnimplementedManagerServer) GetDiscountPoolOnly(context.Context, *GetDiscountPoolOnlyRequest) (*GetDiscountPoolOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiscountPoolOnly not implemented")
}
func (UnimplementedManagerServer) GetDiscountPools(context.Context, *GetDiscountPoolsRequest) (*GetDiscountPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiscountPools not implemented")
}
func (UnimplementedManagerServer) ExistDiscountPool(context.Context, *ExistDiscountPoolRequest) (*ExistDiscountPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistDiscountPool not implemented")
}
func (UnimplementedManagerServer) ExistDiscountPoolConds(context.Context, *ExistDiscountPoolCondsRequest) (*ExistDiscountPoolCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistDiscountPoolConds not implemented")
}
func (UnimplementedManagerServer) CountDiscountPools(context.Context, *CountDiscountPoolsRequest) (*CountDiscountPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountDiscountPools not implemented")
}
func (UnimplementedManagerServer) DeleteDiscountPool(context.Context, *DeleteDiscountPoolRequest) (*DeleteDiscountPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDiscountPool not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateDiscountPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDiscountPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateDiscountPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.inspire.coupon.discountpool.v1.Manager/CreateDiscountPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateDiscountPool(ctx, req.(*CreateDiscountPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateDiscountPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDiscountPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateDiscountPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.inspire.coupon.discountpool.v1.Manager/CreateDiscountPools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateDiscountPools(ctx, req.(*CreateDiscountPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateDiscountPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDiscountPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateDiscountPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.inspire.coupon.discountpool.v1.Manager/UpdateDiscountPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateDiscountPool(ctx, req.(*UpdateDiscountPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetDiscountPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiscountPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetDiscountPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.inspire.coupon.discountpool.v1.Manager/GetDiscountPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetDiscountPool(ctx, req.(*GetDiscountPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetDiscountPoolOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiscountPoolOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetDiscountPoolOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.inspire.coupon.discountpool.v1.Manager/GetDiscountPoolOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetDiscountPoolOnly(ctx, req.(*GetDiscountPoolOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetDiscountPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiscountPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetDiscountPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.inspire.coupon.discountpool.v1.Manager/GetDiscountPools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetDiscountPools(ctx, req.(*GetDiscountPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistDiscountPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistDiscountPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistDiscountPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.inspire.coupon.discountpool.v1.Manager/ExistDiscountPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistDiscountPool(ctx, req.(*ExistDiscountPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistDiscountPoolConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistDiscountPoolCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistDiscountPoolConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.inspire.coupon.discountpool.v1.Manager/ExistDiscountPoolConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistDiscountPoolConds(ctx, req.(*ExistDiscountPoolCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountDiscountPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountDiscountPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountDiscountPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.inspire.coupon.discountpool.v1.Manager/CountDiscountPools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountDiscountPools(ctx, req.(*CountDiscountPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteDiscountPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDiscountPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteDiscountPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.inspire.coupon.discountpool.v1.Manager/DeleteDiscountPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteDiscountPool(ctx, req.(*DeleteDiscountPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inspire.manager.inspire.coupon.discountpool.v1.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDiscountPool",
			Handler:    _Manager_CreateDiscountPool_Handler,
		},
		{
			MethodName: "CreateDiscountPools",
			Handler:    _Manager_CreateDiscountPools_Handler,
		},
		{
			MethodName: "UpdateDiscountPool",
			Handler:    _Manager_UpdateDiscountPool_Handler,
		},
		{
			MethodName: "GetDiscountPool",
			Handler:    _Manager_GetDiscountPool_Handler,
		},
		{
			MethodName: "GetDiscountPoolOnly",
			Handler:    _Manager_GetDiscountPoolOnly_Handler,
		},
		{
			MethodName: "GetDiscountPools",
			Handler:    _Manager_GetDiscountPools_Handler,
		},
		{
			MethodName: "ExistDiscountPool",
			Handler:    _Manager_ExistDiscountPool_Handler,
		},
		{
			MethodName: "ExistDiscountPoolConds",
			Handler:    _Manager_ExistDiscountPoolConds_Handler,
		},
		{
			MethodName: "CountDiscountPools",
			Handler:    _Manager_CountDiscountPools_Handler,
		},
		{
			MethodName: "DeleteDiscountPool",
			Handler:    _Manager_DeleteDiscountPool_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/inspire/mgr/v1/inspire/coupon/discountpool/discountpool.proto",
}
