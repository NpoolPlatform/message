// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: npool/inspire/mgr/v1/inspire/coupon/allocated/allocated.proto

package allocated

import (
	npool "github.com/NpoolPlatform/message/npool"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CouponType int32

const (
	CouponType_DefaultCouponType      CouponType = 0
	CouponType_FixAmount              CouponType = 10
	CouponType_Discount               CouponType = 20
	CouponType_SpecialOffer           CouponType = 30
	CouponType_ThresholdFixAmount     CouponType = 40
	CouponType_ThresholdDiscount      CouponType = 50
	CouponType_GoodFixAmount          CouponType = 60
	CouponType_GoodDiscount           CouponType = 70
	CouponType_GoodThresholdFixAmount CouponType = 80
	CouponType_GoodThresholdDiscount  CouponType = 90
)

// Enum value maps for CouponType.
var (
	CouponType_name = map[int32]string{
		0:  "DefaultCouponType",
		10: "FixAmount",
		20: "Discount",
		30: "SpecialOffer",
		40: "ThresholdFixAmount",
		50: "ThresholdDiscount",
		60: "GoodFixAmount",
		70: "GoodDiscount",
		80: "GoodThresholdFixAmount",
		90: "GoodThresholdDiscount",
	}
	CouponType_value = map[string]int32{
		"DefaultCouponType":      0,
		"FixAmount":              10,
		"Discount":               20,
		"SpecialOffer":           30,
		"ThresholdFixAmount":     40,
		"ThresholdDiscount":      50,
		"GoodFixAmount":          60,
		"GoodDiscount":           70,
		"GoodThresholdFixAmount": 80,
		"GoodThresholdDiscount":  90,
	}
)

func (x CouponType) Enum() *CouponType {
	p := new(CouponType)
	*p = x
	return p
}

func (x CouponType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CouponType) Descriptor() protoreflect.EnumDescriptor {
	return file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_enumTypes[0].Descriptor()
}

func (CouponType) Type() protoreflect.EnumType {
	return &file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_enumTypes[0]
}

func (x CouponType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CouponType.Descriptor instead.
func (CouponType) EnumDescriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_rawDescGZIP(), []int{0}
}

type CouponConstraint int32

const (
	CouponConstraint_DefaultCouponConstraint CouponConstraint = 0
	CouponConstraint_Normal                  CouponConstraint = 10
	CouponConstraint_Threshold               CouponConstraint = 20
	CouponConstraint_GoodOnly                CouponConstraint = 30
	CouponConstraint_GoodThreshold           CouponConstraint = 40
)

// Enum value maps for CouponConstraint.
var (
	CouponConstraint_name = map[int32]string{
		0:  "DefaultCouponConstraint",
		10: "Normal",
		20: "Threshold",
		30: "GoodOnly",
		40: "GoodThreshold",
	}
	CouponConstraint_value = map[string]int32{
		"DefaultCouponConstraint": 0,
		"Normal":                  10,
		"Threshold":               20,
		"GoodOnly":                30,
		"GoodThreshold":           40,
	}
)

func (x CouponConstraint) Enum() *CouponConstraint {
	p := new(CouponConstraint)
	*p = x
	return p
}

func (x CouponConstraint) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CouponConstraint) Descriptor() protoreflect.EnumDescriptor {
	return file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_enumTypes[1].Descriptor()
}

func (CouponConstraint) Type() protoreflect.EnumType {
	return &file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_enumTypes[1]
}

func (x CouponConstraint) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CouponConstraint.Descriptor instead.
func (CouponConstraint) EnumDescriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_rawDescGZIP(), []int{1}
}

type AllocatedReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       *string     `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	AppID    *string     `protobuf:"bytes,20,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	UserID   *string     `protobuf:"bytes,30,opt,name=UserID,proto3,oneof" json:"UserID,omitempty"`
	Type     *CouponType `protobuf:"varint,40,opt,name=Type,proto3,enum=inspire.manager.inspire.coupon.allocated.v1.CouponType,oneof" json:"Type,omitempty"`
	CouponID *string     `protobuf:"bytes,50,opt,name=CouponID,proto3,oneof" json:"CouponID,omitempty"`
}

func (x *AllocatedReq) Reset() {
	*x = AllocatedReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllocatedReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllocatedReq) ProtoMessage() {}

func (x *AllocatedReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllocatedReq.ProtoReflect.Descriptor instead.
func (*AllocatedReq) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_rawDescGZIP(), []int{0}
}

func (x *AllocatedReq) GetID() string {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return ""
}

func (x *AllocatedReq) GetAppID() string {
	if x != nil && x.AppID != nil {
		return *x.AppID
	}
	return ""
}

func (x *AllocatedReq) GetUserID() string {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return ""
}

func (x *AllocatedReq) GetType() CouponType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return CouponType_DefaultCouponType
}

func (x *AllocatedReq) GetCouponID() string {
	if x != nil && x.CouponID != nil {
		return *x.CouponID
	}
	return ""
}

type Allocated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string     `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID     string     `protobuf:"bytes,20,opt,name=AppID,proto3" json:"AppID,omitempty"`
	UserID    string     `protobuf:"bytes,30,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Type      CouponType `protobuf:"varint,40,opt,name=Type,proto3,enum=inspire.manager.inspire.coupon.allocated.v1.CouponType" json:"Type,omitempty"`
	CouponID  string     `protobuf:"bytes,50,opt,name=CouponID,proto3" json:"CouponID,omitempty"`
	CreatedAt uint32     `protobuf:"varint,60,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt uint32     `protobuf:"varint,70,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (x *Allocated) Reset() {
	*x = Allocated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Allocated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Allocated) ProtoMessage() {}

func (x *Allocated) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Allocated.ProtoReflect.Descriptor instead.
func (*Allocated) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_rawDescGZIP(), []int{1}
}

func (x *Allocated) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Allocated) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *Allocated) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *Allocated) GetType() CouponType {
	if x != nil {
		return x.Type
	}
	return CouponType_DefaultCouponType
}

func (x *Allocated) GetCouponID() string {
	if x != nil {
		return x.CouponID
	}
	return ""
}

func (x *Allocated) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Allocated) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       *npool.StringVal `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	AppID    *npool.StringVal `protobuf:"bytes,20,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	UserID   *npool.StringVal `protobuf:"bytes,30,opt,name=UserID,proto3,oneof" json:"UserID,omitempty"`
	Type     *npool.Uint32Val `protobuf:"bytes,40,opt,name=Type,proto3,oneof" json:"Type,omitempty"`
	CouponID *npool.StringVal `protobuf:"bytes,50,opt,name=CouponID,proto3,oneof" json:"CouponID,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *npool.StringVal {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetAppID() *npool.StringVal {
	if x != nil {
		return x.AppID
	}
	return nil
}

func (x *Conds) GetUserID() *npool.StringVal {
	if x != nil {
		return x.UserID
	}
	return nil
}

func (x *Conds) GetType() *npool.Uint32Val {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Conds) GetCouponID() *npool.StringVal {
	if x != nil {
		return x.CouponID
	}
	return nil
}

type CreateAllocatedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AllocatedReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateAllocatedRequest) Reset() {
	*x = CreateAllocatedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAllocatedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAllocatedRequest) ProtoMessage() {}

func (x *CreateAllocatedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAllocatedRequest.ProtoReflect.Descriptor instead.
func (*CreateAllocatedRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_rawDescGZIP(), []int{3}
}

func (x *CreateAllocatedRequest) GetInfo() *AllocatedReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateAllocatedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Allocated `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateAllocatedResponse) Reset() {
	*x = CreateAllocatedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAllocatedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAllocatedResponse) ProtoMessage() {}

func (x *CreateAllocatedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAllocatedResponse.ProtoReflect.Descriptor instead.
func (*CreateAllocatedResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_rawDescGZIP(), []int{4}
}

func (x *CreateAllocatedResponse) GetInfo() *Allocated {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateAllocatedsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*AllocatedReq `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateAllocatedsRequest) Reset() {
	*x = CreateAllocatedsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAllocatedsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAllocatedsRequest) ProtoMessage() {}

func (x *CreateAllocatedsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAllocatedsRequest.ProtoReflect.Descriptor instead.
func (*CreateAllocatedsRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_rawDescGZIP(), []int{5}
}

func (x *CreateAllocatedsRequest) GetInfos() []*AllocatedReq {
	if x != nil {
		return x.Infos
	}
	return nil
}

type CreateAllocatedsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Allocated `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateAllocatedsResponse) Reset() {
	*x = CreateAllocatedsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateAllocatedsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAllocatedsResponse) ProtoMessage() {}

func (x *CreateAllocatedsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAllocatedsResponse.ProtoReflect.Descriptor instead.
func (*CreateAllocatedsResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_rawDescGZIP(), []int{6}
}

func (x *CreateAllocatedsResponse) GetInfos() []*Allocated {
	if x != nil {
		return x.Infos
	}
	return nil
}

type UpdateAllocatedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *AllocatedReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateAllocatedRequest) Reset() {
	*x = UpdateAllocatedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAllocatedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAllocatedRequest) ProtoMessage() {}

func (x *UpdateAllocatedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAllocatedRequest.ProtoReflect.Descriptor instead.
func (*UpdateAllocatedRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateAllocatedRequest) GetInfo() *AllocatedReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateAllocatedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Allocated `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateAllocatedResponse) Reset() {
	*x = UpdateAllocatedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateAllocatedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateAllocatedResponse) ProtoMessage() {}

func (x *UpdateAllocatedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateAllocatedResponse.ProtoReflect.Descriptor instead.
func (*UpdateAllocatedResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateAllocatedResponse) GetInfo() *Allocated {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetAllocatedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetAllocatedRequest) Reset() {
	*x = GetAllocatedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllocatedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllocatedRequest) ProtoMessage() {}

func (x *GetAllocatedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllocatedRequest.ProtoReflect.Descriptor instead.
func (*GetAllocatedRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_rawDescGZIP(), []int{9}
}

func (x *GetAllocatedRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetAllocatedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Allocated `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetAllocatedResponse) Reset() {
	*x = GetAllocatedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllocatedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllocatedResponse) ProtoMessage() {}

func (x *GetAllocatedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllocatedResponse.ProtoReflect.Descriptor instead.
func (*GetAllocatedResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_rawDescGZIP(), []int{10}
}

func (x *GetAllocatedResponse) GetInfo() *Allocated {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetAllocatedsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetAllocatedsRequest) Reset() {
	*x = GetAllocatedsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllocatedsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllocatedsRequest) ProtoMessage() {}

func (x *GetAllocatedsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllocatedsRequest.ProtoReflect.Descriptor instead.
func (*GetAllocatedsRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_rawDescGZIP(), []int{11}
}

func (x *GetAllocatedsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetAllocatedsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetAllocatedsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetAllocatedsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Allocated `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32       `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetAllocatedsResponse) Reset() {
	*x = GetAllocatedsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllocatedsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllocatedsResponse) ProtoMessage() {}

func (x *GetAllocatedsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllocatedsResponse.ProtoReflect.Descriptor instead.
func (*GetAllocatedsResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_rawDescGZIP(), []int{12}
}

func (x *GetAllocatedsResponse) GetInfos() []*Allocated {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetAllocatedsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetAllocatedOnlyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *GetAllocatedOnlyRequest) Reset() {
	*x = GetAllocatedOnlyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllocatedOnlyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllocatedOnlyRequest) ProtoMessage() {}

func (x *GetAllocatedOnlyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllocatedOnlyRequest.ProtoReflect.Descriptor instead.
func (*GetAllocatedOnlyRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_rawDescGZIP(), []int{13}
}

func (x *GetAllocatedOnlyRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type GetAllocatedOnlyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Allocated `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetAllocatedOnlyResponse) Reset() {
	*x = GetAllocatedOnlyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllocatedOnlyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllocatedOnlyResponse) ProtoMessage() {}

func (x *GetAllocatedOnlyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllocatedOnlyResponse.ProtoReflect.Descriptor instead.
func (*GetAllocatedOnlyResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_rawDescGZIP(), []int{14}
}

func (x *GetAllocatedOnlyResponse) GetInfo() *Allocated {
	if x != nil {
		return x.Info
	}
	return nil
}

type ExistAllocatedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ExistAllocatedRequest) Reset() {
	*x = ExistAllocatedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistAllocatedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistAllocatedRequest) ProtoMessage() {}

func (x *ExistAllocatedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistAllocatedRequest.ProtoReflect.Descriptor instead.
func (*ExistAllocatedRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_rawDescGZIP(), []int{15}
}

func (x *ExistAllocatedRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ExistAllocatedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistAllocatedResponse) Reset() {
	*x = ExistAllocatedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistAllocatedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistAllocatedResponse) ProtoMessage() {}

func (x *ExistAllocatedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistAllocatedResponse.ProtoReflect.Descriptor instead.
func (*ExistAllocatedResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_rawDescGZIP(), []int{16}
}

func (x *ExistAllocatedResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type ExistAllocatedCondsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *ExistAllocatedCondsRequest) Reset() {
	*x = ExistAllocatedCondsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistAllocatedCondsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistAllocatedCondsRequest) ProtoMessage() {}

func (x *ExistAllocatedCondsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistAllocatedCondsRequest.ProtoReflect.Descriptor instead.
func (*ExistAllocatedCondsRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_rawDescGZIP(), []int{17}
}

func (x *ExistAllocatedCondsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type ExistAllocatedCondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistAllocatedCondsResponse) Reset() {
	*x = ExistAllocatedCondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistAllocatedCondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistAllocatedCondsResponse) ProtoMessage() {}

func (x *ExistAllocatedCondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistAllocatedCondsResponse.ProtoReflect.Descriptor instead.
func (*ExistAllocatedCondsResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_rawDescGZIP(), []int{18}
}

func (x *ExistAllocatedCondsResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type CountAllocatedsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *CountAllocatedsRequest) Reset() {
	*x = CountAllocatedsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAllocatedsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAllocatedsRequest) ProtoMessage() {}

func (x *CountAllocatedsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAllocatedsRequest.ProtoReflect.Descriptor instead.
func (*CountAllocatedsRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_rawDescGZIP(), []int{19}
}

func (x *CountAllocatedsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type CountAllocatedsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info uint32 `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CountAllocatedsResponse) Reset() {
	*x = CountAllocatedsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountAllocatedsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountAllocatedsResponse) ProtoMessage() {}

func (x *CountAllocatedsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountAllocatedsResponse.ProtoReflect.Descriptor instead.
func (*CountAllocatedsResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_rawDescGZIP(), []int{20}
}

func (x *CountAllocatedsResponse) GetInfo() uint32 {
	if x != nil {
		return x.Info
	}
	return 0
}

type DeleteAllocatedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *DeleteAllocatedRequest) Reset() {
	*x = DeleteAllocatedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAllocatedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAllocatedRequest) ProtoMessage() {}

func (x *DeleteAllocatedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAllocatedRequest.ProtoReflect.Descriptor instead.
func (*DeleteAllocatedRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteAllocatedRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type DeleteAllocatedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Allocated `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteAllocatedResponse) Reset() {
	*x = DeleteAllocatedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteAllocatedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteAllocatedResponse) ProtoMessage() {}

func (x *DeleteAllocatedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteAllocatedResponse.ProtoReflect.Descriptor instead.
func (*DeleteAllocatedResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteAllocatedResponse) GetInfo() *Allocated {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto protoreflect.FileDescriptor

var file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_rawDesc = []byte{
	0x0a, 0x3d, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f,
	0x6d, 0x67, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f, 0x63,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2f, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2f,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x2b, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x1a, 0x11, 0x6e, 0x70,
	0x6f, 0x6f, 0x6c, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x80, 0x02, 0x0a, 0x0c, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x13, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02,
	0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x69, 0x6e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x69, 0x6e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x48, 0x03, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x08, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x04, 0x52, 0x08, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x44, 0x88, 0x01, 0x01,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x49, 0x44, 0x22, 0xee, 0x01, 0x0a, 0x09, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x4b,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x69,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x69,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x22, 0xa9, 0x02, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x28, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x00,
	0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x05, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x02, 0x52, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x08, 0x43, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x04,
	0x52, 0x08, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x44, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x41, 0x70, 0x70, 0x49, 0x44, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x44, 0x22,
	0x67, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x65, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x6a, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x05, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x69, 0x6e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x68, 0x0a, 0x18, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x05,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x67, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4d, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x65,
	0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x25, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x62, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x8e, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x05, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0x7b, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x05, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x69, 0x6e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x63,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e,
	0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x05, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x22, 0x66, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4a, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x27, 0x0a, 0x15, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x44, 0x22, 0x2c, 0x0a, 0x16, 0x45, 0x78, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x66, 0x0a, 0x1a, 0x45, 0x78, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x48, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x31, 0x0a, 0x1b, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x62, 0x0a,
	0x16, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x22, 0x2d, 0x0a, 0x17, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x28, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x65, 0x0a, 0x17, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x2a, 0xdd, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x15, 0x0a, 0x11, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x69, 0x78, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x10, 0x14, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x4f,
	0x66, 0x66, 0x65, 0x72, 0x10, 0x1e, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x28, 0x12, 0x15,
	0x0a, 0x11, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x10, 0x32, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x6f, 0x6f, 0x64, 0x46, 0x69, 0x78,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x3c, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x6f, 0x6f, 0x64,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0x46, 0x12, 0x1a, 0x0a, 0x16, 0x47, 0x6f,
	0x6f, 0x64, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x46, 0x69, 0x78, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x10, 0x50, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x10,
	0x5a, 0x2a, 0x6b, 0x0a, 0x10, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x0a, 0x12, 0x0d,
	0x0a, 0x09, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x10, 0x14, 0x12, 0x0c, 0x0a,
	0x08, 0x47, 0x6f, 0x6f, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x10, 0x1e, 0x12, 0x11, 0x0a, 0x0d, 0x47,
	0x6f, 0x6f, 0x64, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x10, 0x28, 0x32, 0xd3,
	0x0c, 0x0a, 0x07, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x9e, 0x01, 0x0a, 0x0f, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x43,
	0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa1, 0x01, 0x0a, 0x10,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x73,
	0x12, 0x44, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x9e, 0x01, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x43, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x95, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x40, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa1, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x44, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x45, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x6e,
	0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x98, 0x01, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x73, 0x12, 0x41,
	0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x42, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9b, 0x01, 0x0a, 0x0e, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x42, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43,
	0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xaa, 0x01, 0x0a, 0x13, 0x45, 0x78, 0x69, 0x73, 0x74, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x47, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x61,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x48, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x9e, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x73, 0x12, 0x43, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x69, 0x6e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x69, 0x6e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41,
	0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x9e, 0x01, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x43, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x69,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x69,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x61, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x50, 0x5a, 0x4e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x69,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f, 0x6d, 0x67, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2f, 0x61, 0x6c, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_rawDescOnce sync.Once
	file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_rawDescData = file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_rawDesc
)

func file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_rawDescGZIP() []byte {
	file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_rawDescOnce.Do(func() {
		file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_rawDescData)
	})
	return file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_rawDescData
}

var file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_goTypes = []interface{}{
	(CouponType)(0),                     // 0: inspire.manager.inspire.coupon.allocated.v1.CouponType
	(CouponConstraint)(0),               // 1: inspire.manager.inspire.coupon.allocated.v1.CouponConstraint
	(*AllocatedReq)(nil),                // 2: inspire.manager.inspire.coupon.allocated.v1.AllocatedReq
	(*Allocated)(nil),                   // 3: inspire.manager.inspire.coupon.allocated.v1.Allocated
	(*Conds)(nil),                       // 4: inspire.manager.inspire.coupon.allocated.v1.Conds
	(*CreateAllocatedRequest)(nil),      // 5: inspire.manager.inspire.coupon.allocated.v1.CreateAllocatedRequest
	(*CreateAllocatedResponse)(nil),     // 6: inspire.manager.inspire.coupon.allocated.v1.CreateAllocatedResponse
	(*CreateAllocatedsRequest)(nil),     // 7: inspire.manager.inspire.coupon.allocated.v1.CreateAllocatedsRequest
	(*CreateAllocatedsResponse)(nil),    // 8: inspire.manager.inspire.coupon.allocated.v1.CreateAllocatedsResponse
	(*UpdateAllocatedRequest)(nil),      // 9: inspire.manager.inspire.coupon.allocated.v1.UpdateAllocatedRequest
	(*UpdateAllocatedResponse)(nil),     // 10: inspire.manager.inspire.coupon.allocated.v1.UpdateAllocatedResponse
	(*GetAllocatedRequest)(nil),         // 11: inspire.manager.inspire.coupon.allocated.v1.GetAllocatedRequest
	(*GetAllocatedResponse)(nil),        // 12: inspire.manager.inspire.coupon.allocated.v1.GetAllocatedResponse
	(*GetAllocatedsRequest)(nil),        // 13: inspire.manager.inspire.coupon.allocated.v1.GetAllocatedsRequest
	(*GetAllocatedsResponse)(nil),       // 14: inspire.manager.inspire.coupon.allocated.v1.GetAllocatedsResponse
	(*GetAllocatedOnlyRequest)(nil),     // 15: inspire.manager.inspire.coupon.allocated.v1.GetAllocatedOnlyRequest
	(*GetAllocatedOnlyResponse)(nil),    // 16: inspire.manager.inspire.coupon.allocated.v1.GetAllocatedOnlyResponse
	(*ExistAllocatedRequest)(nil),       // 17: inspire.manager.inspire.coupon.allocated.v1.ExistAllocatedRequest
	(*ExistAllocatedResponse)(nil),      // 18: inspire.manager.inspire.coupon.allocated.v1.ExistAllocatedResponse
	(*ExistAllocatedCondsRequest)(nil),  // 19: inspire.manager.inspire.coupon.allocated.v1.ExistAllocatedCondsRequest
	(*ExistAllocatedCondsResponse)(nil), // 20: inspire.manager.inspire.coupon.allocated.v1.ExistAllocatedCondsResponse
	(*CountAllocatedsRequest)(nil),      // 21: inspire.manager.inspire.coupon.allocated.v1.CountAllocatedsRequest
	(*CountAllocatedsResponse)(nil),     // 22: inspire.manager.inspire.coupon.allocated.v1.CountAllocatedsResponse
	(*DeleteAllocatedRequest)(nil),      // 23: inspire.manager.inspire.coupon.allocated.v1.DeleteAllocatedRequest
	(*DeleteAllocatedResponse)(nil),     // 24: inspire.manager.inspire.coupon.allocated.v1.DeleteAllocatedResponse
	(*npool.StringVal)(nil),             // 25: npool.v1.StringVal
	(*npool.Uint32Val)(nil),             // 26: npool.v1.Uint32Val
}
var file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_depIdxs = []int32{
	0,  // 0: inspire.manager.inspire.coupon.allocated.v1.AllocatedReq.Type:type_name -> inspire.manager.inspire.coupon.allocated.v1.CouponType
	0,  // 1: inspire.manager.inspire.coupon.allocated.v1.Allocated.Type:type_name -> inspire.manager.inspire.coupon.allocated.v1.CouponType
	25, // 2: inspire.manager.inspire.coupon.allocated.v1.Conds.ID:type_name -> npool.v1.StringVal
	25, // 3: inspire.manager.inspire.coupon.allocated.v1.Conds.AppID:type_name -> npool.v1.StringVal
	25, // 4: inspire.manager.inspire.coupon.allocated.v1.Conds.UserID:type_name -> npool.v1.StringVal
	26, // 5: inspire.manager.inspire.coupon.allocated.v1.Conds.Type:type_name -> npool.v1.Uint32Val
	25, // 6: inspire.manager.inspire.coupon.allocated.v1.Conds.CouponID:type_name -> npool.v1.StringVal
	2,  // 7: inspire.manager.inspire.coupon.allocated.v1.CreateAllocatedRequest.Info:type_name -> inspire.manager.inspire.coupon.allocated.v1.AllocatedReq
	3,  // 8: inspire.manager.inspire.coupon.allocated.v1.CreateAllocatedResponse.Info:type_name -> inspire.manager.inspire.coupon.allocated.v1.Allocated
	2,  // 9: inspire.manager.inspire.coupon.allocated.v1.CreateAllocatedsRequest.Infos:type_name -> inspire.manager.inspire.coupon.allocated.v1.AllocatedReq
	3,  // 10: inspire.manager.inspire.coupon.allocated.v1.CreateAllocatedsResponse.Infos:type_name -> inspire.manager.inspire.coupon.allocated.v1.Allocated
	2,  // 11: inspire.manager.inspire.coupon.allocated.v1.UpdateAllocatedRequest.Info:type_name -> inspire.manager.inspire.coupon.allocated.v1.AllocatedReq
	3,  // 12: inspire.manager.inspire.coupon.allocated.v1.UpdateAllocatedResponse.Info:type_name -> inspire.manager.inspire.coupon.allocated.v1.Allocated
	3,  // 13: inspire.manager.inspire.coupon.allocated.v1.GetAllocatedResponse.Info:type_name -> inspire.manager.inspire.coupon.allocated.v1.Allocated
	4,  // 14: inspire.manager.inspire.coupon.allocated.v1.GetAllocatedsRequest.Conds:type_name -> inspire.manager.inspire.coupon.allocated.v1.Conds
	3,  // 15: inspire.manager.inspire.coupon.allocated.v1.GetAllocatedsResponse.Infos:type_name -> inspire.manager.inspire.coupon.allocated.v1.Allocated
	4,  // 16: inspire.manager.inspire.coupon.allocated.v1.GetAllocatedOnlyRequest.Conds:type_name -> inspire.manager.inspire.coupon.allocated.v1.Conds
	3,  // 17: inspire.manager.inspire.coupon.allocated.v1.GetAllocatedOnlyResponse.Info:type_name -> inspire.manager.inspire.coupon.allocated.v1.Allocated
	4,  // 18: inspire.manager.inspire.coupon.allocated.v1.ExistAllocatedCondsRequest.Conds:type_name -> inspire.manager.inspire.coupon.allocated.v1.Conds
	4,  // 19: inspire.manager.inspire.coupon.allocated.v1.CountAllocatedsRequest.Conds:type_name -> inspire.manager.inspire.coupon.allocated.v1.Conds
	3,  // 20: inspire.manager.inspire.coupon.allocated.v1.DeleteAllocatedResponse.Info:type_name -> inspire.manager.inspire.coupon.allocated.v1.Allocated
	5,  // 21: inspire.manager.inspire.coupon.allocated.v1.Manager.CreateAllocated:input_type -> inspire.manager.inspire.coupon.allocated.v1.CreateAllocatedRequest
	7,  // 22: inspire.manager.inspire.coupon.allocated.v1.Manager.CreateAllocateds:input_type -> inspire.manager.inspire.coupon.allocated.v1.CreateAllocatedsRequest
	9,  // 23: inspire.manager.inspire.coupon.allocated.v1.Manager.UpdateAllocated:input_type -> inspire.manager.inspire.coupon.allocated.v1.UpdateAllocatedRequest
	11, // 24: inspire.manager.inspire.coupon.allocated.v1.Manager.GetAllocated:input_type -> inspire.manager.inspire.coupon.allocated.v1.GetAllocatedRequest
	15, // 25: inspire.manager.inspire.coupon.allocated.v1.Manager.GetAllocatedOnly:input_type -> inspire.manager.inspire.coupon.allocated.v1.GetAllocatedOnlyRequest
	13, // 26: inspire.manager.inspire.coupon.allocated.v1.Manager.GetAllocateds:input_type -> inspire.manager.inspire.coupon.allocated.v1.GetAllocatedsRequest
	17, // 27: inspire.manager.inspire.coupon.allocated.v1.Manager.ExistAllocated:input_type -> inspire.manager.inspire.coupon.allocated.v1.ExistAllocatedRequest
	19, // 28: inspire.manager.inspire.coupon.allocated.v1.Manager.ExistAllocatedConds:input_type -> inspire.manager.inspire.coupon.allocated.v1.ExistAllocatedCondsRequest
	21, // 29: inspire.manager.inspire.coupon.allocated.v1.Manager.CountAllocateds:input_type -> inspire.manager.inspire.coupon.allocated.v1.CountAllocatedsRequest
	23, // 30: inspire.manager.inspire.coupon.allocated.v1.Manager.DeleteAllocated:input_type -> inspire.manager.inspire.coupon.allocated.v1.DeleteAllocatedRequest
	6,  // 31: inspire.manager.inspire.coupon.allocated.v1.Manager.CreateAllocated:output_type -> inspire.manager.inspire.coupon.allocated.v1.CreateAllocatedResponse
	8,  // 32: inspire.manager.inspire.coupon.allocated.v1.Manager.CreateAllocateds:output_type -> inspire.manager.inspire.coupon.allocated.v1.CreateAllocatedsResponse
	10, // 33: inspire.manager.inspire.coupon.allocated.v1.Manager.UpdateAllocated:output_type -> inspire.manager.inspire.coupon.allocated.v1.UpdateAllocatedResponse
	12, // 34: inspire.manager.inspire.coupon.allocated.v1.Manager.GetAllocated:output_type -> inspire.manager.inspire.coupon.allocated.v1.GetAllocatedResponse
	16, // 35: inspire.manager.inspire.coupon.allocated.v1.Manager.GetAllocatedOnly:output_type -> inspire.manager.inspire.coupon.allocated.v1.GetAllocatedOnlyResponse
	14, // 36: inspire.manager.inspire.coupon.allocated.v1.Manager.GetAllocateds:output_type -> inspire.manager.inspire.coupon.allocated.v1.GetAllocatedsResponse
	18, // 37: inspire.manager.inspire.coupon.allocated.v1.Manager.ExistAllocated:output_type -> inspire.manager.inspire.coupon.allocated.v1.ExistAllocatedResponse
	20, // 38: inspire.manager.inspire.coupon.allocated.v1.Manager.ExistAllocatedConds:output_type -> inspire.manager.inspire.coupon.allocated.v1.ExistAllocatedCondsResponse
	22, // 39: inspire.manager.inspire.coupon.allocated.v1.Manager.CountAllocateds:output_type -> inspire.manager.inspire.coupon.allocated.v1.CountAllocatedsResponse
	24, // 40: inspire.manager.inspire.coupon.allocated.v1.Manager.DeleteAllocated:output_type -> inspire.manager.inspire.coupon.allocated.v1.DeleteAllocatedResponse
	31, // [31:41] is the sub-list for method output_type
	21, // [21:31] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_init() }
func file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_init() {
	if File_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllocatedReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Allocated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAllocatedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAllocatedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAllocatedsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateAllocatedsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAllocatedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateAllocatedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllocatedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllocatedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllocatedsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllocatedsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllocatedOnlyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllocatedOnlyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistAllocatedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistAllocatedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistAllocatedCondsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistAllocatedCondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAllocatedsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountAllocatedsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAllocatedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteAllocatedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_goTypes,
		DependencyIndexes: file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_depIdxs,
		EnumInfos:         file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_enumTypes,
		MessageInfos:      file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_msgTypes,
	}.Build()
	File_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto = out.File
	file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_rawDesc = nil
	file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_goTypes = nil
	file_npool_inspire_mgr_v1_inspire_coupon_allocated_allocated_proto_depIdxs = nil
}
