// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: npool/inspire/mgr/v1/inspire/invitation/registrationinvitation/registrationinvitation.proto

package registrationinvitation

import (
	npool "github.com/NpoolPlatform/message/npool"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RegistrationInvitationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        *string `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	AppID     *string `protobuf:"bytes,20,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	InviterID *string `protobuf:"bytes,30,opt,name=InviterID,proto3,oneof" json:"InviterID,omitempty"`
	InviteeID *string `protobuf:"bytes,40,opt,name=InviteeID,proto3,oneof" json:"InviteeID,omitempty"`
}

func (x *RegistrationInvitationReq) Reset() {
	*x = RegistrationInvitationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistrationInvitationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistrationInvitationReq) ProtoMessage() {}

func (x *RegistrationInvitationReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistrationInvitationReq.ProtoReflect.Descriptor instead.
func (*RegistrationInvitationReq) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_rawDescGZIP(), []int{0}
}

func (x *RegistrationInvitationReq) GetID() string {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return ""
}

func (x *RegistrationInvitationReq) GetAppID() string {
	if x != nil && x.AppID != nil {
		return *x.AppID
	}
	return ""
}

func (x *RegistrationInvitationReq) GetInviterID() string {
	if x != nil && x.InviterID != nil {
		return *x.InviterID
	}
	return ""
}

func (x *RegistrationInvitationReq) GetInviteeID() string {
	if x != nil && x.InviteeID != nil {
		return *x.InviteeID
	}
	return ""
}

type RegistrationInvitation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID     string `protobuf:"bytes,20,opt,name=AppID,proto3" json:"AppID,omitempty"`
	InviterID string `protobuf:"bytes,30,opt,name=InviterID,proto3" json:"InviterID,omitempty"`
	InviteeID string `protobuf:"bytes,40,opt,name=InviteeID,proto3" json:"InviteeID,omitempty"`
	CreatedAt uint32 `protobuf:"varint,50,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt uint32 `protobuf:"varint,60,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (x *RegistrationInvitation) Reset() {
	*x = RegistrationInvitation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegistrationInvitation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegistrationInvitation) ProtoMessage() {}

func (x *RegistrationInvitation) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegistrationInvitation.ProtoReflect.Descriptor instead.
func (*RegistrationInvitation) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_rawDescGZIP(), []int{1}
}

func (x *RegistrationInvitation) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *RegistrationInvitation) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *RegistrationInvitation) GetInviterID() string {
	if x != nil {
		return x.InviterID
	}
	return ""
}

func (x *RegistrationInvitation) GetInviteeID() string {
	if x != nil {
		return x.InviteeID
	}
	return ""
}

func (x *RegistrationInvitation) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *RegistrationInvitation) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        *npool.StringVal `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	AppID     *npool.StringVal `protobuf:"bytes,20,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	InviterID *npool.StringVal `protobuf:"bytes,30,opt,name=InviterID,proto3,oneof" json:"InviterID,omitempty"`
	InviteeID *npool.StringVal `protobuf:"bytes,40,opt,name=InviteeID,proto3,oneof" json:"InviteeID,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *npool.StringVal {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetAppID() *npool.StringVal {
	if x != nil {
		return x.AppID
	}
	return nil
}

func (x *Conds) GetInviterID() *npool.StringVal {
	if x != nil {
		return x.InviterID
	}
	return nil
}

func (x *Conds) GetInviteeID() *npool.StringVal {
	if x != nil {
		return x.InviteeID
	}
	return nil
}

type CreateRegistrationInvitationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *RegistrationInvitationReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateRegistrationInvitationRequest) Reset() {
	*x = CreateRegistrationInvitationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRegistrationInvitationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRegistrationInvitationRequest) ProtoMessage() {}

func (x *CreateRegistrationInvitationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRegistrationInvitationRequest.ProtoReflect.Descriptor instead.
func (*CreateRegistrationInvitationRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_rawDescGZIP(), []int{3}
}

func (x *CreateRegistrationInvitationRequest) GetInfo() *RegistrationInvitationReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateRegistrationInvitationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *RegistrationInvitation `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateRegistrationInvitationResponse) Reset() {
	*x = CreateRegistrationInvitationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRegistrationInvitationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRegistrationInvitationResponse) ProtoMessage() {}

func (x *CreateRegistrationInvitationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRegistrationInvitationResponse.ProtoReflect.Descriptor instead.
func (*CreateRegistrationInvitationResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_rawDescGZIP(), []int{4}
}

func (x *CreateRegistrationInvitationResponse) GetInfo() *RegistrationInvitation {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateRegistrationInvitationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*RegistrationInvitationReq `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateRegistrationInvitationsRequest) Reset() {
	*x = CreateRegistrationInvitationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRegistrationInvitationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRegistrationInvitationsRequest) ProtoMessage() {}

func (x *CreateRegistrationInvitationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRegistrationInvitationsRequest.ProtoReflect.Descriptor instead.
func (*CreateRegistrationInvitationsRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_rawDescGZIP(), []int{5}
}

func (x *CreateRegistrationInvitationsRequest) GetInfos() []*RegistrationInvitationReq {
	if x != nil {
		return x.Infos
	}
	return nil
}

type CreateRegistrationInvitationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*RegistrationInvitation `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateRegistrationInvitationsResponse) Reset() {
	*x = CreateRegistrationInvitationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRegistrationInvitationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRegistrationInvitationsResponse) ProtoMessage() {}

func (x *CreateRegistrationInvitationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRegistrationInvitationsResponse.ProtoReflect.Descriptor instead.
func (*CreateRegistrationInvitationsResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_rawDescGZIP(), []int{6}
}

func (x *CreateRegistrationInvitationsResponse) GetInfos() []*RegistrationInvitation {
	if x != nil {
		return x.Infos
	}
	return nil
}

type UpdateRegistrationInvitationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *RegistrationInvitationReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateRegistrationInvitationRequest) Reset() {
	*x = UpdateRegistrationInvitationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRegistrationInvitationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRegistrationInvitationRequest) ProtoMessage() {}

func (x *UpdateRegistrationInvitationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRegistrationInvitationRequest.ProtoReflect.Descriptor instead.
func (*UpdateRegistrationInvitationRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateRegistrationInvitationRequest) GetInfo() *RegistrationInvitationReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateRegistrationInvitationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *RegistrationInvitation `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateRegistrationInvitationResponse) Reset() {
	*x = UpdateRegistrationInvitationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRegistrationInvitationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRegistrationInvitationResponse) ProtoMessage() {}

func (x *UpdateRegistrationInvitationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRegistrationInvitationResponse.ProtoReflect.Descriptor instead.
func (*UpdateRegistrationInvitationResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateRegistrationInvitationResponse) GetInfo() *RegistrationInvitation {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetRegistrationInvitationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetRegistrationInvitationRequest) Reset() {
	*x = GetRegistrationInvitationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegistrationInvitationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegistrationInvitationRequest) ProtoMessage() {}

func (x *GetRegistrationInvitationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegistrationInvitationRequest.ProtoReflect.Descriptor instead.
func (*GetRegistrationInvitationRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_rawDescGZIP(), []int{9}
}

func (x *GetRegistrationInvitationRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetRegistrationInvitationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *RegistrationInvitation `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetRegistrationInvitationResponse) Reset() {
	*x = GetRegistrationInvitationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegistrationInvitationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegistrationInvitationResponse) ProtoMessage() {}

func (x *GetRegistrationInvitationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegistrationInvitationResponse.ProtoReflect.Descriptor instead.
func (*GetRegistrationInvitationResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_rawDescGZIP(), []int{10}
}

func (x *GetRegistrationInvitationResponse) GetInfo() *RegistrationInvitation {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetRegistrationInvitationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetRegistrationInvitationsRequest) Reset() {
	*x = GetRegistrationInvitationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegistrationInvitationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegistrationInvitationsRequest) ProtoMessage() {}

func (x *GetRegistrationInvitationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegistrationInvitationsRequest.ProtoReflect.Descriptor instead.
func (*GetRegistrationInvitationsRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_rawDescGZIP(), []int{11}
}

func (x *GetRegistrationInvitationsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetRegistrationInvitationsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetRegistrationInvitationsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetRegistrationInvitationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*RegistrationInvitation `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32                    `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetRegistrationInvitationsResponse) Reset() {
	*x = GetRegistrationInvitationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegistrationInvitationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegistrationInvitationsResponse) ProtoMessage() {}

func (x *GetRegistrationInvitationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegistrationInvitationsResponse.ProtoReflect.Descriptor instead.
func (*GetRegistrationInvitationsResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_rawDescGZIP(), []int{12}
}

func (x *GetRegistrationInvitationsResponse) GetInfos() []*RegistrationInvitation {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetRegistrationInvitationsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetRegistrationInvitationOnlyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *GetRegistrationInvitationOnlyRequest) Reset() {
	*x = GetRegistrationInvitationOnlyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegistrationInvitationOnlyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegistrationInvitationOnlyRequest) ProtoMessage() {}

func (x *GetRegistrationInvitationOnlyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegistrationInvitationOnlyRequest.ProtoReflect.Descriptor instead.
func (*GetRegistrationInvitationOnlyRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_rawDescGZIP(), []int{13}
}

func (x *GetRegistrationInvitationOnlyRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type GetRegistrationInvitationOnlyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *RegistrationInvitation `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetRegistrationInvitationOnlyResponse) Reset() {
	*x = GetRegistrationInvitationOnlyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRegistrationInvitationOnlyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRegistrationInvitationOnlyResponse) ProtoMessage() {}

func (x *GetRegistrationInvitationOnlyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRegistrationInvitationOnlyResponse.ProtoReflect.Descriptor instead.
func (*GetRegistrationInvitationOnlyResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_rawDescGZIP(), []int{14}
}

func (x *GetRegistrationInvitationOnlyResponse) GetInfo() *RegistrationInvitation {
	if x != nil {
		return x.Info
	}
	return nil
}

type ExistRegistrationInvitationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ExistRegistrationInvitationRequest) Reset() {
	*x = ExistRegistrationInvitationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistRegistrationInvitationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistRegistrationInvitationRequest) ProtoMessage() {}

func (x *ExistRegistrationInvitationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistRegistrationInvitationRequest.ProtoReflect.Descriptor instead.
func (*ExistRegistrationInvitationRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_rawDescGZIP(), []int{15}
}

func (x *ExistRegistrationInvitationRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ExistRegistrationInvitationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistRegistrationInvitationResponse) Reset() {
	*x = ExistRegistrationInvitationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistRegistrationInvitationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistRegistrationInvitationResponse) ProtoMessage() {}

func (x *ExistRegistrationInvitationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistRegistrationInvitationResponse.ProtoReflect.Descriptor instead.
func (*ExistRegistrationInvitationResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_rawDescGZIP(), []int{16}
}

func (x *ExistRegistrationInvitationResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type ExistRegistrationInvitationCondsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *ExistRegistrationInvitationCondsRequest) Reset() {
	*x = ExistRegistrationInvitationCondsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistRegistrationInvitationCondsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistRegistrationInvitationCondsRequest) ProtoMessage() {}

func (x *ExistRegistrationInvitationCondsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistRegistrationInvitationCondsRequest.ProtoReflect.Descriptor instead.
func (*ExistRegistrationInvitationCondsRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_rawDescGZIP(), []int{17}
}

func (x *ExistRegistrationInvitationCondsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type ExistRegistrationInvitationCondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistRegistrationInvitationCondsResponse) Reset() {
	*x = ExistRegistrationInvitationCondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistRegistrationInvitationCondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistRegistrationInvitationCondsResponse) ProtoMessage() {}

func (x *ExistRegistrationInvitationCondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistRegistrationInvitationCondsResponse.ProtoReflect.Descriptor instead.
func (*ExistRegistrationInvitationCondsResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_rawDescGZIP(), []int{18}
}

func (x *ExistRegistrationInvitationCondsResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type CountRegistrationInvitationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *CountRegistrationInvitationsRequest) Reset() {
	*x = CountRegistrationInvitationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountRegistrationInvitationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountRegistrationInvitationsRequest) ProtoMessage() {}

func (x *CountRegistrationInvitationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountRegistrationInvitationsRequest.ProtoReflect.Descriptor instead.
func (*CountRegistrationInvitationsRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_rawDescGZIP(), []int{19}
}

func (x *CountRegistrationInvitationsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type CountRegistrationInvitationsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info uint32 `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CountRegistrationInvitationsResponse) Reset() {
	*x = CountRegistrationInvitationsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountRegistrationInvitationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountRegistrationInvitationsResponse) ProtoMessage() {}

func (x *CountRegistrationInvitationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountRegistrationInvitationsResponse.ProtoReflect.Descriptor instead.
func (*CountRegistrationInvitationsResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_rawDescGZIP(), []int{20}
}

func (x *CountRegistrationInvitationsResponse) GetInfo() uint32 {
	if x != nil {
		return x.Info
	}
	return 0
}

type DeleteRegistrationInvitationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *RegistrationInvitation `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteRegistrationInvitationRequest) Reset() {
	*x = DeleteRegistrationInvitationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRegistrationInvitationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRegistrationInvitationRequest) ProtoMessage() {}

func (x *DeleteRegistrationInvitationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRegistrationInvitationRequest.ProtoReflect.Descriptor instead.
func (*DeleteRegistrationInvitationRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteRegistrationInvitationRequest) GetInfo() *RegistrationInvitation {
	if x != nil {
		return x.Info
	}
	return nil
}

type DeleteRegistrationInvitationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *RegistrationInvitation `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteRegistrationInvitationResponse) Reset() {
	*x = DeleteRegistrationInvitationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRegistrationInvitationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRegistrationInvitationResponse) ProtoMessage() {}

func (x *DeleteRegistrationInvitationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRegistrationInvitationResponse.ProtoReflect.Descriptor instead.
func (*DeleteRegistrationInvitationResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteRegistrationInvitationResponse) GetInfo() *RegistrationInvitation {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto protoreflect.FileDescriptor

var file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_rawDesc = []byte{
	0x0a, 0x5b, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f,
	0x6d, 0x67, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x34, 0x69,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x1a, 0x11, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbe, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x65, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49,
	0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x41, 0x70, 0x70, 0x49, 0x44, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x49, 0x44, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x65, 0x49, 0x44, 0x22, 0xb6, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x65, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x22, 0xfe, 0x01, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x02, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x09, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x02, 0x52, 0x09,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x09,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x09, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x72, 0x49, 0x44, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x65, 0x49,
	0x44, 0x22, 0x8a, 0x01, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x63, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x88,
	0x01, 0x0a, 0x24, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x8d, 0x01, 0x0a, 0x24, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x65, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x4f, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x25, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x23, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x63, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x88, 0x01, 0x0a, 0x24, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x69, 0x6e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x32, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x44, 0x22, 0x85, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xa4, 0x01, 0x0a, 0x21,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x51, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0x9e, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x05, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x22, 0x79, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x05, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x89,
	0x01, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x6c, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x34, 0x0a, 0x22, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x22, 0x39, 0x0a, 0x23, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x7c, 0x0a, 0x27, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x3e, 0x0a, 0x28, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x78, 0x0a, 0x23, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x51, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x22, 0x3a, 0x0a, 0x24, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x87, 0x01, 0x0a, 0x23, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x88, 0x01, 0x0a, 0x24, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x60, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x4c, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x32, 0x8d, 0x11, 0x0a, 0x07, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x12, 0xd7, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x59, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x5a, 0x2e, 0x69,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xda, 0x01, 0x0a, 0x1d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5a, 0x2e, 0x69,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x5b, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xd7, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x5a, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0xce, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x56, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x57, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0xda, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x5a, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x5b, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0xd1, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x57,
	0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x58, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0xd4, 0x01, 0x0a, 0x1b, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x58, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x59, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xe3, 0x01, 0x0a, 0x20, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x5d, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x5e,
	0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0xd7, 0x01, 0x0a, 0x1c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x59, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x5a, 0x2e, 0x69,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x69,
	0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xd7, 0x01, 0x0a, 0x1c, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x2e, 0x69, 0x6e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x5a, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x59, 0x5a, 0x57, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x69,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f, 0x6d, 0x67, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_rawDescOnce sync.Once
	file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_rawDescData = file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_rawDesc
)

func file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_rawDescGZIP() []byte {
	file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_rawDescOnce.Do(func() {
		file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_rawDescData)
	})
	return file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_rawDescData
}

var file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_goTypes = []interface{}{
	(*RegistrationInvitationReq)(nil),                // 0: inspire.manager.invitation.registrationinvitation.v1.RegistrationInvitationReq
	(*RegistrationInvitation)(nil),                   // 1: inspire.manager.invitation.registrationinvitation.v1.RegistrationInvitation
	(*Conds)(nil),                                    // 2: inspire.manager.invitation.registrationinvitation.v1.Conds
	(*CreateRegistrationInvitationRequest)(nil),      // 3: inspire.manager.invitation.registrationinvitation.v1.CreateRegistrationInvitationRequest
	(*CreateRegistrationInvitationResponse)(nil),     // 4: inspire.manager.invitation.registrationinvitation.v1.CreateRegistrationInvitationResponse
	(*CreateRegistrationInvitationsRequest)(nil),     // 5: inspire.manager.invitation.registrationinvitation.v1.CreateRegistrationInvitationsRequest
	(*CreateRegistrationInvitationsResponse)(nil),    // 6: inspire.manager.invitation.registrationinvitation.v1.CreateRegistrationInvitationsResponse
	(*UpdateRegistrationInvitationRequest)(nil),      // 7: inspire.manager.invitation.registrationinvitation.v1.UpdateRegistrationInvitationRequest
	(*UpdateRegistrationInvitationResponse)(nil),     // 8: inspire.manager.invitation.registrationinvitation.v1.UpdateRegistrationInvitationResponse
	(*GetRegistrationInvitationRequest)(nil),         // 9: inspire.manager.invitation.registrationinvitation.v1.GetRegistrationInvitationRequest
	(*GetRegistrationInvitationResponse)(nil),        // 10: inspire.manager.invitation.registrationinvitation.v1.GetRegistrationInvitationResponse
	(*GetRegistrationInvitationsRequest)(nil),        // 11: inspire.manager.invitation.registrationinvitation.v1.GetRegistrationInvitationsRequest
	(*GetRegistrationInvitationsResponse)(nil),       // 12: inspire.manager.invitation.registrationinvitation.v1.GetRegistrationInvitationsResponse
	(*GetRegistrationInvitationOnlyRequest)(nil),     // 13: inspire.manager.invitation.registrationinvitation.v1.GetRegistrationInvitationOnlyRequest
	(*GetRegistrationInvitationOnlyResponse)(nil),    // 14: inspire.manager.invitation.registrationinvitation.v1.GetRegistrationInvitationOnlyResponse
	(*ExistRegistrationInvitationRequest)(nil),       // 15: inspire.manager.invitation.registrationinvitation.v1.ExistRegistrationInvitationRequest
	(*ExistRegistrationInvitationResponse)(nil),      // 16: inspire.manager.invitation.registrationinvitation.v1.ExistRegistrationInvitationResponse
	(*ExistRegistrationInvitationCondsRequest)(nil),  // 17: inspire.manager.invitation.registrationinvitation.v1.ExistRegistrationInvitationCondsRequest
	(*ExistRegistrationInvitationCondsResponse)(nil), // 18: inspire.manager.invitation.registrationinvitation.v1.ExistRegistrationInvitationCondsResponse
	(*CountRegistrationInvitationsRequest)(nil),      // 19: inspire.manager.invitation.registrationinvitation.v1.CountRegistrationInvitationsRequest
	(*CountRegistrationInvitationsResponse)(nil),     // 20: inspire.manager.invitation.registrationinvitation.v1.CountRegistrationInvitationsResponse
	(*DeleteRegistrationInvitationRequest)(nil),      // 21: inspire.manager.invitation.registrationinvitation.v1.DeleteRegistrationInvitationRequest
	(*DeleteRegistrationInvitationResponse)(nil),     // 22: inspire.manager.invitation.registrationinvitation.v1.DeleteRegistrationInvitationResponse
	(*npool.StringVal)(nil),                          // 23: npool.v1.StringVal
}
var file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_depIdxs = []int32{
	23, // 0: inspire.manager.invitation.registrationinvitation.v1.Conds.ID:type_name -> npool.v1.StringVal
	23, // 1: inspire.manager.invitation.registrationinvitation.v1.Conds.AppID:type_name -> npool.v1.StringVal
	23, // 2: inspire.manager.invitation.registrationinvitation.v1.Conds.InviterID:type_name -> npool.v1.StringVal
	23, // 3: inspire.manager.invitation.registrationinvitation.v1.Conds.InviteeID:type_name -> npool.v1.StringVal
	0,  // 4: inspire.manager.invitation.registrationinvitation.v1.CreateRegistrationInvitationRequest.Info:type_name -> inspire.manager.invitation.registrationinvitation.v1.RegistrationInvitationReq
	1,  // 5: inspire.manager.invitation.registrationinvitation.v1.CreateRegistrationInvitationResponse.Info:type_name -> inspire.manager.invitation.registrationinvitation.v1.RegistrationInvitation
	0,  // 6: inspire.manager.invitation.registrationinvitation.v1.CreateRegistrationInvitationsRequest.Infos:type_name -> inspire.manager.invitation.registrationinvitation.v1.RegistrationInvitationReq
	1,  // 7: inspire.manager.invitation.registrationinvitation.v1.CreateRegistrationInvitationsResponse.Infos:type_name -> inspire.manager.invitation.registrationinvitation.v1.RegistrationInvitation
	0,  // 8: inspire.manager.invitation.registrationinvitation.v1.UpdateRegistrationInvitationRequest.Info:type_name -> inspire.manager.invitation.registrationinvitation.v1.RegistrationInvitationReq
	1,  // 9: inspire.manager.invitation.registrationinvitation.v1.UpdateRegistrationInvitationResponse.Info:type_name -> inspire.manager.invitation.registrationinvitation.v1.RegistrationInvitation
	1,  // 10: inspire.manager.invitation.registrationinvitation.v1.GetRegistrationInvitationResponse.Info:type_name -> inspire.manager.invitation.registrationinvitation.v1.RegistrationInvitation
	2,  // 11: inspire.manager.invitation.registrationinvitation.v1.GetRegistrationInvitationsRequest.Conds:type_name -> inspire.manager.invitation.registrationinvitation.v1.Conds
	1,  // 12: inspire.manager.invitation.registrationinvitation.v1.GetRegistrationInvitationsResponse.Infos:type_name -> inspire.manager.invitation.registrationinvitation.v1.RegistrationInvitation
	2,  // 13: inspire.manager.invitation.registrationinvitation.v1.GetRegistrationInvitationOnlyRequest.Conds:type_name -> inspire.manager.invitation.registrationinvitation.v1.Conds
	1,  // 14: inspire.manager.invitation.registrationinvitation.v1.GetRegistrationInvitationOnlyResponse.Info:type_name -> inspire.manager.invitation.registrationinvitation.v1.RegistrationInvitation
	2,  // 15: inspire.manager.invitation.registrationinvitation.v1.ExistRegistrationInvitationCondsRequest.Conds:type_name -> inspire.manager.invitation.registrationinvitation.v1.Conds
	2,  // 16: inspire.manager.invitation.registrationinvitation.v1.CountRegistrationInvitationsRequest.Conds:type_name -> inspire.manager.invitation.registrationinvitation.v1.Conds
	1,  // 17: inspire.manager.invitation.registrationinvitation.v1.DeleteRegistrationInvitationRequest.Info:type_name -> inspire.manager.invitation.registrationinvitation.v1.RegistrationInvitation
	1,  // 18: inspire.manager.invitation.registrationinvitation.v1.DeleteRegistrationInvitationResponse.Info:type_name -> inspire.manager.invitation.registrationinvitation.v1.RegistrationInvitation
	3,  // 19: inspire.manager.invitation.registrationinvitation.v1.Manager.CreateRegistrationInvitation:input_type -> inspire.manager.invitation.registrationinvitation.v1.CreateRegistrationInvitationRequest
	5,  // 20: inspire.manager.invitation.registrationinvitation.v1.Manager.CreateRegistrationInvitations:input_type -> inspire.manager.invitation.registrationinvitation.v1.CreateRegistrationInvitationsRequest
	7,  // 21: inspire.manager.invitation.registrationinvitation.v1.Manager.UpdateRegistrationInvitation:input_type -> inspire.manager.invitation.registrationinvitation.v1.UpdateRegistrationInvitationRequest
	9,  // 22: inspire.manager.invitation.registrationinvitation.v1.Manager.GetRegistrationInvitation:input_type -> inspire.manager.invitation.registrationinvitation.v1.GetRegistrationInvitationRequest
	13, // 23: inspire.manager.invitation.registrationinvitation.v1.Manager.GetRegistrationInvitationOnly:input_type -> inspire.manager.invitation.registrationinvitation.v1.GetRegistrationInvitationOnlyRequest
	11, // 24: inspire.manager.invitation.registrationinvitation.v1.Manager.GetRegistrationInvitations:input_type -> inspire.manager.invitation.registrationinvitation.v1.GetRegistrationInvitationsRequest
	15, // 25: inspire.manager.invitation.registrationinvitation.v1.Manager.ExistRegistrationInvitation:input_type -> inspire.manager.invitation.registrationinvitation.v1.ExistRegistrationInvitationRequest
	17, // 26: inspire.manager.invitation.registrationinvitation.v1.Manager.ExistRegistrationInvitationConds:input_type -> inspire.manager.invitation.registrationinvitation.v1.ExistRegistrationInvitationCondsRequest
	19, // 27: inspire.manager.invitation.registrationinvitation.v1.Manager.CountRegistrationInvitations:input_type -> inspire.manager.invitation.registrationinvitation.v1.CountRegistrationInvitationsRequest
	21, // 28: inspire.manager.invitation.registrationinvitation.v1.Manager.DeleteRegistrationInvitation:input_type -> inspire.manager.invitation.registrationinvitation.v1.DeleteRegistrationInvitationRequest
	4,  // 29: inspire.manager.invitation.registrationinvitation.v1.Manager.CreateRegistrationInvitation:output_type -> inspire.manager.invitation.registrationinvitation.v1.CreateRegistrationInvitationResponse
	6,  // 30: inspire.manager.invitation.registrationinvitation.v1.Manager.CreateRegistrationInvitations:output_type -> inspire.manager.invitation.registrationinvitation.v1.CreateRegistrationInvitationsResponse
	8,  // 31: inspire.manager.invitation.registrationinvitation.v1.Manager.UpdateRegistrationInvitation:output_type -> inspire.manager.invitation.registrationinvitation.v1.UpdateRegistrationInvitationResponse
	10, // 32: inspire.manager.invitation.registrationinvitation.v1.Manager.GetRegistrationInvitation:output_type -> inspire.manager.invitation.registrationinvitation.v1.GetRegistrationInvitationResponse
	14, // 33: inspire.manager.invitation.registrationinvitation.v1.Manager.GetRegistrationInvitationOnly:output_type -> inspire.manager.invitation.registrationinvitation.v1.GetRegistrationInvitationOnlyResponse
	12, // 34: inspire.manager.invitation.registrationinvitation.v1.Manager.GetRegistrationInvitations:output_type -> inspire.manager.invitation.registrationinvitation.v1.GetRegistrationInvitationsResponse
	16, // 35: inspire.manager.invitation.registrationinvitation.v1.Manager.ExistRegistrationInvitation:output_type -> inspire.manager.invitation.registrationinvitation.v1.ExistRegistrationInvitationResponse
	18, // 36: inspire.manager.invitation.registrationinvitation.v1.Manager.ExistRegistrationInvitationConds:output_type -> inspire.manager.invitation.registrationinvitation.v1.ExistRegistrationInvitationCondsResponse
	20, // 37: inspire.manager.invitation.registrationinvitation.v1.Manager.CountRegistrationInvitations:output_type -> inspire.manager.invitation.registrationinvitation.v1.CountRegistrationInvitationsResponse
	22, // 38: inspire.manager.invitation.registrationinvitation.v1.Manager.DeleteRegistrationInvitation:output_type -> inspire.manager.invitation.registrationinvitation.v1.DeleteRegistrationInvitationResponse
	29, // [29:39] is the sub-list for method output_type
	19, // [19:29] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() {
	file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_init()
}
func file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_init() {
	if File_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistrationInvitationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegistrationInvitation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRegistrationInvitationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRegistrationInvitationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRegistrationInvitationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRegistrationInvitationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRegistrationInvitationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRegistrationInvitationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegistrationInvitationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegistrationInvitationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegistrationInvitationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegistrationInvitationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegistrationInvitationOnlyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRegistrationInvitationOnlyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistRegistrationInvitationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistRegistrationInvitationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistRegistrationInvitationCondsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistRegistrationInvitationCondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountRegistrationInvitationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountRegistrationInvitationsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRegistrationInvitationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRegistrationInvitationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_goTypes,
		DependencyIndexes: file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_depIdxs,
		MessageInfos:      file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_msgTypes,
	}.Build()
	File_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto = out.File
	file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_rawDesc = nil
	file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_goTypes = nil
	file_npool_inspire_mgr_v1_inspire_invitation_registrationinvitation_registrationinvitation_proto_depIdxs = nil
}
