// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/inspire/mgr/v1/inspire/invitation/userinvitationcode/userinvitioncode.proto

package userinvitationcode

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateUserInvitationCode(ctx context.Context, in *CreateUserInvitationCodeRequest, opts ...grpc.CallOption) (*CreateUserInvitationCodeResponse, error)
	CreateUserInvitationCodes(ctx context.Context, in *CreateUserInvitationCodesRequest, opts ...grpc.CallOption) (*CreateUserInvitationCodesResponse, error)
	UpdateUserInvitationCode(ctx context.Context, in *UpdateUserInvitationCodeRequest, opts ...grpc.CallOption) (*UpdateUserInvitationCodeResponse, error)
	GetUserInvitationCode(ctx context.Context, in *GetUserInvitationCodeRequest, opts ...grpc.CallOption) (*GetUserInvitationCodeResponse, error)
	GetUserInvitationCodeOnly(ctx context.Context, in *GetUserInvitationCodeOnlyRequest, opts ...grpc.CallOption) (*GetUserInvitationCodeOnlyResponse, error)
	GetUserInvitationCodes(ctx context.Context, in *GetUserInvitationCodesRequest, opts ...grpc.CallOption) (*GetUserInvitationCodesResponse, error)
	ExistUserInvitationCode(ctx context.Context, in *ExistUserInvitationCodeRequest, opts ...grpc.CallOption) (*ExistUserInvitationCodeResponse, error)
	ExistUserInvitationCodeConds(ctx context.Context, in *ExistUserInvitationCodeCondsRequest, opts ...grpc.CallOption) (*ExistUserInvitationCodeCondsResponse, error)
	CountUserInvitationCodes(ctx context.Context, in *CountUserInvitationCodesRequest, opts ...grpc.CallOption) (*CountUserInvitationCodesResponse, error)
	DeleteUserInvitationCode(ctx context.Context, in *DeleteUserInvitationCodeRequest, opts ...grpc.CallOption) (*DeleteUserInvitationCodeResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateUserInvitationCode(ctx context.Context, in *CreateUserInvitationCodeRequest, opts ...grpc.CallOption) (*CreateUserInvitationCodeResponse, error) {
	out := new(CreateUserInvitationCodeResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.invitation.userinvitationcode.v1.Manager/CreateUserInvitationCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateUserInvitationCodes(ctx context.Context, in *CreateUserInvitationCodesRequest, opts ...grpc.CallOption) (*CreateUserInvitationCodesResponse, error) {
	out := new(CreateUserInvitationCodesResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.invitation.userinvitationcode.v1.Manager/CreateUserInvitationCodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateUserInvitationCode(ctx context.Context, in *UpdateUserInvitationCodeRequest, opts ...grpc.CallOption) (*UpdateUserInvitationCodeResponse, error) {
	out := new(UpdateUserInvitationCodeResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.invitation.userinvitationcode.v1.Manager/UpdateUserInvitationCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetUserInvitationCode(ctx context.Context, in *GetUserInvitationCodeRequest, opts ...grpc.CallOption) (*GetUserInvitationCodeResponse, error) {
	out := new(GetUserInvitationCodeResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.invitation.userinvitationcode.v1.Manager/GetUserInvitationCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetUserInvitationCodeOnly(ctx context.Context, in *GetUserInvitationCodeOnlyRequest, opts ...grpc.CallOption) (*GetUserInvitationCodeOnlyResponse, error) {
	out := new(GetUserInvitationCodeOnlyResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.invitation.userinvitationcode.v1.Manager/GetUserInvitationCodeOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetUserInvitationCodes(ctx context.Context, in *GetUserInvitationCodesRequest, opts ...grpc.CallOption) (*GetUserInvitationCodesResponse, error) {
	out := new(GetUserInvitationCodesResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.invitation.userinvitationcode.v1.Manager/GetUserInvitationCodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistUserInvitationCode(ctx context.Context, in *ExistUserInvitationCodeRequest, opts ...grpc.CallOption) (*ExistUserInvitationCodeResponse, error) {
	out := new(ExistUserInvitationCodeResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.invitation.userinvitationcode.v1.Manager/ExistUserInvitationCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistUserInvitationCodeConds(ctx context.Context, in *ExistUserInvitationCodeCondsRequest, opts ...grpc.CallOption) (*ExistUserInvitationCodeCondsResponse, error) {
	out := new(ExistUserInvitationCodeCondsResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.invitation.userinvitationcode.v1.Manager/ExistUserInvitationCodeConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountUserInvitationCodes(ctx context.Context, in *CountUserInvitationCodesRequest, opts ...grpc.CallOption) (*CountUserInvitationCodesResponse, error) {
	out := new(CountUserInvitationCodesResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.invitation.userinvitationcode.v1.Manager/CountUserInvitationCodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteUserInvitationCode(ctx context.Context, in *DeleteUserInvitationCodeRequest, opts ...grpc.CallOption) (*DeleteUserInvitationCodeResponse, error) {
	out := new(DeleteUserInvitationCodeResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.invitation.userinvitationcode.v1.Manager/DeleteUserInvitationCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateUserInvitationCode(context.Context, *CreateUserInvitationCodeRequest) (*CreateUserInvitationCodeResponse, error)
	CreateUserInvitationCodes(context.Context, *CreateUserInvitationCodesRequest) (*CreateUserInvitationCodesResponse, error)
	UpdateUserInvitationCode(context.Context, *UpdateUserInvitationCodeRequest) (*UpdateUserInvitationCodeResponse, error)
	GetUserInvitationCode(context.Context, *GetUserInvitationCodeRequest) (*GetUserInvitationCodeResponse, error)
	GetUserInvitationCodeOnly(context.Context, *GetUserInvitationCodeOnlyRequest) (*GetUserInvitationCodeOnlyResponse, error)
	GetUserInvitationCodes(context.Context, *GetUserInvitationCodesRequest) (*GetUserInvitationCodesResponse, error)
	ExistUserInvitationCode(context.Context, *ExistUserInvitationCodeRequest) (*ExistUserInvitationCodeResponse, error)
	ExistUserInvitationCodeConds(context.Context, *ExistUserInvitationCodeCondsRequest) (*ExistUserInvitationCodeCondsResponse, error)
	CountUserInvitationCodes(context.Context, *CountUserInvitationCodesRequest) (*CountUserInvitationCodesResponse, error)
	DeleteUserInvitationCode(context.Context, *DeleteUserInvitationCodeRequest) (*DeleteUserInvitationCodeResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateUserInvitationCode(context.Context, *CreateUserInvitationCodeRequest) (*CreateUserInvitationCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserInvitationCode not implemented")
}
func (UnimplementedManagerServer) CreateUserInvitationCodes(context.Context, *CreateUserInvitationCodesRequest) (*CreateUserInvitationCodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserInvitationCodes not implemented")
}
func (UnimplementedManagerServer) UpdateUserInvitationCode(context.Context, *UpdateUserInvitationCodeRequest) (*UpdateUserInvitationCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserInvitationCode not implemented")
}
func (UnimplementedManagerServer) GetUserInvitationCode(context.Context, *GetUserInvitationCodeRequest) (*GetUserInvitationCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInvitationCode not implemented")
}
func (UnimplementedManagerServer) GetUserInvitationCodeOnly(context.Context, *GetUserInvitationCodeOnlyRequest) (*GetUserInvitationCodeOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInvitationCodeOnly not implemented")
}
func (UnimplementedManagerServer) GetUserInvitationCodes(context.Context, *GetUserInvitationCodesRequest) (*GetUserInvitationCodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInvitationCodes not implemented")
}
func (UnimplementedManagerServer) ExistUserInvitationCode(context.Context, *ExistUserInvitationCodeRequest) (*ExistUserInvitationCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistUserInvitationCode not implemented")
}
func (UnimplementedManagerServer) ExistUserInvitationCodeConds(context.Context, *ExistUserInvitationCodeCondsRequest) (*ExistUserInvitationCodeCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistUserInvitationCodeConds not implemented")
}
func (UnimplementedManagerServer) CountUserInvitationCodes(context.Context, *CountUserInvitationCodesRequest) (*CountUserInvitationCodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountUserInvitationCodes not implemented")
}
func (UnimplementedManagerServer) DeleteUserInvitationCode(context.Context, *DeleteUserInvitationCodeRequest) (*DeleteUserInvitationCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserInvitationCode not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateUserInvitationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserInvitationCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateUserInvitationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.invitation.userinvitationcode.v1.Manager/CreateUserInvitationCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateUserInvitationCode(ctx, req.(*CreateUserInvitationCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateUserInvitationCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserInvitationCodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateUserInvitationCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.invitation.userinvitationcode.v1.Manager/CreateUserInvitationCodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateUserInvitationCodes(ctx, req.(*CreateUserInvitationCodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateUserInvitationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserInvitationCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateUserInvitationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.invitation.userinvitationcode.v1.Manager/UpdateUserInvitationCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateUserInvitationCode(ctx, req.(*UpdateUserInvitationCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetUserInvitationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInvitationCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetUserInvitationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.invitation.userinvitationcode.v1.Manager/GetUserInvitationCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetUserInvitationCode(ctx, req.(*GetUserInvitationCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetUserInvitationCodeOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInvitationCodeOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetUserInvitationCodeOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.invitation.userinvitationcode.v1.Manager/GetUserInvitationCodeOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetUserInvitationCodeOnly(ctx, req.(*GetUserInvitationCodeOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetUserInvitationCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInvitationCodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetUserInvitationCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.invitation.userinvitationcode.v1.Manager/GetUserInvitationCodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetUserInvitationCodes(ctx, req.(*GetUserInvitationCodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistUserInvitationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistUserInvitationCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistUserInvitationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.invitation.userinvitationcode.v1.Manager/ExistUserInvitationCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistUserInvitationCode(ctx, req.(*ExistUserInvitationCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistUserInvitationCodeConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistUserInvitationCodeCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistUserInvitationCodeConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.invitation.userinvitationcode.v1.Manager/ExistUserInvitationCodeConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistUserInvitationCodeConds(ctx, req.(*ExistUserInvitationCodeCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountUserInvitationCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountUserInvitationCodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountUserInvitationCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.invitation.userinvitationcode.v1.Manager/CountUserInvitationCodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountUserInvitationCodes(ctx, req.(*CountUserInvitationCodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteUserInvitationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserInvitationCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteUserInvitationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.invitation.userinvitationcode.v1.Manager/DeleteUserInvitationCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteUserInvitationCode(ctx, req.(*DeleteUserInvitationCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inspire.manager.invitation.userinvitationcode.v1.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserInvitationCode",
			Handler:    _Manager_CreateUserInvitationCode_Handler,
		},
		{
			MethodName: "CreateUserInvitationCodes",
			Handler:    _Manager_CreateUserInvitationCodes_Handler,
		},
		{
			MethodName: "UpdateUserInvitationCode",
			Handler:    _Manager_UpdateUserInvitationCode_Handler,
		},
		{
			MethodName: "GetUserInvitationCode",
			Handler:    _Manager_GetUserInvitationCode_Handler,
		},
		{
			MethodName: "GetUserInvitationCodeOnly",
			Handler:    _Manager_GetUserInvitationCodeOnly_Handler,
		},
		{
			MethodName: "GetUserInvitationCodes",
			Handler:    _Manager_GetUserInvitationCodes_Handler,
		},
		{
			MethodName: "ExistUserInvitationCode",
			Handler:    _Manager_ExistUserInvitationCode_Handler,
		},
		{
			MethodName: "ExistUserInvitationCodeConds",
			Handler:    _Manager_ExistUserInvitationCodeConds_Handler,
		},
		{
			MethodName: "CountUserInvitationCodes",
			Handler:    _Manager_CountUserInvitationCodes_Handler,
		},
		{
			MethodName: "DeleteUserInvitationCode",
			Handler:    _Manager_DeleteUserInvitationCode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/inspire/mgr/v1/inspire/invitation/userinvitationcode/userinvitioncode.proto",
}
