// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/inspire/mgr/v1/inspire/purchaseamountsetting/purchaseamountsetting.proto

package purchaseamountsetting

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreatePurchaseAmountSetting(ctx context.Context, in *CreatePurchaseAmountSettingRequest, opts ...grpc.CallOption) (*CreatePurchaseAmountSettingResponse, error)
	CreatePurchaseAmountSettings(ctx context.Context, in *CreatePurchaseAmountSettingsRequest, opts ...grpc.CallOption) (*CreatePurchaseAmountSettingsResponse, error)
	UpdatePurchaseAmountSetting(ctx context.Context, in *UpdatePurchaseAmountSettingRequest, opts ...grpc.CallOption) (*UpdatePurchaseAmountSettingResponse, error)
	GetPurchaseAmountSetting(ctx context.Context, in *GetPurchaseAmountSettingRequest, opts ...grpc.CallOption) (*GetPurchaseAmountSettingResponse, error)
	GetPurchaseAmountSettingOnly(ctx context.Context, in *GetPurchaseAmountSettingOnlyRequest, opts ...grpc.CallOption) (*GetPurchaseAmountSettingOnlyResponse, error)
	GetPurchaseAmountSettings(ctx context.Context, in *GetPurchaseAmountSettingsRequest, opts ...grpc.CallOption) (*GetPurchaseAmountSettingsResponse, error)
	ExistPurchaseAmountSetting(ctx context.Context, in *ExistPurchaseAmountSettingRequest, opts ...grpc.CallOption) (*ExistPurchaseAmountSettingResponse, error)
	ExistPurchaseAmountSettingConds(ctx context.Context, in *ExistPurchaseAmountSettingCondsRequest, opts ...grpc.CallOption) (*ExistPurchaseAmountSettingCondsResponse, error)
	CountPurchaseAmountSettings(ctx context.Context, in *CountPurchaseAmountSettingsRequest, opts ...grpc.CallOption) (*CountPurchaseAmountSettingsResponse, error)
	DeletePurchaseAmountSetting(ctx context.Context, in *DeletePurchaseAmountSettingRequest, opts ...grpc.CallOption) (*DeletePurchaseAmountSettingResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreatePurchaseAmountSetting(ctx context.Context, in *CreatePurchaseAmountSettingRequest, opts ...grpc.CallOption) (*CreatePurchaseAmountSettingResponse, error) {
	out := new(CreatePurchaseAmountSettingResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.inspire.purchaseamountsetting.v1.Manager/CreatePurchaseAmountSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreatePurchaseAmountSettings(ctx context.Context, in *CreatePurchaseAmountSettingsRequest, opts ...grpc.CallOption) (*CreatePurchaseAmountSettingsResponse, error) {
	out := new(CreatePurchaseAmountSettingsResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.inspire.purchaseamountsetting.v1.Manager/CreatePurchaseAmountSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdatePurchaseAmountSetting(ctx context.Context, in *UpdatePurchaseAmountSettingRequest, opts ...grpc.CallOption) (*UpdatePurchaseAmountSettingResponse, error) {
	out := new(UpdatePurchaseAmountSettingResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.inspire.purchaseamountsetting.v1.Manager/UpdatePurchaseAmountSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetPurchaseAmountSetting(ctx context.Context, in *GetPurchaseAmountSettingRequest, opts ...grpc.CallOption) (*GetPurchaseAmountSettingResponse, error) {
	out := new(GetPurchaseAmountSettingResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.inspire.purchaseamountsetting.v1.Manager/GetPurchaseAmountSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetPurchaseAmountSettingOnly(ctx context.Context, in *GetPurchaseAmountSettingOnlyRequest, opts ...grpc.CallOption) (*GetPurchaseAmountSettingOnlyResponse, error) {
	out := new(GetPurchaseAmountSettingOnlyResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.inspire.purchaseamountsetting.v1.Manager/GetPurchaseAmountSettingOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetPurchaseAmountSettings(ctx context.Context, in *GetPurchaseAmountSettingsRequest, opts ...grpc.CallOption) (*GetPurchaseAmountSettingsResponse, error) {
	out := new(GetPurchaseAmountSettingsResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.inspire.purchaseamountsetting.v1.Manager/GetPurchaseAmountSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistPurchaseAmountSetting(ctx context.Context, in *ExistPurchaseAmountSettingRequest, opts ...grpc.CallOption) (*ExistPurchaseAmountSettingResponse, error) {
	out := new(ExistPurchaseAmountSettingResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.inspire.purchaseamountsetting.v1.Manager/ExistPurchaseAmountSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistPurchaseAmountSettingConds(ctx context.Context, in *ExistPurchaseAmountSettingCondsRequest, opts ...grpc.CallOption) (*ExistPurchaseAmountSettingCondsResponse, error) {
	out := new(ExistPurchaseAmountSettingCondsResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.inspire.purchaseamountsetting.v1.Manager/ExistPurchaseAmountSettingConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountPurchaseAmountSettings(ctx context.Context, in *CountPurchaseAmountSettingsRequest, opts ...grpc.CallOption) (*CountPurchaseAmountSettingsResponse, error) {
	out := new(CountPurchaseAmountSettingsResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.inspire.purchaseamountsetting.v1.Manager/CountPurchaseAmountSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeletePurchaseAmountSetting(ctx context.Context, in *DeletePurchaseAmountSettingRequest, opts ...grpc.CallOption) (*DeletePurchaseAmountSettingResponse, error) {
	out := new(DeletePurchaseAmountSettingResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.inspire.purchaseamountsetting.v1.Manager/DeletePurchaseAmountSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreatePurchaseAmountSetting(context.Context, *CreatePurchaseAmountSettingRequest) (*CreatePurchaseAmountSettingResponse, error)
	CreatePurchaseAmountSettings(context.Context, *CreatePurchaseAmountSettingsRequest) (*CreatePurchaseAmountSettingsResponse, error)
	UpdatePurchaseAmountSetting(context.Context, *UpdatePurchaseAmountSettingRequest) (*UpdatePurchaseAmountSettingResponse, error)
	GetPurchaseAmountSetting(context.Context, *GetPurchaseAmountSettingRequest) (*GetPurchaseAmountSettingResponse, error)
	GetPurchaseAmountSettingOnly(context.Context, *GetPurchaseAmountSettingOnlyRequest) (*GetPurchaseAmountSettingOnlyResponse, error)
	GetPurchaseAmountSettings(context.Context, *GetPurchaseAmountSettingsRequest) (*GetPurchaseAmountSettingsResponse, error)
	ExistPurchaseAmountSetting(context.Context, *ExistPurchaseAmountSettingRequest) (*ExistPurchaseAmountSettingResponse, error)
	ExistPurchaseAmountSettingConds(context.Context, *ExistPurchaseAmountSettingCondsRequest) (*ExistPurchaseAmountSettingCondsResponse, error)
	CountPurchaseAmountSettings(context.Context, *CountPurchaseAmountSettingsRequest) (*CountPurchaseAmountSettingsResponse, error)
	DeletePurchaseAmountSetting(context.Context, *DeletePurchaseAmountSettingRequest) (*DeletePurchaseAmountSettingResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreatePurchaseAmountSetting(context.Context, *CreatePurchaseAmountSettingRequest) (*CreatePurchaseAmountSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePurchaseAmountSetting not implemented")
}
func (UnimplementedManagerServer) CreatePurchaseAmountSettings(context.Context, *CreatePurchaseAmountSettingsRequest) (*CreatePurchaseAmountSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePurchaseAmountSettings not implemented")
}
func (UnimplementedManagerServer) UpdatePurchaseAmountSetting(context.Context, *UpdatePurchaseAmountSettingRequest) (*UpdatePurchaseAmountSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePurchaseAmountSetting not implemented")
}
func (UnimplementedManagerServer) GetPurchaseAmountSetting(context.Context, *GetPurchaseAmountSettingRequest) (*GetPurchaseAmountSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPurchaseAmountSetting not implemented")
}
func (UnimplementedManagerServer) GetPurchaseAmountSettingOnly(context.Context, *GetPurchaseAmountSettingOnlyRequest) (*GetPurchaseAmountSettingOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPurchaseAmountSettingOnly not implemented")
}
func (UnimplementedManagerServer) GetPurchaseAmountSettings(context.Context, *GetPurchaseAmountSettingsRequest) (*GetPurchaseAmountSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPurchaseAmountSettings not implemented")
}
func (UnimplementedManagerServer) ExistPurchaseAmountSetting(context.Context, *ExistPurchaseAmountSettingRequest) (*ExistPurchaseAmountSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistPurchaseAmountSetting not implemented")
}
func (UnimplementedManagerServer) ExistPurchaseAmountSettingConds(context.Context, *ExistPurchaseAmountSettingCondsRequest) (*ExistPurchaseAmountSettingCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistPurchaseAmountSettingConds not implemented")
}
func (UnimplementedManagerServer) CountPurchaseAmountSettings(context.Context, *CountPurchaseAmountSettingsRequest) (*CountPurchaseAmountSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountPurchaseAmountSettings not implemented")
}
func (UnimplementedManagerServer) DeletePurchaseAmountSetting(context.Context, *DeletePurchaseAmountSettingRequest) (*DeletePurchaseAmountSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePurchaseAmountSetting not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreatePurchaseAmountSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePurchaseAmountSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreatePurchaseAmountSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.inspire.purchaseamountsetting.v1.Manager/CreatePurchaseAmountSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreatePurchaseAmountSetting(ctx, req.(*CreatePurchaseAmountSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreatePurchaseAmountSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePurchaseAmountSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreatePurchaseAmountSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.inspire.purchaseamountsetting.v1.Manager/CreatePurchaseAmountSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreatePurchaseAmountSettings(ctx, req.(*CreatePurchaseAmountSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdatePurchaseAmountSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePurchaseAmountSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdatePurchaseAmountSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.inspire.purchaseamountsetting.v1.Manager/UpdatePurchaseAmountSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdatePurchaseAmountSetting(ctx, req.(*UpdatePurchaseAmountSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetPurchaseAmountSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPurchaseAmountSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetPurchaseAmountSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.inspire.purchaseamountsetting.v1.Manager/GetPurchaseAmountSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetPurchaseAmountSetting(ctx, req.(*GetPurchaseAmountSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetPurchaseAmountSettingOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPurchaseAmountSettingOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetPurchaseAmountSettingOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.inspire.purchaseamountsetting.v1.Manager/GetPurchaseAmountSettingOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetPurchaseAmountSettingOnly(ctx, req.(*GetPurchaseAmountSettingOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetPurchaseAmountSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPurchaseAmountSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetPurchaseAmountSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.inspire.purchaseamountsetting.v1.Manager/GetPurchaseAmountSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetPurchaseAmountSettings(ctx, req.(*GetPurchaseAmountSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistPurchaseAmountSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistPurchaseAmountSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistPurchaseAmountSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.inspire.purchaseamountsetting.v1.Manager/ExistPurchaseAmountSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistPurchaseAmountSetting(ctx, req.(*ExistPurchaseAmountSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistPurchaseAmountSettingConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistPurchaseAmountSettingCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistPurchaseAmountSettingConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.inspire.purchaseamountsetting.v1.Manager/ExistPurchaseAmountSettingConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistPurchaseAmountSettingConds(ctx, req.(*ExistPurchaseAmountSettingCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountPurchaseAmountSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountPurchaseAmountSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountPurchaseAmountSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.inspire.purchaseamountsetting.v1.Manager/CountPurchaseAmountSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountPurchaseAmountSettings(ctx, req.(*CountPurchaseAmountSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeletePurchaseAmountSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePurchaseAmountSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeletePurchaseAmountSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.inspire.purchaseamountsetting.v1.Manager/DeletePurchaseAmountSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeletePurchaseAmountSetting(ctx, req.(*DeletePurchaseAmountSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inspire.manager.inspire.purchaseamountsetting.v1.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePurchaseAmountSetting",
			Handler:    _Manager_CreatePurchaseAmountSetting_Handler,
		},
		{
			MethodName: "CreatePurchaseAmountSettings",
			Handler:    _Manager_CreatePurchaseAmountSettings_Handler,
		},
		{
			MethodName: "UpdatePurchaseAmountSetting",
			Handler:    _Manager_UpdatePurchaseAmountSetting_Handler,
		},
		{
			MethodName: "GetPurchaseAmountSetting",
			Handler:    _Manager_GetPurchaseAmountSetting_Handler,
		},
		{
			MethodName: "GetPurchaseAmountSettingOnly",
			Handler:    _Manager_GetPurchaseAmountSettingOnly_Handler,
		},
		{
			MethodName: "GetPurchaseAmountSettings",
			Handler:    _Manager_GetPurchaseAmountSettings_Handler,
		},
		{
			MethodName: "ExistPurchaseAmountSetting",
			Handler:    _Manager_ExistPurchaseAmountSetting_Handler,
		},
		{
			MethodName: "ExistPurchaseAmountSettingConds",
			Handler:    _Manager_ExistPurchaseAmountSettingConds_Handler,
		},
		{
			MethodName: "CountPurchaseAmountSettings",
			Handler:    _Manager_CountPurchaseAmountSettings_Handler,
		},
		{
			MethodName: "DeletePurchaseAmountSetting",
			Handler:    _Manager_DeletePurchaseAmountSetting_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/inspire/mgr/v1/inspire/purchaseamountsetting/purchaseamountsetting.proto",
}
