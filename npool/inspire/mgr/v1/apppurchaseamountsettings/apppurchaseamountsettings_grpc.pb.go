// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/inspire/mgr/v1/apppurchaseamountsettings/apppurchaseamountsettings.proto

package apppurchaseamountsetting

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateAppPurchaseAmountSetting(ctx context.Context, in *CreateAppPurchaseAmountSettingRequest, opts ...grpc.CallOption) (*CreateAppPurchaseAmountSettingResponse, error)
	CreateAppPurchaseAmountSettings(ctx context.Context, in *CreateAppPurchaseAmountSettingsRequest, opts ...grpc.CallOption) (*CreateAppPurchaseAmountSettingsResponse, error)
	UpdateAppPurchaseAmountSetting(ctx context.Context, in *UpdateAppPurchaseAmountSettingRequest, opts ...grpc.CallOption) (*UpdateAppPurchaseAmountSettingResponse, error)
	GetAppPurchaseAmountSetting(ctx context.Context, in *GetAppPurchaseAmountSettingRequest, opts ...grpc.CallOption) (*GetAppPurchaseAmountSettingResponse, error)
	GetAppPurchaseAmountSettingOnly(ctx context.Context, in *GetAppPurchaseAmountSettingOnlyRequest, opts ...grpc.CallOption) (*GetAppPurchaseAmountSettingOnlyResponse, error)
	GetAppPurchaseAmountSettings(ctx context.Context, in *GetAppPurchaseAmountSettingsRequest, opts ...grpc.CallOption) (*GetAppPurchaseAmountSettingsResponse, error)
	ExistAppPurchaseAmountSetting(ctx context.Context, in *ExistAppPurchaseAmountSettingRequest, opts ...grpc.CallOption) (*ExistAppPurchaseAmountSettingResponse, error)
	ExistAppPurchaseAmountSettingConds(ctx context.Context, in *ExistAppPurchaseAmountSettingCondsRequest, opts ...grpc.CallOption) (*ExistAppPurchaseAmountSettingCondsResponse, error)
	CountAppPurchaseAmountSettings(ctx context.Context, in *CountAppPurchaseAmountSettingsRequest, opts ...grpc.CallOption) (*CountAppPurchaseAmountSettingsResponse, error)
	DeleteAppPurchaseAmountSetting(ctx context.Context, in *DeleteAppPurchaseAmountSettingRequest, opts ...grpc.CallOption) (*DeleteAppPurchaseAmountSettingResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateAppPurchaseAmountSetting(ctx context.Context, in *CreateAppPurchaseAmountSettingRequest, opts ...grpc.CallOption) (*CreateAppPurchaseAmountSettingResponse, error) {
	out := new(CreateAppPurchaseAmountSettingResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.apppurchaseamountsetting.v1.Manager/CreateAppPurchaseAmountSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateAppPurchaseAmountSettings(ctx context.Context, in *CreateAppPurchaseAmountSettingsRequest, opts ...grpc.CallOption) (*CreateAppPurchaseAmountSettingsResponse, error) {
	out := new(CreateAppPurchaseAmountSettingsResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.apppurchaseamountsetting.v1.Manager/CreateAppPurchaseAmountSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateAppPurchaseAmountSetting(ctx context.Context, in *UpdateAppPurchaseAmountSettingRequest, opts ...grpc.CallOption) (*UpdateAppPurchaseAmountSettingResponse, error) {
	out := new(UpdateAppPurchaseAmountSettingResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.apppurchaseamountsetting.v1.Manager/UpdateAppPurchaseAmountSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetAppPurchaseAmountSetting(ctx context.Context, in *GetAppPurchaseAmountSettingRequest, opts ...grpc.CallOption) (*GetAppPurchaseAmountSettingResponse, error) {
	out := new(GetAppPurchaseAmountSettingResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.apppurchaseamountsetting.v1.Manager/GetAppPurchaseAmountSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetAppPurchaseAmountSettingOnly(ctx context.Context, in *GetAppPurchaseAmountSettingOnlyRequest, opts ...grpc.CallOption) (*GetAppPurchaseAmountSettingOnlyResponse, error) {
	out := new(GetAppPurchaseAmountSettingOnlyResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.apppurchaseamountsetting.v1.Manager/GetAppPurchaseAmountSettingOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetAppPurchaseAmountSettings(ctx context.Context, in *GetAppPurchaseAmountSettingsRequest, opts ...grpc.CallOption) (*GetAppPurchaseAmountSettingsResponse, error) {
	out := new(GetAppPurchaseAmountSettingsResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.apppurchaseamountsetting.v1.Manager/GetAppPurchaseAmountSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistAppPurchaseAmountSetting(ctx context.Context, in *ExistAppPurchaseAmountSettingRequest, opts ...grpc.CallOption) (*ExistAppPurchaseAmountSettingResponse, error) {
	out := new(ExistAppPurchaseAmountSettingResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.apppurchaseamountsetting.v1.Manager/ExistAppPurchaseAmountSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistAppPurchaseAmountSettingConds(ctx context.Context, in *ExistAppPurchaseAmountSettingCondsRequest, opts ...grpc.CallOption) (*ExistAppPurchaseAmountSettingCondsResponse, error) {
	out := new(ExistAppPurchaseAmountSettingCondsResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.apppurchaseamountsetting.v1.Manager/ExistAppPurchaseAmountSettingConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountAppPurchaseAmountSettings(ctx context.Context, in *CountAppPurchaseAmountSettingsRequest, opts ...grpc.CallOption) (*CountAppPurchaseAmountSettingsResponse, error) {
	out := new(CountAppPurchaseAmountSettingsResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.apppurchaseamountsetting.v1.Manager/CountAppPurchaseAmountSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteAppPurchaseAmountSetting(ctx context.Context, in *DeleteAppPurchaseAmountSettingRequest, opts ...grpc.CallOption) (*DeleteAppPurchaseAmountSettingResponse, error) {
	out := new(DeleteAppPurchaseAmountSettingResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.apppurchaseamountsetting.v1.Manager/DeleteAppPurchaseAmountSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateAppPurchaseAmountSetting(context.Context, *CreateAppPurchaseAmountSettingRequest) (*CreateAppPurchaseAmountSettingResponse, error)
	CreateAppPurchaseAmountSettings(context.Context, *CreateAppPurchaseAmountSettingsRequest) (*CreateAppPurchaseAmountSettingsResponse, error)
	UpdateAppPurchaseAmountSetting(context.Context, *UpdateAppPurchaseAmountSettingRequest) (*UpdateAppPurchaseAmountSettingResponse, error)
	GetAppPurchaseAmountSetting(context.Context, *GetAppPurchaseAmountSettingRequest) (*GetAppPurchaseAmountSettingResponse, error)
	GetAppPurchaseAmountSettingOnly(context.Context, *GetAppPurchaseAmountSettingOnlyRequest) (*GetAppPurchaseAmountSettingOnlyResponse, error)
	GetAppPurchaseAmountSettings(context.Context, *GetAppPurchaseAmountSettingsRequest) (*GetAppPurchaseAmountSettingsResponse, error)
	ExistAppPurchaseAmountSetting(context.Context, *ExistAppPurchaseAmountSettingRequest) (*ExistAppPurchaseAmountSettingResponse, error)
	ExistAppPurchaseAmountSettingConds(context.Context, *ExistAppPurchaseAmountSettingCondsRequest) (*ExistAppPurchaseAmountSettingCondsResponse, error)
	CountAppPurchaseAmountSettings(context.Context, *CountAppPurchaseAmountSettingsRequest) (*CountAppPurchaseAmountSettingsResponse, error)
	DeleteAppPurchaseAmountSetting(context.Context, *DeleteAppPurchaseAmountSettingRequest) (*DeleteAppPurchaseAmountSettingResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateAppPurchaseAmountSetting(context.Context, *CreateAppPurchaseAmountSettingRequest) (*CreateAppPurchaseAmountSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppPurchaseAmountSetting not implemented")
}
func (UnimplementedManagerServer) CreateAppPurchaseAmountSettings(context.Context, *CreateAppPurchaseAmountSettingsRequest) (*CreateAppPurchaseAmountSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppPurchaseAmountSettings not implemented")
}
func (UnimplementedManagerServer) UpdateAppPurchaseAmountSetting(context.Context, *UpdateAppPurchaseAmountSettingRequest) (*UpdateAppPurchaseAmountSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppPurchaseAmountSetting not implemented")
}
func (UnimplementedManagerServer) GetAppPurchaseAmountSetting(context.Context, *GetAppPurchaseAmountSettingRequest) (*GetAppPurchaseAmountSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppPurchaseAmountSetting not implemented")
}
func (UnimplementedManagerServer) GetAppPurchaseAmountSettingOnly(context.Context, *GetAppPurchaseAmountSettingOnlyRequest) (*GetAppPurchaseAmountSettingOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppPurchaseAmountSettingOnly not implemented")
}
func (UnimplementedManagerServer) GetAppPurchaseAmountSettings(context.Context, *GetAppPurchaseAmountSettingsRequest) (*GetAppPurchaseAmountSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppPurchaseAmountSettings not implemented")
}
func (UnimplementedManagerServer) ExistAppPurchaseAmountSetting(context.Context, *ExistAppPurchaseAmountSettingRequest) (*ExistAppPurchaseAmountSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistAppPurchaseAmountSetting not implemented")
}
func (UnimplementedManagerServer) ExistAppPurchaseAmountSettingConds(context.Context, *ExistAppPurchaseAmountSettingCondsRequest) (*ExistAppPurchaseAmountSettingCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistAppPurchaseAmountSettingConds not implemented")
}
func (UnimplementedManagerServer) CountAppPurchaseAmountSettings(context.Context, *CountAppPurchaseAmountSettingsRequest) (*CountAppPurchaseAmountSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAppPurchaseAmountSettings not implemented")
}
func (UnimplementedManagerServer) DeleteAppPurchaseAmountSetting(context.Context, *DeleteAppPurchaseAmountSettingRequest) (*DeleteAppPurchaseAmountSettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppPurchaseAmountSetting not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateAppPurchaseAmountSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppPurchaseAmountSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateAppPurchaseAmountSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.apppurchaseamountsetting.v1.Manager/CreateAppPurchaseAmountSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateAppPurchaseAmountSetting(ctx, req.(*CreateAppPurchaseAmountSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateAppPurchaseAmountSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppPurchaseAmountSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateAppPurchaseAmountSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.apppurchaseamountsetting.v1.Manager/CreateAppPurchaseAmountSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateAppPurchaseAmountSettings(ctx, req.(*CreateAppPurchaseAmountSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateAppPurchaseAmountSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppPurchaseAmountSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateAppPurchaseAmountSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.apppurchaseamountsetting.v1.Manager/UpdateAppPurchaseAmountSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateAppPurchaseAmountSetting(ctx, req.(*UpdateAppPurchaseAmountSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetAppPurchaseAmountSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppPurchaseAmountSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetAppPurchaseAmountSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.apppurchaseamountsetting.v1.Manager/GetAppPurchaseAmountSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetAppPurchaseAmountSetting(ctx, req.(*GetAppPurchaseAmountSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetAppPurchaseAmountSettingOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppPurchaseAmountSettingOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetAppPurchaseAmountSettingOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.apppurchaseamountsetting.v1.Manager/GetAppPurchaseAmountSettingOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetAppPurchaseAmountSettingOnly(ctx, req.(*GetAppPurchaseAmountSettingOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetAppPurchaseAmountSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppPurchaseAmountSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetAppPurchaseAmountSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.apppurchaseamountsetting.v1.Manager/GetAppPurchaseAmountSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetAppPurchaseAmountSettings(ctx, req.(*GetAppPurchaseAmountSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistAppPurchaseAmountSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistAppPurchaseAmountSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistAppPurchaseAmountSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.apppurchaseamountsetting.v1.Manager/ExistAppPurchaseAmountSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistAppPurchaseAmountSetting(ctx, req.(*ExistAppPurchaseAmountSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistAppPurchaseAmountSettingConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistAppPurchaseAmountSettingCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistAppPurchaseAmountSettingConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.apppurchaseamountsetting.v1.Manager/ExistAppPurchaseAmountSettingConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistAppPurchaseAmountSettingConds(ctx, req.(*ExistAppPurchaseAmountSettingCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountAppPurchaseAmountSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAppPurchaseAmountSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountAppPurchaseAmountSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.apppurchaseamountsetting.v1.Manager/CountAppPurchaseAmountSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountAppPurchaseAmountSettings(ctx, req.(*CountAppPurchaseAmountSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteAppPurchaseAmountSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppPurchaseAmountSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteAppPurchaseAmountSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.apppurchaseamountsetting.v1.Manager/DeleteAppPurchaseAmountSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteAppPurchaseAmountSetting(ctx, req.(*DeleteAppPurchaseAmountSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inspire.manager.coupon.apppurchaseamountsetting.v1.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAppPurchaseAmountSetting",
			Handler:    _Manager_CreateAppPurchaseAmountSetting_Handler,
		},
		{
			MethodName: "CreateAppPurchaseAmountSettings",
			Handler:    _Manager_CreateAppPurchaseAmountSettings_Handler,
		},
		{
			MethodName: "UpdateAppPurchaseAmountSetting",
			Handler:    _Manager_UpdateAppPurchaseAmountSetting_Handler,
		},
		{
			MethodName: "GetAppPurchaseAmountSetting",
			Handler:    _Manager_GetAppPurchaseAmountSetting_Handler,
		},
		{
			MethodName: "GetAppPurchaseAmountSettingOnly",
			Handler:    _Manager_GetAppPurchaseAmountSettingOnly_Handler,
		},
		{
			MethodName: "GetAppPurchaseAmountSettings",
			Handler:    _Manager_GetAppPurchaseAmountSettings_Handler,
		},
		{
			MethodName: "ExistAppPurchaseAmountSetting",
			Handler:    _Manager_ExistAppPurchaseAmountSetting_Handler,
		},
		{
			MethodName: "ExistAppPurchaseAmountSettingConds",
			Handler:    _Manager_ExistAppPurchaseAmountSettingConds_Handler,
		},
		{
			MethodName: "CountAppPurchaseAmountSettings",
			Handler:    _Manager_CountAppPurchaseAmountSettings_Handler,
		},
		{
			MethodName: "DeleteAppPurchaseAmountSetting",
			Handler:    _Manager_DeleteAppPurchaseAmountSetting_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/inspire/mgr/v1/apppurchaseamountsettings/apppurchaseamountsettings.proto",
}
