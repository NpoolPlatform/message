// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.18.1
// source: npool/inspire/mgr/v1/commission/goodordervaluepercent/goodordervaluepercent.proto

package goodordervaluepercent

import (
	npool "github.com/NpoolPlatform/message/npool"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OrderValuePercentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      *string `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	AppID   *string `protobuf:"bytes,20,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	UserID  *string `protobuf:"bytes,30,opt,name=UserID,proto3,oneof" json:"UserID,omitempty"`
	GoodID  *string `protobuf:"bytes,40,opt,name=GoodID,proto3,oneof" json:"GoodID,omitempty"`
	Percent *string `protobuf:"bytes,50,opt,name=Percent,proto3,oneof" json:"Percent,omitempty"`
	StartAt *uint32 `protobuf:"varint,60,opt,name=StartAt,proto3,oneof" json:"StartAt,omitempty"`
	EndAt   *uint32 `protobuf:"varint,70,opt,name=EndAt,proto3,oneof" json:"EndAt,omitempty"`
}

func (x *OrderValuePercentReq) Reset() {
	*x = OrderValuePercentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderValuePercentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderValuePercentReq) ProtoMessage() {}

func (x *OrderValuePercentReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderValuePercentReq.ProtoReflect.Descriptor instead.
func (*OrderValuePercentReq) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_rawDescGZIP(), []int{0}
}

func (x *OrderValuePercentReq) GetID() string {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return ""
}

func (x *OrderValuePercentReq) GetAppID() string {
	if x != nil && x.AppID != nil {
		return *x.AppID
	}
	return ""
}

func (x *OrderValuePercentReq) GetUserID() string {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return ""
}

func (x *OrderValuePercentReq) GetGoodID() string {
	if x != nil && x.GoodID != nil {
		return *x.GoodID
	}
	return ""
}

func (x *OrderValuePercentReq) GetPercent() string {
	if x != nil && x.Percent != nil {
		return *x.Percent
	}
	return ""
}

func (x *OrderValuePercentReq) GetStartAt() uint32 {
	if x != nil && x.StartAt != nil {
		return *x.StartAt
	}
	return 0
}

func (x *OrderValuePercentReq) GetEndAt() uint32 {
	if x != nil && x.EndAt != nil {
		return *x.EndAt
	}
	return 0
}

type OrderValuePercent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID     string `protobuf:"bytes,20,opt,name=AppID,proto3" json:"AppID,omitempty"`
	UserID    string `protobuf:"bytes,30,opt,name=UserID,proto3" json:"UserID,omitempty"`
	GoodID    string `protobuf:"bytes,40,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
	Percent   string `protobuf:"bytes,50,opt,name=Percent,proto3" json:"Percent,omitempty"`
	StartAt   uint32 `protobuf:"varint,60,opt,name=StartAt,proto3" json:"StartAt,omitempty"`
	EndAt     uint32 `protobuf:"varint,70,opt,name=EndAt,proto3" json:"EndAt,omitempty"`
	CreatedAt uint32 `protobuf:"varint,80,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt uint32 `protobuf:"varint,90,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (x *OrderValuePercent) Reset() {
	*x = OrderValuePercent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderValuePercent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderValuePercent) ProtoMessage() {}

func (x *OrderValuePercent) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderValuePercent.ProtoReflect.Descriptor instead.
func (*OrderValuePercent) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_rawDescGZIP(), []int{1}
}

func (x *OrderValuePercent) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *OrderValuePercent) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *OrderValuePercent) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *OrderValuePercent) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *OrderValuePercent) GetPercent() string {
	if x != nil {
		return x.Percent
	}
	return ""
}

func (x *OrderValuePercent) GetStartAt() uint32 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *OrderValuePercent) GetEndAt() uint32 {
	if x != nil {
		return x.EndAt
	}
	return 0
}

func (x *OrderValuePercent) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *OrderValuePercent) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      *npool.StringVal      `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	AppID   *npool.StringVal      `protobuf:"bytes,20,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	UserID  *npool.StringVal      `protobuf:"bytes,30,opt,name=UserID,proto3,oneof" json:"UserID,omitempty"`
	GoodID  *npool.StringVal      `protobuf:"bytes,40,opt,name=GoodID,proto3,oneof" json:"GoodID,omitempty"`
	EndAt   *npool.Uint32Val      `protobuf:"bytes,50,opt,name=EndAt,proto3,oneof" json:"EndAt,omitempty"`
	UserIDs *npool.StringSliceVal `protobuf:"bytes,60,opt,name=UserIDs,proto3,oneof" json:"UserIDs,omitempty"`
	GoodIDs *npool.StringSliceVal `protobuf:"bytes,70,opt,name=GoodIDs,proto3,oneof" json:"GoodIDs,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *npool.StringVal {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetAppID() *npool.StringVal {
	if x != nil {
		return x.AppID
	}
	return nil
}

func (x *Conds) GetUserID() *npool.StringVal {
	if x != nil {
		return x.UserID
	}
	return nil
}

func (x *Conds) GetGoodID() *npool.StringVal {
	if x != nil {
		return x.GoodID
	}
	return nil
}

func (x *Conds) GetEndAt() *npool.Uint32Val {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *Conds) GetUserIDs() *npool.StringSliceVal {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

func (x *Conds) GetGoodIDs() *npool.StringSliceVal {
	if x != nil {
		return x.GoodIDs
	}
	return nil
}

type CreateOrderValuePercentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *OrderValuePercentReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateOrderValuePercentRequest) Reset() {
	*x = CreateOrderValuePercentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrderValuePercentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderValuePercentRequest) ProtoMessage() {}

func (x *CreateOrderValuePercentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderValuePercentRequest.ProtoReflect.Descriptor instead.
func (*CreateOrderValuePercentRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_rawDescGZIP(), []int{3}
}

func (x *CreateOrderValuePercentRequest) GetInfo() *OrderValuePercentReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateOrderValuePercentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *OrderValuePercent `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateOrderValuePercentResponse) Reset() {
	*x = CreateOrderValuePercentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrderValuePercentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderValuePercentResponse) ProtoMessage() {}

func (x *CreateOrderValuePercentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderValuePercentResponse.ProtoReflect.Descriptor instead.
func (*CreateOrderValuePercentResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_rawDescGZIP(), []int{4}
}

func (x *CreateOrderValuePercentResponse) GetInfo() *OrderValuePercent {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateOrderValuePercentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*OrderValuePercentReq `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateOrderValuePercentsRequest) Reset() {
	*x = CreateOrderValuePercentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrderValuePercentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderValuePercentsRequest) ProtoMessage() {}

func (x *CreateOrderValuePercentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderValuePercentsRequest.ProtoReflect.Descriptor instead.
func (*CreateOrderValuePercentsRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_rawDescGZIP(), []int{5}
}

func (x *CreateOrderValuePercentsRequest) GetInfos() []*OrderValuePercentReq {
	if x != nil {
		return x.Infos
	}
	return nil
}

type CreateOrderValuePercentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*OrderValuePercent `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateOrderValuePercentsResponse) Reset() {
	*x = CreateOrderValuePercentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrderValuePercentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderValuePercentsResponse) ProtoMessage() {}

func (x *CreateOrderValuePercentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderValuePercentsResponse.ProtoReflect.Descriptor instead.
func (*CreateOrderValuePercentsResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_rawDescGZIP(), []int{6}
}

func (x *CreateOrderValuePercentsResponse) GetInfos() []*OrderValuePercent {
	if x != nil {
		return x.Infos
	}
	return nil
}

type UpdateOrderValuePercentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *OrderValuePercentReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateOrderValuePercentRequest) Reset() {
	*x = UpdateOrderValuePercentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrderValuePercentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrderValuePercentRequest) ProtoMessage() {}

func (x *UpdateOrderValuePercentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrderValuePercentRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrderValuePercentRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateOrderValuePercentRequest) GetInfo() *OrderValuePercentReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateOrderValuePercentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *OrderValuePercent `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateOrderValuePercentResponse) Reset() {
	*x = UpdateOrderValuePercentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrderValuePercentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrderValuePercentResponse) ProtoMessage() {}

func (x *UpdateOrderValuePercentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrderValuePercentResponse.ProtoReflect.Descriptor instead.
func (*UpdateOrderValuePercentResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateOrderValuePercentResponse) GetInfo() *OrderValuePercent {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetOrderValuePercentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetOrderValuePercentRequest) Reset() {
	*x = GetOrderValuePercentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderValuePercentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderValuePercentRequest) ProtoMessage() {}

func (x *GetOrderValuePercentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderValuePercentRequest.ProtoReflect.Descriptor instead.
func (*GetOrderValuePercentRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_rawDescGZIP(), []int{9}
}

func (x *GetOrderValuePercentRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetOrderValuePercentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *OrderValuePercent `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetOrderValuePercentResponse) Reset() {
	*x = GetOrderValuePercentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderValuePercentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderValuePercentResponse) ProtoMessage() {}

func (x *GetOrderValuePercentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderValuePercentResponse.ProtoReflect.Descriptor instead.
func (*GetOrderValuePercentResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_rawDescGZIP(), []int{10}
}

func (x *GetOrderValuePercentResponse) GetInfo() *OrderValuePercent {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetOrderValuePercentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetOrderValuePercentsRequest) Reset() {
	*x = GetOrderValuePercentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderValuePercentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderValuePercentsRequest) ProtoMessage() {}

func (x *GetOrderValuePercentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderValuePercentsRequest.ProtoReflect.Descriptor instead.
func (*GetOrderValuePercentsRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_rawDescGZIP(), []int{11}
}

func (x *GetOrderValuePercentsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetOrderValuePercentsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetOrderValuePercentsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetOrderValuePercentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*OrderValuePercent `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32               `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetOrderValuePercentsResponse) Reset() {
	*x = GetOrderValuePercentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderValuePercentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderValuePercentsResponse) ProtoMessage() {}

func (x *GetOrderValuePercentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderValuePercentsResponse.ProtoReflect.Descriptor instead.
func (*GetOrderValuePercentsResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_rawDescGZIP(), []int{12}
}

func (x *GetOrderValuePercentsResponse) GetInfos() []*OrderValuePercent {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetOrderValuePercentsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetOrderValuePercentOnlyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *GetOrderValuePercentOnlyRequest) Reset() {
	*x = GetOrderValuePercentOnlyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderValuePercentOnlyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderValuePercentOnlyRequest) ProtoMessage() {}

func (x *GetOrderValuePercentOnlyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderValuePercentOnlyRequest.ProtoReflect.Descriptor instead.
func (*GetOrderValuePercentOnlyRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_rawDescGZIP(), []int{13}
}

func (x *GetOrderValuePercentOnlyRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type GetOrderValuePercentOnlyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *OrderValuePercent `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetOrderValuePercentOnlyResponse) Reset() {
	*x = GetOrderValuePercentOnlyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderValuePercentOnlyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderValuePercentOnlyResponse) ProtoMessage() {}

func (x *GetOrderValuePercentOnlyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderValuePercentOnlyResponse.ProtoReflect.Descriptor instead.
func (*GetOrderValuePercentOnlyResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_rawDescGZIP(), []int{14}
}

func (x *GetOrderValuePercentOnlyResponse) GetInfo() *OrderValuePercent {
	if x != nil {
		return x.Info
	}
	return nil
}

type ExistOrderValuePercentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ExistOrderValuePercentRequest) Reset() {
	*x = ExistOrderValuePercentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistOrderValuePercentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistOrderValuePercentRequest) ProtoMessage() {}

func (x *ExistOrderValuePercentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistOrderValuePercentRequest.ProtoReflect.Descriptor instead.
func (*ExistOrderValuePercentRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_rawDescGZIP(), []int{15}
}

func (x *ExistOrderValuePercentRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ExistOrderValuePercentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistOrderValuePercentResponse) Reset() {
	*x = ExistOrderValuePercentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistOrderValuePercentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistOrderValuePercentResponse) ProtoMessage() {}

func (x *ExistOrderValuePercentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistOrderValuePercentResponse.ProtoReflect.Descriptor instead.
func (*ExistOrderValuePercentResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_rawDescGZIP(), []int{16}
}

func (x *ExistOrderValuePercentResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type ExistOrderValuePercentCondsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *ExistOrderValuePercentCondsRequest) Reset() {
	*x = ExistOrderValuePercentCondsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistOrderValuePercentCondsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistOrderValuePercentCondsRequest) ProtoMessage() {}

func (x *ExistOrderValuePercentCondsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistOrderValuePercentCondsRequest.ProtoReflect.Descriptor instead.
func (*ExistOrderValuePercentCondsRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_rawDescGZIP(), []int{17}
}

func (x *ExistOrderValuePercentCondsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type ExistOrderValuePercentCondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistOrderValuePercentCondsResponse) Reset() {
	*x = ExistOrderValuePercentCondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistOrderValuePercentCondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistOrderValuePercentCondsResponse) ProtoMessage() {}

func (x *ExistOrderValuePercentCondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistOrderValuePercentCondsResponse.ProtoReflect.Descriptor instead.
func (*ExistOrderValuePercentCondsResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_rawDescGZIP(), []int{18}
}

func (x *ExistOrderValuePercentCondsResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type CountOrderValuePercentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *CountOrderValuePercentsRequest) Reset() {
	*x = CountOrderValuePercentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountOrderValuePercentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountOrderValuePercentsRequest) ProtoMessage() {}

func (x *CountOrderValuePercentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountOrderValuePercentsRequest.ProtoReflect.Descriptor instead.
func (*CountOrderValuePercentsRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_rawDescGZIP(), []int{19}
}

func (x *CountOrderValuePercentsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type CountOrderValuePercentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info uint32 `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CountOrderValuePercentsResponse) Reset() {
	*x = CountOrderValuePercentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountOrderValuePercentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountOrderValuePercentsResponse) ProtoMessage() {}

func (x *CountOrderValuePercentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountOrderValuePercentsResponse.ProtoReflect.Descriptor instead.
func (*CountOrderValuePercentsResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_rawDescGZIP(), []int{20}
}

func (x *CountOrderValuePercentsResponse) GetInfo() uint32 {
	if x != nil {
		return x.Info
	}
	return 0
}

type DeleteOrderValuePercentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *DeleteOrderValuePercentRequest) Reset() {
	*x = DeleteOrderValuePercentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrderValuePercentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrderValuePercentRequest) ProtoMessage() {}

func (x *DeleteOrderValuePercentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrderValuePercentRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrderValuePercentRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteOrderValuePercentRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type DeleteOrderValuePercentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *OrderValuePercent `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteOrderValuePercentResponse) Reset() {
	*x = DeleteOrderValuePercentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrderValuePercentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrderValuePercentResponse) ProtoMessage() {}

func (x *DeleteOrderValuePercentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrderValuePercentResponse.ProtoReflect.Descriptor instead.
func (*DeleteOrderValuePercentResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteOrderValuePercentResponse) GetInfo() *OrderValuePercent {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto protoreflect.FileDescriptor

var file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_rawDesc = []byte{
	0x0a, 0x51, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f,
	0x6d, 0x67, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x33, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x11, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f,
	0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa2, 0x02, 0x0a, 0x14,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x1b, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x07, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x07, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x05,
	0x52, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x45, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x06, 0x52, 0x05, 0x45,
	0x6e, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x41, 0x70, 0x70, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x64, 0x41, 0x74,
	0x22, 0xef, 0x01, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41,
	0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0xb0, 0x03, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52,
	0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x05, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x02, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64,
	0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x03, 0x52,
	0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x05, 0x45, 0x6e,
	0x64, 0x41, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x04,
	0x52, 0x05, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x07, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69,
	0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x05, 0x52, 0x07, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x07, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x73, 0x18, 0x46,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x06,
	0x52, 0x07, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03,
	0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x41, 0x70, 0x70, 0x49, 0x44, 0x42, 0x09, 0x0a,
	0x07, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x47, 0x6f, 0x6f,
	0x64, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x47, 0x6f,
	0x6f, 0x64, 0x49, 0x44, 0x73, 0x22, 0x7f, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x7d, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x82, 0x01, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x05, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x49, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x20, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5c, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46,
	0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x7f, 0x0a,
	0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x5d, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x7d,
	0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x5a, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x46, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2d, 0x0a,
	0x1b, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x7a, 0x0a, 0x1c,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x9e, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x05, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x1d, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x05, 0x49,
	0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22,
	0x73, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x50, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x22, 0x7e, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x6c, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2f, 0x0a, 0x1d, 0x45, 0x78, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x34, 0x0a, 0x1e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x76, 0x0a, 0x22, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x50, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6f,
	0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x22, 0x39, 0x0a, 0x23, 0x45, 0x78, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x72,
	0x0a, 0x1e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x50, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3a, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x22, 0x35, 0x0a, 0x1f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x30, 0x0a, 0x1e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x7d, 0x0a, 0x1f, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5a,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x69,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0xe3, 0x0f, 0x0a, 0x07, 0x4d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0xc6, 0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x12, 0x53, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x54, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0xc9, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x54, 0x2e, 0x69,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x55, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xc6, 0x01, 0x0a, 0x17,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x53, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x54, 0x2e, 0x69,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0xbd, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x50, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x51, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0xc9, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x6c,
	0x79, 0x12, 0x54, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x6c, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x55, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0xc0, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x51, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x52, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0xc3, 0x01, 0x0a, 0x16, 0x45, 0x78, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x52,
	0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x53, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xd2, 0x01, 0x0a, 0x1b, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x57, 0x2e, 0x69, 0x6e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x58, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xc6,
	0x01, 0x0a, 0x17, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x53, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x54, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xc6, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x12, 0x53, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x54, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x42, 0x58, 0x5a, 0x56, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e,
	0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2f, 0x6d, 0x67, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_rawDescOnce sync.Once
	file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_rawDescData = file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_rawDesc
)

func file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_rawDescGZIP() []byte {
	file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_rawDescOnce.Do(func() {
		file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_rawDescData)
	})
	return file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_rawDescData
}

var file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_goTypes = []interface{}{
	(*OrderValuePercentReq)(nil),                // 0: inspire.manager.commission.goodordervaluepercent.v1.OrderValuePercentReq
	(*OrderValuePercent)(nil),                   // 1: inspire.manager.commission.goodordervaluepercent.v1.OrderValuePercent
	(*Conds)(nil),                               // 2: inspire.manager.commission.goodordervaluepercent.v1.Conds
	(*CreateOrderValuePercentRequest)(nil),      // 3: inspire.manager.commission.goodordervaluepercent.v1.CreateOrderValuePercentRequest
	(*CreateOrderValuePercentResponse)(nil),     // 4: inspire.manager.commission.goodordervaluepercent.v1.CreateOrderValuePercentResponse
	(*CreateOrderValuePercentsRequest)(nil),     // 5: inspire.manager.commission.goodordervaluepercent.v1.CreateOrderValuePercentsRequest
	(*CreateOrderValuePercentsResponse)(nil),    // 6: inspire.manager.commission.goodordervaluepercent.v1.CreateOrderValuePercentsResponse
	(*UpdateOrderValuePercentRequest)(nil),      // 7: inspire.manager.commission.goodordervaluepercent.v1.UpdateOrderValuePercentRequest
	(*UpdateOrderValuePercentResponse)(nil),     // 8: inspire.manager.commission.goodordervaluepercent.v1.UpdateOrderValuePercentResponse
	(*GetOrderValuePercentRequest)(nil),         // 9: inspire.manager.commission.goodordervaluepercent.v1.GetOrderValuePercentRequest
	(*GetOrderValuePercentResponse)(nil),        // 10: inspire.manager.commission.goodordervaluepercent.v1.GetOrderValuePercentResponse
	(*GetOrderValuePercentsRequest)(nil),        // 11: inspire.manager.commission.goodordervaluepercent.v1.GetOrderValuePercentsRequest
	(*GetOrderValuePercentsResponse)(nil),       // 12: inspire.manager.commission.goodordervaluepercent.v1.GetOrderValuePercentsResponse
	(*GetOrderValuePercentOnlyRequest)(nil),     // 13: inspire.manager.commission.goodordervaluepercent.v1.GetOrderValuePercentOnlyRequest
	(*GetOrderValuePercentOnlyResponse)(nil),    // 14: inspire.manager.commission.goodordervaluepercent.v1.GetOrderValuePercentOnlyResponse
	(*ExistOrderValuePercentRequest)(nil),       // 15: inspire.manager.commission.goodordervaluepercent.v1.ExistOrderValuePercentRequest
	(*ExistOrderValuePercentResponse)(nil),      // 16: inspire.manager.commission.goodordervaluepercent.v1.ExistOrderValuePercentResponse
	(*ExistOrderValuePercentCondsRequest)(nil),  // 17: inspire.manager.commission.goodordervaluepercent.v1.ExistOrderValuePercentCondsRequest
	(*ExistOrderValuePercentCondsResponse)(nil), // 18: inspire.manager.commission.goodordervaluepercent.v1.ExistOrderValuePercentCondsResponse
	(*CountOrderValuePercentsRequest)(nil),      // 19: inspire.manager.commission.goodordervaluepercent.v1.CountOrderValuePercentsRequest
	(*CountOrderValuePercentsResponse)(nil),     // 20: inspire.manager.commission.goodordervaluepercent.v1.CountOrderValuePercentsResponse
	(*DeleteOrderValuePercentRequest)(nil),      // 21: inspire.manager.commission.goodordervaluepercent.v1.DeleteOrderValuePercentRequest
	(*DeleteOrderValuePercentResponse)(nil),     // 22: inspire.manager.commission.goodordervaluepercent.v1.DeleteOrderValuePercentResponse
	(*npool.StringVal)(nil),                     // 23: npool.v1.StringVal
	(*npool.Uint32Val)(nil),                     // 24: npool.v1.Uint32Val
	(*npool.StringSliceVal)(nil),                // 25: npool.v1.StringSliceVal
}
var file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_depIdxs = []int32{
	23, // 0: inspire.manager.commission.goodordervaluepercent.v1.Conds.ID:type_name -> npool.v1.StringVal
	23, // 1: inspire.manager.commission.goodordervaluepercent.v1.Conds.AppID:type_name -> npool.v1.StringVal
	23, // 2: inspire.manager.commission.goodordervaluepercent.v1.Conds.UserID:type_name -> npool.v1.StringVal
	23, // 3: inspire.manager.commission.goodordervaluepercent.v1.Conds.GoodID:type_name -> npool.v1.StringVal
	24, // 4: inspire.manager.commission.goodordervaluepercent.v1.Conds.EndAt:type_name -> npool.v1.Uint32Val
	25, // 5: inspire.manager.commission.goodordervaluepercent.v1.Conds.UserIDs:type_name -> npool.v1.StringSliceVal
	25, // 6: inspire.manager.commission.goodordervaluepercent.v1.Conds.GoodIDs:type_name -> npool.v1.StringSliceVal
	0,  // 7: inspire.manager.commission.goodordervaluepercent.v1.CreateOrderValuePercentRequest.Info:type_name -> inspire.manager.commission.goodordervaluepercent.v1.OrderValuePercentReq
	1,  // 8: inspire.manager.commission.goodordervaluepercent.v1.CreateOrderValuePercentResponse.Info:type_name -> inspire.manager.commission.goodordervaluepercent.v1.OrderValuePercent
	0,  // 9: inspire.manager.commission.goodordervaluepercent.v1.CreateOrderValuePercentsRequest.Infos:type_name -> inspire.manager.commission.goodordervaluepercent.v1.OrderValuePercentReq
	1,  // 10: inspire.manager.commission.goodordervaluepercent.v1.CreateOrderValuePercentsResponse.Infos:type_name -> inspire.manager.commission.goodordervaluepercent.v1.OrderValuePercent
	0,  // 11: inspire.manager.commission.goodordervaluepercent.v1.UpdateOrderValuePercentRequest.Info:type_name -> inspire.manager.commission.goodordervaluepercent.v1.OrderValuePercentReq
	1,  // 12: inspire.manager.commission.goodordervaluepercent.v1.UpdateOrderValuePercentResponse.Info:type_name -> inspire.manager.commission.goodordervaluepercent.v1.OrderValuePercent
	1,  // 13: inspire.manager.commission.goodordervaluepercent.v1.GetOrderValuePercentResponse.Info:type_name -> inspire.manager.commission.goodordervaluepercent.v1.OrderValuePercent
	2,  // 14: inspire.manager.commission.goodordervaluepercent.v1.GetOrderValuePercentsRequest.Conds:type_name -> inspire.manager.commission.goodordervaluepercent.v1.Conds
	1,  // 15: inspire.manager.commission.goodordervaluepercent.v1.GetOrderValuePercentsResponse.Infos:type_name -> inspire.manager.commission.goodordervaluepercent.v1.OrderValuePercent
	2,  // 16: inspire.manager.commission.goodordervaluepercent.v1.GetOrderValuePercentOnlyRequest.Conds:type_name -> inspire.manager.commission.goodordervaluepercent.v1.Conds
	1,  // 17: inspire.manager.commission.goodordervaluepercent.v1.GetOrderValuePercentOnlyResponse.Info:type_name -> inspire.manager.commission.goodordervaluepercent.v1.OrderValuePercent
	2,  // 18: inspire.manager.commission.goodordervaluepercent.v1.ExistOrderValuePercentCondsRequest.Conds:type_name -> inspire.manager.commission.goodordervaluepercent.v1.Conds
	2,  // 19: inspire.manager.commission.goodordervaluepercent.v1.CountOrderValuePercentsRequest.Conds:type_name -> inspire.manager.commission.goodordervaluepercent.v1.Conds
	1,  // 20: inspire.manager.commission.goodordervaluepercent.v1.DeleteOrderValuePercentResponse.Info:type_name -> inspire.manager.commission.goodordervaluepercent.v1.OrderValuePercent
	3,  // 21: inspire.manager.commission.goodordervaluepercent.v1.Manager.CreateOrderValuePercent:input_type -> inspire.manager.commission.goodordervaluepercent.v1.CreateOrderValuePercentRequest
	5,  // 22: inspire.manager.commission.goodordervaluepercent.v1.Manager.CreateOrderValuePercents:input_type -> inspire.manager.commission.goodordervaluepercent.v1.CreateOrderValuePercentsRequest
	7,  // 23: inspire.manager.commission.goodordervaluepercent.v1.Manager.UpdateOrderValuePercent:input_type -> inspire.manager.commission.goodordervaluepercent.v1.UpdateOrderValuePercentRequest
	9,  // 24: inspire.manager.commission.goodordervaluepercent.v1.Manager.GetOrderValuePercent:input_type -> inspire.manager.commission.goodordervaluepercent.v1.GetOrderValuePercentRequest
	13, // 25: inspire.manager.commission.goodordervaluepercent.v1.Manager.GetOrderValuePercentOnly:input_type -> inspire.manager.commission.goodordervaluepercent.v1.GetOrderValuePercentOnlyRequest
	11, // 26: inspire.manager.commission.goodordervaluepercent.v1.Manager.GetOrderValuePercents:input_type -> inspire.manager.commission.goodordervaluepercent.v1.GetOrderValuePercentsRequest
	15, // 27: inspire.manager.commission.goodordervaluepercent.v1.Manager.ExistOrderValuePercent:input_type -> inspire.manager.commission.goodordervaluepercent.v1.ExistOrderValuePercentRequest
	17, // 28: inspire.manager.commission.goodordervaluepercent.v1.Manager.ExistOrderValuePercentConds:input_type -> inspire.manager.commission.goodordervaluepercent.v1.ExistOrderValuePercentCondsRequest
	19, // 29: inspire.manager.commission.goodordervaluepercent.v1.Manager.CountOrderValuePercents:input_type -> inspire.manager.commission.goodordervaluepercent.v1.CountOrderValuePercentsRequest
	21, // 30: inspire.manager.commission.goodordervaluepercent.v1.Manager.DeleteOrderValuePercent:input_type -> inspire.manager.commission.goodordervaluepercent.v1.DeleteOrderValuePercentRequest
	4,  // 31: inspire.manager.commission.goodordervaluepercent.v1.Manager.CreateOrderValuePercent:output_type -> inspire.manager.commission.goodordervaluepercent.v1.CreateOrderValuePercentResponse
	6,  // 32: inspire.manager.commission.goodordervaluepercent.v1.Manager.CreateOrderValuePercents:output_type -> inspire.manager.commission.goodordervaluepercent.v1.CreateOrderValuePercentsResponse
	8,  // 33: inspire.manager.commission.goodordervaluepercent.v1.Manager.UpdateOrderValuePercent:output_type -> inspire.manager.commission.goodordervaluepercent.v1.UpdateOrderValuePercentResponse
	10, // 34: inspire.manager.commission.goodordervaluepercent.v1.Manager.GetOrderValuePercent:output_type -> inspire.manager.commission.goodordervaluepercent.v1.GetOrderValuePercentResponse
	14, // 35: inspire.manager.commission.goodordervaluepercent.v1.Manager.GetOrderValuePercentOnly:output_type -> inspire.manager.commission.goodordervaluepercent.v1.GetOrderValuePercentOnlyResponse
	12, // 36: inspire.manager.commission.goodordervaluepercent.v1.Manager.GetOrderValuePercents:output_type -> inspire.manager.commission.goodordervaluepercent.v1.GetOrderValuePercentsResponse
	16, // 37: inspire.manager.commission.goodordervaluepercent.v1.Manager.ExistOrderValuePercent:output_type -> inspire.manager.commission.goodordervaluepercent.v1.ExistOrderValuePercentResponse
	18, // 38: inspire.manager.commission.goodordervaluepercent.v1.Manager.ExistOrderValuePercentConds:output_type -> inspire.manager.commission.goodordervaluepercent.v1.ExistOrderValuePercentCondsResponse
	20, // 39: inspire.manager.commission.goodordervaluepercent.v1.Manager.CountOrderValuePercents:output_type -> inspire.manager.commission.goodordervaluepercent.v1.CountOrderValuePercentsResponse
	22, // 40: inspire.manager.commission.goodordervaluepercent.v1.Manager.DeleteOrderValuePercent:output_type -> inspire.manager.commission.goodordervaluepercent.v1.DeleteOrderValuePercentResponse
	31, // [31:41] is the sub-list for method output_type
	21, // [21:31] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() {
	file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_init()
}
func file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_init() {
	if File_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderValuePercentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderValuePercent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrderValuePercentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrderValuePercentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrderValuePercentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrderValuePercentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrderValuePercentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrderValuePercentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderValuePercentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderValuePercentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderValuePercentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderValuePercentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderValuePercentOnlyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderValuePercentOnlyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistOrderValuePercentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistOrderValuePercentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistOrderValuePercentCondsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistOrderValuePercentCondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountOrderValuePercentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountOrderValuePercentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrderValuePercentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrderValuePercentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_goTypes,
		DependencyIndexes: file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_depIdxs,
		MessageInfos:      file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_msgTypes,
	}.Build()
	File_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto = out.File
	file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_rawDesc = nil
	file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_goTypes = nil
	file_npool_inspire_mgr_v1_commission_goodordervaluepercent_goodordervaluepercent_proto_depIdxs = nil
}
