// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/inspire/mgr/v1/commission/goodordervaluepercent/goodordervaluepercent.proto

package goodordervaluepercent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Manager_CreateOrderValuePercent_FullMethodName     = "/inspire.manager.commission.goodordervaluepercent.v1.Manager/CreateOrderValuePercent"
	Manager_CreateOrderValuePercents_FullMethodName    = "/inspire.manager.commission.goodordervaluepercent.v1.Manager/CreateOrderValuePercents"
	Manager_UpdateOrderValuePercent_FullMethodName     = "/inspire.manager.commission.goodordervaluepercent.v1.Manager/UpdateOrderValuePercent"
	Manager_GetOrderValuePercent_FullMethodName        = "/inspire.manager.commission.goodordervaluepercent.v1.Manager/GetOrderValuePercent"
	Manager_GetOrderValuePercentOnly_FullMethodName    = "/inspire.manager.commission.goodordervaluepercent.v1.Manager/GetOrderValuePercentOnly"
	Manager_GetOrderValuePercents_FullMethodName       = "/inspire.manager.commission.goodordervaluepercent.v1.Manager/GetOrderValuePercents"
	Manager_ExistOrderValuePercent_FullMethodName      = "/inspire.manager.commission.goodordervaluepercent.v1.Manager/ExistOrderValuePercent"
	Manager_ExistOrderValuePercentConds_FullMethodName = "/inspire.manager.commission.goodordervaluepercent.v1.Manager/ExistOrderValuePercentConds"
	Manager_CountOrderValuePercents_FullMethodName     = "/inspire.manager.commission.goodordervaluepercent.v1.Manager/CountOrderValuePercents"
	Manager_DeleteOrderValuePercent_FullMethodName     = "/inspire.manager.commission.goodordervaluepercent.v1.Manager/DeleteOrderValuePercent"
)

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateOrderValuePercent(ctx context.Context, in *CreateOrderValuePercentRequest, opts ...grpc.CallOption) (*CreateOrderValuePercentResponse, error)
	CreateOrderValuePercents(ctx context.Context, in *CreateOrderValuePercentsRequest, opts ...grpc.CallOption) (*CreateOrderValuePercentsResponse, error)
	UpdateOrderValuePercent(ctx context.Context, in *UpdateOrderValuePercentRequest, opts ...grpc.CallOption) (*UpdateOrderValuePercentResponse, error)
	GetOrderValuePercent(ctx context.Context, in *GetOrderValuePercentRequest, opts ...grpc.CallOption) (*GetOrderValuePercentResponse, error)
	GetOrderValuePercentOnly(ctx context.Context, in *GetOrderValuePercentOnlyRequest, opts ...grpc.CallOption) (*GetOrderValuePercentOnlyResponse, error)
	GetOrderValuePercents(ctx context.Context, in *GetOrderValuePercentsRequest, opts ...grpc.CallOption) (*GetOrderValuePercentsResponse, error)
	ExistOrderValuePercent(ctx context.Context, in *ExistOrderValuePercentRequest, opts ...grpc.CallOption) (*ExistOrderValuePercentResponse, error)
	ExistOrderValuePercentConds(ctx context.Context, in *ExistOrderValuePercentCondsRequest, opts ...grpc.CallOption) (*ExistOrderValuePercentCondsResponse, error)
	CountOrderValuePercents(ctx context.Context, in *CountOrderValuePercentsRequest, opts ...grpc.CallOption) (*CountOrderValuePercentsResponse, error)
	DeleteOrderValuePercent(ctx context.Context, in *DeleteOrderValuePercentRequest, opts ...grpc.CallOption) (*DeleteOrderValuePercentResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateOrderValuePercent(ctx context.Context, in *CreateOrderValuePercentRequest, opts ...grpc.CallOption) (*CreateOrderValuePercentResponse, error) {
	out := new(CreateOrderValuePercentResponse)
	err := c.cc.Invoke(ctx, Manager_CreateOrderValuePercent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateOrderValuePercents(ctx context.Context, in *CreateOrderValuePercentsRequest, opts ...grpc.CallOption) (*CreateOrderValuePercentsResponse, error) {
	out := new(CreateOrderValuePercentsResponse)
	err := c.cc.Invoke(ctx, Manager_CreateOrderValuePercents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateOrderValuePercent(ctx context.Context, in *UpdateOrderValuePercentRequest, opts ...grpc.CallOption) (*UpdateOrderValuePercentResponse, error) {
	out := new(UpdateOrderValuePercentResponse)
	err := c.cc.Invoke(ctx, Manager_UpdateOrderValuePercent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetOrderValuePercent(ctx context.Context, in *GetOrderValuePercentRequest, opts ...grpc.CallOption) (*GetOrderValuePercentResponse, error) {
	out := new(GetOrderValuePercentResponse)
	err := c.cc.Invoke(ctx, Manager_GetOrderValuePercent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetOrderValuePercentOnly(ctx context.Context, in *GetOrderValuePercentOnlyRequest, opts ...grpc.CallOption) (*GetOrderValuePercentOnlyResponse, error) {
	out := new(GetOrderValuePercentOnlyResponse)
	err := c.cc.Invoke(ctx, Manager_GetOrderValuePercentOnly_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetOrderValuePercents(ctx context.Context, in *GetOrderValuePercentsRequest, opts ...grpc.CallOption) (*GetOrderValuePercentsResponse, error) {
	out := new(GetOrderValuePercentsResponse)
	err := c.cc.Invoke(ctx, Manager_GetOrderValuePercents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistOrderValuePercent(ctx context.Context, in *ExistOrderValuePercentRequest, opts ...grpc.CallOption) (*ExistOrderValuePercentResponse, error) {
	out := new(ExistOrderValuePercentResponse)
	err := c.cc.Invoke(ctx, Manager_ExistOrderValuePercent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistOrderValuePercentConds(ctx context.Context, in *ExistOrderValuePercentCondsRequest, opts ...grpc.CallOption) (*ExistOrderValuePercentCondsResponse, error) {
	out := new(ExistOrderValuePercentCondsResponse)
	err := c.cc.Invoke(ctx, Manager_ExistOrderValuePercentConds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountOrderValuePercents(ctx context.Context, in *CountOrderValuePercentsRequest, opts ...grpc.CallOption) (*CountOrderValuePercentsResponse, error) {
	out := new(CountOrderValuePercentsResponse)
	err := c.cc.Invoke(ctx, Manager_CountOrderValuePercents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteOrderValuePercent(ctx context.Context, in *DeleteOrderValuePercentRequest, opts ...grpc.CallOption) (*DeleteOrderValuePercentResponse, error) {
	out := new(DeleteOrderValuePercentResponse)
	err := c.cc.Invoke(ctx, Manager_DeleteOrderValuePercent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateOrderValuePercent(context.Context, *CreateOrderValuePercentRequest) (*CreateOrderValuePercentResponse, error)
	CreateOrderValuePercents(context.Context, *CreateOrderValuePercentsRequest) (*CreateOrderValuePercentsResponse, error)
	UpdateOrderValuePercent(context.Context, *UpdateOrderValuePercentRequest) (*UpdateOrderValuePercentResponse, error)
	GetOrderValuePercent(context.Context, *GetOrderValuePercentRequest) (*GetOrderValuePercentResponse, error)
	GetOrderValuePercentOnly(context.Context, *GetOrderValuePercentOnlyRequest) (*GetOrderValuePercentOnlyResponse, error)
	GetOrderValuePercents(context.Context, *GetOrderValuePercentsRequest) (*GetOrderValuePercentsResponse, error)
	ExistOrderValuePercent(context.Context, *ExistOrderValuePercentRequest) (*ExistOrderValuePercentResponse, error)
	ExistOrderValuePercentConds(context.Context, *ExistOrderValuePercentCondsRequest) (*ExistOrderValuePercentCondsResponse, error)
	CountOrderValuePercents(context.Context, *CountOrderValuePercentsRequest) (*CountOrderValuePercentsResponse, error)
	DeleteOrderValuePercent(context.Context, *DeleteOrderValuePercentRequest) (*DeleteOrderValuePercentResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateOrderValuePercent(context.Context, *CreateOrderValuePercentRequest) (*CreateOrderValuePercentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrderValuePercent not implemented")
}
func (UnimplementedManagerServer) CreateOrderValuePercents(context.Context, *CreateOrderValuePercentsRequest) (*CreateOrderValuePercentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrderValuePercents not implemented")
}
func (UnimplementedManagerServer) UpdateOrderValuePercent(context.Context, *UpdateOrderValuePercentRequest) (*UpdateOrderValuePercentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderValuePercent not implemented")
}
func (UnimplementedManagerServer) GetOrderValuePercent(context.Context, *GetOrderValuePercentRequest) (*GetOrderValuePercentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderValuePercent not implemented")
}
func (UnimplementedManagerServer) GetOrderValuePercentOnly(context.Context, *GetOrderValuePercentOnlyRequest) (*GetOrderValuePercentOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderValuePercentOnly not implemented")
}
func (UnimplementedManagerServer) GetOrderValuePercents(context.Context, *GetOrderValuePercentsRequest) (*GetOrderValuePercentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderValuePercents not implemented")
}
func (UnimplementedManagerServer) ExistOrderValuePercent(context.Context, *ExistOrderValuePercentRequest) (*ExistOrderValuePercentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistOrderValuePercent not implemented")
}
func (UnimplementedManagerServer) ExistOrderValuePercentConds(context.Context, *ExistOrderValuePercentCondsRequest) (*ExistOrderValuePercentCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistOrderValuePercentConds not implemented")
}
func (UnimplementedManagerServer) CountOrderValuePercents(context.Context, *CountOrderValuePercentsRequest) (*CountOrderValuePercentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountOrderValuePercents not implemented")
}
func (UnimplementedManagerServer) DeleteOrderValuePercent(context.Context, *DeleteOrderValuePercentRequest) (*DeleteOrderValuePercentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrderValuePercent not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateOrderValuePercent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderValuePercentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateOrderValuePercent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_CreateOrderValuePercent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateOrderValuePercent(ctx, req.(*CreateOrderValuePercentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateOrderValuePercents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderValuePercentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateOrderValuePercents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_CreateOrderValuePercents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateOrderValuePercents(ctx, req.(*CreateOrderValuePercentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateOrderValuePercent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderValuePercentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateOrderValuePercent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_UpdateOrderValuePercent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateOrderValuePercent(ctx, req.(*UpdateOrderValuePercentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetOrderValuePercent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderValuePercentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetOrderValuePercent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetOrderValuePercent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetOrderValuePercent(ctx, req.(*GetOrderValuePercentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetOrderValuePercentOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderValuePercentOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetOrderValuePercentOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetOrderValuePercentOnly_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetOrderValuePercentOnly(ctx, req.(*GetOrderValuePercentOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetOrderValuePercents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderValuePercentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetOrderValuePercents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetOrderValuePercents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetOrderValuePercents(ctx, req.(*GetOrderValuePercentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistOrderValuePercent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistOrderValuePercentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistOrderValuePercent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_ExistOrderValuePercent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistOrderValuePercent(ctx, req.(*ExistOrderValuePercentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistOrderValuePercentConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistOrderValuePercentCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistOrderValuePercentConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_ExistOrderValuePercentConds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistOrderValuePercentConds(ctx, req.(*ExistOrderValuePercentCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountOrderValuePercents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountOrderValuePercentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountOrderValuePercents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_CountOrderValuePercents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountOrderValuePercents(ctx, req.(*CountOrderValuePercentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteOrderValuePercent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrderValuePercentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteOrderValuePercent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_DeleteOrderValuePercent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteOrderValuePercent(ctx, req.(*DeleteOrderValuePercentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inspire.manager.commission.goodordervaluepercent.v1.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrderValuePercent",
			Handler:    _Manager_CreateOrderValuePercent_Handler,
		},
		{
			MethodName: "CreateOrderValuePercents",
			Handler:    _Manager_CreateOrderValuePercents_Handler,
		},
		{
			MethodName: "UpdateOrderValuePercent",
			Handler:    _Manager_UpdateOrderValuePercent_Handler,
		},
		{
			MethodName: "GetOrderValuePercent",
			Handler:    _Manager_GetOrderValuePercent_Handler,
		},
		{
			MethodName: "GetOrderValuePercentOnly",
			Handler:    _Manager_GetOrderValuePercentOnly_Handler,
		},
		{
			MethodName: "GetOrderValuePercents",
			Handler:    _Manager_GetOrderValuePercents_Handler,
		},
		{
			MethodName: "ExistOrderValuePercent",
			Handler:    _Manager_ExistOrderValuePercent_Handler,
		},
		{
			MethodName: "ExistOrderValuePercentConds",
			Handler:    _Manager_ExistOrderValuePercentConds_Handler,
		},
		{
			MethodName: "CountOrderValuePercents",
			Handler:    _Manager_CountOrderValuePercents_Handler,
		},
		{
			MethodName: "DeleteOrderValuePercent",
			Handler:    _Manager_DeleteOrderValuePercent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/inspire/mgr/v1/commission/goodordervaluepercent/goodordervaluepercent.proto",
}
