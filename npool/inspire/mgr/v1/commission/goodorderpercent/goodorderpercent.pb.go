// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.18.1
// source: npool/inspire/mgr/v1/commission/goodorderpercent/goodorderpercent.proto

package goodorderpercent

import (
	npool "github.com/NpoolPlatform/message/npool"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OrderPercentReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      *string `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	AppID   *string `protobuf:"bytes,20,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	UserID  *string `protobuf:"bytes,30,opt,name=UserID,proto3,oneof" json:"UserID,omitempty"`
	GoodID  *string `protobuf:"bytes,40,opt,name=GoodID,proto3,oneof" json:"GoodID,omitempty"`
	Percent *string `protobuf:"bytes,50,opt,name=Percent,proto3,oneof" json:"Percent,omitempty"`
	StartAt *uint32 `protobuf:"varint,60,opt,name=StartAt,proto3,oneof" json:"StartAt,omitempty"`
	EndAt   *uint32 `protobuf:"varint,70,opt,name=EndAt,proto3,oneof" json:"EndAt,omitempty"`
}

func (x *OrderPercentReq) Reset() {
	*x = OrderPercentReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderPercentReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderPercentReq) ProtoMessage() {}

func (x *OrderPercentReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderPercentReq.ProtoReflect.Descriptor instead.
func (*OrderPercentReq) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_rawDescGZIP(), []int{0}
}

func (x *OrderPercentReq) GetID() string {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return ""
}

func (x *OrderPercentReq) GetAppID() string {
	if x != nil && x.AppID != nil {
		return *x.AppID
	}
	return ""
}

func (x *OrderPercentReq) GetUserID() string {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return ""
}

func (x *OrderPercentReq) GetGoodID() string {
	if x != nil && x.GoodID != nil {
		return *x.GoodID
	}
	return ""
}

func (x *OrderPercentReq) GetPercent() string {
	if x != nil && x.Percent != nil {
		return *x.Percent
	}
	return ""
}

func (x *OrderPercentReq) GetStartAt() uint32 {
	if x != nil && x.StartAt != nil {
		return *x.StartAt
	}
	return 0
}

func (x *OrderPercentReq) GetEndAt() uint32 {
	if x != nil && x.EndAt != nil {
		return *x.EndAt
	}
	return 0
}

type OrderPercent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID     string `protobuf:"bytes,20,opt,name=AppID,proto3" json:"AppID,omitempty"`
	UserID    string `protobuf:"bytes,30,opt,name=UserID,proto3" json:"UserID,omitempty"`
	GoodID    string `protobuf:"bytes,40,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
	Percent   string `protobuf:"bytes,50,opt,name=Percent,proto3" json:"Percent,omitempty"`
	StartAt   uint32 `protobuf:"varint,60,opt,name=StartAt,proto3" json:"StartAt,omitempty"`
	EndAt     uint32 `protobuf:"varint,70,opt,name=EndAt,proto3" json:"EndAt,omitempty"`
	CreatedAt uint32 `protobuf:"varint,80,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt uint32 `protobuf:"varint,90,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (x *OrderPercent) Reset() {
	*x = OrderPercent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderPercent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderPercent) ProtoMessage() {}

func (x *OrderPercent) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderPercent.ProtoReflect.Descriptor instead.
func (*OrderPercent) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_rawDescGZIP(), []int{1}
}

func (x *OrderPercent) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *OrderPercent) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *OrderPercent) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *OrderPercent) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *OrderPercent) GetPercent() string {
	if x != nil {
		return x.Percent
	}
	return ""
}

func (x *OrderPercent) GetStartAt() uint32 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *OrderPercent) GetEndAt() uint32 {
	if x != nil {
		return x.EndAt
	}
	return 0
}

func (x *OrderPercent) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *OrderPercent) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      *npool.StringVal      `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	AppID   *npool.StringVal      `protobuf:"bytes,20,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	UserID  *npool.StringVal      `protobuf:"bytes,30,opt,name=UserID,proto3,oneof" json:"UserID,omitempty"`
	GoodID  *npool.StringVal      `protobuf:"bytes,40,opt,name=GoodID,proto3,oneof" json:"GoodID,omitempty"`
	EndAt   *npool.Uint32Val      `protobuf:"bytes,50,opt,name=EndAt,proto3,oneof" json:"EndAt,omitempty"`
	UserIDs *npool.StringSliceVal `protobuf:"bytes,60,opt,name=UserIDs,proto3,oneof" json:"UserIDs,omitempty"`
	GoodIDs *npool.StringSliceVal `protobuf:"bytes,70,opt,name=GoodIDs,proto3,oneof" json:"GoodIDs,omitempty"`
	StartAt *npool.Uint32Val      `protobuf:"bytes,80,opt,name=StartAt,proto3,oneof" json:"StartAt,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *npool.StringVal {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetAppID() *npool.StringVal {
	if x != nil {
		return x.AppID
	}
	return nil
}

func (x *Conds) GetUserID() *npool.StringVal {
	if x != nil {
		return x.UserID
	}
	return nil
}

func (x *Conds) GetGoodID() *npool.StringVal {
	if x != nil {
		return x.GoodID
	}
	return nil
}

func (x *Conds) GetEndAt() *npool.Uint32Val {
	if x != nil {
		return x.EndAt
	}
	return nil
}

func (x *Conds) GetUserIDs() *npool.StringSliceVal {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

func (x *Conds) GetGoodIDs() *npool.StringSliceVal {
	if x != nil {
		return x.GoodIDs
	}
	return nil
}

func (x *Conds) GetStartAt() *npool.Uint32Val {
	if x != nil {
		return x.StartAt
	}
	return nil
}

type CreateOrderPercentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *OrderPercentReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateOrderPercentRequest) Reset() {
	*x = CreateOrderPercentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrderPercentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderPercentRequest) ProtoMessage() {}

func (x *CreateOrderPercentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderPercentRequest.ProtoReflect.Descriptor instead.
func (*CreateOrderPercentRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_rawDescGZIP(), []int{3}
}

func (x *CreateOrderPercentRequest) GetInfo() *OrderPercentReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateOrderPercentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *OrderPercent `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateOrderPercentResponse) Reset() {
	*x = CreateOrderPercentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrderPercentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderPercentResponse) ProtoMessage() {}

func (x *CreateOrderPercentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderPercentResponse.ProtoReflect.Descriptor instead.
func (*CreateOrderPercentResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_rawDescGZIP(), []int{4}
}

func (x *CreateOrderPercentResponse) GetInfo() *OrderPercent {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateOrderPercentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*OrderPercentReq `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateOrderPercentsRequest) Reset() {
	*x = CreateOrderPercentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrderPercentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderPercentsRequest) ProtoMessage() {}

func (x *CreateOrderPercentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderPercentsRequest.ProtoReflect.Descriptor instead.
func (*CreateOrderPercentsRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_rawDescGZIP(), []int{5}
}

func (x *CreateOrderPercentsRequest) GetInfos() []*OrderPercentReq {
	if x != nil {
		return x.Infos
	}
	return nil
}

type CreateOrderPercentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*OrderPercent `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateOrderPercentsResponse) Reset() {
	*x = CreateOrderPercentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrderPercentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderPercentsResponse) ProtoMessage() {}

func (x *CreateOrderPercentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderPercentsResponse.ProtoReflect.Descriptor instead.
func (*CreateOrderPercentsResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_rawDescGZIP(), []int{6}
}

func (x *CreateOrderPercentsResponse) GetInfos() []*OrderPercent {
	if x != nil {
		return x.Infos
	}
	return nil
}

type UpdateOrderPercentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *OrderPercentReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateOrderPercentRequest) Reset() {
	*x = UpdateOrderPercentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrderPercentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrderPercentRequest) ProtoMessage() {}

func (x *UpdateOrderPercentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrderPercentRequest.ProtoReflect.Descriptor instead.
func (*UpdateOrderPercentRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateOrderPercentRequest) GetInfo() *OrderPercentReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateOrderPercentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *OrderPercent `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateOrderPercentResponse) Reset() {
	*x = UpdateOrderPercentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOrderPercentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOrderPercentResponse) ProtoMessage() {}

func (x *UpdateOrderPercentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOrderPercentResponse.ProtoReflect.Descriptor instead.
func (*UpdateOrderPercentResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateOrderPercentResponse) GetInfo() *OrderPercent {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetOrderPercentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetOrderPercentRequest) Reset() {
	*x = GetOrderPercentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderPercentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderPercentRequest) ProtoMessage() {}

func (x *GetOrderPercentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderPercentRequest.ProtoReflect.Descriptor instead.
func (*GetOrderPercentRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_rawDescGZIP(), []int{9}
}

func (x *GetOrderPercentRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetOrderPercentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *OrderPercent `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetOrderPercentResponse) Reset() {
	*x = GetOrderPercentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderPercentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderPercentResponse) ProtoMessage() {}

func (x *GetOrderPercentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderPercentResponse.ProtoReflect.Descriptor instead.
func (*GetOrderPercentResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_rawDescGZIP(), []int{10}
}

func (x *GetOrderPercentResponse) GetInfo() *OrderPercent {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetOrderPercentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetOrderPercentsRequest) Reset() {
	*x = GetOrderPercentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderPercentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderPercentsRequest) ProtoMessage() {}

func (x *GetOrderPercentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderPercentsRequest.ProtoReflect.Descriptor instead.
func (*GetOrderPercentsRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_rawDescGZIP(), []int{11}
}

func (x *GetOrderPercentsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetOrderPercentsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetOrderPercentsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetOrderPercentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*OrderPercent `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32          `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetOrderPercentsResponse) Reset() {
	*x = GetOrderPercentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderPercentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderPercentsResponse) ProtoMessage() {}

func (x *GetOrderPercentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderPercentsResponse.ProtoReflect.Descriptor instead.
func (*GetOrderPercentsResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_rawDescGZIP(), []int{12}
}

func (x *GetOrderPercentsResponse) GetInfos() []*OrderPercent {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetOrderPercentsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetOrderPercentOnlyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *GetOrderPercentOnlyRequest) Reset() {
	*x = GetOrderPercentOnlyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderPercentOnlyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderPercentOnlyRequest) ProtoMessage() {}

func (x *GetOrderPercentOnlyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderPercentOnlyRequest.ProtoReflect.Descriptor instead.
func (*GetOrderPercentOnlyRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_rawDescGZIP(), []int{13}
}

func (x *GetOrderPercentOnlyRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type GetOrderPercentOnlyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *OrderPercent `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetOrderPercentOnlyResponse) Reset() {
	*x = GetOrderPercentOnlyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderPercentOnlyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderPercentOnlyResponse) ProtoMessage() {}

func (x *GetOrderPercentOnlyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderPercentOnlyResponse.ProtoReflect.Descriptor instead.
func (*GetOrderPercentOnlyResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_rawDescGZIP(), []int{14}
}

func (x *GetOrderPercentOnlyResponse) GetInfo() *OrderPercent {
	if x != nil {
		return x.Info
	}
	return nil
}

type ExistOrderPercentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ExistOrderPercentRequest) Reset() {
	*x = ExistOrderPercentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistOrderPercentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistOrderPercentRequest) ProtoMessage() {}

func (x *ExistOrderPercentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistOrderPercentRequest.ProtoReflect.Descriptor instead.
func (*ExistOrderPercentRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_rawDescGZIP(), []int{15}
}

func (x *ExistOrderPercentRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ExistOrderPercentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistOrderPercentResponse) Reset() {
	*x = ExistOrderPercentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistOrderPercentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistOrderPercentResponse) ProtoMessage() {}

func (x *ExistOrderPercentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistOrderPercentResponse.ProtoReflect.Descriptor instead.
func (*ExistOrderPercentResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_rawDescGZIP(), []int{16}
}

func (x *ExistOrderPercentResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type ExistOrderPercentCondsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *ExistOrderPercentCondsRequest) Reset() {
	*x = ExistOrderPercentCondsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistOrderPercentCondsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistOrderPercentCondsRequest) ProtoMessage() {}

func (x *ExistOrderPercentCondsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistOrderPercentCondsRequest.ProtoReflect.Descriptor instead.
func (*ExistOrderPercentCondsRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_rawDescGZIP(), []int{17}
}

func (x *ExistOrderPercentCondsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type ExistOrderPercentCondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistOrderPercentCondsResponse) Reset() {
	*x = ExistOrderPercentCondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistOrderPercentCondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistOrderPercentCondsResponse) ProtoMessage() {}

func (x *ExistOrderPercentCondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistOrderPercentCondsResponse.ProtoReflect.Descriptor instead.
func (*ExistOrderPercentCondsResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_rawDescGZIP(), []int{18}
}

func (x *ExistOrderPercentCondsResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type CountOrderPercentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *CountOrderPercentsRequest) Reset() {
	*x = CountOrderPercentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountOrderPercentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountOrderPercentsRequest) ProtoMessage() {}

func (x *CountOrderPercentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountOrderPercentsRequest.ProtoReflect.Descriptor instead.
func (*CountOrderPercentsRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_rawDescGZIP(), []int{19}
}

func (x *CountOrderPercentsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type CountOrderPercentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info uint32 `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CountOrderPercentsResponse) Reset() {
	*x = CountOrderPercentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountOrderPercentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountOrderPercentsResponse) ProtoMessage() {}

func (x *CountOrderPercentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountOrderPercentsResponse.ProtoReflect.Descriptor instead.
func (*CountOrderPercentsResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_rawDescGZIP(), []int{20}
}

func (x *CountOrderPercentsResponse) GetInfo() uint32 {
	if x != nil {
		return x.Info
	}
	return 0
}

type DeleteOrderPercentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *DeleteOrderPercentRequest) Reset() {
	*x = DeleteOrderPercentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrderPercentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrderPercentRequest) ProtoMessage() {}

func (x *DeleteOrderPercentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrderPercentRequest.ProtoReflect.Descriptor instead.
func (*DeleteOrderPercentRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteOrderPercentRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type DeleteOrderPercentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *OrderPercent `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteOrderPercentResponse) Reset() {
	*x = DeleteOrderPercentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteOrderPercentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteOrderPercentResponse) ProtoMessage() {}

func (x *DeleteOrderPercentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteOrderPercentResponse.ProtoReflect.Descriptor instead.
func (*DeleteOrderPercentResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteOrderPercentResponse) GetInfo() *OrderPercent {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto protoreflect.FileDescriptor

var file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_rawDesc = []byte{
	0x0a, 0x47, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f,
	0x6d, 0x67, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x11, 0x6e, 0x70, 0x6f, 0x6f, 0x6c,
	0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9d, 0x02, 0x0a,
	0x0f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x13, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02,
	0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x88, 0x01, 0x01,
	0x12, 0x1b, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x41, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x05, 0x52, 0x07, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x45, 0x6e, 0x64, 0x41,
	0x74, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x06, 0x52, 0x05, 0x45, 0x6e, 0x64, 0x41, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x22, 0xea, 0x01, 0x0a,
	0x0c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a,
	0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x47,
	0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f,
	0x64, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x64, 0x41, 0x74,
	0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xf0, 0x03, 0x0a, 0x05, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a,
	0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x48, 0x01, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x48, 0x02, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12,
	0x30, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x2e, 0x0a, 0x05, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x04, 0x52, 0x05, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x37, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x3c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x05, 0x52, 0x07,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x07, 0x47, 0x6f,
	0x6f, 0x64, 0x49, 0x44, 0x73, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69,
	0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x06, 0x52, 0x07, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x50,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x07, 0x52, 0x07, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x41, 0x70, 0x70, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x64, 0x41, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x73,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x22, 0x70, 0x0a, 0x19,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6e,
	0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x73,
	0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x05,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x69, 0x6e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x52, 0x05, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x22, 0x71, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x52, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52,
	0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x70, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3f, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6e, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x28, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x44, 0x22, 0x6b, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x69, 0x6e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x94, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x05, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x84, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x69, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x05, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x6f, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2a, 0x0a, 0x18, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x2f, 0x0a, 0x19, 0x45, 0x78, 0x69, 0x73, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6c, 0x0a, 0x1d, 0x45, 0x78, 0x69, 0x73, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x22, 0x34, 0x0a, 0x1e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x68, 0x0a, 0x19, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4b, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x22, 0x30, 0x0a, 0x1a, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2b, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x44, 0x22, 0x6e, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x50, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x32, 0xe9, 0x0d, 0x0a, 0x07, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12,
	0xad, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x49, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x4a, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0xb0, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4a, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x4b, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0xad, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x49, 0x2e, 0x69, 0x6e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x4a, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0xa4, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x46, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47,
	0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xb0, 0x01, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x6c,
	0x79, 0x12, 0x4a, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4b, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x4f, 0x6e,
	0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa7, 0x01, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x47, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x48, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xaa, 0x01, 0x0a, 0x11, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x48, 0x2e, 0x69,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x49, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0xb9, 0x01, 0x0a, 0x16, 0x45, 0x78, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x4d,
	0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4e, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0xad, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x49, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x4a, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0xad, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x49, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x4a, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x53, 0x5a, 0x51, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70,
	0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2f, 0x6d, 0x67, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_rawDescOnce sync.Once
	file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_rawDescData = file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_rawDesc
)

func file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_rawDescGZIP() []byte {
	file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_rawDescOnce.Do(func() {
		file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_rawDescData)
	})
	return file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_rawDescData
}

var file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_goTypes = []interface{}{
	(*OrderPercentReq)(nil),                // 0: inspire.manager.commission.goodorderpercent.v1.OrderPercentReq
	(*OrderPercent)(nil),                   // 1: inspire.manager.commission.goodorderpercent.v1.OrderPercent
	(*Conds)(nil),                          // 2: inspire.manager.commission.goodorderpercent.v1.Conds
	(*CreateOrderPercentRequest)(nil),      // 3: inspire.manager.commission.goodorderpercent.v1.CreateOrderPercentRequest
	(*CreateOrderPercentResponse)(nil),     // 4: inspire.manager.commission.goodorderpercent.v1.CreateOrderPercentResponse
	(*CreateOrderPercentsRequest)(nil),     // 5: inspire.manager.commission.goodorderpercent.v1.CreateOrderPercentsRequest
	(*CreateOrderPercentsResponse)(nil),    // 6: inspire.manager.commission.goodorderpercent.v1.CreateOrderPercentsResponse
	(*UpdateOrderPercentRequest)(nil),      // 7: inspire.manager.commission.goodorderpercent.v1.UpdateOrderPercentRequest
	(*UpdateOrderPercentResponse)(nil),     // 8: inspire.manager.commission.goodorderpercent.v1.UpdateOrderPercentResponse
	(*GetOrderPercentRequest)(nil),         // 9: inspire.manager.commission.goodorderpercent.v1.GetOrderPercentRequest
	(*GetOrderPercentResponse)(nil),        // 10: inspire.manager.commission.goodorderpercent.v1.GetOrderPercentResponse
	(*GetOrderPercentsRequest)(nil),        // 11: inspire.manager.commission.goodorderpercent.v1.GetOrderPercentsRequest
	(*GetOrderPercentsResponse)(nil),       // 12: inspire.manager.commission.goodorderpercent.v1.GetOrderPercentsResponse
	(*GetOrderPercentOnlyRequest)(nil),     // 13: inspire.manager.commission.goodorderpercent.v1.GetOrderPercentOnlyRequest
	(*GetOrderPercentOnlyResponse)(nil),    // 14: inspire.manager.commission.goodorderpercent.v1.GetOrderPercentOnlyResponse
	(*ExistOrderPercentRequest)(nil),       // 15: inspire.manager.commission.goodorderpercent.v1.ExistOrderPercentRequest
	(*ExistOrderPercentResponse)(nil),      // 16: inspire.manager.commission.goodorderpercent.v1.ExistOrderPercentResponse
	(*ExistOrderPercentCondsRequest)(nil),  // 17: inspire.manager.commission.goodorderpercent.v1.ExistOrderPercentCondsRequest
	(*ExistOrderPercentCondsResponse)(nil), // 18: inspire.manager.commission.goodorderpercent.v1.ExistOrderPercentCondsResponse
	(*CountOrderPercentsRequest)(nil),      // 19: inspire.manager.commission.goodorderpercent.v1.CountOrderPercentsRequest
	(*CountOrderPercentsResponse)(nil),     // 20: inspire.manager.commission.goodorderpercent.v1.CountOrderPercentsResponse
	(*DeleteOrderPercentRequest)(nil),      // 21: inspire.manager.commission.goodorderpercent.v1.DeleteOrderPercentRequest
	(*DeleteOrderPercentResponse)(nil),     // 22: inspire.manager.commission.goodorderpercent.v1.DeleteOrderPercentResponse
	(*npool.StringVal)(nil),                // 23: npool.v1.StringVal
	(*npool.Uint32Val)(nil),                // 24: npool.v1.Uint32Val
	(*npool.StringSliceVal)(nil),           // 25: npool.v1.StringSliceVal
}
var file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_depIdxs = []int32{
	23, // 0: inspire.manager.commission.goodorderpercent.v1.Conds.ID:type_name -> npool.v1.StringVal
	23, // 1: inspire.manager.commission.goodorderpercent.v1.Conds.AppID:type_name -> npool.v1.StringVal
	23, // 2: inspire.manager.commission.goodorderpercent.v1.Conds.UserID:type_name -> npool.v1.StringVal
	23, // 3: inspire.manager.commission.goodorderpercent.v1.Conds.GoodID:type_name -> npool.v1.StringVal
	24, // 4: inspire.manager.commission.goodorderpercent.v1.Conds.EndAt:type_name -> npool.v1.Uint32Val
	25, // 5: inspire.manager.commission.goodorderpercent.v1.Conds.UserIDs:type_name -> npool.v1.StringSliceVal
	25, // 6: inspire.manager.commission.goodorderpercent.v1.Conds.GoodIDs:type_name -> npool.v1.StringSliceVal
	24, // 7: inspire.manager.commission.goodorderpercent.v1.Conds.StartAt:type_name -> npool.v1.Uint32Val
	0,  // 8: inspire.manager.commission.goodorderpercent.v1.CreateOrderPercentRequest.Info:type_name -> inspire.manager.commission.goodorderpercent.v1.OrderPercentReq
	1,  // 9: inspire.manager.commission.goodorderpercent.v1.CreateOrderPercentResponse.Info:type_name -> inspire.manager.commission.goodorderpercent.v1.OrderPercent
	0,  // 10: inspire.manager.commission.goodorderpercent.v1.CreateOrderPercentsRequest.Infos:type_name -> inspire.manager.commission.goodorderpercent.v1.OrderPercentReq
	1,  // 11: inspire.manager.commission.goodorderpercent.v1.CreateOrderPercentsResponse.Infos:type_name -> inspire.manager.commission.goodorderpercent.v1.OrderPercent
	0,  // 12: inspire.manager.commission.goodorderpercent.v1.UpdateOrderPercentRequest.Info:type_name -> inspire.manager.commission.goodorderpercent.v1.OrderPercentReq
	1,  // 13: inspire.manager.commission.goodorderpercent.v1.UpdateOrderPercentResponse.Info:type_name -> inspire.manager.commission.goodorderpercent.v1.OrderPercent
	1,  // 14: inspire.manager.commission.goodorderpercent.v1.GetOrderPercentResponse.Info:type_name -> inspire.manager.commission.goodorderpercent.v1.OrderPercent
	2,  // 15: inspire.manager.commission.goodorderpercent.v1.GetOrderPercentsRequest.Conds:type_name -> inspire.manager.commission.goodorderpercent.v1.Conds
	1,  // 16: inspire.manager.commission.goodorderpercent.v1.GetOrderPercentsResponse.Infos:type_name -> inspire.manager.commission.goodorderpercent.v1.OrderPercent
	2,  // 17: inspire.manager.commission.goodorderpercent.v1.GetOrderPercentOnlyRequest.Conds:type_name -> inspire.manager.commission.goodorderpercent.v1.Conds
	1,  // 18: inspire.manager.commission.goodorderpercent.v1.GetOrderPercentOnlyResponse.Info:type_name -> inspire.manager.commission.goodorderpercent.v1.OrderPercent
	2,  // 19: inspire.manager.commission.goodorderpercent.v1.ExistOrderPercentCondsRequest.Conds:type_name -> inspire.manager.commission.goodorderpercent.v1.Conds
	2,  // 20: inspire.manager.commission.goodorderpercent.v1.CountOrderPercentsRequest.Conds:type_name -> inspire.manager.commission.goodorderpercent.v1.Conds
	1,  // 21: inspire.manager.commission.goodorderpercent.v1.DeleteOrderPercentResponse.Info:type_name -> inspire.manager.commission.goodorderpercent.v1.OrderPercent
	3,  // 22: inspire.manager.commission.goodorderpercent.v1.Manager.CreateOrderPercent:input_type -> inspire.manager.commission.goodorderpercent.v1.CreateOrderPercentRequest
	5,  // 23: inspire.manager.commission.goodorderpercent.v1.Manager.CreateOrderPercents:input_type -> inspire.manager.commission.goodorderpercent.v1.CreateOrderPercentsRequest
	7,  // 24: inspire.manager.commission.goodorderpercent.v1.Manager.UpdateOrderPercent:input_type -> inspire.manager.commission.goodorderpercent.v1.UpdateOrderPercentRequest
	9,  // 25: inspire.manager.commission.goodorderpercent.v1.Manager.GetOrderPercent:input_type -> inspire.manager.commission.goodorderpercent.v1.GetOrderPercentRequest
	13, // 26: inspire.manager.commission.goodorderpercent.v1.Manager.GetOrderPercentOnly:input_type -> inspire.manager.commission.goodorderpercent.v1.GetOrderPercentOnlyRequest
	11, // 27: inspire.manager.commission.goodorderpercent.v1.Manager.GetOrderPercents:input_type -> inspire.manager.commission.goodorderpercent.v1.GetOrderPercentsRequest
	15, // 28: inspire.manager.commission.goodorderpercent.v1.Manager.ExistOrderPercent:input_type -> inspire.manager.commission.goodorderpercent.v1.ExistOrderPercentRequest
	17, // 29: inspire.manager.commission.goodorderpercent.v1.Manager.ExistOrderPercentConds:input_type -> inspire.manager.commission.goodorderpercent.v1.ExistOrderPercentCondsRequest
	19, // 30: inspire.manager.commission.goodorderpercent.v1.Manager.CountOrderPercents:input_type -> inspire.manager.commission.goodorderpercent.v1.CountOrderPercentsRequest
	21, // 31: inspire.manager.commission.goodorderpercent.v1.Manager.DeleteOrderPercent:input_type -> inspire.manager.commission.goodorderpercent.v1.DeleteOrderPercentRequest
	4,  // 32: inspire.manager.commission.goodorderpercent.v1.Manager.CreateOrderPercent:output_type -> inspire.manager.commission.goodorderpercent.v1.CreateOrderPercentResponse
	6,  // 33: inspire.manager.commission.goodorderpercent.v1.Manager.CreateOrderPercents:output_type -> inspire.manager.commission.goodorderpercent.v1.CreateOrderPercentsResponse
	8,  // 34: inspire.manager.commission.goodorderpercent.v1.Manager.UpdateOrderPercent:output_type -> inspire.manager.commission.goodorderpercent.v1.UpdateOrderPercentResponse
	10, // 35: inspire.manager.commission.goodorderpercent.v1.Manager.GetOrderPercent:output_type -> inspire.manager.commission.goodorderpercent.v1.GetOrderPercentResponse
	14, // 36: inspire.manager.commission.goodorderpercent.v1.Manager.GetOrderPercentOnly:output_type -> inspire.manager.commission.goodorderpercent.v1.GetOrderPercentOnlyResponse
	12, // 37: inspire.manager.commission.goodorderpercent.v1.Manager.GetOrderPercents:output_type -> inspire.manager.commission.goodorderpercent.v1.GetOrderPercentsResponse
	16, // 38: inspire.manager.commission.goodorderpercent.v1.Manager.ExistOrderPercent:output_type -> inspire.manager.commission.goodorderpercent.v1.ExistOrderPercentResponse
	18, // 39: inspire.manager.commission.goodorderpercent.v1.Manager.ExistOrderPercentConds:output_type -> inspire.manager.commission.goodorderpercent.v1.ExistOrderPercentCondsResponse
	20, // 40: inspire.manager.commission.goodorderpercent.v1.Manager.CountOrderPercents:output_type -> inspire.manager.commission.goodorderpercent.v1.CountOrderPercentsResponse
	22, // 41: inspire.manager.commission.goodorderpercent.v1.Manager.DeleteOrderPercent:output_type -> inspire.manager.commission.goodorderpercent.v1.DeleteOrderPercentResponse
	32, // [32:42] is the sub-list for method output_type
	22, // [22:32] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_init() }
func file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_init() {
	if File_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderPercentReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderPercent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrderPercentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrderPercentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrderPercentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrderPercentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrderPercentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOrderPercentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderPercentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderPercentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderPercentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderPercentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderPercentOnlyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderPercentOnlyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistOrderPercentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistOrderPercentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistOrderPercentCondsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistOrderPercentCondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountOrderPercentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountOrderPercentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrderPercentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteOrderPercentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_goTypes,
		DependencyIndexes: file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_depIdxs,
		MessageInfos:      file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_msgTypes,
	}.Build()
	File_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto = out.File
	file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_rawDesc = nil
	file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_goTypes = nil
	file_npool_inspire_mgr_v1_commission_goodorderpercent_goodorderpercent_proto_depIdxs = nil
}
