// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/inspire/mgr/v1/commission/goodorderpercent/goodorderpercent.proto

package orderpercent

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateOrderPercent(ctx context.Context, in *CreateOrderPercentRequest, opts ...grpc.CallOption) (*CreateOrderPercentResponse, error)
	CreateOrderPercents(ctx context.Context, in *CreateOrderPercentsRequest, opts ...grpc.CallOption) (*CreateOrderPercentsResponse, error)
	UpdateOrderPercent(ctx context.Context, in *UpdateOrderPercentRequest, opts ...grpc.CallOption) (*UpdateOrderPercentResponse, error)
	GetOrderPercent(ctx context.Context, in *GetOrderPercentRequest, opts ...grpc.CallOption) (*GetOrderPercentResponse, error)
	GetOrderPercentOnly(ctx context.Context, in *GetOrderPercentOnlyRequest, opts ...grpc.CallOption) (*GetOrderPercentOnlyResponse, error)
	GetOrderPercents(ctx context.Context, in *GetOrderPercentsRequest, opts ...grpc.CallOption) (*GetOrderPercentsResponse, error)
	ExistOrderPercent(ctx context.Context, in *ExistOrderPercentRequest, opts ...grpc.CallOption) (*ExistOrderPercentResponse, error)
	ExistOrderPercentConds(ctx context.Context, in *ExistOrderPercentCondsRequest, opts ...grpc.CallOption) (*ExistOrderPercentCondsResponse, error)
	CountOrderPercents(ctx context.Context, in *CountOrderPercentsRequest, opts ...grpc.CallOption) (*CountOrderPercentsResponse, error)
	DeleteOrderPercent(ctx context.Context, in *DeleteOrderPercentRequest, opts ...grpc.CallOption) (*DeleteOrderPercentResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateOrderPercent(ctx context.Context, in *CreateOrderPercentRequest, opts ...grpc.CallOption) (*CreateOrderPercentResponse, error) {
	out := new(CreateOrderPercentResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.commission.orderpercent.v1.Manager/CreateOrderPercent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateOrderPercents(ctx context.Context, in *CreateOrderPercentsRequest, opts ...grpc.CallOption) (*CreateOrderPercentsResponse, error) {
	out := new(CreateOrderPercentsResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.commission.orderpercent.v1.Manager/CreateOrderPercents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateOrderPercent(ctx context.Context, in *UpdateOrderPercentRequest, opts ...grpc.CallOption) (*UpdateOrderPercentResponse, error) {
	out := new(UpdateOrderPercentResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.commission.orderpercent.v1.Manager/UpdateOrderPercent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetOrderPercent(ctx context.Context, in *GetOrderPercentRequest, opts ...grpc.CallOption) (*GetOrderPercentResponse, error) {
	out := new(GetOrderPercentResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.commission.orderpercent.v1.Manager/GetOrderPercent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetOrderPercentOnly(ctx context.Context, in *GetOrderPercentOnlyRequest, opts ...grpc.CallOption) (*GetOrderPercentOnlyResponse, error) {
	out := new(GetOrderPercentOnlyResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.commission.orderpercent.v1.Manager/GetOrderPercentOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetOrderPercents(ctx context.Context, in *GetOrderPercentsRequest, opts ...grpc.CallOption) (*GetOrderPercentsResponse, error) {
	out := new(GetOrderPercentsResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.commission.orderpercent.v1.Manager/GetOrderPercents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistOrderPercent(ctx context.Context, in *ExistOrderPercentRequest, opts ...grpc.CallOption) (*ExistOrderPercentResponse, error) {
	out := new(ExistOrderPercentResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.commission.orderpercent.v1.Manager/ExistOrderPercent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistOrderPercentConds(ctx context.Context, in *ExistOrderPercentCondsRequest, opts ...grpc.CallOption) (*ExistOrderPercentCondsResponse, error) {
	out := new(ExistOrderPercentCondsResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.commission.orderpercent.v1.Manager/ExistOrderPercentConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountOrderPercents(ctx context.Context, in *CountOrderPercentsRequest, opts ...grpc.CallOption) (*CountOrderPercentsResponse, error) {
	out := new(CountOrderPercentsResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.commission.orderpercent.v1.Manager/CountOrderPercents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteOrderPercent(ctx context.Context, in *DeleteOrderPercentRequest, opts ...grpc.CallOption) (*DeleteOrderPercentResponse, error) {
	out := new(DeleteOrderPercentResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.commission.orderpercent.v1.Manager/DeleteOrderPercent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateOrderPercent(context.Context, *CreateOrderPercentRequest) (*CreateOrderPercentResponse, error)
	CreateOrderPercents(context.Context, *CreateOrderPercentsRequest) (*CreateOrderPercentsResponse, error)
	UpdateOrderPercent(context.Context, *UpdateOrderPercentRequest) (*UpdateOrderPercentResponse, error)
	GetOrderPercent(context.Context, *GetOrderPercentRequest) (*GetOrderPercentResponse, error)
	GetOrderPercentOnly(context.Context, *GetOrderPercentOnlyRequest) (*GetOrderPercentOnlyResponse, error)
	GetOrderPercents(context.Context, *GetOrderPercentsRequest) (*GetOrderPercentsResponse, error)
	ExistOrderPercent(context.Context, *ExistOrderPercentRequest) (*ExistOrderPercentResponse, error)
	ExistOrderPercentConds(context.Context, *ExistOrderPercentCondsRequest) (*ExistOrderPercentCondsResponse, error)
	CountOrderPercents(context.Context, *CountOrderPercentsRequest) (*CountOrderPercentsResponse, error)
	DeleteOrderPercent(context.Context, *DeleteOrderPercentRequest) (*DeleteOrderPercentResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateOrderPercent(context.Context, *CreateOrderPercentRequest) (*CreateOrderPercentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrderPercent not implemented")
}
func (UnimplementedManagerServer) CreateOrderPercents(context.Context, *CreateOrderPercentsRequest) (*CreateOrderPercentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrderPercents not implemented")
}
func (UnimplementedManagerServer) UpdateOrderPercent(context.Context, *UpdateOrderPercentRequest) (*UpdateOrderPercentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderPercent not implemented")
}
func (UnimplementedManagerServer) GetOrderPercent(context.Context, *GetOrderPercentRequest) (*GetOrderPercentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderPercent not implemented")
}
func (UnimplementedManagerServer) GetOrderPercentOnly(context.Context, *GetOrderPercentOnlyRequest) (*GetOrderPercentOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderPercentOnly not implemented")
}
func (UnimplementedManagerServer) GetOrderPercents(context.Context, *GetOrderPercentsRequest) (*GetOrderPercentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderPercents not implemented")
}
func (UnimplementedManagerServer) ExistOrderPercent(context.Context, *ExistOrderPercentRequest) (*ExistOrderPercentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistOrderPercent not implemented")
}
func (UnimplementedManagerServer) ExistOrderPercentConds(context.Context, *ExistOrderPercentCondsRequest) (*ExistOrderPercentCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistOrderPercentConds not implemented")
}
func (UnimplementedManagerServer) CountOrderPercents(context.Context, *CountOrderPercentsRequest) (*CountOrderPercentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountOrderPercents not implemented")
}
func (UnimplementedManagerServer) DeleteOrderPercent(context.Context, *DeleteOrderPercentRequest) (*DeleteOrderPercentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrderPercent not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateOrderPercent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderPercentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateOrderPercent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.commission.orderpercent.v1.Manager/CreateOrderPercent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateOrderPercent(ctx, req.(*CreateOrderPercentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateOrderPercents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderPercentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateOrderPercents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.commission.orderpercent.v1.Manager/CreateOrderPercents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateOrderPercents(ctx, req.(*CreateOrderPercentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateOrderPercent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderPercentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateOrderPercent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.commission.orderpercent.v1.Manager/UpdateOrderPercent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateOrderPercent(ctx, req.(*UpdateOrderPercentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetOrderPercent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderPercentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetOrderPercent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.commission.orderpercent.v1.Manager/GetOrderPercent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetOrderPercent(ctx, req.(*GetOrderPercentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetOrderPercentOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderPercentOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetOrderPercentOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.commission.orderpercent.v1.Manager/GetOrderPercentOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetOrderPercentOnly(ctx, req.(*GetOrderPercentOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetOrderPercents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderPercentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetOrderPercents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.commission.orderpercent.v1.Manager/GetOrderPercents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetOrderPercents(ctx, req.(*GetOrderPercentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistOrderPercent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistOrderPercentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistOrderPercent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.commission.orderpercent.v1.Manager/ExistOrderPercent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistOrderPercent(ctx, req.(*ExistOrderPercentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistOrderPercentConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistOrderPercentCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistOrderPercentConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.commission.orderpercent.v1.Manager/ExistOrderPercentConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistOrderPercentConds(ctx, req.(*ExistOrderPercentCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountOrderPercents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountOrderPercentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountOrderPercents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.commission.orderpercent.v1.Manager/CountOrderPercents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountOrderPercents(ctx, req.(*CountOrderPercentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteOrderPercent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrderPercentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteOrderPercent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.commission.orderpercent.v1.Manager/DeleteOrderPercent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteOrderPercent(ctx, req.(*DeleteOrderPercentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inspire.manager.commission.orderpercent.v1.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrderPercent",
			Handler:    _Manager_CreateOrderPercent_Handler,
		},
		{
			MethodName: "CreateOrderPercents",
			Handler:    _Manager_CreateOrderPercents_Handler,
		},
		{
			MethodName: "UpdateOrderPercent",
			Handler:    _Manager_UpdateOrderPercent_Handler,
		},
		{
			MethodName: "GetOrderPercent",
			Handler:    _Manager_GetOrderPercent_Handler,
		},
		{
			MethodName: "GetOrderPercentOnly",
			Handler:    _Manager_GetOrderPercentOnly_Handler,
		},
		{
			MethodName: "GetOrderPercents",
			Handler:    _Manager_GetOrderPercents_Handler,
		},
		{
			MethodName: "ExistOrderPercent",
			Handler:    _Manager_ExistOrderPercent_Handler,
		},
		{
			MethodName: "ExistOrderPercentConds",
			Handler:    _Manager_ExistOrderPercentConds_Handler,
		},
		{
			MethodName: "CountOrderPercents",
			Handler:    _Manager_CountOrderPercents_Handler,
		},
		{
			MethodName: "DeleteOrderPercent",
			Handler:    _Manager_DeleteOrderPercent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/inspire/mgr/v1/commission/goodorderpercent/goodorderpercent.proto",
}
