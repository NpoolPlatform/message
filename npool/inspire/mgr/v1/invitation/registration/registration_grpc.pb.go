// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/inspire/mgr/v1/invitation/registration/registration.proto

package registration

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateRegistration(ctx context.Context, in *CreateRegistrationRequest, opts ...grpc.CallOption) (*CreateRegistrationResponse, error)
	CreateRegistrations(ctx context.Context, in *CreateRegistrationsRequest, opts ...grpc.CallOption) (*CreateRegistrationsResponse, error)
	UpdateRegistration(ctx context.Context, in *UpdateRegistrationRequest, opts ...grpc.CallOption) (*UpdateRegistrationResponse, error)
	GetRegistration(ctx context.Context, in *GetRegistrationRequest, opts ...grpc.CallOption) (*GetRegistrationResponse, error)
	GetRegistrationOnly(ctx context.Context, in *GetRegistrationOnlyRequest, opts ...grpc.CallOption) (*GetRegistrationOnlyResponse, error)
	GetRegistrations(ctx context.Context, in *GetRegistrationsRequest, opts ...grpc.CallOption) (*GetRegistrationsResponse, error)
	ExistRegistration(ctx context.Context, in *ExistRegistrationRequest, opts ...grpc.CallOption) (*ExistRegistrationResponse, error)
	ExistRegistrationConds(ctx context.Context, in *ExistRegistrationCondsRequest, opts ...grpc.CallOption) (*ExistRegistrationCondsResponse, error)
	CountRegistrations(ctx context.Context, in *CountRegistrationsRequest, opts ...grpc.CallOption) (*CountRegistrationsResponse, error)
	DeleteRegistration(ctx context.Context, in *DeleteRegistrationRequest, opts ...grpc.CallOption) (*DeleteRegistrationResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateRegistration(ctx context.Context, in *CreateRegistrationRequest, opts ...grpc.CallOption) (*CreateRegistrationResponse, error) {
	out := new(CreateRegistrationResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.invitation.registration.v1.Manager/CreateRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateRegistrations(ctx context.Context, in *CreateRegistrationsRequest, opts ...grpc.CallOption) (*CreateRegistrationsResponse, error) {
	out := new(CreateRegistrationsResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.invitation.registration.v1.Manager/CreateRegistrations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateRegistration(ctx context.Context, in *UpdateRegistrationRequest, opts ...grpc.CallOption) (*UpdateRegistrationResponse, error) {
	out := new(UpdateRegistrationResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.invitation.registration.v1.Manager/UpdateRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetRegistration(ctx context.Context, in *GetRegistrationRequest, opts ...grpc.CallOption) (*GetRegistrationResponse, error) {
	out := new(GetRegistrationResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.invitation.registration.v1.Manager/GetRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetRegistrationOnly(ctx context.Context, in *GetRegistrationOnlyRequest, opts ...grpc.CallOption) (*GetRegistrationOnlyResponse, error) {
	out := new(GetRegistrationOnlyResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.invitation.registration.v1.Manager/GetRegistrationOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetRegistrations(ctx context.Context, in *GetRegistrationsRequest, opts ...grpc.CallOption) (*GetRegistrationsResponse, error) {
	out := new(GetRegistrationsResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.invitation.registration.v1.Manager/GetRegistrations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistRegistration(ctx context.Context, in *ExistRegistrationRequest, opts ...grpc.CallOption) (*ExistRegistrationResponse, error) {
	out := new(ExistRegistrationResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.invitation.registration.v1.Manager/ExistRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistRegistrationConds(ctx context.Context, in *ExistRegistrationCondsRequest, opts ...grpc.CallOption) (*ExistRegistrationCondsResponse, error) {
	out := new(ExistRegistrationCondsResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.invitation.registration.v1.Manager/ExistRegistrationConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountRegistrations(ctx context.Context, in *CountRegistrationsRequest, opts ...grpc.CallOption) (*CountRegistrationsResponse, error) {
	out := new(CountRegistrationsResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.invitation.registration.v1.Manager/CountRegistrations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteRegistration(ctx context.Context, in *DeleteRegistrationRequest, opts ...grpc.CallOption) (*DeleteRegistrationResponse, error) {
	out := new(DeleteRegistrationResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.invitation.registration.v1.Manager/DeleteRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateRegistration(context.Context, *CreateRegistrationRequest) (*CreateRegistrationResponse, error)
	CreateRegistrations(context.Context, *CreateRegistrationsRequest) (*CreateRegistrationsResponse, error)
	UpdateRegistration(context.Context, *UpdateRegistrationRequest) (*UpdateRegistrationResponse, error)
	GetRegistration(context.Context, *GetRegistrationRequest) (*GetRegistrationResponse, error)
	GetRegistrationOnly(context.Context, *GetRegistrationOnlyRequest) (*GetRegistrationOnlyResponse, error)
	GetRegistrations(context.Context, *GetRegistrationsRequest) (*GetRegistrationsResponse, error)
	ExistRegistration(context.Context, *ExistRegistrationRequest) (*ExistRegistrationResponse, error)
	ExistRegistrationConds(context.Context, *ExistRegistrationCondsRequest) (*ExistRegistrationCondsResponse, error)
	CountRegistrations(context.Context, *CountRegistrationsRequest) (*CountRegistrationsResponse, error)
	DeleteRegistration(context.Context, *DeleteRegistrationRequest) (*DeleteRegistrationResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateRegistration(context.Context, *CreateRegistrationRequest) (*CreateRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRegistration not implemented")
}
func (UnimplementedManagerServer) CreateRegistrations(context.Context, *CreateRegistrationsRequest) (*CreateRegistrationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRegistrations not implemented")
}
func (UnimplementedManagerServer) UpdateRegistration(context.Context, *UpdateRegistrationRequest) (*UpdateRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRegistration not implemented")
}
func (UnimplementedManagerServer) GetRegistration(context.Context, *GetRegistrationRequest) (*GetRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegistration not implemented")
}
func (UnimplementedManagerServer) GetRegistrationOnly(context.Context, *GetRegistrationOnlyRequest) (*GetRegistrationOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegistrationOnly not implemented")
}
func (UnimplementedManagerServer) GetRegistrations(context.Context, *GetRegistrationsRequest) (*GetRegistrationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegistrations not implemented")
}
func (UnimplementedManagerServer) ExistRegistration(context.Context, *ExistRegistrationRequest) (*ExistRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistRegistration not implemented")
}
func (UnimplementedManagerServer) ExistRegistrationConds(context.Context, *ExistRegistrationCondsRequest) (*ExistRegistrationCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistRegistrationConds not implemented")
}
func (UnimplementedManagerServer) CountRegistrations(context.Context, *CountRegistrationsRequest) (*CountRegistrationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountRegistrations not implemented")
}
func (UnimplementedManagerServer) DeleteRegistration(context.Context, *DeleteRegistrationRequest) (*DeleteRegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRegistration not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.invitation.registration.v1.Manager/CreateRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateRegistration(ctx, req.(*CreateRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateRegistrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRegistrationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateRegistrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.invitation.registration.v1.Manager/CreateRegistrations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateRegistrations(ctx, req.(*CreateRegistrationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.invitation.registration.v1.Manager/UpdateRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateRegistration(ctx, req.(*UpdateRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.invitation.registration.v1.Manager/GetRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetRegistration(ctx, req.(*GetRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetRegistrationOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegistrationOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetRegistrationOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.invitation.registration.v1.Manager/GetRegistrationOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetRegistrationOnly(ctx, req.(*GetRegistrationOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetRegistrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegistrationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetRegistrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.invitation.registration.v1.Manager/GetRegistrations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetRegistrations(ctx, req.(*GetRegistrationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.invitation.registration.v1.Manager/ExistRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistRegistration(ctx, req.(*ExistRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistRegistrationConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistRegistrationCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistRegistrationConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.invitation.registration.v1.Manager/ExistRegistrationConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistRegistrationConds(ctx, req.(*ExistRegistrationCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountRegistrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountRegistrationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountRegistrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.invitation.registration.v1.Manager/CountRegistrations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountRegistrations(ctx, req.(*CountRegistrationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.invitation.registration.v1.Manager/DeleteRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteRegistration(ctx, req.(*DeleteRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inspire.manager.invitation.registration.v1.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRegistration",
			Handler:    _Manager_CreateRegistration_Handler,
		},
		{
			MethodName: "CreateRegistrations",
			Handler:    _Manager_CreateRegistrations_Handler,
		},
		{
			MethodName: "UpdateRegistration",
			Handler:    _Manager_UpdateRegistration_Handler,
		},
		{
			MethodName: "GetRegistration",
			Handler:    _Manager_GetRegistration_Handler,
		},
		{
			MethodName: "GetRegistrationOnly",
			Handler:    _Manager_GetRegistrationOnly_Handler,
		},
		{
			MethodName: "GetRegistrations",
			Handler:    _Manager_GetRegistrations_Handler,
		},
		{
			MethodName: "ExistRegistration",
			Handler:    _Manager_ExistRegistration_Handler,
		},
		{
			MethodName: "ExistRegistrationConds",
			Handler:    _Manager_ExistRegistrationConds_Handler,
		},
		{
			MethodName: "CountRegistrations",
			Handler:    _Manager_CountRegistrations_Handler,
		},
		{
			MethodName: "DeleteRegistration",
			Handler:    _Manager_DeleteRegistration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/inspire/mgr/v1/invitation/registration/registration.proto",
}
