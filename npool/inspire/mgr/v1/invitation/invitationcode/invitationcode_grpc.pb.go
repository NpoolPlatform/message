// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/inspire/mgr/v1/invitation/invitationcode/invitationcode.proto

package invitationcode

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateInvitationCode(ctx context.Context, in *CreateInvitationCodeRequest, opts ...grpc.CallOption) (*CreateInvitationCodeResponse, error)
	CreateInvitationCodes(ctx context.Context, in *CreateInvitationCodesRequest, opts ...grpc.CallOption) (*CreateInvitationCodesResponse, error)
	UpdateInvitationCode(ctx context.Context, in *UpdateInvitationCodeRequest, opts ...grpc.CallOption) (*UpdateInvitationCodeResponse, error)
	GetInvitationCode(ctx context.Context, in *GetInvitationCodeRequest, opts ...grpc.CallOption) (*GetInvitationCodeResponse, error)
	GetInvitationCodeOnly(ctx context.Context, in *GetInvitationCodeOnlyRequest, opts ...grpc.CallOption) (*GetInvitationCodeOnlyResponse, error)
	GetInvitationCodes(ctx context.Context, in *GetInvitationCodesRequest, opts ...grpc.CallOption) (*GetInvitationCodesResponse, error)
	ExistInvitationCode(ctx context.Context, in *ExistInvitationCodeRequest, opts ...grpc.CallOption) (*ExistInvitationCodeResponse, error)
	ExistInvitationCodeConds(ctx context.Context, in *ExistInvitationCodeCondsRequest, opts ...grpc.CallOption) (*ExistInvitationCodeCondsResponse, error)
	CountInvitationCodes(ctx context.Context, in *CountInvitationCodesRequest, opts ...grpc.CallOption) (*CountInvitationCodesResponse, error)
	DeleteInvitationCode(ctx context.Context, in *DeleteInvitationCodeRequest, opts ...grpc.CallOption) (*DeleteInvitationCodeResponse, error)
	DeleteInvitationCodeByID(ctx context.Context, in *DeleteInvitationCodeByIDRequest, opts ...grpc.CallOption) (*DeleteInvitationCodeByIDResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateInvitationCode(ctx context.Context, in *CreateInvitationCodeRequest, opts ...grpc.CallOption) (*CreateInvitationCodeResponse, error) {
	out := new(CreateInvitationCodeResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.invitation.invitationcode.v1.Manager/CreateInvitationCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateInvitationCodes(ctx context.Context, in *CreateInvitationCodesRequest, opts ...grpc.CallOption) (*CreateInvitationCodesResponse, error) {
	out := new(CreateInvitationCodesResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.invitation.invitationcode.v1.Manager/CreateInvitationCodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateInvitationCode(ctx context.Context, in *UpdateInvitationCodeRequest, opts ...grpc.CallOption) (*UpdateInvitationCodeResponse, error) {
	out := new(UpdateInvitationCodeResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.invitation.invitationcode.v1.Manager/UpdateInvitationCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetInvitationCode(ctx context.Context, in *GetInvitationCodeRequest, opts ...grpc.CallOption) (*GetInvitationCodeResponse, error) {
	out := new(GetInvitationCodeResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.invitation.invitationcode.v1.Manager/GetInvitationCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetInvitationCodeOnly(ctx context.Context, in *GetInvitationCodeOnlyRequest, opts ...grpc.CallOption) (*GetInvitationCodeOnlyResponse, error) {
	out := new(GetInvitationCodeOnlyResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.invitation.invitationcode.v1.Manager/GetInvitationCodeOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetInvitationCodes(ctx context.Context, in *GetInvitationCodesRequest, opts ...grpc.CallOption) (*GetInvitationCodesResponse, error) {
	out := new(GetInvitationCodesResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.invitation.invitationcode.v1.Manager/GetInvitationCodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistInvitationCode(ctx context.Context, in *ExistInvitationCodeRequest, opts ...grpc.CallOption) (*ExistInvitationCodeResponse, error) {
	out := new(ExistInvitationCodeResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.invitation.invitationcode.v1.Manager/ExistInvitationCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistInvitationCodeConds(ctx context.Context, in *ExistInvitationCodeCondsRequest, opts ...grpc.CallOption) (*ExistInvitationCodeCondsResponse, error) {
	out := new(ExistInvitationCodeCondsResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.invitation.invitationcode.v1.Manager/ExistInvitationCodeConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountInvitationCodes(ctx context.Context, in *CountInvitationCodesRequest, opts ...grpc.CallOption) (*CountInvitationCodesResponse, error) {
	out := new(CountInvitationCodesResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.invitation.invitationcode.v1.Manager/CountInvitationCodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteInvitationCode(ctx context.Context, in *DeleteInvitationCodeRequest, opts ...grpc.CallOption) (*DeleteInvitationCodeResponse, error) {
	out := new(DeleteInvitationCodeResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.invitation.invitationcode.v1.Manager/DeleteInvitationCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteInvitationCodeByID(ctx context.Context, in *DeleteInvitationCodeByIDRequest, opts ...grpc.CallOption) (*DeleteInvitationCodeByIDResponse, error) {
	out := new(DeleteInvitationCodeByIDResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.invitation.invitationcode.v1.Manager/DeleteInvitationCodeByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateInvitationCode(context.Context, *CreateInvitationCodeRequest) (*CreateInvitationCodeResponse, error)
	CreateInvitationCodes(context.Context, *CreateInvitationCodesRequest) (*CreateInvitationCodesResponse, error)
	UpdateInvitationCode(context.Context, *UpdateInvitationCodeRequest) (*UpdateInvitationCodeResponse, error)
	GetInvitationCode(context.Context, *GetInvitationCodeRequest) (*GetInvitationCodeResponse, error)
	GetInvitationCodeOnly(context.Context, *GetInvitationCodeOnlyRequest) (*GetInvitationCodeOnlyResponse, error)
	GetInvitationCodes(context.Context, *GetInvitationCodesRequest) (*GetInvitationCodesResponse, error)
	ExistInvitationCode(context.Context, *ExistInvitationCodeRequest) (*ExistInvitationCodeResponse, error)
	ExistInvitationCodeConds(context.Context, *ExistInvitationCodeCondsRequest) (*ExistInvitationCodeCondsResponse, error)
	CountInvitationCodes(context.Context, *CountInvitationCodesRequest) (*CountInvitationCodesResponse, error)
	DeleteInvitationCode(context.Context, *DeleteInvitationCodeRequest) (*DeleteInvitationCodeResponse, error)
	DeleteInvitationCodeByID(context.Context, *DeleteInvitationCodeByIDRequest) (*DeleteInvitationCodeByIDResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateInvitationCode(context.Context, *CreateInvitationCodeRequest) (*CreateInvitationCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvitationCode not implemented")
}
func (UnimplementedManagerServer) CreateInvitationCodes(context.Context, *CreateInvitationCodesRequest) (*CreateInvitationCodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInvitationCodes not implemented")
}
func (UnimplementedManagerServer) UpdateInvitationCode(context.Context, *UpdateInvitationCodeRequest) (*UpdateInvitationCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInvitationCode not implemented")
}
func (UnimplementedManagerServer) GetInvitationCode(context.Context, *GetInvitationCodeRequest) (*GetInvitationCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvitationCode not implemented")
}
func (UnimplementedManagerServer) GetInvitationCodeOnly(context.Context, *GetInvitationCodeOnlyRequest) (*GetInvitationCodeOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvitationCodeOnly not implemented")
}
func (UnimplementedManagerServer) GetInvitationCodes(context.Context, *GetInvitationCodesRequest) (*GetInvitationCodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInvitationCodes not implemented")
}
func (UnimplementedManagerServer) ExistInvitationCode(context.Context, *ExistInvitationCodeRequest) (*ExistInvitationCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistInvitationCode not implemented")
}
func (UnimplementedManagerServer) ExistInvitationCodeConds(context.Context, *ExistInvitationCodeCondsRequest) (*ExistInvitationCodeCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistInvitationCodeConds not implemented")
}
func (UnimplementedManagerServer) CountInvitationCodes(context.Context, *CountInvitationCodesRequest) (*CountInvitationCodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountInvitationCodes not implemented")
}
func (UnimplementedManagerServer) DeleteInvitationCode(context.Context, *DeleteInvitationCodeRequest) (*DeleteInvitationCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInvitationCode not implemented")
}
func (UnimplementedManagerServer) DeleteInvitationCodeByID(context.Context, *DeleteInvitationCodeByIDRequest) (*DeleteInvitationCodeByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInvitationCodeByID not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateInvitationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvitationCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateInvitationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.invitation.invitationcode.v1.Manager/CreateInvitationCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateInvitationCode(ctx, req.(*CreateInvitationCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateInvitationCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvitationCodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateInvitationCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.invitation.invitationcode.v1.Manager/CreateInvitationCodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateInvitationCodes(ctx, req.(*CreateInvitationCodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateInvitationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInvitationCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateInvitationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.invitation.invitationcode.v1.Manager/UpdateInvitationCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateInvitationCode(ctx, req.(*UpdateInvitationCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetInvitationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvitationCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetInvitationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.invitation.invitationcode.v1.Manager/GetInvitationCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetInvitationCode(ctx, req.(*GetInvitationCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetInvitationCodeOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvitationCodeOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetInvitationCodeOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.invitation.invitationcode.v1.Manager/GetInvitationCodeOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetInvitationCodeOnly(ctx, req.(*GetInvitationCodeOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetInvitationCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvitationCodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetInvitationCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.invitation.invitationcode.v1.Manager/GetInvitationCodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetInvitationCodes(ctx, req.(*GetInvitationCodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistInvitationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistInvitationCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistInvitationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.invitation.invitationcode.v1.Manager/ExistInvitationCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistInvitationCode(ctx, req.(*ExistInvitationCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistInvitationCodeConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistInvitationCodeCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistInvitationCodeConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.invitation.invitationcode.v1.Manager/ExistInvitationCodeConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistInvitationCodeConds(ctx, req.(*ExistInvitationCodeCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountInvitationCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountInvitationCodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountInvitationCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.invitation.invitationcode.v1.Manager/CountInvitationCodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountInvitationCodes(ctx, req.(*CountInvitationCodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteInvitationCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInvitationCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteInvitationCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.invitation.invitationcode.v1.Manager/DeleteInvitationCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteInvitationCode(ctx, req.(*DeleteInvitationCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteInvitationCodeByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInvitationCodeByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteInvitationCodeByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.invitation.invitationcode.v1.Manager/DeleteInvitationCodeByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteInvitationCodeByID(ctx, req.(*DeleteInvitationCodeByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inspire.manager.invitation.invitationcode.v1.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInvitationCode",
			Handler:    _Manager_CreateInvitationCode_Handler,
		},
		{
			MethodName: "CreateInvitationCodes",
			Handler:    _Manager_CreateInvitationCodes_Handler,
		},
		{
			MethodName: "UpdateInvitationCode",
			Handler:    _Manager_UpdateInvitationCode_Handler,
		},
		{
			MethodName: "GetInvitationCode",
			Handler:    _Manager_GetInvitationCode_Handler,
		},
		{
			MethodName: "GetInvitationCodeOnly",
			Handler:    _Manager_GetInvitationCodeOnly_Handler,
		},
		{
			MethodName: "GetInvitationCodes",
			Handler:    _Manager_GetInvitationCodes_Handler,
		},
		{
			MethodName: "ExistInvitationCode",
			Handler:    _Manager_ExistInvitationCode_Handler,
		},
		{
			MethodName: "ExistInvitationCodeConds",
			Handler:    _Manager_ExistInvitationCodeConds_Handler,
		},
		{
			MethodName: "CountInvitationCodes",
			Handler:    _Manager_CountInvitationCodes_Handler,
		},
		{
			MethodName: "DeleteInvitationCode",
			Handler:    _Manager_DeleteInvitationCode_Handler,
		},
		{
			MethodName: "DeleteInvitationCodeByID",
			Handler:    _Manager_DeleteInvitationCodeByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/inspire/mgr/v1/invitation/invitationcode/invitationcode.proto",
}
