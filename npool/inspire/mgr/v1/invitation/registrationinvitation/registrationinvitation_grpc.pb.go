// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/inspire/mgr/v1/invitation/registrationinvitation/registrationinvitation.proto

package registrationinvitation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateRegistrationInvitation(ctx context.Context, in *CreateRegistrationInvitationRequest, opts ...grpc.CallOption) (*CreateRegistrationInvitationResponse, error)
	CreateRegistrationInvitations(ctx context.Context, in *CreateRegistrationInvitationsRequest, opts ...grpc.CallOption) (*CreateRegistrationInvitationsResponse, error)
	UpdateRegistrationInvitation(ctx context.Context, in *UpdateRegistrationInvitationRequest, opts ...grpc.CallOption) (*UpdateRegistrationInvitationResponse, error)
	GetRegistrationInvitation(ctx context.Context, in *GetRegistrationInvitationRequest, opts ...grpc.CallOption) (*GetRegistrationInvitationResponse, error)
	GetRegistrationInvitationOnly(ctx context.Context, in *GetRegistrationInvitationOnlyRequest, opts ...grpc.CallOption) (*GetRegistrationInvitationOnlyResponse, error)
	GetRegistrationInvitations(ctx context.Context, in *GetRegistrationInvitationsRequest, opts ...grpc.CallOption) (*GetRegistrationInvitationsResponse, error)
	ExistRegistrationInvitation(ctx context.Context, in *ExistRegistrationInvitationRequest, opts ...grpc.CallOption) (*ExistRegistrationInvitationResponse, error)
	ExistRegistrationInvitationConds(ctx context.Context, in *ExistRegistrationInvitationCondsRequest, opts ...grpc.CallOption) (*ExistRegistrationInvitationCondsResponse, error)
	CountRegistrationInvitations(ctx context.Context, in *CountRegistrationInvitationsRequest, opts ...grpc.CallOption) (*CountRegistrationInvitationsResponse, error)
	DeleteRegistrationInvitation(ctx context.Context, in *DeleteRegistrationInvitationRequest, opts ...grpc.CallOption) (*DeleteRegistrationInvitationResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateRegistrationInvitation(ctx context.Context, in *CreateRegistrationInvitationRequest, opts ...grpc.CallOption) (*CreateRegistrationInvitationResponse, error) {
	out := new(CreateRegistrationInvitationResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.registrationinvitation.v1.Manager/CreateRegistrationInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateRegistrationInvitations(ctx context.Context, in *CreateRegistrationInvitationsRequest, opts ...grpc.CallOption) (*CreateRegistrationInvitationsResponse, error) {
	out := new(CreateRegistrationInvitationsResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.registrationinvitation.v1.Manager/CreateRegistrationInvitations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateRegistrationInvitation(ctx context.Context, in *UpdateRegistrationInvitationRequest, opts ...grpc.CallOption) (*UpdateRegistrationInvitationResponse, error) {
	out := new(UpdateRegistrationInvitationResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.registrationinvitation.v1.Manager/UpdateRegistrationInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetRegistrationInvitation(ctx context.Context, in *GetRegistrationInvitationRequest, opts ...grpc.CallOption) (*GetRegistrationInvitationResponse, error) {
	out := new(GetRegistrationInvitationResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.registrationinvitation.v1.Manager/GetRegistrationInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetRegistrationInvitationOnly(ctx context.Context, in *GetRegistrationInvitationOnlyRequest, opts ...grpc.CallOption) (*GetRegistrationInvitationOnlyResponse, error) {
	out := new(GetRegistrationInvitationOnlyResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.registrationinvitation.v1.Manager/GetRegistrationInvitationOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetRegistrationInvitations(ctx context.Context, in *GetRegistrationInvitationsRequest, opts ...grpc.CallOption) (*GetRegistrationInvitationsResponse, error) {
	out := new(GetRegistrationInvitationsResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.registrationinvitation.v1.Manager/GetRegistrationInvitations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistRegistrationInvitation(ctx context.Context, in *ExistRegistrationInvitationRequest, opts ...grpc.CallOption) (*ExistRegistrationInvitationResponse, error) {
	out := new(ExistRegistrationInvitationResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.registrationinvitation.v1.Manager/ExistRegistrationInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistRegistrationInvitationConds(ctx context.Context, in *ExistRegistrationInvitationCondsRequest, opts ...grpc.CallOption) (*ExistRegistrationInvitationCondsResponse, error) {
	out := new(ExistRegistrationInvitationCondsResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.registrationinvitation.v1.Manager/ExistRegistrationInvitationConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountRegistrationInvitations(ctx context.Context, in *CountRegistrationInvitationsRequest, opts ...grpc.CallOption) (*CountRegistrationInvitationsResponse, error) {
	out := new(CountRegistrationInvitationsResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.registrationinvitation.v1.Manager/CountRegistrationInvitations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteRegistrationInvitation(ctx context.Context, in *DeleteRegistrationInvitationRequest, opts ...grpc.CallOption) (*DeleteRegistrationInvitationResponse, error) {
	out := new(DeleteRegistrationInvitationResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.registrationinvitation.v1.Manager/DeleteRegistrationInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateRegistrationInvitation(context.Context, *CreateRegistrationInvitationRequest) (*CreateRegistrationInvitationResponse, error)
	CreateRegistrationInvitations(context.Context, *CreateRegistrationInvitationsRequest) (*CreateRegistrationInvitationsResponse, error)
	UpdateRegistrationInvitation(context.Context, *UpdateRegistrationInvitationRequest) (*UpdateRegistrationInvitationResponse, error)
	GetRegistrationInvitation(context.Context, *GetRegistrationInvitationRequest) (*GetRegistrationInvitationResponse, error)
	GetRegistrationInvitationOnly(context.Context, *GetRegistrationInvitationOnlyRequest) (*GetRegistrationInvitationOnlyResponse, error)
	GetRegistrationInvitations(context.Context, *GetRegistrationInvitationsRequest) (*GetRegistrationInvitationsResponse, error)
	ExistRegistrationInvitation(context.Context, *ExistRegistrationInvitationRequest) (*ExistRegistrationInvitationResponse, error)
	ExistRegistrationInvitationConds(context.Context, *ExistRegistrationInvitationCondsRequest) (*ExistRegistrationInvitationCondsResponse, error)
	CountRegistrationInvitations(context.Context, *CountRegistrationInvitationsRequest) (*CountRegistrationInvitationsResponse, error)
	DeleteRegistrationInvitation(context.Context, *DeleteRegistrationInvitationRequest) (*DeleteRegistrationInvitationResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateRegistrationInvitation(context.Context, *CreateRegistrationInvitationRequest) (*CreateRegistrationInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRegistrationInvitation not implemented")
}
func (UnimplementedManagerServer) CreateRegistrationInvitations(context.Context, *CreateRegistrationInvitationsRequest) (*CreateRegistrationInvitationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRegistrationInvitations not implemented")
}
func (UnimplementedManagerServer) UpdateRegistrationInvitation(context.Context, *UpdateRegistrationInvitationRequest) (*UpdateRegistrationInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRegistrationInvitation not implemented")
}
func (UnimplementedManagerServer) GetRegistrationInvitation(context.Context, *GetRegistrationInvitationRequest) (*GetRegistrationInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegistrationInvitation not implemented")
}
func (UnimplementedManagerServer) GetRegistrationInvitationOnly(context.Context, *GetRegistrationInvitationOnlyRequest) (*GetRegistrationInvitationOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegistrationInvitationOnly not implemented")
}
func (UnimplementedManagerServer) GetRegistrationInvitations(context.Context, *GetRegistrationInvitationsRequest) (*GetRegistrationInvitationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRegistrationInvitations not implemented")
}
func (UnimplementedManagerServer) ExistRegistrationInvitation(context.Context, *ExistRegistrationInvitationRequest) (*ExistRegistrationInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistRegistrationInvitation not implemented")
}
func (UnimplementedManagerServer) ExistRegistrationInvitationConds(context.Context, *ExistRegistrationInvitationCondsRequest) (*ExistRegistrationInvitationCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistRegistrationInvitationConds not implemented")
}
func (UnimplementedManagerServer) CountRegistrationInvitations(context.Context, *CountRegistrationInvitationsRequest) (*CountRegistrationInvitationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountRegistrationInvitations not implemented")
}
func (UnimplementedManagerServer) DeleteRegistrationInvitation(context.Context, *DeleteRegistrationInvitationRequest) (*DeleteRegistrationInvitationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRegistrationInvitation not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateRegistrationInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRegistrationInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateRegistrationInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.registrationinvitation.v1.Manager/CreateRegistrationInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateRegistrationInvitation(ctx, req.(*CreateRegistrationInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateRegistrationInvitations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRegistrationInvitationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateRegistrationInvitations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.registrationinvitation.v1.Manager/CreateRegistrationInvitations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateRegistrationInvitations(ctx, req.(*CreateRegistrationInvitationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateRegistrationInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRegistrationInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateRegistrationInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.registrationinvitation.v1.Manager/UpdateRegistrationInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateRegistrationInvitation(ctx, req.(*UpdateRegistrationInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetRegistrationInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegistrationInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetRegistrationInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.registrationinvitation.v1.Manager/GetRegistrationInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetRegistrationInvitation(ctx, req.(*GetRegistrationInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetRegistrationInvitationOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegistrationInvitationOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetRegistrationInvitationOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.registrationinvitation.v1.Manager/GetRegistrationInvitationOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetRegistrationInvitationOnly(ctx, req.(*GetRegistrationInvitationOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetRegistrationInvitations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRegistrationInvitationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetRegistrationInvitations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.registrationinvitation.v1.Manager/GetRegistrationInvitations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetRegistrationInvitations(ctx, req.(*GetRegistrationInvitationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistRegistrationInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistRegistrationInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistRegistrationInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.registrationinvitation.v1.Manager/ExistRegistrationInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistRegistrationInvitation(ctx, req.(*ExistRegistrationInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistRegistrationInvitationConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistRegistrationInvitationCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistRegistrationInvitationConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.registrationinvitation.v1.Manager/ExistRegistrationInvitationConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistRegistrationInvitationConds(ctx, req.(*ExistRegistrationInvitationCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountRegistrationInvitations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountRegistrationInvitationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountRegistrationInvitations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.registrationinvitation.v1.Manager/CountRegistrationInvitations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountRegistrationInvitations(ctx, req.(*CountRegistrationInvitationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteRegistrationInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRegistrationInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteRegistrationInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.registrationinvitation.v1.Manager/DeleteRegistrationInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteRegistrationInvitation(ctx, req.(*DeleteRegistrationInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inspire.manager.coupon.registrationinvitation.v1.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRegistrationInvitation",
			Handler:    _Manager_CreateRegistrationInvitation_Handler,
		},
		{
			MethodName: "CreateRegistrationInvitations",
			Handler:    _Manager_CreateRegistrationInvitations_Handler,
		},
		{
			MethodName: "UpdateRegistrationInvitation",
			Handler:    _Manager_UpdateRegistrationInvitation_Handler,
		},
		{
			MethodName: "GetRegistrationInvitation",
			Handler:    _Manager_GetRegistrationInvitation_Handler,
		},
		{
			MethodName: "GetRegistrationInvitationOnly",
			Handler:    _Manager_GetRegistrationInvitationOnly_Handler,
		},
		{
			MethodName: "GetRegistrationInvitations",
			Handler:    _Manager_GetRegistrationInvitations_Handler,
		},
		{
			MethodName: "ExistRegistrationInvitation",
			Handler:    _Manager_ExistRegistrationInvitation_Handler,
		},
		{
			MethodName: "ExistRegistrationInvitationConds",
			Handler:    _Manager_ExistRegistrationInvitationConds_Handler,
		},
		{
			MethodName: "CountRegistrationInvitations",
			Handler:    _Manager_CountRegistrationInvitations_Handler,
		},
		{
			MethodName: "DeleteRegistrationInvitation",
			Handler:    _Manager_DeleteRegistrationInvitation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/inspire/mgr/v1/invitation/registrationinvitation/registrationinvitation.proto",
}
