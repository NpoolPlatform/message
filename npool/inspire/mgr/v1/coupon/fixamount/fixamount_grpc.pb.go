// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/inspire/mgr/v1/coupon/fixamount/fixamount.proto

package fixamount

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Manager_CreateFixAmount_FullMethodName     = "/inspire.manager.coupon.fixamount.v1.Manager/CreateFixAmount"
	Manager_CreateFixAmounts_FullMethodName    = "/inspire.manager.coupon.fixamount.v1.Manager/CreateFixAmounts"
	Manager_UpdateFixAmount_FullMethodName     = "/inspire.manager.coupon.fixamount.v1.Manager/UpdateFixAmount"
	Manager_GetFixAmount_FullMethodName        = "/inspire.manager.coupon.fixamount.v1.Manager/GetFixAmount"
	Manager_GetFixAmountOnly_FullMethodName    = "/inspire.manager.coupon.fixamount.v1.Manager/GetFixAmountOnly"
	Manager_GetFixAmounts_FullMethodName       = "/inspire.manager.coupon.fixamount.v1.Manager/GetFixAmounts"
	Manager_ExistFixAmount_FullMethodName      = "/inspire.manager.coupon.fixamount.v1.Manager/ExistFixAmount"
	Manager_ExistFixAmountConds_FullMethodName = "/inspire.manager.coupon.fixamount.v1.Manager/ExistFixAmountConds"
	Manager_CountFixAmounts_FullMethodName     = "/inspire.manager.coupon.fixamount.v1.Manager/CountFixAmounts"
	Manager_DeleteFixAmount_FullMethodName     = "/inspire.manager.coupon.fixamount.v1.Manager/DeleteFixAmount"
)

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateFixAmount(ctx context.Context, in *CreateFixAmountRequest, opts ...grpc.CallOption) (*CreateFixAmountResponse, error)
	CreateFixAmounts(ctx context.Context, in *CreateFixAmountsRequest, opts ...grpc.CallOption) (*CreateFixAmountsResponse, error)
	UpdateFixAmount(ctx context.Context, in *UpdateFixAmountRequest, opts ...grpc.CallOption) (*UpdateFixAmountResponse, error)
	GetFixAmount(ctx context.Context, in *GetFixAmountRequest, opts ...grpc.CallOption) (*GetFixAmountResponse, error)
	GetFixAmountOnly(ctx context.Context, in *GetFixAmountOnlyRequest, opts ...grpc.CallOption) (*GetFixAmountOnlyResponse, error)
	GetFixAmounts(ctx context.Context, in *GetFixAmountsRequest, opts ...grpc.CallOption) (*GetFixAmountsResponse, error)
	ExistFixAmount(ctx context.Context, in *ExistFixAmountRequest, opts ...grpc.CallOption) (*ExistFixAmountResponse, error)
	ExistFixAmountConds(ctx context.Context, in *ExistFixAmountCondsRequest, opts ...grpc.CallOption) (*ExistFixAmountCondsResponse, error)
	CountFixAmounts(ctx context.Context, in *CountFixAmountsRequest, opts ...grpc.CallOption) (*CountFixAmountsResponse, error)
	DeleteFixAmount(ctx context.Context, in *DeleteFixAmountRequest, opts ...grpc.CallOption) (*DeleteFixAmountResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateFixAmount(ctx context.Context, in *CreateFixAmountRequest, opts ...grpc.CallOption) (*CreateFixAmountResponse, error) {
	out := new(CreateFixAmountResponse)
	err := c.cc.Invoke(ctx, Manager_CreateFixAmount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateFixAmounts(ctx context.Context, in *CreateFixAmountsRequest, opts ...grpc.CallOption) (*CreateFixAmountsResponse, error) {
	out := new(CreateFixAmountsResponse)
	err := c.cc.Invoke(ctx, Manager_CreateFixAmounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateFixAmount(ctx context.Context, in *UpdateFixAmountRequest, opts ...grpc.CallOption) (*UpdateFixAmountResponse, error) {
	out := new(UpdateFixAmountResponse)
	err := c.cc.Invoke(ctx, Manager_UpdateFixAmount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetFixAmount(ctx context.Context, in *GetFixAmountRequest, opts ...grpc.CallOption) (*GetFixAmountResponse, error) {
	out := new(GetFixAmountResponse)
	err := c.cc.Invoke(ctx, Manager_GetFixAmount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetFixAmountOnly(ctx context.Context, in *GetFixAmountOnlyRequest, opts ...grpc.CallOption) (*GetFixAmountOnlyResponse, error) {
	out := new(GetFixAmountOnlyResponse)
	err := c.cc.Invoke(ctx, Manager_GetFixAmountOnly_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetFixAmounts(ctx context.Context, in *GetFixAmountsRequest, opts ...grpc.CallOption) (*GetFixAmountsResponse, error) {
	out := new(GetFixAmountsResponse)
	err := c.cc.Invoke(ctx, Manager_GetFixAmounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistFixAmount(ctx context.Context, in *ExistFixAmountRequest, opts ...grpc.CallOption) (*ExistFixAmountResponse, error) {
	out := new(ExistFixAmountResponse)
	err := c.cc.Invoke(ctx, Manager_ExistFixAmount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistFixAmountConds(ctx context.Context, in *ExistFixAmountCondsRequest, opts ...grpc.CallOption) (*ExistFixAmountCondsResponse, error) {
	out := new(ExistFixAmountCondsResponse)
	err := c.cc.Invoke(ctx, Manager_ExistFixAmountConds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountFixAmounts(ctx context.Context, in *CountFixAmountsRequest, opts ...grpc.CallOption) (*CountFixAmountsResponse, error) {
	out := new(CountFixAmountsResponse)
	err := c.cc.Invoke(ctx, Manager_CountFixAmounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteFixAmount(ctx context.Context, in *DeleteFixAmountRequest, opts ...grpc.CallOption) (*DeleteFixAmountResponse, error) {
	out := new(DeleteFixAmountResponse)
	err := c.cc.Invoke(ctx, Manager_DeleteFixAmount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateFixAmount(context.Context, *CreateFixAmountRequest) (*CreateFixAmountResponse, error)
	CreateFixAmounts(context.Context, *CreateFixAmountsRequest) (*CreateFixAmountsResponse, error)
	UpdateFixAmount(context.Context, *UpdateFixAmountRequest) (*UpdateFixAmountResponse, error)
	GetFixAmount(context.Context, *GetFixAmountRequest) (*GetFixAmountResponse, error)
	GetFixAmountOnly(context.Context, *GetFixAmountOnlyRequest) (*GetFixAmountOnlyResponse, error)
	GetFixAmounts(context.Context, *GetFixAmountsRequest) (*GetFixAmountsResponse, error)
	ExistFixAmount(context.Context, *ExistFixAmountRequest) (*ExistFixAmountResponse, error)
	ExistFixAmountConds(context.Context, *ExistFixAmountCondsRequest) (*ExistFixAmountCondsResponse, error)
	CountFixAmounts(context.Context, *CountFixAmountsRequest) (*CountFixAmountsResponse, error)
	DeleteFixAmount(context.Context, *DeleteFixAmountRequest) (*DeleteFixAmountResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateFixAmount(context.Context, *CreateFixAmountRequest) (*CreateFixAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFixAmount not implemented")
}
func (UnimplementedManagerServer) CreateFixAmounts(context.Context, *CreateFixAmountsRequest) (*CreateFixAmountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFixAmounts not implemented")
}
func (UnimplementedManagerServer) UpdateFixAmount(context.Context, *UpdateFixAmountRequest) (*UpdateFixAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFixAmount not implemented")
}
func (UnimplementedManagerServer) GetFixAmount(context.Context, *GetFixAmountRequest) (*GetFixAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFixAmount not implemented")
}
func (UnimplementedManagerServer) GetFixAmountOnly(context.Context, *GetFixAmountOnlyRequest) (*GetFixAmountOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFixAmountOnly not implemented")
}
func (UnimplementedManagerServer) GetFixAmounts(context.Context, *GetFixAmountsRequest) (*GetFixAmountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFixAmounts not implemented")
}
func (UnimplementedManagerServer) ExistFixAmount(context.Context, *ExistFixAmountRequest) (*ExistFixAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistFixAmount not implemented")
}
func (UnimplementedManagerServer) ExistFixAmountConds(context.Context, *ExistFixAmountCondsRequest) (*ExistFixAmountCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistFixAmountConds not implemented")
}
func (UnimplementedManagerServer) CountFixAmounts(context.Context, *CountFixAmountsRequest) (*CountFixAmountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountFixAmounts not implemented")
}
func (UnimplementedManagerServer) DeleteFixAmount(context.Context, *DeleteFixAmountRequest) (*DeleteFixAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFixAmount not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateFixAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFixAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateFixAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_CreateFixAmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateFixAmount(ctx, req.(*CreateFixAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateFixAmounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFixAmountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateFixAmounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_CreateFixAmounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateFixAmounts(ctx, req.(*CreateFixAmountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateFixAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFixAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateFixAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_UpdateFixAmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateFixAmount(ctx, req.(*UpdateFixAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetFixAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFixAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetFixAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetFixAmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetFixAmount(ctx, req.(*GetFixAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetFixAmountOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFixAmountOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetFixAmountOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetFixAmountOnly_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetFixAmountOnly(ctx, req.(*GetFixAmountOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetFixAmounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFixAmountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetFixAmounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetFixAmounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetFixAmounts(ctx, req.(*GetFixAmountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistFixAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistFixAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistFixAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_ExistFixAmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistFixAmount(ctx, req.(*ExistFixAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistFixAmountConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistFixAmountCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistFixAmountConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_ExistFixAmountConds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistFixAmountConds(ctx, req.(*ExistFixAmountCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountFixAmounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountFixAmountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountFixAmounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_CountFixAmounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountFixAmounts(ctx, req.(*CountFixAmountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteFixAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFixAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteFixAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_DeleteFixAmount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteFixAmount(ctx, req.(*DeleteFixAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inspire.manager.coupon.fixamount.v1.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFixAmount",
			Handler:    _Manager_CreateFixAmount_Handler,
		},
		{
			MethodName: "CreateFixAmounts",
			Handler:    _Manager_CreateFixAmounts_Handler,
		},
		{
			MethodName: "UpdateFixAmount",
			Handler:    _Manager_UpdateFixAmount_Handler,
		},
		{
			MethodName: "GetFixAmount",
			Handler:    _Manager_GetFixAmount_Handler,
		},
		{
			MethodName: "GetFixAmountOnly",
			Handler:    _Manager_GetFixAmountOnly_Handler,
		},
		{
			MethodName: "GetFixAmounts",
			Handler:    _Manager_GetFixAmounts_Handler,
		},
		{
			MethodName: "ExistFixAmount",
			Handler:    _Manager_ExistFixAmount_Handler,
		},
		{
			MethodName: "ExistFixAmountConds",
			Handler:    _Manager_ExistFixAmountConds_Handler,
		},
		{
			MethodName: "CountFixAmounts",
			Handler:    _Manager_CountFixAmounts_Handler,
		},
		{
			MethodName: "DeleteFixAmount",
			Handler:    _Manager_DeleteFixAmount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/inspire/mgr/v1/coupon/fixamount/fixamount.proto",
}
