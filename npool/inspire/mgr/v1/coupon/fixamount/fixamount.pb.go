// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: npool/inspire/mgr/v1/coupon/fixamount/fixamount.proto

package fixamount

import (
	npool "github.com/NpoolPlatform/message/npool"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FixAmountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               *string `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	AppID            *string `protobuf:"bytes,20,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	Denomination     *string `protobuf:"bytes,30,opt,name=Denomination,proto3,oneof" json:"Denomination,omitempty"`
	Circulation      *string `protobuf:"bytes,40,opt,name=Circulation,proto3,oneof" json:"Circulation,omitempty"`
	ReleasedByUserID *string `protobuf:"bytes,50,opt,name=ReleasedByUserID,proto3,oneof" json:"ReleasedByUserID,omitempty"`
	StartAt          *uint32 `protobuf:"varint,60,opt,name=StartAt,proto3,oneof" json:"StartAt,omitempty"`
	DurationDays     *uint32 `protobuf:"varint,70,opt,name=DurationDays,proto3,oneof" json:"DurationDays,omitempty"`
	Message          *string `protobuf:"bytes,80,opt,name=Message,proto3,oneof" json:"Message,omitempty"`
	Name             *string `protobuf:"bytes,90,opt,name=Name,proto3,oneof" json:"Name,omitempty"`
	Allocated        *uint32 `protobuf:"varint,100,opt,name=Allocated,proto3,oneof" json:"Allocated,omitempty"`
}

func (x *FixAmountReq) Reset() {
	*x = FixAmountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixAmountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixAmountReq) ProtoMessage() {}

func (x *FixAmountReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixAmountReq.ProtoReflect.Descriptor instead.
func (*FixAmountReq) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_rawDescGZIP(), []int{0}
}

func (x *FixAmountReq) GetID() string {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return ""
}

func (x *FixAmountReq) GetAppID() string {
	if x != nil && x.AppID != nil {
		return *x.AppID
	}
	return ""
}

func (x *FixAmountReq) GetDenomination() string {
	if x != nil && x.Denomination != nil {
		return *x.Denomination
	}
	return ""
}

func (x *FixAmountReq) GetCirculation() string {
	if x != nil && x.Circulation != nil {
		return *x.Circulation
	}
	return ""
}

func (x *FixAmountReq) GetReleasedByUserID() string {
	if x != nil && x.ReleasedByUserID != nil {
		return *x.ReleasedByUserID
	}
	return ""
}

func (x *FixAmountReq) GetStartAt() uint32 {
	if x != nil && x.StartAt != nil {
		return *x.StartAt
	}
	return 0
}

func (x *FixAmountReq) GetDurationDays() uint32 {
	if x != nil && x.DurationDays != nil {
		return *x.DurationDays
	}
	return 0
}

func (x *FixAmountReq) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *FixAmountReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *FixAmountReq) GetAllocated() uint32 {
	if x != nil && x.Allocated != nil {
		return *x.Allocated
	}
	return 0
}

type FixAmount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID            string `protobuf:"bytes,20,opt,name=AppID,proto3" json:"AppID,omitempty"`
	Denomination     string `protobuf:"bytes,30,opt,name=Denomination,proto3" json:"Denomination,omitempty"`
	Circulation      string `protobuf:"bytes,40,opt,name=Circulation,proto3" json:"Circulation,omitempty"`
	ReleasedByUserID string `protobuf:"bytes,50,opt,name=ReleasedByUserID,proto3" json:"ReleasedByUserID,omitempty"`
	StartAt          uint32 `protobuf:"varint,60,opt,name=StartAt,proto3" json:"StartAt,omitempty"`
	DurationDays     uint32 `protobuf:"varint,70,opt,name=DurationDays,proto3" json:"DurationDays,omitempty"`
	Message          string `protobuf:"bytes,80,opt,name=Message,proto3" json:"Message,omitempty"`
	Name             string `protobuf:"bytes,90,opt,name=Name,proto3" json:"Name,omitempty"`
	Allocated        uint32 `protobuf:"varint,100,opt,name=Allocated,proto3" json:"Allocated,omitempty"`
	CreatedAt        uint32 `protobuf:"varint,110,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt        uint32 `protobuf:"varint,120,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (x *FixAmount) Reset() {
	*x = FixAmount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixAmount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixAmount) ProtoMessage() {}

func (x *FixAmount) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixAmount.ProtoReflect.Descriptor instead.
func (*FixAmount) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_rawDescGZIP(), []int{1}
}

func (x *FixAmount) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *FixAmount) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *FixAmount) GetDenomination() string {
	if x != nil {
		return x.Denomination
	}
	return ""
}

func (x *FixAmount) GetCirculation() string {
	if x != nil {
		return x.Circulation
	}
	return ""
}

func (x *FixAmount) GetReleasedByUserID() string {
	if x != nil {
		return x.ReleasedByUserID
	}
	return ""
}

func (x *FixAmount) GetStartAt() uint32 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *FixAmount) GetDurationDays() uint32 {
	if x != nil {
		return x.DurationDays
	}
	return 0
}

func (x *FixAmount) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *FixAmount) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FixAmount) GetAllocated() uint32 {
	if x != nil {
		return x.Allocated
	}
	return 0
}

func (x *FixAmount) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *FixAmount) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               *npool.StringVal      `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	AppID            *npool.StringVal      `protobuf:"bytes,20,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	ReleasedByUserID *npool.StringVal      `protobuf:"bytes,30,opt,name=ReleasedByUserID,proto3,oneof" json:"ReleasedByUserID,omitempty"`
	StartAt          *npool.Uint32Val      `protobuf:"bytes,40,opt,name=StartAt,proto3,oneof" json:"StartAt,omitempty"`
	DurationDays     *npool.Uint32Val      `protobuf:"bytes,50,opt,name=DurationDays,proto3,oneof" json:"DurationDays,omitempty"`
	Name             *npool.StringVal      `protobuf:"bytes,60,opt,name=Name,proto3,oneof" json:"Name,omitempty"`
	IDs              *npool.StringSliceVal `protobuf:"bytes,70,opt,name=IDs,proto3,oneof" json:"IDs,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *npool.StringVal {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetAppID() *npool.StringVal {
	if x != nil {
		return x.AppID
	}
	return nil
}

func (x *Conds) GetReleasedByUserID() *npool.StringVal {
	if x != nil {
		return x.ReleasedByUserID
	}
	return nil
}

func (x *Conds) GetStartAt() *npool.Uint32Val {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *Conds) GetDurationDays() *npool.Uint32Val {
	if x != nil {
		return x.DurationDays
	}
	return nil
}

func (x *Conds) GetName() *npool.StringVal {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *Conds) GetIDs() *npool.StringSliceVal {
	if x != nil {
		return x.IDs
	}
	return nil
}

type CreateFixAmountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *FixAmountReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateFixAmountRequest) Reset() {
	*x = CreateFixAmountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFixAmountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFixAmountRequest) ProtoMessage() {}

func (x *CreateFixAmountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFixAmountRequest.ProtoReflect.Descriptor instead.
func (*CreateFixAmountRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_rawDescGZIP(), []int{3}
}

func (x *CreateFixAmountRequest) GetInfo() *FixAmountReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateFixAmountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *FixAmount `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateFixAmountResponse) Reset() {
	*x = CreateFixAmountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFixAmountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFixAmountResponse) ProtoMessage() {}

func (x *CreateFixAmountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFixAmountResponse.ProtoReflect.Descriptor instead.
func (*CreateFixAmountResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_rawDescGZIP(), []int{4}
}

func (x *CreateFixAmountResponse) GetInfo() *FixAmount {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateFixAmountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*FixAmountReq `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateFixAmountsRequest) Reset() {
	*x = CreateFixAmountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFixAmountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFixAmountsRequest) ProtoMessage() {}

func (x *CreateFixAmountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFixAmountsRequest.ProtoReflect.Descriptor instead.
func (*CreateFixAmountsRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_rawDescGZIP(), []int{5}
}

func (x *CreateFixAmountsRequest) GetInfos() []*FixAmountReq {
	if x != nil {
		return x.Infos
	}
	return nil
}

type CreateFixAmountsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*FixAmount `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateFixAmountsResponse) Reset() {
	*x = CreateFixAmountsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFixAmountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFixAmountsResponse) ProtoMessage() {}

func (x *CreateFixAmountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFixAmountsResponse.ProtoReflect.Descriptor instead.
func (*CreateFixAmountsResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_rawDescGZIP(), []int{6}
}

func (x *CreateFixAmountsResponse) GetInfos() []*FixAmount {
	if x != nil {
		return x.Infos
	}
	return nil
}

type UpdateFixAmountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *FixAmountReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateFixAmountRequest) Reset() {
	*x = UpdateFixAmountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFixAmountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFixAmountRequest) ProtoMessage() {}

func (x *UpdateFixAmountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFixAmountRequest.ProtoReflect.Descriptor instead.
func (*UpdateFixAmountRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateFixAmountRequest) GetInfo() *FixAmountReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateFixAmountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *FixAmount `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateFixAmountResponse) Reset() {
	*x = UpdateFixAmountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFixAmountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFixAmountResponse) ProtoMessage() {}

func (x *UpdateFixAmountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFixAmountResponse.ProtoReflect.Descriptor instead.
func (*UpdateFixAmountResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateFixAmountResponse) GetInfo() *FixAmount {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetFixAmountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetFixAmountRequest) Reset() {
	*x = GetFixAmountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFixAmountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFixAmountRequest) ProtoMessage() {}

func (x *GetFixAmountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFixAmountRequest.ProtoReflect.Descriptor instead.
func (*GetFixAmountRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_rawDescGZIP(), []int{9}
}

func (x *GetFixAmountRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetFixAmountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *FixAmount `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetFixAmountResponse) Reset() {
	*x = GetFixAmountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFixAmountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFixAmountResponse) ProtoMessage() {}

func (x *GetFixAmountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFixAmountResponse.ProtoReflect.Descriptor instead.
func (*GetFixAmountResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_rawDescGZIP(), []int{10}
}

func (x *GetFixAmountResponse) GetInfo() *FixAmount {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetFixAmountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetFixAmountsRequest) Reset() {
	*x = GetFixAmountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFixAmountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFixAmountsRequest) ProtoMessage() {}

func (x *GetFixAmountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFixAmountsRequest.ProtoReflect.Descriptor instead.
func (*GetFixAmountsRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_rawDescGZIP(), []int{11}
}

func (x *GetFixAmountsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetFixAmountsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetFixAmountsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetFixAmountsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*FixAmount `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32       `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetFixAmountsResponse) Reset() {
	*x = GetFixAmountsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFixAmountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFixAmountsResponse) ProtoMessage() {}

func (x *GetFixAmountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFixAmountsResponse.ProtoReflect.Descriptor instead.
func (*GetFixAmountsResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_rawDescGZIP(), []int{12}
}

func (x *GetFixAmountsResponse) GetInfos() []*FixAmount {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetFixAmountsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetFixAmountOnlyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *GetFixAmountOnlyRequest) Reset() {
	*x = GetFixAmountOnlyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFixAmountOnlyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFixAmountOnlyRequest) ProtoMessage() {}

func (x *GetFixAmountOnlyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFixAmountOnlyRequest.ProtoReflect.Descriptor instead.
func (*GetFixAmountOnlyRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_rawDescGZIP(), []int{13}
}

func (x *GetFixAmountOnlyRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type GetFixAmountOnlyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *FixAmount `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetFixAmountOnlyResponse) Reset() {
	*x = GetFixAmountOnlyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFixAmountOnlyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFixAmountOnlyResponse) ProtoMessage() {}

func (x *GetFixAmountOnlyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFixAmountOnlyResponse.ProtoReflect.Descriptor instead.
func (*GetFixAmountOnlyResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_rawDescGZIP(), []int{14}
}

func (x *GetFixAmountOnlyResponse) GetInfo() *FixAmount {
	if x != nil {
		return x.Info
	}
	return nil
}

type ExistFixAmountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ExistFixAmountRequest) Reset() {
	*x = ExistFixAmountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistFixAmountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistFixAmountRequest) ProtoMessage() {}

func (x *ExistFixAmountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistFixAmountRequest.ProtoReflect.Descriptor instead.
func (*ExistFixAmountRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_rawDescGZIP(), []int{15}
}

func (x *ExistFixAmountRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ExistFixAmountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistFixAmountResponse) Reset() {
	*x = ExistFixAmountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistFixAmountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistFixAmountResponse) ProtoMessage() {}

func (x *ExistFixAmountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistFixAmountResponse.ProtoReflect.Descriptor instead.
func (*ExistFixAmountResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_rawDescGZIP(), []int{16}
}

func (x *ExistFixAmountResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type ExistFixAmountCondsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *ExistFixAmountCondsRequest) Reset() {
	*x = ExistFixAmountCondsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistFixAmountCondsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistFixAmountCondsRequest) ProtoMessage() {}

func (x *ExistFixAmountCondsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistFixAmountCondsRequest.ProtoReflect.Descriptor instead.
func (*ExistFixAmountCondsRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_rawDescGZIP(), []int{17}
}

func (x *ExistFixAmountCondsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type ExistFixAmountCondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistFixAmountCondsResponse) Reset() {
	*x = ExistFixAmountCondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistFixAmountCondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistFixAmountCondsResponse) ProtoMessage() {}

func (x *ExistFixAmountCondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistFixAmountCondsResponse.ProtoReflect.Descriptor instead.
func (*ExistFixAmountCondsResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_rawDescGZIP(), []int{18}
}

func (x *ExistFixAmountCondsResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type CountFixAmountsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *CountFixAmountsRequest) Reset() {
	*x = CountFixAmountsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountFixAmountsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountFixAmountsRequest) ProtoMessage() {}

func (x *CountFixAmountsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountFixAmountsRequest.ProtoReflect.Descriptor instead.
func (*CountFixAmountsRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_rawDescGZIP(), []int{19}
}

func (x *CountFixAmountsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type CountFixAmountsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info uint32 `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CountFixAmountsResponse) Reset() {
	*x = CountFixAmountsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountFixAmountsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountFixAmountsResponse) ProtoMessage() {}

func (x *CountFixAmountsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountFixAmountsResponse.ProtoReflect.Descriptor instead.
func (*CountFixAmountsResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_rawDescGZIP(), []int{20}
}

func (x *CountFixAmountsResponse) GetInfo() uint32 {
	if x != nil {
		return x.Info
	}
	return 0
}

type DeleteFixAmountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *DeleteFixAmountRequest) Reset() {
	*x = DeleteFixAmountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFixAmountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFixAmountRequest) ProtoMessage() {}

func (x *DeleteFixAmountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFixAmountRequest.ProtoReflect.Descriptor instead.
func (*DeleteFixAmountRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteFixAmountRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type DeleteFixAmountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *FixAmount `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteFixAmountResponse) Reset() {
	*x = DeleteFixAmountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFixAmountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFixAmountResponse) ProtoMessage() {}

func (x *DeleteFixAmountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFixAmountResponse.ProtoReflect.Descriptor instead.
func (*DeleteFixAmountResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteFixAmountResponse) GetInfo() *FixAmount {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto protoreflect.FileDescriptor

var file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_rawDesc = []byte{
	0x0a, 0x35, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f,
	0x6d, 0x67, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2f, 0x66, 0x69,
	0x78, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x66, 0x69, 0x78, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x23, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e,
	0x66, 0x69, 0x78, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x11, 0x6e, 0x70,
	0x6f, 0x6f, 0x6c, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xe9, 0x03, 0x0a, 0x0c, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x13, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02,
	0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x88, 0x01, 0x01,
	0x12, 0x27, 0x0a, 0x0c, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0c, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x43, 0x69, 0x72,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x0b, 0x43, 0x69, 0x72, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x2f, 0x0a, 0x10, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x10, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x3c, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x05, 0x52, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x27, 0x0a, 0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73,
	0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x06, 0x52, 0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x09, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x09, 0x52, 0x09, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x43, 0x69, 0x72, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x22, 0xe9, 0x02, 0x0a, 0x09,
	0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x0c, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x69, 0x72, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x69, 0x72, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x3c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x18, 0x46, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xcc, 0x03, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x12, 0x28, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x05, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48,
	0x01, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x10, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x02, 0x52, 0x10, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x32, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x79, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x48, 0x04, 0x52, 0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x05, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2f, 0x0a, 0x03, 0x49, 0x44, 0x73, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x06, 0x52, 0x03, 0x49, 0x44, 0x73, 0x88,
	0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x41, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x79, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x49, 0x44, 0x73, 0x22, 0x5f, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x45, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x66, 0x69, 0x78, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5d, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x66, 0x69, 0x78, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x62, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x47, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x66, 0x69, 0x78, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x60, 0x0a, 0x18, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x66,
	0x69, 0x78, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x78, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x5f, 0x0a, 0x16,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x66, 0x69,
	0x78, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x78, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5d, 0x0a,
	0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e,
	0x66, 0x69, 0x78, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x78,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x25, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x44, 0x22, 0x5a, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x2e, 0x66, 0x69, 0x78, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x86, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x2e, 0x66, 0x69, 0x78, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x73, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x46,
	0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x44, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x66, 0x69, 0x78, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x5b, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x6e, 0x6c,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x2e, 0x66, 0x69, 0x78, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x5e, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x66, 0x69,
	0x78, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x78, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x27, 0x0a, 0x15, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x44, 0x22, 0x2c, 0x0a, 0x16, 0x45, 0x78, 0x69, 0x73, 0x74, 0x46, 0x69, 0x78, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x5e, 0x0a, 0x1a, 0x45, 0x78, 0x69, 0x73, 0x74, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x40, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x66, 0x69, 0x78, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x22, 0x31, 0x0a, 0x1b, 0x45, 0x78, 0x69, 0x73, 0x74, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5a, 0x0a, 0x16, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x78,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40,
	0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x66, 0x69, 0x78, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x22, 0x2d, 0x0a, 0x17, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x28, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x5d, 0x0a, 0x17, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x66, 0x69, 0x78, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0xb3, 0x0b, 0x0a, 0x07, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x12, 0x8e, 0x01, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x2e, 0x66, 0x69, 0x78, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x66,
	0x69, 0x78, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x91, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x3c, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x2e, 0x66, 0x69, 0x78, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x2e, 0x66, 0x69, 0x78, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8e, 0x01, 0x0a, 0x0f, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x66, 0x69, 0x78, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x2e, 0x66, 0x69, 0x78, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x0c, 0x47,
	0x65, 0x74, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x2e, 0x69, 0x6e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x66, 0x69, 0x78, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x66,
	0x69, 0x78, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46,
	0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x91, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x3c, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x2e, 0x66, 0x69, 0x78, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x66,
	0x69, 0x78, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46,
	0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x88, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x46, 0x69,
	0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x39, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x2e, 0x66, 0x69, 0x78, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x66, 0x69, 0x78,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x78,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x8b, 0x01, 0x0a, 0x0e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x46, 0x69, 0x78, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3a, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x66, 0x69,
	0x78, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3b, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x66, 0x69, 0x78, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x46, 0x69, 0x78, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x9a, 0x01, 0x0a, 0x13, 0x45, 0x78, 0x69, 0x73, 0x74, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x3f, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x2e, 0x66, 0x69, 0x78, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x2e, 0x66, 0x69, 0x78, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8e, 0x01, 0x0a,
	0x0f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x12, 0x3b, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x66, 0x69, 0x78, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x78, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x66, 0x69, 0x78, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8e, 0x01,
	0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x3b, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x66, 0x69, 0x78, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69,
	0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3c,
	0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x66, 0x69, 0x78, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x78, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x48,
	0x5a, 0x46, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f,
	0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2f, 0x6d, 0x67, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2f, 0x66,
	0x69, 0x78, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_rawDescOnce sync.Once
	file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_rawDescData = file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_rawDesc
)

func file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_rawDescGZIP() []byte {
	file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_rawDescOnce.Do(func() {
		file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_rawDescData)
	})
	return file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_rawDescData
}

var file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_goTypes = []interface{}{
	(*FixAmountReq)(nil),                // 0: inspire.manager.coupon.fixamount.v1.FixAmountReq
	(*FixAmount)(nil),                   // 1: inspire.manager.coupon.fixamount.v1.FixAmount
	(*Conds)(nil),                       // 2: inspire.manager.coupon.fixamount.v1.Conds
	(*CreateFixAmountRequest)(nil),      // 3: inspire.manager.coupon.fixamount.v1.CreateFixAmountRequest
	(*CreateFixAmountResponse)(nil),     // 4: inspire.manager.coupon.fixamount.v1.CreateFixAmountResponse
	(*CreateFixAmountsRequest)(nil),     // 5: inspire.manager.coupon.fixamount.v1.CreateFixAmountsRequest
	(*CreateFixAmountsResponse)(nil),    // 6: inspire.manager.coupon.fixamount.v1.CreateFixAmountsResponse
	(*UpdateFixAmountRequest)(nil),      // 7: inspire.manager.coupon.fixamount.v1.UpdateFixAmountRequest
	(*UpdateFixAmountResponse)(nil),     // 8: inspire.manager.coupon.fixamount.v1.UpdateFixAmountResponse
	(*GetFixAmountRequest)(nil),         // 9: inspire.manager.coupon.fixamount.v1.GetFixAmountRequest
	(*GetFixAmountResponse)(nil),        // 10: inspire.manager.coupon.fixamount.v1.GetFixAmountResponse
	(*GetFixAmountsRequest)(nil),        // 11: inspire.manager.coupon.fixamount.v1.GetFixAmountsRequest
	(*GetFixAmountsResponse)(nil),       // 12: inspire.manager.coupon.fixamount.v1.GetFixAmountsResponse
	(*GetFixAmountOnlyRequest)(nil),     // 13: inspire.manager.coupon.fixamount.v1.GetFixAmountOnlyRequest
	(*GetFixAmountOnlyResponse)(nil),    // 14: inspire.manager.coupon.fixamount.v1.GetFixAmountOnlyResponse
	(*ExistFixAmountRequest)(nil),       // 15: inspire.manager.coupon.fixamount.v1.ExistFixAmountRequest
	(*ExistFixAmountResponse)(nil),      // 16: inspire.manager.coupon.fixamount.v1.ExistFixAmountResponse
	(*ExistFixAmountCondsRequest)(nil),  // 17: inspire.manager.coupon.fixamount.v1.ExistFixAmountCondsRequest
	(*ExistFixAmountCondsResponse)(nil), // 18: inspire.manager.coupon.fixamount.v1.ExistFixAmountCondsResponse
	(*CountFixAmountsRequest)(nil),      // 19: inspire.manager.coupon.fixamount.v1.CountFixAmountsRequest
	(*CountFixAmountsResponse)(nil),     // 20: inspire.manager.coupon.fixamount.v1.CountFixAmountsResponse
	(*DeleteFixAmountRequest)(nil),      // 21: inspire.manager.coupon.fixamount.v1.DeleteFixAmountRequest
	(*DeleteFixAmountResponse)(nil),     // 22: inspire.manager.coupon.fixamount.v1.DeleteFixAmountResponse
	(*npool.StringVal)(nil),             // 23: npool.v1.StringVal
	(*npool.Uint32Val)(nil),             // 24: npool.v1.Uint32Val
	(*npool.StringSliceVal)(nil),        // 25: npool.v1.StringSliceVal
}
var file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_depIdxs = []int32{
	23, // 0: inspire.manager.coupon.fixamount.v1.Conds.ID:type_name -> npool.v1.StringVal
	23, // 1: inspire.manager.coupon.fixamount.v1.Conds.AppID:type_name -> npool.v1.StringVal
	23, // 2: inspire.manager.coupon.fixamount.v1.Conds.ReleasedByUserID:type_name -> npool.v1.StringVal
	24, // 3: inspire.manager.coupon.fixamount.v1.Conds.StartAt:type_name -> npool.v1.Uint32Val
	24, // 4: inspire.manager.coupon.fixamount.v1.Conds.DurationDays:type_name -> npool.v1.Uint32Val
	23, // 5: inspire.manager.coupon.fixamount.v1.Conds.Name:type_name -> npool.v1.StringVal
	25, // 6: inspire.manager.coupon.fixamount.v1.Conds.IDs:type_name -> npool.v1.StringSliceVal
	0,  // 7: inspire.manager.coupon.fixamount.v1.CreateFixAmountRequest.Info:type_name -> inspire.manager.coupon.fixamount.v1.FixAmountReq
	1,  // 8: inspire.manager.coupon.fixamount.v1.CreateFixAmountResponse.Info:type_name -> inspire.manager.coupon.fixamount.v1.FixAmount
	0,  // 9: inspire.manager.coupon.fixamount.v1.CreateFixAmountsRequest.Infos:type_name -> inspire.manager.coupon.fixamount.v1.FixAmountReq
	1,  // 10: inspire.manager.coupon.fixamount.v1.CreateFixAmountsResponse.Infos:type_name -> inspire.manager.coupon.fixamount.v1.FixAmount
	0,  // 11: inspire.manager.coupon.fixamount.v1.UpdateFixAmountRequest.Info:type_name -> inspire.manager.coupon.fixamount.v1.FixAmountReq
	1,  // 12: inspire.manager.coupon.fixamount.v1.UpdateFixAmountResponse.Info:type_name -> inspire.manager.coupon.fixamount.v1.FixAmount
	1,  // 13: inspire.manager.coupon.fixamount.v1.GetFixAmountResponse.Info:type_name -> inspire.manager.coupon.fixamount.v1.FixAmount
	2,  // 14: inspire.manager.coupon.fixamount.v1.GetFixAmountsRequest.Conds:type_name -> inspire.manager.coupon.fixamount.v1.Conds
	1,  // 15: inspire.manager.coupon.fixamount.v1.GetFixAmountsResponse.Infos:type_name -> inspire.manager.coupon.fixamount.v1.FixAmount
	2,  // 16: inspire.manager.coupon.fixamount.v1.GetFixAmountOnlyRequest.Conds:type_name -> inspire.manager.coupon.fixamount.v1.Conds
	1,  // 17: inspire.manager.coupon.fixamount.v1.GetFixAmountOnlyResponse.Info:type_name -> inspire.manager.coupon.fixamount.v1.FixAmount
	2,  // 18: inspire.manager.coupon.fixamount.v1.ExistFixAmountCondsRequest.Conds:type_name -> inspire.manager.coupon.fixamount.v1.Conds
	2,  // 19: inspire.manager.coupon.fixamount.v1.CountFixAmountsRequest.Conds:type_name -> inspire.manager.coupon.fixamount.v1.Conds
	1,  // 20: inspire.manager.coupon.fixamount.v1.DeleteFixAmountResponse.Info:type_name -> inspire.manager.coupon.fixamount.v1.FixAmount
	3,  // 21: inspire.manager.coupon.fixamount.v1.Manager.CreateFixAmount:input_type -> inspire.manager.coupon.fixamount.v1.CreateFixAmountRequest
	5,  // 22: inspire.manager.coupon.fixamount.v1.Manager.CreateFixAmounts:input_type -> inspire.manager.coupon.fixamount.v1.CreateFixAmountsRequest
	7,  // 23: inspire.manager.coupon.fixamount.v1.Manager.UpdateFixAmount:input_type -> inspire.manager.coupon.fixamount.v1.UpdateFixAmountRequest
	9,  // 24: inspire.manager.coupon.fixamount.v1.Manager.GetFixAmount:input_type -> inspire.manager.coupon.fixamount.v1.GetFixAmountRequest
	13, // 25: inspire.manager.coupon.fixamount.v1.Manager.GetFixAmountOnly:input_type -> inspire.manager.coupon.fixamount.v1.GetFixAmountOnlyRequest
	11, // 26: inspire.manager.coupon.fixamount.v1.Manager.GetFixAmounts:input_type -> inspire.manager.coupon.fixamount.v1.GetFixAmountsRequest
	15, // 27: inspire.manager.coupon.fixamount.v1.Manager.ExistFixAmount:input_type -> inspire.manager.coupon.fixamount.v1.ExistFixAmountRequest
	17, // 28: inspire.manager.coupon.fixamount.v1.Manager.ExistFixAmountConds:input_type -> inspire.manager.coupon.fixamount.v1.ExistFixAmountCondsRequest
	19, // 29: inspire.manager.coupon.fixamount.v1.Manager.CountFixAmounts:input_type -> inspire.manager.coupon.fixamount.v1.CountFixAmountsRequest
	21, // 30: inspire.manager.coupon.fixamount.v1.Manager.DeleteFixAmount:input_type -> inspire.manager.coupon.fixamount.v1.DeleteFixAmountRequest
	4,  // 31: inspire.manager.coupon.fixamount.v1.Manager.CreateFixAmount:output_type -> inspire.manager.coupon.fixamount.v1.CreateFixAmountResponse
	6,  // 32: inspire.manager.coupon.fixamount.v1.Manager.CreateFixAmounts:output_type -> inspire.manager.coupon.fixamount.v1.CreateFixAmountsResponse
	8,  // 33: inspire.manager.coupon.fixamount.v1.Manager.UpdateFixAmount:output_type -> inspire.manager.coupon.fixamount.v1.UpdateFixAmountResponse
	10, // 34: inspire.manager.coupon.fixamount.v1.Manager.GetFixAmount:output_type -> inspire.manager.coupon.fixamount.v1.GetFixAmountResponse
	14, // 35: inspire.manager.coupon.fixamount.v1.Manager.GetFixAmountOnly:output_type -> inspire.manager.coupon.fixamount.v1.GetFixAmountOnlyResponse
	12, // 36: inspire.manager.coupon.fixamount.v1.Manager.GetFixAmounts:output_type -> inspire.manager.coupon.fixamount.v1.GetFixAmountsResponse
	16, // 37: inspire.manager.coupon.fixamount.v1.Manager.ExistFixAmount:output_type -> inspire.manager.coupon.fixamount.v1.ExistFixAmountResponse
	18, // 38: inspire.manager.coupon.fixamount.v1.Manager.ExistFixAmountConds:output_type -> inspire.manager.coupon.fixamount.v1.ExistFixAmountCondsResponse
	20, // 39: inspire.manager.coupon.fixamount.v1.Manager.CountFixAmounts:output_type -> inspire.manager.coupon.fixamount.v1.CountFixAmountsResponse
	22, // 40: inspire.manager.coupon.fixamount.v1.Manager.DeleteFixAmount:output_type -> inspire.manager.coupon.fixamount.v1.DeleteFixAmountResponse
	31, // [31:41] is the sub-list for method output_type
	21, // [21:31] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_init() }
func file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_init() {
	if File_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FixAmountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FixAmount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFixAmountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFixAmountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFixAmountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFixAmountsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFixAmountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFixAmountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFixAmountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFixAmountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFixAmountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFixAmountsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFixAmountOnlyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFixAmountOnlyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistFixAmountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistFixAmountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistFixAmountCondsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistFixAmountCondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountFixAmountsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountFixAmountsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFixAmountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFixAmountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_goTypes,
		DependencyIndexes: file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_depIdxs,
		MessageInfos:      file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_msgTypes,
	}.Build()
	File_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto = out.File
	file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_rawDesc = nil
	file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_goTypes = nil
	file_npool_inspire_mgr_v1_coupon_fixamount_fixamount_proto_depIdxs = nil
}
