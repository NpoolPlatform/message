// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/inspire/mgr/v1/coupon/fixamountpool/fixamountpool.proto

package fixmountpool

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateFixAmountPool(ctx context.Context, in *CreateFixAmountPoolRequest, opts ...grpc.CallOption) (*CreateFixAmountPoolResponse, error)
	CreateFixAmountPools(ctx context.Context, in *CreateFixAmountPoolsRequest, opts ...grpc.CallOption) (*CreateFixAmountPoolsResponse, error)
	UpdateFixAmountPool(ctx context.Context, in *UpdateFixAmountPoolRequest, opts ...grpc.CallOption) (*UpdateFixAmountPoolResponse, error)
	GetFixAmountPool(ctx context.Context, in *GetFixAmountPoolRequest, opts ...grpc.CallOption) (*GetFixAmountPoolResponse, error)
	GetFixAmountPoolOnly(ctx context.Context, in *GetFixAmountPoolOnlyRequest, opts ...grpc.CallOption) (*GetFixAmountPoolOnlyResponse, error)
	GetFixAmountPools(ctx context.Context, in *GetFixAmountPoolsRequest, opts ...grpc.CallOption) (*GetFixAmountPoolsResponse, error)
	ExistFixAmountPool(ctx context.Context, in *ExistFixAmountPoolRequest, opts ...grpc.CallOption) (*ExistFixAmountPoolResponse, error)
	ExistFixAmountPoolConds(ctx context.Context, in *ExistFixAmountPoolCondsRequest, opts ...grpc.CallOption) (*ExistFixAmountPoolCondsResponse, error)
	CountFixAmountPools(ctx context.Context, in *CountFixAmountPoolsRequest, opts ...grpc.CallOption) (*CountFixAmountPoolsResponse, error)
	DeleteFixAmountPool(ctx context.Context, in *DeleteFixAmountPoolRequest, opts ...grpc.CallOption) (*DeleteFixAmountPoolResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateFixAmountPool(ctx context.Context, in *CreateFixAmountPoolRequest, opts ...grpc.CallOption) (*CreateFixAmountPoolResponse, error) {
	out := new(CreateFixAmountPoolResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.fixmountpool.v1.Manager/CreateFixAmountPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateFixAmountPools(ctx context.Context, in *CreateFixAmountPoolsRequest, opts ...grpc.CallOption) (*CreateFixAmountPoolsResponse, error) {
	out := new(CreateFixAmountPoolsResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.fixmountpool.v1.Manager/CreateFixAmountPools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateFixAmountPool(ctx context.Context, in *UpdateFixAmountPoolRequest, opts ...grpc.CallOption) (*UpdateFixAmountPoolResponse, error) {
	out := new(UpdateFixAmountPoolResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.fixmountpool.v1.Manager/UpdateFixAmountPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetFixAmountPool(ctx context.Context, in *GetFixAmountPoolRequest, opts ...grpc.CallOption) (*GetFixAmountPoolResponse, error) {
	out := new(GetFixAmountPoolResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.fixmountpool.v1.Manager/GetFixAmountPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetFixAmountPoolOnly(ctx context.Context, in *GetFixAmountPoolOnlyRequest, opts ...grpc.CallOption) (*GetFixAmountPoolOnlyResponse, error) {
	out := new(GetFixAmountPoolOnlyResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.fixmountpool.v1.Manager/GetFixAmountPoolOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetFixAmountPools(ctx context.Context, in *GetFixAmountPoolsRequest, opts ...grpc.CallOption) (*GetFixAmountPoolsResponse, error) {
	out := new(GetFixAmountPoolsResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.fixmountpool.v1.Manager/GetFixAmountPools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistFixAmountPool(ctx context.Context, in *ExistFixAmountPoolRequest, opts ...grpc.CallOption) (*ExistFixAmountPoolResponse, error) {
	out := new(ExistFixAmountPoolResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.fixmountpool.v1.Manager/ExistFixAmountPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistFixAmountPoolConds(ctx context.Context, in *ExistFixAmountPoolCondsRequest, opts ...grpc.CallOption) (*ExistFixAmountPoolCondsResponse, error) {
	out := new(ExistFixAmountPoolCondsResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.fixmountpool.v1.Manager/ExistFixAmountPoolConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountFixAmountPools(ctx context.Context, in *CountFixAmountPoolsRequest, opts ...grpc.CallOption) (*CountFixAmountPoolsResponse, error) {
	out := new(CountFixAmountPoolsResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.fixmountpool.v1.Manager/CountFixAmountPools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteFixAmountPool(ctx context.Context, in *DeleteFixAmountPoolRequest, opts ...grpc.CallOption) (*DeleteFixAmountPoolResponse, error) {
	out := new(DeleteFixAmountPoolResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.fixmountpool.v1.Manager/DeleteFixAmountPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateFixAmountPool(context.Context, *CreateFixAmountPoolRequest) (*CreateFixAmountPoolResponse, error)
	CreateFixAmountPools(context.Context, *CreateFixAmountPoolsRequest) (*CreateFixAmountPoolsResponse, error)
	UpdateFixAmountPool(context.Context, *UpdateFixAmountPoolRequest) (*UpdateFixAmountPoolResponse, error)
	GetFixAmountPool(context.Context, *GetFixAmountPoolRequest) (*GetFixAmountPoolResponse, error)
	GetFixAmountPoolOnly(context.Context, *GetFixAmountPoolOnlyRequest) (*GetFixAmountPoolOnlyResponse, error)
	GetFixAmountPools(context.Context, *GetFixAmountPoolsRequest) (*GetFixAmountPoolsResponse, error)
	ExistFixAmountPool(context.Context, *ExistFixAmountPoolRequest) (*ExistFixAmountPoolResponse, error)
	ExistFixAmountPoolConds(context.Context, *ExistFixAmountPoolCondsRequest) (*ExistFixAmountPoolCondsResponse, error)
	CountFixAmountPools(context.Context, *CountFixAmountPoolsRequest) (*CountFixAmountPoolsResponse, error)
	DeleteFixAmountPool(context.Context, *DeleteFixAmountPoolRequest) (*DeleteFixAmountPoolResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateFixAmountPool(context.Context, *CreateFixAmountPoolRequest) (*CreateFixAmountPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFixAmountPool not implemented")
}
func (UnimplementedManagerServer) CreateFixAmountPools(context.Context, *CreateFixAmountPoolsRequest) (*CreateFixAmountPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFixAmountPools not implemented")
}
func (UnimplementedManagerServer) UpdateFixAmountPool(context.Context, *UpdateFixAmountPoolRequest) (*UpdateFixAmountPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFixAmountPool not implemented")
}
func (UnimplementedManagerServer) GetFixAmountPool(context.Context, *GetFixAmountPoolRequest) (*GetFixAmountPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFixAmountPool not implemented")
}
func (UnimplementedManagerServer) GetFixAmountPoolOnly(context.Context, *GetFixAmountPoolOnlyRequest) (*GetFixAmountPoolOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFixAmountPoolOnly not implemented")
}
func (UnimplementedManagerServer) GetFixAmountPools(context.Context, *GetFixAmountPoolsRequest) (*GetFixAmountPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFixAmountPools not implemented")
}
func (UnimplementedManagerServer) ExistFixAmountPool(context.Context, *ExistFixAmountPoolRequest) (*ExistFixAmountPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistFixAmountPool not implemented")
}
func (UnimplementedManagerServer) ExistFixAmountPoolConds(context.Context, *ExistFixAmountPoolCondsRequest) (*ExistFixAmountPoolCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistFixAmountPoolConds not implemented")
}
func (UnimplementedManagerServer) CountFixAmountPools(context.Context, *CountFixAmountPoolsRequest) (*CountFixAmountPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountFixAmountPools not implemented")
}
func (UnimplementedManagerServer) DeleteFixAmountPool(context.Context, *DeleteFixAmountPoolRequest) (*DeleteFixAmountPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFixAmountPool not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateFixAmountPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFixAmountPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateFixAmountPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.fixmountpool.v1.Manager/CreateFixAmountPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateFixAmountPool(ctx, req.(*CreateFixAmountPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateFixAmountPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFixAmountPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateFixAmountPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.fixmountpool.v1.Manager/CreateFixAmountPools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateFixAmountPools(ctx, req.(*CreateFixAmountPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateFixAmountPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFixAmountPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateFixAmountPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.fixmountpool.v1.Manager/UpdateFixAmountPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateFixAmountPool(ctx, req.(*UpdateFixAmountPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetFixAmountPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFixAmountPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetFixAmountPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.fixmountpool.v1.Manager/GetFixAmountPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetFixAmountPool(ctx, req.(*GetFixAmountPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetFixAmountPoolOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFixAmountPoolOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetFixAmountPoolOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.fixmountpool.v1.Manager/GetFixAmountPoolOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetFixAmountPoolOnly(ctx, req.(*GetFixAmountPoolOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetFixAmountPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFixAmountPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetFixAmountPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.fixmountpool.v1.Manager/GetFixAmountPools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetFixAmountPools(ctx, req.(*GetFixAmountPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistFixAmountPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistFixAmountPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistFixAmountPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.fixmountpool.v1.Manager/ExistFixAmountPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistFixAmountPool(ctx, req.(*ExistFixAmountPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistFixAmountPoolConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistFixAmountPoolCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistFixAmountPoolConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.fixmountpool.v1.Manager/ExistFixAmountPoolConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistFixAmountPoolConds(ctx, req.(*ExistFixAmountPoolCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountFixAmountPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountFixAmountPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountFixAmountPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.fixmountpool.v1.Manager/CountFixAmountPools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountFixAmountPools(ctx, req.(*CountFixAmountPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteFixAmountPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFixAmountPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteFixAmountPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.fixmountpool.v1.Manager/DeleteFixAmountPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteFixAmountPool(ctx, req.(*DeleteFixAmountPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inspire.manager.coupon.fixmountpool.v1.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFixAmountPool",
			Handler:    _Manager_CreateFixAmountPool_Handler,
		},
		{
			MethodName: "CreateFixAmountPools",
			Handler:    _Manager_CreateFixAmountPools_Handler,
		},
		{
			MethodName: "UpdateFixAmountPool",
			Handler:    _Manager_UpdateFixAmountPool_Handler,
		},
		{
			MethodName: "GetFixAmountPool",
			Handler:    _Manager_GetFixAmountPool_Handler,
		},
		{
			MethodName: "GetFixAmountPoolOnly",
			Handler:    _Manager_GetFixAmountPoolOnly_Handler,
		},
		{
			MethodName: "GetFixAmountPools",
			Handler:    _Manager_GetFixAmountPools_Handler,
		},
		{
			MethodName: "ExistFixAmountPool",
			Handler:    _Manager_ExistFixAmountPool_Handler,
		},
		{
			MethodName: "ExistFixAmountPoolConds",
			Handler:    _Manager_ExistFixAmountPoolConds_Handler,
		},
		{
			MethodName: "CountFixAmountPools",
			Handler:    _Manager_CountFixAmountPools_Handler,
		},
		{
			MethodName: "DeleteFixAmountPool",
			Handler:    _Manager_DeleteFixAmountPool_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/inspire/mgr/v1/coupon/fixamountpool/fixamountpool.proto",
}
