// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: npool/inspire/mgr/v1/coupon/fixamountpool/fixamountpool.proto

package fixmountpool

import (
	npool "github.com/NpoolPlatform/message/npool"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FixAmountPoolReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              *string `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	AppID           *string `protobuf:"bytes,20,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	Denomination    *string `protobuf:"bytes,30,opt,name=Denomination,proto3,oneof" json:"Denomination,omitempty"`
	Circulation     *string `protobuf:"bytes,40,opt,name=Circulation,proto3,oneof" json:"Circulation,omitempty"`
	ReleaseByUserID *string `protobuf:"bytes,50,opt,name=ReleaseByUserID,proto3,oneof" json:"ReleaseByUserID,omitempty"`
	Start           *string `protobuf:"bytes,60,opt,name=Start,proto3,oneof" json:"Start,omitempty"`
	DurationDays    *string `protobuf:"bytes,70,opt,name=DurationDays,proto3,oneof" json:"DurationDays,omitempty"`
	Message         *string `protobuf:"bytes,80,opt,name=Message,proto3,oneof" json:"Message,omitempty"`
	Name            *string `protobuf:"bytes,90,opt,name=Name,proto3,oneof" json:"Name,omitempty"`
}

func (x *FixAmountPoolReq) Reset() {
	*x = FixAmountPoolReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixAmountPoolReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixAmountPoolReq) ProtoMessage() {}

func (x *FixAmountPoolReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixAmountPoolReq.ProtoReflect.Descriptor instead.
func (*FixAmountPoolReq) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_rawDescGZIP(), []int{0}
}

func (x *FixAmountPoolReq) GetID() string {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return ""
}

func (x *FixAmountPoolReq) GetAppID() string {
	if x != nil && x.AppID != nil {
		return *x.AppID
	}
	return ""
}

func (x *FixAmountPoolReq) GetDenomination() string {
	if x != nil && x.Denomination != nil {
		return *x.Denomination
	}
	return ""
}

func (x *FixAmountPoolReq) GetCirculation() string {
	if x != nil && x.Circulation != nil {
		return *x.Circulation
	}
	return ""
}

func (x *FixAmountPoolReq) GetReleaseByUserID() string {
	if x != nil && x.ReleaseByUserID != nil {
		return *x.ReleaseByUserID
	}
	return ""
}

func (x *FixAmountPoolReq) GetStart() string {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return ""
}

func (x *FixAmountPoolReq) GetDurationDays() string {
	if x != nil && x.DurationDays != nil {
		return *x.DurationDays
	}
	return ""
}

func (x *FixAmountPoolReq) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *FixAmountPoolReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

type FixAmountPool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID           string `protobuf:"bytes,20,opt,name=AppID,proto3" json:"AppID,omitempty"`
	Denomination    string `protobuf:"bytes,30,opt,name=Denomination,proto3" json:"Denomination,omitempty"`
	Circulation     string `protobuf:"bytes,40,opt,name=Circulation,proto3" json:"Circulation,omitempty"`
	ReleaseByUserID string `protobuf:"bytes,50,opt,name=ReleaseByUserID,proto3" json:"ReleaseByUserID,omitempty"`
	Start           string `protobuf:"bytes,60,opt,name=Start,proto3" json:"Start,omitempty"`
	DurationDays    string `protobuf:"bytes,70,opt,name=DurationDays,proto3" json:"DurationDays,omitempty"`
	Message         string `protobuf:"bytes,80,opt,name=Message,proto3" json:"Message,omitempty"`
	Name            string `protobuf:"bytes,90,opt,name=Name,proto3" json:"Name,omitempty"`
	CreatedAt       string `protobuf:"bytes,100,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt       string `protobuf:"bytes,110,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (x *FixAmountPool) Reset() {
	*x = FixAmountPool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FixAmountPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FixAmountPool) ProtoMessage() {}

func (x *FixAmountPool) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FixAmountPool.ProtoReflect.Descriptor instead.
func (*FixAmountPool) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_rawDescGZIP(), []int{1}
}

func (x *FixAmountPool) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *FixAmountPool) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *FixAmountPool) GetDenomination() string {
	if x != nil {
		return x.Denomination
	}
	return ""
}

func (x *FixAmountPool) GetCirculation() string {
	if x != nil {
		return x.Circulation
	}
	return ""
}

func (x *FixAmountPool) GetReleaseByUserID() string {
	if x != nil {
		return x.ReleaseByUserID
	}
	return ""
}

func (x *FixAmountPool) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *FixAmountPool) GetDurationDays() string {
	if x != nil {
		return x.DurationDays
	}
	return ""
}

func (x *FixAmountPool) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *FixAmountPool) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FixAmountPool) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *FixAmountPool) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              *npool.StringVal `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	AppID           *npool.StringVal `protobuf:"bytes,20,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	ReleaseByUserID *npool.StringVal `protobuf:"bytes,30,opt,name=ReleaseByUserID,proto3,oneof" json:"ReleaseByUserID,omitempty"`
	Start           *npool.Uint32Val `protobuf:"bytes,40,opt,name=Start,proto3,oneof" json:"Start,omitempty"`
	DurationDays    *npool.Uint32Val `protobuf:"bytes,50,opt,name=DurationDays,proto3,oneof" json:"DurationDays,omitempty"`
	Name            *npool.StringVal `protobuf:"bytes,60,opt,name=Name,proto3,oneof" json:"Name,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *npool.StringVal {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetAppID() *npool.StringVal {
	if x != nil {
		return x.AppID
	}
	return nil
}

func (x *Conds) GetReleaseByUserID() *npool.StringVal {
	if x != nil {
		return x.ReleaseByUserID
	}
	return nil
}

func (x *Conds) GetStart() *npool.Uint32Val {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *Conds) GetDurationDays() *npool.Uint32Val {
	if x != nil {
		return x.DurationDays
	}
	return nil
}

func (x *Conds) GetName() *npool.StringVal {
	if x != nil {
		return x.Name
	}
	return nil
}

type CreateFixAmountPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *FixAmountPoolReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateFixAmountPoolRequest) Reset() {
	*x = CreateFixAmountPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFixAmountPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFixAmountPoolRequest) ProtoMessage() {}

func (x *CreateFixAmountPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFixAmountPoolRequest.ProtoReflect.Descriptor instead.
func (*CreateFixAmountPoolRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_rawDescGZIP(), []int{3}
}

func (x *CreateFixAmountPoolRequest) GetInfo() *FixAmountPoolReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateFixAmountPoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *FixAmountPool `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateFixAmountPoolResponse) Reset() {
	*x = CreateFixAmountPoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFixAmountPoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFixAmountPoolResponse) ProtoMessage() {}

func (x *CreateFixAmountPoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFixAmountPoolResponse.ProtoReflect.Descriptor instead.
func (*CreateFixAmountPoolResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_rawDescGZIP(), []int{4}
}

func (x *CreateFixAmountPoolResponse) GetInfo() *FixAmountPool {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateFixAmountPoolsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*FixAmountPoolReq `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateFixAmountPoolsRequest) Reset() {
	*x = CreateFixAmountPoolsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFixAmountPoolsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFixAmountPoolsRequest) ProtoMessage() {}

func (x *CreateFixAmountPoolsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFixAmountPoolsRequest.ProtoReflect.Descriptor instead.
func (*CreateFixAmountPoolsRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_rawDescGZIP(), []int{5}
}

func (x *CreateFixAmountPoolsRequest) GetInfos() []*FixAmountPoolReq {
	if x != nil {
		return x.Infos
	}
	return nil
}

type CreateFixAmountPoolsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*FixAmountPool `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateFixAmountPoolsResponse) Reset() {
	*x = CreateFixAmountPoolsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFixAmountPoolsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFixAmountPoolsResponse) ProtoMessage() {}

func (x *CreateFixAmountPoolsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFixAmountPoolsResponse.ProtoReflect.Descriptor instead.
func (*CreateFixAmountPoolsResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_rawDescGZIP(), []int{6}
}

func (x *CreateFixAmountPoolsResponse) GetInfos() []*FixAmountPool {
	if x != nil {
		return x.Infos
	}
	return nil
}

type UpdateFixAmountPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *FixAmountPoolReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateFixAmountPoolRequest) Reset() {
	*x = UpdateFixAmountPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFixAmountPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFixAmountPoolRequest) ProtoMessage() {}

func (x *UpdateFixAmountPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFixAmountPoolRequest.ProtoReflect.Descriptor instead.
func (*UpdateFixAmountPoolRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateFixAmountPoolRequest) GetInfo() *FixAmountPoolReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateFixAmountPoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *FixAmountPool `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateFixAmountPoolResponse) Reset() {
	*x = UpdateFixAmountPoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFixAmountPoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFixAmountPoolResponse) ProtoMessage() {}

func (x *UpdateFixAmountPoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFixAmountPoolResponse.ProtoReflect.Descriptor instead.
func (*UpdateFixAmountPoolResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateFixAmountPoolResponse) GetInfo() *FixAmountPool {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetFixAmountPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetFixAmountPoolRequest) Reset() {
	*x = GetFixAmountPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFixAmountPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFixAmountPoolRequest) ProtoMessage() {}

func (x *GetFixAmountPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFixAmountPoolRequest.ProtoReflect.Descriptor instead.
func (*GetFixAmountPoolRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_rawDescGZIP(), []int{9}
}

func (x *GetFixAmountPoolRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetFixAmountPoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *FixAmountPool `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetFixAmountPoolResponse) Reset() {
	*x = GetFixAmountPoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFixAmountPoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFixAmountPoolResponse) ProtoMessage() {}

func (x *GetFixAmountPoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFixAmountPoolResponse.ProtoReflect.Descriptor instead.
func (*GetFixAmountPoolResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_rawDescGZIP(), []int{10}
}

func (x *GetFixAmountPoolResponse) GetInfo() *FixAmountPool {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetFixAmountPoolsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetFixAmountPoolsRequest) Reset() {
	*x = GetFixAmountPoolsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFixAmountPoolsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFixAmountPoolsRequest) ProtoMessage() {}

func (x *GetFixAmountPoolsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFixAmountPoolsRequest.ProtoReflect.Descriptor instead.
func (*GetFixAmountPoolsRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_rawDescGZIP(), []int{11}
}

func (x *GetFixAmountPoolsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetFixAmountPoolsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetFixAmountPoolsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetFixAmountPoolsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*FixAmountPool `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32           `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetFixAmountPoolsResponse) Reset() {
	*x = GetFixAmountPoolsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFixAmountPoolsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFixAmountPoolsResponse) ProtoMessage() {}

func (x *GetFixAmountPoolsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFixAmountPoolsResponse.ProtoReflect.Descriptor instead.
func (*GetFixAmountPoolsResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_rawDescGZIP(), []int{12}
}

func (x *GetFixAmountPoolsResponse) GetInfos() []*FixAmountPool {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetFixAmountPoolsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetFixAmountPoolOnlyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *GetFixAmountPoolOnlyRequest) Reset() {
	*x = GetFixAmountPoolOnlyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFixAmountPoolOnlyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFixAmountPoolOnlyRequest) ProtoMessage() {}

func (x *GetFixAmountPoolOnlyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFixAmountPoolOnlyRequest.ProtoReflect.Descriptor instead.
func (*GetFixAmountPoolOnlyRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_rawDescGZIP(), []int{13}
}

func (x *GetFixAmountPoolOnlyRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type GetFixAmountPoolOnlyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *FixAmountPool `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetFixAmountPoolOnlyResponse) Reset() {
	*x = GetFixAmountPoolOnlyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFixAmountPoolOnlyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFixAmountPoolOnlyResponse) ProtoMessage() {}

func (x *GetFixAmountPoolOnlyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFixAmountPoolOnlyResponse.ProtoReflect.Descriptor instead.
func (*GetFixAmountPoolOnlyResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_rawDescGZIP(), []int{14}
}

func (x *GetFixAmountPoolOnlyResponse) GetInfo() *FixAmountPool {
	if x != nil {
		return x.Info
	}
	return nil
}

type ExistFixAmountPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ExistFixAmountPoolRequest) Reset() {
	*x = ExistFixAmountPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistFixAmountPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistFixAmountPoolRequest) ProtoMessage() {}

func (x *ExistFixAmountPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistFixAmountPoolRequest.ProtoReflect.Descriptor instead.
func (*ExistFixAmountPoolRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_rawDescGZIP(), []int{15}
}

func (x *ExistFixAmountPoolRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ExistFixAmountPoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistFixAmountPoolResponse) Reset() {
	*x = ExistFixAmountPoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistFixAmountPoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistFixAmountPoolResponse) ProtoMessage() {}

func (x *ExistFixAmountPoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistFixAmountPoolResponse.ProtoReflect.Descriptor instead.
func (*ExistFixAmountPoolResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_rawDescGZIP(), []int{16}
}

func (x *ExistFixAmountPoolResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type ExistFixAmountPoolCondsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *ExistFixAmountPoolCondsRequest) Reset() {
	*x = ExistFixAmountPoolCondsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistFixAmountPoolCondsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistFixAmountPoolCondsRequest) ProtoMessage() {}

func (x *ExistFixAmountPoolCondsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistFixAmountPoolCondsRequest.ProtoReflect.Descriptor instead.
func (*ExistFixAmountPoolCondsRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_rawDescGZIP(), []int{17}
}

func (x *ExistFixAmountPoolCondsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type ExistFixAmountPoolCondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistFixAmountPoolCondsResponse) Reset() {
	*x = ExistFixAmountPoolCondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistFixAmountPoolCondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistFixAmountPoolCondsResponse) ProtoMessage() {}

func (x *ExistFixAmountPoolCondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistFixAmountPoolCondsResponse.ProtoReflect.Descriptor instead.
func (*ExistFixAmountPoolCondsResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_rawDescGZIP(), []int{18}
}

func (x *ExistFixAmountPoolCondsResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type CountFixAmountPoolsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *CountFixAmountPoolsRequest) Reset() {
	*x = CountFixAmountPoolsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountFixAmountPoolsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountFixAmountPoolsRequest) ProtoMessage() {}

func (x *CountFixAmountPoolsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountFixAmountPoolsRequest.ProtoReflect.Descriptor instead.
func (*CountFixAmountPoolsRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_rawDescGZIP(), []int{19}
}

func (x *CountFixAmountPoolsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type CountFixAmountPoolsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info uint32 `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CountFixAmountPoolsResponse) Reset() {
	*x = CountFixAmountPoolsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountFixAmountPoolsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountFixAmountPoolsResponse) ProtoMessage() {}

func (x *CountFixAmountPoolsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountFixAmountPoolsResponse.ProtoReflect.Descriptor instead.
func (*CountFixAmountPoolsResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_rawDescGZIP(), []int{20}
}

func (x *CountFixAmountPoolsResponse) GetInfo() uint32 {
	if x != nil {
		return x.Info
	}
	return 0
}

type DeleteFixAmountPoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *FixAmountPool `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteFixAmountPoolRequest) Reset() {
	*x = DeleteFixAmountPoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFixAmountPoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFixAmountPoolRequest) ProtoMessage() {}

func (x *DeleteFixAmountPoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFixAmountPoolRequest.ProtoReflect.Descriptor instead.
func (*DeleteFixAmountPoolRequest) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteFixAmountPoolRequest) GetInfo() *FixAmountPool {
	if x != nil {
		return x.Info
	}
	return nil
}

type DeleteFixAmountPoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *FixAmountPool `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteFixAmountPoolResponse) Reset() {
	*x = DeleteFixAmountPoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFixAmountPoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFixAmountPoolResponse) ProtoMessage() {}

func (x *DeleteFixAmountPoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFixAmountPoolResponse.ProtoReflect.Descriptor instead.
func (*DeleteFixAmountPoolResponse) Descriptor() ([]byte, []int) {
	return file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteFixAmountPoolResponse) GetInfo() *FixAmountPool {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto protoreflect.FileDescriptor

var file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_rawDesc = []byte{
	0x0a, 0x3d, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2f,
	0x6d, 0x67, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2f, 0x66, 0x69,
	0x78, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x66, 0x69, 0x78, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x26, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x66, 0x69, 0x78, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x11, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6e,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb3, 0x03, 0x0a, 0x10, 0x46,
	0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x12,
	0x13, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12,
	0x27, 0x0a, 0x0c, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0c, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x43, 0x69, 0x72, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52,
	0x0b, 0x43, 0x69, 0x72, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x2d, 0x0a, 0x0f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0f, 0x52, 0x65, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52,
	0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x06, 0x52, 0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x50, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x08, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49,
	0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x41, 0x70, 0x70, 0x49, 0x44, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x43, 0x69, 0x72, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0xc9, 0x02, 0x0a, 0x0d, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f,
	0x6f, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x65, 0x6e, 0x6f,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x43, 0x69, 0x72, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x43, 0x69, 0x72, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28,
	0x0a, 0x0f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x18, 0x46,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x79, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x50, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x8a, 0x03, 0x0a,
	0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01,
	0x12, 0x2e, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x88, 0x01, 0x01,
	0x12, 0x42, 0x0a, 0x0f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x02,
	0x52, 0x0f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x05, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x79, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48,
	0x04, 0x52, 0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x88,
	0x01, 0x01, 0x12, 0x2c, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x05, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x6a, 0x0a, 0x1a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x66,
	0x69, 0x78, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x68, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x66, 0x69, 0x78, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x78, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x6d, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e,
	0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x66, 0x69, 0x78, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x6b,
	0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b,
	0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x66, 0x69, 0x78, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x6a, 0x0a, 0x1a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f,
	0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x2e, 0x66, 0x69, 0x78, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65,
	0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x68, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x66, 0x69,
	0x78, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69,
	0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x29, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x65, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e,
	0x66, 0x69, 0x78, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x8d, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x46, 0x69, 0x78, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x43, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x66, 0x69, 0x78, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05,
	0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x22, 0x7e, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4b, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x66, 0x69, 0x78, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x22, 0x62, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x43, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x66, 0x69, 0x78, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x69, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x46, 0x69,
	0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x4f, 0x6e, 0x6c, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x66,
	0x69, 0x78, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x2b, 0x0a, 0x19, 0x45, 0x78, 0x69, 0x73, 0x74, 0x46, 0x69, 0x78, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22,
	0x30, 0x0a, 0x1a, 0x45, 0x78, 0x69, 0x73, 0x74, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x65, 0x0a, 0x1e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x66, 0x69, 0x78, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x35, 0x0a, 0x1f, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x61, 0x0a, 0x1a, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a,
	0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x69,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x66, 0x69, 0x78, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x22, 0x31, 0x0a, 0x1b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x78, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x67, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46,
	0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x66, 0x69, 0x78, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x78, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x68,
	0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x69, 0x6e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x66, 0x69, 0x78, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x70, 0x6f, 0x6f,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f,
	0x6f, 0x6c, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0xe7, 0x0c, 0x0a, 0x07, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x12, 0xa0, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x42, 0x2e, 0x69,
	0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x66, 0x69, 0x78, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x78, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x43, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x66, 0x69, 0x78, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa3, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73,
	0x12, 0x43, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x66, 0x69, 0x78, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x66,
	0x69, 0x78, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f,
	0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa0, 0x01,
	0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x42, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x66,
	0x69, 0x78, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f,
	0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x69, 0x6e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x2e, 0x66, 0x69, 0x78, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x70, 0x6f, 0x6f, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x97, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x3f, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x66,
	0x69, 0x78, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e,
	0x66, 0x69, 0x78, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa3, 0x01, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x4f,
	0x6e, 0x6c, 0x79, 0x12, 0x43, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x66, 0x69, 0x78,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x4f, 0x6e, 0x6c,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x2e, 0x66, 0x69, 0x78, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f,
	0x6f, 0x6c, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x9a, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x40, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e,
	0x66, 0x69, 0x78, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x2e, 0x66, 0x69, 0x78, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f,
	0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9d, 0x01,
	0x0a, 0x12, 0x45, 0x78, 0x69, 0x73, 0x74, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x41, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x66, 0x69,
	0x78, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x2e, 0x66, 0x69, 0x78, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xac, 0x01,
	0x0a, 0x17, 0x45, 0x78, 0x69, 0x73, 0x74, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x46, 0x2e, 0x69, 0x6e, 0x73, 0x70,
	0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x2e, 0x66, 0x69, 0x78, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x70, 0x6f, 0x6f, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x47, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x66, 0x69, 0x78, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa0, 0x01, 0x0a,
	0x13, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50,
	0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x42, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x66, 0x69,
	0x78, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69,
	0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x2e, 0x66, 0x69, 0x78, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0xa0, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x42, 0x2e, 0x69, 0x6e, 0x73, 0x70, 0x69, 0x72,
	0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x2e, 0x66, 0x69, 0x78, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x69, 0x6e,
	0x73, 0x70, 0x69, 0x72, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x63, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x66, 0x69, 0x78, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x70, 0x6f, 0x6f,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x78, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x4b, 0x5a, 0x49, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x69, 0x6e, 0x73,
	0x70, 0x69, 0x72, 0x65, 0x2f, 0x6d, 0x67, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x2f, 0x66, 0x69, 0x78, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x70, 0x6f, 0x6f, 0x6c, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_rawDescOnce sync.Once
	file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_rawDescData = file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_rawDesc
)

func file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_rawDescGZIP() []byte {
	file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_rawDescOnce.Do(func() {
		file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_rawDescData)
	})
	return file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_rawDescData
}

var file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_goTypes = []interface{}{
	(*FixAmountPoolReq)(nil),                // 0: inspire.manager.coupon.fixmountpool.v1.FixAmountPoolReq
	(*FixAmountPool)(nil),                   // 1: inspire.manager.coupon.fixmountpool.v1.FixAmountPool
	(*Conds)(nil),                           // 2: inspire.manager.coupon.fixmountpool.v1.Conds
	(*CreateFixAmountPoolRequest)(nil),      // 3: inspire.manager.coupon.fixmountpool.v1.CreateFixAmountPoolRequest
	(*CreateFixAmountPoolResponse)(nil),     // 4: inspire.manager.coupon.fixmountpool.v1.CreateFixAmountPoolResponse
	(*CreateFixAmountPoolsRequest)(nil),     // 5: inspire.manager.coupon.fixmountpool.v1.CreateFixAmountPoolsRequest
	(*CreateFixAmountPoolsResponse)(nil),    // 6: inspire.manager.coupon.fixmountpool.v1.CreateFixAmountPoolsResponse
	(*UpdateFixAmountPoolRequest)(nil),      // 7: inspire.manager.coupon.fixmountpool.v1.UpdateFixAmountPoolRequest
	(*UpdateFixAmountPoolResponse)(nil),     // 8: inspire.manager.coupon.fixmountpool.v1.UpdateFixAmountPoolResponse
	(*GetFixAmountPoolRequest)(nil),         // 9: inspire.manager.coupon.fixmountpool.v1.GetFixAmountPoolRequest
	(*GetFixAmountPoolResponse)(nil),        // 10: inspire.manager.coupon.fixmountpool.v1.GetFixAmountPoolResponse
	(*GetFixAmountPoolsRequest)(nil),        // 11: inspire.manager.coupon.fixmountpool.v1.GetFixAmountPoolsRequest
	(*GetFixAmountPoolsResponse)(nil),       // 12: inspire.manager.coupon.fixmountpool.v1.GetFixAmountPoolsResponse
	(*GetFixAmountPoolOnlyRequest)(nil),     // 13: inspire.manager.coupon.fixmountpool.v1.GetFixAmountPoolOnlyRequest
	(*GetFixAmountPoolOnlyResponse)(nil),    // 14: inspire.manager.coupon.fixmountpool.v1.GetFixAmountPoolOnlyResponse
	(*ExistFixAmountPoolRequest)(nil),       // 15: inspire.manager.coupon.fixmountpool.v1.ExistFixAmountPoolRequest
	(*ExistFixAmountPoolResponse)(nil),      // 16: inspire.manager.coupon.fixmountpool.v1.ExistFixAmountPoolResponse
	(*ExistFixAmountPoolCondsRequest)(nil),  // 17: inspire.manager.coupon.fixmountpool.v1.ExistFixAmountPoolCondsRequest
	(*ExistFixAmountPoolCondsResponse)(nil), // 18: inspire.manager.coupon.fixmountpool.v1.ExistFixAmountPoolCondsResponse
	(*CountFixAmountPoolsRequest)(nil),      // 19: inspire.manager.coupon.fixmountpool.v1.CountFixAmountPoolsRequest
	(*CountFixAmountPoolsResponse)(nil),     // 20: inspire.manager.coupon.fixmountpool.v1.CountFixAmountPoolsResponse
	(*DeleteFixAmountPoolRequest)(nil),      // 21: inspire.manager.coupon.fixmountpool.v1.DeleteFixAmountPoolRequest
	(*DeleteFixAmountPoolResponse)(nil),     // 22: inspire.manager.coupon.fixmountpool.v1.DeleteFixAmountPoolResponse
	(*npool.StringVal)(nil),                 // 23: npool.v1.StringVal
	(*npool.Uint32Val)(nil),                 // 24: npool.v1.Uint32Val
}
var file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_depIdxs = []int32{
	23, // 0: inspire.manager.coupon.fixmountpool.v1.Conds.ID:type_name -> npool.v1.StringVal
	23, // 1: inspire.manager.coupon.fixmountpool.v1.Conds.AppID:type_name -> npool.v1.StringVal
	23, // 2: inspire.manager.coupon.fixmountpool.v1.Conds.ReleaseByUserID:type_name -> npool.v1.StringVal
	24, // 3: inspire.manager.coupon.fixmountpool.v1.Conds.Start:type_name -> npool.v1.Uint32Val
	24, // 4: inspire.manager.coupon.fixmountpool.v1.Conds.DurationDays:type_name -> npool.v1.Uint32Val
	23, // 5: inspire.manager.coupon.fixmountpool.v1.Conds.Name:type_name -> npool.v1.StringVal
	0,  // 6: inspire.manager.coupon.fixmountpool.v1.CreateFixAmountPoolRequest.Info:type_name -> inspire.manager.coupon.fixmountpool.v1.FixAmountPoolReq
	1,  // 7: inspire.manager.coupon.fixmountpool.v1.CreateFixAmountPoolResponse.Info:type_name -> inspire.manager.coupon.fixmountpool.v1.FixAmountPool
	0,  // 8: inspire.manager.coupon.fixmountpool.v1.CreateFixAmountPoolsRequest.Infos:type_name -> inspire.manager.coupon.fixmountpool.v1.FixAmountPoolReq
	1,  // 9: inspire.manager.coupon.fixmountpool.v1.CreateFixAmountPoolsResponse.Infos:type_name -> inspire.manager.coupon.fixmountpool.v1.FixAmountPool
	0,  // 10: inspire.manager.coupon.fixmountpool.v1.UpdateFixAmountPoolRequest.Info:type_name -> inspire.manager.coupon.fixmountpool.v1.FixAmountPoolReq
	1,  // 11: inspire.manager.coupon.fixmountpool.v1.UpdateFixAmountPoolResponse.Info:type_name -> inspire.manager.coupon.fixmountpool.v1.FixAmountPool
	1,  // 12: inspire.manager.coupon.fixmountpool.v1.GetFixAmountPoolResponse.Info:type_name -> inspire.manager.coupon.fixmountpool.v1.FixAmountPool
	2,  // 13: inspire.manager.coupon.fixmountpool.v1.GetFixAmountPoolsRequest.Conds:type_name -> inspire.manager.coupon.fixmountpool.v1.Conds
	1,  // 14: inspire.manager.coupon.fixmountpool.v1.GetFixAmountPoolsResponse.Infos:type_name -> inspire.manager.coupon.fixmountpool.v1.FixAmountPool
	2,  // 15: inspire.manager.coupon.fixmountpool.v1.GetFixAmountPoolOnlyRequest.Conds:type_name -> inspire.manager.coupon.fixmountpool.v1.Conds
	1,  // 16: inspire.manager.coupon.fixmountpool.v1.GetFixAmountPoolOnlyResponse.Info:type_name -> inspire.manager.coupon.fixmountpool.v1.FixAmountPool
	2,  // 17: inspire.manager.coupon.fixmountpool.v1.ExistFixAmountPoolCondsRequest.Conds:type_name -> inspire.manager.coupon.fixmountpool.v1.Conds
	2,  // 18: inspire.manager.coupon.fixmountpool.v1.CountFixAmountPoolsRequest.Conds:type_name -> inspire.manager.coupon.fixmountpool.v1.Conds
	1,  // 19: inspire.manager.coupon.fixmountpool.v1.DeleteFixAmountPoolRequest.Info:type_name -> inspire.manager.coupon.fixmountpool.v1.FixAmountPool
	1,  // 20: inspire.manager.coupon.fixmountpool.v1.DeleteFixAmountPoolResponse.Info:type_name -> inspire.manager.coupon.fixmountpool.v1.FixAmountPool
	3,  // 21: inspire.manager.coupon.fixmountpool.v1.Manager.CreateFixAmountPool:input_type -> inspire.manager.coupon.fixmountpool.v1.CreateFixAmountPoolRequest
	5,  // 22: inspire.manager.coupon.fixmountpool.v1.Manager.CreateFixAmountPools:input_type -> inspire.manager.coupon.fixmountpool.v1.CreateFixAmountPoolsRequest
	7,  // 23: inspire.manager.coupon.fixmountpool.v1.Manager.UpdateFixAmountPool:input_type -> inspire.manager.coupon.fixmountpool.v1.UpdateFixAmountPoolRequest
	9,  // 24: inspire.manager.coupon.fixmountpool.v1.Manager.GetFixAmountPool:input_type -> inspire.manager.coupon.fixmountpool.v1.GetFixAmountPoolRequest
	13, // 25: inspire.manager.coupon.fixmountpool.v1.Manager.GetFixAmountPoolOnly:input_type -> inspire.manager.coupon.fixmountpool.v1.GetFixAmountPoolOnlyRequest
	11, // 26: inspire.manager.coupon.fixmountpool.v1.Manager.GetFixAmountPools:input_type -> inspire.manager.coupon.fixmountpool.v1.GetFixAmountPoolsRequest
	15, // 27: inspire.manager.coupon.fixmountpool.v1.Manager.ExistFixAmountPool:input_type -> inspire.manager.coupon.fixmountpool.v1.ExistFixAmountPoolRequest
	17, // 28: inspire.manager.coupon.fixmountpool.v1.Manager.ExistFixAmountPoolConds:input_type -> inspire.manager.coupon.fixmountpool.v1.ExistFixAmountPoolCondsRequest
	19, // 29: inspire.manager.coupon.fixmountpool.v1.Manager.CountFixAmountPools:input_type -> inspire.manager.coupon.fixmountpool.v1.CountFixAmountPoolsRequest
	21, // 30: inspire.manager.coupon.fixmountpool.v1.Manager.DeleteFixAmountPool:input_type -> inspire.manager.coupon.fixmountpool.v1.DeleteFixAmountPoolRequest
	4,  // 31: inspire.manager.coupon.fixmountpool.v1.Manager.CreateFixAmountPool:output_type -> inspire.manager.coupon.fixmountpool.v1.CreateFixAmountPoolResponse
	6,  // 32: inspire.manager.coupon.fixmountpool.v1.Manager.CreateFixAmountPools:output_type -> inspire.manager.coupon.fixmountpool.v1.CreateFixAmountPoolsResponse
	8,  // 33: inspire.manager.coupon.fixmountpool.v1.Manager.UpdateFixAmountPool:output_type -> inspire.manager.coupon.fixmountpool.v1.UpdateFixAmountPoolResponse
	10, // 34: inspire.manager.coupon.fixmountpool.v1.Manager.GetFixAmountPool:output_type -> inspire.manager.coupon.fixmountpool.v1.GetFixAmountPoolResponse
	14, // 35: inspire.manager.coupon.fixmountpool.v1.Manager.GetFixAmountPoolOnly:output_type -> inspire.manager.coupon.fixmountpool.v1.GetFixAmountPoolOnlyResponse
	12, // 36: inspire.manager.coupon.fixmountpool.v1.Manager.GetFixAmountPools:output_type -> inspire.manager.coupon.fixmountpool.v1.GetFixAmountPoolsResponse
	16, // 37: inspire.manager.coupon.fixmountpool.v1.Manager.ExistFixAmountPool:output_type -> inspire.manager.coupon.fixmountpool.v1.ExistFixAmountPoolResponse
	18, // 38: inspire.manager.coupon.fixmountpool.v1.Manager.ExistFixAmountPoolConds:output_type -> inspire.manager.coupon.fixmountpool.v1.ExistFixAmountPoolCondsResponse
	20, // 39: inspire.manager.coupon.fixmountpool.v1.Manager.CountFixAmountPools:output_type -> inspire.manager.coupon.fixmountpool.v1.CountFixAmountPoolsResponse
	22, // 40: inspire.manager.coupon.fixmountpool.v1.Manager.DeleteFixAmountPool:output_type -> inspire.manager.coupon.fixmountpool.v1.DeleteFixAmountPoolResponse
	31, // [31:41] is the sub-list for method output_type
	21, // [21:31] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_init() }
func file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_init() {
	if File_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FixAmountPoolReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FixAmountPool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFixAmountPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFixAmountPoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFixAmountPoolsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFixAmountPoolsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFixAmountPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFixAmountPoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFixAmountPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFixAmountPoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFixAmountPoolsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFixAmountPoolsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFixAmountPoolOnlyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFixAmountPoolOnlyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistFixAmountPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistFixAmountPoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistFixAmountPoolCondsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistFixAmountPoolCondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountFixAmountPoolsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountFixAmountPoolsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFixAmountPoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFixAmountPoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_goTypes,
		DependencyIndexes: file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_depIdxs,
		MessageInfos:      file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_msgTypes,
	}.Build()
	File_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto = out.File
	file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_rawDesc = nil
	file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_goTypes = nil
	file_npool_inspire_mgr_v1_coupon_fixamountpool_fixamountpool_proto_depIdxs = nil
}
