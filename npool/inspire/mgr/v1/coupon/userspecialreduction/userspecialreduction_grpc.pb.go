// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/inspire/mgr/v1/coupon/userspecialreduction/userspecialreduction.proto

package userspecialreduction

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateUserSpecialReduction(ctx context.Context, in *CreateUserSpecialReductionRequest, opts ...grpc.CallOption) (*CreateUserSpecialReductionResponse, error)
	CreateUserSpecialReductions(ctx context.Context, in *CreateUserSpecialReductionsRequest, opts ...grpc.CallOption) (*CreateUserSpecialReductionsResponse, error)
	UpdateUserSpecialReduction(ctx context.Context, in *UpdateUserSpecialReductionRequest, opts ...grpc.CallOption) (*UpdateUserSpecialReductionResponse, error)
	GetUserSpecialReduction(ctx context.Context, in *GetUserSpecialReductionRequest, opts ...grpc.CallOption) (*GetUserSpecialReductionResponse, error)
	GetUserSpecialReductionOnly(ctx context.Context, in *GetUserSpecialReductionOnlyRequest, opts ...grpc.CallOption) (*GetUserSpecialReductionOnlyResponse, error)
	GetUserSpecialReductions(ctx context.Context, in *GetUserSpecialReductionsRequest, opts ...grpc.CallOption) (*GetUserSpecialReductionsResponse, error)
	ExistUserSpecialReduction(ctx context.Context, in *ExistUserSpecialReductionRequest, opts ...grpc.CallOption) (*ExistUserSpecialReductionResponse, error)
	ExistUserSpecialReductionConds(ctx context.Context, in *ExistUserSpecialReductionCondsRequest, opts ...grpc.CallOption) (*ExistUserSpecialReductionCondsResponse, error)
	CountUserSpecialReductions(ctx context.Context, in *CountUserSpecialReductionsRequest, opts ...grpc.CallOption) (*CountUserSpecialReductionsResponse, error)
	DeleteUserSpecialReduction(ctx context.Context, in *DeleteUserSpecialReductionRequest, opts ...grpc.CallOption) (*DeleteUserSpecialReductionResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateUserSpecialReduction(ctx context.Context, in *CreateUserSpecialReductionRequest, opts ...grpc.CallOption) (*CreateUserSpecialReductionResponse, error) {
	out := new(CreateUserSpecialReductionResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.userspecialreduction.v1.Manager/CreateUserSpecialReduction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateUserSpecialReductions(ctx context.Context, in *CreateUserSpecialReductionsRequest, opts ...grpc.CallOption) (*CreateUserSpecialReductionsResponse, error) {
	out := new(CreateUserSpecialReductionsResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.userspecialreduction.v1.Manager/CreateUserSpecialReductions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateUserSpecialReduction(ctx context.Context, in *UpdateUserSpecialReductionRequest, opts ...grpc.CallOption) (*UpdateUserSpecialReductionResponse, error) {
	out := new(UpdateUserSpecialReductionResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.userspecialreduction.v1.Manager/UpdateUserSpecialReduction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetUserSpecialReduction(ctx context.Context, in *GetUserSpecialReductionRequest, opts ...grpc.CallOption) (*GetUserSpecialReductionResponse, error) {
	out := new(GetUserSpecialReductionResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.userspecialreduction.v1.Manager/GetUserSpecialReduction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetUserSpecialReductionOnly(ctx context.Context, in *GetUserSpecialReductionOnlyRequest, opts ...grpc.CallOption) (*GetUserSpecialReductionOnlyResponse, error) {
	out := new(GetUserSpecialReductionOnlyResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.userspecialreduction.v1.Manager/GetUserSpecialReductionOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetUserSpecialReductions(ctx context.Context, in *GetUserSpecialReductionsRequest, opts ...grpc.CallOption) (*GetUserSpecialReductionsResponse, error) {
	out := new(GetUserSpecialReductionsResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.userspecialreduction.v1.Manager/GetUserSpecialReductions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistUserSpecialReduction(ctx context.Context, in *ExistUserSpecialReductionRequest, opts ...grpc.CallOption) (*ExistUserSpecialReductionResponse, error) {
	out := new(ExistUserSpecialReductionResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.userspecialreduction.v1.Manager/ExistUserSpecialReduction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistUserSpecialReductionConds(ctx context.Context, in *ExistUserSpecialReductionCondsRequest, opts ...grpc.CallOption) (*ExistUserSpecialReductionCondsResponse, error) {
	out := new(ExistUserSpecialReductionCondsResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.userspecialreduction.v1.Manager/ExistUserSpecialReductionConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountUserSpecialReductions(ctx context.Context, in *CountUserSpecialReductionsRequest, opts ...grpc.CallOption) (*CountUserSpecialReductionsResponse, error) {
	out := new(CountUserSpecialReductionsResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.userspecialreduction.v1.Manager/CountUserSpecialReductions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteUserSpecialReduction(ctx context.Context, in *DeleteUserSpecialReductionRequest, opts ...grpc.CallOption) (*DeleteUserSpecialReductionResponse, error) {
	out := new(DeleteUserSpecialReductionResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.userspecialreduction.v1.Manager/DeleteUserSpecialReduction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateUserSpecialReduction(context.Context, *CreateUserSpecialReductionRequest) (*CreateUserSpecialReductionResponse, error)
	CreateUserSpecialReductions(context.Context, *CreateUserSpecialReductionsRequest) (*CreateUserSpecialReductionsResponse, error)
	UpdateUserSpecialReduction(context.Context, *UpdateUserSpecialReductionRequest) (*UpdateUserSpecialReductionResponse, error)
	GetUserSpecialReduction(context.Context, *GetUserSpecialReductionRequest) (*GetUserSpecialReductionResponse, error)
	GetUserSpecialReductionOnly(context.Context, *GetUserSpecialReductionOnlyRequest) (*GetUserSpecialReductionOnlyResponse, error)
	GetUserSpecialReductions(context.Context, *GetUserSpecialReductionsRequest) (*GetUserSpecialReductionsResponse, error)
	ExistUserSpecialReduction(context.Context, *ExistUserSpecialReductionRequest) (*ExistUserSpecialReductionResponse, error)
	ExistUserSpecialReductionConds(context.Context, *ExistUserSpecialReductionCondsRequest) (*ExistUserSpecialReductionCondsResponse, error)
	CountUserSpecialReductions(context.Context, *CountUserSpecialReductionsRequest) (*CountUserSpecialReductionsResponse, error)
	DeleteUserSpecialReduction(context.Context, *DeleteUserSpecialReductionRequest) (*DeleteUserSpecialReductionResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateUserSpecialReduction(context.Context, *CreateUserSpecialReductionRequest) (*CreateUserSpecialReductionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserSpecialReduction not implemented")
}
func (UnimplementedManagerServer) CreateUserSpecialReductions(context.Context, *CreateUserSpecialReductionsRequest) (*CreateUserSpecialReductionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserSpecialReductions not implemented")
}
func (UnimplementedManagerServer) UpdateUserSpecialReduction(context.Context, *UpdateUserSpecialReductionRequest) (*UpdateUserSpecialReductionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserSpecialReduction not implemented")
}
func (UnimplementedManagerServer) GetUserSpecialReduction(context.Context, *GetUserSpecialReductionRequest) (*GetUserSpecialReductionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSpecialReduction not implemented")
}
func (UnimplementedManagerServer) GetUserSpecialReductionOnly(context.Context, *GetUserSpecialReductionOnlyRequest) (*GetUserSpecialReductionOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSpecialReductionOnly not implemented")
}
func (UnimplementedManagerServer) GetUserSpecialReductions(context.Context, *GetUserSpecialReductionsRequest) (*GetUserSpecialReductionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSpecialReductions not implemented")
}
func (UnimplementedManagerServer) ExistUserSpecialReduction(context.Context, *ExistUserSpecialReductionRequest) (*ExistUserSpecialReductionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistUserSpecialReduction not implemented")
}
func (UnimplementedManagerServer) ExistUserSpecialReductionConds(context.Context, *ExistUserSpecialReductionCondsRequest) (*ExistUserSpecialReductionCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistUserSpecialReductionConds not implemented")
}
func (UnimplementedManagerServer) CountUserSpecialReductions(context.Context, *CountUserSpecialReductionsRequest) (*CountUserSpecialReductionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountUserSpecialReductions not implemented")
}
func (UnimplementedManagerServer) DeleteUserSpecialReduction(context.Context, *DeleteUserSpecialReductionRequest) (*DeleteUserSpecialReductionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserSpecialReduction not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateUserSpecialReduction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserSpecialReductionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateUserSpecialReduction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.userspecialreduction.v1.Manager/CreateUserSpecialReduction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateUserSpecialReduction(ctx, req.(*CreateUserSpecialReductionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateUserSpecialReductions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserSpecialReductionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateUserSpecialReductions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.userspecialreduction.v1.Manager/CreateUserSpecialReductions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateUserSpecialReductions(ctx, req.(*CreateUserSpecialReductionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateUserSpecialReduction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserSpecialReductionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateUserSpecialReduction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.userspecialreduction.v1.Manager/UpdateUserSpecialReduction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateUserSpecialReduction(ctx, req.(*UpdateUserSpecialReductionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetUserSpecialReduction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSpecialReductionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetUserSpecialReduction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.userspecialreduction.v1.Manager/GetUserSpecialReduction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetUserSpecialReduction(ctx, req.(*GetUserSpecialReductionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetUserSpecialReductionOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSpecialReductionOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetUserSpecialReductionOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.userspecialreduction.v1.Manager/GetUserSpecialReductionOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetUserSpecialReductionOnly(ctx, req.(*GetUserSpecialReductionOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetUserSpecialReductions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSpecialReductionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetUserSpecialReductions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.userspecialreduction.v1.Manager/GetUserSpecialReductions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetUserSpecialReductions(ctx, req.(*GetUserSpecialReductionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistUserSpecialReduction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistUserSpecialReductionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistUserSpecialReduction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.userspecialreduction.v1.Manager/ExistUserSpecialReduction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistUserSpecialReduction(ctx, req.(*ExistUserSpecialReductionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistUserSpecialReductionConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistUserSpecialReductionCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistUserSpecialReductionConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.userspecialreduction.v1.Manager/ExistUserSpecialReductionConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistUserSpecialReductionConds(ctx, req.(*ExistUserSpecialReductionCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountUserSpecialReductions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountUserSpecialReductionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountUserSpecialReductions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.userspecialreduction.v1.Manager/CountUserSpecialReductions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountUserSpecialReductions(ctx, req.(*CountUserSpecialReductionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteUserSpecialReduction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserSpecialReductionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteUserSpecialReduction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.userspecialreduction.v1.Manager/DeleteUserSpecialReduction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteUserSpecialReduction(ctx, req.(*DeleteUserSpecialReductionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inspire.manager.coupon.userspecialreduction.v1.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUserSpecialReduction",
			Handler:    _Manager_CreateUserSpecialReduction_Handler,
		},
		{
			MethodName: "CreateUserSpecialReductions",
			Handler:    _Manager_CreateUserSpecialReductions_Handler,
		},
		{
			MethodName: "UpdateUserSpecialReduction",
			Handler:    _Manager_UpdateUserSpecialReduction_Handler,
		},
		{
			MethodName: "GetUserSpecialReduction",
			Handler:    _Manager_GetUserSpecialReduction_Handler,
		},
		{
			MethodName: "GetUserSpecialReductionOnly",
			Handler:    _Manager_GetUserSpecialReductionOnly_Handler,
		},
		{
			MethodName: "GetUserSpecialReductions",
			Handler:    _Manager_GetUserSpecialReductions_Handler,
		},
		{
			MethodName: "ExistUserSpecialReduction",
			Handler:    _Manager_ExistUserSpecialReduction_Handler,
		},
		{
			MethodName: "ExistUserSpecialReductionConds",
			Handler:    _Manager_ExistUserSpecialReductionConds_Handler,
		},
		{
			MethodName: "CountUserSpecialReductions",
			Handler:    _Manager_CountUserSpecialReductions_Handler,
		},
		{
			MethodName: "DeleteUserSpecialReduction",
			Handler:    _Manager_DeleteUserSpecialReduction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/inspire/mgr/v1/coupon/userspecialreduction/userspecialreduction.proto",
}
