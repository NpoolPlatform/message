// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/inspire/mgr/v1/coupon/specialoffer/specialoffer.proto

package specialoffer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateSpecialOffer(ctx context.Context, in *CreateSpecialOfferRequest, opts ...grpc.CallOption) (*CreateSpecialOfferResponse, error)
	CreateSpecialOffers(ctx context.Context, in *CreateSpecialOffersRequest, opts ...grpc.CallOption) (*CreateSpecialOffersResponse, error)
	UpdateSpecialOffer(ctx context.Context, in *UpdateSpecialOfferRequest, opts ...grpc.CallOption) (*UpdateSpecialOfferResponse, error)
	GetSpecialOffer(ctx context.Context, in *GetSpecialOfferRequest, opts ...grpc.CallOption) (*GetSpecialOfferResponse, error)
	GetSpecialOfferOnly(ctx context.Context, in *GetSpecialOfferOnlyRequest, opts ...grpc.CallOption) (*GetSpecialOfferOnlyResponse, error)
	GetSpecialOffers(ctx context.Context, in *GetSpecialOffersRequest, opts ...grpc.CallOption) (*GetSpecialOffersResponse, error)
	ExistSpecialOffer(ctx context.Context, in *ExistSpecialOfferRequest, opts ...grpc.CallOption) (*ExistSpecialOfferResponse, error)
	ExistSpecialOfferConds(ctx context.Context, in *ExistSpecialOfferCondsRequest, opts ...grpc.CallOption) (*ExistSpecialOfferCondsResponse, error)
	CountSpecialOffers(ctx context.Context, in *CountSpecialOffersRequest, opts ...grpc.CallOption) (*CountSpecialOffersResponse, error)
	DeleteSpecialOffer(ctx context.Context, in *DeleteSpecialOfferRequest, opts ...grpc.CallOption) (*DeleteSpecialOfferResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateSpecialOffer(ctx context.Context, in *CreateSpecialOfferRequest, opts ...grpc.CallOption) (*CreateSpecialOfferResponse, error) {
	out := new(CreateSpecialOfferResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.specialoffer.v1.Manager/CreateSpecialOffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateSpecialOffers(ctx context.Context, in *CreateSpecialOffersRequest, opts ...grpc.CallOption) (*CreateSpecialOffersResponse, error) {
	out := new(CreateSpecialOffersResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.specialoffer.v1.Manager/CreateSpecialOffers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateSpecialOffer(ctx context.Context, in *UpdateSpecialOfferRequest, opts ...grpc.CallOption) (*UpdateSpecialOfferResponse, error) {
	out := new(UpdateSpecialOfferResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.specialoffer.v1.Manager/UpdateSpecialOffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetSpecialOffer(ctx context.Context, in *GetSpecialOfferRequest, opts ...grpc.CallOption) (*GetSpecialOfferResponse, error) {
	out := new(GetSpecialOfferResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.specialoffer.v1.Manager/GetSpecialOffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetSpecialOfferOnly(ctx context.Context, in *GetSpecialOfferOnlyRequest, opts ...grpc.CallOption) (*GetSpecialOfferOnlyResponse, error) {
	out := new(GetSpecialOfferOnlyResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.specialoffer.v1.Manager/GetSpecialOfferOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetSpecialOffers(ctx context.Context, in *GetSpecialOffersRequest, opts ...grpc.CallOption) (*GetSpecialOffersResponse, error) {
	out := new(GetSpecialOffersResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.specialoffer.v1.Manager/GetSpecialOffers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistSpecialOffer(ctx context.Context, in *ExistSpecialOfferRequest, opts ...grpc.CallOption) (*ExistSpecialOfferResponse, error) {
	out := new(ExistSpecialOfferResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.specialoffer.v1.Manager/ExistSpecialOffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistSpecialOfferConds(ctx context.Context, in *ExistSpecialOfferCondsRequest, opts ...grpc.CallOption) (*ExistSpecialOfferCondsResponse, error) {
	out := new(ExistSpecialOfferCondsResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.specialoffer.v1.Manager/ExistSpecialOfferConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountSpecialOffers(ctx context.Context, in *CountSpecialOffersRequest, opts ...grpc.CallOption) (*CountSpecialOffersResponse, error) {
	out := new(CountSpecialOffersResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.specialoffer.v1.Manager/CountSpecialOffers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteSpecialOffer(ctx context.Context, in *DeleteSpecialOfferRequest, opts ...grpc.CallOption) (*DeleteSpecialOfferResponse, error) {
	out := new(DeleteSpecialOfferResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.specialoffer.v1.Manager/DeleteSpecialOffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateSpecialOffer(context.Context, *CreateSpecialOfferRequest) (*CreateSpecialOfferResponse, error)
	CreateSpecialOffers(context.Context, *CreateSpecialOffersRequest) (*CreateSpecialOffersResponse, error)
	UpdateSpecialOffer(context.Context, *UpdateSpecialOfferRequest) (*UpdateSpecialOfferResponse, error)
	GetSpecialOffer(context.Context, *GetSpecialOfferRequest) (*GetSpecialOfferResponse, error)
	GetSpecialOfferOnly(context.Context, *GetSpecialOfferOnlyRequest) (*GetSpecialOfferOnlyResponse, error)
	GetSpecialOffers(context.Context, *GetSpecialOffersRequest) (*GetSpecialOffersResponse, error)
	ExistSpecialOffer(context.Context, *ExistSpecialOfferRequest) (*ExistSpecialOfferResponse, error)
	ExistSpecialOfferConds(context.Context, *ExistSpecialOfferCondsRequest) (*ExistSpecialOfferCondsResponse, error)
	CountSpecialOffers(context.Context, *CountSpecialOffersRequest) (*CountSpecialOffersResponse, error)
	DeleteSpecialOffer(context.Context, *DeleteSpecialOfferRequest) (*DeleteSpecialOfferResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateSpecialOffer(context.Context, *CreateSpecialOfferRequest) (*CreateSpecialOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpecialOffer not implemented")
}
func (UnimplementedManagerServer) CreateSpecialOffers(context.Context, *CreateSpecialOffersRequest) (*CreateSpecialOffersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpecialOffers not implemented")
}
func (UnimplementedManagerServer) UpdateSpecialOffer(context.Context, *UpdateSpecialOfferRequest) (*UpdateSpecialOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSpecialOffer not implemented")
}
func (UnimplementedManagerServer) GetSpecialOffer(context.Context, *GetSpecialOfferRequest) (*GetSpecialOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpecialOffer not implemented")
}
func (UnimplementedManagerServer) GetSpecialOfferOnly(context.Context, *GetSpecialOfferOnlyRequest) (*GetSpecialOfferOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpecialOfferOnly not implemented")
}
func (UnimplementedManagerServer) GetSpecialOffers(context.Context, *GetSpecialOffersRequest) (*GetSpecialOffersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpecialOffers not implemented")
}
func (UnimplementedManagerServer) ExistSpecialOffer(context.Context, *ExistSpecialOfferRequest) (*ExistSpecialOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistSpecialOffer not implemented")
}
func (UnimplementedManagerServer) ExistSpecialOfferConds(context.Context, *ExistSpecialOfferCondsRequest) (*ExistSpecialOfferCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistSpecialOfferConds not implemented")
}
func (UnimplementedManagerServer) CountSpecialOffers(context.Context, *CountSpecialOffersRequest) (*CountSpecialOffersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountSpecialOffers not implemented")
}
func (UnimplementedManagerServer) DeleteSpecialOffer(context.Context, *DeleteSpecialOfferRequest) (*DeleteSpecialOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSpecialOffer not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateSpecialOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSpecialOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateSpecialOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.specialoffer.v1.Manager/CreateSpecialOffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateSpecialOffer(ctx, req.(*CreateSpecialOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateSpecialOffers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSpecialOffersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateSpecialOffers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.specialoffer.v1.Manager/CreateSpecialOffers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateSpecialOffers(ctx, req.(*CreateSpecialOffersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateSpecialOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSpecialOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateSpecialOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.specialoffer.v1.Manager/UpdateSpecialOffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateSpecialOffer(ctx, req.(*UpdateSpecialOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetSpecialOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpecialOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetSpecialOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.specialoffer.v1.Manager/GetSpecialOffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetSpecialOffer(ctx, req.(*GetSpecialOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetSpecialOfferOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpecialOfferOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetSpecialOfferOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.specialoffer.v1.Manager/GetSpecialOfferOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetSpecialOfferOnly(ctx, req.(*GetSpecialOfferOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetSpecialOffers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpecialOffersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetSpecialOffers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.specialoffer.v1.Manager/GetSpecialOffers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetSpecialOffers(ctx, req.(*GetSpecialOffersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistSpecialOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistSpecialOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistSpecialOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.specialoffer.v1.Manager/ExistSpecialOffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistSpecialOffer(ctx, req.(*ExistSpecialOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistSpecialOfferConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistSpecialOfferCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistSpecialOfferConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.specialoffer.v1.Manager/ExistSpecialOfferConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistSpecialOfferConds(ctx, req.(*ExistSpecialOfferCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountSpecialOffers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountSpecialOffersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountSpecialOffers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.specialoffer.v1.Manager/CountSpecialOffers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountSpecialOffers(ctx, req.(*CountSpecialOffersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteSpecialOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSpecialOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteSpecialOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.specialoffer.v1.Manager/DeleteSpecialOffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteSpecialOffer(ctx, req.(*DeleteSpecialOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inspire.manager.coupon.specialoffer.v1.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSpecialOffer",
			Handler:    _Manager_CreateSpecialOffer_Handler,
		},
		{
			MethodName: "CreateSpecialOffers",
			Handler:    _Manager_CreateSpecialOffers_Handler,
		},
		{
			MethodName: "UpdateSpecialOffer",
			Handler:    _Manager_UpdateSpecialOffer_Handler,
		},
		{
			MethodName: "GetSpecialOffer",
			Handler:    _Manager_GetSpecialOffer_Handler,
		},
		{
			MethodName: "GetSpecialOfferOnly",
			Handler:    _Manager_GetSpecialOfferOnly_Handler,
		},
		{
			MethodName: "GetSpecialOffers",
			Handler:    _Manager_GetSpecialOffers_Handler,
		},
		{
			MethodName: "ExistSpecialOffer",
			Handler:    _Manager_ExistSpecialOffer_Handler,
		},
		{
			MethodName: "ExistSpecialOfferConds",
			Handler:    _Manager_ExistSpecialOfferConds_Handler,
		},
		{
			MethodName: "CountSpecialOffers",
			Handler:    _Manager_CountSpecialOffers_Handler,
		},
		{
			MethodName: "DeleteSpecialOffer",
			Handler:    _Manager_DeleteSpecialOffer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/inspire/mgr/v1/coupon/specialoffer/specialoffer.proto",
}
