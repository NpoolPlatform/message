// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/inspire/mgr/v1/coupon/allocated/allocated.proto

package allocated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateAllocated(ctx context.Context, in *CreateAllocatedRequest, opts ...grpc.CallOption) (*CreateAllocatedResponse, error)
	CreateAllocateds(ctx context.Context, in *CreateAllocatedsRequest, opts ...grpc.CallOption) (*CreateAllocatedsResponse, error)
	UpdateAllocated(ctx context.Context, in *UpdateAllocatedRequest, opts ...grpc.CallOption) (*UpdateAllocatedResponse, error)
	GetAllocated(ctx context.Context, in *GetAllocatedRequest, opts ...grpc.CallOption) (*GetAllocatedResponse, error)
	GetAllocatedOnly(ctx context.Context, in *GetAllocatedOnlyRequest, opts ...grpc.CallOption) (*GetAllocatedOnlyResponse, error)
	GetAllocateds(ctx context.Context, in *GetAllocatedsRequest, opts ...grpc.CallOption) (*GetAllocatedsResponse, error)
	ExistAllocated(ctx context.Context, in *ExistAllocatedRequest, opts ...grpc.CallOption) (*ExistAllocatedResponse, error)
	ExistAllocatedConds(ctx context.Context, in *ExistAllocatedCondsRequest, opts ...grpc.CallOption) (*ExistAllocatedCondsResponse, error)
	CountAllocateds(ctx context.Context, in *CountAllocatedsRequest, opts ...grpc.CallOption) (*CountAllocatedsResponse, error)
	DeleteAllocated(ctx context.Context, in *DeleteAllocatedRequest, opts ...grpc.CallOption) (*DeleteAllocatedResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateAllocated(ctx context.Context, in *CreateAllocatedRequest, opts ...grpc.CallOption) (*CreateAllocatedResponse, error) {
	out := new(CreateAllocatedResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.allocated.v1.Manager/CreateAllocated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateAllocateds(ctx context.Context, in *CreateAllocatedsRequest, opts ...grpc.CallOption) (*CreateAllocatedsResponse, error) {
	out := new(CreateAllocatedsResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.allocated.v1.Manager/CreateAllocateds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateAllocated(ctx context.Context, in *UpdateAllocatedRequest, opts ...grpc.CallOption) (*UpdateAllocatedResponse, error) {
	out := new(UpdateAllocatedResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.allocated.v1.Manager/UpdateAllocated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetAllocated(ctx context.Context, in *GetAllocatedRequest, opts ...grpc.CallOption) (*GetAllocatedResponse, error) {
	out := new(GetAllocatedResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.allocated.v1.Manager/GetAllocated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetAllocatedOnly(ctx context.Context, in *GetAllocatedOnlyRequest, opts ...grpc.CallOption) (*GetAllocatedOnlyResponse, error) {
	out := new(GetAllocatedOnlyResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.allocated.v1.Manager/GetAllocatedOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetAllocateds(ctx context.Context, in *GetAllocatedsRequest, opts ...grpc.CallOption) (*GetAllocatedsResponse, error) {
	out := new(GetAllocatedsResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.allocated.v1.Manager/GetAllocateds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistAllocated(ctx context.Context, in *ExistAllocatedRequest, opts ...grpc.CallOption) (*ExistAllocatedResponse, error) {
	out := new(ExistAllocatedResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.allocated.v1.Manager/ExistAllocated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistAllocatedConds(ctx context.Context, in *ExistAllocatedCondsRequest, opts ...grpc.CallOption) (*ExistAllocatedCondsResponse, error) {
	out := new(ExistAllocatedCondsResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.allocated.v1.Manager/ExistAllocatedConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountAllocateds(ctx context.Context, in *CountAllocatedsRequest, opts ...grpc.CallOption) (*CountAllocatedsResponse, error) {
	out := new(CountAllocatedsResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.allocated.v1.Manager/CountAllocateds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteAllocated(ctx context.Context, in *DeleteAllocatedRequest, opts ...grpc.CallOption) (*DeleteAllocatedResponse, error) {
	out := new(DeleteAllocatedResponse)
	err := c.cc.Invoke(ctx, "/inspire.manager.coupon.allocated.v1.Manager/DeleteAllocated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateAllocated(context.Context, *CreateAllocatedRequest) (*CreateAllocatedResponse, error)
	CreateAllocateds(context.Context, *CreateAllocatedsRequest) (*CreateAllocatedsResponse, error)
	UpdateAllocated(context.Context, *UpdateAllocatedRequest) (*UpdateAllocatedResponse, error)
	GetAllocated(context.Context, *GetAllocatedRequest) (*GetAllocatedResponse, error)
	GetAllocatedOnly(context.Context, *GetAllocatedOnlyRequest) (*GetAllocatedOnlyResponse, error)
	GetAllocateds(context.Context, *GetAllocatedsRequest) (*GetAllocatedsResponse, error)
	ExistAllocated(context.Context, *ExistAllocatedRequest) (*ExistAllocatedResponse, error)
	ExistAllocatedConds(context.Context, *ExistAllocatedCondsRequest) (*ExistAllocatedCondsResponse, error)
	CountAllocateds(context.Context, *CountAllocatedsRequest) (*CountAllocatedsResponse, error)
	DeleteAllocated(context.Context, *DeleteAllocatedRequest) (*DeleteAllocatedResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateAllocated(context.Context, *CreateAllocatedRequest) (*CreateAllocatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAllocated not implemented")
}
func (UnimplementedManagerServer) CreateAllocateds(context.Context, *CreateAllocatedsRequest) (*CreateAllocatedsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAllocateds not implemented")
}
func (UnimplementedManagerServer) UpdateAllocated(context.Context, *UpdateAllocatedRequest) (*UpdateAllocatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAllocated not implemented")
}
func (UnimplementedManagerServer) GetAllocated(context.Context, *GetAllocatedRequest) (*GetAllocatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllocated not implemented")
}
func (UnimplementedManagerServer) GetAllocatedOnly(context.Context, *GetAllocatedOnlyRequest) (*GetAllocatedOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllocatedOnly not implemented")
}
func (UnimplementedManagerServer) GetAllocateds(context.Context, *GetAllocatedsRequest) (*GetAllocatedsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllocateds not implemented")
}
func (UnimplementedManagerServer) ExistAllocated(context.Context, *ExistAllocatedRequest) (*ExistAllocatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistAllocated not implemented")
}
func (UnimplementedManagerServer) ExistAllocatedConds(context.Context, *ExistAllocatedCondsRequest) (*ExistAllocatedCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistAllocatedConds not implemented")
}
func (UnimplementedManagerServer) CountAllocateds(context.Context, *CountAllocatedsRequest) (*CountAllocatedsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAllocateds not implemented")
}
func (UnimplementedManagerServer) DeleteAllocated(context.Context, *DeleteAllocatedRequest) (*DeleteAllocatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllocated not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateAllocated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAllocatedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateAllocated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.allocated.v1.Manager/CreateAllocated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateAllocated(ctx, req.(*CreateAllocatedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateAllocateds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAllocatedsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateAllocateds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.allocated.v1.Manager/CreateAllocateds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateAllocateds(ctx, req.(*CreateAllocatedsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateAllocated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAllocatedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateAllocated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.allocated.v1.Manager/UpdateAllocated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateAllocated(ctx, req.(*UpdateAllocatedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetAllocated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllocatedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetAllocated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.allocated.v1.Manager/GetAllocated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetAllocated(ctx, req.(*GetAllocatedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetAllocatedOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllocatedOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetAllocatedOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.allocated.v1.Manager/GetAllocatedOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetAllocatedOnly(ctx, req.(*GetAllocatedOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetAllocateds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllocatedsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetAllocateds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.allocated.v1.Manager/GetAllocateds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetAllocateds(ctx, req.(*GetAllocatedsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistAllocated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistAllocatedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistAllocated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.allocated.v1.Manager/ExistAllocated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistAllocated(ctx, req.(*ExistAllocatedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistAllocatedConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistAllocatedCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistAllocatedConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.allocated.v1.Manager/ExistAllocatedConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistAllocatedConds(ctx, req.(*ExistAllocatedCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountAllocateds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAllocatedsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountAllocateds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.allocated.v1.Manager/CountAllocateds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountAllocateds(ctx, req.(*CountAllocatedsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteAllocated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAllocatedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteAllocated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/inspire.manager.coupon.allocated.v1.Manager/DeleteAllocated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteAllocated(ctx, req.(*DeleteAllocatedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inspire.manager.coupon.allocated.v1.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAllocated",
			Handler:    _Manager_CreateAllocated_Handler,
		},
		{
			MethodName: "CreateAllocateds",
			Handler:    _Manager_CreateAllocateds_Handler,
		},
		{
			MethodName: "UpdateAllocated",
			Handler:    _Manager_UpdateAllocated_Handler,
		},
		{
			MethodName: "GetAllocated",
			Handler:    _Manager_GetAllocated_Handler,
		},
		{
			MethodName: "GetAllocatedOnly",
			Handler:    _Manager_GetAllocatedOnly_Handler,
		},
		{
			MethodName: "GetAllocateds",
			Handler:    _Manager_GetAllocateds_Handler,
		},
		{
			MethodName: "ExistAllocated",
			Handler:    _Manager_ExistAllocated_Handler,
		},
		{
			MethodName: "ExistAllocatedConds",
			Handler:    _Manager_ExistAllocatedConds_Handler,
		},
		{
			MethodName: "CountAllocateds",
			Handler:    _Manager_CountAllocateds_Handler,
		},
		{
			MethodName: "DeleteAllocated",
			Handler:    _Manager_DeleteAllocated_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/inspire/mgr/v1/coupon/allocated/allocated.proto",
}
