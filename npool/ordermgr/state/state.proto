syntax = "proto3";

package order.manager.state.v1;

option go_package = "github.com/NpoolPlatform/message/npool/ordermgr/state";

import "google/protobuf/empty.proto";
import "npool/npool.proto";

// Service Name
service OrderState {
    rpc Version (google.protobuf.Empty) returns (npool.v1.VersionResponse) {}

    rpc CreateState (CreateStateRequest) returns (CreateStateResponse) {}

    rpc CreateStates (CreateStatesRequest) returns (CreateStatesResponse) {}

    rpc UpdateState (UpdateStateRequest) returns (UpdateStateResponse) {}

    rpc GetState (GetStateRequest) returns (GetStateResponse) {}

    rpc GetStateOnly (GetStateOnlyRequest) returns (GetStateOnlyResponse) {}

    rpc GetStates (GetStatesRequest) returns (GetStatesResponse) {}

    rpc ExistState (ExistStateRequest) returns (ExistStateResponse) {}

    rpc ExistStateConds (ExistStateCondsRequest) returns (ExistStateCondsResponse) {}

    rpc CountStates (CountStatesRequest) returns (CountStatesResponse) {}
}

enum EState {
    DefaultState      = 0;

    // Common state
    WaitPayment       = 10;
    Paid              = 20;
    PaymentTimeout    = 30;
    Canceled          = 40;

    // Cyclation order state
    InService         = 50;
    Expired           = 60;

    // Delivery order state
}

message StateReq {
    optional string ID      = 10;
    optional string OrderID = 20;
    optional EState  State   = 30;
}

message State {
    string ID      = 10;
    string OrderID = 20;
    EState State   = 30;
}

message Conds {
    optional npool.v1.StringVal ID      = 10;
    optional npool.v1.StringVal OrderID = 20;
    optional npool.v1.Int32Val  State   = 30;
}


message CreateStateRequest {
    StateReq Info = 10;
}

message CreateStateResponse {
    State Info = 10;
}

message CreateStatesRequest {
    repeated StateReq Infos = 10;
}

message CreateStatesResponse {
    repeated State Infos = 10;
}

message UpdateStateRequest {
    StateReq Info = 10;
}

message UpdateStateResponse {
    State Info = 10;
}

message GetStateRequest {
    string ID = 10;
}

message GetStateResponse {
    State Info = 10;
}

message GetStatesRequest {
    Conds Conds   = 10;
    int32 Offset  = 20;
    int32 Limit   = 30;
}

message GetStatesResponse {
    repeated State Infos = 10;
    uint32 Total          = 20;
}

message GetStateOnlyRequest {
    Conds Conds = 10;
}

message GetStateOnlyResponse {
    State Info = 10;
}

message ExistStateRequest {
    string ID = 10;
}

message ExistStateResponse {
    bool Info = 10;
}

message ExistStateCondsRequest {
    Conds Conds = 10;
}

message ExistStateCondsResponse {
    bool Info = 10;
}

message CountStatesRequest {
    Conds Conds = 10;
}

message CountStatesResponse {
    uint32 Info = 10;
}

