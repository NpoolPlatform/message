// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/ordermgr/state/state.proto

package order

import (
	context "context"
	npool "github.com/NpoolPlatform/message/npool"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderStateClient is the client API for OrderState service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderStateClient interface {
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*npool.VersionResponse, error)
	CreateState(ctx context.Context, in *CreateStateRequest, opts ...grpc.CallOption) (*CreateStateResponse, error)
	CreateStates(ctx context.Context, in *CreateStatesRequest, opts ...grpc.CallOption) (*CreateStatesResponse, error)
	UpdateState(ctx context.Context, in *UpdateStateRequest, opts ...grpc.CallOption) (*UpdateStateResponse, error)
	GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error)
	GetStateOnly(ctx context.Context, in *GetStateOnlyRequest, opts ...grpc.CallOption) (*GetStateOnlyResponse, error)
	GetStates(ctx context.Context, in *GetStatesRequest, opts ...grpc.CallOption) (*GetStatesResponse, error)
	ExistState(ctx context.Context, in *ExistStateRequest, opts ...grpc.CallOption) (*ExistStateResponse, error)
	ExistStateConds(ctx context.Context, in *ExistStateCondsRequest, opts ...grpc.CallOption) (*ExistStateCondsResponse, error)
	CountStates(ctx context.Context, in *CountStatesRequest, opts ...grpc.CallOption) (*CountStatesResponse, error)
}

type orderStateClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderStateClient(cc grpc.ClientConnInterface) OrderStateClient {
	return &orderStateClient{cc}
}

func (c *orderStateClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*npool.VersionResponse, error) {
	out := new(npool.VersionResponse)
	err := c.cc.Invoke(ctx, "/order.manager.state.v1.OrderState/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderStateClient) CreateState(ctx context.Context, in *CreateStateRequest, opts ...grpc.CallOption) (*CreateStateResponse, error) {
	out := new(CreateStateResponse)
	err := c.cc.Invoke(ctx, "/order.manager.state.v1.OrderState/CreateState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderStateClient) CreateStates(ctx context.Context, in *CreateStatesRequest, opts ...grpc.CallOption) (*CreateStatesResponse, error) {
	out := new(CreateStatesResponse)
	err := c.cc.Invoke(ctx, "/order.manager.state.v1.OrderState/CreateStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderStateClient) UpdateState(ctx context.Context, in *UpdateStateRequest, opts ...grpc.CallOption) (*UpdateStateResponse, error) {
	out := new(UpdateStateResponse)
	err := c.cc.Invoke(ctx, "/order.manager.state.v1.OrderState/UpdateState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderStateClient) GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error) {
	out := new(GetStateResponse)
	err := c.cc.Invoke(ctx, "/order.manager.state.v1.OrderState/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderStateClient) GetStateOnly(ctx context.Context, in *GetStateOnlyRequest, opts ...grpc.CallOption) (*GetStateOnlyResponse, error) {
	out := new(GetStateOnlyResponse)
	err := c.cc.Invoke(ctx, "/order.manager.state.v1.OrderState/GetStateOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderStateClient) GetStates(ctx context.Context, in *GetStatesRequest, opts ...grpc.CallOption) (*GetStatesResponse, error) {
	out := new(GetStatesResponse)
	err := c.cc.Invoke(ctx, "/order.manager.state.v1.OrderState/GetStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderStateClient) ExistState(ctx context.Context, in *ExistStateRequest, opts ...grpc.CallOption) (*ExistStateResponse, error) {
	out := new(ExistStateResponse)
	err := c.cc.Invoke(ctx, "/order.manager.state.v1.OrderState/ExistState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderStateClient) ExistStateConds(ctx context.Context, in *ExistStateCondsRequest, opts ...grpc.CallOption) (*ExistStateCondsResponse, error) {
	out := new(ExistStateCondsResponse)
	err := c.cc.Invoke(ctx, "/order.manager.state.v1.OrderState/ExistStateConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderStateClient) CountStates(ctx context.Context, in *CountStatesRequest, opts ...grpc.CallOption) (*CountStatesResponse, error) {
	out := new(CountStatesResponse)
	err := c.cc.Invoke(ctx, "/order.manager.state.v1.OrderState/CountStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderStateServer is the server API for OrderState service.
// All implementations must embed UnimplementedOrderStateServer
// for forward compatibility
type OrderStateServer interface {
	Version(context.Context, *emptypb.Empty) (*npool.VersionResponse, error)
	CreateState(context.Context, *CreateStateRequest) (*CreateStateResponse, error)
	CreateStates(context.Context, *CreateStatesRequest) (*CreateStatesResponse, error)
	UpdateState(context.Context, *UpdateStateRequest) (*UpdateStateResponse, error)
	GetState(context.Context, *GetStateRequest) (*GetStateResponse, error)
	GetStateOnly(context.Context, *GetStateOnlyRequest) (*GetStateOnlyResponse, error)
	GetStates(context.Context, *GetStatesRequest) (*GetStatesResponse, error)
	ExistState(context.Context, *ExistStateRequest) (*ExistStateResponse, error)
	ExistStateConds(context.Context, *ExistStateCondsRequest) (*ExistStateCondsResponse, error)
	CountStates(context.Context, *CountStatesRequest) (*CountStatesResponse, error)
	mustEmbedUnimplementedOrderStateServer()
}

// UnimplementedOrderStateServer must be embedded to have forward compatible implementations.
type UnimplementedOrderStateServer struct {
}

func (UnimplementedOrderStateServer) Version(context.Context, *emptypb.Empty) (*npool.VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedOrderStateServer) CreateState(context.Context, *CreateStateRequest) (*CreateStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateState not implemented")
}
func (UnimplementedOrderStateServer) CreateStates(context.Context, *CreateStatesRequest) (*CreateStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStates not implemented")
}
func (UnimplementedOrderStateServer) UpdateState(context.Context, *UpdateStateRequest) (*UpdateStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateState not implemented")
}
func (UnimplementedOrderStateServer) GetState(context.Context, *GetStateRequest) (*GetStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (UnimplementedOrderStateServer) GetStateOnly(context.Context, *GetStateOnlyRequest) (*GetStateOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStateOnly not implemented")
}
func (UnimplementedOrderStateServer) GetStates(context.Context, *GetStatesRequest) (*GetStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStates not implemented")
}
func (UnimplementedOrderStateServer) ExistState(context.Context, *ExistStateRequest) (*ExistStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistState not implemented")
}
func (UnimplementedOrderStateServer) ExistStateConds(context.Context, *ExistStateCondsRequest) (*ExistStateCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistStateConds not implemented")
}
func (UnimplementedOrderStateServer) CountStates(context.Context, *CountStatesRequest) (*CountStatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountStates not implemented")
}
func (UnimplementedOrderStateServer) mustEmbedUnimplementedOrderStateServer() {}

// UnsafeOrderStateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderStateServer will
// result in compilation errors.
type UnsafeOrderStateServer interface {
	mustEmbedUnimplementedOrderStateServer()
}

func RegisterOrderStateServer(s grpc.ServiceRegistrar, srv OrderStateServer) {
	s.RegisterService(&OrderState_ServiceDesc, srv)
}

func _OrderState_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderStateServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.manager.state.v1.OrderState/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderStateServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderState_CreateState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderStateServer).CreateState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.manager.state.v1.OrderState/CreateState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderStateServer).CreateState(ctx, req.(*CreateStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderState_CreateStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderStateServer).CreateStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.manager.state.v1.OrderState/CreateStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderStateServer).CreateStates(ctx, req.(*CreateStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderState_UpdateState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderStateServer).UpdateState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.manager.state.v1.OrderState/UpdateState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderStateServer).UpdateState(ctx, req.(*UpdateStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderState_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderStateServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.manager.state.v1.OrderState/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderStateServer).GetState(ctx, req.(*GetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderState_GetStateOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderStateServer).GetStateOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.manager.state.v1.OrderState/GetStateOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderStateServer).GetStateOnly(ctx, req.(*GetStateOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderState_GetStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderStateServer).GetStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.manager.state.v1.OrderState/GetStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderStateServer).GetStates(ctx, req.(*GetStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderState_ExistState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderStateServer).ExistState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.manager.state.v1.OrderState/ExistState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderStateServer).ExistState(ctx, req.(*ExistStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderState_ExistStateConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistStateCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderStateServer).ExistStateConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.manager.state.v1.OrderState/ExistStateConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderStateServer).ExistStateConds(ctx, req.(*ExistStateCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderState_CountStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderStateServer).CountStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.manager.state.v1.OrderState/CountStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderStateServer).CountStates(ctx, req.(*CountStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderState_ServiceDesc is the grpc.ServiceDesc for OrderState service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderState_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "order.manager.state.v1.OrderState",
	HandlerType: (*OrderStateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _OrderState_Version_Handler,
		},
		{
			MethodName: "CreateState",
			Handler:    _OrderState_CreateState_Handler,
		},
		{
			MethodName: "CreateStates",
			Handler:    _OrderState_CreateStates_Handler,
		},
		{
			MethodName: "UpdateState",
			Handler:    _OrderState_UpdateState_Handler,
		},
		{
			MethodName: "GetState",
			Handler:    _OrderState_GetState_Handler,
		},
		{
			MethodName: "GetStateOnly",
			Handler:    _OrderState_GetStateOnly_Handler,
		},
		{
			MethodName: "GetStates",
			Handler:    _OrderState_GetStates_Handler,
		},
		{
			MethodName: "ExistState",
			Handler:    _OrderState_ExistState_Handler,
		},
		{
			MethodName: "ExistStateConds",
			Handler:    _OrderState_ExistStateConds_Handler,
		},
		{
			MethodName: "CountStates",
			Handler:    _OrderState_CountStates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/ordermgr/state/state.proto",
}
