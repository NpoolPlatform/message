// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cloud_hashing_order

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CloudHashingOrderClient is the client API for CloudHashingOrder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudHashingOrderClient interface {
	// Method Version
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionResponse, error)
	CreateGoodPaying(ctx context.Context, in *CreateGoodPayingRequest, opts ...grpc.CallOption) (*CreateGoodPayingResponse, error)
	GetGoodPayingByOrder(ctx context.Context, in *GetGoodPayingByOrderRequest, opts ...grpc.CallOption) (*GetGoodPayingByOrderResponse, error)
	CreateGasPaying(ctx context.Context, in *CreateGasPayingRequest, opts ...grpc.CallOption) (*CreateGasPayingResponse, error)
	GetGasPayingsByOrder(ctx context.Context, in *GetGasPayingsByOrderRequest, opts ...grpc.CallOption) (*GetGasPayingsByOrderResponse, error)
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error)
	GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error)
	GetOrderDetail(ctx context.Context, in *GetOrderDetailRequest, opts ...grpc.CallOption) (*GetOrderDetailResponse, error)
	GetOrdersByAppUser(ctx context.Context, in *GetOrdersByAppUserRequest, opts ...grpc.CallOption) (*GetOrdersByAppUserResponse, error)
	GetOrdersByApp(ctx context.Context, in *GetOrdersByAppRequest, opts ...grpc.CallOption) (*GetOrdersByAppResponse, error)
	GetOrdersByGood(ctx context.Context, in *GetOrdersByGoodRequest, opts ...grpc.CallOption) (*GetOrdersByGoodResponse, error)
	CreateCompensate(ctx context.Context, in *CreateCompensateRequest, opts ...grpc.CallOption) (*CreateCompensateResponse, error)
	GetCompensatesByOrder(ctx context.Context, in *GetCompensatesByOrderRequest, opts ...grpc.CallOption) (*GetCompensatesByOrderResponse, error)
	CreateOutOfGas(ctx context.Context, in *CreateOutOfGasRequest, opts ...grpc.CallOption) (*CreateOutOfGasResponse, error)
	GetOutOfGasesByOrder(ctx context.Context, in *GetOutOfGasesByOrderRequest, opts ...grpc.CallOption) (*GetOutOfGasesByOrderResponse, error)
	CreatePayment(ctx context.Context, in *CreatePaymentRequest, opts ...grpc.CallOption) (*CreatePaymentResponse, error)
	GetPayment(ctx context.Context, in *GetPaymentRequest, opts ...grpc.CallOption) (*GetPaymentResponse, error)
	UpdatePayment(ctx context.Context, in *UpdatePaymentRequest, opts ...grpc.CallOption) (*UpdatePaymentResponse, error)
	GetPaymentByOrder(ctx context.Context, in *GetPaymentByOrderRequest, opts ...grpc.CallOption) (*GetPaymentByOrderResponse, error)
	GetOrdersDetailByAppUser(ctx context.Context, in *GetOrdersDetailByAppUserRequest, opts ...grpc.CallOption) (*GetOrdersDetailByAppUserResponse, error)
	GetOrdersShortDetailByAppUser(ctx context.Context, in *GetOrdersShortDetailByAppUserRequest, opts ...grpc.CallOption) (*GetOrdersShortDetailByAppUserResponse, error)
	GetOrdersDetailByApp(ctx context.Context, in *GetOrdersDetailByAppRequest, opts ...grpc.CallOption) (*GetOrdersDetailByAppResponse, error)
	GetOrdersDetailByGood(ctx context.Context, in *GetOrdersDetailByGoodRequest, opts ...grpc.CallOption) (*GetOrdersDetailByGoodResponse, error)
}

type cloudHashingOrderClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudHashingOrderClient(cc grpc.ClientConnInterface) CloudHashingOrderClient {
	return &cloudHashingOrderClient{cc}
}

func (c *cloudHashingOrderClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.order.v1.CloudHashingOrder/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingOrderClient) CreateGoodPaying(ctx context.Context, in *CreateGoodPayingRequest, opts ...grpc.CallOption) (*CreateGoodPayingResponse, error) {
	out := new(CreateGoodPayingResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.order.v1.CloudHashingOrder/CreateGoodPaying", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingOrderClient) GetGoodPayingByOrder(ctx context.Context, in *GetGoodPayingByOrderRequest, opts ...grpc.CallOption) (*GetGoodPayingByOrderResponse, error) {
	out := new(GetGoodPayingByOrderResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.order.v1.CloudHashingOrder/GetGoodPayingByOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingOrderClient) CreateGasPaying(ctx context.Context, in *CreateGasPayingRequest, opts ...grpc.CallOption) (*CreateGasPayingResponse, error) {
	out := new(CreateGasPayingResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.order.v1.CloudHashingOrder/CreateGasPaying", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingOrderClient) GetGasPayingsByOrder(ctx context.Context, in *GetGasPayingsByOrderRequest, opts ...grpc.CallOption) (*GetGasPayingsByOrderResponse, error) {
	out := new(GetGasPayingsByOrderResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.order.v1.CloudHashingOrder/GetGasPayingsByOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingOrderClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*CreateOrderResponse, error) {
	out := new(CreateOrderResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.order.v1.CloudHashingOrder/CreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingOrderClient) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*GetOrderResponse, error) {
	out := new(GetOrderResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.order.v1.CloudHashingOrder/GetOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingOrderClient) GetOrderDetail(ctx context.Context, in *GetOrderDetailRequest, opts ...grpc.CallOption) (*GetOrderDetailResponse, error) {
	out := new(GetOrderDetailResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.order.v1.CloudHashingOrder/GetOrderDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingOrderClient) GetOrdersByAppUser(ctx context.Context, in *GetOrdersByAppUserRequest, opts ...grpc.CallOption) (*GetOrdersByAppUserResponse, error) {
	out := new(GetOrdersByAppUserResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.order.v1.CloudHashingOrder/GetOrdersByAppUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingOrderClient) GetOrdersByApp(ctx context.Context, in *GetOrdersByAppRequest, opts ...grpc.CallOption) (*GetOrdersByAppResponse, error) {
	out := new(GetOrdersByAppResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.order.v1.CloudHashingOrder/GetOrdersByApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingOrderClient) GetOrdersByGood(ctx context.Context, in *GetOrdersByGoodRequest, opts ...grpc.CallOption) (*GetOrdersByGoodResponse, error) {
	out := new(GetOrdersByGoodResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.order.v1.CloudHashingOrder/GetOrdersByGood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingOrderClient) CreateCompensate(ctx context.Context, in *CreateCompensateRequest, opts ...grpc.CallOption) (*CreateCompensateResponse, error) {
	out := new(CreateCompensateResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.order.v1.CloudHashingOrder/CreateCompensate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingOrderClient) GetCompensatesByOrder(ctx context.Context, in *GetCompensatesByOrderRequest, opts ...grpc.CallOption) (*GetCompensatesByOrderResponse, error) {
	out := new(GetCompensatesByOrderResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.order.v1.CloudHashingOrder/GetCompensatesByOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingOrderClient) CreateOutOfGas(ctx context.Context, in *CreateOutOfGasRequest, opts ...grpc.CallOption) (*CreateOutOfGasResponse, error) {
	out := new(CreateOutOfGasResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.order.v1.CloudHashingOrder/CreateOutOfGas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingOrderClient) GetOutOfGasesByOrder(ctx context.Context, in *GetOutOfGasesByOrderRequest, opts ...grpc.CallOption) (*GetOutOfGasesByOrderResponse, error) {
	out := new(GetOutOfGasesByOrderResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.order.v1.CloudHashingOrder/GetOutOfGasesByOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingOrderClient) CreatePayment(ctx context.Context, in *CreatePaymentRequest, opts ...grpc.CallOption) (*CreatePaymentResponse, error) {
	out := new(CreatePaymentResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.order.v1.CloudHashingOrder/CreatePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingOrderClient) GetPayment(ctx context.Context, in *GetPaymentRequest, opts ...grpc.CallOption) (*GetPaymentResponse, error) {
	out := new(GetPaymentResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.order.v1.CloudHashingOrder/GetPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingOrderClient) UpdatePayment(ctx context.Context, in *UpdatePaymentRequest, opts ...grpc.CallOption) (*UpdatePaymentResponse, error) {
	out := new(UpdatePaymentResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.order.v1.CloudHashingOrder/UpdatePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingOrderClient) GetPaymentByOrder(ctx context.Context, in *GetPaymentByOrderRequest, opts ...grpc.CallOption) (*GetPaymentByOrderResponse, error) {
	out := new(GetPaymentByOrderResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.order.v1.CloudHashingOrder/GetPaymentByOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingOrderClient) GetOrdersDetailByAppUser(ctx context.Context, in *GetOrdersDetailByAppUserRequest, opts ...grpc.CallOption) (*GetOrdersDetailByAppUserResponse, error) {
	out := new(GetOrdersDetailByAppUserResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.order.v1.CloudHashingOrder/GetOrdersDetailByAppUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingOrderClient) GetOrdersShortDetailByAppUser(ctx context.Context, in *GetOrdersShortDetailByAppUserRequest, opts ...grpc.CallOption) (*GetOrdersShortDetailByAppUserResponse, error) {
	out := new(GetOrdersShortDetailByAppUserResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.order.v1.CloudHashingOrder/GetOrdersShortDetailByAppUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingOrderClient) GetOrdersDetailByApp(ctx context.Context, in *GetOrdersDetailByAppRequest, opts ...grpc.CallOption) (*GetOrdersDetailByAppResponse, error) {
	out := new(GetOrdersDetailByAppResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.order.v1.CloudHashingOrder/GetOrdersDetailByApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudHashingOrderClient) GetOrdersDetailByGood(ctx context.Context, in *GetOrdersDetailByGoodRequest, opts ...grpc.CallOption) (*GetOrdersDetailByGoodResponse, error) {
	out := new(GetOrdersDetailByGoodResponse)
	err := c.cc.Invoke(ctx, "/cloud.hashing.order.v1.CloudHashingOrder/GetOrdersDetailByGood", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudHashingOrderServer is the server API for CloudHashingOrder service.
// All implementations must embed UnimplementedCloudHashingOrderServer
// for forward compatibility
type CloudHashingOrderServer interface {
	// Method Version
	Version(context.Context, *emptypb.Empty) (*VersionResponse, error)
	CreateGoodPaying(context.Context, *CreateGoodPayingRequest) (*CreateGoodPayingResponse, error)
	GetGoodPayingByOrder(context.Context, *GetGoodPayingByOrderRequest) (*GetGoodPayingByOrderResponse, error)
	CreateGasPaying(context.Context, *CreateGasPayingRequest) (*CreateGasPayingResponse, error)
	GetGasPayingsByOrder(context.Context, *GetGasPayingsByOrderRequest) (*GetGasPayingsByOrderResponse, error)
	CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error)
	GetOrder(context.Context, *GetOrderRequest) (*GetOrderResponse, error)
	GetOrderDetail(context.Context, *GetOrderDetailRequest) (*GetOrderDetailResponse, error)
	GetOrdersByAppUser(context.Context, *GetOrdersByAppUserRequest) (*GetOrdersByAppUserResponse, error)
	GetOrdersByApp(context.Context, *GetOrdersByAppRequest) (*GetOrdersByAppResponse, error)
	GetOrdersByGood(context.Context, *GetOrdersByGoodRequest) (*GetOrdersByGoodResponse, error)
	CreateCompensate(context.Context, *CreateCompensateRequest) (*CreateCompensateResponse, error)
	GetCompensatesByOrder(context.Context, *GetCompensatesByOrderRequest) (*GetCompensatesByOrderResponse, error)
	CreateOutOfGas(context.Context, *CreateOutOfGasRequest) (*CreateOutOfGasResponse, error)
	GetOutOfGasesByOrder(context.Context, *GetOutOfGasesByOrderRequest) (*GetOutOfGasesByOrderResponse, error)
	CreatePayment(context.Context, *CreatePaymentRequest) (*CreatePaymentResponse, error)
	GetPayment(context.Context, *GetPaymentRequest) (*GetPaymentResponse, error)
	UpdatePayment(context.Context, *UpdatePaymentRequest) (*UpdatePaymentResponse, error)
	GetPaymentByOrder(context.Context, *GetPaymentByOrderRequest) (*GetPaymentByOrderResponse, error)
	GetOrdersDetailByAppUser(context.Context, *GetOrdersDetailByAppUserRequest) (*GetOrdersDetailByAppUserResponse, error)
	GetOrdersShortDetailByAppUser(context.Context, *GetOrdersShortDetailByAppUserRequest) (*GetOrdersShortDetailByAppUserResponse, error)
	GetOrdersDetailByApp(context.Context, *GetOrdersDetailByAppRequest) (*GetOrdersDetailByAppResponse, error)
	GetOrdersDetailByGood(context.Context, *GetOrdersDetailByGoodRequest) (*GetOrdersDetailByGoodResponse, error)
	mustEmbedUnimplementedCloudHashingOrderServer()
}

// UnimplementedCloudHashingOrderServer must be embedded to have forward compatible implementations.
type UnimplementedCloudHashingOrderServer struct {
}

func (UnimplementedCloudHashingOrderServer) Version(context.Context, *emptypb.Empty) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedCloudHashingOrderServer) CreateGoodPaying(context.Context, *CreateGoodPayingRequest) (*CreateGoodPayingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGoodPaying not implemented")
}
func (UnimplementedCloudHashingOrderServer) GetGoodPayingByOrder(context.Context, *GetGoodPayingByOrderRequest) (*GetGoodPayingByOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodPayingByOrder not implemented")
}
func (UnimplementedCloudHashingOrderServer) CreateGasPaying(context.Context, *CreateGasPayingRequest) (*CreateGasPayingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGasPaying not implemented")
}
func (UnimplementedCloudHashingOrderServer) GetGasPayingsByOrder(context.Context, *GetGasPayingsByOrderRequest) (*GetGasPayingsByOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGasPayingsByOrder not implemented")
}
func (UnimplementedCloudHashingOrderServer) CreateOrder(context.Context, *CreateOrderRequest) (*CreateOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedCloudHashingOrderServer) GetOrder(context.Context, *GetOrderRequest) (*GetOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (UnimplementedCloudHashingOrderServer) GetOrderDetail(context.Context, *GetOrderDetailRequest) (*GetOrderDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderDetail not implemented")
}
func (UnimplementedCloudHashingOrderServer) GetOrdersByAppUser(context.Context, *GetOrdersByAppUserRequest) (*GetOrdersByAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrdersByAppUser not implemented")
}
func (UnimplementedCloudHashingOrderServer) GetOrdersByApp(context.Context, *GetOrdersByAppRequest) (*GetOrdersByAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrdersByApp not implemented")
}
func (UnimplementedCloudHashingOrderServer) GetOrdersByGood(context.Context, *GetOrdersByGoodRequest) (*GetOrdersByGoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrdersByGood not implemented")
}
func (UnimplementedCloudHashingOrderServer) CreateCompensate(context.Context, *CreateCompensateRequest) (*CreateCompensateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCompensate not implemented")
}
func (UnimplementedCloudHashingOrderServer) GetCompensatesByOrder(context.Context, *GetCompensatesByOrderRequest) (*GetCompensatesByOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompensatesByOrder not implemented")
}
func (UnimplementedCloudHashingOrderServer) CreateOutOfGas(context.Context, *CreateOutOfGasRequest) (*CreateOutOfGasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOutOfGas not implemented")
}
func (UnimplementedCloudHashingOrderServer) GetOutOfGasesByOrder(context.Context, *GetOutOfGasesByOrderRequest) (*GetOutOfGasesByOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOutOfGasesByOrder not implemented")
}
func (UnimplementedCloudHashingOrderServer) CreatePayment(context.Context, *CreatePaymentRequest) (*CreatePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePayment not implemented")
}
func (UnimplementedCloudHashingOrderServer) GetPayment(context.Context, *GetPaymentRequest) (*GetPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayment not implemented")
}
func (UnimplementedCloudHashingOrderServer) UpdatePayment(context.Context, *UpdatePaymentRequest) (*UpdatePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePayment not implemented")
}
func (UnimplementedCloudHashingOrderServer) GetPaymentByOrder(context.Context, *GetPaymentByOrderRequest) (*GetPaymentByOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentByOrder not implemented")
}
func (UnimplementedCloudHashingOrderServer) GetOrdersDetailByAppUser(context.Context, *GetOrdersDetailByAppUserRequest) (*GetOrdersDetailByAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrdersDetailByAppUser not implemented")
}
func (UnimplementedCloudHashingOrderServer) GetOrdersShortDetailByAppUser(context.Context, *GetOrdersShortDetailByAppUserRequest) (*GetOrdersShortDetailByAppUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrdersShortDetailByAppUser not implemented")
}
func (UnimplementedCloudHashingOrderServer) GetOrdersDetailByApp(context.Context, *GetOrdersDetailByAppRequest) (*GetOrdersDetailByAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrdersDetailByApp not implemented")
}
func (UnimplementedCloudHashingOrderServer) GetOrdersDetailByGood(context.Context, *GetOrdersDetailByGoodRequest) (*GetOrdersDetailByGoodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrdersDetailByGood not implemented")
}
func (UnimplementedCloudHashingOrderServer) mustEmbedUnimplementedCloudHashingOrderServer() {}

// UnsafeCloudHashingOrderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudHashingOrderServer will
// result in compilation errors.
type UnsafeCloudHashingOrderServer interface {
	mustEmbedUnimplementedCloudHashingOrderServer()
}

func RegisterCloudHashingOrderServer(s grpc.ServiceRegistrar, srv CloudHashingOrderServer) {
	s.RegisterService(&CloudHashingOrder_ServiceDesc, srv)
}

func _CloudHashingOrder_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingOrderServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.order.v1.CloudHashingOrder/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingOrderServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingOrder_CreateGoodPaying_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGoodPayingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingOrderServer).CreateGoodPaying(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.order.v1.CloudHashingOrder/CreateGoodPaying",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingOrderServer).CreateGoodPaying(ctx, req.(*CreateGoodPayingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingOrder_GetGoodPayingByOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoodPayingByOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingOrderServer).GetGoodPayingByOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.order.v1.CloudHashingOrder/GetGoodPayingByOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingOrderServer).GetGoodPayingByOrder(ctx, req.(*GetGoodPayingByOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingOrder_CreateGasPaying_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGasPayingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingOrderServer).CreateGasPaying(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.order.v1.CloudHashingOrder/CreateGasPaying",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingOrderServer).CreateGasPaying(ctx, req.(*CreateGasPayingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingOrder_GetGasPayingsByOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGasPayingsByOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingOrderServer).GetGasPayingsByOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.order.v1.CloudHashingOrder/GetGasPayingsByOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingOrderServer).GetGasPayingsByOrder(ctx, req.(*GetGasPayingsByOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingOrder_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingOrderServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.order.v1.CloudHashingOrder/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingOrderServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingOrder_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingOrderServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.order.v1.CloudHashingOrder/GetOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingOrderServer).GetOrder(ctx, req.(*GetOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingOrder_GetOrderDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingOrderServer).GetOrderDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.order.v1.CloudHashingOrder/GetOrderDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingOrderServer).GetOrderDetail(ctx, req.(*GetOrderDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingOrder_GetOrdersByAppUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrdersByAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingOrderServer).GetOrdersByAppUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.order.v1.CloudHashingOrder/GetOrdersByAppUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingOrderServer).GetOrdersByAppUser(ctx, req.(*GetOrdersByAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingOrder_GetOrdersByApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrdersByAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingOrderServer).GetOrdersByApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.order.v1.CloudHashingOrder/GetOrdersByApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingOrderServer).GetOrdersByApp(ctx, req.(*GetOrdersByAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingOrder_GetOrdersByGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrdersByGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingOrderServer).GetOrdersByGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.order.v1.CloudHashingOrder/GetOrdersByGood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingOrderServer).GetOrdersByGood(ctx, req.(*GetOrdersByGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingOrder_CreateCompensate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCompensateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingOrderServer).CreateCompensate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.order.v1.CloudHashingOrder/CreateCompensate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingOrderServer).CreateCompensate(ctx, req.(*CreateCompensateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingOrder_GetCompensatesByOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompensatesByOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingOrderServer).GetCompensatesByOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.order.v1.CloudHashingOrder/GetCompensatesByOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingOrderServer).GetCompensatesByOrder(ctx, req.(*GetCompensatesByOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingOrder_CreateOutOfGas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOutOfGasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingOrderServer).CreateOutOfGas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.order.v1.CloudHashingOrder/CreateOutOfGas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingOrderServer).CreateOutOfGas(ctx, req.(*CreateOutOfGasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingOrder_GetOutOfGasesByOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOutOfGasesByOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingOrderServer).GetOutOfGasesByOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.order.v1.CloudHashingOrder/GetOutOfGasesByOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingOrderServer).GetOutOfGasesByOrder(ctx, req.(*GetOutOfGasesByOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingOrder_CreatePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingOrderServer).CreatePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.order.v1.CloudHashingOrder/CreatePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingOrderServer).CreatePayment(ctx, req.(*CreatePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingOrder_GetPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingOrderServer).GetPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.order.v1.CloudHashingOrder/GetPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingOrderServer).GetPayment(ctx, req.(*GetPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingOrder_UpdatePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingOrderServer).UpdatePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.order.v1.CloudHashingOrder/UpdatePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingOrderServer).UpdatePayment(ctx, req.(*UpdatePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingOrder_GetPaymentByOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentByOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingOrderServer).GetPaymentByOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.order.v1.CloudHashingOrder/GetPaymentByOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingOrderServer).GetPaymentByOrder(ctx, req.(*GetPaymentByOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingOrder_GetOrdersDetailByAppUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrdersDetailByAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingOrderServer).GetOrdersDetailByAppUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.order.v1.CloudHashingOrder/GetOrdersDetailByAppUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingOrderServer).GetOrdersDetailByAppUser(ctx, req.(*GetOrdersDetailByAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingOrder_GetOrdersShortDetailByAppUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrdersShortDetailByAppUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingOrderServer).GetOrdersShortDetailByAppUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.order.v1.CloudHashingOrder/GetOrdersShortDetailByAppUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingOrderServer).GetOrdersShortDetailByAppUser(ctx, req.(*GetOrdersShortDetailByAppUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingOrder_GetOrdersDetailByApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrdersDetailByAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingOrderServer).GetOrdersDetailByApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.order.v1.CloudHashingOrder/GetOrdersDetailByApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingOrderServer).GetOrdersDetailByApp(ctx, req.(*GetOrdersDetailByAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudHashingOrder_GetOrdersDetailByGood_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrdersDetailByGoodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudHashingOrderServer).GetOrdersDetailByGood(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cloud.hashing.order.v1.CloudHashingOrder/GetOrdersDetailByGood",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudHashingOrderServer).GetOrdersDetailByGood(ctx, req.(*GetOrdersDetailByGoodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudHashingOrder_ServiceDesc is the grpc.ServiceDesc for CloudHashingOrder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudHashingOrder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cloud.hashing.order.v1.CloudHashingOrder",
	HandlerType: (*CloudHashingOrderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _CloudHashingOrder_Version_Handler,
		},
		{
			MethodName: "CreateGoodPaying",
			Handler:    _CloudHashingOrder_CreateGoodPaying_Handler,
		},
		{
			MethodName: "GetGoodPayingByOrder",
			Handler:    _CloudHashingOrder_GetGoodPayingByOrder_Handler,
		},
		{
			MethodName: "CreateGasPaying",
			Handler:    _CloudHashingOrder_CreateGasPaying_Handler,
		},
		{
			MethodName: "GetGasPayingsByOrder",
			Handler:    _CloudHashingOrder_GetGasPayingsByOrder_Handler,
		},
		{
			MethodName: "CreateOrder",
			Handler:    _CloudHashingOrder_CreateOrder_Handler,
		},
		{
			MethodName: "GetOrder",
			Handler:    _CloudHashingOrder_GetOrder_Handler,
		},
		{
			MethodName: "GetOrderDetail",
			Handler:    _CloudHashingOrder_GetOrderDetail_Handler,
		},
		{
			MethodName: "GetOrdersByAppUser",
			Handler:    _CloudHashingOrder_GetOrdersByAppUser_Handler,
		},
		{
			MethodName: "GetOrdersByApp",
			Handler:    _CloudHashingOrder_GetOrdersByApp_Handler,
		},
		{
			MethodName: "GetOrdersByGood",
			Handler:    _CloudHashingOrder_GetOrdersByGood_Handler,
		},
		{
			MethodName: "CreateCompensate",
			Handler:    _CloudHashingOrder_CreateCompensate_Handler,
		},
		{
			MethodName: "GetCompensatesByOrder",
			Handler:    _CloudHashingOrder_GetCompensatesByOrder_Handler,
		},
		{
			MethodName: "CreateOutOfGas",
			Handler:    _CloudHashingOrder_CreateOutOfGas_Handler,
		},
		{
			MethodName: "GetOutOfGasesByOrder",
			Handler:    _CloudHashingOrder_GetOutOfGasesByOrder_Handler,
		},
		{
			MethodName: "CreatePayment",
			Handler:    _CloudHashingOrder_CreatePayment_Handler,
		},
		{
			MethodName: "GetPayment",
			Handler:    _CloudHashingOrder_GetPayment_Handler,
		},
		{
			MethodName: "UpdatePayment",
			Handler:    _CloudHashingOrder_UpdatePayment_Handler,
		},
		{
			MethodName: "GetPaymentByOrder",
			Handler:    _CloudHashingOrder_GetPaymentByOrder_Handler,
		},
		{
			MethodName: "GetOrdersDetailByAppUser",
			Handler:    _CloudHashingOrder_GetOrdersDetailByAppUser_Handler,
		},
		{
			MethodName: "GetOrdersShortDetailByAppUser",
			Handler:    _CloudHashingOrder_GetOrdersShortDetailByAppUser_Handler,
		},
		{
			MethodName: "GetOrdersDetailByApp",
			Handler:    _CloudHashingOrder_GetOrdersDetailByApp_Handler,
		},
		{
			MethodName: "GetOrdersDetailByGood",
			Handler:    _CloudHashingOrder_GetOrdersDetailByGood_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/cloud-hashing-order/cloud-hashing-order.proto",
}
