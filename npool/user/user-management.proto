syntax = "proto3";

package user.v1;

option go_package = "github.com/NpoolPlatform/message/npool/user";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "npool/application/application-management.proto";
import "npool/npool.proto";

// a service of managing users
service User {
    // Method Version
    rpc Version (google.protobuf.Empty) returns (npool.v1.VersionResponse){
        option (google.api.http) = {
            post: "/version"
            body: "*"
        };
    }
    /*
    User can choose signup with username, email, phone or only emial or only phone.
    */
    rpc SignUp (SignupRequest) returns (SignupResponse) {
        option (google.api.http) = {
            post: "/v1/signup"
            body: "*"
        };
    };
    /*
    Get a user's info by his(her) ID, this api can be request by user self of admin.
    */
    rpc GetUser (GetUserRequest) returns (GetUserResponse) {
        option (google.api.http) = {
            post: "/v1/get/user"
            body: "*"
        };
    };
    // Get user details in an app.
    rpc GetUserDetails (GetUserDetailsRequest) returns (GetUserDetailsResponse) {
        option (google.api.http) = {
            post: "/v1/get/user/details"
            body: "*"
        };
    };
    /*
    Get all users.
    */
    rpc GetUsers (GetUsersRequest) returns (GetUsersResponse) {
        option (google.api.http) = {
            post: "/v1/get/users"
            body: "*"
        };
    };
    /*
    Update user's basic info.
    */
    rpc UpdateUserInfo (UpdateUserInfoRequest) returns (UpdateUserInfoResponse) {
        option (google.api.http) = {
            post: "/v1/update/user"
            body: "*"
        };
    };
    /*
    Bind user's phone number.
    */
    rpc BindUserPhone (BindUserPhoneRequest) returns (BindUserPhoneResponse) {
        option (google.api.http) = {
            post: "/v1/bind/phone"
            body: "*"
        };
    };
    /*
    Bind user's email address.
    */
    rpc BindUserEmail (BindUserEmailRequest) returns (BindUserEmailResponse) {
        option (google.api.http) = {
            post: "/v1/bind/email"
            body: "*"
        };
    };
    // update user email.
    rpc UpdateUserEmail (UpdateUserEmailRequest) returns (UpdateUserEmailResponse) {
        option (google.api.http) = {
            post: "/v1/update/user/email"
            body: "*"
        };
    };
    // update user phone.
    rpc UpdateUserPhone (UpdateUserPhoneRequest) returns (UpdateUserPhoneResponse) {
        option (google.api.http) = {
            post: "/v1/update/user/phone"
            body: "*"
        };
    };
    /*
    Link to a third-party oauth. save the UserID from third-party into mysql.
    */
    rpc BindThirdParty (BindThirdPartyRequest) returns (BindThirdPartyResponse) {
        option (google.api.http) = {
            post: "/v1/bind/thirdparty"
            body: "*"
        };
    };
    /*
    Unlink a third-party oauth. Delete the UserID we saved from mysql.
    */
    rpc UnbindThirdParty (UnbindThirdPartyRequest) returns (UnbindThirdPartyResponse) {
        option (google.api.http) = {
            post: "/v1/unbind/thirdparty"
            body: "*"
        };
    };
    /*
    Change user's password. Before change users password, system need the user to do an authentication.
    */
    rpc ChangeUserPassword (ChangeUserPasswordRequest) returns (ChangeUserPasswordResponse) {
        option (google.api.http) = {
            post: "/v1/change/password"
            body: "*"
        };
    };
    /*
    Forget password.
    */
    rpc ForgetPassword (ForgetPasswordRequest) returns (ForgetPasswordResponse) {
        option (google.api.http) = {
            post: "/v1/forget/password"
            body: "*"
        };
    };
    // set password.
    rpc SetPassword (SetPasswordRequest) returns (SetPasswordResponse) {
        option (google.api.http) = {
            post: "/v1/set/password"
            body: "*"
        };
    };
    /*
    Add user.
    */
    rpc AddUser (AddUserRequest) returns (AddUserResponse) {
        option (google.api.http) = {
            post: "/v1/add/user"
            body: "*"
        };
    };
    /*
    Delete users.
    */
    rpc DeleteUser (DeleteUserRequest) returns (DeleteUserResponse) {
        option (google.api.http) = {
            post: "/v1/delete/users"
            body: "*"
        };
    };
    /*
    Frozen user.
    */
    rpc FrozenUser (FrozenUserRequest) returns (FrozenUserResponse) {
        option (google.api.http) = {
            post: "/v1/frozen/user"
            body: "*"
        };
    };
    /*
    Unfrozen user.
    */
    rpc UnfrozenUser (UnfrozenUserRequest) returns (UnfrozenUserResponse) {
        option (google.api.http) = {
            post: "/v1/unfrozen/user"
            body: "*"
        };
    };
    // query user is frozen or not
    rpc QueryUserFrozen (QueryUserFrozenRequest) returns (QueryUserFrozenResponse) {
        option (google.api.http) = {
            post: "/v1/query/user/frozen"
            body: "*"
        };
    };
    /*
    Get frozen user list.
    */
    rpc GetFrozenUsers (GetFrozenUsersRequest) returns (GetFrozenUsersResponse) {
        option (google.api.http) = {
            post: "/v1/get/frozen/user"
            body: "*"
        };
    };
    /*
    Get user provIDers info.
    */
    rpc GetUserProviders (GetUserProvidersRequest) returns (GetUserProvidersResponse) {
        option (google.api.http) = {
            post: "/v1/get/user/providers"
            body: "*"
        };
    };
    // query user exist in database.
    rpc QueryUserExist (QueryUserExistRequest) returns (QueryUserExistResponse) {
        option (google.api.http) = {
            post: "/v1/query/user/exist"
            body: "*"
        };
    };
    // query user by provIDer ID and his ID in the provIDer
    rpc QueryUserByUserProviderID (QueryUserByUserProviderIDRequest) returns (QueryUserByUserProviderIDResponse) {
        option (google.api.http) = {
            post: "/v1/query/user/by/userproviderid"
            body: "*"
        };
    };
}

// request body and response
message UserBasicInfo {
    string UserID = 10;
    string Username = 20;
    string Password = 30;
    string Avatar = 40;
    uint32 Age = 50;
    string Gender = 60;
    string Region = 70;
    string Birthday = 80;
    string Country = 90;
    string Province = 100;
    string City = 110;
    string PhoneNumber = 120;
    string EmailAddress = 130;
    uint32 CreateAt = 140;
    uint32 UpdateAt = 150;
    string SignupMethod = 160;
    string Career = 170;
    string DisplayName = 180;
    string FirstName = 190;
    string LastName = 200;
    string StreetAddress1 = 210;
    string StreetAddress2 = 220;
    string Compony = 230;
    string PostalCode = 240;
}

message SignupRequest {
    string AppID = 10;
    // optional
    string Username = 20;
    string Password = 30;
    // optional
    string EmailAddress = 40;
    // optional
    string PhoneNumber = 50;
    string Code = 60;
}

message SignupResponse {
    UserBasicInfo Info = 10;
}

message GetUserRequest {
    // UserID is who is queried.
    string AppID = 10;
    string UserID = 20;
}

message GetUserResponse {
    UserBasicInfo Info = 10;
}

message GetUsersRequest {
    string AppID = 10;
    npool.v1.PageInfo Info = 20;
}

message GetUsersResponse {
    repeated UserBasicInfo Infos = 10;
}

message UpdateUserInfoRequest {
    string AppID = 10;
    string UserID = 20;
    UserBasicInfo Info = 30;
}

message UpdateUserInfoResponse {
    UserBasicInfo Info = 10;
}

message BindUserPhoneRequest {
    string AppID = 10;
    string UserID = 20;
    string PhoneNumber = 30;
    string Code = 40;
}

message BindUserPhoneResponse {
    string Info = 10;
}

message BindUserEmailRequest {
    string AppID = 10;
    string UserID = 20;
    string EmailAddress = 30;
    string Code = 40;
}

message BindUserEmailResponse {
    string Info = 10;
}

message UserProvider {
    string ID = 10;
    string UserID = 20;
    string ProviderID = 30;
    string ProviderUserID = 40;
    string UserProviderInfo = 50;
    uint32 CreateAt = 60;
    uint32 UpdateAt = 70;
}

message BindThirdPartyRequest {
    string AppID = 10;
    string UserID = 20;
    // third party(provIDer)'s ID
    string ProviderID = 30;
    // UserID in third party(provIDer)
    string ProviderUserID = 40;
    string UserProviderInfo = 50;
}

message BindThirdPartyResponse {
    UserProvider Info = 10;
}

message UnbindThirdPartyRequest {
    string AppID = 10;
    string UserID = 20;
    string ProviderID = 30;
}

message UnbindThirdPartyResponse {
    UserProvider Info = 10;
}

message ChangeUserPasswordRequest {
    string AppID = 10;
    string UserID = 20;
    string VerifyParam = 30;
    // verify types are emial, phone and google.
    string VerifyType = 40;
    string OldPassword = 50;
    string Password = 60;
    string Code = 70;
}

message ChangeUserPasswordResponse {
    string Info = 10;
}

message CertificateKycRequest {
    string AppID = 10;
    string UserID = 20;
    string FirstName = 30;
    string LastName = 40;
    string FrontCardImg = 50;
    string BackCardImg = 60;
    string UserCardImg = 70;
    string CardType = 80;
    string CardID = 90;
    string Region = 100;
}

message CertificateKycResponse {
    string Info = 10;
}

message GetGaQRCodeRequest {
    string AppID = 10;
    string UserID = 20;
}

message GetGaQRCodeResponse {
    string Info = 10;
}

message ForgetPasswordRequest {
    string AppID = 10;
    string VerifyParam = 20;
    // verify types are emial, phone and google.
    string VerifyType = 30;
    string Password = 40;
    string Code = 50;
}

message ForgetPasswordResponse {
    string Info = 10;
}

message DeleteUserRequest {
    string AppID = 10;
    // an array of UserID who are being deleted.
    repeated string DeleteUserIDs = 20;
}

message DeleteUserResponse {
    string Info = 10;
}

message AddUserRequest {
    string AppID = 10;
    UserBasicInfo UserInfo = 20;
}

message AddUserResponse {
    UserBasicInfo Info = 10;
}

message FrozenUser {
    string ID = 10;
    string UserID = 20;
    string FrozenBy = 30;
    string FrozenCause = 40;
    uint32 StartAt = 50;
    uint32 EndAt = 60;
    string Status = 70;
    string UnfrozenBy = 80;
}

message FrozenUserRequest {
    string AppID = 10;
    string UserID = 20;
    string FrozenBy = 30;
    string FrozenCause =40;
}

message FrozenUserResponse {
    FrozenUser Info = 10;
}

message QueryUserFrozenRequest {
    string AppID = 10;
    string UserID = 20;
}

message QueryUserFrozenResponse {
    FrozenUser Info = 10;
}

message UnfrozenUserRequest {
    string AppID = 10;
    string ID = 20;
    string UserID = 30;
    string UnfrozenBy = 40;
}

message UnfrozenUserResponse {
    FrozenUser Info = 10;
}

message GetFrozenUsersRequest {
    string AppID = 10;
    npool.v1.PageInfo Info = 20;
}

message GetFrozenUsersResponse {
    repeated FrozenUser Infos = 10;
}

message GetUserProvidersRequest {
    string AppID = 10;
    string UserID = 20;
}

message GetUserProvidersResponse {
    repeated UserProvider Infos = 10;
}

message QueryUserExistRequest {
    string AppID = 10;
    string Username = 20;
    string Password = 30;
}

message QueryUserExistResponse {
    UserBasicInfo Info = 10;
}

message QueryProviderUserInfo {
    UserProvider UserProviderInfo = 10;
    UserBasicInfo UserBasicInfo = 20;
}

message QueryUserByUserProviderIDRequest {
    string AppID = 10;
    string ProviderID = 20;
    string ProviderUserID = 30;
}

message QueryUserByUserProviderIDResponse {
    QueryProviderUserInfo Info = 10;
}

message SetPasswordRequest {
    string AppID = 10;
    string Username = 20;
    string Password = 30;
}

message SetPasswordResponse {
    string Info = 10;
}

message GetUserDetailsRequest {
    string AppID = 10;
    string UserID = 20;
}

message UserDetails {
    UserBasicInfo UserBasicInfo = 10;
    application.management.v1.ApplicationUserDetail UserAppInfo = 20;
}

message GetUserDetailsResponse {
    UserDetails Info = 10;
}

message UpdateUserEmailRequest {
    string AppID = 10;
    string UserID = 20;
    string OldEmail = 30;
    string OldCode = 40;
    string NewEmail = 50;
    string NewCode = 60;
}

message UpdateUserEmailResponse {
    string Info = 10;
}

message UpdateUserPhoneRequest {
    string AppID = 10;
    string UserID = 20;
    string OldPhone = 30;
    string OldCode = 40;
    string NewPhone = 50;
    string NewCode = 60;
}

message UpdateUserPhoneResponse {
    string Info = 10;
}
