// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/review-service/review-service.proto

package review_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ReviewService_Version_FullMethodName                           = "/review.service.v1.ReviewService/Version"
	ReviewService_CreateReview_FullMethodName                      = "/review.service.v1.ReviewService/CreateReview"
	ReviewService_GetReview_FullMethodName                         = "/review.service.v1.ReviewService/GetReview"
	ReviewService_UpdateReview_FullMethodName                      = "/review.service.v1.ReviewService/UpdateReview"
	ReviewService_GetReviewsByDomain_FullMethodName                = "/review.service.v1.ReviewService/GetReviewsByDomain"
	ReviewService_GetReviewsByAppDomain_FullMethodName             = "/review.service.v1.ReviewService/GetReviewsByAppDomain"
	ReviewService_GetReviewsByAppDomainObjectType_FullMethodName   = "/review.service.v1.ReviewService/GetReviewsByAppDomainObjectType"
	ReviewService_GetReviewsByAppDomainObjectTypeID_FullMethodName = "/review.service.v1.ReviewService/GetReviewsByAppDomainObjectTypeID"
	ReviewService_SubmitReview_FullMethodName                      = "/review.service.v1.ReviewService/SubmitReview"
	ReviewService_SubmitReviewResult_FullMethodName                = "/review.service.v1.ReviewService/SubmitReviewResult"
	ReviewService_CreateReviewRule_FullMethodName                  = "/review.service.v1.ReviewService/CreateReviewRule"
	ReviewService_UpdateReviewRule_FullMethodName                  = "/review.service.v1.ReviewService/UpdateReviewRule"
	ReviewService_GetReviewRule_FullMethodName                     = "/review.service.v1.ReviewService/GetReviewRule"
	ReviewService_GetReviewRulesByDomain_FullMethodName            = "/review.service.v1.ReviewService/GetReviewRulesByDomain"
	ReviewService_GetReviewRuleByDomainObjectType_FullMethodName   = "/review.service.v1.ReviewService/GetReviewRuleByDomainObjectType"
)

// ReviewServiceClient is the client API for ReviewService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReviewServiceClient interface {
	// Method Version
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionResponse, error)
	CreateReview(ctx context.Context, in *CreateReviewRequest, opts ...grpc.CallOption) (*CreateReviewResponse, error)
	GetReview(ctx context.Context, in *GetReviewRequest, opts ...grpc.CallOption) (*GetReviewResponse, error)
	UpdateReview(ctx context.Context, in *UpdateReviewRequest, opts ...grpc.CallOption) (*UpdateReviewResponse, error)
	GetReviewsByDomain(ctx context.Context, in *GetReviewsByDomainRequest, opts ...grpc.CallOption) (*GetReviewsByDomainResponse, error)
	GetReviewsByAppDomain(ctx context.Context, in *GetReviewsByAppDomainRequest, opts ...grpc.CallOption) (*GetReviewsByAppDomainResponse, error)
	GetReviewsByAppDomainObjectType(ctx context.Context, in *GetReviewsByAppDomainObjectTypeRequest, opts ...grpc.CallOption) (*GetReviewsByAppDomainObjectTypeResponse, error)
	GetReviewsByAppDomainObjectTypeID(ctx context.Context, in *GetReviewsByAppDomainObjectTypeIDRequest, opts ...grpc.CallOption) (*GetReviewsByAppDomainObjectTypeIDResponse, error)
	SubmitReview(ctx context.Context, in *SubmitReviewRequest, opts ...grpc.CallOption) (*SubmitReviewResponse, error)
	SubmitReviewResult(ctx context.Context, in *SubmitReviewResultRequest, opts ...grpc.CallOption) (*SubmitReviewResultResponse, error)
	CreateReviewRule(ctx context.Context, in *CreateReviewRuleRequest, opts ...grpc.CallOption) (*CreateReviewRuleResponse, error)
	UpdateReviewRule(ctx context.Context, in *UpdateReviewRuleRequest, opts ...grpc.CallOption) (*UpdateReviewRuleResponse, error)
	GetReviewRule(ctx context.Context, in *GetReviewRuleRequest, opts ...grpc.CallOption) (*GetReviewRuleResponse, error)
	GetReviewRulesByDomain(ctx context.Context, in *GetReviewRulesByDomainRequest, opts ...grpc.CallOption) (*GetReviewRulesByDomainResponse, error)
	GetReviewRuleByDomainObjectType(ctx context.Context, in *GetReviewRuleByDomainObjectTypeRequest, opts ...grpc.CallOption) (*GetReviewRuleByDomainObjectTypeResponse, error)
}

type reviewServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReviewServiceClient(cc grpc.ClientConnInterface) ReviewServiceClient {
	return &reviewServiceClient{cc}
}

func (c *reviewServiceClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, ReviewService_Version_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) CreateReview(ctx context.Context, in *CreateReviewRequest, opts ...grpc.CallOption) (*CreateReviewResponse, error) {
	out := new(CreateReviewResponse)
	err := c.cc.Invoke(ctx, ReviewService_CreateReview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) GetReview(ctx context.Context, in *GetReviewRequest, opts ...grpc.CallOption) (*GetReviewResponse, error) {
	out := new(GetReviewResponse)
	err := c.cc.Invoke(ctx, ReviewService_GetReview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) UpdateReview(ctx context.Context, in *UpdateReviewRequest, opts ...grpc.CallOption) (*UpdateReviewResponse, error) {
	out := new(UpdateReviewResponse)
	err := c.cc.Invoke(ctx, ReviewService_UpdateReview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) GetReviewsByDomain(ctx context.Context, in *GetReviewsByDomainRequest, opts ...grpc.CallOption) (*GetReviewsByDomainResponse, error) {
	out := new(GetReviewsByDomainResponse)
	err := c.cc.Invoke(ctx, ReviewService_GetReviewsByDomain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) GetReviewsByAppDomain(ctx context.Context, in *GetReviewsByAppDomainRequest, opts ...grpc.CallOption) (*GetReviewsByAppDomainResponse, error) {
	out := new(GetReviewsByAppDomainResponse)
	err := c.cc.Invoke(ctx, ReviewService_GetReviewsByAppDomain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) GetReviewsByAppDomainObjectType(ctx context.Context, in *GetReviewsByAppDomainObjectTypeRequest, opts ...grpc.CallOption) (*GetReviewsByAppDomainObjectTypeResponse, error) {
	out := new(GetReviewsByAppDomainObjectTypeResponse)
	err := c.cc.Invoke(ctx, ReviewService_GetReviewsByAppDomainObjectType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) GetReviewsByAppDomainObjectTypeID(ctx context.Context, in *GetReviewsByAppDomainObjectTypeIDRequest, opts ...grpc.CallOption) (*GetReviewsByAppDomainObjectTypeIDResponse, error) {
	out := new(GetReviewsByAppDomainObjectTypeIDResponse)
	err := c.cc.Invoke(ctx, ReviewService_GetReviewsByAppDomainObjectTypeID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) SubmitReview(ctx context.Context, in *SubmitReviewRequest, opts ...grpc.CallOption) (*SubmitReviewResponse, error) {
	out := new(SubmitReviewResponse)
	err := c.cc.Invoke(ctx, ReviewService_SubmitReview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) SubmitReviewResult(ctx context.Context, in *SubmitReviewResultRequest, opts ...grpc.CallOption) (*SubmitReviewResultResponse, error) {
	out := new(SubmitReviewResultResponse)
	err := c.cc.Invoke(ctx, ReviewService_SubmitReviewResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) CreateReviewRule(ctx context.Context, in *CreateReviewRuleRequest, opts ...grpc.CallOption) (*CreateReviewRuleResponse, error) {
	out := new(CreateReviewRuleResponse)
	err := c.cc.Invoke(ctx, ReviewService_CreateReviewRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) UpdateReviewRule(ctx context.Context, in *UpdateReviewRuleRequest, opts ...grpc.CallOption) (*UpdateReviewRuleResponse, error) {
	out := new(UpdateReviewRuleResponse)
	err := c.cc.Invoke(ctx, ReviewService_UpdateReviewRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) GetReviewRule(ctx context.Context, in *GetReviewRuleRequest, opts ...grpc.CallOption) (*GetReviewRuleResponse, error) {
	out := new(GetReviewRuleResponse)
	err := c.cc.Invoke(ctx, ReviewService_GetReviewRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) GetReviewRulesByDomain(ctx context.Context, in *GetReviewRulesByDomainRequest, opts ...grpc.CallOption) (*GetReviewRulesByDomainResponse, error) {
	out := new(GetReviewRulesByDomainResponse)
	err := c.cc.Invoke(ctx, ReviewService_GetReviewRulesByDomain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewServiceClient) GetReviewRuleByDomainObjectType(ctx context.Context, in *GetReviewRuleByDomainObjectTypeRequest, opts ...grpc.CallOption) (*GetReviewRuleByDomainObjectTypeResponse, error) {
	out := new(GetReviewRuleByDomainObjectTypeResponse)
	err := c.cc.Invoke(ctx, ReviewService_GetReviewRuleByDomainObjectType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReviewServiceServer is the server API for ReviewService service.
// All implementations must embed UnimplementedReviewServiceServer
// for forward compatibility
type ReviewServiceServer interface {
	// Method Version
	Version(context.Context, *emptypb.Empty) (*VersionResponse, error)
	CreateReview(context.Context, *CreateReviewRequest) (*CreateReviewResponse, error)
	GetReview(context.Context, *GetReviewRequest) (*GetReviewResponse, error)
	UpdateReview(context.Context, *UpdateReviewRequest) (*UpdateReviewResponse, error)
	GetReviewsByDomain(context.Context, *GetReviewsByDomainRequest) (*GetReviewsByDomainResponse, error)
	GetReviewsByAppDomain(context.Context, *GetReviewsByAppDomainRequest) (*GetReviewsByAppDomainResponse, error)
	GetReviewsByAppDomainObjectType(context.Context, *GetReviewsByAppDomainObjectTypeRequest) (*GetReviewsByAppDomainObjectTypeResponse, error)
	GetReviewsByAppDomainObjectTypeID(context.Context, *GetReviewsByAppDomainObjectTypeIDRequest) (*GetReviewsByAppDomainObjectTypeIDResponse, error)
	SubmitReview(context.Context, *SubmitReviewRequest) (*SubmitReviewResponse, error)
	SubmitReviewResult(context.Context, *SubmitReviewResultRequest) (*SubmitReviewResultResponse, error)
	CreateReviewRule(context.Context, *CreateReviewRuleRequest) (*CreateReviewRuleResponse, error)
	UpdateReviewRule(context.Context, *UpdateReviewRuleRequest) (*UpdateReviewRuleResponse, error)
	GetReviewRule(context.Context, *GetReviewRuleRequest) (*GetReviewRuleResponse, error)
	GetReviewRulesByDomain(context.Context, *GetReviewRulesByDomainRequest) (*GetReviewRulesByDomainResponse, error)
	GetReviewRuleByDomainObjectType(context.Context, *GetReviewRuleByDomainObjectTypeRequest) (*GetReviewRuleByDomainObjectTypeResponse, error)
	mustEmbedUnimplementedReviewServiceServer()
}

// UnimplementedReviewServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReviewServiceServer struct {
}

func (UnimplementedReviewServiceServer) Version(context.Context, *emptypb.Empty) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedReviewServiceServer) CreateReview(context.Context, *CreateReviewRequest) (*CreateReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReview not implemented")
}
func (UnimplementedReviewServiceServer) GetReview(context.Context, *GetReviewRequest) (*GetReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReview not implemented")
}
func (UnimplementedReviewServiceServer) UpdateReview(context.Context, *UpdateReviewRequest) (*UpdateReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReview not implemented")
}
func (UnimplementedReviewServiceServer) GetReviewsByDomain(context.Context, *GetReviewsByDomainRequest) (*GetReviewsByDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReviewsByDomain not implemented")
}
func (UnimplementedReviewServiceServer) GetReviewsByAppDomain(context.Context, *GetReviewsByAppDomainRequest) (*GetReviewsByAppDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReviewsByAppDomain not implemented")
}
func (UnimplementedReviewServiceServer) GetReviewsByAppDomainObjectType(context.Context, *GetReviewsByAppDomainObjectTypeRequest) (*GetReviewsByAppDomainObjectTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReviewsByAppDomainObjectType not implemented")
}
func (UnimplementedReviewServiceServer) GetReviewsByAppDomainObjectTypeID(context.Context, *GetReviewsByAppDomainObjectTypeIDRequest) (*GetReviewsByAppDomainObjectTypeIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReviewsByAppDomainObjectTypeID not implemented")
}
func (UnimplementedReviewServiceServer) SubmitReview(context.Context, *SubmitReviewRequest) (*SubmitReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitReview not implemented")
}
func (UnimplementedReviewServiceServer) SubmitReviewResult(context.Context, *SubmitReviewResultRequest) (*SubmitReviewResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitReviewResult not implemented")
}
func (UnimplementedReviewServiceServer) CreateReviewRule(context.Context, *CreateReviewRuleRequest) (*CreateReviewRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReviewRule not implemented")
}
func (UnimplementedReviewServiceServer) UpdateReviewRule(context.Context, *UpdateReviewRuleRequest) (*UpdateReviewRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReviewRule not implemented")
}
func (UnimplementedReviewServiceServer) GetReviewRule(context.Context, *GetReviewRuleRequest) (*GetReviewRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReviewRule not implemented")
}
func (UnimplementedReviewServiceServer) GetReviewRulesByDomain(context.Context, *GetReviewRulesByDomainRequest) (*GetReviewRulesByDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReviewRulesByDomain not implemented")
}
func (UnimplementedReviewServiceServer) GetReviewRuleByDomainObjectType(context.Context, *GetReviewRuleByDomainObjectTypeRequest) (*GetReviewRuleByDomainObjectTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReviewRuleByDomainObjectType not implemented")
}
func (UnimplementedReviewServiceServer) mustEmbedUnimplementedReviewServiceServer() {}

// UnsafeReviewServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReviewServiceServer will
// result in compilation errors.
type UnsafeReviewServiceServer interface {
	mustEmbedUnimplementedReviewServiceServer()
}

func RegisterReviewServiceServer(s grpc.ServiceRegistrar, srv ReviewServiceServer) {
	s.RegisterService(&ReviewService_ServiceDesc, srv)
}

func _ReviewService_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReviewService_Version_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_CreateReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).CreateReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReviewService_CreateReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).CreateReview(ctx, req.(*CreateReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_GetReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).GetReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReviewService_GetReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).GetReview(ctx, req.(*GetReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_UpdateReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).UpdateReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReviewService_UpdateReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).UpdateReview(ctx, req.(*UpdateReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_GetReviewsByDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReviewsByDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).GetReviewsByDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReviewService_GetReviewsByDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).GetReviewsByDomain(ctx, req.(*GetReviewsByDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_GetReviewsByAppDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReviewsByAppDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).GetReviewsByAppDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReviewService_GetReviewsByAppDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).GetReviewsByAppDomain(ctx, req.(*GetReviewsByAppDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_GetReviewsByAppDomainObjectType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReviewsByAppDomainObjectTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).GetReviewsByAppDomainObjectType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReviewService_GetReviewsByAppDomainObjectType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).GetReviewsByAppDomainObjectType(ctx, req.(*GetReviewsByAppDomainObjectTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_GetReviewsByAppDomainObjectTypeID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReviewsByAppDomainObjectTypeIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).GetReviewsByAppDomainObjectTypeID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReviewService_GetReviewsByAppDomainObjectTypeID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).GetReviewsByAppDomainObjectTypeID(ctx, req.(*GetReviewsByAppDomainObjectTypeIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_SubmitReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).SubmitReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReviewService_SubmitReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).SubmitReview(ctx, req.(*SubmitReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_SubmitReviewResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitReviewResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).SubmitReviewResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReviewService_SubmitReviewResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).SubmitReviewResult(ctx, req.(*SubmitReviewResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_CreateReviewRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReviewRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).CreateReviewRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReviewService_CreateReviewRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).CreateReviewRule(ctx, req.(*CreateReviewRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_UpdateReviewRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReviewRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).UpdateReviewRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReviewService_UpdateReviewRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).UpdateReviewRule(ctx, req.(*UpdateReviewRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_GetReviewRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReviewRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).GetReviewRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReviewService_GetReviewRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).GetReviewRule(ctx, req.(*GetReviewRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_GetReviewRulesByDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReviewRulesByDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).GetReviewRulesByDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReviewService_GetReviewRulesByDomain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).GetReviewRulesByDomain(ctx, req.(*GetReviewRulesByDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReviewService_GetReviewRuleByDomainObjectType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReviewRuleByDomainObjectTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServiceServer).GetReviewRuleByDomainObjectType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReviewService_GetReviewRuleByDomainObjectType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServiceServer).GetReviewRuleByDomainObjectType(ctx, req.(*GetReviewRuleByDomainObjectTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReviewService_ServiceDesc is the grpc.ServiceDesc for ReviewService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReviewService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "review.service.v1.ReviewService",
	HandlerType: (*ReviewServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _ReviewService_Version_Handler,
		},
		{
			MethodName: "CreateReview",
			Handler:    _ReviewService_CreateReview_Handler,
		},
		{
			MethodName: "GetReview",
			Handler:    _ReviewService_GetReview_Handler,
		},
		{
			MethodName: "UpdateReview",
			Handler:    _ReviewService_UpdateReview_Handler,
		},
		{
			MethodName: "GetReviewsByDomain",
			Handler:    _ReviewService_GetReviewsByDomain_Handler,
		},
		{
			MethodName: "GetReviewsByAppDomain",
			Handler:    _ReviewService_GetReviewsByAppDomain_Handler,
		},
		{
			MethodName: "GetReviewsByAppDomainObjectType",
			Handler:    _ReviewService_GetReviewsByAppDomainObjectType_Handler,
		},
		{
			MethodName: "GetReviewsByAppDomainObjectTypeID",
			Handler:    _ReviewService_GetReviewsByAppDomainObjectTypeID_Handler,
		},
		{
			MethodName: "SubmitReview",
			Handler:    _ReviewService_SubmitReview_Handler,
		},
		{
			MethodName: "SubmitReviewResult",
			Handler:    _ReviewService_SubmitReviewResult_Handler,
		},
		{
			MethodName: "CreateReviewRule",
			Handler:    _ReviewService_CreateReviewRule_Handler,
		},
		{
			MethodName: "UpdateReviewRule",
			Handler:    _ReviewService_UpdateReviewRule_Handler,
		},
		{
			MethodName: "GetReviewRule",
			Handler:    _ReviewService_GetReviewRule_Handler,
		},
		{
			MethodName: "GetReviewRulesByDomain",
			Handler:    _ReviewService_GetReviewRulesByDomain_Handler,
		},
		{
			MethodName: "GetReviewRuleByDomainObjectType",
			Handler:    _ReviewService_GetReviewRuleByDomainObjectType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/review-service/review-service.proto",
}
