// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/project-info-manager/project-info-manager.proto

package project_info_manager

import (
	context "context"
	npool "github.com/NpoolPlatform/message/npool"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProjectInfoManagerClient is the client API for ProjectInfoManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectInfoManagerClient interface {
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*npool.VersionResponse, error)
	CreateCoinDescription(ctx context.Context, in *CreateCoinDescriptionRequest, opts ...grpc.CallOption) (*CreateCoinDescriptionResponse, error)
	CreateCoinDescriptions(ctx context.Context, in *CreateCoinDescriptionsRequest, opts ...grpc.CallOption) (*CreateCoinDescriptionsResponse, error)
	UpdateCoinDescription(ctx context.Context, in *UpdateCoinDescriptionRequest, opts ...grpc.CallOption) (*UpdateCoinDescriptionResponse, error)
	UpdateAppCoinDescription(ctx context.Context, in *UpdateAppCoinDescriptionRequest, opts ...grpc.CallOption) (*UpdateAppCoinDescriptionResponse, error)
	GetCoinDescription(ctx context.Context, in *GetCoinDescriptionRequest, opts ...grpc.CallOption) (*GetCoinDescriptionResponse, error)
	GetAppCoinDescription(ctx context.Context, in *GetAppCoinDescriptionRequest, opts ...grpc.CallOption) (*GetAppCoinDescriptionResponse, error)
	GetCoinDescriptions(ctx context.Context, in *GetCoinDescriptionsRequest, opts ...grpc.CallOption) (*GetCoinDescriptionsResponse, error)
	GetAppCoinDescriptions(ctx context.Context, in *GetAppCoinDescriptionsRequest, opts ...grpc.CallOption) (*GetAppCoinDescriptionsResponse, error)
	CountCoinDescriptions(ctx context.Context, in *CountCoinDescriptionsRequest, opts ...grpc.CallOption) (*CountCoinDescriptionsResponse, error)
	CountAppCoinDescriptions(ctx context.Context, in *CountAppCoinDescriptionsRequest, opts ...grpc.CallOption) (*CountAppCoinDescriptionsResponse, error)
	DeleteAppCoinDescription(ctx context.Context, in *DeleteAppCoinDescriptionRequest, opts ...grpc.CallOption) (*DeleteAppCoinDescriptionResponse, error)
}

type projectInfoManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectInfoManagerClient(cc grpc.ClientConnInterface) ProjectInfoManagerClient {
	return &projectInfoManagerClient{cc}
}

func (c *projectInfoManagerClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*npool.VersionResponse, error) {
	out := new(npool.VersionResponse)
	err := c.cc.Invoke(ctx, "/project.info.manager.v1.ProjectInfoManager/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) CreateCoinDescription(ctx context.Context, in *CreateCoinDescriptionRequest, opts ...grpc.CallOption) (*CreateCoinDescriptionResponse, error) {
	out := new(CreateCoinDescriptionResponse)
	err := c.cc.Invoke(ctx, "/project.info.manager.v1.ProjectInfoManager/CreateCoinDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) CreateCoinDescriptions(ctx context.Context, in *CreateCoinDescriptionsRequest, opts ...grpc.CallOption) (*CreateCoinDescriptionsResponse, error) {
	out := new(CreateCoinDescriptionsResponse)
	err := c.cc.Invoke(ctx, "/project.info.manager.v1.ProjectInfoManager/CreateCoinDescriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) UpdateCoinDescription(ctx context.Context, in *UpdateCoinDescriptionRequest, opts ...grpc.CallOption) (*UpdateCoinDescriptionResponse, error) {
	out := new(UpdateCoinDescriptionResponse)
	err := c.cc.Invoke(ctx, "/project.info.manager.v1.ProjectInfoManager/UpdateCoinDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) UpdateAppCoinDescription(ctx context.Context, in *UpdateAppCoinDescriptionRequest, opts ...grpc.CallOption) (*UpdateAppCoinDescriptionResponse, error) {
	out := new(UpdateAppCoinDescriptionResponse)
	err := c.cc.Invoke(ctx, "/project.info.manager.v1.ProjectInfoManager/UpdateAppCoinDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) GetCoinDescription(ctx context.Context, in *GetCoinDescriptionRequest, opts ...grpc.CallOption) (*GetCoinDescriptionResponse, error) {
	out := new(GetCoinDescriptionResponse)
	err := c.cc.Invoke(ctx, "/project.info.manager.v1.ProjectInfoManager/GetCoinDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) GetAppCoinDescription(ctx context.Context, in *GetAppCoinDescriptionRequest, opts ...grpc.CallOption) (*GetAppCoinDescriptionResponse, error) {
	out := new(GetAppCoinDescriptionResponse)
	err := c.cc.Invoke(ctx, "/project.info.manager.v1.ProjectInfoManager/GetAppCoinDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) GetCoinDescriptions(ctx context.Context, in *GetCoinDescriptionsRequest, opts ...grpc.CallOption) (*GetCoinDescriptionsResponse, error) {
	out := new(GetCoinDescriptionsResponse)
	err := c.cc.Invoke(ctx, "/project.info.manager.v1.ProjectInfoManager/GetCoinDescriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) GetAppCoinDescriptions(ctx context.Context, in *GetAppCoinDescriptionsRequest, opts ...grpc.CallOption) (*GetAppCoinDescriptionsResponse, error) {
	out := new(GetAppCoinDescriptionsResponse)
	err := c.cc.Invoke(ctx, "/project.info.manager.v1.ProjectInfoManager/GetAppCoinDescriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) CountCoinDescriptions(ctx context.Context, in *CountCoinDescriptionsRequest, opts ...grpc.CallOption) (*CountCoinDescriptionsResponse, error) {
	out := new(CountCoinDescriptionsResponse)
	err := c.cc.Invoke(ctx, "/project.info.manager.v1.ProjectInfoManager/CountCoinDescriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) CountAppCoinDescriptions(ctx context.Context, in *CountAppCoinDescriptionsRequest, opts ...grpc.CallOption) (*CountAppCoinDescriptionsResponse, error) {
	out := new(CountAppCoinDescriptionsResponse)
	err := c.cc.Invoke(ctx, "/project.info.manager.v1.ProjectInfoManager/CountAppCoinDescriptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectInfoManagerClient) DeleteAppCoinDescription(ctx context.Context, in *DeleteAppCoinDescriptionRequest, opts ...grpc.CallOption) (*DeleteAppCoinDescriptionResponse, error) {
	out := new(DeleteAppCoinDescriptionResponse)
	err := c.cc.Invoke(ctx, "/project.info.manager.v1.ProjectInfoManager/DeleteAppCoinDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectInfoManagerServer is the server API for ProjectInfoManager service.
// All implementations must embed UnimplementedProjectInfoManagerServer
// for forward compatibility
type ProjectInfoManagerServer interface {
	Version(context.Context, *emptypb.Empty) (*npool.VersionResponse, error)
	CreateCoinDescription(context.Context, *CreateCoinDescriptionRequest) (*CreateCoinDescriptionResponse, error)
	CreateCoinDescriptions(context.Context, *CreateCoinDescriptionsRequest) (*CreateCoinDescriptionsResponse, error)
	UpdateCoinDescription(context.Context, *UpdateCoinDescriptionRequest) (*UpdateCoinDescriptionResponse, error)
	UpdateAppCoinDescription(context.Context, *UpdateAppCoinDescriptionRequest) (*UpdateAppCoinDescriptionResponse, error)
	GetCoinDescription(context.Context, *GetCoinDescriptionRequest) (*GetCoinDescriptionResponse, error)
	GetAppCoinDescription(context.Context, *GetAppCoinDescriptionRequest) (*GetAppCoinDescriptionResponse, error)
	GetCoinDescriptions(context.Context, *GetCoinDescriptionsRequest) (*GetCoinDescriptionsResponse, error)
	GetAppCoinDescriptions(context.Context, *GetAppCoinDescriptionsRequest) (*GetAppCoinDescriptionsResponse, error)
	CountCoinDescriptions(context.Context, *CountCoinDescriptionsRequest) (*CountCoinDescriptionsResponse, error)
	CountAppCoinDescriptions(context.Context, *CountAppCoinDescriptionsRequest) (*CountAppCoinDescriptionsResponse, error)
	DeleteAppCoinDescription(context.Context, *DeleteAppCoinDescriptionRequest) (*DeleteAppCoinDescriptionResponse, error)
	mustEmbedUnimplementedProjectInfoManagerServer()
}

// UnimplementedProjectInfoManagerServer must be embedded to have forward compatible implementations.
type UnimplementedProjectInfoManagerServer struct {
}

func (UnimplementedProjectInfoManagerServer) Version(context.Context, *emptypb.Empty) (*npool.VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedProjectInfoManagerServer) CreateCoinDescription(context.Context, *CreateCoinDescriptionRequest) (*CreateCoinDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCoinDescription not implemented")
}
func (UnimplementedProjectInfoManagerServer) CreateCoinDescriptions(context.Context, *CreateCoinDescriptionsRequest) (*CreateCoinDescriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCoinDescriptions not implemented")
}
func (UnimplementedProjectInfoManagerServer) UpdateCoinDescription(context.Context, *UpdateCoinDescriptionRequest) (*UpdateCoinDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCoinDescription not implemented")
}
func (UnimplementedProjectInfoManagerServer) UpdateAppCoinDescription(context.Context, *UpdateAppCoinDescriptionRequest) (*UpdateAppCoinDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppCoinDescription not implemented")
}
func (UnimplementedProjectInfoManagerServer) GetCoinDescription(context.Context, *GetCoinDescriptionRequest) (*GetCoinDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinDescription not implemented")
}
func (UnimplementedProjectInfoManagerServer) GetAppCoinDescription(context.Context, *GetAppCoinDescriptionRequest) (*GetAppCoinDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppCoinDescription not implemented")
}
func (UnimplementedProjectInfoManagerServer) GetCoinDescriptions(context.Context, *GetCoinDescriptionsRequest) (*GetCoinDescriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCoinDescriptions not implemented")
}
func (UnimplementedProjectInfoManagerServer) GetAppCoinDescriptions(context.Context, *GetAppCoinDescriptionsRequest) (*GetAppCoinDescriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppCoinDescriptions not implemented")
}
func (UnimplementedProjectInfoManagerServer) CountCoinDescriptions(context.Context, *CountCoinDescriptionsRequest) (*CountCoinDescriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountCoinDescriptions not implemented")
}
func (UnimplementedProjectInfoManagerServer) CountAppCoinDescriptions(context.Context, *CountAppCoinDescriptionsRequest) (*CountAppCoinDescriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAppCoinDescriptions not implemented")
}
func (UnimplementedProjectInfoManagerServer) DeleteAppCoinDescription(context.Context, *DeleteAppCoinDescriptionRequest) (*DeleteAppCoinDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppCoinDescription not implemented")
}
func (UnimplementedProjectInfoManagerServer) mustEmbedUnimplementedProjectInfoManagerServer() {}

// UnsafeProjectInfoManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectInfoManagerServer will
// result in compilation errors.
type UnsafeProjectInfoManagerServer interface {
	mustEmbedUnimplementedProjectInfoManagerServer()
}

func RegisterProjectInfoManagerServer(s grpc.ServiceRegistrar, srv ProjectInfoManagerServer) {
	s.RegisterService(&ProjectInfoManager_ServiceDesc, srv)
}

func _ProjectInfoManager_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.info.manager.v1.ProjectInfoManager/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_CreateCoinDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCoinDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).CreateCoinDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.info.manager.v1.ProjectInfoManager/CreateCoinDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).CreateCoinDescription(ctx, req.(*CreateCoinDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_CreateCoinDescriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCoinDescriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).CreateCoinDescriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.info.manager.v1.ProjectInfoManager/CreateCoinDescriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).CreateCoinDescriptions(ctx, req.(*CreateCoinDescriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_UpdateCoinDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCoinDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).UpdateCoinDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.info.manager.v1.ProjectInfoManager/UpdateCoinDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).UpdateCoinDescription(ctx, req.(*UpdateCoinDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_UpdateAppCoinDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppCoinDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).UpdateAppCoinDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.info.manager.v1.ProjectInfoManager/UpdateAppCoinDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).UpdateAppCoinDescription(ctx, req.(*UpdateAppCoinDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_GetCoinDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).GetCoinDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.info.manager.v1.ProjectInfoManager/GetCoinDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).GetCoinDescription(ctx, req.(*GetCoinDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_GetAppCoinDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppCoinDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).GetAppCoinDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.info.manager.v1.ProjectInfoManager/GetAppCoinDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).GetAppCoinDescription(ctx, req.(*GetAppCoinDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_GetCoinDescriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCoinDescriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).GetCoinDescriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.info.manager.v1.ProjectInfoManager/GetCoinDescriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).GetCoinDescriptions(ctx, req.(*GetCoinDescriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_GetAppCoinDescriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppCoinDescriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).GetAppCoinDescriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.info.manager.v1.ProjectInfoManager/GetAppCoinDescriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).GetAppCoinDescriptions(ctx, req.(*GetAppCoinDescriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_CountCoinDescriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountCoinDescriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).CountCoinDescriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.info.manager.v1.ProjectInfoManager/CountCoinDescriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).CountCoinDescriptions(ctx, req.(*CountCoinDescriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_CountAppCoinDescriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAppCoinDescriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).CountAppCoinDescriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.info.manager.v1.ProjectInfoManager/CountAppCoinDescriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).CountAppCoinDescriptions(ctx, req.(*CountAppCoinDescriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectInfoManager_DeleteAppCoinDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppCoinDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectInfoManagerServer).DeleteAppCoinDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.info.manager.v1.ProjectInfoManager/DeleteAppCoinDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectInfoManagerServer).DeleteAppCoinDescription(ctx, req.(*DeleteAppCoinDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectInfoManager_ServiceDesc is the grpc.ServiceDesc for ProjectInfoManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectInfoManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "project.info.manager.v1.ProjectInfoManager",
	HandlerType: (*ProjectInfoManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _ProjectInfoManager_Version_Handler,
		},
		{
			MethodName: "CreateCoinDescription",
			Handler:    _ProjectInfoManager_CreateCoinDescription_Handler,
		},
		{
			MethodName: "CreateCoinDescriptions",
			Handler:    _ProjectInfoManager_CreateCoinDescriptions_Handler,
		},
		{
			MethodName: "UpdateCoinDescription",
			Handler:    _ProjectInfoManager_UpdateCoinDescription_Handler,
		},
		{
			MethodName: "UpdateAppCoinDescription",
			Handler:    _ProjectInfoManager_UpdateAppCoinDescription_Handler,
		},
		{
			MethodName: "GetCoinDescription",
			Handler:    _ProjectInfoManager_GetCoinDescription_Handler,
		},
		{
			MethodName: "GetAppCoinDescription",
			Handler:    _ProjectInfoManager_GetAppCoinDescription_Handler,
		},
		{
			MethodName: "GetCoinDescriptions",
			Handler:    _ProjectInfoManager_GetCoinDescriptions_Handler,
		},
		{
			MethodName: "GetAppCoinDescriptions",
			Handler:    _ProjectInfoManager_GetAppCoinDescriptions_Handler,
		},
		{
			MethodName: "CountCoinDescriptions",
			Handler:    _ProjectInfoManager_CountCoinDescriptions_Handler,
		},
		{
			MethodName: "CountAppCoinDescriptions",
			Handler:    _ProjectInfoManager_CountAppCoinDescriptions_Handler,
		},
		{
			MethodName: "DeleteAppCoinDescription",
			Handler:    _ProjectInfoManager_DeleteAppCoinDescription_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/project-info-manager/project-info-manager.proto",
}
