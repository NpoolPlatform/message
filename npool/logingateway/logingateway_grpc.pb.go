// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package logingateway

import (
	context "context"
	npool "github.com/NpoolPlatform/message/npool"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LoginGatewayClient is the client API for LoginGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoginGatewayClient interface {
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*npool.VersionResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	Logined(ctx context.Context, in *LoginedRequest, opts ...grpc.CallOption) (*LoginedResponse, error)
	Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error)
	Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error)
	GetLoginHistories(ctx context.Context, in *GetLoginHistoriesRequest, opts ...grpc.CallOption) (*GetLoginHistoriesResponse, error)
}

type loginGatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewLoginGatewayClient(cc grpc.ClientConnInterface) LoginGatewayClient {
	return &loginGatewayClient{cc}
}

func (c *loginGatewayClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*npool.VersionResponse, error) {
	out := new(npool.VersionResponse)
	err := c.cc.Invoke(ctx, "/login.gateway.v1.LoginGateway/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginGatewayClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/login.gateway.v1.LoginGateway/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginGatewayClient) Logined(ctx context.Context, in *LoginedRequest, opts ...grpc.CallOption) (*LoginedResponse, error) {
	out := new(LoginedResponse)
	err := c.cc.Invoke(ctx, "/login.gateway.v1.LoginGateway/Logined", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginGatewayClient) Logout(ctx context.Context, in *LogoutRequest, opts ...grpc.CallOption) (*LogoutResponse, error) {
	out := new(LogoutResponse)
	err := c.cc.Invoke(ctx, "/login.gateway.v1.LoginGateway/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginGatewayClient) Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*RefreshResponse, error) {
	out := new(RefreshResponse)
	err := c.cc.Invoke(ctx, "/login.gateway.v1.LoginGateway/Refresh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginGatewayClient) GetLoginHistories(ctx context.Context, in *GetLoginHistoriesRequest, opts ...grpc.CallOption) (*GetLoginHistoriesResponse, error) {
	out := new(GetLoginHistoriesResponse)
	err := c.cc.Invoke(ctx, "/login.gateway.v1.LoginGateway/GetLoginHistories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoginGatewayServer is the server API for LoginGateway service.
// All implementations must embed UnimplementedLoginGatewayServer
// for forward compatibility
type LoginGatewayServer interface {
	Version(context.Context, *emptypb.Empty) (*npool.VersionResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	Logined(context.Context, *LoginedRequest) (*LoginedResponse, error)
	Logout(context.Context, *LogoutRequest) (*LogoutResponse, error)
	Refresh(context.Context, *RefreshRequest) (*RefreshResponse, error)
	GetLoginHistories(context.Context, *GetLoginHistoriesRequest) (*GetLoginHistoriesResponse, error)
	mustEmbedUnimplementedLoginGatewayServer()
}

// UnimplementedLoginGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedLoginGatewayServer struct {
}

func (UnimplementedLoginGatewayServer) Version(context.Context, *emptypb.Empty) (*npool.VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedLoginGatewayServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedLoginGatewayServer) Logined(context.Context, *LoginedRequest) (*LoginedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logined not implemented")
}
func (UnimplementedLoginGatewayServer) Logout(context.Context, *LogoutRequest) (*LogoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedLoginGatewayServer) Refresh(context.Context, *RefreshRequest) (*RefreshResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (UnimplementedLoginGatewayServer) GetLoginHistories(context.Context, *GetLoginHistoriesRequest) (*GetLoginHistoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoginHistories not implemented")
}
func (UnimplementedLoginGatewayServer) mustEmbedUnimplementedLoginGatewayServer() {}

// UnsafeLoginGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoginGatewayServer will
// result in compilation errors.
type UnsafeLoginGatewayServer interface {
	mustEmbedUnimplementedLoginGatewayServer()
}

func RegisterLoginGatewayServer(s grpc.ServiceRegistrar, srv LoginGatewayServer) {
	s.RegisterService(&LoginGateway_ServiceDesc, srv)
}

func _LoginGateway_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginGatewayServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/login.gateway.v1.LoginGateway/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginGatewayServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginGateway_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginGatewayServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/login.gateway.v1.LoginGateway/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginGatewayServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginGateway_Logined_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginGatewayServer).Logined(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/login.gateway.v1.LoginGateway/Logined",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginGatewayServer).Logined(ctx, req.(*LoginedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginGateway_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginGatewayServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/login.gateway.v1.LoginGateway/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginGatewayServer).Logout(ctx, req.(*LogoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginGateway_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginGatewayServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/login.gateway.v1.LoginGateway/Refresh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginGatewayServer).Refresh(ctx, req.(*RefreshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginGateway_GetLoginHistories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoginHistoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginGatewayServer).GetLoginHistories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/login.gateway.v1.LoginGateway/GetLoginHistories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginGatewayServer).GetLoginHistories(ctx, req.(*GetLoginHistoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LoginGateway_ServiceDesc is the grpc.ServiceDesc for LoginGateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoginGateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "login.gateway.v1.LoginGateway",
	HandlerType: (*LoginGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _LoginGateway_Version_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _LoginGateway_Login_Handler,
		},
		{
			MethodName: "Logined",
			Handler:    _LoginGateway_Logined_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _LoginGateway_Logout_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _LoginGateway_Refresh_Handler,
		},
		{
			MethodName: "GetLoginHistories",
			Handler:    _LoginGateway_GetLoginHistories_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/logingateway/logingateway.proto",
}
