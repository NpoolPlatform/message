// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/archivement/mgr/v1/detail/detail.proto

package detail

import (
	context "context"
	npool "github.com/NpoolPlatform/message/npool"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ArchivementDetailClient is the client API for ArchivementDetail service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArchivementDetailClient interface {
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*npool.VersionResponse, error)
	CreateDetail(ctx context.Context, in *CreateDetailRequest, opts ...grpc.CallOption) (*CreateDetailResponse, error)
	CreateDetails(ctx context.Context, in *CreateDetailsRequest, opts ...grpc.CallOption) (*CreateDetailsResponse, error)
	GetDetail(ctx context.Context, in *GetDetailRequest, opts ...grpc.CallOption) (*GetDetailResponse, error)
	GetDetailOnly(ctx context.Context, in *GetDetailOnlyRequest, opts ...grpc.CallOption) (*GetDetailOnlyResponse, error)
	GetDetails(ctx context.Context, in *GetDetailsRequest, opts ...grpc.CallOption) (*GetDetailsResponse, error)
	ExistDetail(ctx context.Context, in *ExistDetailRequest, opts ...grpc.CallOption) (*ExistDetailResponse, error)
	ExistDetailConds(ctx context.Context, in *ExistDetailCondsRequest, opts ...grpc.CallOption) (*ExistDetailCondsResponse, error)
	CountDetails(ctx context.Context, in *CountDetailsRequest, opts ...grpc.CallOption) (*CountDetailsResponse, error)
}

type archivementDetailClient struct {
	cc grpc.ClientConnInterface
}

func NewArchivementDetailClient(cc grpc.ClientConnInterface) ArchivementDetailClient {
	return &archivementDetailClient{cc}
}

func (c *archivementDetailClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*npool.VersionResponse, error) {
	out := new(npool.VersionResponse)
	err := c.cc.Invoke(ctx, "/archivement.manager.detail.v1.ArchivementDetail/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archivementDetailClient) CreateDetail(ctx context.Context, in *CreateDetailRequest, opts ...grpc.CallOption) (*CreateDetailResponse, error) {
	out := new(CreateDetailResponse)
	err := c.cc.Invoke(ctx, "/archivement.manager.detail.v1.ArchivementDetail/CreateDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archivementDetailClient) CreateDetails(ctx context.Context, in *CreateDetailsRequest, opts ...grpc.CallOption) (*CreateDetailsResponse, error) {
	out := new(CreateDetailsResponse)
	err := c.cc.Invoke(ctx, "/archivement.manager.detail.v1.ArchivementDetail/CreateDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archivementDetailClient) GetDetail(ctx context.Context, in *GetDetailRequest, opts ...grpc.CallOption) (*GetDetailResponse, error) {
	out := new(GetDetailResponse)
	err := c.cc.Invoke(ctx, "/archivement.manager.detail.v1.ArchivementDetail/GetDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archivementDetailClient) GetDetailOnly(ctx context.Context, in *GetDetailOnlyRequest, opts ...grpc.CallOption) (*GetDetailOnlyResponse, error) {
	out := new(GetDetailOnlyResponse)
	err := c.cc.Invoke(ctx, "/archivement.manager.detail.v1.ArchivementDetail/GetDetailOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archivementDetailClient) GetDetails(ctx context.Context, in *GetDetailsRequest, opts ...grpc.CallOption) (*GetDetailsResponse, error) {
	out := new(GetDetailsResponse)
	err := c.cc.Invoke(ctx, "/archivement.manager.detail.v1.ArchivementDetail/GetDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archivementDetailClient) ExistDetail(ctx context.Context, in *ExistDetailRequest, opts ...grpc.CallOption) (*ExistDetailResponse, error) {
	out := new(ExistDetailResponse)
	err := c.cc.Invoke(ctx, "/archivement.manager.detail.v1.ArchivementDetail/ExistDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archivementDetailClient) ExistDetailConds(ctx context.Context, in *ExistDetailCondsRequest, opts ...grpc.CallOption) (*ExistDetailCondsResponse, error) {
	out := new(ExistDetailCondsResponse)
	err := c.cc.Invoke(ctx, "/archivement.manager.detail.v1.ArchivementDetail/ExistDetailConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archivementDetailClient) CountDetails(ctx context.Context, in *CountDetailsRequest, opts ...grpc.CallOption) (*CountDetailsResponse, error) {
	out := new(CountDetailsResponse)
	err := c.cc.Invoke(ctx, "/archivement.manager.detail.v1.ArchivementDetail/CountDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArchivementDetailServer is the server API for ArchivementDetail service.
// All implementations must embed UnimplementedArchivementDetailServer
// for forward compatibility
type ArchivementDetailServer interface {
	Version(context.Context, *emptypb.Empty) (*npool.VersionResponse, error)
	CreateDetail(context.Context, *CreateDetailRequest) (*CreateDetailResponse, error)
	CreateDetails(context.Context, *CreateDetailsRequest) (*CreateDetailsResponse, error)
	GetDetail(context.Context, *GetDetailRequest) (*GetDetailResponse, error)
	GetDetailOnly(context.Context, *GetDetailOnlyRequest) (*GetDetailOnlyResponse, error)
	GetDetails(context.Context, *GetDetailsRequest) (*GetDetailsResponse, error)
	ExistDetail(context.Context, *ExistDetailRequest) (*ExistDetailResponse, error)
	ExistDetailConds(context.Context, *ExistDetailCondsRequest) (*ExistDetailCondsResponse, error)
	CountDetails(context.Context, *CountDetailsRequest) (*CountDetailsResponse, error)
	mustEmbedUnimplementedArchivementDetailServer()
}

// UnimplementedArchivementDetailServer must be embedded to have forward compatible implementations.
type UnimplementedArchivementDetailServer struct {
}

func (UnimplementedArchivementDetailServer) Version(context.Context, *emptypb.Empty) (*npool.VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedArchivementDetailServer) CreateDetail(context.Context, *CreateDetailRequest) (*CreateDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDetail not implemented")
}
func (UnimplementedArchivementDetailServer) CreateDetails(context.Context, *CreateDetailsRequest) (*CreateDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDetails not implemented")
}
func (UnimplementedArchivementDetailServer) GetDetail(context.Context, *GetDetailRequest) (*GetDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetail not implemented")
}
func (UnimplementedArchivementDetailServer) GetDetailOnly(context.Context, *GetDetailOnlyRequest) (*GetDetailOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetailOnly not implemented")
}
func (UnimplementedArchivementDetailServer) GetDetails(context.Context, *GetDetailsRequest) (*GetDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetails not implemented")
}
func (UnimplementedArchivementDetailServer) ExistDetail(context.Context, *ExistDetailRequest) (*ExistDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistDetail not implemented")
}
func (UnimplementedArchivementDetailServer) ExistDetailConds(context.Context, *ExistDetailCondsRequest) (*ExistDetailCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistDetailConds not implemented")
}
func (UnimplementedArchivementDetailServer) CountDetails(context.Context, *CountDetailsRequest) (*CountDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountDetails not implemented")
}
func (UnimplementedArchivementDetailServer) mustEmbedUnimplementedArchivementDetailServer() {}

// UnsafeArchivementDetailServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArchivementDetailServer will
// result in compilation errors.
type UnsafeArchivementDetailServer interface {
	mustEmbedUnimplementedArchivementDetailServer()
}

func RegisterArchivementDetailServer(s grpc.ServiceRegistrar, srv ArchivementDetailServer) {
	s.RegisterService(&ArchivementDetail_ServiceDesc, srv)
}

func _ArchivementDetail_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivementDetailServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archivement.manager.detail.v1.ArchivementDetail/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivementDetailServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchivementDetail_CreateDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivementDetailServer).CreateDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archivement.manager.detail.v1.ArchivementDetail/CreateDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivementDetailServer).CreateDetail(ctx, req.(*CreateDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchivementDetail_CreateDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivementDetailServer).CreateDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archivement.manager.detail.v1.ArchivementDetail/CreateDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivementDetailServer).CreateDetails(ctx, req.(*CreateDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchivementDetail_GetDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivementDetailServer).GetDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archivement.manager.detail.v1.ArchivementDetail/GetDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivementDetailServer).GetDetail(ctx, req.(*GetDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchivementDetail_GetDetailOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivementDetailServer).GetDetailOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archivement.manager.detail.v1.ArchivementDetail/GetDetailOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivementDetailServer).GetDetailOnly(ctx, req.(*GetDetailOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchivementDetail_GetDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivementDetailServer).GetDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archivement.manager.detail.v1.ArchivementDetail/GetDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivementDetailServer).GetDetails(ctx, req.(*GetDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchivementDetail_ExistDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivementDetailServer).ExistDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archivement.manager.detail.v1.ArchivementDetail/ExistDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivementDetailServer).ExistDetail(ctx, req.(*ExistDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchivementDetail_ExistDetailConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistDetailCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivementDetailServer).ExistDetailConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archivement.manager.detail.v1.ArchivementDetail/ExistDetailConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivementDetailServer).ExistDetailConds(ctx, req.(*ExistDetailCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchivementDetail_CountDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchivementDetailServer).CountDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archivement.manager.detail.v1.ArchivementDetail/CountDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchivementDetailServer).CountDetails(ctx, req.(*CountDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ArchivementDetail_ServiceDesc is the grpc.ServiceDesc for ArchivementDetail service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArchivementDetail_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "archivement.manager.detail.v1.ArchivementDetail",
	HandlerType: (*ArchivementDetailServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _ArchivementDetail_Version_Handler,
		},
		{
			MethodName: "CreateDetail",
			Handler:    _ArchivementDetail_CreateDetail_Handler,
		},
		{
			MethodName: "CreateDetails",
			Handler:    _ArchivementDetail_CreateDetails_Handler,
		},
		{
			MethodName: "GetDetail",
			Handler:    _ArchivementDetail_GetDetail_Handler,
		},
		{
			MethodName: "GetDetailOnly",
			Handler:    _ArchivementDetail_GetDetailOnly_Handler,
		},
		{
			MethodName: "GetDetails",
			Handler:    _ArchivementDetail_GetDetails_Handler,
		},
		{
			MethodName: "ExistDetail",
			Handler:    _ArchivementDetail_ExistDetail_Handler,
		},
		{
			MethodName: "ExistDetailConds",
			Handler:    _ArchivementDetail_ExistDetailConds_Handler,
		},
		{
			MethodName: "CountDetails",
			Handler:    _ArchivementDetail_CountDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/archivement/mgr/v1/detail/detail.proto",
}
