// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/archivement/mw/v1/commission/commission.proto

package commission

import (
	context "context"
	npool "github.com/NpoolPlatform/message/npool"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommissionClient is the client API for Commission service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommissionClient interface {
	// Method Version
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*npool.VersionResponse, error)
	CalculateOrderCommission(ctx context.Context, in *CalculateOrderCommissionRequest, opts ...grpc.CallOption) (*CalculateOrderCommissionResponse, error)
	CreateUserGoodCommissions(ctx context.Context, in *CreateUserGoodCommissionsRequest, opts ...grpc.CallOption) (*CreateUserGoodCommissionsResponse, error)
	CreateAppUserGoodCommissions(ctx context.Context, in *CreateAppUserGoodCommissionsRequest, opts ...grpc.CallOption) (*CreateAppUserGoodCommissionsResponse, error)
}

type commissionClient struct {
	cc grpc.ClientConnInterface
}

func NewCommissionClient(cc grpc.ClientConnInterface) CommissionClient {
	return &commissionClient{cc}
}

func (c *commissionClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*npool.VersionResponse, error) {
	out := new(npool.VersionResponse)
	err := c.cc.Invoke(ctx, "/archivement.middleware.commission.v1.Commission/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commissionClient) CalculateOrderCommission(ctx context.Context, in *CalculateOrderCommissionRequest, opts ...grpc.CallOption) (*CalculateOrderCommissionResponse, error) {
	out := new(CalculateOrderCommissionResponse)
	err := c.cc.Invoke(ctx, "/archivement.middleware.commission.v1.Commission/CalculateOrderCommission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commissionClient) CreateUserGoodCommissions(ctx context.Context, in *CreateUserGoodCommissionsRequest, opts ...grpc.CallOption) (*CreateUserGoodCommissionsResponse, error) {
	out := new(CreateUserGoodCommissionsResponse)
	err := c.cc.Invoke(ctx, "/archivement.middleware.commission.v1.Commission/CreateUserGoodCommissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commissionClient) CreateAppUserGoodCommissions(ctx context.Context, in *CreateAppUserGoodCommissionsRequest, opts ...grpc.CallOption) (*CreateAppUserGoodCommissionsResponse, error) {
	out := new(CreateAppUserGoodCommissionsResponse)
	err := c.cc.Invoke(ctx, "/archivement.middleware.commission.v1.Commission/CreateAppUserGoodCommissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommissionServer is the server API for Commission service.
// All implementations must embed UnimplementedCommissionServer
// for forward compatibility
type CommissionServer interface {
	// Method Version
	Version(context.Context, *emptypb.Empty) (*npool.VersionResponse, error)
	CalculateOrderCommission(context.Context, *CalculateOrderCommissionRequest) (*CalculateOrderCommissionResponse, error)
	CreateUserGoodCommissions(context.Context, *CreateUserGoodCommissionsRequest) (*CreateUserGoodCommissionsResponse, error)
	CreateAppUserGoodCommissions(context.Context, *CreateAppUserGoodCommissionsRequest) (*CreateAppUserGoodCommissionsResponse, error)
	mustEmbedUnimplementedCommissionServer()
}

// UnimplementedCommissionServer must be embedded to have forward compatible implementations.
type UnimplementedCommissionServer struct {
}

func (UnimplementedCommissionServer) Version(context.Context, *emptypb.Empty) (*npool.VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedCommissionServer) CalculateOrderCommission(context.Context, *CalculateOrderCommissionRequest) (*CalculateOrderCommissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateOrderCommission not implemented")
}
func (UnimplementedCommissionServer) CreateUserGoodCommissions(context.Context, *CreateUserGoodCommissionsRequest) (*CreateUserGoodCommissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserGoodCommissions not implemented")
}
func (UnimplementedCommissionServer) CreateAppUserGoodCommissions(context.Context, *CreateAppUserGoodCommissionsRequest) (*CreateAppUserGoodCommissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppUserGoodCommissions not implemented")
}
func (UnimplementedCommissionServer) mustEmbedUnimplementedCommissionServer() {}

// UnsafeCommissionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommissionServer will
// result in compilation errors.
type UnsafeCommissionServer interface {
	mustEmbedUnimplementedCommissionServer()
}

func RegisterCommissionServer(s grpc.ServiceRegistrar, srv CommissionServer) {
	s.RegisterService(&Commission_ServiceDesc, srv)
}

func _Commission_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommissionServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archivement.middleware.commission.v1.Commission/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommissionServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commission_CalculateOrderCommission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateOrderCommissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommissionServer).CalculateOrderCommission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archivement.middleware.commission.v1.Commission/CalculateOrderCommission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommissionServer).CalculateOrderCommission(ctx, req.(*CalculateOrderCommissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commission_CreateUserGoodCommissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserGoodCommissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommissionServer).CreateUserGoodCommissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archivement.middleware.commission.v1.Commission/CreateUserGoodCommissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommissionServer).CreateUserGoodCommissions(ctx, req.(*CreateUserGoodCommissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Commission_CreateAppUserGoodCommissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppUserGoodCommissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommissionServer).CreateAppUserGoodCommissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archivement.middleware.commission.v1.Commission/CreateAppUserGoodCommissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommissionServer).CreateAppUserGoodCommissions(ctx, req.(*CreateAppUserGoodCommissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Commission_ServiceDesc is the grpc.ServiceDesc for Commission service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Commission_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "archivement.middleware.commission.v1.Commission",
	HandlerType: (*CommissionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _Commission_Version_Handler,
		},
		{
			MethodName: "CalculateOrderCommission",
			Handler:    _Commission_CalculateOrderCommission_Handler,
		},
		{
			MethodName: "CreateUserGoodCommissions",
			Handler:    _Commission_CreateUserGoodCommissions_Handler,
		},
		{
			MethodName: "CreateAppUserGoodCommissions",
			Handler:    _Commission_CreateAppUserGoodCommissions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/archivement/mw/v1/commission/commission.proto",
}
