// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/ledgermgr/general/general.proto

package general

import (
	context "context"
	npool "github.com/NpoolPlatform/message/npool"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LedgerGeneralClient is the client API for LedgerGeneral service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LedgerGeneralClient interface {
	// Method Version
	Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*npool.VersionResponse, error)
	CreateGeneral(ctx context.Context, in *CreateGeneralRequest, opts ...grpc.CallOption) (*CreateGeneralResponse, error)
	CreateGenerals(ctx context.Context, in *CreateGeneralsRequest, opts ...grpc.CallOption) (*CreateGeneralsResponse, error)
	AddGeneralFields(ctx context.Context, in *AddGeneralFieldsRequest, opts ...grpc.CallOption) (*AddGeneralFieldsResponse, error)
	GetGeneral(ctx context.Context, in *GetGeneralRequest, opts ...grpc.CallOption) (*GetGeneralResponse, error)
	GetGeneralOnly(ctx context.Context, in *GetGeneralOnlyRequest, opts ...grpc.CallOption) (*GetGeneralOnlyResponse, error)
	GetGenerals(ctx context.Context, in *GetGeneralsRequest, opts ...grpc.CallOption) (*GetGeneralsResponse, error)
	ExistGeneral(ctx context.Context, in *ExistGeneralRequest, opts ...grpc.CallOption) (*ExistGeneralResponse, error)
	ExistGeneralConds(ctx context.Context, in *ExistGeneralCondsRequest, opts ...grpc.CallOption) (*ExistGeneralCondsResponse, error)
	CountGenerals(ctx context.Context, in *CountGeneralsRequest, opts ...grpc.CallOption) (*CountGeneralsResponse, error)
	DeleteGeneral(ctx context.Context, in *DeleteGeneralRequest, opts ...grpc.CallOption) (*DeleteGeneralResponse, error)
}

type ledgerGeneralClient struct {
	cc grpc.ClientConnInterface
}

func NewLedgerGeneralClient(cc grpc.ClientConnInterface) LedgerGeneralClient {
	return &ledgerGeneralClient{cc}
}

func (c *ledgerGeneralClient) Version(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*npool.VersionResponse, error) {
	out := new(npool.VersionResponse)
	err := c.cc.Invoke(ctx, "/ledger.manager.general.v1.LedgerGeneral/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerGeneralClient) CreateGeneral(ctx context.Context, in *CreateGeneralRequest, opts ...grpc.CallOption) (*CreateGeneralResponse, error) {
	out := new(CreateGeneralResponse)
	err := c.cc.Invoke(ctx, "/ledger.manager.general.v1.LedgerGeneral/CreateGeneral", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerGeneralClient) CreateGenerals(ctx context.Context, in *CreateGeneralsRequest, opts ...grpc.CallOption) (*CreateGeneralsResponse, error) {
	out := new(CreateGeneralsResponse)
	err := c.cc.Invoke(ctx, "/ledger.manager.general.v1.LedgerGeneral/CreateGenerals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerGeneralClient) AddGeneralFields(ctx context.Context, in *AddGeneralFieldsRequest, opts ...grpc.CallOption) (*AddGeneralFieldsResponse, error) {
	out := new(AddGeneralFieldsResponse)
	err := c.cc.Invoke(ctx, "/ledger.manager.general.v1.LedgerGeneral/AddGeneralFields", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerGeneralClient) GetGeneral(ctx context.Context, in *GetGeneralRequest, opts ...grpc.CallOption) (*GetGeneralResponse, error) {
	out := new(GetGeneralResponse)
	err := c.cc.Invoke(ctx, "/ledger.manager.general.v1.LedgerGeneral/GetGeneral", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerGeneralClient) GetGeneralOnly(ctx context.Context, in *GetGeneralOnlyRequest, opts ...grpc.CallOption) (*GetGeneralOnlyResponse, error) {
	out := new(GetGeneralOnlyResponse)
	err := c.cc.Invoke(ctx, "/ledger.manager.general.v1.LedgerGeneral/GetGeneralOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerGeneralClient) GetGenerals(ctx context.Context, in *GetGeneralsRequest, opts ...grpc.CallOption) (*GetGeneralsResponse, error) {
	out := new(GetGeneralsResponse)
	err := c.cc.Invoke(ctx, "/ledger.manager.general.v1.LedgerGeneral/GetGenerals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerGeneralClient) ExistGeneral(ctx context.Context, in *ExistGeneralRequest, opts ...grpc.CallOption) (*ExistGeneralResponse, error) {
	out := new(ExistGeneralResponse)
	err := c.cc.Invoke(ctx, "/ledger.manager.general.v1.LedgerGeneral/ExistGeneral", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerGeneralClient) ExistGeneralConds(ctx context.Context, in *ExistGeneralCondsRequest, opts ...grpc.CallOption) (*ExistGeneralCondsResponse, error) {
	out := new(ExistGeneralCondsResponse)
	err := c.cc.Invoke(ctx, "/ledger.manager.general.v1.LedgerGeneral/ExistGeneralConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerGeneralClient) CountGenerals(ctx context.Context, in *CountGeneralsRequest, opts ...grpc.CallOption) (*CountGeneralsResponse, error) {
	out := new(CountGeneralsResponse)
	err := c.cc.Invoke(ctx, "/ledger.manager.general.v1.LedgerGeneral/CountGenerals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerGeneralClient) DeleteGeneral(ctx context.Context, in *DeleteGeneralRequest, opts ...grpc.CallOption) (*DeleteGeneralResponse, error) {
	out := new(DeleteGeneralResponse)
	err := c.cc.Invoke(ctx, "/ledger.manager.general.v1.LedgerGeneral/DeleteGeneral", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LedgerGeneralServer is the server API for LedgerGeneral service.
// All implementations must embed UnimplementedLedgerGeneralServer
// for forward compatibility
type LedgerGeneralServer interface {
	// Method Version
	Version(context.Context, *emptypb.Empty) (*npool.VersionResponse, error)
	CreateGeneral(context.Context, *CreateGeneralRequest) (*CreateGeneralResponse, error)
	CreateGenerals(context.Context, *CreateGeneralsRequest) (*CreateGeneralsResponse, error)
	AddGeneralFields(context.Context, *AddGeneralFieldsRequest) (*AddGeneralFieldsResponse, error)
	GetGeneral(context.Context, *GetGeneralRequest) (*GetGeneralResponse, error)
	GetGeneralOnly(context.Context, *GetGeneralOnlyRequest) (*GetGeneralOnlyResponse, error)
	GetGenerals(context.Context, *GetGeneralsRequest) (*GetGeneralsResponse, error)
	ExistGeneral(context.Context, *ExistGeneralRequest) (*ExistGeneralResponse, error)
	ExistGeneralConds(context.Context, *ExistGeneralCondsRequest) (*ExistGeneralCondsResponse, error)
	CountGenerals(context.Context, *CountGeneralsRequest) (*CountGeneralsResponse, error)
	DeleteGeneral(context.Context, *DeleteGeneralRequest) (*DeleteGeneralResponse, error)
	mustEmbedUnimplementedLedgerGeneralServer()
}

// UnimplementedLedgerGeneralServer must be embedded to have forward compatible implementations.
type UnimplementedLedgerGeneralServer struct {
}

func (UnimplementedLedgerGeneralServer) Version(context.Context, *emptypb.Empty) (*npool.VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedLedgerGeneralServer) CreateGeneral(context.Context, *CreateGeneralRequest) (*CreateGeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGeneral not implemented")
}
func (UnimplementedLedgerGeneralServer) CreateGenerals(context.Context, *CreateGeneralsRequest) (*CreateGeneralsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGenerals not implemented")
}
func (UnimplementedLedgerGeneralServer) AddGeneralFields(context.Context, *AddGeneralFieldsRequest) (*AddGeneralFieldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGeneralFields not implemented")
}
func (UnimplementedLedgerGeneralServer) GetGeneral(context.Context, *GetGeneralRequest) (*GetGeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGeneral not implemented")
}
func (UnimplementedLedgerGeneralServer) GetGeneralOnly(context.Context, *GetGeneralOnlyRequest) (*GetGeneralOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGeneralOnly not implemented")
}
func (UnimplementedLedgerGeneralServer) GetGenerals(context.Context, *GetGeneralsRequest) (*GetGeneralsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGenerals not implemented")
}
func (UnimplementedLedgerGeneralServer) ExistGeneral(context.Context, *ExistGeneralRequest) (*ExistGeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistGeneral not implemented")
}
func (UnimplementedLedgerGeneralServer) ExistGeneralConds(context.Context, *ExistGeneralCondsRequest) (*ExistGeneralCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistGeneralConds not implemented")
}
func (UnimplementedLedgerGeneralServer) CountGenerals(context.Context, *CountGeneralsRequest) (*CountGeneralsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountGenerals not implemented")
}
func (UnimplementedLedgerGeneralServer) DeleteGeneral(context.Context, *DeleteGeneralRequest) (*DeleteGeneralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGeneral not implemented")
}
func (UnimplementedLedgerGeneralServer) mustEmbedUnimplementedLedgerGeneralServer() {}

// UnsafeLedgerGeneralServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LedgerGeneralServer will
// result in compilation errors.
type UnsafeLedgerGeneralServer interface {
	mustEmbedUnimplementedLedgerGeneralServer()
}

func RegisterLedgerGeneralServer(s grpc.ServiceRegistrar, srv LedgerGeneralServer) {
	s.RegisterService(&LedgerGeneral_ServiceDesc, srv)
}

func _LedgerGeneral_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerGeneralServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ledger.manager.general.v1.LedgerGeneral/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerGeneralServer).Version(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerGeneral_CreateGeneral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGeneralRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerGeneralServer).CreateGeneral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ledger.manager.general.v1.LedgerGeneral/CreateGeneral",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerGeneralServer).CreateGeneral(ctx, req.(*CreateGeneralRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerGeneral_CreateGenerals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGeneralsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerGeneralServer).CreateGenerals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ledger.manager.general.v1.LedgerGeneral/CreateGenerals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerGeneralServer).CreateGenerals(ctx, req.(*CreateGeneralsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerGeneral_AddGeneralFields_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGeneralFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerGeneralServer).AddGeneralFields(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ledger.manager.general.v1.LedgerGeneral/AddGeneralFields",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerGeneralServer).AddGeneralFields(ctx, req.(*AddGeneralFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerGeneral_GetGeneral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGeneralRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerGeneralServer).GetGeneral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ledger.manager.general.v1.LedgerGeneral/GetGeneral",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerGeneralServer).GetGeneral(ctx, req.(*GetGeneralRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerGeneral_GetGeneralOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGeneralOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerGeneralServer).GetGeneralOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ledger.manager.general.v1.LedgerGeneral/GetGeneralOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerGeneralServer).GetGeneralOnly(ctx, req.(*GetGeneralOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerGeneral_GetGenerals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGeneralsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerGeneralServer).GetGenerals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ledger.manager.general.v1.LedgerGeneral/GetGenerals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerGeneralServer).GetGenerals(ctx, req.(*GetGeneralsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerGeneral_ExistGeneral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistGeneralRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerGeneralServer).ExistGeneral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ledger.manager.general.v1.LedgerGeneral/ExistGeneral",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerGeneralServer).ExistGeneral(ctx, req.(*ExistGeneralRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerGeneral_ExistGeneralConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistGeneralCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerGeneralServer).ExistGeneralConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ledger.manager.general.v1.LedgerGeneral/ExistGeneralConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerGeneralServer).ExistGeneralConds(ctx, req.(*ExistGeneralCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerGeneral_CountGenerals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountGeneralsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerGeneralServer).CountGenerals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ledger.manager.general.v1.LedgerGeneral/CountGenerals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerGeneralServer).CountGenerals(ctx, req.(*CountGeneralsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedgerGeneral_DeleteGeneral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGeneralRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerGeneralServer).DeleteGeneral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ledger.manager.general.v1.LedgerGeneral/DeleteGeneral",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerGeneralServer).DeleteGeneral(ctx, req.(*DeleteGeneralRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LedgerGeneral_ServiceDesc is the grpc.ServiceDesc for LedgerGeneral service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LedgerGeneral_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ledger.manager.general.v1.LedgerGeneral",
	HandlerType: (*LedgerGeneralServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _LedgerGeneral_Version_Handler,
		},
		{
			MethodName: "CreateGeneral",
			Handler:    _LedgerGeneral_CreateGeneral_Handler,
		},
		{
			MethodName: "CreateGenerals",
			Handler:    _LedgerGeneral_CreateGenerals_Handler,
		},
		{
			MethodName: "AddGeneralFields",
			Handler:    _LedgerGeneral_AddGeneralFields_Handler,
		},
		{
			MethodName: "GetGeneral",
			Handler:    _LedgerGeneral_GetGeneral_Handler,
		},
		{
			MethodName: "GetGeneralOnly",
			Handler:    _LedgerGeneral_GetGeneralOnly_Handler,
		},
		{
			MethodName: "GetGenerals",
			Handler:    _LedgerGeneral_GetGenerals_Handler,
		},
		{
			MethodName: "ExistGeneral",
			Handler:    _LedgerGeneral_ExistGeneral_Handler,
		},
		{
			MethodName: "ExistGeneralConds",
			Handler:    _LedgerGeneral_ExistGeneralConds_Handler,
		},
		{
			MethodName: "CountGenerals",
			Handler:    _LedgerGeneral_CountGenerals_Handler,
		},
		{
			MethodName: "DeleteGeneral",
			Handler:    _LedgerGeneral_DeleteGeneral_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/ledgermgr/general/general.proto",
}
