syntax = "proto3";

package sphinx.v1;

option go_package = "github.com/NpoolPlatform/message/npool/trading";

import "google/api/annotations.proto";
import "npool/signproxy/signproxy.proto";

// 交易服务
service Trading {
	// 创建账户
	rpc CreateAccount (CreateAccountRequest) returns (CreateAccountResponse) {
		option (google.api.http) = {
			post: "/v1/create/wallet"
			body: "*"
		};}
	// 余额查询
	rpc GetBalance (GetBalanceRequest) returns (GetBalanceResponse) {
		option (google.api.http) = {
			post: "/v1/get/wallet/balance"
			body: "*"
		};}
	// 转账 / 提现
	rpc CreateTransaction (CreateTransactionRequest) returns (CreateTransactionResponse) {
		option (google.api.http) = {
			post: "/v1/create/transaction"
			body: "*"
		};}
	// TODO: 账户交易查询
	rpc GetTxJSON (GetTxJSONRequest) returns (AccountTxJSON) {} // reserved function
	// 交易状态查询
	rpc GetInsiteTxStatus (GetInsiteTxStatusRequest) returns (GetInsiteTxStatusResponse) {
		option (google.api.http) = {
			post: "/v1/get/transaction"
			body: "*"
		};}
	// 接收ack
	rpc ACK (ACKRequest) returns (ACKResponse) {
		option (google.api.http) = {
			post: "/v1/internal/ack"
			body: "*"
		};}
}

// share account structure
message EntAccount {
	string CoinName = 1; // 币种名称(唯一)
	string UUID = 2; // 当前取UserID
	string Address = 3; // 钱包地址，创建时填空
	double AmountFloat64 = 4; // 长整型金额
}

// CreateAccount 参数
message CreateAccountRequest {
	string CoinName = 1; // 币种名称(唯一)
	string UUID = 2; // 当前取UserID
}
// CreateAccount 返回
message CreateAccountResponse {
	EntAccount Info = 1;
}

// GetBalance 参数
message GetBalanceRequest {
	string CoinName = 1; // 币种名称(唯一)
	string Address = 3; // 查询的钱包地址
	int64 TimestampUTC = 4; // 长整型时间戳
}
// GetBalance 返回
message GetBalanceResponse {
	EntAccount Info = 1;
}

// GetTxJSONRequest 参数
message GetTxJSONRequest {
	// 预留，当前版本未实现，继承钱包节点基础功能
	string CoinName = 1; // 币种名称(唯一)
	string Address = 3; // 要查询的钱包地址
	int64 TimefromUTC = 4; // 开始时间
	int64 TimetillUTC = 5; // 结束时间
}
// GetTxJSONRequest 返回
message AccountTxJSON {
	string JSON = 1; // disabled for now
}

// share transaction structure
message EntTx {
	string TransactionIDInsite = 1; // 站内交易ID
	string CoinName = 2; // 币种名称(唯一)
	double AmountFloat64 = 3; // 不入库的参考金额
	string AddressFrom = 4; // 发送方
	string AddressTo = 5; // 接收方
	string InsiteTxType = 6; // recharge, payment, withdraw, unknown
	string TransactionIDChain = 7; // 公链交易ID（如有）
	string Status = 8; // 为done则成功；全部状态："pending_review", "pending_process", "pending_signinfo", "pending_sign", "pending_broadcast", "pending_confirm", "done", "rejected", "error", "error_expected"
	int64 CreatetimeUTC = 12; // 创建时间
	int64 UpdatetimeUTC = 13; // 上次更新时间
	bool Succeeded = 14; // 便于调用方判断
	bool Failed = 15; // 不success不fail就是pending了
}

// GetInsiteTxStatus 参数
message GetInsiteTxStatusRequest {
	string TransactionIDInsite = 1; // 站内交易ID
}
// GetInsiteTxStatus 返回
message GetInsiteTxStatusResponse {
	EntTx Info = 1;
}


// CreateTransaction 参数
message CreateTransactionRequest {
	string TransactionIDInsite = 1; // 站内交易ID
	string CoinName = 2; // 币种名称(唯一)
	string AddressFrom = 4; // 发送方
	string AddressTo = 5; // 接收方
	double AmountFloat64 = 6; // 不入库的参考金额
	string InsiteTxType = 8; // recharge, payment, withdraw, unknown
	int64 CreatetimeUTC = 9; // 用户提交请求时的时间戳，与2FA绑定
	string UUIDSignature = 10; // 2FA的时效性验证码，前期可以留空
}

// // PortalSignInit 参数
// message PortalSignInit {
// 	int32 coin_id = 1;
// 	string uuid = 2; // 机器标识符
// }

// // PortalWalletInit 参数
// message PortalWalletInit {
// 	int32 coin_id = 1;
// 	string uuid = 2; // 机器标识符
// 	string location = 3; // 硬件所在地点（看板用到的节点信息，下同）
// 	string host_vendor = 4; // 硬件供应商
// 	string mac_address = 5; // MAC地址
// 	string public_ip = 6; // 公网ip，也可能没有
// 	string local_ip = 7; // 内网ip
// 	int64 timestamp_utc = 8; // 汇报时间
// }

message ACKRequest {
	sphinx.proxy.v1.TransactionType transaction_type = 1; // 交易类型： WalletNew, Signature, Balance, PreSign, Broadcast ； 创建账号、查询余额、交易状态更新
	int32 coin_type_id = 2;
	string transaction_id_insite = 3; // 交易ID
	string transaction_id_chain = 4; // 交易链上ID （如有）
	string address = 5; // 创建账号的地址
	double balance = 6; // 查询账号的余额
	bool is_okay = 7; // 交易请求是否成功
	string error_message = 8; // 报错或调试时返回信息
}

message ACKResponse {
	bool is_okay = 1; // 是否收到请求
}

message CreateTransactionResponse {
	int32 Code = 1;
	string Info = 2; // "success"
}

// request body and response
message VersionResponse {
		string Info = 100;
}










