// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/oplog/gw/v1/log/log.proto

package log

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	CreateLog(ctx context.Context, in *CreateLogRequest, opts ...grpc.CallOption) (*CreateLogResponse, error)
	UpdateLog(ctx context.Context, in *UpdateLogRequest, opts ...grpc.CallOption) (*UpdateLogResponse, error)
	GetLogs(ctx context.Context, in *GetLogsRequest, opts ...grpc.CallOption) (*GetLogsResponse, error)
	GetAppLogs(ctx context.Context, in *GetAppLogsRequest, opts ...grpc.CallOption) (*GetAppLogsResponse, error)
	GetNAppLogs(ctx context.Context, in *GetNAppLogsRequest, opts ...grpc.CallOption) (*GetNAppLogsResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) CreateLog(ctx context.Context, in *CreateLogRequest, opts ...grpc.CallOption) (*CreateLogResponse, error) {
	out := new(CreateLogResponse)
	err := c.cc.Invoke(ctx, "/oplog.gateway.log.v1.Gateway/CreateLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdateLog(ctx context.Context, in *UpdateLogRequest, opts ...grpc.CallOption) (*UpdateLogResponse, error) {
	out := new(UpdateLogResponse)
	err := c.cc.Invoke(ctx, "/oplog.gateway.log.v1.Gateway/UpdateLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetLogs(ctx context.Context, in *GetLogsRequest, opts ...grpc.CallOption) (*GetLogsResponse, error) {
	out := new(GetLogsResponse)
	err := c.cc.Invoke(ctx, "/oplog.gateway.log.v1.Gateway/GetLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetAppLogs(ctx context.Context, in *GetAppLogsRequest, opts ...grpc.CallOption) (*GetAppLogsResponse, error) {
	out := new(GetAppLogsResponse)
	err := c.cc.Invoke(ctx, "/oplog.gateway.log.v1.Gateway/GetAppLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetNAppLogs(ctx context.Context, in *GetNAppLogsRequest, opts ...grpc.CallOption) (*GetNAppLogsResponse, error) {
	out := new(GetNAppLogsResponse)
	err := c.cc.Invoke(ctx, "/oplog.gateway.log.v1.Gateway/GetNAppLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	CreateLog(context.Context, *CreateLogRequest) (*CreateLogResponse, error)
	UpdateLog(context.Context, *UpdateLogRequest) (*UpdateLogResponse, error)
	GetLogs(context.Context, *GetLogsRequest) (*GetLogsResponse, error)
	GetAppLogs(context.Context, *GetAppLogsRequest) (*GetAppLogsResponse, error)
	GetNAppLogs(context.Context, *GetNAppLogsRequest) (*GetNAppLogsResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) CreateLog(context.Context, *CreateLogRequest) (*CreateLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLog not implemented")
}
func (UnimplementedGatewayServer) UpdateLog(context.Context, *UpdateLogRequest) (*UpdateLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLog not implemented")
}
func (UnimplementedGatewayServer) GetLogs(context.Context, *GetLogsRequest) (*GetLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogs not implemented")
}
func (UnimplementedGatewayServer) GetAppLogs(context.Context, *GetAppLogsRequest) (*GetAppLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppLogs not implemented")
}
func (UnimplementedGatewayServer) GetNAppLogs(context.Context, *GetNAppLogsRequest) (*GetNAppLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNAppLogs not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_CreateLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oplog.gateway.log.v1.Gateway/CreateLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateLog(ctx, req.(*CreateLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdateLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oplog.gateway.log.v1.Gateway/UpdateLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateLog(ctx, req.(*UpdateLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oplog.gateway.log.v1.Gateway/GetLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetLogs(ctx, req.(*GetLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetAppLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetAppLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oplog.gateway.log.v1.Gateway/GetAppLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetAppLogs(ctx, req.(*GetAppLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetNAppLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNAppLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetNAppLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oplog.gateway.log.v1.Gateway/GetNAppLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetNAppLogs(ctx, req.(*GetNAppLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "oplog.gateway.log.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLog",
			Handler:    _Gateway_CreateLog_Handler,
		},
		{
			MethodName: "UpdateLog",
			Handler:    _Gateway_UpdateLog_Handler,
		},
		{
			MethodName: "GetLogs",
			Handler:    _Gateway_GetLogs_Handler,
		},
		{
			MethodName: "GetAppLogs",
			Handler:    _Gateway_GetAppLogs_Handler,
		},
		{
			MethodName: "GetNAppLogs",
			Handler:    _Gateway_GetNAppLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/oplog/gw/v1/log/log.proto",
}
