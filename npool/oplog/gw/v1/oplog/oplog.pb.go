// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.18.1
// source: npool/oplog/gw/v1/oplog/oplog.proto

package oplog

import (
	v1 "github.com/NpoolPlatform/message/npool/basetypes/v1"
	oplog "github.com/NpoolPlatform/message/npool/oplog/mw/v1/oplog"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateOpLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID      string        `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	UserID     *string       `protobuf:"bytes,20,opt,name=UserID,proto3,oneof" json:"UserID,omitempty"`
	Path       string        `protobuf:"bytes,30,opt,name=Path,proto3" json:"Path,omitempty"`
	Method     v1.HTTPMethod `protobuf:"varint,40,opt,name=Method,proto3,enum=basetypes.v1.HTTPMethod" json:"Method,omitempty"`
	Arguments  string        `protobuf:"bytes,50,opt,name=Arguments,proto3" json:"Arguments,omitempty"`
	ReqHeaders string        `protobuf:"bytes,60,opt,name=ReqHeaders,proto3" json:"ReqHeaders,omitempty"`
}

func (x *CreateOpLogRequest) Reset() {
	*x = CreateOpLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_oplog_gw_v1_oplog_oplog_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOpLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOpLogRequest) ProtoMessage() {}

func (x *CreateOpLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_oplog_gw_v1_oplog_oplog_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOpLogRequest.ProtoReflect.Descriptor instead.
func (*CreateOpLogRequest) Descriptor() ([]byte, []int) {
	return file_npool_oplog_gw_v1_oplog_oplog_proto_rawDescGZIP(), []int{0}
}

func (x *CreateOpLogRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *CreateOpLogRequest) GetUserID() string {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return ""
}

func (x *CreateOpLogRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *CreateOpLogRequest) GetMethod() v1.HTTPMethod {
	if x != nil {
		return x.Method
	}
	return v1.HTTPMethod(0)
}

func (x *CreateOpLogRequest) GetArguments() string {
	if x != nil {
		return x.Arguments
	}
	return ""
}

func (x *CreateOpLogRequest) GetReqHeaders() string {
	if x != nil {
		return x.ReqHeaders
	}
	return ""
}

type CreateOpLogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *oplog.OpLog `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateOpLogResponse) Reset() {
	*x = CreateOpLogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_oplog_gw_v1_oplog_oplog_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOpLogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOpLogResponse) ProtoMessage() {}

func (x *CreateOpLogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_oplog_gw_v1_oplog_oplog_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOpLogResponse.ProtoReflect.Descriptor instead.
func (*CreateOpLogResponse) Descriptor() ([]byte, []int) {
	return file_npool_oplog_gw_v1_oplog_oplog_proto_rawDescGZIP(), []int{1}
}

func (x *CreateOpLogResponse) GetInfo() *oplog.OpLog {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateOpLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntID            string     `protobuf:"bytes,10,opt,name=EntID,proto3" json:"EntID,omitempty"`
	NewValue         *string    `protobuf:"bytes,20,opt,name=NewValue,proto3,oneof" json:"NewValue,omitempty"`
	Result           *v1.Result `protobuf:"varint,30,opt,name=Result,proto3,enum=basetypes.v1.Result,oneof" json:"Result,omitempty"`
	FailReason       *string    `protobuf:"bytes,40,opt,name=FailReason,proto3,oneof" json:"FailReason,omitempty"`
	StatusCode       *int32     `protobuf:"varint,50,opt,name=StatusCode,proto3,oneof" json:"StatusCode,omitempty"`
	ReqHeaders       *string    `protobuf:"bytes,60,opt,name=ReqHeaders,proto3,oneof" json:"ReqHeaders,omitempty"`
	RespHeaders      *string    `protobuf:"bytes,70,opt,name=RespHeaders,proto3,oneof" json:"RespHeaders,omitempty"`
	ElapsedMillisecs *uint32    `protobuf:"varint,80,opt,name=ElapsedMillisecs,proto3,oneof" json:"ElapsedMillisecs,omitempty"`
}

func (x *UpdateOpLogRequest) Reset() {
	*x = UpdateOpLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_oplog_gw_v1_oplog_oplog_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOpLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOpLogRequest) ProtoMessage() {}

func (x *UpdateOpLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_oplog_gw_v1_oplog_oplog_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOpLogRequest.ProtoReflect.Descriptor instead.
func (*UpdateOpLogRequest) Descriptor() ([]byte, []int) {
	return file_npool_oplog_gw_v1_oplog_oplog_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateOpLogRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *UpdateOpLogRequest) GetNewValue() string {
	if x != nil && x.NewValue != nil {
		return *x.NewValue
	}
	return ""
}

func (x *UpdateOpLogRequest) GetResult() v1.Result {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return v1.Result(0)
}

func (x *UpdateOpLogRequest) GetFailReason() string {
	if x != nil && x.FailReason != nil {
		return *x.FailReason
	}
	return ""
}

func (x *UpdateOpLogRequest) GetStatusCode() int32 {
	if x != nil && x.StatusCode != nil {
		return *x.StatusCode
	}
	return 0
}

func (x *UpdateOpLogRequest) GetReqHeaders() string {
	if x != nil && x.ReqHeaders != nil {
		return *x.ReqHeaders
	}
	return ""
}

func (x *UpdateOpLogRequest) GetRespHeaders() string {
	if x != nil && x.RespHeaders != nil {
		return *x.RespHeaders
	}
	return ""
}

func (x *UpdateOpLogRequest) GetElapsedMillisecs() uint32 {
	if x != nil && x.ElapsedMillisecs != nil {
		return *x.ElapsedMillisecs
	}
	return 0
}

type UpdateOpLogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *oplog.OpLog `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateOpLogResponse) Reset() {
	*x = UpdateOpLogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_oplog_gw_v1_oplog_oplog_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateOpLogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateOpLogResponse) ProtoMessage() {}

func (x *UpdateOpLogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_oplog_gw_v1_oplog_oplog_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateOpLogResponse.ProtoReflect.Descriptor instead.
func (*UpdateOpLogResponse) Descriptor() ([]byte, []int) {
	return file_npool_oplog_gw_v1_oplog_oplog_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateOpLogResponse) GetInfo() *oplog.OpLog {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetOpLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID  string `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	UserID string `protobuf:"bytes,20,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Offset int32  `protobuf:"varint,30,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,40,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetOpLogsRequest) Reset() {
	*x = GetOpLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_oplog_gw_v1_oplog_oplog_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOpLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOpLogsRequest) ProtoMessage() {}

func (x *GetOpLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_oplog_gw_v1_oplog_oplog_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOpLogsRequest.ProtoReflect.Descriptor instead.
func (*GetOpLogsRequest) Descriptor() ([]byte, []int) {
	return file_npool_oplog_gw_v1_oplog_oplog_proto_rawDescGZIP(), []int{4}
}

func (x *GetOpLogsRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetOpLogsRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetOpLogsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetOpLogsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetOpLogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*oplog.OpLog `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32         `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetOpLogsResponse) Reset() {
	*x = GetOpLogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_oplog_gw_v1_oplog_oplog_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOpLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOpLogsResponse) ProtoMessage() {}

func (x *GetOpLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_oplog_gw_v1_oplog_oplog_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOpLogsResponse.ProtoReflect.Descriptor instead.
func (*GetOpLogsResponse) Descriptor() ([]byte, []int) {
	return file_npool_oplog_gw_v1_oplog_oplog_proto_rawDescGZIP(), []int{5}
}

func (x *GetOpLogsResponse) GetInfos() []*oplog.OpLog {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetOpLogsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetAppOpLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID  string `protobuf:"bytes,10,opt,name=AppID,proto3" json:"AppID,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetAppOpLogsRequest) Reset() {
	*x = GetAppOpLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_oplog_gw_v1_oplog_oplog_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppOpLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppOpLogsRequest) ProtoMessage() {}

func (x *GetAppOpLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_oplog_gw_v1_oplog_oplog_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppOpLogsRequest.ProtoReflect.Descriptor instead.
func (*GetAppOpLogsRequest) Descriptor() ([]byte, []int) {
	return file_npool_oplog_gw_v1_oplog_oplog_proto_rawDescGZIP(), []int{6}
}

func (x *GetAppOpLogsRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetAppOpLogsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetAppOpLogsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetAppOpLogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*oplog.OpLog `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32         `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetAppOpLogsResponse) Reset() {
	*x = GetAppOpLogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_oplog_gw_v1_oplog_oplog_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAppOpLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppOpLogsResponse) ProtoMessage() {}

func (x *GetAppOpLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_oplog_gw_v1_oplog_oplog_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppOpLogsResponse.ProtoReflect.Descriptor instead.
func (*GetAppOpLogsResponse) Descriptor() ([]byte, []int) {
	return file_npool_oplog_gw_v1_oplog_oplog_proto_rawDescGZIP(), []int{7}
}

func (x *GetAppOpLogsResponse) GetInfos() []*oplog.OpLog {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetAppOpLogsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetNAppOpLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetAppID string `protobuf:"bytes,10,opt,name=TargetAppID,proto3" json:"TargetAppID,omitempty"`
	Offset      int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit       int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetNAppOpLogsRequest) Reset() {
	*x = GetNAppOpLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_oplog_gw_v1_oplog_oplog_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNAppOpLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNAppOpLogsRequest) ProtoMessage() {}

func (x *GetNAppOpLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_oplog_gw_v1_oplog_oplog_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNAppOpLogsRequest.ProtoReflect.Descriptor instead.
func (*GetNAppOpLogsRequest) Descriptor() ([]byte, []int) {
	return file_npool_oplog_gw_v1_oplog_oplog_proto_rawDescGZIP(), []int{8}
}

func (x *GetNAppOpLogsRequest) GetTargetAppID() string {
	if x != nil {
		return x.TargetAppID
	}
	return ""
}

func (x *GetNAppOpLogsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetNAppOpLogsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetNAppOpLogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*oplog.OpLog `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32         `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetNAppOpLogsResponse) Reset() {
	*x = GetNAppOpLogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_oplog_gw_v1_oplog_oplog_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNAppOpLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNAppOpLogsResponse) ProtoMessage() {}

func (x *GetNAppOpLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_oplog_gw_v1_oplog_oplog_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNAppOpLogsResponse.ProtoReflect.Descriptor instead.
func (*GetNAppOpLogsResponse) Descriptor() ([]byte, []int) {
	return file_npool_oplog_gw_v1_oplog_oplog_proto_rawDescGZIP(), []int{9}
}

func (x *GetNAppOpLogsResponse) GetInfos() []*oplog.OpLog {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetNAppOpLogsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

var File_npool_oplog_gw_v1_oplog_oplog_proto protoreflect.FileDescriptor

var file_npool_oplog_gw_v1_oplog_oplog_proto_rawDesc = []byte{
	0x0a, 0x23, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6f, 0x70, 0x6c, 0x6f, 0x67, 0x2f, 0x67, 0x77,
	0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x6c, 0x6f, 0x67, 0x2f, 0x6f, 0x70, 0x6c, 0x6f, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x6f, 0x70, 0x6c, 0x6f, 0x67, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x6f, 0x70, 0x6c, 0x6f, 0x67, 0x31, 0x2e, 0x76, 0x31, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x6e, 0x70,
	0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x68, 0x74, 0x74, 0x70, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x23, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6f, 0x70, 0x6c, 0x6f, 0x67, 0x2f,
	0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x6c, 0x6f, 0x67, 0x2f, 0x6f, 0x70, 0x6c, 0x6f,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd6, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4f, 0x70, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x30, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52,
	0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x71, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x65, 0x71, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x22, 0x4c, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x4c, 0x6f, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x6c, 0x6f, 0x67, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6f, 0x70, 0x6c, 0x6f, 0x67, 0x31, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x70, 0x4c, 0x6f, 0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xaf,
	0x03, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x4c, 0x6f, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1f, 0x0a, 0x08, 0x4e,
	0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x08, 0x4e, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x06,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x48, 0x01, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x23, 0x0a, 0x0a, 0x46, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x46, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x0a, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x52, 0x65, 0x71,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52,
	0x0a, 0x52, 0x65, 0x71, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x25,
	0x0a, 0x0b, 0x52, 0x65, 0x73, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x46, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0b, 0x52, 0x65, 0x73, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64,
	0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x73, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x06, 0x52, 0x10, 0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73,
	0x65, 0x63, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x4e, 0x65, 0x77, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x46, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x52, 0x65, 0x71, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x52, 0x65, 0x73, 0x70, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x45, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x73,
	0x22, 0x4c, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x4c, 0x6f, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x6c, 0x6f, 0x67, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6f, 0x70, 0x6c, 0x6f, 0x67, 0x31, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x70, 0x4c, 0x6f, 0x67, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6e,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x62,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x6c, 0x6f, 0x67, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6f, 0x70, 0x6c, 0x6f, 0x67, 0x31, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x70, 0x4c, 0x6f, 0x67, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x22, 0x59, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x4f, 0x70, 0x4c, 0x6f,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x65, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x4f, 0x70, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x6c, 0x6f, 0x67, 0x2e, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6f, 0x70, 0x6c, 0x6f, 0x67, 0x31, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x70, 0x4c, 0x6f, 0x67, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x22, 0x66, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4e, 0x41, 0x70, 0x70, 0x4f,
	0x70, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x66, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x4e, 0x41, 0x70, 0x70, 0x4f, 0x70, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x70, 0x6c, 0x6f, 0x67, 0x2e, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x6f, 0x70, 0x6c, 0x6f, 0x67, 0x31, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x70, 0x4c, 0x6f, 0x67, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x32, 0xb7, 0x05, 0x0a, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x12, 0x85, 0x01, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x4c, 0x6f, 0x67,
	0x12, 0x2b, 0x2e, 0x6f, 0x70, 0x6c, 0x6f, 0x67, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x6f, 0x70, 0x6c, 0x6f, 0x67, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4f, 0x70, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x6f, 0x70, 0x6c, 0x6f, 0x67, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x6f, 0x70,
	0x6c, 0x6f, 0x67, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70,
	0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x2f, 0x6f, 0x70, 0x6c, 0x6f, 0x67, 0x12, 0x85, 0x01, 0x0a, 0x0b, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x70, 0x4c, 0x6f, 0x67, 0x12, 0x2b, 0x2e, 0x6f, 0x70, 0x6c, 0x6f, 0x67,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x6f, 0x70, 0x6c, 0x6f, 0x67, 0x31, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x4c, 0x6f, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6f, 0x70, 0x6c, 0x6f, 0x67, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x6f, 0x70, 0x6c, 0x6f, 0x67, 0x31, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x22, 0x10,
	0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x6f, 0x70, 0x6c, 0x6f, 0x67,
	0x12, 0x7d, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x29, 0x2e,
	0x6f, 0x70, 0x6c, 0x6f, 0x67, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x6f, 0x70,
	0x6c, 0x6f, 0x67, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x4c, 0x6f, 0x67,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6f, 0x70, 0x6c, 0x6f, 0x67,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x6f, 0x70, 0x6c, 0x6f, 0x67, 0x31, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x3a, 0x01, 0x2a, 0x22,
	0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x6f, 0x70, 0x6c, 0x6f, 0x67, 0x73, 0x12,
	0x8a, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x4f, 0x70, 0x4c, 0x6f, 0x67, 0x73,
	0x12, 0x2c, 0x2e, 0x6f, 0x70, 0x6c, 0x6f, 0x67, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x6f, 0x70, 0x6c, 0x6f, 0x67, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70,
	0x70, 0x4f, 0x70, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x6f, 0x70, 0x6c, 0x6f, 0x67, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x6f,
	0x70, 0x6c, 0x6f, 0x67, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x4f,
	0x70, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a, 0x01, 0x2a, 0x22, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65,
	0x74, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x6f, 0x70, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x8f, 0x01, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x4e, 0x41, 0x70, 0x70, 0x4f, 0x70, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x2d,
	0x2e, 0x6f, 0x70, 0x6c, 0x6f, 0x67, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x6f,
	0x70, 0x6c, 0x6f, 0x67, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x41, 0x70, 0x70,
	0x4f, 0x70, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x6f, 0x70, 0x6c, 0x6f, 0x67, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x6f, 0x70,
	0x6c, 0x6f, 0x67, 0x31, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x41, 0x70, 0x70, 0x4f,
	0x70, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65,
	0x74, 0x2f, 0x6e, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x6f, 0x70, 0x6c, 0x6f, 0x67, 0x73, 0x42, 0x3a,
	0x5a, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f,
	0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6f, 0x70, 0x6c, 0x6f, 0x67, 0x2f, 0x67,
	0x77, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x6c, 0x6f, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_npool_oplog_gw_v1_oplog_oplog_proto_rawDescOnce sync.Once
	file_npool_oplog_gw_v1_oplog_oplog_proto_rawDescData = file_npool_oplog_gw_v1_oplog_oplog_proto_rawDesc
)

func file_npool_oplog_gw_v1_oplog_oplog_proto_rawDescGZIP() []byte {
	file_npool_oplog_gw_v1_oplog_oplog_proto_rawDescOnce.Do(func() {
		file_npool_oplog_gw_v1_oplog_oplog_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_oplog_gw_v1_oplog_oplog_proto_rawDescData)
	})
	return file_npool_oplog_gw_v1_oplog_oplog_proto_rawDescData
}

var file_npool_oplog_gw_v1_oplog_oplog_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_npool_oplog_gw_v1_oplog_oplog_proto_goTypes = []interface{}{
	(*CreateOpLogRequest)(nil),    // 0: oplog.gateway.oplog1.v1.CreateOpLogRequest
	(*CreateOpLogResponse)(nil),   // 1: oplog.gateway.oplog1.v1.CreateOpLogResponse
	(*UpdateOpLogRequest)(nil),    // 2: oplog.gateway.oplog1.v1.UpdateOpLogRequest
	(*UpdateOpLogResponse)(nil),   // 3: oplog.gateway.oplog1.v1.UpdateOpLogResponse
	(*GetOpLogsRequest)(nil),      // 4: oplog.gateway.oplog1.v1.GetOpLogsRequest
	(*GetOpLogsResponse)(nil),     // 5: oplog.gateway.oplog1.v1.GetOpLogsResponse
	(*GetAppOpLogsRequest)(nil),   // 6: oplog.gateway.oplog1.v1.GetAppOpLogsRequest
	(*GetAppOpLogsResponse)(nil),  // 7: oplog.gateway.oplog1.v1.GetAppOpLogsResponse
	(*GetNAppOpLogsRequest)(nil),  // 8: oplog.gateway.oplog1.v1.GetNAppOpLogsRequest
	(*GetNAppOpLogsResponse)(nil), // 9: oplog.gateway.oplog1.v1.GetNAppOpLogsResponse
	(v1.HTTPMethod)(0),            // 10: basetypes.v1.HTTPMethod
	(*oplog.OpLog)(nil),           // 11: oplog.middleware.oplog1.v1.OpLog
	(v1.Result)(0),                // 12: basetypes.v1.Result
}
var file_npool_oplog_gw_v1_oplog_oplog_proto_depIdxs = []int32{
	10, // 0: oplog.gateway.oplog1.v1.CreateOpLogRequest.Method:type_name -> basetypes.v1.HTTPMethod
	11, // 1: oplog.gateway.oplog1.v1.CreateOpLogResponse.Info:type_name -> oplog.middleware.oplog1.v1.OpLog
	12, // 2: oplog.gateway.oplog1.v1.UpdateOpLogRequest.Result:type_name -> basetypes.v1.Result
	11, // 3: oplog.gateway.oplog1.v1.UpdateOpLogResponse.Info:type_name -> oplog.middleware.oplog1.v1.OpLog
	11, // 4: oplog.gateway.oplog1.v1.GetOpLogsResponse.Infos:type_name -> oplog.middleware.oplog1.v1.OpLog
	11, // 5: oplog.gateway.oplog1.v1.GetAppOpLogsResponse.Infos:type_name -> oplog.middleware.oplog1.v1.OpLog
	11, // 6: oplog.gateway.oplog1.v1.GetNAppOpLogsResponse.Infos:type_name -> oplog.middleware.oplog1.v1.OpLog
	0,  // 7: oplog.gateway.oplog1.v1.Gateway.CreateOpLog:input_type -> oplog.gateway.oplog1.v1.CreateOpLogRequest
	2,  // 8: oplog.gateway.oplog1.v1.Gateway.UpdateOpLog:input_type -> oplog.gateway.oplog1.v1.UpdateOpLogRequest
	4,  // 9: oplog.gateway.oplog1.v1.Gateway.GetOpLogs:input_type -> oplog.gateway.oplog1.v1.GetOpLogsRequest
	6,  // 10: oplog.gateway.oplog1.v1.Gateway.GetAppOpLogs:input_type -> oplog.gateway.oplog1.v1.GetAppOpLogsRequest
	8,  // 11: oplog.gateway.oplog1.v1.Gateway.GetNAppOpLogs:input_type -> oplog.gateway.oplog1.v1.GetNAppOpLogsRequest
	1,  // 12: oplog.gateway.oplog1.v1.Gateway.CreateOpLog:output_type -> oplog.gateway.oplog1.v1.CreateOpLogResponse
	3,  // 13: oplog.gateway.oplog1.v1.Gateway.UpdateOpLog:output_type -> oplog.gateway.oplog1.v1.UpdateOpLogResponse
	5,  // 14: oplog.gateway.oplog1.v1.Gateway.GetOpLogs:output_type -> oplog.gateway.oplog1.v1.GetOpLogsResponse
	7,  // 15: oplog.gateway.oplog1.v1.Gateway.GetAppOpLogs:output_type -> oplog.gateway.oplog1.v1.GetAppOpLogsResponse
	9,  // 16: oplog.gateway.oplog1.v1.Gateway.GetNAppOpLogs:output_type -> oplog.gateway.oplog1.v1.GetNAppOpLogsResponse
	12, // [12:17] is the sub-list for method output_type
	7,  // [7:12] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_npool_oplog_gw_v1_oplog_oplog_proto_init() }
func file_npool_oplog_gw_v1_oplog_oplog_proto_init() {
	if File_npool_oplog_gw_v1_oplog_oplog_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_oplog_gw_v1_oplog_oplog_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOpLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_oplog_gw_v1_oplog_oplog_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOpLogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_oplog_gw_v1_oplog_oplog_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOpLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_oplog_gw_v1_oplog_oplog_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateOpLogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_oplog_gw_v1_oplog_oplog_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOpLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_oplog_gw_v1_oplog_oplog_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOpLogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_oplog_gw_v1_oplog_oplog_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppOpLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_oplog_gw_v1_oplog_oplog_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAppOpLogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_oplog_gw_v1_oplog_oplog_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNAppOpLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_oplog_gw_v1_oplog_oplog_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNAppOpLogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_oplog_gw_v1_oplog_oplog_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_npool_oplog_gw_v1_oplog_oplog_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_oplog_gw_v1_oplog_oplog_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_oplog_gw_v1_oplog_oplog_proto_goTypes,
		DependencyIndexes: file_npool_oplog_gw_v1_oplog_oplog_proto_depIdxs,
		MessageInfos:      file_npool_oplog_gw_v1_oplog_oplog_proto_msgTypes,
	}.Build()
	File_npool_oplog_gw_v1_oplog_oplog_proto = out.File
	file_npool_oplog_gw_v1_oplog_oplog_proto_rawDesc = nil
	file_npool_oplog_gw_v1_oplog_oplog_proto_goTypes = nil
	file_npool_oplog_gw_v1_oplog_oplog_proto_depIdxs = nil
}
