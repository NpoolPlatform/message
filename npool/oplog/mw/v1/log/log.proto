syntax = "proto3";

package oplog.middleware.log.v1;

option go_package = "github.com/NpoolPlatform/message/npool/oplog/mw/v1/log";

import "google/api/annotations.proto";
import "npool/basetypes/v1/httpmethod.proto";
import "npool/basetypes/v1/result.proto";
import "npool/basetypes/v1/conds.proto";

service Middleware {
    rpc CreateLog   (CreateLogRequest)  returns (CreateLogResponse)  {}
    rpc UpdateLog   (UpdateLogRequest)  returns (UpdateLogResponse)  {}
    rpc GetLogs     (GetLogsRequest)    returns (GetLogsResponse)    {}
}

message LogReq {
    optional string AppID           = 10;
    optional string UserID          = 20;
    optional string Path            = 30;
    optional basetypes.v1.HTTPMethod Method = 40;
    optional string Arguments       = 50;
    optional string HumanReadable   = 60;
    optional basetypes.v1.Result Result = 70;
    optional string FailReason      = 80;
}

message Log {
    // @inject_tag: sql:"id"
    uint32          ID              = 10;
    // @inject_tag: sql:"app_id"
    string          AppID           = 20;
    // @inject_tag: sql:"user_id"
    optional string UserID          = 30;
    // @inject_tag: sql:"path"
    string          Path            = 40;
    // @inject_tag: sql:"method"
    string          MethodStr       = 50;
    basetypes.v1.HTTPMethod Method  = 60;
    // @inject_tag: sql:"arguments"
    string          Arguments       = 70;
    // @inject_tag: sql:"old_value"
    string          OldValue        = 80;
    // @inject_tag: sql:"human_readable"
    string          HumanReadable   = 90;
    // @inject_tag: sql:"result"
    string          ResultStr       = 100;
    basetypes.v1.Result Result      = 110;
    // @inject_tag: sql:"fail_reason"
    string          FailReason      = 120;
    // @inject_tag: sql:"created_at"
    uint32          CreatedAt       = 1000;
    // @inject_tag: sql:"updated_at"
    uint32          UpdatedAt       = 1010;
}

message Conds {
    optional basetypes.v1.StringVal AppID  = 10;
    optional basetypes.v1.StringVal UserID = 20;
    optional basetypes.v1.Uint32Val Result = 30;
}

message CreateLogRequest {
    LogReq Info = 10;
}

message CreateLogResponse {
    Log Info = 10;
}

message UpdateLogRequest {
    LogReq Info = 10;
}

message UpdateLogResponse {
    Log Info = 10;
}

message GetLogsRequest {
    Conds  Conds    = 10;
    int32  Offset   = 20;
    int32  Limit    = 30;
}

message GetLogsResponse {
    repeated Log Infos = 10;
    uint32       Total = 20;
}

