// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/miningpool/mw/v1/gooduser/gooduser.proto

package gooduser

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
	CreateGoodUser(ctx context.Context, in *CreateGoodUserRequest, opts ...grpc.CallOption) (*CreateGoodUserResponse, error)
	GetGoodUser(ctx context.Context, in *GetGoodUserRequest, opts ...grpc.CallOption) (*GetGoodUserResponse, error)
	GetGoodUsers(ctx context.Context, in *GetGoodUsersRequest, opts ...grpc.CallOption) (*GetGoodUsersResponse, error)
	GetGoodUserHashRate(ctx context.Context, in *GetGoodUserHashRateRequest, opts ...grpc.CallOption) (*GetGoodUserHashRateResponse, error)
	ExistGoodUser(ctx context.Context, in *ExistGoodUserRequest, opts ...grpc.CallOption) (*ExistGoodUserResponse, error)
	ExistGoodUserConds(ctx context.Context, in *ExistGoodUserCondsRequest, opts ...grpc.CallOption) (*ExistGoodUserCondsResponse, error)
	DeleteGoodUser(ctx context.Context, in *DeleteGoodUserRequest, opts ...grpc.CallOption) (*DeleteGoodUserResponse, error)
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) CreateGoodUser(ctx context.Context, in *CreateGoodUserRequest, opts ...grpc.CallOption) (*CreateGoodUserResponse, error) {
	out := new(CreateGoodUserResponse)
	err := c.cc.Invoke(ctx, "/miningpool.middleware.gooduser.v1.Middleware/CreateGoodUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetGoodUser(ctx context.Context, in *GetGoodUserRequest, opts ...grpc.CallOption) (*GetGoodUserResponse, error) {
	out := new(GetGoodUserResponse)
	err := c.cc.Invoke(ctx, "/miningpool.middleware.gooduser.v1.Middleware/GetGoodUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetGoodUsers(ctx context.Context, in *GetGoodUsersRequest, opts ...grpc.CallOption) (*GetGoodUsersResponse, error) {
	out := new(GetGoodUsersResponse)
	err := c.cc.Invoke(ctx, "/miningpool.middleware.gooduser.v1.Middleware/GetGoodUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetGoodUserHashRate(ctx context.Context, in *GetGoodUserHashRateRequest, opts ...grpc.CallOption) (*GetGoodUserHashRateResponse, error) {
	out := new(GetGoodUserHashRateResponse)
	err := c.cc.Invoke(ctx, "/miningpool.middleware.gooduser.v1.Middleware/GetGoodUserHashRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ExistGoodUser(ctx context.Context, in *ExistGoodUserRequest, opts ...grpc.CallOption) (*ExistGoodUserResponse, error) {
	out := new(ExistGoodUserResponse)
	err := c.cc.Invoke(ctx, "/miningpool.middleware.gooduser.v1.Middleware/ExistGoodUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ExistGoodUserConds(ctx context.Context, in *ExistGoodUserCondsRequest, opts ...grpc.CallOption) (*ExistGoodUserCondsResponse, error) {
	out := new(ExistGoodUserCondsResponse)
	err := c.cc.Invoke(ctx, "/miningpool.middleware.gooduser.v1.Middleware/ExistGoodUserConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) DeleteGoodUser(ctx context.Context, in *DeleteGoodUserRequest, opts ...grpc.CallOption) (*DeleteGoodUserResponse, error) {
	out := new(DeleteGoodUserResponse)
	err := c.cc.Invoke(ctx, "/miningpool.middleware.gooduser.v1.Middleware/DeleteGoodUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
	CreateGoodUser(context.Context, *CreateGoodUserRequest) (*CreateGoodUserResponse, error)
	GetGoodUser(context.Context, *GetGoodUserRequest) (*GetGoodUserResponse, error)
	GetGoodUsers(context.Context, *GetGoodUsersRequest) (*GetGoodUsersResponse, error)
	GetGoodUserHashRate(context.Context, *GetGoodUserHashRateRequest) (*GetGoodUserHashRateResponse, error)
	ExistGoodUser(context.Context, *ExistGoodUserRequest) (*ExistGoodUserResponse, error)
	ExistGoodUserConds(context.Context, *ExistGoodUserCondsRequest) (*ExistGoodUserCondsResponse, error)
	DeleteGoodUser(context.Context, *DeleteGoodUserRequest) (*DeleteGoodUserResponse, error)
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) CreateGoodUser(context.Context, *CreateGoodUserRequest) (*CreateGoodUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGoodUser not implemented")
}
func (UnimplementedMiddlewareServer) GetGoodUser(context.Context, *GetGoodUserRequest) (*GetGoodUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodUser not implemented")
}
func (UnimplementedMiddlewareServer) GetGoodUsers(context.Context, *GetGoodUsersRequest) (*GetGoodUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodUsers not implemented")
}
func (UnimplementedMiddlewareServer) GetGoodUserHashRate(context.Context, *GetGoodUserHashRateRequest) (*GetGoodUserHashRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodUserHashRate not implemented")
}
func (UnimplementedMiddlewareServer) ExistGoodUser(context.Context, *ExistGoodUserRequest) (*ExistGoodUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistGoodUser not implemented")
}
func (UnimplementedMiddlewareServer) ExistGoodUserConds(context.Context, *ExistGoodUserCondsRequest) (*ExistGoodUserCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistGoodUserConds not implemented")
}
func (UnimplementedMiddlewareServer) DeleteGoodUser(context.Context, *DeleteGoodUserRequest) (*DeleteGoodUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGoodUser not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_CreateGoodUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGoodUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateGoodUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/miningpool.middleware.gooduser.v1.Middleware/CreateGoodUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateGoodUser(ctx, req.(*CreateGoodUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetGoodUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoodUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetGoodUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/miningpool.middleware.gooduser.v1.Middleware/GetGoodUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetGoodUser(ctx, req.(*GetGoodUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetGoodUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoodUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetGoodUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/miningpool.middleware.gooduser.v1.Middleware/GetGoodUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetGoodUsers(ctx, req.(*GetGoodUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetGoodUserHashRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoodUserHashRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetGoodUserHashRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/miningpool.middleware.gooduser.v1.Middleware/GetGoodUserHashRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetGoodUserHashRate(ctx, req.(*GetGoodUserHashRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ExistGoodUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistGoodUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ExistGoodUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/miningpool.middleware.gooduser.v1.Middleware/ExistGoodUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ExistGoodUser(ctx, req.(*ExistGoodUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ExistGoodUserConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistGoodUserCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ExistGoodUserConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/miningpool.middleware.gooduser.v1.Middleware/ExistGoodUserConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ExistGoodUserConds(ctx, req.(*ExistGoodUserCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_DeleteGoodUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGoodUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).DeleteGoodUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/miningpool.middleware.gooduser.v1.Middleware/DeleteGoodUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).DeleteGoodUser(ctx, req.(*DeleteGoodUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "miningpool.middleware.gooduser.v1.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGoodUser",
			Handler:    _Middleware_CreateGoodUser_Handler,
		},
		{
			MethodName: "GetGoodUser",
			Handler:    _Middleware_GetGoodUser_Handler,
		},
		{
			MethodName: "GetGoodUsers",
			Handler:    _Middleware_GetGoodUsers_Handler,
		},
		{
			MethodName: "GetGoodUserHashRate",
			Handler:    _Middleware_GetGoodUserHashRate_Handler,
		},
		{
			MethodName: "ExistGoodUser",
			Handler:    _Middleware_ExistGoodUser_Handler,
		},
		{
			MethodName: "ExistGoodUserConds",
			Handler:    _Middleware_ExistGoodUserConds_Handler,
		},
		{
			MethodName: "DeleteGoodUser",
			Handler:    _Middleware_DeleteGoodUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/miningpool/mw/v1/gooduser/gooduser.proto",
}
