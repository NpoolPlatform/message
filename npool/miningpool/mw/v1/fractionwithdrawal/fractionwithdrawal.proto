syntax = "proto3";

package miningpool.middleware.fractionwithdrawal.v1;

option go_package = "github.com/NpoolPlatform/message/npool/miningpool/mw/v1/fractionwithdrawal";

import "google/api/annotations.proto";
import "npool/basetypes/v1/conds.proto";
import "npool/basetypes/miningpool/v1/enums.proto";

// Service Name
service Middleware {
  rpc CreateFractionWithdrawal(CreateFractionWithdrawalRequest)
      returns (CreateFractionWithdrawalResponse) {}
  rpc GetFractionWithdrawal(GetFractionWithdrawalRequest)
      returns (GetFractionWithdrawalResponse) {}
  rpc GetFractionWithdrawals(GetFractionWithdrawalsRequest)
      returns (GetFractionWithdrawalsResponse) {}
  rpc ExistFractionWithdrawal(ExistFractionWithdrawalRequest)
      returns (ExistFractionWithdrawalResponse) {}
  rpc ExistFractionWithdrawalConds(ExistFractionWithdrawalCondsRequest)
      returns (ExistFractionWithdrawalCondsResponse) {}
  rpc UpdateFractionWithdrawal(UpdateFractionWithdrawalRequest)
      returns (UpdateFractionWithdrawalResponse) {}
  rpc DeleteFractionWithdrawal(DeleteFractionWithdrawalRequest)
      returns (DeleteFractionWithdrawalResponse) {
    option (google.api.http) = {
      post : "/v1/miningpool_DeleteFractionWithdrawal"
      body : "*"
    };
  }
}

message FractionWithdrawalReq {
  optional uint32 ID = 10;
  optional string EntID = 20;
  optional string AppID = 30;
  optional string UserID = 40;
  optional string OrderUserID = 50;
  optional string CoinTypeID = 51;
  optional basetypes.miningpool.v1.FractionWithdrawState FractionWithdrawState =
      60;
  optional uint32 WithdrawAt = 70;
  optional uint32 PromisePayAt = 80;
  optional string Msg = 90;
}

message FractionWithdrawal {
  // @inject_tag: sql:"id"
  uint32 ID = 10;
  // @inject_tag: sql:"ent_id"
  string EntID = 20;
  // @inject_tag: sql:"app_id"
  string AppID = 30;
  // @inject_tag: sql:"user_id"
  string UserID = 40;
  // @inject_tag: sql:"order_user_id"
  string OrderUserID = 50;
  // @inject_tag: sql:"coin_type_id"
  string CoinTypeID = 51;
  // @inject_tag: sql:"fraction_withdraw_state"
  string FractionWithdrawStateStr = 60;
  basetypes.miningpool.v1.FractionWithdrawState FractionWithdrawState = 61;
  // @inject_tag: sql:"withdraw_at"
  uint32 WithdrawAt = 70;
  // @inject_tag: sql:"promise_pay_at"
  uint32 PromisePayAt = 80;
  // @inject_tag: sql:"msg"
  string Msg = 90;
  // @inject_tag: sql:"created_at"
  uint32 CreatedAt = 100;
  // @inject_tag: sql:"updated_at"
  uint32 UpdatedAt = 110;
}

message Conds {
  optional basetypes.v1.Uint32Val ID = 9;
  optional basetypes.v1.StringVal EntID = 10;
  optional basetypes.v1.StringVal AppID = 20;
  optional basetypes.v1.StringVal UserID = 30;
  optional basetypes.v1.StringVal OrderUserID = 40;
  optional basetypes.v1.StringVal CoinTypeID = 41;
  optional basetypes.v1.Uint32Val WithdrawState = 50;
  optional basetypes.v1.StringSliceVal EntIDs = 60;
}

message CreateFractionWithdrawalRequest { FractionWithdrawalReq Info = 10; }

message CreateFractionWithdrawalResponse {}

message GetFractionWithdrawalRequest { string EntID = 10; }

message GetFractionWithdrawalResponse { FractionWithdrawal Info = 10; }

message GetFractionWithdrawalsRequest {
  Conds Conds = 10;
  int32 Offset = 20;
  int32 Limit = 30;
}

message GetFractionWithdrawalsResponse {
  repeated FractionWithdrawal Infos = 10;
  uint32 Total = 20;
}

message ExistFractionWithdrawalRequest { string EntID = 10; }

message ExistFractionWithdrawalResponse { bool Info = 10; }

message ExistFractionWithdrawalCondsRequest { Conds Conds = 10; }

message ExistFractionWithdrawalCondsResponse { bool Info = 10; }

message UpdateFractionWithdrawalRequest { FractionWithdrawalReq Info = 10; }

message UpdateFractionWithdrawalResponse {}

message DeleteFractionWithdrawalRequest { FractionWithdrawalReq Info = 10; }

message DeleteFractionWithdrawalResponse {}
