// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/miningpool/mw/v1/orderuser/orderuser.proto

package orderuser

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Middleware_CreateOrderUser_FullMethodName        = "/miningpool.middleware.orderuser.v1.Middleware/CreateOrderUser"
	Middleware_GetOrderUser_FullMethodName           = "/miningpool.middleware.orderuser.v1.Middleware/GetOrderUser"
	Middleware_GetOrderUsers_FullMethodName          = "/miningpool.middleware.orderuser.v1.Middleware/GetOrderUsers"
	Middleware_GetOrderUserProportion_FullMethodName = "/miningpool.middleware.orderuser.v1.Middleware/GetOrderUserProportion"
	Middleware_GetOrderUserBalance_FullMethodName    = "/miningpool.middleware.orderuser.v1.Middleware/GetOrderUserBalance"
	Middleware_ExistOrderUser_FullMethodName         = "/miningpool.middleware.orderuser.v1.Middleware/ExistOrderUser"
	Middleware_ExistOrderUserConds_FullMethodName    = "/miningpool.middleware.orderuser.v1.Middleware/ExistOrderUserConds"
	Middleware_UpdateOrderUser_FullMethodName        = "/miningpool.middleware.orderuser.v1.Middleware/UpdateOrderUser"
	Middleware_DeleteOrderUser_FullMethodName        = "/miningpool.middleware.orderuser.v1.Middleware/DeleteOrderUser"
)

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
	CreateOrderUser(ctx context.Context, in *CreateOrderUserRequest, opts ...grpc.CallOption) (*CreateOrderUserResponse, error)
	GetOrderUser(ctx context.Context, in *GetOrderUserRequest, opts ...grpc.CallOption) (*GetOrderUserResponse, error)
	GetOrderUsers(ctx context.Context, in *GetOrderUsersRequest, opts ...grpc.CallOption) (*GetOrderUsersResponse, error)
	GetOrderUserProportion(ctx context.Context, in *GetOrderUserProportionRequest, opts ...grpc.CallOption) (*GetOrderUserProportionResponse, error)
	GetOrderUserBalance(ctx context.Context, in *GetOrderUserBalanceRequest, opts ...grpc.CallOption) (*GetOrderUserBalanceResponse, error)
	ExistOrderUser(ctx context.Context, in *ExistOrderUserRequest, opts ...grpc.CallOption) (*ExistOrderUserResponse, error)
	ExistOrderUserConds(ctx context.Context, in *ExistOrderUserCondsRequest, opts ...grpc.CallOption) (*ExistOrderUserCondsResponse, error)
	UpdateOrderUser(ctx context.Context, in *UpdateOrderUserRequest, opts ...grpc.CallOption) (*UpdateOrderUserResponse, error)
	DeleteOrderUser(ctx context.Context, in *DeleteOrderUserRequest, opts ...grpc.CallOption) (*DeleteOrderUserResponse, error)
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) CreateOrderUser(ctx context.Context, in *CreateOrderUserRequest, opts ...grpc.CallOption) (*CreateOrderUserResponse, error) {
	out := new(CreateOrderUserResponse)
	err := c.cc.Invoke(ctx, Middleware_CreateOrderUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetOrderUser(ctx context.Context, in *GetOrderUserRequest, opts ...grpc.CallOption) (*GetOrderUserResponse, error) {
	out := new(GetOrderUserResponse)
	err := c.cc.Invoke(ctx, Middleware_GetOrderUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetOrderUsers(ctx context.Context, in *GetOrderUsersRequest, opts ...grpc.CallOption) (*GetOrderUsersResponse, error) {
	out := new(GetOrderUsersResponse)
	err := c.cc.Invoke(ctx, Middleware_GetOrderUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetOrderUserProportion(ctx context.Context, in *GetOrderUserProportionRequest, opts ...grpc.CallOption) (*GetOrderUserProportionResponse, error) {
	out := new(GetOrderUserProportionResponse)
	err := c.cc.Invoke(ctx, Middleware_GetOrderUserProportion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetOrderUserBalance(ctx context.Context, in *GetOrderUserBalanceRequest, opts ...grpc.CallOption) (*GetOrderUserBalanceResponse, error) {
	out := new(GetOrderUserBalanceResponse)
	err := c.cc.Invoke(ctx, Middleware_GetOrderUserBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ExistOrderUser(ctx context.Context, in *ExistOrderUserRequest, opts ...grpc.CallOption) (*ExistOrderUserResponse, error) {
	out := new(ExistOrderUserResponse)
	err := c.cc.Invoke(ctx, Middleware_ExistOrderUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ExistOrderUserConds(ctx context.Context, in *ExistOrderUserCondsRequest, opts ...grpc.CallOption) (*ExistOrderUserCondsResponse, error) {
	out := new(ExistOrderUserCondsResponse)
	err := c.cc.Invoke(ctx, Middleware_ExistOrderUserConds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) UpdateOrderUser(ctx context.Context, in *UpdateOrderUserRequest, opts ...grpc.CallOption) (*UpdateOrderUserResponse, error) {
	out := new(UpdateOrderUserResponse)
	err := c.cc.Invoke(ctx, Middleware_UpdateOrderUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) DeleteOrderUser(ctx context.Context, in *DeleteOrderUserRequest, opts ...grpc.CallOption) (*DeleteOrderUserResponse, error) {
	out := new(DeleteOrderUserResponse)
	err := c.cc.Invoke(ctx, Middleware_DeleteOrderUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
	CreateOrderUser(context.Context, *CreateOrderUserRequest) (*CreateOrderUserResponse, error)
	GetOrderUser(context.Context, *GetOrderUserRequest) (*GetOrderUserResponse, error)
	GetOrderUsers(context.Context, *GetOrderUsersRequest) (*GetOrderUsersResponse, error)
	GetOrderUserProportion(context.Context, *GetOrderUserProportionRequest) (*GetOrderUserProportionResponse, error)
	GetOrderUserBalance(context.Context, *GetOrderUserBalanceRequest) (*GetOrderUserBalanceResponse, error)
	ExistOrderUser(context.Context, *ExistOrderUserRequest) (*ExistOrderUserResponse, error)
	ExistOrderUserConds(context.Context, *ExistOrderUserCondsRequest) (*ExistOrderUserCondsResponse, error)
	UpdateOrderUser(context.Context, *UpdateOrderUserRequest) (*UpdateOrderUserResponse, error)
	DeleteOrderUser(context.Context, *DeleteOrderUserRequest) (*DeleteOrderUserResponse, error)
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) CreateOrderUser(context.Context, *CreateOrderUserRequest) (*CreateOrderUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrderUser not implemented")
}
func (UnimplementedMiddlewareServer) GetOrderUser(context.Context, *GetOrderUserRequest) (*GetOrderUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderUser not implemented")
}
func (UnimplementedMiddlewareServer) GetOrderUsers(context.Context, *GetOrderUsersRequest) (*GetOrderUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderUsers not implemented")
}
func (UnimplementedMiddlewareServer) GetOrderUserProportion(context.Context, *GetOrderUserProportionRequest) (*GetOrderUserProportionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderUserProportion not implemented")
}
func (UnimplementedMiddlewareServer) GetOrderUserBalance(context.Context, *GetOrderUserBalanceRequest) (*GetOrderUserBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderUserBalance not implemented")
}
func (UnimplementedMiddlewareServer) ExistOrderUser(context.Context, *ExistOrderUserRequest) (*ExistOrderUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistOrderUser not implemented")
}
func (UnimplementedMiddlewareServer) ExistOrderUserConds(context.Context, *ExistOrderUserCondsRequest) (*ExistOrderUserCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistOrderUserConds not implemented")
}
func (UnimplementedMiddlewareServer) UpdateOrderUser(context.Context, *UpdateOrderUserRequest) (*UpdateOrderUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderUser not implemented")
}
func (UnimplementedMiddlewareServer) DeleteOrderUser(context.Context, *DeleteOrderUserRequest) (*DeleteOrderUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrderUser not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_CreateOrderUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateOrderUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_CreateOrderUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateOrderUser(ctx, req.(*CreateOrderUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetOrderUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetOrderUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetOrderUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetOrderUser(ctx, req.(*GetOrderUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetOrderUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetOrderUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetOrderUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetOrderUsers(ctx, req.(*GetOrderUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetOrderUserProportion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderUserProportionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetOrderUserProportion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetOrderUserProportion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetOrderUserProportion(ctx, req.(*GetOrderUserProportionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetOrderUserBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderUserBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetOrderUserBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetOrderUserBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetOrderUserBalance(ctx, req.(*GetOrderUserBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ExistOrderUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistOrderUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ExistOrderUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_ExistOrderUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ExistOrderUser(ctx, req.(*ExistOrderUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ExistOrderUserConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistOrderUserCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ExistOrderUserConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_ExistOrderUserConds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ExistOrderUserConds(ctx, req.(*ExistOrderUserCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_UpdateOrderUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).UpdateOrderUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_UpdateOrderUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).UpdateOrderUser(ctx, req.(*UpdateOrderUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_DeleteOrderUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOrderUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).DeleteOrderUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_DeleteOrderUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).DeleteOrderUser(ctx, req.(*DeleteOrderUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "miningpool.middleware.orderuser.v1.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrderUser",
			Handler:    _Middleware_CreateOrderUser_Handler,
		},
		{
			MethodName: "GetOrderUser",
			Handler:    _Middleware_GetOrderUser_Handler,
		},
		{
			MethodName: "GetOrderUsers",
			Handler:    _Middleware_GetOrderUsers_Handler,
		},
		{
			MethodName: "GetOrderUserProportion",
			Handler:    _Middleware_GetOrderUserProportion_Handler,
		},
		{
			MethodName: "GetOrderUserBalance",
			Handler:    _Middleware_GetOrderUserBalance_Handler,
		},
		{
			MethodName: "ExistOrderUser",
			Handler:    _Middleware_ExistOrderUser_Handler,
		},
		{
			MethodName: "ExistOrderUserConds",
			Handler:    _Middleware_ExistOrderUserConds_Handler,
		},
		{
			MethodName: "UpdateOrderUser",
			Handler:    _Middleware_UpdateOrderUser_Handler,
		},
		{
			MethodName: "DeleteOrderUser",
			Handler:    _Middleware_DeleteOrderUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/miningpool/mw/v1/orderuser/orderuser.proto",
}
