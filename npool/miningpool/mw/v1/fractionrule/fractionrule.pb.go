// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.18.1
// source: npool/miningpool/mw/v1/fractionrule/fractionrule.proto

package fraction

import (
	v1 "github.com/NpoolPlatform/message/npool/basetypes/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FractionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               *uint32  `protobuf:"varint,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID            *string  `protobuf:"bytes,20,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	MiningpoolName   *string  `protobuf:"bytes,30,opt,name=MiningpoolName,proto3,oneof" json:"MiningpoolName,omitempty"`
	CoinNmae         *string  `protobuf:"bytes,40,opt,name=CoinNmae,proto3,oneof" json:"CoinNmae,omitempty"`
	WithdrawInterval *uint32  `protobuf:"varint,50,opt,name=WithdrawInterval,proto3,oneof" json:"WithdrawInterval,omitempty"`
	MinAmount        *float32 `protobuf:"fixed32,60,opt,name=MinAmount,proto3,oneof" json:"MinAmount,omitempty"`
	WithdrawRate     *float32 `protobuf:"fixed32,70,opt,name=WithdrawRate,proto3,oneof" json:"WithdrawRate,omitempty"`
}

func (x *FractionReq) Reset() {
	*x = FractionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FractionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FractionReq) ProtoMessage() {}

func (x *FractionReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FractionReq.ProtoReflect.Descriptor instead.
func (*FractionReq) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_rawDescGZIP(), []int{0}
}

func (x *FractionReq) GetID() uint32 {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return 0
}

func (x *FractionReq) GetEntID() string {
	if x != nil && x.EntID != nil {
		return *x.EntID
	}
	return ""
}

func (x *FractionReq) GetMiningpoolName() string {
	if x != nil && x.MiningpoolName != nil {
		return *x.MiningpoolName
	}
	return ""
}

func (x *FractionReq) GetCoinNmae() string {
	if x != nil && x.CoinNmae != nil {
		return *x.CoinNmae
	}
	return ""
}

func (x *FractionReq) GetWithdrawInterval() uint32 {
	if x != nil && x.WithdrawInterval != nil {
		return *x.WithdrawInterval
	}
	return 0
}

func (x *FractionReq) GetMinAmount() float32 {
	if x != nil && x.MinAmount != nil {
		return *x.MinAmount
	}
	return 0
}

func (x *FractionReq) GetWithdrawRate() float32 {
	if x != nil && x.WithdrawRate != nil {
		return *x.WithdrawRate
	}
	return 0
}

type Fraction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: sql:"id"
	ID uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty" sql:"id"`
	// @inject_tag: sql:"ent_id"
	EntID string `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty" sql:"ent_id"`
	// @inject_tag: sql:"miningpool_name"
	MiningpoolName string `protobuf:"bytes,30,opt,name=MiningpoolName,proto3" json:"MiningpoolName,omitempty" sql:"miningpool_name"`
	// @inject_tag: sql:"coin_nmae"
	CoinNmae string `protobuf:"bytes,40,opt,name=CoinNmae,proto3" json:"CoinNmae,omitempty" sql:"coin_nmae"`
	// @inject_tag: sql:"withdraw_interval"
	WithdrawInterval uint32 `protobuf:"varint,50,opt,name=WithdrawInterval,proto3" json:"WithdrawInterval,omitempty" sql:"withdraw_interval"`
	// @inject_tag: sql:"min_amount"
	MinAmount float32 `protobuf:"fixed32,60,opt,name=MinAmount,proto3" json:"MinAmount,omitempty" sql:"min_amount"`
	// @inject_tag: sql:"withdraw_rate"
	WithdrawRate float32 `protobuf:"fixed32,70,opt,name=WithdrawRate,proto3" json:"WithdrawRate,omitempty" sql:"withdraw_rate"`
	// @inject_tag: sql:"created_at"
	CreatedAt uint32 `protobuf:"varint,170,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
	// @inject_tag: sql:"updated_at"
	UpdatedAt uint32 `protobuf:"varint,180,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty" sql:"updated_at"`
}

func (x *Fraction) Reset() {
	*x = Fraction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fraction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fraction) ProtoMessage() {}

func (x *Fraction) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fraction.ProtoReflect.Descriptor instead.
func (*Fraction) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_rawDescGZIP(), []int{1}
}

func (x *Fraction) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Fraction) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *Fraction) GetMiningpoolName() string {
	if x != nil {
		return x.MiningpoolName
	}
	return ""
}

func (x *Fraction) GetCoinNmae() string {
	if x != nil {
		return x.CoinNmae
	}
	return ""
}

func (x *Fraction) GetWithdrawInterval() uint32 {
	if x != nil {
		return x.WithdrawInterval
	}
	return 0
}

func (x *Fraction) GetMinAmount() float32 {
	if x != nil {
		return x.MinAmount
	}
	return 0
}

func (x *Fraction) GetWithdrawRate() float32 {
	if x != nil {
		return x.WithdrawRate
	}
	return 0
}

func (x *Fraction) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Fraction) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntID            *v1.StringVal      `protobuf:"bytes,10,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	MiningpoolName   *v1.StringVal      `protobuf:"bytes,20,opt,name=MiningpoolName,proto3,oneof" json:"MiningpoolName,omitempty"`
	CoinNmae         *v1.StringVal      `protobuf:"bytes,30,opt,name=CoinNmae,proto3,oneof" json:"CoinNmae,omitempty"`
	WithdrawInterval *v1.Uint32Val      `protobuf:"bytes,40,opt,name=WithdrawInterval,proto3,oneof" json:"WithdrawInterval,omitempty"`
	EntIDs           *v1.StringSliceVal `protobuf:"bytes,70,opt,name=EntIDs,proto3,oneof" json:"EntIDs,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetEntID() *v1.StringVal {
	if x != nil {
		return x.EntID
	}
	return nil
}

func (x *Conds) GetMiningpoolName() *v1.StringVal {
	if x != nil {
		return x.MiningpoolName
	}
	return nil
}

func (x *Conds) GetCoinNmae() *v1.StringVal {
	if x != nil {
		return x.CoinNmae
	}
	return nil
}

func (x *Conds) GetWithdrawInterval() *v1.Uint32Val {
	if x != nil {
		return x.WithdrawInterval
	}
	return nil
}

func (x *Conds) GetEntIDs() *v1.StringSliceVal {
	if x != nil {
		return x.EntIDs
	}
	return nil
}

type CreateFractionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *FractionReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateFractionRequest) Reset() {
	*x = CreateFractionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFractionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFractionRequest) ProtoMessage() {}

func (x *CreateFractionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFractionRequest.ProtoReflect.Descriptor instead.
func (*CreateFractionRequest) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_rawDescGZIP(), []int{3}
}

func (x *CreateFractionRequest) GetInfo() *FractionReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateFractionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Fraction `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateFractionResponse) Reset() {
	*x = CreateFractionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFractionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFractionResponse) ProtoMessage() {}

func (x *CreateFractionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFractionResponse.ProtoReflect.Descriptor instead.
func (*CreateFractionResponse) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_rawDescGZIP(), []int{4}
}

func (x *CreateFractionResponse) GetInfo() *Fraction {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateFractionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*FractionReq `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateFractionsRequest) Reset() {
	*x = CreateFractionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFractionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFractionsRequest) ProtoMessage() {}

func (x *CreateFractionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFractionsRequest.ProtoReflect.Descriptor instead.
func (*CreateFractionsRequest) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_rawDescGZIP(), []int{5}
}

func (x *CreateFractionsRequest) GetInfos() []*FractionReq {
	if x != nil {
		return x.Infos
	}
	return nil
}

type CreateFractionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Fraction `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateFractionsResponse) Reset() {
	*x = CreateFractionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateFractionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFractionsResponse) ProtoMessage() {}

func (x *CreateFractionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFractionsResponse.ProtoReflect.Descriptor instead.
func (*CreateFractionsResponse) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_rawDescGZIP(), []int{6}
}

func (x *CreateFractionsResponse) GetInfos() []*Fraction {
	if x != nil {
		return x.Infos
	}
	return nil
}

type GetFractionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntID string `protobuf:"bytes,10,opt,name=EntID,proto3" json:"EntID,omitempty"`
}

func (x *GetFractionRequest) Reset() {
	*x = GetFractionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFractionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFractionRequest) ProtoMessage() {}

func (x *GetFractionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFractionRequest.ProtoReflect.Descriptor instead.
func (*GetFractionRequest) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_rawDescGZIP(), []int{7}
}

func (x *GetFractionRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

type GetFractionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Fraction `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetFractionResponse) Reset() {
	*x = GetFractionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFractionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFractionResponse) ProtoMessage() {}

func (x *GetFractionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFractionResponse.ProtoReflect.Descriptor instead.
func (*GetFractionResponse) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_rawDescGZIP(), []int{8}
}

func (x *GetFractionResponse) GetInfo() *Fraction {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetFractionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetFractionsRequest) Reset() {
	*x = GetFractionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFractionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFractionsRequest) ProtoMessage() {}

func (x *GetFractionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFractionsRequest.ProtoReflect.Descriptor instead.
func (*GetFractionsRequest) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_rawDescGZIP(), []int{9}
}

func (x *GetFractionsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetFractionsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetFractionsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetFractionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Fraction `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32      `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetFractionsResponse) Reset() {
	*x = GetFractionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFractionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFractionsResponse) ProtoMessage() {}

func (x *GetFractionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFractionsResponse.ProtoReflect.Descriptor instead.
func (*GetFractionsResponse) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_rawDescGZIP(), []int{10}
}

func (x *GetFractionsResponse) GetInfos() []*Fraction {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetFractionsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ExistFractionCondsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *ExistFractionCondsRequest) Reset() {
	*x = ExistFractionCondsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistFractionCondsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistFractionCondsRequest) ProtoMessage() {}

func (x *ExistFractionCondsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistFractionCondsRequest.ProtoReflect.Descriptor instead.
func (*ExistFractionCondsRequest) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_rawDescGZIP(), []int{11}
}

func (x *ExistFractionCondsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type ExistFractionCondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistFractionCondsResponse) Reset() {
	*x = ExistFractionCondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistFractionCondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistFractionCondsResponse) ProtoMessage() {}

func (x *ExistFractionCondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistFractionCondsResponse.ProtoReflect.Descriptor instead.
func (*ExistFractionCondsResponse) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_rawDescGZIP(), []int{12}
}

func (x *ExistFractionCondsResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type UpdateFractionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *FractionReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateFractionRequest) Reset() {
	*x = UpdateFractionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFractionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFractionRequest) ProtoMessage() {}

func (x *UpdateFractionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFractionRequest.ProtoReflect.Descriptor instead.
func (*UpdateFractionRequest) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateFractionRequest) GetInfo() *FractionReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateFractionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Fraction `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateFractionResponse) Reset() {
	*x = UpdateFractionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateFractionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateFractionResponse) ProtoMessage() {}

func (x *UpdateFractionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateFractionResponse.ProtoReflect.Descriptor instead.
func (*UpdateFractionResponse) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateFractionResponse) GetInfo() *Fraction {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_miningpool_mw_v1_fractionrule_fractionrule_proto protoreflect.FileDescriptor

var file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_rawDesc = []byte{
	0x0a, 0x36, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f,
	0x6f, 0x6c, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x75,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x6e, 0x70, 0x6f,
	0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xed, 0x02, 0x0a, 0x0b,
	0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x4d,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0e, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e,
	0x4e, 0x6d, 0x61, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x43, 0x6f,
	0x69, 0x6e, 0x4e, 0x6d, 0x61, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x10, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x4d, 0x69,
	0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x02, 0x48, 0x05, 0x52,
	0x09, 0x4d, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a,
	0x0c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x61, 0x74, 0x65, 0x18, 0x46, 0x20,
	0x01, 0x28, 0x02, 0x48, 0x06, 0x52, 0x0c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52,
	0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x4d, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x43,
	0x6f, 0x69, 0x6e, 0x4e, 0x6d, 0x61, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x4d, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x61, 0x74, 0x65, 0x22, 0xa0, 0x02, 0x0a, 0x08,
	0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x26,
	0x0a, 0x0e, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f,
	0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x6d,
	0x61, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x6d,
	0x61, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x1c,
	0x0a, 0x09, 0x4d, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x09, 0x4d, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x61, 0x74, 0x65, 0x18, 0x46, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x1d, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xaa, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1d, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0xb4, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x8a,
	0x03, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x48, 0x00, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0e,
	0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x01, 0x52,
	0x0e, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x38, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x6d, 0x61, 0x65, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x02, 0x52,
	0x08, 0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x6d, 0x61, 0x65, 0x88, 0x01, 0x01, 0x12, 0x48, 0x0a, 0x10,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48,
	0x03, 0x52, 0x10, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x06, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x73,
	0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63,
	0x65, 0x56, 0x61, 0x6c, 0x48, 0x04, 0x52, 0x06, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x88, 0x01,
	0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x6d, 0x61, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f,
	0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x22, 0x5b, 0x0a, 0x15, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x66, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x59, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x5e, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a,
	0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6d,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x05, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x22, 0x5c, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41,
	0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x22, 0x2a, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x56, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x66, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x83, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x46, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a,
	0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x6f, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x66, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x5b, 0x0a, 0x19,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x05, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x30, 0x0a, 0x1a, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5b, 0x0a, 0x15, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x66, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x59, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x32, 0xc7, 0x06, 0x0a, 0x0a, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x66, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x39, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a,
	0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x39, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x6d, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7e, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x36, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x36, 0x2e, 0x6d, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x66, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x93, 0x01,
	0x0a, 0x12, 0x45, 0x78, 0x69, 0x73, 0x74, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x3c, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f,
	0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x66, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x46, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x66, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x46, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x66,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x39, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x42, 0x5a,
	0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f,
	0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f,
	0x6f, 0x6c, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_rawDescOnce sync.Once
	file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_rawDescData = file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_rawDesc
)

func file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_rawDescGZIP() []byte {
	file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_rawDescOnce.Do(func() {
		file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_rawDescData)
	})
	return file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_rawDescData
}

var file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_goTypes = []interface{}{
	(*FractionReq)(nil),                // 0: miningpool.middleware.fraction.v1.FractionReq
	(*Fraction)(nil),                   // 1: miningpool.middleware.fraction.v1.Fraction
	(*Conds)(nil),                      // 2: miningpool.middleware.fraction.v1.Conds
	(*CreateFractionRequest)(nil),      // 3: miningpool.middleware.fraction.v1.CreateFractionRequest
	(*CreateFractionResponse)(nil),     // 4: miningpool.middleware.fraction.v1.CreateFractionResponse
	(*CreateFractionsRequest)(nil),     // 5: miningpool.middleware.fraction.v1.CreateFractionsRequest
	(*CreateFractionsResponse)(nil),    // 6: miningpool.middleware.fraction.v1.CreateFractionsResponse
	(*GetFractionRequest)(nil),         // 7: miningpool.middleware.fraction.v1.GetFractionRequest
	(*GetFractionResponse)(nil),        // 8: miningpool.middleware.fraction.v1.GetFractionResponse
	(*GetFractionsRequest)(nil),        // 9: miningpool.middleware.fraction.v1.GetFractionsRequest
	(*GetFractionsResponse)(nil),       // 10: miningpool.middleware.fraction.v1.GetFractionsResponse
	(*ExistFractionCondsRequest)(nil),  // 11: miningpool.middleware.fraction.v1.ExistFractionCondsRequest
	(*ExistFractionCondsResponse)(nil), // 12: miningpool.middleware.fraction.v1.ExistFractionCondsResponse
	(*UpdateFractionRequest)(nil),      // 13: miningpool.middleware.fraction.v1.UpdateFractionRequest
	(*UpdateFractionResponse)(nil),     // 14: miningpool.middleware.fraction.v1.UpdateFractionResponse
	(*v1.StringVal)(nil),               // 15: basetypes.v1.StringVal
	(*v1.Uint32Val)(nil),               // 16: basetypes.v1.Uint32Val
	(*v1.StringSliceVal)(nil),          // 17: basetypes.v1.StringSliceVal
}
var file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_depIdxs = []int32{
	15, // 0: miningpool.middleware.fraction.v1.Conds.EntID:type_name -> basetypes.v1.StringVal
	15, // 1: miningpool.middleware.fraction.v1.Conds.MiningpoolName:type_name -> basetypes.v1.StringVal
	15, // 2: miningpool.middleware.fraction.v1.Conds.CoinNmae:type_name -> basetypes.v1.StringVal
	16, // 3: miningpool.middleware.fraction.v1.Conds.WithdrawInterval:type_name -> basetypes.v1.Uint32Val
	17, // 4: miningpool.middleware.fraction.v1.Conds.EntIDs:type_name -> basetypes.v1.StringSliceVal
	0,  // 5: miningpool.middleware.fraction.v1.CreateFractionRequest.Info:type_name -> miningpool.middleware.fraction.v1.FractionReq
	1,  // 6: miningpool.middleware.fraction.v1.CreateFractionResponse.Info:type_name -> miningpool.middleware.fraction.v1.Fraction
	0,  // 7: miningpool.middleware.fraction.v1.CreateFractionsRequest.Infos:type_name -> miningpool.middleware.fraction.v1.FractionReq
	1,  // 8: miningpool.middleware.fraction.v1.CreateFractionsResponse.Infos:type_name -> miningpool.middleware.fraction.v1.Fraction
	1,  // 9: miningpool.middleware.fraction.v1.GetFractionResponse.Info:type_name -> miningpool.middleware.fraction.v1.Fraction
	2,  // 10: miningpool.middleware.fraction.v1.GetFractionsRequest.Conds:type_name -> miningpool.middleware.fraction.v1.Conds
	1,  // 11: miningpool.middleware.fraction.v1.GetFractionsResponse.Infos:type_name -> miningpool.middleware.fraction.v1.Fraction
	2,  // 12: miningpool.middleware.fraction.v1.ExistFractionCondsRequest.Conds:type_name -> miningpool.middleware.fraction.v1.Conds
	0,  // 13: miningpool.middleware.fraction.v1.UpdateFractionRequest.Info:type_name -> miningpool.middleware.fraction.v1.FractionReq
	1,  // 14: miningpool.middleware.fraction.v1.UpdateFractionResponse.Info:type_name -> miningpool.middleware.fraction.v1.Fraction
	3,  // 15: miningpool.middleware.fraction.v1.Middleware.CreateFraction:input_type -> miningpool.middleware.fraction.v1.CreateFractionRequest
	5,  // 16: miningpool.middleware.fraction.v1.Middleware.CreateFractions:input_type -> miningpool.middleware.fraction.v1.CreateFractionsRequest
	7,  // 17: miningpool.middleware.fraction.v1.Middleware.GetFraction:input_type -> miningpool.middleware.fraction.v1.GetFractionRequest
	9,  // 18: miningpool.middleware.fraction.v1.Middleware.GetFractions:input_type -> miningpool.middleware.fraction.v1.GetFractionsRequest
	11, // 19: miningpool.middleware.fraction.v1.Middleware.ExistFractionConds:input_type -> miningpool.middleware.fraction.v1.ExistFractionCondsRequest
	13, // 20: miningpool.middleware.fraction.v1.Middleware.UpdateFraction:input_type -> miningpool.middleware.fraction.v1.UpdateFractionRequest
	4,  // 21: miningpool.middleware.fraction.v1.Middleware.CreateFraction:output_type -> miningpool.middleware.fraction.v1.CreateFractionResponse
	6,  // 22: miningpool.middleware.fraction.v1.Middleware.CreateFractions:output_type -> miningpool.middleware.fraction.v1.CreateFractionsResponse
	8,  // 23: miningpool.middleware.fraction.v1.Middleware.GetFraction:output_type -> miningpool.middleware.fraction.v1.GetFractionResponse
	10, // 24: miningpool.middleware.fraction.v1.Middleware.GetFractions:output_type -> miningpool.middleware.fraction.v1.GetFractionsResponse
	12, // 25: miningpool.middleware.fraction.v1.Middleware.ExistFractionConds:output_type -> miningpool.middleware.fraction.v1.ExistFractionCondsResponse
	14, // 26: miningpool.middleware.fraction.v1.Middleware.UpdateFraction:output_type -> miningpool.middleware.fraction.v1.UpdateFractionResponse
	21, // [21:27] is the sub-list for method output_type
	15, // [15:21] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_init() }
func file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_init() {
	if File_npool_miningpool_mw_v1_fractionrule_fractionrule_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FractionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fraction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFractionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFractionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFractionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateFractionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFractionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFractionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFractionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFractionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistFractionCondsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistFractionCondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFractionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateFractionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_goTypes,
		DependencyIndexes: file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_depIdxs,
		MessageInfos:      file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes,
	}.Build()
	File_npool_miningpool_mw_v1_fractionrule_fractionrule_proto = out.File
	file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_rawDesc = nil
	file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_goTypes = nil
	file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_depIdxs = nil
}
