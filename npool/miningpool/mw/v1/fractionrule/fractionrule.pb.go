// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.18.1
// source: npool/miningpool/mw/v1/fractionrule/fractionrule.proto

package fractionrule

import (
	v1 "github.com/NpoolPlatform/message/npool/basetypes/miningpool/v1"
	_ "github.com/NpoolPlatform/message/npool/basetypes/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FractionRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MiningpoolType  v1.MiningpoolType `protobuf:"varint,10,opt,name=MiningpoolType,proto3,enum=basetypes.miningpool.v1.MiningpoolType" json:"MiningpoolType,omitempty"`
	CoinType        v1.CoinType       `protobuf:"varint,20,opt,name=CoinType,proto3,enum=basetypes.miningpool.v1.CoinType" json:"CoinType,omitempty"`
	WithdrawInterva uint32            `protobuf:"varint,30,opt,name=WithdrawInterva,proto3" json:"WithdrawInterva,omitempty"`
	MinAmount       float32           `protobuf:"fixed32,40,opt,name=MinAmount,proto3" json:"MinAmount,omitempty"`
	WithdrawRate    float32           `protobuf:"fixed32,50,opt,name=WithdrawRate,proto3" json:"WithdrawRate,omitempty"`
}

func (x *FractionRule) Reset() {
	*x = FractionRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FractionRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FractionRule) ProtoMessage() {}

func (x *FractionRule) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FractionRule.ProtoReflect.Descriptor instead.
func (*FractionRule) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_rawDescGZIP(), []int{0}
}

func (x *FractionRule) GetMiningpoolType() v1.MiningpoolType {
	if x != nil {
		return x.MiningpoolType
	}
	return v1.MiningpoolType(0)
}

func (x *FractionRule) GetCoinType() v1.CoinType {
	if x != nil {
		return x.CoinType
	}
	return v1.CoinType(0)
}

func (x *FractionRule) GetWithdrawInterva() uint32 {
	if x != nil {
		return x.WithdrawInterva
	}
	return 0
}

func (x *FractionRule) GetMinAmount() float32 {
	if x != nil {
		return x.MinAmount
	}
	return 0
}

func (x *FractionRule) GetWithdrawRate() float32 {
	if x != nil {
		return x.WithdrawRate
	}
	return 0
}

type GetFractionRulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetFractionRulesRequest) Reset() {
	*x = GetFractionRulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFractionRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFractionRulesRequest) ProtoMessage() {}

func (x *GetFractionRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFractionRulesRequest.ProtoReflect.Descriptor instead.
func (*GetFractionRulesRequest) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_rawDescGZIP(), []int{1}
}

type GetFractionRulesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*FractionRule `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *GetFractionRulesResponse) Reset() {
	*x = GetFractionRulesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFractionRulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFractionRulesResponse) ProtoMessage() {}

func (x *GetFractionRulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFractionRulesResponse.ProtoReflect.Descriptor instead.
func (*GetFractionRulesResponse) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_rawDescGZIP(), []int{2}
}

func (x *GetFractionRulesResponse) GetInfos() []*FractionRule {
	if x != nil {
		return x.Infos
	}
	return nil
}

var File_npool_miningpool_mw_v1_fractionrule_fractionrule_proto protoreflect.FileDescriptor

var file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_rawDesc = []byte{
	0x0a, 0x36, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f,
	0x6f, 0x6c, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x75,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x25, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x1a,
	0x29, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2f, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x6e, 0x70, 0x6f, 0x6f,
	0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8a, 0x02, 0x0a, 0x0c, 0x46,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x4f, 0x0a, 0x0e, 0x4d,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x4d, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x08,
	0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x4d, 0x69, 0x6e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52,
	0x61, 0x74, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x52, 0x61, 0x74, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x46, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x65, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49,
	0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x75,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x32, 0xa4, 0x01, 0x0a, 0x0a, 0x4d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x12, 0x95, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x3e, 0x2e,
	0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x75,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e,
	0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x75,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x42, 0x46, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e,
	0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6d, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x72, 0x75, 0x6c, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_rawDescOnce sync.Once
	file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_rawDescData = file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_rawDesc
)

func file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_rawDescGZIP() []byte {
	file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_rawDescOnce.Do(func() {
		file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_rawDescData)
	})
	return file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_rawDescData
}

var file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_goTypes = []interface{}{
	(*FractionRule)(nil),             // 0: miningpool.middleware.fractionrule.v1.FractionRule
	(*GetFractionRulesRequest)(nil),  // 1: miningpool.middleware.fractionrule.v1.GetFractionRulesRequest
	(*GetFractionRulesResponse)(nil), // 2: miningpool.middleware.fractionrule.v1.GetFractionRulesResponse
	(v1.MiningpoolType)(0),           // 3: basetypes.miningpool.v1.MiningpoolType
	(v1.CoinType)(0),                 // 4: basetypes.miningpool.v1.CoinType
}
var file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_depIdxs = []int32{
	3, // 0: miningpool.middleware.fractionrule.v1.FractionRule.MiningpoolType:type_name -> basetypes.miningpool.v1.MiningpoolType
	4, // 1: miningpool.middleware.fractionrule.v1.FractionRule.CoinType:type_name -> basetypes.miningpool.v1.CoinType
	0, // 2: miningpool.middleware.fractionrule.v1.GetFractionRulesResponse.Infos:type_name -> miningpool.middleware.fractionrule.v1.FractionRule
	1, // 3: miningpool.middleware.fractionrule.v1.Middleware.GetFractionRules:input_type -> miningpool.middleware.fractionrule.v1.GetFractionRulesRequest
	2, // 4: miningpool.middleware.fractionrule.v1.Middleware.GetFractionRules:output_type -> miningpool.middleware.fractionrule.v1.GetFractionRulesResponse
	4, // [4:5] is the sub-list for method output_type
	3, // [3:4] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_init() }
func file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_init() {
	if File_npool_miningpool_mw_v1_fractionrule_fractionrule_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FractionRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFractionRulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFractionRulesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_goTypes,
		DependencyIndexes: file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_depIdxs,
		MessageInfos:      file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_msgTypes,
	}.Build()
	File_npool_miningpool_mw_v1_fractionrule_fractionrule_proto = out.File
	file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_rawDesc = nil
	file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_goTypes = nil
	file_npool_miningpool_mw_v1_fractionrule_fractionrule_proto_depIdxs = nil
}
