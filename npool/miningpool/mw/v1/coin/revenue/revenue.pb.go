// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.18.1
// source: npool/miningpool/mw/v1/coin/revenue/revenue.proto

package revenue

import (
	v1 "github.com/NpoolPlatform/message/npool/basetypes/miningpool/v1"
	v11 "github.com/NpoolPlatform/message/npool/basetypes/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RevenueTypeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      *uint32         `protobuf:"varint,9,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID   *string         `protobuf:"bytes,10,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	CoinID  *string         `protobuf:"bytes,20,opt,name=CoinID,proto3,oneof" json:"CoinID,omitempty"`
	Type    *v1.RevenueType `protobuf:"varint,30,opt,name=Type,proto3,enum=basetypes.miningpool.v1.RevenueType,oneof" json:"Type,omitempty"`
	FeeRate *string         `protobuf:"bytes,50,opt,name=FeeRate,proto3,oneof" json:"FeeRate,omitempty"`
	Remark  *string         `protobuf:"bytes,80,opt,name=Remark,proto3,oneof" json:"Remark,omitempty"`
}

func (x *RevenueTypeReq) Reset() {
	*x = RevenueTypeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevenueTypeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevenueTypeReq) ProtoMessage() {}

func (x *RevenueTypeReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevenueTypeReq.ProtoReflect.Descriptor instead.
func (*RevenueTypeReq) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_rawDescGZIP(), []int{0}
}

func (x *RevenueTypeReq) GetID() uint32 {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return 0
}

func (x *RevenueTypeReq) GetEntID() string {
	if x != nil && x.EntID != nil {
		return *x.EntID
	}
	return ""
}

func (x *RevenueTypeReq) GetCoinID() string {
	if x != nil && x.CoinID != nil {
		return *x.CoinID
	}
	return ""
}

func (x *RevenueTypeReq) GetType() v1.RevenueType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return v1.RevenueType(0)
}

func (x *RevenueTypeReq) GetFeeRate() string {
	if x != nil && x.FeeRate != nil {
		return *x.FeeRate
	}
	return ""
}

func (x *RevenueTypeReq) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

type RevenueType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: sql:"id"
	ID uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty" sql:"id"`
	// @inject_tag: sql:"ent_id"
	EntID string `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty" sql:"ent_id"`
	// @inject_tag: sql:"coin_id"
	CoinID string `protobuf:"bytes,31,opt,name=CoinID,proto3" json:"CoinID,omitempty" sql:"coin_id"`
	// @inject_tag: sql:"type"
	Type v1.RevenueType `protobuf:"varint,50,opt,name=Type,proto3,enum=basetypes.miningpool.v1.RevenueType" json:"Type,omitempty" sql:"type"`
	// @inject_tag: sql:"fee_rate"
	FeeRate string `protobuf:"bytes,60,opt,name=FeeRate,proto3" json:"FeeRate,omitempty" sql:"fee_rate"`
	// @inject_tag: sql:"remark"
	Remark string `protobuf:"bytes,90,opt,name=Remark,proto3" json:"Remark,omitempty" sql:"remark"`
	// @inject_tag: sql:"created_at"
	CreatedAt uint32 `protobuf:"varint,100,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
	// @inject_tag: sql:"updated_at"
	UpdatedAt uint32 `protobuf:"varint,110,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty" sql:"updated_at"`
}

func (x *RevenueType) Reset() {
	*x = RevenueType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevenueType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevenueType) ProtoMessage() {}

func (x *RevenueType) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevenueType.ProtoReflect.Descriptor instead.
func (*RevenueType) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_rawDescGZIP(), []int{1}
}

func (x *RevenueType) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *RevenueType) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *RevenueType) GetCoinID() string {
	if x != nil {
		return x.CoinID
	}
	return ""
}

func (x *RevenueType) GetType() v1.RevenueType {
	if x != nil {
		return x.Type
	}
	return v1.RevenueType(0)
}

func (x *RevenueType) GetFeeRate() string {
	if x != nil {
		return x.FeeRate
	}
	return ""
}

func (x *RevenueType) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *RevenueType) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *RevenueType) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID     *v11.Uint32Val      `protobuf:"bytes,9,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID  *v11.StringVal      `protobuf:"bytes,10,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	CoinID *v11.StringVal      `protobuf:"bytes,20,opt,name=CoinID,proto3,oneof" json:"CoinID,omitempty"`
	Type   *v11.Uint32Val      `protobuf:"bytes,30,opt,name=Type,proto3,oneof" json:"Type,omitempty"`
	EntIDs *v11.StringSliceVal `protobuf:"bytes,50,opt,name=EntIDs,proto3,oneof" json:"EntIDs,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *v11.Uint32Val {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetEntID() *v11.StringVal {
	if x != nil {
		return x.EntID
	}
	return nil
}

func (x *Conds) GetCoinID() *v11.StringVal {
	if x != nil {
		return x.CoinID
	}
	return nil
}

func (x *Conds) GetType() *v11.Uint32Val {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Conds) GetEntIDs() *v11.StringSliceVal {
	if x != nil {
		return x.EntIDs
	}
	return nil
}

type CreateRevenueTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *RevenueTypeReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateRevenueTypeRequest) Reset() {
	*x = CreateRevenueTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRevenueTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRevenueTypeRequest) ProtoMessage() {}

func (x *CreateRevenueTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRevenueTypeRequest.ProtoReflect.Descriptor instead.
func (*CreateRevenueTypeRequest) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_rawDescGZIP(), []int{3}
}

func (x *CreateRevenueTypeRequest) GetInfo() *RevenueTypeReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateRevenueTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateRevenueTypeResponse) Reset() {
	*x = CreateRevenueTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRevenueTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRevenueTypeResponse) ProtoMessage() {}

func (x *CreateRevenueTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRevenueTypeResponse.ProtoReflect.Descriptor instead.
func (*CreateRevenueTypeResponse) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_rawDescGZIP(), []int{4}
}

type GetRevenueTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntID string `protobuf:"bytes,10,opt,name=EntID,proto3" json:"EntID,omitempty"`
}

func (x *GetRevenueTypeRequest) Reset() {
	*x = GetRevenueTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRevenueTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRevenueTypeRequest) ProtoMessage() {}

func (x *GetRevenueTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRevenueTypeRequest.ProtoReflect.Descriptor instead.
func (*GetRevenueTypeRequest) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_rawDescGZIP(), []int{5}
}

func (x *GetRevenueTypeRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

type GetRevenueTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *RevenueType `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetRevenueTypeResponse) Reset() {
	*x = GetRevenueTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRevenueTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRevenueTypeResponse) ProtoMessage() {}

func (x *GetRevenueTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRevenueTypeResponse.ProtoReflect.Descriptor instead.
func (*GetRevenueTypeResponse) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_rawDescGZIP(), []int{6}
}

func (x *GetRevenueTypeResponse) GetInfo() *RevenueType {
	if x != nil {
		return x.Info
	}
	return nil
}

type ExistRevenueTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntID string `protobuf:"bytes,10,opt,name=EntID,proto3" json:"EntID,omitempty"`
}

func (x *ExistRevenueTypeRequest) Reset() {
	*x = ExistRevenueTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistRevenueTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistRevenueTypeRequest) ProtoMessage() {}

func (x *ExistRevenueTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistRevenueTypeRequest.ProtoReflect.Descriptor instead.
func (*ExistRevenueTypeRequest) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_rawDescGZIP(), []int{7}
}

func (x *ExistRevenueTypeRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

type ExistRevenueTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistRevenueTypeResponse) Reset() {
	*x = ExistRevenueTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistRevenueTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistRevenueTypeResponse) ProtoMessage() {}

func (x *ExistRevenueTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistRevenueTypeResponse.ProtoReflect.Descriptor instead.
func (*ExistRevenueTypeResponse) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_rawDescGZIP(), []int{8}
}

func (x *ExistRevenueTypeResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type GetRevenueTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetRevenueTypesRequest) Reset() {
	*x = GetRevenueTypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRevenueTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRevenueTypesRequest) ProtoMessage() {}

func (x *GetRevenueTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRevenueTypesRequest.ProtoReflect.Descriptor instead.
func (*GetRevenueTypesRequest) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_rawDescGZIP(), []int{9}
}

func (x *GetRevenueTypesRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetRevenueTypesRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetRevenueTypesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetRevenueTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*RevenueType `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32         `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetRevenueTypesResponse) Reset() {
	*x = GetRevenueTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRevenueTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRevenueTypesResponse) ProtoMessage() {}

func (x *GetRevenueTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRevenueTypesResponse.ProtoReflect.Descriptor instead.
func (*GetRevenueTypesResponse) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_rawDescGZIP(), []int{10}
}

func (x *GetRevenueTypesResponse) GetInfos() []*RevenueType {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetRevenueTypesResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ExistRevenueTypeCondsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *ExistRevenueTypeCondsRequest) Reset() {
	*x = ExistRevenueTypeCondsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistRevenueTypeCondsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistRevenueTypeCondsRequest) ProtoMessage() {}

func (x *ExistRevenueTypeCondsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistRevenueTypeCondsRequest.ProtoReflect.Descriptor instead.
func (*ExistRevenueTypeCondsRequest) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_rawDescGZIP(), []int{11}
}

func (x *ExistRevenueTypeCondsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type ExistRevenueTypeCondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistRevenueTypeCondsResponse) Reset() {
	*x = ExistRevenueTypeCondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistRevenueTypeCondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistRevenueTypeCondsResponse) ProtoMessage() {}

func (x *ExistRevenueTypeCondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistRevenueTypeCondsResponse.ProtoReflect.Descriptor instead.
func (*ExistRevenueTypeCondsResponse) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_rawDescGZIP(), []int{12}
}

func (x *ExistRevenueTypeCondsResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type UpdateRevenueTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *RevenueTypeReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateRevenueTypeRequest) Reset() {
	*x = UpdateRevenueTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRevenueTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRevenueTypeRequest) ProtoMessage() {}

func (x *UpdateRevenueTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRevenueTypeRequest.ProtoReflect.Descriptor instead.
func (*UpdateRevenueTypeRequest) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateRevenueTypeRequest) GetInfo() *RevenueTypeReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateRevenueTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateRevenueTypeResponse) Reset() {
	*x = UpdateRevenueTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRevenueTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRevenueTypeResponse) ProtoMessage() {}

func (x *UpdateRevenueTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRevenueTypeResponse.ProtoReflect.Descriptor instead.
func (*UpdateRevenueTypeResponse) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_rawDescGZIP(), []int{14}
}

type DeleteRevenueTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *RevenueTypeReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteRevenueTypeRequest) Reset() {
	*x = DeleteRevenueTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRevenueTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRevenueTypeRequest) ProtoMessage() {}

func (x *DeleteRevenueTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRevenueTypeRequest.ProtoReflect.Descriptor instead.
func (*DeleteRevenueTypeRequest) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteRevenueTypeRequest) GetInfo() *RevenueTypeReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type DeleteRevenueTypeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteRevenueTypeResponse) Reset() {
	*x = DeleteRevenueTypeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRevenueTypeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRevenueTypeResponse) ProtoMessage() {}

func (x *DeleteRevenueTypeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRevenueTypeResponse.ProtoReflect.Descriptor instead.
func (*DeleteRevenueTypeResponse) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_rawDescGZIP(), []int{16}
}

var File_npool_miningpool_mw_v1_coin_revenue_revenue_proto protoreflect.FileDescriptor

var file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_rawDesc = []byte{
	0x0a, 0x31, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f,
	0x6f, 0x6c, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x72, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x25, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e,
	0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x6e, 0x70, 0x6f, 0x6f,
	0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x6e, 0x70, 0x6f, 0x6f,
	0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x94, 0x02, 0x0a, 0x0e, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05,
	0x45, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x43, 0x6f, 0x69, 0x6e,
	0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x43, 0x6f, 0x69, 0x6e,
	0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x03, 0x52, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x50, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x74, 0x49,
	0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xf3, 0x01, 0x0a,
	0x0b, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05,
	0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0xbc, 0x02, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x45, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x48, 0x01, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x34,
	0x0a, 0x06, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x02, 0x52, 0x06, 0x43, 0x6f, 0x69, 0x6e, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x06, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x73,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63,
	0x65, 0x56, 0x61, 0x6c, 0x48, 0x04, 0x52, 0x06, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x88, 0x01,
	0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x74,
	0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x44, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x54, 0x79, 0x70, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44,
	0x73, 0x22, 0x65, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x1b, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2d, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45,
	0x6e, 0x74, 0x49, 0x44, 0x22, 0x60, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2f, 0x0a, 0x17, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x2e, 0x0a, 0x18, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x8a, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x42, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52,
	0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x22, 0x79, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x48, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22,
	0x62, 0x0a, 0x1c, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x42, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x22, 0x33, 0x0a, 0x1d, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x65, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e,
	0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x1b, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x65, 0x0a, 0x18,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x1b, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0xc3, 0x08, 0x0a, 0x0a, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x12,
	0x98, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8f, 0x01, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x2e,
	0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3d, 0x2e, 0x6d, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x95, 0x01, 0x0a,
	0x10, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x3e, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3f, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x92, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3d, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa4, 0x01, 0x0a, 0x15, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x43, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x98, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x98, 0x01, 0x0a, 0x11,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x3f, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x72,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x40, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e,
	0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x46, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c,
	0x2f, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6d, 0x77, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_rawDescOnce sync.Once
	file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_rawDescData = file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_rawDesc
)

func file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_rawDescGZIP() []byte {
	file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_rawDescOnce.Do(func() {
		file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_rawDescData)
	})
	return file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_rawDescData
}

var file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_goTypes = []interface{}{
	(*RevenueTypeReq)(nil),                // 0: miningpool.middleware.coin.revenue.v1.RevenueTypeReq
	(*RevenueType)(nil),                   // 1: miningpool.middleware.coin.revenue.v1.RevenueType
	(*Conds)(nil),                         // 2: miningpool.middleware.coin.revenue.v1.Conds
	(*CreateRevenueTypeRequest)(nil),      // 3: miningpool.middleware.coin.revenue.v1.CreateRevenueTypeRequest
	(*CreateRevenueTypeResponse)(nil),     // 4: miningpool.middleware.coin.revenue.v1.CreateRevenueTypeResponse
	(*GetRevenueTypeRequest)(nil),         // 5: miningpool.middleware.coin.revenue.v1.GetRevenueTypeRequest
	(*GetRevenueTypeResponse)(nil),        // 6: miningpool.middleware.coin.revenue.v1.GetRevenueTypeResponse
	(*ExistRevenueTypeRequest)(nil),       // 7: miningpool.middleware.coin.revenue.v1.ExistRevenueTypeRequest
	(*ExistRevenueTypeResponse)(nil),      // 8: miningpool.middleware.coin.revenue.v1.ExistRevenueTypeResponse
	(*GetRevenueTypesRequest)(nil),        // 9: miningpool.middleware.coin.revenue.v1.GetRevenueTypesRequest
	(*GetRevenueTypesResponse)(nil),       // 10: miningpool.middleware.coin.revenue.v1.GetRevenueTypesResponse
	(*ExistRevenueTypeCondsRequest)(nil),  // 11: miningpool.middleware.coin.revenue.v1.ExistRevenueTypeCondsRequest
	(*ExistRevenueTypeCondsResponse)(nil), // 12: miningpool.middleware.coin.revenue.v1.ExistRevenueTypeCondsResponse
	(*UpdateRevenueTypeRequest)(nil),      // 13: miningpool.middleware.coin.revenue.v1.UpdateRevenueTypeRequest
	(*UpdateRevenueTypeResponse)(nil),     // 14: miningpool.middleware.coin.revenue.v1.UpdateRevenueTypeResponse
	(*DeleteRevenueTypeRequest)(nil),      // 15: miningpool.middleware.coin.revenue.v1.DeleteRevenueTypeRequest
	(*DeleteRevenueTypeResponse)(nil),     // 16: miningpool.middleware.coin.revenue.v1.DeleteRevenueTypeResponse
	(v1.RevenueType)(0),                   // 17: basetypes.miningpool.v1.RevenueType
	(*v11.Uint32Val)(nil),                 // 18: basetypes.v1.Uint32Val
	(*v11.StringVal)(nil),                 // 19: basetypes.v1.StringVal
	(*v11.StringSliceVal)(nil),            // 20: basetypes.v1.StringSliceVal
}
var file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_depIdxs = []int32{
	17, // 0: miningpool.middleware.coin.revenue.v1.RevenueTypeReq.Type:type_name -> basetypes.miningpool.v1.RevenueType
	17, // 1: miningpool.middleware.coin.revenue.v1.RevenueType.Type:type_name -> basetypes.miningpool.v1.RevenueType
	18, // 2: miningpool.middleware.coin.revenue.v1.Conds.ID:type_name -> basetypes.v1.Uint32Val
	19, // 3: miningpool.middleware.coin.revenue.v1.Conds.EntID:type_name -> basetypes.v1.StringVal
	19, // 4: miningpool.middleware.coin.revenue.v1.Conds.CoinID:type_name -> basetypes.v1.StringVal
	18, // 5: miningpool.middleware.coin.revenue.v1.Conds.Type:type_name -> basetypes.v1.Uint32Val
	20, // 6: miningpool.middleware.coin.revenue.v1.Conds.EntIDs:type_name -> basetypes.v1.StringSliceVal
	0,  // 7: miningpool.middleware.coin.revenue.v1.CreateRevenueTypeRequest.Info:type_name -> miningpool.middleware.coin.revenue.v1.RevenueTypeReq
	1,  // 8: miningpool.middleware.coin.revenue.v1.GetRevenueTypeResponse.Info:type_name -> miningpool.middleware.coin.revenue.v1.RevenueType
	2,  // 9: miningpool.middleware.coin.revenue.v1.GetRevenueTypesRequest.Conds:type_name -> miningpool.middleware.coin.revenue.v1.Conds
	1,  // 10: miningpool.middleware.coin.revenue.v1.GetRevenueTypesResponse.Infos:type_name -> miningpool.middleware.coin.revenue.v1.RevenueType
	2,  // 11: miningpool.middleware.coin.revenue.v1.ExistRevenueTypeCondsRequest.Conds:type_name -> miningpool.middleware.coin.revenue.v1.Conds
	0,  // 12: miningpool.middleware.coin.revenue.v1.UpdateRevenueTypeRequest.Info:type_name -> miningpool.middleware.coin.revenue.v1.RevenueTypeReq
	0,  // 13: miningpool.middleware.coin.revenue.v1.DeleteRevenueTypeRequest.Info:type_name -> miningpool.middleware.coin.revenue.v1.RevenueTypeReq
	3,  // 14: miningpool.middleware.coin.revenue.v1.Middleware.CreateRevenueType:input_type -> miningpool.middleware.coin.revenue.v1.CreateRevenueTypeRequest
	5,  // 15: miningpool.middleware.coin.revenue.v1.Middleware.GetRevenueType:input_type -> miningpool.middleware.coin.revenue.v1.GetRevenueTypeRequest
	7,  // 16: miningpool.middleware.coin.revenue.v1.Middleware.ExistRevenueType:input_type -> miningpool.middleware.coin.revenue.v1.ExistRevenueTypeRequest
	9,  // 17: miningpool.middleware.coin.revenue.v1.Middleware.GetRevenueTypes:input_type -> miningpool.middleware.coin.revenue.v1.GetRevenueTypesRequest
	11, // 18: miningpool.middleware.coin.revenue.v1.Middleware.ExistRevenueTypeConds:input_type -> miningpool.middleware.coin.revenue.v1.ExistRevenueTypeCondsRequest
	13, // 19: miningpool.middleware.coin.revenue.v1.Middleware.UpdateRevenueType:input_type -> miningpool.middleware.coin.revenue.v1.UpdateRevenueTypeRequest
	15, // 20: miningpool.middleware.coin.revenue.v1.Middleware.DeleteRevenueType:input_type -> miningpool.middleware.coin.revenue.v1.DeleteRevenueTypeRequest
	4,  // 21: miningpool.middleware.coin.revenue.v1.Middleware.CreateRevenueType:output_type -> miningpool.middleware.coin.revenue.v1.CreateRevenueTypeResponse
	6,  // 22: miningpool.middleware.coin.revenue.v1.Middleware.GetRevenueType:output_type -> miningpool.middleware.coin.revenue.v1.GetRevenueTypeResponse
	8,  // 23: miningpool.middleware.coin.revenue.v1.Middleware.ExistRevenueType:output_type -> miningpool.middleware.coin.revenue.v1.ExistRevenueTypeResponse
	10, // 24: miningpool.middleware.coin.revenue.v1.Middleware.GetRevenueTypes:output_type -> miningpool.middleware.coin.revenue.v1.GetRevenueTypesResponse
	12, // 25: miningpool.middleware.coin.revenue.v1.Middleware.ExistRevenueTypeConds:output_type -> miningpool.middleware.coin.revenue.v1.ExistRevenueTypeCondsResponse
	14, // 26: miningpool.middleware.coin.revenue.v1.Middleware.UpdateRevenueType:output_type -> miningpool.middleware.coin.revenue.v1.UpdateRevenueTypeResponse
	16, // 27: miningpool.middleware.coin.revenue.v1.Middleware.DeleteRevenueType:output_type -> miningpool.middleware.coin.revenue.v1.DeleteRevenueTypeResponse
	21, // [21:28] is the sub-list for method output_type
	14, // [14:21] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_init() }
func file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_init() {
	if File_npool_miningpool_mw_v1_coin_revenue_revenue_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevenueTypeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RevenueType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRevenueTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRevenueTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRevenueTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRevenueTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistRevenueTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistRevenueTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRevenueTypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRevenueTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistRevenueTypeCondsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistRevenueTypeCondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRevenueTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRevenueTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRevenueTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRevenueTypeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_goTypes,
		DependencyIndexes: file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_depIdxs,
		MessageInfos:      file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_msgTypes,
	}.Build()
	File_npool_miningpool_mw_v1_coin_revenue_revenue_proto = out.File
	file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_rawDesc = nil
	file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_goTypes = nil
	file_npool_miningpool_mw_v1_coin_revenue_revenue_proto_depIdxs = nil
}
