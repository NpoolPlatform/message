// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.18.1
// source: npool/miningpool/mw/v1/coin/coin.proto

package coin

import (
	v1 "github.com/NpoolPlatform/message/npool/basetypes/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CoinReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                *uint32  `protobuf:"varint,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	EntID             *string  `protobuf:"bytes,20,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	MiningpoolName    *string  `protobuf:"bytes,30,opt,name=MiningpoolName,proto3,oneof" json:"MiningpoolName,omitempty"`
	Site              *string  `protobuf:"bytes,40,opt,name=Site,proto3,oneof" json:"Site,omitempty"`
	CoinName          *uint32  `protobuf:"varint,50,opt,name=CoinName,proto3,oneof" json:"CoinName,omitempty"`
	RevenueType       *string  `protobuf:"bytes,60,opt,name=RevenueType,proto3,oneof" json:"RevenueType,omitempty"`
	FeeRate           *float32 `protobuf:"fixed32,70,opt,name=FeeRate,proto3,oneof" json:"FeeRate,omitempty"`
	FixedRevenueAable *bool    `protobuf:"varint,80,opt,name=FixedRevenueAable,proto3,oneof" json:"FixedRevenueAable,omitempty"`
	Remark            *uint32  `protobuf:"varint,90,opt,name=Remark,proto3,oneof" json:"Remark,omitempty"`
}

func (x *CoinReq) Reset() {
	*x = CoinReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinReq) ProtoMessage() {}

func (x *CoinReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinReq.ProtoReflect.Descriptor instead.
func (*CoinReq) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_coin_coin_proto_rawDescGZIP(), []int{0}
}

func (x *CoinReq) GetID() uint32 {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return 0
}

func (x *CoinReq) GetEntID() string {
	if x != nil && x.EntID != nil {
		return *x.EntID
	}
	return ""
}

func (x *CoinReq) GetMiningpoolName() string {
	if x != nil && x.MiningpoolName != nil {
		return *x.MiningpoolName
	}
	return ""
}

func (x *CoinReq) GetSite() string {
	if x != nil && x.Site != nil {
		return *x.Site
	}
	return ""
}

func (x *CoinReq) GetCoinName() uint32 {
	if x != nil && x.CoinName != nil {
		return *x.CoinName
	}
	return 0
}

func (x *CoinReq) GetRevenueType() string {
	if x != nil && x.RevenueType != nil {
		return *x.RevenueType
	}
	return ""
}

func (x *CoinReq) GetFeeRate() float32 {
	if x != nil && x.FeeRate != nil {
		return *x.FeeRate
	}
	return 0
}

func (x *CoinReq) GetFixedRevenueAable() bool {
	if x != nil && x.FixedRevenueAable != nil {
		return *x.FixedRevenueAable
	}
	return false
}

func (x *CoinReq) GetRemark() uint32 {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return 0
}

type Coin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: sql:"id"
	ID uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty" sql:"id"`
	// @inject_tag: sql:"ent_id"
	EntID string `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty" sql:"ent_id"`
	// @inject_tag: sql:"MiningpoolName"
	MiningpoolName string `protobuf:"bytes,30,opt,name=MiningpoolName,proto3" json:"MiningpoolName,omitempty" sql:"MiningpoolName"`
	// @inject_tag: sql:"Site"
	Site string `protobuf:"bytes,40,opt,name=Site,proto3" json:"Site,omitempty" sql:"Site"`
	// @inject_tag: sql:"CoinName"
	CoinName uint32 `protobuf:"varint,50,opt,name=CoinName,proto3" json:"CoinName,omitempty" sql:"CoinName"`
	// @inject_tag: sql:"RevenueType"
	RevenueType uint32 `protobuf:"varint,60,opt,name=RevenueType,proto3" json:"RevenueType,omitempty" sql:"RevenueType"`
	// @inject_tag: sql:"FeeRate"
	FeeRate uint32 `protobuf:"varint,70,opt,name=FeeRate,proto3" json:"FeeRate,omitempty" sql:"FeeRate"`
	// @inject_tag: sql:"FixedRevenueAable"
	FixedRevenueAable uint32 `protobuf:"varint,80,opt,name=FixedRevenueAable,proto3" json:"FixedRevenueAable,omitempty" sql:"FixedRevenueAable"`
	// @inject_tag: sql:"Remark"
	Remark uint32 `protobuf:"varint,90,opt,name=Remark,proto3" json:"Remark,omitempty" sql:"Remark"`
	// @inject_tag: sql:"created_at"
	CreatedAt uint32 `protobuf:"varint,100,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
	// @inject_tag: sql:"updated_at"
	UpdatedAt uint32 `protobuf:"varint,110,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty" sql:"updated_at"`
}

func (x *Coin) Reset() {
	*x = Coin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coin) ProtoMessage() {}

func (x *Coin) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coin.ProtoReflect.Descriptor instead.
func (*Coin) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_coin_coin_proto_rawDescGZIP(), []int{1}
}

func (x *Coin) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Coin) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *Coin) GetMiningpoolName() string {
	if x != nil {
		return x.MiningpoolName
	}
	return ""
}

func (x *Coin) GetSite() string {
	if x != nil {
		return x.Site
	}
	return ""
}

func (x *Coin) GetCoinName() uint32 {
	if x != nil {
		return x.CoinName
	}
	return 0
}

func (x *Coin) GetRevenueType() uint32 {
	if x != nil {
		return x.RevenueType
	}
	return 0
}

func (x *Coin) GetFeeRate() uint32 {
	if x != nil {
		return x.FeeRate
	}
	return 0
}

func (x *Coin) GetFixedRevenueAable() uint32 {
	if x != nil {
		return x.FixedRevenueAable
	}
	return 0
}

func (x *Coin) GetRemark() uint32 {
	if x != nil {
		return x.Remark
	}
	return 0
}

func (x *Coin) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Coin) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntID             *v1.StringVal      `protobuf:"bytes,10,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	OrderMininguserID *v1.StringVal      `protobuf:"bytes,20,opt,name=OrderMininguserID,proto3,oneof" json:"OrderMininguserID,omitempty"`
	WithdrawState     *v1.StringVal      `protobuf:"bytes,30,opt,name=WithdrawState,proto3,oneof" json:"WithdrawState,omitempty"`
	EntIDs            *v1.StringSliceVal `protobuf:"bytes,40,opt,name=EntIDs,proto3,oneof" json:"EntIDs,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_coin_coin_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetEntID() *v1.StringVal {
	if x != nil {
		return x.EntID
	}
	return nil
}

func (x *Conds) GetOrderMininguserID() *v1.StringVal {
	if x != nil {
		return x.OrderMininguserID
	}
	return nil
}

func (x *Conds) GetWithdrawState() *v1.StringVal {
	if x != nil {
		return x.WithdrawState
	}
	return nil
}

func (x *Conds) GetEntIDs() *v1.StringSliceVal {
	if x != nil {
		return x.EntIDs
	}
	return nil
}

type CreateCoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CoinReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateCoinRequest) Reset() {
	*x = CreateCoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCoinRequest) ProtoMessage() {}

func (x *CreateCoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCoinRequest.ProtoReflect.Descriptor instead.
func (*CreateCoinRequest) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_coin_coin_proto_rawDescGZIP(), []int{3}
}

func (x *CreateCoinRequest) GetInfo() *CoinReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateCoinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Coin `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateCoinResponse) Reset() {
	*x = CreateCoinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCoinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCoinResponse) ProtoMessage() {}

func (x *CreateCoinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCoinResponse.ProtoReflect.Descriptor instead.
func (*CreateCoinResponse) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_coin_coin_proto_rawDescGZIP(), []int{4}
}

func (x *CreateCoinResponse) GetInfo() *Coin {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateCoinsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*CoinReq `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateCoinsRequest) Reset() {
	*x = CreateCoinsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCoinsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCoinsRequest) ProtoMessage() {}

func (x *CreateCoinsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCoinsRequest.ProtoReflect.Descriptor instead.
func (*CreateCoinsRequest) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_coin_coin_proto_rawDescGZIP(), []int{5}
}

func (x *CreateCoinsRequest) GetInfos() []*CoinReq {
	if x != nil {
		return x.Infos
	}
	return nil
}

type CreateCoinsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Coin `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateCoinsResponse) Reset() {
	*x = CreateCoinsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCoinsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCoinsResponse) ProtoMessage() {}

func (x *CreateCoinsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCoinsResponse.ProtoReflect.Descriptor instead.
func (*CreateCoinsResponse) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_coin_coin_proto_rawDescGZIP(), []int{6}
}

func (x *CreateCoinsResponse) GetInfos() []*Coin {
	if x != nil {
		return x.Infos
	}
	return nil
}

type GetCoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntID string `protobuf:"bytes,10,opt,name=EntID,proto3" json:"EntID,omitempty"`
}

func (x *GetCoinRequest) Reset() {
	*x = GetCoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinRequest) ProtoMessage() {}

func (x *GetCoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinRequest.ProtoReflect.Descriptor instead.
func (*GetCoinRequest) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_coin_coin_proto_rawDescGZIP(), []int{7}
}

func (x *GetCoinRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

type GetCoinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Coin `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetCoinResponse) Reset() {
	*x = GetCoinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinResponse) ProtoMessage() {}

func (x *GetCoinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinResponse.ProtoReflect.Descriptor instead.
func (*GetCoinResponse) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_coin_coin_proto_rawDescGZIP(), []int{8}
}

func (x *GetCoinResponse) GetInfo() *Coin {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetCoinsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetCoinsRequest) Reset() {
	*x = GetCoinsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinsRequest) ProtoMessage() {}

func (x *GetCoinsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinsRequest.ProtoReflect.Descriptor instead.
func (*GetCoinsRequest) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_coin_coin_proto_rawDescGZIP(), []int{9}
}

func (x *GetCoinsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetCoinsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetCoinsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetCoinsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Coin `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32  `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetCoinsResponse) Reset() {
	*x = GetCoinsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinsResponse) ProtoMessage() {}

func (x *GetCoinsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinsResponse.ProtoReflect.Descriptor instead.
func (*GetCoinsResponse) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_coin_coin_proto_rawDescGZIP(), []int{10}
}

func (x *GetCoinsResponse) GetInfos() []*Coin {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetCoinsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ExistCoinCondsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *ExistCoinCondsRequest) Reset() {
	*x = ExistCoinCondsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistCoinCondsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistCoinCondsRequest) ProtoMessage() {}

func (x *ExistCoinCondsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistCoinCondsRequest.ProtoReflect.Descriptor instead.
func (*ExistCoinCondsRequest) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_coin_coin_proto_rawDescGZIP(), []int{11}
}

func (x *ExistCoinCondsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type ExistCoinCondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistCoinCondsResponse) Reset() {
	*x = ExistCoinCondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistCoinCondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistCoinCondsResponse) ProtoMessage() {}

func (x *ExistCoinCondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistCoinCondsResponse.ProtoReflect.Descriptor instead.
func (*ExistCoinCondsResponse) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_coin_coin_proto_rawDescGZIP(), []int{12}
}

func (x *ExistCoinCondsResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type UpdateCoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CoinReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateCoinRequest) Reset() {
	*x = UpdateCoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCoinRequest) ProtoMessage() {}

func (x *UpdateCoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCoinRequest.ProtoReflect.Descriptor instead.
func (*UpdateCoinRequest) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_coin_coin_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateCoinRequest) GetInfo() *CoinReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateCoinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Coin `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateCoinResponse) Reset() {
	*x = UpdateCoinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCoinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCoinResponse) ProtoMessage() {}

func (x *UpdateCoinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCoinResponse.ProtoReflect.Descriptor instead.
func (*UpdateCoinResponse) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_coin_coin_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateCoinResponse) GetInfo() *Coin {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_miningpool_mw_v1_coin_coin_proto protoreflect.FileDescriptor

var file_npool_miningpool_mw_v1_coin_coin_proto_rawDesc = []byte{
	0x0a, 0x26, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f,
	0x6f, 0x6c, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x63, 0x6f,
	0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xad, 0x03, 0x0a, 0x07, 0x43, 0x6f, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44,
	0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0e, 0x4d,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x17, 0x0a, 0x04, 0x53, 0x69, 0x74, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03,
	0x52, 0x04, 0x53, 0x69, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x43, 0x6f, 0x69,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x08, 0x43,
	0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x52, 0x65,
	0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x05, 0x52, 0x0b, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x46, 0x20, 0x01,
	0x28, 0x02, 0x48, 0x06, 0x52, 0x07, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x31, 0x0a, 0x11, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x41, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x11, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x41, 0x61, 0x62, 0x6c, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x5a, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x08, 0x52, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x74, 0x49,
	0x44, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x53, 0x69, 0x74, 0x65, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x52,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x46,
	0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x41, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0xc2, 0x02, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x70, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x53, 0x69, 0x74, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x69,
	0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x3c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x41, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x50, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x41, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xc3, 0x02, 0x0a,
	0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x00,
	0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x11, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x01,
	0x52, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0d, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x02, 0x52, 0x0d, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x06, 0x45, 0x6e,
	0x74, 0x49, 0x44, 0x73, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x06, 0x45, 0x6e, 0x74, 0x49,
	0x44, 0x73, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x42,
	0x14, 0x0a, 0x12, 0x5f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x45, 0x6e, 0x74, 0x49,
	0x44, 0x73, 0x22, 0x4f, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x4d, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x52, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x52,
	0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x50, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a,
	0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69,
	0x6e, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x26, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44,
	0x22, 0x4a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x7b, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3a, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x63, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a,
	0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69,
	0x6e, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x53,
	0x0a, 0x15, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x22, 0x2c, 0x0a, 0x16, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x69, 0x6e,
	0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x4f, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f,
	0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x4d, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x32, 0xca, 0x05, 0x0a, 0x0a, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x12, 0x73, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x30,
	0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x69, 0x6e, 0x73, 0x12, 0x31, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f,
	0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a,
	0x07, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x2d, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x08, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x2e, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x0e, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x34, 0x2e, 0x6d, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x35, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x0a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x30, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6d, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3e,
	0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f,
	0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70,
	0x6f, 0x6f, 0x6c, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_miningpool_mw_v1_coin_coin_proto_rawDescOnce sync.Once
	file_npool_miningpool_mw_v1_coin_coin_proto_rawDescData = file_npool_miningpool_mw_v1_coin_coin_proto_rawDesc
)

func file_npool_miningpool_mw_v1_coin_coin_proto_rawDescGZIP() []byte {
	file_npool_miningpool_mw_v1_coin_coin_proto_rawDescOnce.Do(func() {
		file_npool_miningpool_mw_v1_coin_coin_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_miningpool_mw_v1_coin_coin_proto_rawDescData)
	})
	return file_npool_miningpool_mw_v1_coin_coin_proto_rawDescData
}

var file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_npool_miningpool_mw_v1_coin_coin_proto_goTypes = []interface{}{
	(*CoinReq)(nil),                // 0: miningpool.middleware.coin.v1.CoinReq
	(*Coin)(nil),                   // 1: miningpool.middleware.coin.v1.Coin
	(*Conds)(nil),                  // 2: miningpool.middleware.coin.v1.Conds
	(*CreateCoinRequest)(nil),      // 3: miningpool.middleware.coin.v1.CreateCoinRequest
	(*CreateCoinResponse)(nil),     // 4: miningpool.middleware.coin.v1.CreateCoinResponse
	(*CreateCoinsRequest)(nil),     // 5: miningpool.middleware.coin.v1.CreateCoinsRequest
	(*CreateCoinsResponse)(nil),    // 6: miningpool.middleware.coin.v1.CreateCoinsResponse
	(*GetCoinRequest)(nil),         // 7: miningpool.middleware.coin.v1.GetCoinRequest
	(*GetCoinResponse)(nil),        // 8: miningpool.middleware.coin.v1.GetCoinResponse
	(*GetCoinsRequest)(nil),        // 9: miningpool.middleware.coin.v1.GetCoinsRequest
	(*GetCoinsResponse)(nil),       // 10: miningpool.middleware.coin.v1.GetCoinsResponse
	(*ExistCoinCondsRequest)(nil),  // 11: miningpool.middleware.coin.v1.ExistCoinCondsRequest
	(*ExistCoinCondsResponse)(nil), // 12: miningpool.middleware.coin.v1.ExistCoinCondsResponse
	(*UpdateCoinRequest)(nil),      // 13: miningpool.middleware.coin.v1.UpdateCoinRequest
	(*UpdateCoinResponse)(nil),     // 14: miningpool.middleware.coin.v1.UpdateCoinResponse
	(*v1.StringVal)(nil),           // 15: basetypes.v1.StringVal
	(*v1.StringSliceVal)(nil),      // 16: basetypes.v1.StringSliceVal
}
var file_npool_miningpool_mw_v1_coin_coin_proto_depIdxs = []int32{
	15, // 0: miningpool.middleware.coin.v1.Conds.EntID:type_name -> basetypes.v1.StringVal
	15, // 1: miningpool.middleware.coin.v1.Conds.OrderMininguserID:type_name -> basetypes.v1.StringVal
	15, // 2: miningpool.middleware.coin.v1.Conds.WithdrawState:type_name -> basetypes.v1.StringVal
	16, // 3: miningpool.middleware.coin.v1.Conds.EntIDs:type_name -> basetypes.v1.StringSliceVal
	0,  // 4: miningpool.middleware.coin.v1.CreateCoinRequest.Info:type_name -> miningpool.middleware.coin.v1.CoinReq
	1,  // 5: miningpool.middleware.coin.v1.CreateCoinResponse.Info:type_name -> miningpool.middleware.coin.v1.Coin
	0,  // 6: miningpool.middleware.coin.v1.CreateCoinsRequest.Infos:type_name -> miningpool.middleware.coin.v1.CoinReq
	1,  // 7: miningpool.middleware.coin.v1.CreateCoinsResponse.Infos:type_name -> miningpool.middleware.coin.v1.Coin
	1,  // 8: miningpool.middleware.coin.v1.GetCoinResponse.Info:type_name -> miningpool.middleware.coin.v1.Coin
	2,  // 9: miningpool.middleware.coin.v1.GetCoinsRequest.Conds:type_name -> miningpool.middleware.coin.v1.Conds
	1,  // 10: miningpool.middleware.coin.v1.GetCoinsResponse.Infos:type_name -> miningpool.middleware.coin.v1.Coin
	2,  // 11: miningpool.middleware.coin.v1.ExistCoinCondsRequest.Conds:type_name -> miningpool.middleware.coin.v1.Conds
	0,  // 12: miningpool.middleware.coin.v1.UpdateCoinRequest.Info:type_name -> miningpool.middleware.coin.v1.CoinReq
	1,  // 13: miningpool.middleware.coin.v1.UpdateCoinResponse.Info:type_name -> miningpool.middleware.coin.v1.Coin
	3,  // 14: miningpool.middleware.coin.v1.Middleware.CreateCoin:input_type -> miningpool.middleware.coin.v1.CreateCoinRequest
	5,  // 15: miningpool.middleware.coin.v1.Middleware.CreateCoins:input_type -> miningpool.middleware.coin.v1.CreateCoinsRequest
	7,  // 16: miningpool.middleware.coin.v1.Middleware.GetCoin:input_type -> miningpool.middleware.coin.v1.GetCoinRequest
	9,  // 17: miningpool.middleware.coin.v1.Middleware.GetCoins:input_type -> miningpool.middleware.coin.v1.GetCoinsRequest
	11, // 18: miningpool.middleware.coin.v1.Middleware.ExistCoinConds:input_type -> miningpool.middleware.coin.v1.ExistCoinCondsRequest
	13, // 19: miningpool.middleware.coin.v1.Middleware.UpdateCoin:input_type -> miningpool.middleware.coin.v1.UpdateCoinRequest
	4,  // 20: miningpool.middleware.coin.v1.Middleware.CreateCoin:output_type -> miningpool.middleware.coin.v1.CreateCoinResponse
	6,  // 21: miningpool.middleware.coin.v1.Middleware.CreateCoins:output_type -> miningpool.middleware.coin.v1.CreateCoinsResponse
	8,  // 22: miningpool.middleware.coin.v1.Middleware.GetCoin:output_type -> miningpool.middleware.coin.v1.GetCoinResponse
	10, // 23: miningpool.middleware.coin.v1.Middleware.GetCoins:output_type -> miningpool.middleware.coin.v1.GetCoinsResponse
	12, // 24: miningpool.middleware.coin.v1.Middleware.ExistCoinConds:output_type -> miningpool.middleware.coin.v1.ExistCoinCondsResponse
	14, // 25: miningpool.middleware.coin.v1.Middleware.UpdateCoin:output_type -> miningpool.middleware.coin.v1.UpdateCoinResponse
	20, // [20:26] is the sub-list for method output_type
	14, // [14:20] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_npool_miningpool_mw_v1_coin_coin_proto_init() }
func file_npool_miningpool_mw_v1_coin_coin_proto_init() {
	if File_npool_miningpool_mw_v1_coin_coin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Coin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCoinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCoinsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCoinsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistCoinCondsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistCoinCondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCoinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_miningpool_mw_v1_coin_coin_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_miningpool_mw_v1_coin_coin_proto_goTypes,
		DependencyIndexes: file_npool_miningpool_mw_v1_coin_coin_proto_depIdxs,
		MessageInfos:      file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes,
	}.Build()
	File_npool_miningpool_mw_v1_coin_coin_proto = out.File
	file_npool_miningpool_mw_v1_coin_coin_proto_rawDesc = nil
	file_npool_miningpool_mw_v1_coin_coin_proto_goTypes = nil
	file_npool_miningpool_mw_v1_coin_coin_proto_depIdxs = nil
}
