// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.18.1
// source: npool/miningpool/mw/v1/coin/coin.proto

package coin

import (
	v1 "github.com/NpoolPlatform/message/npool/basetypes/miningpool/v1"
	v11 "github.com/NpoolPlatform/message/npool/basetypes/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Coin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MiningpoolType   v1.MiningpoolType `protobuf:"varint,10,opt,name=MiningpoolType,proto3,enum=basetypes.miningpool.v1.MiningpoolType" json:"MiningpoolType,omitempty"`
	CoinType         v1.CoinType       `protobuf:"varint,20,opt,name=CoinType,proto3,enum=basetypes.miningpool.v1.CoinType" json:"CoinType,omitempty"`
	RevenueType      []v1.RevenueType  `protobuf:"varint,30,rep,packed,name=RevenueType,proto3,enum=basetypes.miningpool.v1.RevenueType" json:"RevenueType,omitempty"`
	Site             string            `protobuf:"bytes,40,opt,name=Site,proto3" json:"Site,omitempty"`
	FeeRate          float32           `protobuf:"fixed32,50,opt,name=FeeRate,proto3" json:"FeeRate,omitempty"`
	FixedRevenueAble bool              `protobuf:"varint,60,opt,name=FixedRevenueAble,proto3" json:"FixedRevenueAble,omitempty"`
	Threshold        float32           `protobuf:"fixed32,70,opt,name=Threshold,proto3" json:"Threshold,omitempty"`
}

func (x *Coin) Reset() {
	*x = Coin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coin) ProtoMessage() {}

func (x *Coin) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coin.ProtoReflect.Descriptor instead.
func (*Coin) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_coin_coin_proto_rawDescGZIP(), []int{0}
}

func (x *Coin) GetMiningpoolType() v1.MiningpoolType {
	if x != nil {
		return x.MiningpoolType
	}
	return v1.MiningpoolType(0)
}

func (x *Coin) GetCoinType() v1.CoinType {
	if x != nil {
		return x.CoinType
	}
	return v1.CoinType(0)
}

func (x *Coin) GetRevenueType() []v1.RevenueType {
	if x != nil {
		return x.RevenueType
	}
	return nil
}

func (x *Coin) GetSite() string {
	if x != nil {
		return x.Site
	}
	return ""
}

func (x *Coin) GetFeeRate() float32 {
	if x != nil {
		return x.FeeRate
	}
	return 0
}

func (x *Coin) GetFixedRevenueAble() bool {
	if x != nil {
		return x.FixedRevenueAble
	}
	return false
}

func (x *Coin) GetThreshold() float32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntID            *v11.StringVal      `protobuf:"bytes,10,opt,name=EntID,proto3,oneof" json:"EntID,omitempty"`
	CoinType         *v11.Uint32Val      `protobuf:"bytes,20,opt,name=CoinType,proto3,oneof" json:"CoinType,omitempty"`
	RevenueType      *v11.Uint32Val      `protobuf:"bytes,30,opt,name=RevenueType,proto3,oneof" json:"RevenueType,omitempty"`
	Site             *v11.StringVal      `protobuf:"bytes,40,opt,name=Site,proto3,oneof" json:"Site,omitempty"`
	FeeRate          *v11.BoolVal        `protobuf:"bytes,50,opt,name=FeeRate,proto3,oneof" json:"FeeRate,omitempty"`
	FixedRevenueAble *v11.BoolVal        `protobuf:"bytes,60,opt,name=FixedRevenueAble,proto3,oneof" json:"FixedRevenueAble,omitempty"`
	Threshold        *v11.BoolVal        `protobuf:"bytes,70,opt,name=Threshold,proto3,oneof" json:"Threshold,omitempty"`
	EntIDs           *v11.StringSliceVal `protobuf:"bytes,580,opt,name=EntIDs,proto3,oneof" json:"EntIDs,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_coin_coin_proto_rawDescGZIP(), []int{1}
}

func (x *Conds) GetEntID() *v11.StringVal {
	if x != nil {
		return x.EntID
	}
	return nil
}

func (x *Conds) GetCoinType() *v11.Uint32Val {
	if x != nil {
		return x.CoinType
	}
	return nil
}

func (x *Conds) GetRevenueType() *v11.Uint32Val {
	if x != nil {
		return x.RevenueType
	}
	return nil
}

func (x *Conds) GetSite() *v11.StringVal {
	if x != nil {
		return x.Site
	}
	return nil
}

func (x *Conds) GetFeeRate() *v11.BoolVal {
	if x != nil {
		return x.FeeRate
	}
	return nil
}

func (x *Conds) GetFixedRevenueAble() *v11.BoolVal {
	if x != nil {
		return x.FixedRevenueAble
	}
	return nil
}

func (x *Conds) GetThreshold() *v11.BoolVal {
	if x != nil {
		return x.Threshold
	}
	return nil
}

func (x *Conds) GetEntIDs() *v11.StringSliceVal {
	if x != nil {
		return x.EntIDs
	}
	return nil
}

type GetCoinsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetCoinsRequest) Reset() {
	*x = GetCoinsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinsRequest) ProtoMessage() {}

func (x *GetCoinsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinsRequest.ProtoReflect.Descriptor instead.
func (*GetCoinsRequest) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_coin_coin_proto_rawDescGZIP(), []int{2}
}

func (x *GetCoinsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetCoinsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetCoinsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetCoinsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Coin `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32  `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetCoinsResponse) Reset() {
	*x = GetCoinsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCoinsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoinsResponse) ProtoMessage() {}

func (x *GetCoinsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoinsResponse.ProtoReflect.Descriptor instead.
func (*GetCoinsResponse) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_mw_v1_coin_coin_proto_rawDescGZIP(), []int{3}
}

func (x *GetCoinsResponse) GetInfos() []*Coin {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetCoinsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

var File_npool_miningpool_mw_v1_coin_coin_proto protoreflect.FileDescriptor

var file_npool_miningpool_mw_v1_coin_coin_proto_rawDesc = []byte{
	0x0a, 0x26, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f,
	0x6f, 0x6c, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x63, 0x6f,
	0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62,
	0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70,
	0x6f, 0x6f, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xd6, 0x02, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x4f, 0x0a, 0x0e, 0x4d,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x4d, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x08,
	0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x52,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6d, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x74, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x53, 0x69, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x65, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x2a, 0x0a, 0x10, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x41, 0x62, 0x6c, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x41, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x46, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x09, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0xc5, 0x04, 0x0a, 0x05,
	0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52,
	0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x08, 0x43, 0x6f, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0b, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x48, 0x02, 0x52, 0x0b, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x04, 0x53, 0x69, 0x74, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x04, 0x53, 0x69,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x07, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x48, 0x04, 0x52,
	0x07, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x10, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x41, 0x62, 0x6c, 0x65, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x48, 0x05, 0x52, 0x10,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x41, 0x62, 0x6c, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x09, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x48, 0x06, 0x52,
	0x09, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a,
	0x06, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x18, 0xc4, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x48, 0x07, 0x52, 0x06,
	0x45, 0x6e, 0x74, 0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x45, 0x6e,
	0x74, 0x49, 0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x53, 0x69, 0x74, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x46, 0x65,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x41, 0x62, 0x6c, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x45, 0x6e, 0x74,
	0x49, 0x44, 0x73, 0x22, 0x7b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0x63, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x32, 0x7b, 0x0a, 0x0a, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x12, 0x6d, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12,
	0x2e, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2f, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x3e, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6d, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x69, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_miningpool_mw_v1_coin_coin_proto_rawDescOnce sync.Once
	file_npool_miningpool_mw_v1_coin_coin_proto_rawDescData = file_npool_miningpool_mw_v1_coin_coin_proto_rawDesc
)

func file_npool_miningpool_mw_v1_coin_coin_proto_rawDescGZIP() []byte {
	file_npool_miningpool_mw_v1_coin_coin_proto_rawDescOnce.Do(func() {
		file_npool_miningpool_mw_v1_coin_coin_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_miningpool_mw_v1_coin_coin_proto_rawDescData)
	})
	return file_npool_miningpool_mw_v1_coin_coin_proto_rawDescData
}

var file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_npool_miningpool_mw_v1_coin_coin_proto_goTypes = []interface{}{
	(*Coin)(nil),               // 0: miningpool.middleware.coin.v1.Coin
	(*Conds)(nil),              // 1: miningpool.middleware.coin.v1.Conds
	(*GetCoinsRequest)(nil),    // 2: miningpool.middleware.coin.v1.GetCoinsRequest
	(*GetCoinsResponse)(nil),   // 3: miningpool.middleware.coin.v1.GetCoinsResponse
	(v1.MiningpoolType)(0),     // 4: basetypes.miningpool.v1.MiningpoolType
	(v1.CoinType)(0),           // 5: basetypes.miningpool.v1.CoinType
	(v1.RevenueType)(0),        // 6: basetypes.miningpool.v1.RevenueType
	(*v11.StringVal)(nil),      // 7: basetypes.v1.StringVal
	(*v11.Uint32Val)(nil),      // 8: basetypes.v1.Uint32Val
	(*v11.BoolVal)(nil),        // 9: basetypes.v1.BoolVal
	(*v11.StringSliceVal)(nil), // 10: basetypes.v1.StringSliceVal
}
var file_npool_miningpool_mw_v1_coin_coin_proto_depIdxs = []int32{
	4,  // 0: miningpool.middleware.coin.v1.Coin.MiningpoolType:type_name -> basetypes.miningpool.v1.MiningpoolType
	5,  // 1: miningpool.middleware.coin.v1.Coin.CoinType:type_name -> basetypes.miningpool.v1.CoinType
	6,  // 2: miningpool.middleware.coin.v1.Coin.RevenueType:type_name -> basetypes.miningpool.v1.RevenueType
	7,  // 3: miningpool.middleware.coin.v1.Conds.EntID:type_name -> basetypes.v1.StringVal
	8,  // 4: miningpool.middleware.coin.v1.Conds.CoinType:type_name -> basetypes.v1.Uint32Val
	8,  // 5: miningpool.middleware.coin.v1.Conds.RevenueType:type_name -> basetypes.v1.Uint32Val
	7,  // 6: miningpool.middleware.coin.v1.Conds.Site:type_name -> basetypes.v1.StringVal
	9,  // 7: miningpool.middleware.coin.v1.Conds.FeeRate:type_name -> basetypes.v1.BoolVal
	9,  // 8: miningpool.middleware.coin.v1.Conds.FixedRevenueAble:type_name -> basetypes.v1.BoolVal
	9,  // 9: miningpool.middleware.coin.v1.Conds.Threshold:type_name -> basetypes.v1.BoolVal
	10, // 10: miningpool.middleware.coin.v1.Conds.EntIDs:type_name -> basetypes.v1.StringSliceVal
	1,  // 11: miningpool.middleware.coin.v1.GetCoinsRequest.Conds:type_name -> miningpool.middleware.coin.v1.Conds
	0,  // 12: miningpool.middleware.coin.v1.GetCoinsResponse.Infos:type_name -> miningpool.middleware.coin.v1.Coin
	2,  // 13: miningpool.middleware.coin.v1.Middleware.GetCoins:input_type -> miningpool.middleware.coin.v1.GetCoinsRequest
	3,  // 14: miningpool.middleware.coin.v1.Middleware.GetCoins:output_type -> miningpool.middleware.coin.v1.GetCoinsResponse
	14, // [14:15] is the sub-list for method output_type
	13, // [13:14] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_npool_miningpool_mw_v1_coin_coin_proto_init() }
func file_npool_miningpool_mw_v1_coin_coin_proto_init() {
	if File_npool_miningpool_mw_v1_coin_coin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Coin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCoinsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_miningpool_mw_v1_coin_coin_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_miningpool_mw_v1_coin_coin_proto_goTypes,
		DependencyIndexes: file_npool_miningpool_mw_v1_coin_coin_proto_depIdxs,
		MessageInfos:      file_npool_miningpool_mw_v1_coin_coin_proto_msgTypes,
	}.Build()
	File_npool_miningpool_mw_v1_coin_coin_proto = out.File
	file_npool_miningpool_mw_v1_coin_coin_proto_rawDesc = nil
	file_npool_miningpool_mw_v1_coin_coin_proto_goTypes = nil
	file_npool_miningpool_mw_v1_coin_coin_proto_depIdxs = nil
}
