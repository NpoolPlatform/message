// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/miningpool/mw/v1/rootuser/rootuser.proto

package rootuser

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Middleware_CreateRootUser_FullMethodName     = "/miningpool.middleware.rootuser.v1.Middleware/CreateRootUser"
	Middleware_GetRootUser_FullMethodName        = "/miningpool.middleware.rootuser.v1.Middleware/GetRootUser"
	Middleware_GetRootUsers_FullMethodName       = "/miningpool.middleware.rootuser.v1.Middleware/GetRootUsers"
	Middleware_ExistRootUserConds_FullMethodName = "/miningpool.middleware.rootuser.v1.Middleware/ExistRootUserConds"
	Middleware_UpdateRootUser_FullMethodName     = "/miningpool.middleware.rootuser.v1.Middleware/UpdateRootUser"
	Middleware_DeleteRootUser_FullMethodName     = "/miningpool.middleware.rootuser.v1.Middleware/DeleteRootUser"
)

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
	CreateRootUser(ctx context.Context, in *CreateRootUserRequest, opts ...grpc.CallOption) (*CreateRootUserResponse, error)
	GetRootUser(ctx context.Context, in *GetRootUserRequest, opts ...grpc.CallOption) (*GetRootUserResponse, error)
	GetRootUsers(ctx context.Context, in *GetRootUsersRequest, opts ...grpc.CallOption) (*GetRootUsersResponse, error)
	ExistRootUserConds(ctx context.Context, in *ExistRootUserCondsRequest, opts ...grpc.CallOption) (*ExistRootUserCondsResponse, error)
	UpdateRootUser(ctx context.Context, in *UpdateRootUserRequest, opts ...grpc.CallOption) (*UpdateRootUserResponse, error)
	DeleteRootUser(ctx context.Context, in *DeleteRootUserRequest, opts ...grpc.CallOption) (*DeleteRootUserResponse, error)
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) CreateRootUser(ctx context.Context, in *CreateRootUserRequest, opts ...grpc.CallOption) (*CreateRootUserResponse, error) {
	out := new(CreateRootUserResponse)
	err := c.cc.Invoke(ctx, Middleware_CreateRootUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetRootUser(ctx context.Context, in *GetRootUserRequest, opts ...grpc.CallOption) (*GetRootUserResponse, error) {
	out := new(GetRootUserResponse)
	err := c.cc.Invoke(ctx, Middleware_GetRootUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetRootUsers(ctx context.Context, in *GetRootUsersRequest, opts ...grpc.CallOption) (*GetRootUsersResponse, error) {
	out := new(GetRootUsersResponse)
	err := c.cc.Invoke(ctx, Middleware_GetRootUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ExistRootUserConds(ctx context.Context, in *ExistRootUserCondsRequest, opts ...grpc.CallOption) (*ExistRootUserCondsResponse, error) {
	out := new(ExistRootUserCondsResponse)
	err := c.cc.Invoke(ctx, Middleware_ExistRootUserConds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) UpdateRootUser(ctx context.Context, in *UpdateRootUserRequest, opts ...grpc.CallOption) (*UpdateRootUserResponse, error) {
	out := new(UpdateRootUserResponse)
	err := c.cc.Invoke(ctx, Middleware_UpdateRootUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) DeleteRootUser(ctx context.Context, in *DeleteRootUserRequest, opts ...grpc.CallOption) (*DeleteRootUserResponse, error) {
	out := new(DeleteRootUserResponse)
	err := c.cc.Invoke(ctx, Middleware_DeleteRootUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
	CreateRootUser(context.Context, *CreateRootUserRequest) (*CreateRootUserResponse, error)
	GetRootUser(context.Context, *GetRootUserRequest) (*GetRootUserResponse, error)
	GetRootUsers(context.Context, *GetRootUsersRequest) (*GetRootUsersResponse, error)
	ExistRootUserConds(context.Context, *ExistRootUserCondsRequest) (*ExistRootUserCondsResponse, error)
	UpdateRootUser(context.Context, *UpdateRootUserRequest) (*UpdateRootUserResponse, error)
	DeleteRootUser(context.Context, *DeleteRootUserRequest) (*DeleteRootUserResponse, error)
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) CreateRootUser(context.Context, *CreateRootUserRequest) (*CreateRootUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRootUser not implemented")
}
func (UnimplementedMiddlewareServer) GetRootUser(context.Context, *GetRootUserRequest) (*GetRootUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRootUser not implemented")
}
func (UnimplementedMiddlewareServer) GetRootUsers(context.Context, *GetRootUsersRequest) (*GetRootUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRootUsers not implemented")
}
func (UnimplementedMiddlewareServer) ExistRootUserConds(context.Context, *ExistRootUserCondsRequest) (*ExistRootUserCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistRootUserConds not implemented")
}
func (UnimplementedMiddlewareServer) UpdateRootUser(context.Context, *UpdateRootUserRequest) (*UpdateRootUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRootUser not implemented")
}
func (UnimplementedMiddlewareServer) DeleteRootUser(context.Context, *DeleteRootUserRequest) (*DeleteRootUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRootUser not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_CreateRootUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRootUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateRootUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_CreateRootUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateRootUser(ctx, req.(*CreateRootUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetRootUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRootUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetRootUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetRootUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetRootUser(ctx, req.(*GetRootUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetRootUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRootUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetRootUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetRootUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetRootUsers(ctx, req.(*GetRootUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ExistRootUserConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistRootUserCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ExistRootUserConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_ExistRootUserConds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ExistRootUserConds(ctx, req.(*ExistRootUserCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_UpdateRootUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRootUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).UpdateRootUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_UpdateRootUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).UpdateRootUser(ctx, req.(*UpdateRootUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_DeleteRootUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRootUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).DeleteRootUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_DeleteRootUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).DeleteRootUser(ctx, req.(*DeleteRootUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "miningpool.middleware.rootuser.v1.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRootUser",
			Handler:    _Middleware_CreateRootUser_Handler,
		},
		{
			MethodName: "GetRootUser",
			Handler:    _Middleware_GetRootUser_Handler,
		},
		{
			MethodName: "GetRootUsers",
			Handler:    _Middleware_GetRootUsers_Handler,
		},
		{
			MethodName: "ExistRootUserConds",
			Handler:    _Middleware_ExistRootUserConds_Handler,
		},
		{
			MethodName: "UpdateRootUser",
			Handler:    _Middleware_UpdateRootUser_Handler,
		},
		{
			MethodName: "DeleteRootUser",
			Handler:    _Middleware_DeleteRootUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/miningpool/mw/v1/rootuser/rootuser.proto",
}
