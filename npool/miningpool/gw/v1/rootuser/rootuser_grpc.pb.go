// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/miningpool/gw/v1/rootuser/rootuser.proto

package rootuser

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gateway_CreateRootUser_FullMethodName = "/miningpool.gateway.rootuser.v1.Gateway/CreateRootUser"
	Gateway_GetRootUser_FullMethodName    = "/miningpool.gateway.rootuser.v1.Gateway/GetRootUser"
	Gateway_GetRootUsers_FullMethodName   = "/miningpool.gateway.rootuser.v1.Gateway/GetRootUsers"
	Gateway_UpdateRootUser_FullMethodName = "/miningpool.gateway.rootuser.v1.Gateway/UpdateRootUser"
	Gateway_DeleteRootUser_FullMethodName = "/miningpool.gateway.rootuser.v1.Gateway/DeleteRootUser"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	CreateRootUser(ctx context.Context, in *CreateRootUserRequest, opts ...grpc.CallOption) (*CreateRootUserResponse, error)
	GetRootUser(ctx context.Context, in *GetRootUserRequest, opts ...grpc.CallOption) (*GetRootUserResponse, error)
	GetRootUsers(ctx context.Context, in *GetRootUsersRequest, opts ...grpc.CallOption) (*GetRootUsersResponse, error)
	UpdateRootUser(ctx context.Context, in *UpdateRootUserRequest, opts ...grpc.CallOption) (*UpdateRootUserResponse, error)
	DeleteRootUser(ctx context.Context, in *DeleteRootUserRequest, opts ...grpc.CallOption) (*DeleteRootUserResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) CreateRootUser(ctx context.Context, in *CreateRootUserRequest, opts ...grpc.CallOption) (*CreateRootUserResponse, error) {
	out := new(CreateRootUserResponse)
	err := c.cc.Invoke(ctx, Gateway_CreateRootUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetRootUser(ctx context.Context, in *GetRootUserRequest, opts ...grpc.CallOption) (*GetRootUserResponse, error) {
	out := new(GetRootUserResponse)
	err := c.cc.Invoke(ctx, Gateway_GetRootUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetRootUsers(ctx context.Context, in *GetRootUsersRequest, opts ...grpc.CallOption) (*GetRootUsersResponse, error) {
	out := new(GetRootUsersResponse)
	err := c.cc.Invoke(ctx, Gateway_GetRootUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdateRootUser(ctx context.Context, in *UpdateRootUserRequest, opts ...grpc.CallOption) (*UpdateRootUserResponse, error) {
	out := new(UpdateRootUserResponse)
	err := c.cc.Invoke(ctx, Gateway_UpdateRootUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) DeleteRootUser(ctx context.Context, in *DeleteRootUserRequest, opts ...grpc.CallOption) (*DeleteRootUserResponse, error) {
	out := new(DeleteRootUserResponse)
	err := c.cc.Invoke(ctx, Gateway_DeleteRootUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	CreateRootUser(context.Context, *CreateRootUserRequest) (*CreateRootUserResponse, error)
	GetRootUser(context.Context, *GetRootUserRequest) (*GetRootUserResponse, error)
	GetRootUsers(context.Context, *GetRootUsersRequest) (*GetRootUsersResponse, error)
	UpdateRootUser(context.Context, *UpdateRootUserRequest) (*UpdateRootUserResponse, error)
	DeleteRootUser(context.Context, *DeleteRootUserRequest) (*DeleteRootUserResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) CreateRootUser(context.Context, *CreateRootUserRequest) (*CreateRootUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRootUser not implemented")
}
func (UnimplementedGatewayServer) GetRootUser(context.Context, *GetRootUserRequest) (*GetRootUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRootUser not implemented")
}
func (UnimplementedGatewayServer) GetRootUsers(context.Context, *GetRootUsersRequest) (*GetRootUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRootUsers not implemented")
}
func (UnimplementedGatewayServer) UpdateRootUser(context.Context, *UpdateRootUserRequest) (*UpdateRootUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRootUser not implemented")
}
func (UnimplementedGatewayServer) DeleteRootUser(context.Context, *DeleteRootUserRequest) (*DeleteRootUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRootUser not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_CreateRootUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRootUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateRootUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_CreateRootUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateRootUser(ctx, req.(*CreateRootUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetRootUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRootUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetRootUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetRootUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetRootUser(ctx, req.(*GetRootUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetRootUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRootUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetRootUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetRootUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetRootUsers(ctx, req.(*GetRootUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdateRootUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRootUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateRootUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_UpdateRootUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateRootUser(ctx, req.(*UpdateRootUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_DeleteRootUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRootUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).DeleteRootUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_DeleteRootUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).DeleteRootUser(ctx, req.(*DeleteRootUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "miningpool.gateway.rootuser.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRootUser",
			Handler:    _Gateway_CreateRootUser_Handler,
		},
		{
			MethodName: "GetRootUser",
			Handler:    _Gateway_GetRootUser_Handler,
		},
		{
			MethodName: "GetRootUsers",
			Handler:    _Gateway_GetRootUsers_Handler,
		},
		{
			MethodName: "UpdateRootUser",
			Handler:    _Gateway_UpdateRootUser_Handler,
		},
		{
			MethodName: "DeleteRootUser",
			Handler:    _Gateway_DeleteRootUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/miningpool/gw/v1/rootuser/rootuser.proto",
}
