// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.18.1
// source: npool/miningpool/gw/v1/fractionrule/fractionrule.proto

package fractionrule

import (
	v1 "github.com/NpoolPlatform/message/npool/basetypes/miningpool/v1"
	v11 "github.com/NpoolPlatform/message/npool/basetypes/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FractionRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               uint32            `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID            string            `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty"`
	PoolID           string            `protobuf:"bytes,29,opt,name=PoolID,proto3" json:"PoolID,omitempty"`
	PoolCoinTypeID   string            `protobuf:"bytes,30,opt,name=PoolCoinTypeID,proto3" json:"PoolCoinTypeID,omitempty"`
	CoinTypeID       string            `protobuf:"bytes,31,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty"`
	WithdrawInterval uint32            `protobuf:"varint,40,opt,name=WithdrawInterval,proto3" json:"WithdrawInterval,omitempty"`
	PayoutThreshold  string            `protobuf:"bytes,50,opt,name=PayoutThreshold,proto3" json:"PayoutThreshold,omitempty"`
	MinAmount        string            `protobuf:"bytes,60,opt,name=MinAmount,proto3" json:"MinAmount,omitempty"`
	WithdrawRate     string            `protobuf:"bytes,70,opt,name=WithdrawRate,proto3" json:"WithdrawRate,omitempty"`
	MiningpoolType   v1.MiningpoolType `protobuf:"varint,80,opt,name=MiningpoolType,proto3,enum=basetypes.miningpool.v1.MiningpoolType" json:"MiningpoolType,omitempty"`
	CoinType         v11.CoinType      `protobuf:"varint,90,opt,name=CoinType,proto3,enum=basetypes.v1.CoinType" json:"CoinType,omitempty"`
	CreatedAt        uint32            `protobuf:"varint,100,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt        uint32            `protobuf:"varint,110,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (x *FractionRule) Reset() {
	*x = FractionRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FractionRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FractionRule) ProtoMessage() {}

func (x *FractionRule) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FractionRule.ProtoReflect.Descriptor instead.
func (*FractionRule) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_rawDescGZIP(), []int{0}
}

func (x *FractionRule) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *FractionRule) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *FractionRule) GetPoolID() string {
	if x != nil {
		return x.PoolID
	}
	return ""
}

func (x *FractionRule) GetPoolCoinTypeID() string {
	if x != nil {
		return x.PoolCoinTypeID
	}
	return ""
}

func (x *FractionRule) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

func (x *FractionRule) GetWithdrawInterval() uint32 {
	if x != nil {
		return x.WithdrawInterval
	}
	return 0
}

func (x *FractionRule) GetPayoutThreshold() string {
	if x != nil {
		return x.PayoutThreshold
	}
	return ""
}

func (x *FractionRule) GetMinAmount() string {
	if x != nil {
		return x.MinAmount
	}
	return ""
}

func (x *FractionRule) GetWithdrawRate() string {
	if x != nil {
		return x.WithdrawRate
	}
	return ""
}

func (x *FractionRule) GetMiningpoolType() v1.MiningpoolType {
	if x != nil {
		return x.MiningpoolType
	}
	return v1.MiningpoolType(0)
}

func (x *FractionRule) GetCoinType() v11.CoinType {
	if x != nil {
		return x.CoinType
	}
	return v11.CoinType(0)
}

func (x *FractionRule) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *FractionRule) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type AdminCreateFractionRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolCoinTypeID   string `protobuf:"bytes,10,opt,name=PoolCoinTypeID,proto3" json:"PoolCoinTypeID,omitempty"`
	WithdrawInterval uint32 `protobuf:"varint,20,opt,name=WithdrawInterval,proto3" json:"WithdrawInterval,omitempty"`
	PayoutThreshold  string `protobuf:"bytes,30,opt,name=PayoutThreshold,proto3" json:"PayoutThreshold,omitempty"`
	MinAmount        string `protobuf:"bytes,40,opt,name=MinAmount,proto3" json:"MinAmount,omitempty"`
	WithdrawRate     string `protobuf:"bytes,50,opt,name=WithdrawRate,proto3" json:"WithdrawRate,omitempty"`
}

func (x *AdminCreateFractionRuleRequest) Reset() {
	*x = AdminCreateFractionRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminCreateFractionRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminCreateFractionRuleRequest) ProtoMessage() {}

func (x *AdminCreateFractionRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminCreateFractionRuleRequest.ProtoReflect.Descriptor instead.
func (*AdminCreateFractionRuleRequest) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_rawDescGZIP(), []int{1}
}

func (x *AdminCreateFractionRuleRequest) GetPoolCoinTypeID() string {
	if x != nil {
		return x.PoolCoinTypeID
	}
	return ""
}

func (x *AdminCreateFractionRuleRequest) GetWithdrawInterval() uint32 {
	if x != nil {
		return x.WithdrawInterval
	}
	return 0
}

func (x *AdminCreateFractionRuleRequest) GetPayoutThreshold() string {
	if x != nil {
		return x.PayoutThreshold
	}
	return ""
}

func (x *AdminCreateFractionRuleRequest) GetMinAmount() string {
	if x != nil {
		return x.MinAmount
	}
	return ""
}

func (x *AdminCreateFractionRuleRequest) GetWithdrawRate() string {
	if x != nil {
		return x.WithdrawRate
	}
	return ""
}

type AdminCreateFractionRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *FractionRule `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *AdminCreateFractionRuleResponse) Reset() {
	*x = AdminCreateFractionRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminCreateFractionRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminCreateFractionRuleResponse) ProtoMessage() {}

func (x *AdminCreateFractionRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminCreateFractionRuleResponse.ProtoReflect.Descriptor instead.
func (*AdminCreateFractionRuleResponse) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_rawDescGZIP(), []int{2}
}

func (x *AdminCreateFractionRuleResponse) GetInfo() *FractionRule {
	if x != nil {
		return x.Info
	}
	return nil
}

type AdminUpdateFractionRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID               uint32  `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID            string  `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty"`
	WithdrawInterval *uint32 `protobuf:"varint,30,opt,name=WithdrawInterval,proto3,oneof" json:"WithdrawInterval,omitempty"`
	PayoutThreshold  *string `protobuf:"bytes,40,opt,name=PayoutThreshold,proto3,oneof" json:"PayoutThreshold,omitempty"`
	MinAmount        *string `protobuf:"bytes,50,opt,name=MinAmount,proto3,oneof" json:"MinAmount,omitempty"`
	WithdrawRate     *string `protobuf:"bytes,60,opt,name=WithdrawRate,proto3,oneof" json:"WithdrawRate,omitempty"`
}

func (x *AdminUpdateFractionRuleRequest) Reset() {
	*x = AdminUpdateFractionRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminUpdateFractionRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminUpdateFractionRuleRequest) ProtoMessage() {}

func (x *AdminUpdateFractionRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminUpdateFractionRuleRequest.ProtoReflect.Descriptor instead.
func (*AdminUpdateFractionRuleRequest) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_rawDescGZIP(), []int{3}
}

func (x *AdminUpdateFractionRuleRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *AdminUpdateFractionRuleRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *AdminUpdateFractionRuleRequest) GetWithdrawInterval() uint32 {
	if x != nil && x.WithdrawInterval != nil {
		return *x.WithdrawInterval
	}
	return 0
}

func (x *AdminUpdateFractionRuleRequest) GetPayoutThreshold() string {
	if x != nil && x.PayoutThreshold != nil {
		return *x.PayoutThreshold
	}
	return ""
}

func (x *AdminUpdateFractionRuleRequest) GetMinAmount() string {
	if x != nil && x.MinAmount != nil {
		return *x.MinAmount
	}
	return ""
}

func (x *AdminUpdateFractionRuleRequest) GetWithdrawRate() string {
	if x != nil && x.WithdrawRate != nil {
		return *x.WithdrawRate
	}
	return ""
}

type AdminUpdateFractionRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *FractionRule `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *AdminUpdateFractionRuleResponse) Reset() {
	*x = AdminUpdateFractionRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminUpdateFractionRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminUpdateFractionRuleResponse) ProtoMessage() {}

func (x *AdminUpdateFractionRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminUpdateFractionRuleResponse.ProtoReflect.Descriptor instead.
func (*AdminUpdateFractionRuleResponse) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_rawDescGZIP(), []int{4}
}

func (x *AdminUpdateFractionRuleResponse) GetInfo() *FractionRule {
	if x != nil {
		return x.Info
	}
	return nil
}

type AdminGetFractionRulesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int32 `protobuf:"varint,10,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32 `protobuf:"varint,20,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *AdminGetFractionRulesRequest) Reset() {
	*x = AdminGetFractionRulesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminGetFractionRulesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminGetFractionRulesRequest) ProtoMessage() {}

func (x *AdminGetFractionRulesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminGetFractionRulesRequest.ProtoReflect.Descriptor instead.
func (*AdminGetFractionRulesRequest) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_rawDescGZIP(), []int{5}
}

func (x *AdminGetFractionRulesRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *AdminGetFractionRulesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type AdminGetFractionRulesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*FractionRule `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32          `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *AdminGetFractionRulesResponse) Reset() {
	*x = AdminGetFractionRulesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminGetFractionRulesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminGetFractionRulesResponse) ProtoMessage() {}

func (x *AdminGetFractionRulesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminGetFractionRulesResponse.ProtoReflect.Descriptor instead.
func (*AdminGetFractionRulesResponse) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_rawDescGZIP(), []int{6}
}

func (x *AdminGetFractionRulesResponse) GetInfos() []*FractionRule {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *AdminGetFractionRulesResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type AdminDeleteFractionRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID    uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID string `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty"`
}

func (x *AdminDeleteFractionRuleRequest) Reset() {
	*x = AdminDeleteFractionRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminDeleteFractionRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminDeleteFractionRuleRequest) ProtoMessage() {}

func (x *AdminDeleteFractionRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminDeleteFractionRuleRequest.ProtoReflect.Descriptor instead.
func (*AdminDeleteFractionRuleRequest) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_rawDescGZIP(), []int{7}
}

func (x *AdminDeleteFractionRuleRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *AdminDeleteFractionRuleRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

type AdminDeleteFractionRuleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *FractionRule `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *AdminDeleteFractionRuleResponse) Reset() {
	*x = AdminDeleteFractionRuleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminDeleteFractionRuleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminDeleteFractionRuleResponse) ProtoMessage() {}

func (x *AdminDeleteFractionRuleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminDeleteFractionRuleResponse.ProtoReflect.Descriptor instead.
func (*AdminDeleteFractionRuleResponse) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_rawDescGZIP(), []int{8}
}

func (x *AdminDeleteFractionRuleResponse) GetInfo() *FractionRule {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_miningpool_gw_v1_fractionrule_fractionrule_proto protoreflect.FileDescriptor

var file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_rawDesc = []byte{
	0x0a, 0x36, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f,
	0x6f, 0x6c, 0x2f, 0x67, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x75,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x22, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x66, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x6e, 0x70, 0x6f, 0x6f,
	0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x69, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x6e,
	0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75,
	0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xed, 0x03, 0x0a, 0x0c, 0x46, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x6f, 0x6f, 0x6c, 0x43,
	0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12,
	0x2a, 0x0a, 0x10, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x50,
	0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x69, 0x6e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52,
	0x61, 0x74, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x52, 0x61, 0x74, 0x65, 0x12, 0x4f, 0x0a, 0x0e, 0x4d, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6d, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x70, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x70, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xe0, 0x01, 0x0a, 0x1e, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x50,
	0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x28, 0x0a, 0x0f, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x69, 0x6e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4d, 0x69,
	0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x52, 0x61, 0x74, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x61, 0x74, 0x65, 0x22, 0x67, 0x0a, 0x1f, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0xba, 0x02, 0x0a, 0x1e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x2f, 0x0a,
	0x10, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x10, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2d,
	0x0a, 0x0f, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0f, 0x50, 0x61, 0x79, 0x6f, 0x75,
	0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a,
	0x09, 0x4d, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x09, 0x4d, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x27, 0x0a, 0x0c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x61, 0x74, 0x65,
	0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x4d, 0x69, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x52, 0x61, 0x74,
	0x65, 0x22, 0x67, 0x0a, 0x1f, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x72, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4c, 0x0a, 0x1c, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x7d, 0x0a, 0x1d, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x47, 0x65, 0x74, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x66, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x46, 0x0a, 0x1e, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x22,
	0x67, 0x0a, 0x1f, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x44, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x75,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0xe5, 0x06, 0x0a, 0x07, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x12, 0xd6, 0x01, 0x0a, 0x17, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x42, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x75,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f,
	0x6c, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f,
	0x6c, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x75, 0x6c, 0x65, 0x12, 0xd6, 0x01,
	0x0a, 0x17, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x42, 0x2e, 0x6d, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x66,
	0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e,
	0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x75, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x32, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x72, 0x75, 0x6c, 0x65, 0x12, 0xce, 0x01, 0x0a, 0x15, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x47, 0x65, 0x74, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x12, 0x40, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x75,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x46, 0x72,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x41, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x72, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74,
	0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a,
	0x22, 0x25, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x67, 0x65, 0x74, 0x2f,
	0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x12, 0xd6, 0x01, 0x0a, 0x17, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x42, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x66, 0x72, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x32, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2f, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x70, 0x6f, 0x6f, 0x6c, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x72, 0x75, 0x6c, 0x65,
	0x42, 0x46, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e,
	0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6d, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x72, 0x75, 0x6c, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_rawDescOnce sync.Once
	file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_rawDescData = file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_rawDesc
)

func file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_rawDescGZIP() []byte {
	file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_rawDescOnce.Do(func() {
		file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_rawDescData)
	})
	return file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_rawDescData
}

var file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_goTypes = []interface{}{
	(*FractionRule)(nil),                    // 0: miningpool.gateway.fractionrule.v1.FractionRule
	(*AdminCreateFractionRuleRequest)(nil),  // 1: miningpool.gateway.fractionrule.v1.AdminCreateFractionRuleRequest
	(*AdminCreateFractionRuleResponse)(nil), // 2: miningpool.gateway.fractionrule.v1.AdminCreateFractionRuleResponse
	(*AdminUpdateFractionRuleRequest)(nil),  // 3: miningpool.gateway.fractionrule.v1.AdminUpdateFractionRuleRequest
	(*AdminUpdateFractionRuleResponse)(nil), // 4: miningpool.gateway.fractionrule.v1.AdminUpdateFractionRuleResponse
	(*AdminGetFractionRulesRequest)(nil),    // 5: miningpool.gateway.fractionrule.v1.AdminGetFractionRulesRequest
	(*AdminGetFractionRulesResponse)(nil),   // 6: miningpool.gateway.fractionrule.v1.AdminGetFractionRulesResponse
	(*AdminDeleteFractionRuleRequest)(nil),  // 7: miningpool.gateway.fractionrule.v1.AdminDeleteFractionRuleRequest
	(*AdminDeleteFractionRuleResponse)(nil), // 8: miningpool.gateway.fractionrule.v1.AdminDeleteFractionRuleResponse
	(v1.MiningpoolType)(0),                  // 9: basetypes.miningpool.v1.MiningpoolType
	(v11.CoinType)(0),                       // 10: basetypes.v1.CoinType
}
var file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_depIdxs = []int32{
	9,  // 0: miningpool.gateway.fractionrule.v1.FractionRule.MiningpoolType:type_name -> basetypes.miningpool.v1.MiningpoolType
	10, // 1: miningpool.gateway.fractionrule.v1.FractionRule.CoinType:type_name -> basetypes.v1.CoinType
	0,  // 2: miningpool.gateway.fractionrule.v1.AdminCreateFractionRuleResponse.Info:type_name -> miningpool.gateway.fractionrule.v1.FractionRule
	0,  // 3: miningpool.gateway.fractionrule.v1.AdminUpdateFractionRuleResponse.Info:type_name -> miningpool.gateway.fractionrule.v1.FractionRule
	0,  // 4: miningpool.gateway.fractionrule.v1.AdminGetFractionRulesResponse.Infos:type_name -> miningpool.gateway.fractionrule.v1.FractionRule
	0,  // 5: miningpool.gateway.fractionrule.v1.AdminDeleteFractionRuleResponse.Info:type_name -> miningpool.gateway.fractionrule.v1.FractionRule
	1,  // 6: miningpool.gateway.fractionrule.v1.Gateway.AdminCreateFractionRule:input_type -> miningpool.gateway.fractionrule.v1.AdminCreateFractionRuleRequest
	3,  // 7: miningpool.gateway.fractionrule.v1.Gateway.AdminUpdateFractionRule:input_type -> miningpool.gateway.fractionrule.v1.AdminUpdateFractionRuleRequest
	5,  // 8: miningpool.gateway.fractionrule.v1.Gateway.AdminGetFractionRules:input_type -> miningpool.gateway.fractionrule.v1.AdminGetFractionRulesRequest
	7,  // 9: miningpool.gateway.fractionrule.v1.Gateway.AdminDeleteFractionRule:input_type -> miningpool.gateway.fractionrule.v1.AdminDeleteFractionRuleRequest
	2,  // 10: miningpool.gateway.fractionrule.v1.Gateway.AdminCreateFractionRule:output_type -> miningpool.gateway.fractionrule.v1.AdminCreateFractionRuleResponse
	4,  // 11: miningpool.gateway.fractionrule.v1.Gateway.AdminUpdateFractionRule:output_type -> miningpool.gateway.fractionrule.v1.AdminUpdateFractionRuleResponse
	6,  // 12: miningpool.gateway.fractionrule.v1.Gateway.AdminGetFractionRules:output_type -> miningpool.gateway.fractionrule.v1.AdminGetFractionRulesResponse
	8,  // 13: miningpool.gateway.fractionrule.v1.Gateway.AdminDeleteFractionRule:output_type -> miningpool.gateway.fractionrule.v1.AdminDeleteFractionRuleResponse
	10, // [10:14] is the sub-list for method output_type
	6,  // [6:10] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_init() }
func file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_init() {
	if File_npool_miningpool_gw_v1_fractionrule_fractionrule_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FractionRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminCreateFractionRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminCreateFractionRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminUpdateFractionRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminUpdateFractionRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminGetFractionRulesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminGetFractionRulesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminDeleteFractionRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminDeleteFractionRuleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_msgTypes[3].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_goTypes,
		DependencyIndexes: file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_depIdxs,
		MessageInfos:      file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_msgTypes,
	}.Build()
	File_npool_miningpool_gw_v1_fractionrule_fractionrule_proto = out.File
	file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_rawDesc = nil
	file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_goTypes = nil
	file_npool_miningpool_gw_v1_fractionrule_fractionrule_proto_depIdxs = nil
}
