// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/miningpool/gw/v1/fractionrule/fractionrule.proto

package fractionrule

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gateway_AdminCreateFractionRule_FullMethodName = "/miningpool.gateway.fractionrule.v1.Gateway/AdminCreateFractionRule"
	Gateway_AdminUpdateFractionRule_FullMethodName = "/miningpool.gateway.fractionrule.v1.Gateway/AdminUpdateFractionRule"
	Gateway_AdminGetFractionRules_FullMethodName   = "/miningpool.gateway.fractionrule.v1.Gateway/AdminGetFractionRules"
	Gateway_AdminDeleteFractionRule_FullMethodName = "/miningpool.gateway.fractionrule.v1.Gateway/AdminDeleteFractionRule"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	AdminCreateFractionRule(ctx context.Context, in *AdminCreateFractionRuleRequest, opts ...grpc.CallOption) (*AdminCreateFractionRuleResponse, error)
	AdminUpdateFractionRule(ctx context.Context, in *AdminUpdateFractionRuleRequest, opts ...grpc.CallOption) (*AdminUpdateFractionRuleResponse, error)
	AdminGetFractionRules(ctx context.Context, in *AdminGetFractionRulesRequest, opts ...grpc.CallOption) (*AdminGetFractionRulesResponse, error)
	AdminDeleteFractionRule(ctx context.Context, in *AdminDeleteFractionRuleRequest, opts ...grpc.CallOption) (*AdminDeleteFractionRuleResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) AdminCreateFractionRule(ctx context.Context, in *AdminCreateFractionRuleRequest, opts ...grpc.CallOption) (*AdminCreateFractionRuleResponse, error) {
	out := new(AdminCreateFractionRuleResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminCreateFractionRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminUpdateFractionRule(ctx context.Context, in *AdminUpdateFractionRuleRequest, opts ...grpc.CallOption) (*AdminUpdateFractionRuleResponse, error) {
	out := new(AdminUpdateFractionRuleResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminUpdateFractionRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminGetFractionRules(ctx context.Context, in *AdminGetFractionRulesRequest, opts ...grpc.CallOption) (*AdminGetFractionRulesResponse, error) {
	out := new(AdminGetFractionRulesResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminGetFractionRules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminDeleteFractionRule(ctx context.Context, in *AdminDeleteFractionRuleRequest, opts ...grpc.CallOption) (*AdminDeleteFractionRuleResponse, error) {
	out := new(AdminDeleteFractionRuleResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminDeleteFractionRule_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	AdminCreateFractionRule(context.Context, *AdminCreateFractionRuleRequest) (*AdminCreateFractionRuleResponse, error)
	AdminUpdateFractionRule(context.Context, *AdminUpdateFractionRuleRequest) (*AdminUpdateFractionRuleResponse, error)
	AdminGetFractionRules(context.Context, *AdminGetFractionRulesRequest) (*AdminGetFractionRulesResponse, error)
	AdminDeleteFractionRule(context.Context, *AdminDeleteFractionRuleRequest) (*AdminDeleteFractionRuleResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) AdminCreateFractionRule(context.Context, *AdminCreateFractionRuleRequest) (*AdminCreateFractionRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCreateFractionRule not implemented")
}
func (UnimplementedGatewayServer) AdminUpdateFractionRule(context.Context, *AdminUpdateFractionRuleRequest) (*AdminUpdateFractionRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateFractionRule not implemented")
}
func (UnimplementedGatewayServer) AdminGetFractionRules(context.Context, *AdminGetFractionRulesRequest) (*AdminGetFractionRulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetFractionRules not implemented")
}
func (UnimplementedGatewayServer) AdminDeleteFractionRule(context.Context, *AdminDeleteFractionRuleRequest) (*AdminDeleteFractionRuleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminDeleteFractionRule not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_AdminCreateFractionRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminCreateFractionRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminCreateFractionRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminCreateFractionRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminCreateFractionRule(ctx, req.(*AdminCreateFractionRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminUpdateFractionRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateFractionRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminUpdateFractionRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminUpdateFractionRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminUpdateFractionRule(ctx, req.(*AdminUpdateFractionRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminGetFractionRules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetFractionRulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminGetFractionRules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminGetFractionRules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminGetFractionRules(ctx, req.(*AdminGetFractionRulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminDeleteFractionRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminDeleteFractionRuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminDeleteFractionRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminDeleteFractionRule_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminDeleteFractionRule(ctx, req.(*AdminDeleteFractionRuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "miningpool.gateway.fractionrule.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AdminCreateFractionRule",
			Handler:    _Gateway_AdminCreateFractionRule_Handler,
		},
		{
			MethodName: "AdminUpdateFractionRule",
			Handler:    _Gateway_AdminUpdateFractionRule_Handler,
		},
		{
			MethodName: "AdminGetFractionRules",
			Handler:    _Gateway_AdminGetFractionRules_Handler,
		},
		{
			MethodName: "AdminDeleteFractionRule",
			Handler:    _Gateway_AdminDeleteFractionRule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/miningpool/gw/v1/fractionrule/fractionrule.proto",
}
