// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.18.1
// source: npool/miningpool/gw/v1/coin/coin.proto

package coin

import (
	v11 "github.com/NpoolPlatform/message/npool/basetypes/miningpool/v1"
	v1 "github.com/NpoolPlatform/message/npool/basetypes/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Coin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                     uint32             `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID                  string             `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty"`
	PoolID                 string             `protobuf:"bytes,30,opt,name=PoolID,proto3" json:"PoolID,omitempty"`
	CoinTypeID             string             `protobuf:"bytes,31,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty"`
	CoinType               v1.CoinType        `protobuf:"varint,40,opt,name=CoinType,proto3,enum=basetypes.v1.CoinType" json:"CoinType,omitempty"`
	RevenueType            v11.RevenueType    `protobuf:"varint,50,opt,name=RevenueType,proto3,enum=basetypes.miningpool.v1.RevenueType" json:"RevenueType,omitempty"`
	FeeRatio               string             `protobuf:"bytes,60,opt,name=FeeRatio,proto3" json:"FeeRatio,omitempty"`
	FixedRevenueAble       bool               `protobuf:"varint,70,opt,name=FixedRevenueAble,proto3" json:"FixedRevenueAble,omitempty"`
	LeastTransferAmount    string             `protobuf:"bytes,80,opt,name=LeastTransferAmount,proto3" json:"LeastTransferAmount,omitempty"`
	BenefitIntervalSeconds uint32             `protobuf:"varint,90,opt,name=BenefitIntervalSeconds,proto3" json:"BenefitIntervalSeconds,omitempty"`
	Remark                 string             `protobuf:"bytes,100,opt,name=Remark,proto3" json:"Remark,omitempty"`
	MiningpoolType         v11.MiningpoolType `protobuf:"varint,110,opt,name=MiningpoolType,proto3,enum=basetypes.miningpool.v1.MiningpoolType" json:"MiningpoolType,omitempty"`
	CreatedAt              uint32             `protobuf:"varint,120,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt              uint32             `protobuf:"varint,130,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (x *Coin) Reset() {
	*x = Coin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_gw_v1_coin_coin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coin) ProtoMessage() {}

func (x *Coin) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_gw_v1_coin_coin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coin.ProtoReflect.Descriptor instead.
func (*Coin) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_gw_v1_coin_coin_proto_rawDescGZIP(), []int{0}
}

func (x *Coin) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Coin) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *Coin) GetPoolID() string {
	if x != nil {
		return x.PoolID
	}
	return ""
}

func (x *Coin) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

func (x *Coin) GetCoinType() v1.CoinType {
	if x != nil {
		return x.CoinType
	}
	return v1.CoinType(0)
}

func (x *Coin) GetRevenueType() v11.RevenueType {
	if x != nil {
		return x.RevenueType
	}
	return v11.RevenueType(0)
}

func (x *Coin) GetFeeRatio() string {
	if x != nil {
		return x.FeeRatio
	}
	return ""
}

func (x *Coin) GetFixedRevenueAble() bool {
	if x != nil {
		return x.FixedRevenueAble
	}
	return false
}

func (x *Coin) GetLeastTransferAmount() string {
	if x != nil {
		return x.LeastTransferAmount
	}
	return ""
}

func (x *Coin) GetBenefitIntervalSeconds() uint32 {
	if x != nil {
		return x.BenefitIntervalSeconds
	}
	return 0
}

func (x *Coin) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *Coin) GetMiningpoolType() v11.MiningpoolType {
	if x != nil {
		return x.MiningpoolType
	}
	return v11.MiningpoolType(0)
}

func (x *Coin) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Coin) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type AdminCreateCoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PoolID                 string          `protobuf:"bytes,10,opt,name=PoolID,proto3" json:"PoolID,omitempty"`
	CoinTypeID             string          `protobuf:"bytes,20,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty"`
	CoinType               v1.CoinType     `protobuf:"varint,30,opt,name=CoinType,proto3,enum=basetypes.v1.CoinType" json:"CoinType,omitempty"`
	RevenueType            v11.RevenueType `protobuf:"varint,40,opt,name=RevenueType,proto3,enum=basetypes.miningpool.v1.RevenueType" json:"RevenueType,omitempty"`
	FeeRatio               string          `protobuf:"bytes,50,opt,name=FeeRatio,proto3" json:"FeeRatio,omitempty"`
	FixedRevenueAble       bool            `protobuf:"varint,60,opt,name=FixedRevenueAble,proto3" json:"FixedRevenueAble,omitempty"`
	LeastTransferAmount    string          `protobuf:"bytes,70,opt,name=LeastTransferAmount,proto3" json:"LeastTransferAmount,omitempty"`
	BenefitIntervalSeconds uint32          `protobuf:"varint,80,opt,name=BenefitIntervalSeconds,proto3" json:"BenefitIntervalSeconds,omitempty"`
	Remark                 *string         `protobuf:"bytes,90,opt,name=Remark,proto3,oneof" json:"Remark,omitempty"`
}

func (x *AdminCreateCoinRequest) Reset() {
	*x = AdminCreateCoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_gw_v1_coin_coin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminCreateCoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminCreateCoinRequest) ProtoMessage() {}

func (x *AdminCreateCoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_gw_v1_coin_coin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminCreateCoinRequest.ProtoReflect.Descriptor instead.
func (*AdminCreateCoinRequest) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_gw_v1_coin_coin_proto_rawDescGZIP(), []int{1}
}

func (x *AdminCreateCoinRequest) GetPoolID() string {
	if x != nil {
		return x.PoolID
	}
	return ""
}

func (x *AdminCreateCoinRequest) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

func (x *AdminCreateCoinRequest) GetCoinType() v1.CoinType {
	if x != nil {
		return x.CoinType
	}
	return v1.CoinType(0)
}

func (x *AdminCreateCoinRequest) GetRevenueType() v11.RevenueType {
	if x != nil {
		return x.RevenueType
	}
	return v11.RevenueType(0)
}

func (x *AdminCreateCoinRequest) GetFeeRatio() string {
	if x != nil {
		return x.FeeRatio
	}
	return ""
}

func (x *AdminCreateCoinRequest) GetFixedRevenueAble() bool {
	if x != nil {
		return x.FixedRevenueAble
	}
	return false
}

func (x *AdminCreateCoinRequest) GetLeastTransferAmount() string {
	if x != nil {
		return x.LeastTransferAmount
	}
	return ""
}

func (x *AdminCreateCoinRequest) GetBenefitIntervalSeconds() uint32 {
	if x != nil {
		return x.BenefitIntervalSeconds
	}
	return 0
}

func (x *AdminCreateCoinRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

type AdminCreateCoinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Coin `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *AdminCreateCoinResponse) Reset() {
	*x = AdminCreateCoinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_gw_v1_coin_coin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminCreateCoinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminCreateCoinResponse) ProtoMessage() {}

func (x *AdminCreateCoinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_gw_v1_coin_coin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminCreateCoinResponse.ProtoReflect.Descriptor instead.
func (*AdminCreateCoinResponse) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_gw_v1_coin_coin_proto_rawDescGZIP(), []int{2}
}

func (x *AdminCreateCoinResponse) GetInfo() *Coin {
	if x != nil {
		return x.Info
	}
	return nil
}

type AdminUpdateCoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                     uint32           `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID                  string           `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty"`
	RevenueType            *v11.RevenueType `protobuf:"varint,30,opt,name=RevenueType,proto3,enum=basetypes.miningpool.v1.RevenueType,oneof" json:"RevenueType,omitempty"`
	FeeRatio               *string          `protobuf:"bytes,40,opt,name=FeeRatio,proto3,oneof" json:"FeeRatio,omitempty"`
	FixedRevenueAble       *bool            `protobuf:"varint,50,opt,name=FixedRevenueAble,proto3,oneof" json:"FixedRevenueAble,omitempty"`
	LeastTransferAmount    *string          `protobuf:"bytes,60,opt,name=LeastTransferAmount,proto3,oneof" json:"LeastTransferAmount,omitempty"`
	BenefitIntervalSeconds *uint32          `protobuf:"varint,70,opt,name=BenefitIntervalSeconds,proto3,oneof" json:"BenefitIntervalSeconds,omitempty"`
	Remark                 *string          `protobuf:"bytes,80,opt,name=Remark,proto3,oneof" json:"Remark,omitempty"`
}

func (x *AdminUpdateCoinRequest) Reset() {
	*x = AdminUpdateCoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_gw_v1_coin_coin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminUpdateCoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminUpdateCoinRequest) ProtoMessage() {}

func (x *AdminUpdateCoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_gw_v1_coin_coin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminUpdateCoinRequest.ProtoReflect.Descriptor instead.
func (*AdminUpdateCoinRequest) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_gw_v1_coin_coin_proto_rawDescGZIP(), []int{3}
}

func (x *AdminUpdateCoinRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *AdminUpdateCoinRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *AdminUpdateCoinRequest) GetRevenueType() v11.RevenueType {
	if x != nil && x.RevenueType != nil {
		return *x.RevenueType
	}
	return v11.RevenueType(0)
}

func (x *AdminUpdateCoinRequest) GetFeeRatio() string {
	if x != nil && x.FeeRatio != nil {
		return *x.FeeRatio
	}
	return ""
}

func (x *AdminUpdateCoinRequest) GetFixedRevenueAble() bool {
	if x != nil && x.FixedRevenueAble != nil {
		return *x.FixedRevenueAble
	}
	return false
}

func (x *AdminUpdateCoinRequest) GetLeastTransferAmount() string {
	if x != nil && x.LeastTransferAmount != nil {
		return *x.LeastTransferAmount
	}
	return ""
}

func (x *AdminUpdateCoinRequest) GetBenefitIntervalSeconds() uint32 {
	if x != nil && x.BenefitIntervalSeconds != nil {
		return *x.BenefitIntervalSeconds
	}
	return 0
}

func (x *AdminUpdateCoinRequest) GetRemark() string {
	if x != nil && x.Remark != nil {
		return *x.Remark
	}
	return ""
}

type AdminUpdateCoinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Coin `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *AdminUpdateCoinResponse) Reset() {
	*x = AdminUpdateCoinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_gw_v1_coin_coin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminUpdateCoinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminUpdateCoinResponse) ProtoMessage() {}

func (x *AdminUpdateCoinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_gw_v1_coin_coin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminUpdateCoinResponse.ProtoReflect.Descriptor instead.
func (*AdminUpdateCoinResponse) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_gw_v1_coin_coin_proto_rawDescGZIP(), []int{4}
}

func (x *AdminUpdateCoinResponse) GetInfo() *Coin {
	if x != nil {
		return x.Info
	}
	return nil
}

type AdminGetCoinsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int32 `protobuf:"varint,10,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32 `protobuf:"varint,20,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *AdminGetCoinsRequest) Reset() {
	*x = AdminGetCoinsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_gw_v1_coin_coin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminGetCoinsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminGetCoinsRequest) ProtoMessage() {}

func (x *AdminGetCoinsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_gw_v1_coin_coin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminGetCoinsRequest.ProtoReflect.Descriptor instead.
func (*AdminGetCoinsRequest) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_gw_v1_coin_coin_proto_rawDescGZIP(), []int{5}
}

func (x *AdminGetCoinsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *AdminGetCoinsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type AdminGetCoinsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Coin `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32  `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *AdminGetCoinsResponse) Reset() {
	*x = AdminGetCoinsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_gw_v1_coin_coin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminGetCoinsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminGetCoinsResponse) ProtoMessage() {}

func (x *AdminGetCoinsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_gw_v1_coin_coin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminGetCoinsResponse.ProtoReflect.Descriptor instead.
func (*AdminGetCoinsResponse) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_gw_v1_coin_coin_proto_rawDescGZIP(), []int{6}
}

func (x *AdminGetCoinsResponse) GetInfos() []*Coin {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *AdminGetCoinsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type AdminDeleteCoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID    uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID string `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty"`
}

func (x *AdminDeleteCoinRequest) Reset() {
	*x = AdminDeleteCoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_gw_v1_coin_coin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminDeleteCoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminDeleteCoinRequest) ProtoMessage() {}

func (x *AdminDeleteCoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_gw_v1_coin_coin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminDeleteCoinRequest.ProtoReflect.Descriptor instead.
func (*AdminDeleteCoinRequest) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_gw_v1_coin_coin_proto_rawDescGZIP(), []int{7}
}

func (x *AdminDeleteCoinRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *AdminDeleteCoinRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

type AdminDeleteCoinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Coin `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *AdminDeleteCoinResponse) Reset() {
	*x = AdminDeleteCoinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_gw_v1_coin_coin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminDeleteCoinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminDeleteCoinResponse) ProtoMessage() {}

func (x *AdminDeleteCoinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_gw_v1_coin_coin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminDeleteCoinResponse.ProtoReflect.Descriptor instead.
func (*AdminDeleteCoinResponse) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_gw_v1_coin_coin_proto_rawDescGZIP(), []int{8}
}

func (x *AdminDeleteCoinResponse) GetInfo() *Coin {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_miningpool_gw_v1_coin_coin_proto protoreflect.FileDescriptor

var file_npool_miningpool_gw_v1_coin_coin_proto_rawDesc = []byte{
	0x0a, 0x26, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f,
	0x6f, 0x6c, 0x2f, 0x67, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2f, 0x63, 0x6f,
	0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x21, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f,
	0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xb8, 0x04, 0x0a, 0x04, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x52,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6d, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18,
	0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12,
	0x2a, 0x0a, 0x10, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x41,
	0x62, 0x6c, 0x65, 0x18, 0x46, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x41, 0x62, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x4c,
	0x65, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x4c, 0x65, 0x61, 0x73, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a,
	0x16, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x42,
	0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x4f, 0x0a,
	0x0e, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x6e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e,
	0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x78, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x09,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xa6, 0x03, 0x0a, 0x16,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x32,
	0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x52,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x65,
	0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x65,
	0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x41, 0x62, 0x6c, 0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x41, 0x62,
	0x6c, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x4c, 0x65, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x4c, 0x65, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x50,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x06,
	0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06,
	0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x52, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x22, 0x4f, 0x0a, 0x17, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x34, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0xde, 0x03, 0x0a, 0x16, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x4b, 0x0a, 0x0b, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x48, 0x00, 0x52, 0x0b, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x46, 0x65, 0x65, 0x52, 0x61, 0x74, 0x69,
	0x6f, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x10, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x41, 0x62, 0x6c, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02,
	0x52, 0x10, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x41, 0x62,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a, 0x13, 0x4c, 0x65, 0x61, 0x73, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3c, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x13, 0x4c, 0x65, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x16,
	0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x16,
	0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x52, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x06, 0x52, 0x65, 0x6d,
	0x61, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x52, 0x65, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x46, 0x65, 0x65, 0x52, 0x61,
	0x74, 0x69, 0x6f, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x41, 0x62, 0x6c, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x4c, 0x65, 0x61,
	0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x19, 0x0a, 0x17, 0x5f, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x4f, 0x0a, 0x17, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x34, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69,
	0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x44, 0x0a, 0x14, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x65, 0x0a,
	0x15, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x22, 0x3e, 0x0a, 0x16, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45,
	0x6e, 0x74, 0x49, 0x44, 0x22, 0x4f, 0x0a, 0x17, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x34, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0xa5, 0x05, 0x0a, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x12, 0xa6, 0x01, 0x0a, 0x0f, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x32, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6d, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x63,
	0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0xa6, 0x01, 0x0a, 0x0f, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x32,
	0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a,
	0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x2f, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x63,
	0x6f, 0x69, 0x6e, 0x12, 0x9e, 0x01, 0x0a, 0x0d, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x30, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x63, 0x6f, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x69,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x22, 0x3a, 0x01, 0x2a, 0x22, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2f, 0x67, 0x65, 0x74, 0x2f, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x63,
	0x6f, 0x69, 0x6e, 0x73, 0x12, 0xa6, 0x01, 0x0a, 0x0f, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x32, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x63, 0x6f,
	0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6d,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2f, 0x6d,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x63, 0x6f, 0x69, 0x6e, 0x42, 0x3e, 0x5a,
	0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f,
	0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f,
	0x6f, 0x6c, 0x2f, 0x67, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_miningpool_gw_v1_coin_coin_proto_rawDescOnce sync.Once
	file_npool_miningpool_gw_v1_coin_coin_proto_rawDescData = file_npool_miningpool_gw_v1_coin_coin_proto_rawDesc
)

func file_npool_miningpool_gw_v1_coin_coin_proto_rawDescGZIP() []byte {
	file_npool_miningpool_gw_v1_coin_coin_proto_rawDescOnce.Do(func() {
		file_npool_miningpool_gw_v1_coin_coin_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_miningpool_gw_v1_coin_coin_proto_rawDescData)
	})
	return file_npool_miningpool_gw_v1_coin_coin_proto_rawDescData
}

var file_npool_miningpool_gw_v1_coin_coin_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_npool_miningpool_gw_v1_coin_coin_proto_goTypes = []interface{}{
	(*Coin)(nil),                    // 0: miningpool.gateway.coin.v1.Coin
	(*AdminCreateCoinRequest)(nil),  // 1: miningpool.gateway.coin.v1.AdminCreateCoinRequest
	(*AdminCreateCoinResponse)(nil), // 2: miningpool.gateway.coin.v1.AdminCreateCoinResponse
	(*AdminUpdateCoinRequest)(nil),  // 3: miningpool.gateway.coin.v1.AdminUpdateCoinRequest
	(*AdminUpdateCoinResponse)(nil), // 4: miningpool.gateway.coin.v1.AdminUpdateCoinResponse
	(*AdminGetCoinsRequest)(nil),    // 5: miningpool.gateway.coin.v1.AdminGetCoinsRequest
	(*AdminGetCoinsResponse)(nil),   // 6: miningpool.gateway.coin.v1.AdminGetCoinsResponse
	(*AdminDeleteCoinRequest)(nil),  // 7: miningpool.gateway.coin.v1.AdminDeleteCoinRequest
	(*AdminDeleteCoinResponse)(nil), // 8: miningpool.gateway.coin.v1.AdminDeleteCoinResponse
	(v1.CoinType)(0),                // 9: basetypes.v1.CoinType
	(v11.RevenueType)(0),            // 10: basetypes.miningpool.v1.RevenueType
	(v11.MiningpoolType)(0),         // 11: basetypes.miningpool.v1.MiningpoolType
}
var file_npool_miningpool_gw_v1_coin_coin_proto_depIdxs = []int32{
	9,  // 0: miningpool.gateway.coin.v1.Coin.CoinType:type_name -> basetypes.v1.CoinType
	10, // 1: miningpool.gateway.coin.v1.Coin.RevenueType:type_name -> basetypes.miningpool.v1.RevenueType
	11, // 2: miningpool.gateway.coin.v1.Coin.MiningpoolType:type_name -> basetypes.miningpool.v1.MiningpoolType
	9,  // 3: miningpool.gateway.coin.v1.AdminCreateCoinRequest.CoinType:type_name -> basetypes.v1.CoinType
	10, // 4: miningpool.gateway.coin.v1.AdminCreateCoinRequest.RevenueType:type_name -> basetypes.miningpool.v1.RevenueType
	0,  // 5: miningpool.gateway.coin.v1.AdminCreateCoinResponse.Info:type_name -> miningpool.gateway.coin.v1.Coin
	10, // 6: miningpool.gateway.coin.v1.AdminUpdateCoinRequest.RevenueType:type_name -> basetypes.miningpool.v1.RevenueType
	0,  // 7: miningpool.gateway.coin.v1.AdminUpdateCoinResponse.Info:type_name -> miningpool.gateway.coin.v1.Coin
	0,  // 8: miningpool.gateway.coin.v1.AdminGetCoinsResponse.Infos:type_name -> miningpool.gateway.coin.v1.Coin
	0,  // 9: miningpool.gateway.coin.v1.AdminDeleteCoinResponse.Info:type_name -> miningpool.gateway.coin.v1.Coin
	1,  // 10: miningpool.gateway.coin.v1.Gateway.AdminCreateCoin:input_type -> miningpool.gateway.coin.v1.AdminCreateCoinRequest
	3,  // 11: miningpool.gateway.coin.v1.Gateway.AdminUpdateCoin:input_type -> miningpool.gateway.coin.v1.AdminUpdateCoinRequest
	5,  // 12: miningpool.gateway.coin.v1.Gateway.AdminGetCoins:input_type -> miningpool.gateway.coin.v1.AdminGetCoinsRequest
	7,  // 13: miningpool.gateway.coin.v1.Gateway.AdminDeleteCoin:input_type -> miningpool.gateway.coin.v1.AdminDeleteCoinRequest
	2,  // 14: miningpool.gateway.coin.v1.Gateway.AdminCreateCoin:output_type -> miningpool.gateway.coin.v1.AdminCreateCoinResponse
	4,  // 15: miningpool.gateway.coin.v1.Gateway.AdminUpdateCoin:output_type -> miningpool.gateway.coin.v1.AdminUpdateCoinResponse
	6,  // 16: miningpool.gateway.coin.v1.Gateway.AdminGetCoins:output_type -> miningpool.gateway.coin.v1.AdminGetCoinsResponse
	8,  // 17: miningpool.gateway.coin.v1.Gateway.AdminDeleteCoin:output_type -> miningpool.gateway.coin.v1.AdminDeleteCoinResponse
	14, // [14:18] is the sub-list for method output_type
	10, // [10:14] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_npool_miningpool_gw_v1_coin_coin_proto_init() }
func file_npool_miningpool_gw_v1_coin_coin_proto_init() {
	if File_npool_miningpool_gw_v1_coin_coin_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_miningpool_gw_v1_coin_coin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Coin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_gw_v1_coin_coin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminCreateCoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_gw_v1_coin_coin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminCreateCoinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_gw_v1_coin_coin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminUpdateCoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_gw_v1_coin_coin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminUpdateCoinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_gw_v1_coin_coin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminGetCoinsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_gw_v1_coin_coin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminGetCoinsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_gw_v1_coin_coin_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminDeleteCoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_gw_v1_coin_coin_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminDeleteCoinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_miningpool_gw_v1_coin_coin_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_npool_miningpool_gw_v1_coin_coin_proto_msgTypes[3].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_miningpool_gw_v1_coin_coin_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_miningpool_gw_v1_coin_coin_proto_goTypes,
		DependencyIndexes: file_npool_miningpool_gw_v1_coin_coin_proto_depIdxs,
		MessageInfos:      file_npool_miningpool_gw_v1_coin_coin_proto_msgTypes,
	}.Build()
	File_npool_miningpool_gw_v1_coin_coin_proto = out.File
	file_npool_miningpool_gw_v1_coin_coin_proto_rawDesc = nil
	file_npool_miningpool_gw_v1_coin_coin_proto_goTypes = nil
	file_npool_miningpool_gw_v1_coin_coin_proto_depIdxs = nil
}
