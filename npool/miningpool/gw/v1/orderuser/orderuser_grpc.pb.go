// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/miningpool/gw/v1/orderuser/orderuser.proto

package orderuser

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gateway_GetOrderUser_FullMethodName                = "/miningpool.gateway.orderuser.v1.Gateway/GetOrderUser"
	Gateway_AdminUpdateOrderUser_FullMethodName        = "/miningpool.gateway.orderuser.v1.Gateway/AdminUpdateOrderUser"
	Gateway_AdminGetOrderUserProportion_FullMethodName = "/miningpool.gateway.orderuser.v1.Gateway/AdminGetOrderUserProportion"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	GetOrderUser(ctx context.Context, in *GetOrderUserRequest, opts ...grpc.CallOption) (*GetOrderUserResponse, error)
	AdminUpdateOrderUser(ctx context.Context, in *AdminUpdateOrderUserRequest, opts ...grpc.CallOption) (*AdminUpdateOrderUserResponse, error)
	AdminGetOrderUserProportion(ctx context.Context, in *AdminGetOrderUserProportionRequest, opts ...grpc.CallOption) (*AdminGetOrderUserProportionResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) GetOrderUser(ctx context.Context, in *GetOrderUserRequest, opts ...grpc.CallOption) (*GetOrderUserResponse, error) {
	out := new(GetOrderUserResponse)
	err := c.cc.Invoke(ctx, Gateway_GetOrderUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminUpdateOrderUser(ctx context.Context, in *AdminUpdateOrderUserRequest, opts ...grpc.CallOption) (*AdminUpdateOrderUserResponse, error) {
	out := new(AdminUpdateOrderUserResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminUpdateOrderUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) AdminGetOrderUserProportion(ctx context.Context, in *AdminGetOrderUserProportionRequest, opts ...grpc.CallOption) (*AdminGetOrderUserProportionResponse, error) {
	out := new(AdminGetOrderUserProportionResponse)
	err := c.cc.Invoke(ctx, Gateway_AdminGetOrderUserProportion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	GetOrderUser(context.Context, *GetOrderUserRequest) (*GetOrderUserResponse, error)
	AdminUpdateOrderUser(context.Context, *AdminUpdateOrderUserRequest) (*AdminUpdateOrderUserResponse, error)
	AdminGetOrderUserProportion(context.Context, *AdminGetOrderUserProportionRequest) (*AdminGetOrderUserProportionResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) GetOrderUser(context.Context, *GetOrderUserRequest) (*GetOrderUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderUser not implemented")
}
func (UnimplementedGatewayServer) AdminUpdateOrderUser(context.Context, *AdminUpdateOrderUserRequest) (*AdminUpdateOrderUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateOrderUser not implemented")
}
func (UnimplementedGatewayServer) AdminGetOrderUserProportion(context.Context, *AdminGetOrderUserProportionRequest) (*AdminGetOrderUserProportionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGetOrderUserProportion not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_GetOrderUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetOrderUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetOrderUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetOrderUser(ctx, req.(*GetOrderUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminUpdateOrderUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUpdateOrderUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminUpdateOrderUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminUpdateOrderUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminUpdateOrderUser(ctx, req.(*AdminUpdateOrderUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_AdminGetOrderUserProportion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminGetOrderUserProportionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).AdminGetOrderUserProportion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_AdminGetOrderUserProportion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).AdminGetOrderUserProportion(ctx, req.(*AdminGetOrderUserProportionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "miningpool.gateway.orderuser.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrderUser",
			Handler:    _Gateway_GetOrderUser_Handler,
		},
		{
			MethodName: "AdminUpdateOrderUser",
			Handler:    _Gateway_AdminUpdateOrderUser_Handler,
		},
		{
			MethodName: "AdminGetOrderUserProportion",
			Handler:    _Gateway_AdminGetOrderUserProportion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/miningpool/gw/v1/orderuser/orderuser.proto",
}
