// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.18.1
// source: npool/miningpool/gw/v1/gooduser/gooduser.proto

package gooduser

import (
	v1 "github.com/NpoolPlatform/message/npool/basetypes/miningpool/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GoodUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             uint32            `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
	EntID          string            `protobuf:"bytes,20,opt,name=EntID,proto3" json:"EntID,omitempty"`
	Name           string            `protobuf:"bytes,30,opt,name=Name,proto3" json:"Name,omitempty"`
	RootUserID     string            `protobuf:"bytes,40,opt,name=RootUserID,proto3" json:"RootUserID,omitempty"`
	MiningpoolType v1.MiningpoolType `protobuf:"varint,50,opt,name=MiningpoolType,proto3,enum=basetypes.miningpool.v1.MiningpoolType" json:"MiningpoolType,omitempty"`
	CoinType       v1.CoinType       `protobuf:"varint,60,opt,name=CoinType,proto3,enum=basetypes.miningpool.v1.CoinType" json:"CoinType,omitempty"`
	HashRate       float32           `protobuf:"fixed32,70,opt,name=HashRate,proto3" json:"HashRate,omitempty"`
	ReadPageLink   string            `protobuf:"bytes,80,opt,name=ReadPageLink,proto3" json:"ReadPageLink,omitempty"`
	RevenueType    v1.RevenueType    `protobuf:"varint,90,opt,name=RevenueType,proto3,enum=basetypes.miningpool.v1.RevenueType" json:"RevenueType,omitempty"`
	CreatedAt      uint32            `protobuf:"varint,100,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt      uint32            `protobuf:"varint,110,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (x *GoodUser) Reset() {
	*x = GoodUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_gw_v1_gooduser_gooduser_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodUser) ProtoMessage() {}

func (x *GoodUser) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_gw_v1_gooduser_gooduser_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodUser.ProtoReflect.Descriptor instead.
func (*GoodUser) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_gw_v1_gooduser_gooduser_proto_rawDescGZIP(), []int{0}
}

func (x *GoodUser) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *GoodUser) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

func (x *GoodUser) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GoodUser) GetRootUserID() string {
	if x != nil {
		return x.RootUserID
	}
	return ""
}

func (x *GoodUser) GetMiningpoolType() v1.MiningpoolType {
	if x != nil {
		return x.MiningpoolType
	}
	return v1.MiningpoolType(0)
}

func (x *GoodUser) GetCoinType() v1.CoinType {
	if x != nil {
		return x.CoinType
	}
	return v1.CoinType(0)
}

func (x *GoodUser) GetHashRate() float32 {
	if x != nil {
		return x.HashRate
	}
	return 0
}

func (x *GoodUser) GetReadPageLink() string {
	if x != nil {
		return x.ReadPageLink
	}
	return ""
}

func (x *GoodUser) GetRevenueType() v1.RevenueType {
	if x != nil {
		return x.RevenueType
	}
	return v1.RevenueType(0)
}

func (x *GoodUser) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *GoodUser) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

type CreateGoodUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootUserID  string         `protobuf:"bytes,10,opt,name=RootUserID,proto3" json:"RootUserID,omitempty"`
	CoinType    v1.CoinType    `protobuf:"varint,20,opt,name=CoinType,proto3,enum=basetypes.miningpool.v1.CoinType" json:"CoinType,omitempty"`
	HashRate    float32        `protobuf:"fixed32,30,opt,name=HashRate,proto3" json:"HashRate,omitempty"`
	RevenueType v1.RevenueType `protobuf:"varint,40,opt,name=RevenueType,proto3,enum=basetypes.miningpool.v1.RevenueType" json:"RevenueType,omitempty"`
}

func (x *CreateGoodUserRequest) Reset() {
	*x = CreateGoodUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_gw_v1_gooduser_gooduser_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGoodUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGoodUserRequest) ProtoMessage() {}

func (x *CreateGoodUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_gw_v1_gooduser_gooduser_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGoodUserRequest.ProtoReflect.Descriptor instead.
func (*CreateGoodUserRequest) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_gw_v1_gooduser_gooduser_proto_rawDescGZIP(), []int{1}
}

func (x *CreateGoodUserRequest) GetRootUserID() string {
	if x != nil {
		return x.RootUserID
	}
	return ""
}

func (x *CreateGoodUserRequest) GetCoinType() v1.CoinType {
	if x != nil {
		return x.CoinType
	}
	return v1.CoinType(0)
}

func (x *CreateGoodUserRequest) GetHashRate() float32 {
	if x != nil {
		return x.HashRate
	}
	return 0
}

func (x *CreateGoodUserRequest) GetRevenueType() v1.RevenueType {
	if x != nil {
		return x.RevenueType
	}
	return v1.RevenueType(0)
}

type CreateGoodUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *GoodUser `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateGoodUserResponse) Reset() {
	*x = CreateGoodUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_gw_v1_gooduser_gooduser_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGoodUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGoodUserResponse) ProtoMessage() {}

func (x *CreateGoodUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_gw_v1_gooduser_gooduser_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGoodUserResponse.ProtoReflect.Descriptor instead.
func (*CreateGoodUserResponse) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_gw_v1_gooduser_gooduser_proto_rawDescGZIP(), []int{2}
}

func (x *CreateGoodUserResponse) GetInfo() *GoodUser {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetGoodUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntID string `protobuf:"bytes,10,opt,name=EntID,proto3" json:"EntID,omitempty"`
}

func (x *GetGoodUserRequest) Reset() {
	*x = GetGoodUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_gw_v1_gooduser_gooduser_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodUserRequest) ProtoMessage() {}

func (x *GetGoodUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_gw_v1_gooduser_gooduser_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodUserRequest.ProtoReflect.Descriptor instead.
func (*GetGoodUserRequest) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_gw_v1_gooduser_gooduser_proto_rawDescGZIP(), []int{3}
}

func (x *GetGoodUserRequest) GetEntID() string {
	if x != nil {
		return x.EntID
	}
	return ""
}

type GetGoodUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *GoodUser `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetGoodUserResponse) Reset() {
	*x = GetGoodUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_gw_v1_gooduser_gooduser_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodUserResponse) ProtoMessage() {}

func (x *GetGoodUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_gw_v1_gooduser_gooduser_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodUserResponse.ProtoReflect.Descriptor instead.
func (*GetGoodUserResponse) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_gw_v1_gooduser_gooduser_proto_rawDescGZIP(), []int{4}
}

func (x *GetGoodUserResponse) GetInfo() *GoodUser {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetGoodUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int32 `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32 `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetGoodUsersRequest) Reset() {
	*x = GetGoodUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_gw_v1_gooduser_gooduser_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodUsersRequest) ProtoMessage() {}

func (x *GetGoodUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_gw_v1_gooduser_gooduser_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodUsersRequest.ProtoReflect.Descriptor instead.
func (*GetGoodUsersRequest) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_gw_v1_gooduser_gooduser_proto_rawDescGZIP(), []int{5}
}

func (x *GetGoodUsersRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetGoodUsersRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetGoodUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*GoodUser `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32      `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetGoodUsersResponse) Reset() {
	*x = GetGoodUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_gw_v1_gooduser_gooduser_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodUsersResponse) ProtoMessage() {}

func (x *GetGoodUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_gw_v1_gooduser_gooduser_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodUsersResponse.ProtoReflect.Descriptor instead.
func (*GetGoodUsersResponse) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_gw_v1_gooduser_gooduser_proto_rawDescGZIP(), []int{6}
}

func (x *GetGoodUsersResponse) GetInfos() []*GoodUser {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetGoodUsersResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type UpdateGoodUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          uint32          `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
	RootUserID  *string         `protobuf:"bytes,20,opt,name=RootUserID,proto3,oneof" json:"RootUserID,omitempty"`
	HashRate    *float32        `protobuf:"fixed32,30,opt,name=HashRate,proto3,oneof" json:"HashRate,omitempty"`
	RevenueType *v1.RevenueType `protobuf:"varint,40,opt,name=RevenueType,proto3,enum=basetypes.miningpool.v1.RevenueType,oneof" json:"RevenueType,omitempty"`
}

func (x *UpdateGoodUserRequest) Reset() {
	*x = UpdateGoodUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_gw_v1_gooduser_gooduser_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGoodUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGoodUserRequest) ProtoMessage() {}

func (x *UpdateGoodUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_gw_v1_gooduser_gooduser_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGoodUserRequest.ProtoReflect.Descriptor instead.
func (*UpdateGoodUserRequest) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_gw_v1_gooduser_gooduser_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateGoodUserRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *UpdateGoodUserRequest) GetRootUserID() string {
	if x != nil && x.RootUserID != nil {
		return *x.RootUserID
	}
	return ""
}

func (x *UpdateGoodUserRequest) GetHashRate() float32 {
	if x != nil && x.HashRate != nil {
		return *x.HashRate
	}
	return 0
}

func (x *UpdateGoodUserRequest) GetRevenueType() v1.RevenueType {
	if x != nil && x.RevenueType != nil {
		return *x.RevenueType
	}
	return v1.RevenueType(0)
}

type UpdateGoodUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *GoodUser `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateGoodUserResponse) Reset() {
	*x = UpdateGoodUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_gw_v1_gooduser_gooduser_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGoodUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGoodUserResponse) ProtoMessage() {}

func (x *UpdateGoodUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_gw_v1_gooduser_gooduser_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGoodUserResponse.ProtoReflect.Descriptor instead.
func (*UpdateGoodUserResponse) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_gw_v1_gooduser_gooduser_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateGoodUserResponse) GetInfo() *GoodUser {
	if x != nil {
		return x.Info
	}
	return nil
}

type DeleteGoodUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID uint32 `protobuf:"varint,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *DeleteGoodUserRequest) Reset() {
	*x = DeleteGoodUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_gw_v1_gooduser_gooduser_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGoodUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGoodUserRequest) ProtoMessage() {}

func (x *DeleteGoodUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_gw_v1_gooduser_gooduser_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGoodUserRequest.ProtoReflect.Descriptor instead.
func (*DeleteGoodUserRequest) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_gw_v1_gooduser_gooduser_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteGoodUserRequest) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

type DeleteGoodUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *GoodUser `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteGoodUserResponse) Reset() {
	*x = DeleteGoodUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_miningpool_gw_v1_gooduser_gooduser_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGoodUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGoodUserResponse) ProtoMessage() {}

func (x *DeleteGoodUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_miningpool_gw_v1_gooduser_gooduser_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGoodUserResponse.ProtoReflect.Descriptor instead.
func (*DeleteGoodUserResponse) Descriptor() ([]byte, []int) {
	return file_npool_miningpool_gw_v1_gooduser_gooduser_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteGoodUserResponse) GetInfo() *GoodUser {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_miningpool_gw_v1_gooduser_gooduser_proto protoreflect.FileDescriptor

var file_npool_miningpool_gw_v1_gooduser_gooduser_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f,
	0x6f, 0x6c, 0x2f, 0x67, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x75, 0x73, 0x65,
	0x72, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29,
	0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f,
	0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e,
	0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb8, 0x03, 0x0a, 0x08, 0x47, 0x6f,
	0x6f, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x6f, 0x6f, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x52, 0x6f, 0x6f, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x4f, 0x0a, 0x0e, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0e, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x3d, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x3c, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x48, 0x61, 0x73, 0x68, 0x52, 0x61, 0x74, 0x65, 0x18, 0x46, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x48, 0x61, 0x73, 0x68, 0x52, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x52, 0x65, 0x61, 0x64, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x50, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x52, 0x65, 0x61, 0x64, 0x50, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x6b,
	0x12, 0x46, 0x0a, 0x0b, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x5a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x52, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x22, 0xda, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47,
	0x6f, 0x6f, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x52, 0x6f, 0x6f, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x52, 0x6f, 0x6f, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x3d,
	0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6d, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x48, 0x61, 0x73, 0x68, 0x52, 0x61, 0x74, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x48, 0x61, 0x73, 0x68, 0x52, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x52, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x56, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2a, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x47, 0x6f, 0x6f, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x45, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x53, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x67, 0x6f, 0x6f, 0x64, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x43, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x47, 0x6f, 0x6f, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22,
	0x6c, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x6f, 0x6f, 0x64,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xe6, 0x01,
	0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x0a, 0x52, 0x6f, 0x6f, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x52,
	0x6f, 0x6f, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08,
	0x48, 0x61, 0x73, 0x68, 0x52, 0x61, 0x74, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01,
	0x52, 0x08, 0x48, 0x61, 0x73, 0x68, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a,
	0x0b, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x24, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6d,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x02, 0x52, 0x0b, 0x52, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x52,
	0x6f, 0x6f, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x48, 0x61,
	0x73, 0x68, 0x52, 0x61, 0x74, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x52, 0x65, 0x76, 0x65, 0x6e,
	0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x56, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x47, 0x6f, 0x6f, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3c, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x27,
	0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x22, 0x56, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x47, 0x6f, 0x6f, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3c, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x32,
	0x9f, 0x06, 0x0a, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x9f, 0x01, 0x0a, 0x0e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x35,
	0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x75, 0x73, 0x65, 0x72, 0x12, 0x93, 0x01,
	0x0a, 0x0b, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x32, 0x2e,
	0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01,
	0x2a, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x75,
	0x73, 0x65, 0x72, 0x12, 0x97, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x12, 0x33, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f,
	0x6c, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6d, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6f,
	0x6f, 0x64, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x3a, 0x01, 0x2a, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f,
	0x67, 0x65, 0x74, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x9f, 0x01,
	0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x35, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x6f, 0x6f,
	0x64, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47,
	0x6f, 0x6f, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x75, 0x73, 0x65, 0x72, 0x12,
	0x9f, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x35, 0x2e, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67, 0x6f, 0x6f, 0x64, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6d, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x67,
	0x6f, 0x6f, 0x64, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x47, 0x6f, 0x6f, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13, 0x2f, 0x76,
	0x31, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x75, 0x73, 0x65,
	0x72, 0x42, 0x42, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6d, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x67, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x6f, 0x6f,
	0x64, 0x75, 0x73, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_miningpool_gw_v1_gooduser_gooduser_proto_rawDescOnce sync.Once
	file_npool_miningpool_gw_v1_gooduser_gooduser_proto_rawDescData = file_npool_miningpool_gw_v1_gooduser_gooduser_proto_rawDesc
)

func file_npool_miningpool_gw_v1_gooduser_gooduser_proto_rawDescGZIP() []byte {
	file_npool_miningpool_gw_v1_gooduser_gooduser_proto_rawDescOnce.Do(func() {
		file_npool_miningpool_gw_v1_gooduser_gooduser_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_miningpool_gw_v1_gooduser_gooduser_proto_rawDescData)
	})
	return file_npool_miningpool_gw_v1_gooduser_gooduser_proto_rawDescData
}

var file_npool_miningpool_gw_v1_gooduser_gooduser_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_npool_miningpool_gw_v1_gooduser_gooduser_proto_goTypes = []interface{}{
	(*GoodUser)(nil),               // 0: miningpool.gateway.gooduser.v1.GoodUser
	(*CreateGoodUserRequest)(nil),  // 1: miningpool.gateway.gooduser.v1.CreateGoodUserRequest
	(*CreateGoodUserResponse)(nil), // 2: miningpool.gateway.gooduser.v1.CreateGoodUserResponse
	(*GetGoodUserRequest)(nil),     // 3: miningpool.gateway.gooduser.v1.GetGoodUserRequest
	(*GetGoodUserResponse)(nil),    // 4: miningpool.gateway.gooduser.v1.GetGoodUserResponse
	(*GetGoodUsersRequest)(nil),    // 5: miningpool.gateway.gooduser.v1.GetGoodUsersRequest
	(*GetGoodUsersResponse)(nil),   // 6: miningpool.gateway.gooduser.v1.GetGoodUsersResponse
	(*UpdateGoodUserRequest)(nil),  // 7: miningpool.gateway.gooduser.v1.UpdateGoodUserRequest
	(*UpdateGoodUserResponse)(nil), // 8: miningpool.gateway.gooduser.v1.UpdateGoodUserResponse
	(*DeleteGoodUserRequest)(nil),  // 9: miningpool.gateway.gooduser.v1.DeleteGoodUserRequest
	(*DeleteGoodUserResponse)(nil), // 10: miningpool.gateway.gooduser.v1.DeleteGoodUserResponse
	(v1.MiningpoolType)(0),         // 11: basetypes.miningpool.v1.MiningpoolType
	(v1.CoinType)(0),               // 12: basetypes.miningpool.v1.CoinType
	(v1.RevenueType)(0),            // 13: basetypes.miningpool.v1.RevenueType
}
var file_npool_miningpool_gw_v1_gooduser_gooduser_proto_depIdxs = []int32{
	11, // 0: miningpool.gateway.gooduser.v1.GoodUser.MiningpoolType:type_name -> basetypes.miningpool.v1.MiningpoolType
	12, // 1: miningpool.gateway.gooduser.v1.GoodUser.CoinType:type_name -> basetypes.miningpool.v1.CoinType
	13, // 2: miningpool.gateway.gooduser.v1.GoodUser.RevenueType:type_name -> basetypes.miningpool.v1.RevenueType
	12, // 3: miningpool.gateway.gooduser.v1.CreateGoodUserRequest.CoinType:type_name -> basetypes.miningpool.v1.CoinType
	13, // 4: miningpool.gateway.gooduser.v1.CreateGoodUserRequest.RevenueType:type_name -> basetypes.miningpool.v1.RevenueType
	0,  // 5: miningpool.gateway.gooduser.v1.CreateGoodUserResponse.Info:type_name -> miningpool.gateway.gooduser.v1.GoodUser
	0,  // 6: miningpool.gateway.gooduser.v1.GetGoodUserResponse.Info:type_name -> miningpool.gateway.gooduser.v1.GoodUser
	0,  // 7: miningpool.gateway.gooduser.v1.GetGoodUsersResponse.Infos:type_name -> miningpool.gateway.gooduser.v1.GoodUser
	13, // 8: miningpool.gateway.gooduser.v1.UpdateGoodUserRequest.RevenueType:type_name -> basetypes.miningpool.v1.RevenueType
	0,  // 9: miningpool.gateway.gooduser.v1.UpdateGoodUserResponse.Info:type_name -> miningpool.gateway.gooduser.v1.GoodUser
	0,  // 10: miningpool.gateway.gooduser.v1.DeleteGoodUserResponse.Info:type_name -> miningpool.gateway.gooduser.v1.GoodUser
	1,  // 11: miningpool.gateway.gooduser.v1.Gateway.CreateGoodUser:input_type -> miningpool.gateway.gooduser.v1.CreateGoodUserRequest
	3,  // 12: miningpool.gateway.gooduser.v1.Gateway.GetGoodUser:input_type -> miningpool.gateway.gooduser.v1.GetGoodUserRequest
	5,  // 13: miningpool.gateway.gooduser.v1.Gateway.GetGoodUsers:input_type -> miningpool.gateway.gooduser.v1.GetGoodUsersRequest
	7,  // 14: miningpool.gateway.gooduser.v1.Gateway.UpdateGoodUser:input_type -> miningpool.gateway.gooduser.v1.UpdateGoodUserRequest
	9,  // 15: miningpool.gateway.gooduser.v1.Gateway.DeleteGoodUser:input_type -> miningpool.gateway.gooduser.v1.DeleteGoodUserRequest
	2,  // 16: miningpool.gateway.gooduser.v1.Gateway.CreateGoodUser:output_type -> miningpool.gateway.gooduser.v1.CreateGoodUserResponse
	4,  // 17: miningpool.gateway.gooduser.v1.Gateway.GetGoodUser:output_type -> miningpool.gateway.gooduser.v1.GetGoodUserResponse
	6,  // 18: miningpool.gateway.gooduser.v1.Gateway.GetGoodUsers:output_type -> miningpool.gateway.gooduser.v1.GetGoodUsersResponse
	8,  // 19: miningpool.gateway.gooduser.v1.Gateway.UpdateGoodUser:output_type -> miningpool.gateway.gooduser.v1.UpdateGoodUserResponse
	10, // 20: miningpool.gateway.gooduser.v1.Gateway.DeleteGoodUser:output_type -> miningpool.gateway.gooduser.v1.DeleteGoodUserResponse
	16, // [16:21] is the sub-list for method output_type
	11, // [11:16] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_npool_miningpool_gw_v1_gooduser_gooduser_proto_init() }
func file_npool_miningpool_gw_v1_gooduser_gooduser_proto_init() {
	if File_npool_miningpool_gw_v1_gooduser_gooduser_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_miningpool_gw_v1_gooduser_gooduser_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_gw_v1_gooduser_gooduser_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGoodUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_gw_v1_gooduser_gooduser_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGoodUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_gw_v1_gooduser_gooduser_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_gw_v1_gooduser_gooduser_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_gw_v1_gooduser_gooduser_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_gw_v1_gooduser_gooduser_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_gw_v1_gooduser_gooduser_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGoodUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_gw_v1_gooduser_gooduser_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGoodUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_gw_v1_gooduser_gooduser_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGoodUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_miningpool_gw_v1_gooduser_gooduser_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGoodUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_miningpool_gw_v1_gooduser_gooduser_proto_msgTypes[7].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_miningpool_gw_v1_gooduser_gooduser_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_miningpool_gw_v1_gooduser_gooduser_proto_goTypes,
		DependencyIndexes: file_npool_miningpool_gw_v1_gooduser_gooduser_proto_depIdxs,
		MessageInfos:      file_npool_miningpool_gw_v1_gooduser_gooduser_proto_msgTypes,
	}.Build()
	File_npool_miningpool_gw_v1_gooduser_gooduser_proto = out.File
	file_npool_miningpool_gw_v1_gooduser_gooduser_proto_rawDesc = nil
	file_npool_miningpool_gw_v1_gooduser_gooduser_proto_goTypes = nil
	file_npool_miningpool_gw_v1_gooduser_gooduser_proto_depIdxs = nil
}
