// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sphinxplugin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PluginClient is the client API for Plugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PluginClient interface {
	MpoolGetNonce(ctx context.Context, in *MpoolGetNonceRequest, opts ...grpc.CallOption) (*MpoolGetNonceResponse, error)
	MpoolPush(ctx context.Context, in *MpoolPushRequest, opts ...grpc.CallOption) (*MpoolPushResponse, error)
	WalletBalance(ctx context.Context, in *WalletBalanceRequest, opts ...grpc.CallOption) (*WalletBalanceResponse, error)
}

type pluginClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginClient(cc grpc.ClientConnInterface) PluginClient {
	return &pluginClient{cc}
}

func (c *pluginClient) MpoolGetNonce(ctx context.Context, in *MpoolGetNonceRequest, opts ...grpc.CallOption) (*MpoolGetNonceResponse, error) {
	out := new(MpoolGetNonceResponse)
	err := c.cc.Invoke(ctx, "/sphinx.plugin.v1.Plugin/MpoolGetNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) MpoolPush(ctx context.Context, in *MpoolPushRequest, opts ...grpc.CallOption) (*MpoolPushResponse, error) {
	out := new(MpoolPushResponse)
	err := c.cc.Invoke(ctx, "/sphinx.plugin.v1.Plugin/MpoolPush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pluginClient) WalletBalance(ctx context.Context, in *WalletBalanceRequest, opts ...grpc.CallOption) (*WalletBalanceResponse, error) {
	out := new(WalletBalanceResponse)
	err := c.cc.Invoke(ctx, "/sphinx.plugin.v1.Plugin/WalletBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PluginServer is the server API for Plugin service.
// All implementations must embed UnimplementedPluginServer
// for forward compatibility
type PluginServer interface {
	MpoolGetNonce(context.Context, *MpoolGetNonceRequest) (*MpoolGetNonceResponse, error)
	MpoolPush(context.Context, *MpoolPushRequest) (*MpoolPushResponse, error)
	WalletBalance(context.Context, *WalletBalanceRequest) (*WalletBalanceResponse, error)
	mustEmbedUnimplementedPluginServer()
}

// UnimplementedPluginServer must be embedded to have forward compatible implementations.
type UnimplementedPluginServer struct {
}

func (UnimplementedPluginServer) MpoolGetNonce(context.Context, *MpoolGetNonceRequest) (*MpoolGetNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MpoolGetNonce not implemented")
}
func (UnimplementedPluginServer) MpoolPush(context.Context, *MpoolPushRequest) (*MpoolPushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MpoolPush not implemented")
}
func (UnimplementedPluginServer) WalletBalance(context.Context, *WalletBalanceRequest) (*WalletBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WalletBalance not implemented")
}
func (UnimplementedPluginServer) mustEmbedUnimplementedPluginServer() {}

// UnsafePluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginServer will
// result in compilation errors.
type UnsafePluginServer interface {
	mustEmbedUnimplementedPluginServer()
}

func RegisterPluginServer(s grpc.ServiceRegistrar, srv PluginServer) {
	s.RegisterService(&Plugin_ServiceDesc, srv)
}

func _Plugin_MpoolGetNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MpoolGetNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).MpoolGetNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sphinx.plugin.v1.Plugin/MpoolGetNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).MpoolGetNonce(ctx, req.(*MpoolGetNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_MpoolPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MpoolPushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).MpoolPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sphinx.plugin.v1.Plugin/MpoolPush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).MpoolPush(ctx, req.(*MpoolPushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Plugin_WalletBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PluginServer).WalletBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sphinx.plugin.v1.Plugin/WalletBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PluginServer).WalletBalance(ctx, req.(*WalletBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Plugin_ServiceDesc is the grpc.ServiceDesc for Plugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Plugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sphinx.plugin.v1.Plugin",
	HandlerType: (*PluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MpoolGetNonce",
			Handler:    _Plugin_MpoolGetNonce_Handler,
		},
		{
			MethodName: "MpoolPush",
			Handler:    _Plugin_MpoolPush_Handler,
		},
		{
			MethodName: "WalletBalance",
			Handler:    _Plugin_WalletBalance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/sphinxplugin/sphinxplugin.proto",
}
