// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/account/gw/v1/transfer/transfer.proto

package transfer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Gateway_CreateTransfer_FullMethodName   = "/account.gateway.transfer.v1.Gateway/CreateTransfer"
	Gateway_DeleteTransfer_FullMethodName   = "/account.gateway.transfer.v1.Gateway/DeleteTransfer"
	Gateway_GetTransfers_FullMethodName     = "/account.gateway.transfer.v1.Gateway/GetTransfers"
	Gateway_GetAppTransfers_FullMethodName  = "/account.gateway.transfer.v1.Gateway/GetAppTransfers"
	Gateway_GetNAppTransfers_FullMethodName = "/account.gateway.transfer.v1.Gateway/GetNAppTransfers"
)

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	CreateTransfer(ctx context.Context, in *CreateTransferRequest, opts ...grpc.CallOption) (*CreateTransferResponse, error)
	DeleteTransfer(ctx context.Context, in *DeleteTransferRequest, opts ...grpc.CallOption) (*DeleteTransferResponse, error)
	GetTransfers(ctx context.Context, in *GetTransfersRequest, opts ...grpc.CallOption) (*GetTransfersResponse, error)
	GetAppTransfers(ctx context.Context, in *GetAppTransfersRequest, opts ...grpc.CallOption) (*GetAppTransfersResponse, error)
	GetNAppTransfers(ctx context.Context, in *GetNAppTransfersRequest, opts ...grpc.CallOption) (*GetNAppTransfersResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) CreateTransfer(ctx context.Context, in *CreateTransferRequest, opts ...grpc.CallOption) (*CreateTransferResponse, error) {
	out := new(CreateTransferResponse)
	err := c.cc.Invoke(ctx, Gateway_CreateTransfer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) DeleteTransfer(ctx context.Context, in *DeleteTransferRequest, opts ...grpc.CallOption) (*DeleteTransferResponse, error) {
	out := new(DeleteTransferResponse)
	err := c.cc.Invoke(ctx, Gateway_DeleteTransfer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetTransfers(ctx context.Context, in *GetTransfersRequest, opts ...grpc.CallOption) (*GetTransfersResponse, error) {
	out := new(GetTransfersResponse)
	err := c.cc.Invoke(ctx, Gateway_GetTransfers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetAppTransfers(ctx context.Context, in *GetAppTransfersRequest, opts ...grpc.CallOption) (*GetAppTransfersResponse, error) {
	out := new(GetAppTransfersResponse)
	err := c.cc.Invoke(ctx, Gateway_GetAppTransfers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetNAppTransfers(ctx context.Context, in *GetNAppTransfersRequest, opts ...grpc.CallOption) (*GetNAppTransfersResponse, error) {
	out := new(GetNAppTransfersResponse)
	err := c.cc.Invoke(ctx, Gateway_GetNAppTransfers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	CreateTransfer(context.Context, *CreateTransferRequest) (*CreateTransferResponse, error)
	DeleteTransfer(context.Context, *DeleteTransferRequest) (*DeleteTransferResponse, error)
	GetTransfers(context.Context, *GetTransfersRequest) (*GetTransfersResponse, error)
	GetAppTransfers(context.Context, *GetAppTransfersRequest) (*GetAppTransfersResponse, error)
	GetNAppTransfers(context.Context, *GetNAppTransfersRequest) (*GetNAppTransfersResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) CreateTransfer(context.Context, *CreateTransferRequest) (*CreateTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransfer not implemented")
}
func (UnimplementedGatewayServer) DeleteTransfer(context.Context, *DeleteTransferRequest) (*DeleteTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTransfer not implemented")
}
func (UnimplementedGatewayServer) GetTransfers(context.Context, *GetTransfersRequest) (*GetTransfersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransfers not implemented")
}
func (UnimplementedGatewayServer) GetAppTransfers(context.Context, *GetAppTransfersRequest) (*GetAppTransfersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppTransfers not implemented")
}
func (UnimplementedGatewayServer) GetNAppTransfers(context.Context, *GetNAppTransfersRequest) (*GetNAppTransfersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNAppTransfers not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_CreateTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_CreateTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateTransfer(ctx, req.(*CreateTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_DeleteTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).DeleteTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_DeleteTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).DeleteTransfer(ctx, req.(*DeleteTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetTransfers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransfersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetTransfers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetTransfers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetTransfers(ctx, req.(*GetTransfersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetAppTransfers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppTransfersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetAppTransfers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetAppTransfers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetAppTransfers(ctx, req.(*GetAppTransfersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetNAppTransfers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNAppTransfersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetNAppTransfers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Gateway_GetNAppTransfers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetNAppTransfers(ctx, req.(*GetNAppTransfersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.gateway.transfer.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTransfer",
			Handler:    _Gateway_CreateTransfer_Handler,
		},
		{
			MethodName: "DeleteTransfer",
			Handler:    _Gateway_DeleteTransfer_Handler,
		},
		{
			MethodName: "GetTransfers",
			Handler:    _Gateway_GetTransfers_Handler,
		},
		{
			MethodName: "GetAppTransfers",
			Handler:    _Gateway_GetAppTransfers_Handler,
		},
		{
			MethodName: "GetNAppTransfers",
			Handler:    _Gateway_GetNAppTransfers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/account/gw/v1/transfer/transfer.proto",
}
