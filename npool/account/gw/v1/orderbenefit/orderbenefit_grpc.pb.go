// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/account/gw/v1/orderbenefit/orderbenefit.proto

package orderbenefit

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Middleware_GetOrderBenefit_FullMethodName  = "/account.gateway.orderbenefit.v1.Middleware/GetOrderBenefit"
	Middleware_GetOrderBenefits_FullMethodName = "/account.gateway.orderbenefit.v1.Middleware/GetOrderBenefits"
)

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
	GetOrderBenefit(ctx context.Context, in *GetOrderBenefitRequest, opts ...grpc.CallOption) (*GetOrderBenefitResponse, error)
	GetOrderBenefits(ctx context.Context, in *GetOrderBenefitsRequest, opts ...grpc.CallOption) (*GetOrderBenefitsResponse, error)
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) GetOrderBenefit(ctx context.Context, in *GetOrderBenefitRequest, opts ...grpc.CallOption) (*GetOrderBenefitResponse, error) {
	out := new(GetOrderBenefitResponse)
	err := c.cc.Invoke(ctx, Middleware_GetOrderBenefit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetOrderBenefits(ctx context.Context, in *GetOrderBenefitsRequest, opts ...grpc.CallOption) (*GetOrderBenefitsResponse, error) {
	out := new(GetOrderBenefitsResponse)
	err := c.cc.Invoke(ctx, Middleware_GetOrderBenefits_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
	GetOrderBenefit(context.Context, *GetOrderBenefitRequest) (*GetOrderBenefitResponse, error)
	GetOrderBenefits(context.Context, *GetOrderBenefitsRequest) (*GetOrderBenefitsResponse, error)
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) GetOrderBenefit(context.Context, *GetOrderBenefitRequest) (*GetOrderBenefitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderBenefit not implemented")
}
func (UnimplementedMiddlewareServer) GetOrderBenefits(context.Context, *GetOrderBenefitsRequest) (*GetOrderBenefitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderBenefits not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_GetOrderBenefit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderBenefitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetOrderBenefit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetOrderBenefit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetOrderBenefit(ctx, req.(*GetOrderBenefitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetOrderBenefits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrderBenefitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetOrderBenefits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetOrderBenefits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetOrderBenefits(ctx, req.(*GetOrderBenefitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.gateway.orderbenefit.v1.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrderBenefit",
			Handler:    _Middleware_GetOrderBenefit_Handler,
		},
		{
			MethodName: "GetOrderBenefits",
			Handler:    _Middleware_GetOrderBenefits_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/account/gw/v1/orderbenefit/orderbenefit.proto",
}
