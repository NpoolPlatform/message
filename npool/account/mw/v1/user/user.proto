syntax = "proto3";

package account.middleware.user.v1;

option go_package = "github.com/NpoolPlatform/message/npool/account/mw/v1/user";

import "npool/account/mgr/v1/account/account.proto";
import "google/protobuf/empty.proto";
import "npool/npool.proto";

// Service Name
service Middleware {
    rpc CreateAccount     (CreateAccountRequest)     returns (CreateAccountResponse)     {}
    rpc UpdateAccount     (UpdateAccountRequest)     returns (UpdateAccountResponse)     {}

    rpc GetAccount        (GetAccountRequest)        returns (GetAccountResponse)        {}
    rpc GetAccounts       (GetAccountsRequest)       returns (GetAccountsResponse)       {}
}

message AccountReq {
    optional string ID         = 10;
    optional string AppID      = 20;
    optional string UserID     = 30;
    optional string CoinTypeID = 40;
    optional string AccountID  = 50;
    optional string Address    = 60;
    // Only [UserWithdraw, UserDeposit, UserDirectBenefit]
    optional account.manager.account1.v1.AccountUsedFor UsedFor = 70;
    repeated string Labels     = 80;   // For withdraw and benefit address
    optional bool   Active     = 90;
    optional bool   Blocked    = 100;
    optional bool   Locked     = 110;
}

message Account {
    string ID         = 10;
    string AppID      = 20;
    string UserID     = 30;
    string CoinTypeID = 40;
    string AccountID  = 50;
    string Address    = 60;
    bool   Active     = 70;
    bool   Blocked    = 80;
    account.manager.account1.v1.AccountUsedFor UsedFor = 90;
    repeated string Labels = 100;
    uint32 CreatedAt  = 110;
}

message Conds {
    optional npool.v1.StringVal ID         = 10;
    optional npool.v1.StringVal AppID      = 20;
    optional npool.v1.StringVal UserID     = 30;
    optional npool.v1.StringVal CoinTypeID = 40;
    optional npool.v1.StringVal AccountID  = 50;
    optional npool.v1.StringVal Address    = 60;
    optional npool.v1.BoolVal   Active     = 70;
    optional npool.v1.BoolVal   Blocked    = 80;
    optional npool.v1.Int32Val  UsedFor    = 90;
}


message CreateAccountRequest {
    AccountReq Info = 10;
}

message CreateAccountResponse {
    Account Info = 10;
}

message UpdateAccountRequest {
    AccountReq Info = 10;
}

message UpdateAccountResponse {
    Account Info = 10;
}

message GetAccountRequest {
    string ID = 10;
}

message GetAccountResponse {
    Account Info = 10;
}

message GetAccountsRequest {
    Conds Conds = 10;
    int32 Offset = 20;
    int32 Limit = 30;
}

message GetAccountsResponse {
    repeated Account Infos = 10;
    uint32           Total = 20;
}
