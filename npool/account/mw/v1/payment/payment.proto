syntax = "proto3";

package account.middleware.payment.v1;

option go_package = "github.com/NpoolPlatform/message/npool/account/mw/v1/payment";

import "npool/basetypes/v1/accountlockedby.proto";
import "npool/basetypes/v1/conds.proto";

// Service Name
service Middleware {
    rpc CreateAccount     (CreateAccountRequest)     returns (CreateAccountResponse)     {}
    rpc CreateAccounts    (CreateAccountsRequest)    returns (CreateAccountsResponse)    {}
    rpc UpdateAccount     (UpdateAccountRequest)     returns (UpdateAccountResponse)     {}

    rpc GetAccount        (GetAccountRequest)        returns (GetAccountResponse)        {}
    rpc GetAccountOnly    (GetAccountOnlyRequest)    returns (GetAccountOnlyResponse)    {}
    rpc GetAccounts       (GetAccountsRequest)       returns (GetAccountsResponse)       {}
}

message AccountReq {
    optional string     ID             = 10;
    optional string     CoinTypeID     = 20;
    optional string     AccountID      = 30;
    optional string     Address        = 40;
    optional bool       Active         = 50;
    optional bool       Locked         = 60;
    optional basetypes.v1.AccountLockedBy LockedBy = 70;
    optional bool       Blocked        = 80;
    optional string     CollectingTID  = 90;  // Used to free the address when transaction done
    optional uint32     AvailableAt    = 100;
}

message Account {
    // @inject_tag: sql:"id"
    string     ID            = 10;
    // @inject_tag: sql:"coin_type_id"
    string     CoinTypeID    = 20;
    // @inject_tag: sql:"account_id"
    string     AccountID     = 30;
    // @inject_tag: sql:"address"
    string     Address       = 40;
    // @inject_tag: sql:"active"
    bool       Active        = 50;
    // @inject_tag: sql:"locked"
    bool       Locked        = 60;
    basetypes.v1.AccountLockedBy LockedBy = 70;
    // @inject_tag: sql:"locked_by"
    string     LockedByStr   = 71;
    // @inject_tag: sql:"blocked"
    bool       Blocked       = 80;
    // @inject_tag: sql:"collecting_tid"
    string     CollectingTID = 90;
    // @inject_tag: sql:"created_at"
    uint32     CreatedAt     = 100;
    // @inject_tag: sql:"available_at"
    uint32     AvailableAt   = 110;
    // @inject_tag: sql:"updated_at"
    uint32     UpdatedAt     = 120;
}

message Conds {
    optional basetypes.v1.StringVal ID          = 10;
    optional basetypes.v1.StringVal CoinTypeID  = 20;
    optional basetypes.v1.StringVal AccountID   = 30;
    optional basetypes.v1.StringVal Address     = 40;
    optional basetypes.v1.BoolVal   Active      = 50;
    optional basetypes.v1.BoolVal   Locked      = 60;
    optional basetypes.v1.Uint32Val LockedBy    = 70;
    optional basetypes.v1.BoolVal   Blocked     = 80;
    optional basetypes.v1.StringSliceVal AccountIDs = 90;
    optional basetypes.v1.Uint32Val AvailableAt = 100;
}

message CreateAccountRequest {
    AccountReq Info = 10;
}

message CreateAccountResponse {
    Account Info = 10;
}

message CreateAccountsRequest {
    repeated AccountReq Infos = 10;
}

message CreateAccountsResponse {
    repeated Account Infos = 10;
}

message UpdateAccountRequest {
    AccountReq Info = 10;
}

message UpdateAccountResponse {
    Account Info = 10;
}

message GetAccountRequest {
    string ID = 10;
}

message GetAccountResponse {
    Account Info = 10;
}

message GetAccountsRequest {
    Conds Conds = 10;
    int32 Offset = 20;
    int32 Limit = 30;
}

message GetAccountsResponse {
    repeated Account Infos = 10;
    uint32           Total = 20;
}

message GetAccountOnlyRequest {
    Conds Conds = 10;
}

message GetAccountOnlyResponse {
    Account Info = 10;
}

