syntax = "proto3";

package account.middleware.goodbenefit.v1;

option go_package = "github.com/NpoolPlatform/message/npool/account/mw/v1/goodbenefit";

import "npool/account/mgr/v1/account/account.proto";
import "google/protobuf/empty.proto";
import "npool/npool.proto";

// Service Name
service Middleware {
    rpc CreateAccount     (CreateAccountRequest)     returns (CreateAccountResponse)     {}
    rpc CreateAccounts    (CreateAccountsRequest)    returns (CreateAccountsResponse)    {}
    rpc UpdateAccount     (UpdateAccountRequest)     returns (UpdateAccountResponse)     {}

    rpc GetAccount        (GetAccountRequest)        returns (GetAccountResponse)        {}
    rpc GetAccountOnly    (GetAccountOnlyRequest)    returns (GetAccountOnlyResponse)    {}
    rpc GetAccounts       (GetAccountsRequest)       returns (GetAccountsResponse)       {}
}

message AccountReq {
    optional string ID            = 10;
    optional string GoodID        = 20;
    optional string CoinTypeID    = 30; // CoinTypeID of the good
    optional string AccountID     = 40;
    optional string Address       = 50;
    optional bool   Backup        = 60;
    optional bool   Active        = 70;
    optional bool   Locked        = 80; // Locked when transferring
    optional account.manager.account1.v1.LockedBy LockedBy = 90;
    optional bool   Blocked       = 100;
    optional string TransactionID = 110;
}

message Account {
    string ID            = 10;
    string GoodID        = 20;
    string CoinTypeID    = 30;
    string AccountID     = 40;
    bool   Backup        = 50;
    string Address       = 60;
    bool   Active        = 70;
    bool   Locked        = 80;
    account.manager.account1.v1.LockedBy       LockedBy = 90;
    bool   Blocked       = 100;
    account.manager.account1.v1.AccountUsedFor UsedFor  = 110;
    string TransactionID = 120;
    uint32 CreatedAt     = 130;
    uint32 UpdatedAt     = 140;
}

message Conds {
    optional npool.v1.StringVal ID          = 10;
    optional npool.v1.StringVal GoodID      = 20;
    optional npool.v1.StringVal CoinTypeID  = 30;
    optional npool.v1.StringVal AccountID   = 40;
    optional npool.v1.BoolVal   Backup      = 50;
    optional npool.v1.StringVal Address     = 60;
    optional npool.v1.BoolVal   Active      = 70;
    optional npool.v1.BoolVal   Locked      = 80;
    optional npool.v1.Int32Val  LockedBy    = 90;
    optional npool.v1.BoolVal   Blocked     = 100;
}

message CreateAccountRequest {
    AccountReq Info = 10;
}

message CreateAccountResponse {
    Account Info = 10;
}

message CreateAccountsRequest {
    repeated AccountReq Infos = 10;
}

message CreateAccountsResponse {
    repeated Account Infos = 10;
}

message UpdateAccountRequest {
    AccountReq Info = 10;
}

message UpdateAccountResponse {
    Account Info = 10;
}

message GetAccountRequest {
    string ID = 10;
}

message GetAccountResponse {
    Account Info = 10;
}

message GetAccountsRequest {
    Conds Conds = 10;
    int32 Offset = 20;
    int32 Limit = 30;
}

message GetAccountsResponse {
    repeated Account Infos = 10;
    uint32           Total = 20;
}

message GetAccountOnlyRequest {
    Conds Conds = 10;
}

message GetAccountOnlyResponse {
    Account Info = 10;
}

