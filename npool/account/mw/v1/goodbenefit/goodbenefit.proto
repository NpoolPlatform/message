syntax = "proto3";

package account.middleware.goodbenefit.v1;

option go_package = "github.com/NpoolPlatform/message/npool/account/mw/v1/goodbenefit";

import "npool/basetypes/v1/conds.proto";
import "npool/basetypes/v1/accountlockedby.proto";

// Service Name
service Middleware {
    rpc CreateAccount     (CreateAccountRequest)     returns (CreateAccountResponse)     {}
    rpc UpdateAccount     (UpdateAccountRequest)     returns (UpdateAccountResponse)     {}
    rpc GetAccount        (GetAccountRequest)        returns (GetAccountResponse)        {}
    rpc GetAccounts       (GetAccountsRequest)       returns (GetAccountsResponse)       {}
    rpc ExistAccount      (ExistAccountRequest)      returns (ExistAccountResponse)      {}
    rpc ExistAccountConds (ExistAccountCondsRequest) returns (ExistAccountCondsResponse) {}
    rpc DeleteAccount     (DeleteAccountRequest)     returns (DeleteAccountResponse)     {}
}

message AccountReq {
    optional string ID            = 10;
    optional string GoodID        = 20;
    optional string CoinTypeID    = 30; // CoinTypeID of the good
    optional string AccountID     = 40;
    optional string Address       = 50;
    optional bool   Backup        = 60;
    optional bool   Active        = 70;
    optional bool   Locked        = 80; // Locked when transferring
    optional basetypes.v1.AccountLockedBy LockedBy = 90;
    optional bool   Blocked       = 100;
    optional string TransactionID = 110;
}

message Account {
    // @inject_tag: sql:"id"
    string ID            = 10;
    // @inject_tag: sql:"good_id"
    string GoodID        = 20;
    // @inject_tag: sql:"coin_type_id"
    string CoinTypeID    = 30;
    // @inject_tag: sql:"account_id"
    string AccountID     = 40;
    // @inject_tag: sql:"backup"
    bool   Backup        = 50;
    // @inject_tag: sql:"address"
    string Address       = 60;
    // @inject_tag: sql:"active"
    bool   Active        = 70;
    // @inject_tag: sql:"locked"
    bool   Locked        = 80;
    // @inject_tag: sql:"locked_by"
    string LockedByStr   = 91;
    basetypes.v1.AccountLockedBy LockedBy = 90;
    // @inject_tag: sql:"blocked"
    bool   Blocked       = 100;
    // @inject_tag: sql:"transaction_id"
    string TransactionID = 120;
    // @inject_tag: sql:"created_at"
    uint32 CreatedAt     = 130;
    // @inject_tag: sql:"updated_at"
    uint32 UpdatedAt     = 140;
}

message Conds {
    optional basetypes.v1.StringVal ID          = 10;
    optional basetypes.v1.StringVal GoodID      = 20;
    optional basetypes.v1.StringVal CoinTypeID  = 30;
    optional basetypes.v1.StringVal AccountID   = 40;
    optional basetypes.v1.BoolVal   Backup      = 50;
    optional basetypes.v1.StringVal Address     = 60;
    optional basetypes.v1.BoolVal   Active      = 70;
    optional basetypes.v1.BoolVal   Locked      = 80;
    optional basetypes.v1.Uint32Val LockedBy    = 90;
    optional basetypes.v1.BoolVal   Blocked     = 100;
}

message CreateAccountRequest {
    AccountReq Info = 10;
}

message CreateAccountResponse {
    Account Info = 10;
}

message UpdateAccountRequest {
    AccountReq Info = 10;
}

message UpdateAccountResponse {
    Account Info = 10;
}

message GetAccountRequest {
    string ID = 10;
}

message GetAccountResponse {
    Account Info = 10;
}

message GetAccountsRequest {
    Conds Conds = 10;
    int32 Offset = 20;
    int32 Limit = 30;
}

message GetAccountsResponse {
    repeated Account Infos = 10;
    uint32           Total = 20;
}

message ExistAccountRequest {
    string ID = 10;
}

message ExistAccountResponse {
    bool Info = 10;
}

message ExistAccountCondsRequest {
    Conds Conds = 10;
}

message ExistAccountCondsResponse {
    bool Info = 10;
}

message DeleteAccountRequest {
    AccountReq Info = 10;
}

message DeleteAccountResponse {
    Account Info = 10;
}

