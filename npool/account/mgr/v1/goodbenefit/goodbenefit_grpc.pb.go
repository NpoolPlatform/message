// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/account/mgr/v1/goodbenefit/goodbenefit.proto

package goodbenefit

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateGoodBenefit(ctx context.Context, in *CreateGoodBenefitRequest, opts ...grpc.CallOption) (*CreateGoodBenefitResponse, error)
	CreateGoodBenefits(ctx context.Context, in *CreateGoodBenefitsRequest, opts ...grpc.CallOption) (*CreateGoodBenefitsResponse, error)
	AddGoodBenefit(ctx context.Context, in *AddGoodBenefitRequest, opts ...grpc.CallOption) (*AddGoodBenefitResponse, error)
	GetGoodBenefit(ctx context.Context, in *GetGoodBenefitRequest, opts ...grpc.CallOption) (*GetGoodBenefitResponse, error)
	GetGoodBenefitOnly(ctx context.Context, in *GetGoodBenefitOnlyRequest, opts ...grpc.CallOption) (*GetGoodBenefitOnlyResponse, error)
	GetGoodBenefits(ctx context.Context, in *GetGoodBenefitsRequest, opts ...grpc.CallOption) (*GetGoodBenefitsResponse, error)
	ExistGoodBenefit(ctx context.Context, in *ExistGoodBenefitRequest, opts ...grpc.CallOption) (*ExistGoodBenefitResponse, error)
	ExistGoodBenefitConds(ctx context.Context, in *ExistGoodBenefitCondsRequest, opts ...grpc.CallOption) (*ExistGoodBenefitCondsResponse, error)
	CountGoodBenefits(ctx context.Context, in *CountGoodBenefitsRequest, opts ...grpc.CallOption) (*CountGoodBenefitsResponse, error)
	DeleteGoodBenefit(ctx context.Context, in *DeleteGoodBenefitRequest, opts ...grpc.CallOption) (*DeleteGoodBenefitResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateGoodBenefit(ctx context.Context, in *CreateGoodBenefitRequest, opts ...grpc.CallOption) (*CreateGoodBenefitResponse, error) {
	out := new(CreateGoodBenefitResponse)
	err := c.cc.Invoke(ctx, "/account.manager.goodbenefit.v1.Manager/CreateGoodBenefit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateGoodBenefits(ctx context.Context, in *CreateGoodBenefitsRequest, opts ...grpc.CallOption) (*CreateGoodBenefitsResponse, error) {
	out := new(CreateGoodBenefitsResponse)
	err := c.cc.Invoke(ctx, "/account.manager.goodbenefit.v1.Manager/CreateGoodBenefits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) AddGoodBenefit(ctx context.Context, in *AddGoodBenefitRequest, opts ...grpc.CallOption) (*AddGoodBenefitResponse, error) {
	out := new(AddGoodBenefitResponse)
	err := c.cc.Invoke(ctx, "/account.manager.goodbenefit.v1.Manager/AddGoodBenefit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetGoodBenefit(ctx context.Context, in *GetGoodBenefitRequest, opts ...grpc.CallOption) (*GetGoodBenefitResponse, error) {
	out := new(GetGoodBenefitResponse)
	err := c.cc.Invoke(ctx, "/account.manager.goodbenefit.v1.Manager/GetGoodBenefit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetGoodBenefitOnly(ctx context.Context, in *GetGoodBenefitOnlyRequest, opts ...grpc.CallOption) (*GetGoodBenefitOnlyResponse, error) {
	out := new(GetGoodBenefitOnlyResponse)
	err := c.cc.Invoke(ctx, "/account.manager.goodbenefit.v1.Manager/GetGoodBenefitOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetGoodBenefits(ctx context.Context, in *GetGoodBenefitsRequest, opts ...grpc.CallOption) (*GetGoodBenefitsResponse, error) {
	out := new(GetGoodBenefitsResponse)
	err := c.cc.Invoke(ctx, "/account.manager.goodbenefit.v1.Manager/GetGoodBenefits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistGoodBenefit(ctx context.Context, in *ExistGoodBenefitRequest, opts ...grpc.CallOption) (*ExistGoodBenefitResponse, error) {
	out := new(ExistGoodBenefitResponse)
	err := c.cc.Invoke(ctx, "/account.manager.goodbenefit.v1.Manager/ExistGoodBenefit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistGoodBenefitConds(ctx context.Context, in *ExistGoodBenefitCondsRequest, opts ...grpc.CallOption) (*ExistGoodBenefitCondsResponse, error) {
	out := new(ExistGoodBenefitCondsResponse)
	err := c.cc.Invoke(ctx, "/account.manager.goodbenefit.v1.Manager/ExistGoodBenefitConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountGoodBenefits(ctx context.Context, in *CountGoodBenefitsRequest, opts ...grpc.CallOption) (*CountGoodBenefitsResponse, error) {
	out := new(CountGoodBenefitsResponse)
	err := c.cc.Invoke(ctx, "/account.manager.goodbenefit.v1.Manager/CountGoodBenefits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteGoodBenefit(ctx context.Context, in *DeleteGoodBenefitRequest, opts ...grpc.CallOption) (*DeleteGoodBenefitResponse, error) {
	out := new(DeleteGoodBenefitResponse)
	err := c.cc.Invoke(ctx, "/account.manager.goodbenefit.v1.Manager/DeleteGoodBenefit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateGoodBenefit(context.Context, *CreateGoodBenefitRequest) (*CreateGoodBenefitResponse, error)
	CreateGoodBenefits(context.Context, *CreateGoodBenefitsRequest) (*CreateGoodBenefitsResponse, error)
	AddGoodBenefit(context.Context, *AddGoodBenefitRequest) (*AddGoodBenefitResponse, error)
	GetGoodBenefit(context.Context, *GetGoodBenefitRequest) (*GetGoodBenefitResponse, error)
	GetGoodBenefitOnly(context.Context, *GetGoodBenefitOnlyRequest) (*GetGoodBenefitOnlyResponse, error)
	GetGoodBenefits(context.Context, *GetGoodBenefitsRequest) (*GetGoodBenefitsResponse, error)
	ExistGoodBenefit(context.Context, *ExistGoodBenefitRequest) (*ExistGoodBenefitResponse, error)
	ExistGoodBenefitConds(context.Context, *ExistGoodBenefitCondsRequest) (*ExistGoodBenefitCondsResponse, error)
	CountGoodBenefits(context.Context, *CountGoodBenefitsRequest) (*CountGoodBenefitsResponse, error)
	DeleteGoodBenefit(context.Context, *DeleteGoodBenefitRequest) (*DeleteGoodBenefitResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateGoodBenefit(context.Context, *CreateGoodBenefitRequest) (*CreateGoodBenefitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGoodBenefit not implemented")
}
func (UnimplementedManagerServer) CreateGoodBenefits(context.Context, *CreateGoodBenefitsRequest) (*CreateGoodBenefitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGoodBenefits not implemented")
}
func (UnimplementedManagerServer) AddGoodBenefit(context.Context, *AddGoodBenefitRequest) (*AddGoodBenefitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGoodBenefit not implemented")
}
func (UnimplementedManagerServer) GetGoodBenefit(context.Context, *GetGoodBenefitRequest) (*GetGoodBenefitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodBenefit not implemented")
}
func (UnimplementedManagerServer) GetGoodBenefitOnly(context.Context, *GetGoodBenefitOnlyRequest) (*GetGoodBenefitOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodBenefitOnly not implemented")
}
func (UnimplementedManagerServer) GetGoodBenefits(context.Context, *GetGoodBenefitsRequest) (*GetGoodBenefitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodBenefits not implemented")
}
func (UnimplementedManagerServer) ExistGoodBenefit(context.Context, *ExistGoodBenefitRequest) (*ExistGoodBenefitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistGoodBenefit not implemented")
}
func (UnimplementedManagerServer) ExistGoodBenefitConds(context.Context, *ExistGoodBenefitCondsRequest) (*ExistGoodBenefitCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistGoodBenefitConds not implemented")
}
func (UnimplementedManagerServer) CountGoodBenefits(context.Context, *CountGoodBenefitsRequest) (*CountGoodBenefitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountGoodBenefits not implemented")
}
func (UnimplementedManagerServer) DeleteGoodBenefit(context.Context, *DeleteGoodBenefitRequest) (*DeleteGoodBenefitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGoodBenefit not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateGoodBenefit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGoodBenefitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateGoodBenefit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.manager.goodbenefit.v1.Manager/CreateGoodBenefit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateGoodBenefit(ctx, req.(*CreateGoodBenefitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateGoodBenefits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGoodBenefitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateGoodBenefits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.manager.goodbenefit.v1.Manager/CreateGoodBenefits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateGoodBenefits(ctx, req.(*CreateGoodBenefitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_AddGoodBenefit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGoodBenefitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).AddGoodBenefit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.manager.goodbenefit.v1.Manager/AddGoodBenefit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).AddGoodBenefit(ctx, req.(*AddGoodBenefitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetGoodBenefit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoodBenefitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetGoodBenefit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.manager.goodbenefit.v1.Manager/GetGoodBenefit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetGoodBenefit(ctx, req.(*GetGoodBenefitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetGoodBenefitOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoodBenefitOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetGoodBenefitOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.manager.goodbenefit.v1.Manager/GetGoodBenefitOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetGoodBenefitOnly(ctx, req.(*GetGoodBenefitOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetGoodBenefits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoodBenefitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetGoodBenefits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.manager.goodbenefit.v1.Manager/GetGoodBenefits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetGoodBenefits(ctx, req.(*GetGoodBenefitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistGoodBenefit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistGoodBenefitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistGoodBenefit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.manager.goodbenefit.v1.Manager/ExistGoodBenefit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistGoodBenefit(ctx, req.(*ExistGoodBenefitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistGoodBenefitConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistGoodBenefitCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistGoodBenefitConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.manager.goodbenefit.v1.Manager/ExistGoodBenefitConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistGoodBenefitConds(ctx, req.(*ExistGoodBenefitCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountGoodBenefits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountGoodBenefitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountGoodBenefits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.manager.goodbenefit.v1.Manager/CountGoodBenefits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountGoodBenefits(ctx, req.(*CountGoodBenefitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteGoodBenefit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGoodBenefitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteGoodBenefit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.manager.goodbenefit.v1.Manager/DeleteGoodBenefit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteGoodBenefit(ctx, req.(*DeleteGoodBenefitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.manager.goodbenefit.v1.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGoodBenefit",
			Handler:    _Manager_CreateGoodBenefit_Handler,
		},
		{
			MethodName: "CreateGoodBenefits",
			Handler:    _Manager_CreateGoodBenefits_Handler,
		},
		{
			MethodName: "AddGoodBenefit",
			Handler:    _Manager_AddGoodBenefit_Handler,
		},
		{
			MethodName: "GetGoodBenefit",
			Handler:    _Manager_GetGoodBenefit_Handler,
		},
		{
			MethodName: "GetGoodBenefitOnly",
			Handler:    _Manager_GetGoodBenefitOnly_Handler,
		},
		{
			MethodName: "GetGoodBenefits",
			Handler:    _Manager_GetGoodBenefits_Handler,
		},
		{
			MethodName: "ExistGoodBenefit",
			Handler:    _Manager_ExistGoodBenefit_Handler,
		},
		{
			MethodName: "ExistGoodBenefitConds",
			Handler:    _Manager_ExistGoodBenefitConds_Handler,
		},
		{
			MethodName: "CountGoodBenefits",
			Handler:    _Manager_CountGoodBenefits_Handler,
		},
		{
			MethodName: "DeleteGoodBenefit",
			Handler:    _Manager_DeleteGoodBenefit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/account/mgr/v1/goodbenefit/goodbenefit.proto",
}
