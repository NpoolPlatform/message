syntax = "proto3";

package account.manager.account.v1;

option go_package = "github.com/NpoolPlatform/message/npool/account/mgr/v1/account";

import "google/protobuf/empty.proto";
import "npool/npool.proto";

// Service Name
service Manager {
    rpc CreateAccount     (CreateAccountRequest)     returns (CreateAccountResponse)     {}
    rpc CreateAccounts    (CreateAccountsRequest)    returns (CreateAccountsResponse)    {}
    rpc AddAccount        (AddAccountRequest)        returns (AddAccountResponse)        {}
    rpc GetAccount        (GetAccountRequest)        returns (GetAccountResponse)        {}
    rpc GetAccountOnly    (GetAccountOnlyRequest)    returns (GetAccountOnlyResponse)    {}
    rpc GetAccounts       (GetAccountsRequest)       returns (GetAccountsResponse)       {}
    rpc ExistAccount      (ExistAccountRequest)      returns (ExistAccountResponse)      {}
    rpc ExistAccountConds (ExistAccountCondsRequest) returns (ExistAccountCondsResponse) {}
    rpc CountAccounts     (CountAccountsRequest)     returns (CountAccountsResponse)     {}
    rpc DeleteAccount     (DeleteAccountRequest)     returns (DeleteAccountResponse)     {}
}

enum AccountUsedFor {
    DefaultAccountUsedFor = 0;
    GoodBenefit           = 10;  // Daily good benefit receiver              - Platform Hot
    UserBenefitHot        = 20;  // Limited amount money for withdrawal      - Platform Hot
    UserBenefitCold       = 30;  // Money of user benefit over limitation    - Platform Cold
    PlatformBenefitCold   = 40;  // Money over limitation                    - Platform Cold
    GasProvider           = 50;  // Deposit money for transaction gas        - Platform Hot
    UserWithdraw          = 60;  // User set withdraw address                - User Set
    UserDeposit           = 70;  // Platform created user deposit address    - Platform Create
    GoodPayment           = 80;  // Platform created for good payment        - Platform Created
    PaymentCollector      = 90;  // Money for payment over limitation        - Platform Cold
}

message AccountReq {
    optional string         ID         = 10;
    optional string         CoinTypeID = 20;
    optional string         Address    = 30;
    optional AccountUsedFor UsedFor    = 40;
    optional bool           PlatformHoldPrivateKey = 50;
}

message Account {
    string         ID         = 10;
    string         CoinTypeID = 20;
    string         Address    = 30;
    AccountUsedFor UsedFor    = 40;
    bool           PlatformHoldPrivateKey = 50;
    uint32         CreatedAt  = 60;
}

message Conds {
    optional npool.v1.StringVal ID         = 10;
    optional npool.v1.StringVal CoinTypeID = 20;
    optional npool.v1.StringVal Address    = 30;
    optional npool.v1.Int32Val  UsedFor    = 40;
    optional npool.v1.BoolVal   PlatformHoldPrivateKey = 50;
    optional npool.v1.Uint32Val CreatedAt  = 60;
}


message CreateAccountRequest {
    AccountReq Info = 10;
}

message CreateAccountResponse {
    Account Info = 10;
}

message CreateAccountsRequest {
    repeated AccountReq Infos = 10;
}

message CreateAccountsResponse {
    repeated Account Infos = 10;
}

message AddAccountRequest {
    AccountReq Info = 10;
}

message AddAccountResponse {
    Account Info = 10;
}

message GetAccountRequest {
    string ID = 10;
}

message GetAccountResponse {
    Account Info = 10;
}

message GetAccountsRequest {
    Conds Conds = 10;
    int32 Offset = 20;
    int32 Limit = 30;
}

message GetAccountsResponse {
    repeated Account Infos = 10;
    uint32           Total = 20;
}

message GetAccountOnlyRequest {
    Conds Conds = 10;
}

message GetAccountOnlyResponse {
    Account Info = 10;
}

message ExistAccountRequest {
    string ID = 10;
}

message ExistAccountResponse {
    bool Info = 10;
}

message ExistAccountCondsRequest {
    Conds Conds = 10;
}

message ExistAccountCondsResponse {
    bool Info = 10;
}

message CountAccountsRequest {
    Conds Conds = 10;
}

message CountAccountsResponse {
    uint32 Info = 10;
}

message DeleteAccountRequest {
    string ID = 10;
}

message DeleteAccountResponse {
    Account Info = 10;
}

