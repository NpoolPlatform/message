// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/build-chain/buildchain.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BuildChainClient is the client API for BuildChain service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BuildChainClient interface {
	Version(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*VersionResponse, error)
	GetDeployedCoins(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetDeployedCoinsResponse, error)
	Faucet(ctx context.Context, in *FaucetRequst, opts ...grpc.CallOption) (*FaucetResponse, error)
}

type buildChainClient struct {
	cc grpc.ClientConnInterface
}

func NewBuildChainClient(cc grpc.ClientConnInterface) BuildChainClient {
	return &buildChainClient{cc}
}

func (c *buildChainClient) Version(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, "/build.chain.v1.BuildChain/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildChainClient) GetDeployedCoins(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetDeployedCoinsResponse, error) {
	out := new(GetDeployedCoinsResponse)
	err := c.cc.Invoke(ctx, "/build.chain.v1.BuildChain/GetDeployedCoins", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *buildChainClient) Faucet(ctx context.Context, in *FaucetRequst, opts ...grpc.CallOption) (*FaucetResponse, error) {
	out := new(FaucetResponse)
	err := c.cc.Invoke(ctx, "/build.chain.v1.BuildChain/Faucet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BuildChainServer is the server API for BuildChain service.
// All implementations must embed UnimplementedBuildChainServer
// for forward compatibility
type BuildChainServer interface {
	Version(context.Context, *Empty) (*VersionResponse, error)
	GetDeployedCoins(context.Context, *Empty) (*GetDeployedCoinsResponse, error)
	Faucet(context.Context, *FaucetRequst) (*FaucetResponse, error)
	mustEmbedUnimplementedBuildChainServer()
}

// UnimplementedBuildChainServer must be embedded to have forward compatible implementations.
type UnimplementedBuildChainServer struct {
}

func (UnimplementedBuildChainServer) Version(context.Context, *Empty) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedBuildChainServer) GetDeployedCoins(context.Context, *Empty) (*GetDeployedCoinsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeployedCoins not implemented")
}
func (UnimplementedBuildChainServer) Faucet(context.Context, *FaucetRequst) (*FaucetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Faucet not implemented")
}
func (UnimplementedBuildChainServer) mustEmbedUnimplementedBuildChainServer() {}

// UnsafeBuildChainServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BuildChainServer will
// result in compilation errors.
type UnsafeBuildChainServer interface {
	mustEmbedUnimplementedBuildChainServer()
}

func RegisterBuildChainServer(s grpc.ServiceRegistrar, srv BuildChainServer) {
	s.RegisterService(&BuildChain_ServiceDesc, srv)
}

func _BuildChain_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildChainServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/build.chain.v1.BuildChain/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildChainServer).Version(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildChain_GetDeployedCoins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildChainServer).GetDeployedCoins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/build.chain.v1.BuildChain/GetDeployedCoins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildChainServer).GetDeployedCoins(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuildChain_Faucet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FaucetRequst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuildChainServer).Faucet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/build.chain.v1.BuildChain/Faucet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuildChainServer).Faucet(ctx, req.(*FaucetRequst))
	}
	return interceptor(ctx, in, info, handler)
}

// BuildChain_ServiceDesc is the grpc.ServiceDesc for BuildChain service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BuildChain_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "build.chain.v1.BuildChain",
	HandlerType: (*BuildChainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _BuildChain_Version_Handler,
		},
		{
			MethodName: "GetDeployedCoins",
			Handler:    _BuildChain_GetDeployedCoins_Handler,
		},
		{
			MethodName: "Faucet",
			Handler:    _BuildChain_Faucet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/build-chain/buildchain.proto",
}
