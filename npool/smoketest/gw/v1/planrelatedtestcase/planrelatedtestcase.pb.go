// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.20.1
// source: npool/smoketest/gw/v1/planrelatedtestcase/planrelatedtestcase.proto

package planrelatedtestcase

import (
	planrelatedtestcase "github.com/NpoolPlatform/message/npool/smoketest/mgr/v1/planrelatedtestcase"
	relatedtestcase "github.com/NpoolPlatform/message/npool/smoketest/mgr/v1/relatedtestcase"
	testcase "github.com/NpoolPlatform/message/npool/smoketest/mgr/v1/testcase"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PlanRelatedTestCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                      string                             `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	TestPlanID              string                             `protobuf:"bytes,20,opt,name=TestPlanID,proto3" json:"TestPlanID,omitempty"`
	TestPlanName            string                             `protobuf:"bytes,30,opt,name=TestPlanName,proto3" json:"TestPlanName,omitempty"`
	TestCaseID              string                             `protobuf:"bytes,40,opt,name=TestCaseID,proto3" json:"TestCaseID,omitempty"`
	TestCasePath            string                             `protobuf:"bytes,50,opt,name=TestCasePath,proto3" json:"TestCasePath,omitempty"`
	TestCaseType            testcase.TestCaseType              `protobuf:"varint,60,opt,name=TestCaseType,proto3,enum=smoketest.manager.testcase.v1.TestCaseType" json:"TestCaseType,omitempty"`
	RelatedTestCases        []*relatedtestcase.RelatedTestCase `protobuf:"bytes,70,rep,name=RelatedTestCases,proto3" json:"RelatedTestCases,omitempty"`
	TestCaseExpectionResult string                             `protobuf:"bytes,80,opt,name=TestCaseExpectionResult,proto3" json:"TestCaseExpectionResult,omitempty"`
	TestCaseOutput          string                             `protobuf:"bytes,90,opt,name=TestCaseOutput,proto3" json:"TestCaseOutput,omitempty"`
	Description             string                             `protobuf:"bytes,100,opt,name=Description,proto3" json:"Description,omitempty"`
	RunDuration             uint32                             `protobuf:"varint,110,opt,name=RunDuration,proto3" json:"RunDuration,omitempty"`
	TestUserID              string                             `protobuf:"bytes,120,opt,name=TestUserID,proto3" json:"TestUserID,omitempty"`
	TestUsername            string                             `protobuf:"bytes,130,opt,name=TestUsername,proto3" json:"TestUsername,omitempty"`
	TestCaseResult          planrelatedtestcase.TestCaseResult `protobuf:"varint,140,opt,name=TestCaseResult,proto3,enum=smoketest.manager.planrelatedtestcase.v1.TestCaseResult" json:"TestCaseResult,omitempty"`
	CreatedAt               uint32                             `protobuf:"varint,150,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
}

func (x *PlanRelatedTestCase) Reset() {
	*x = PlanRelatedTestCase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanRelatedTestCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanRelatedTestCase) ProtoMessage() {}

func (x *PlanRelatedTestCase) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanRelatedTestCase.ProtoReflect.Descriptor instead.
func (*PlanRelatedTestCase) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDescGZIP(), []int{0}
}

func (x *PlanRelatedTestCase) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *PlanRelatedTestCase) GetTestPlanID() string {
	if x != nil {
		return x.TestPlanID
	}
	return ""
}

func (x *PlanRelatedTestCase) GetTestPlanName() string {
	if x != nil {
		return x.TestPlanName
	}
	return ""
}

func (x *PlanRelatedTestCase) GetTestCaseID() string {
	if x != nil {
		return x.TestCaseID
	}
	return ""
}

func (x *PlanRelatedTestCase) GetTestCasePath() string {
	if x != nil {
		return x.TestCasePath
	}
	return ""
}

func (x *PlanRelatedTestCase) GetTestCaseType() testcase.TestCaseType {
	if x != nil {
		return x.TestCaseType
	}
	return testcase.TestCaseType(0)
}

func (x *PlanRelatedTestCase) GetRelatedTestCases() []*relatedtestcase.RelatedTestCase {
	if x != nil {
		return x.RelatedTestCases
	}
	return nil
}

func (x *PlanRelatedTestCase) GetTestCaseExpectionResult() string {
	if x != nil {
		return x.TestCaseExpectionResult
	}
	return ""
}

func (x *PlanRelatedTestCase) GetTestCaseOutput() string {
	if x != nil {
		return x.TestCaseOutput
	}
	return ""
}

func (x *PlanRelatedTestCase) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PlanRelatedTestCase) GetRunDuration() uint32 {
	if x != nil {
		return x.RunDuration
	}
	return 0
}

func (x *PlanRelatedTestCase) GetTestUserID() string {
	if x != nil {
		return x.TestUserID
	}
	return ""
}

func (x *PlanRelatedTestCase) GetTestUsername() string {
	if x != nil {
		return x.TestUsername
	}
	return ""
}

func (x *PlanRelatedTestCase) GetTestCaseResult() planrelatedtestcase.TestCaseResult {
	if x != nil {
		return x.TestCaseResult
	}
	return planrelatedtestcase.TestCaseResult(0)
}

func (x *PlanRelatedTestCase) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type CreatePlanRelatedTestCaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestPlanID     string                             `protobuf:"bytes,20,opt,name=TestPlanID,proto3" json:"TestPlanID,omitempty"`
	TestCaseID     string                             `protobuf:"bytes,40,opt,name=TestCaseID,proto3" json:"TestCaseID,omitempty"`
	TestCaseOutput string                             `protobuf:"bytes,70,opt,name=TestCaseOutput,proto3" json:"TestCaseOutput,omitempty"`
	Description    string                             `protobuf:"bytes,80,opt,name=Description,proto3" json:"Description,omitempty"`
	RunDuration    uint32                             `protobuf:"varint,90,opt,name=RunDuration,proto3" json:"RunDuration,omitempty"`
	TestUserID     string                             `protobuf:"bytes,100,opt,name=TestUserID,proto3" json:"TestUserID,omitempty"`
	TestCaseResult planrelatedtestcase.TestCaseResult `protobuf:"varint,120,opt,name=TestCaseResult,proto3,enum=smoketest.manager.planrelatedtestcase.v1.TestCaseResult" json:"TestCaseResult,omitempty"`
}

func (x *CreatePlanRelatedTestCaseRequest) Reset() {
	*x = CreatePlanRelatedTestCaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePlanRelatedTestCaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlanRelatedTestCaseRequest) ProtoMessage() {}

func (x *CreatePlanRelatedTestCaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlanRelatedTestCaseRequest.ProtoReflect.Descriptor instead.
func (*CreatePlanRelatedTestCaseRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDescGZIP(), []int{1}
}

func (x *CreatePlanRelatedTestCaseRequest) GetTestPlanID() string {
	if x != nil {
		return x.TestPlanID
	}
	return ""
}

func (x *CreatePlanRelatedTestCaseRequest) GetTestCaseID() string {
	if x != nil {
		return x.TestCaseID
	}
	return ""
}

func (x *CreatePlanRelatedTestCaseRequest) GetTestCaseOutput() string {
	if x != nil {
		return x.TestCaseOutput
	}
	return ""
}

func (x *CreatePlanRelatedTestCaseRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreatePlanRelatedTestCaseRequest) GetRunDuration() uint32 {
	if x != nil {
		return x.RunDuration
	}
	return 0
}

func (x *CreatePlanRelatedTestCaseRequest) GetTestUserID() string {
	if x != nil {
		return x.TestUserID
	}
	return ""
}

func (x *CreatePlanRelatedTestCaseRequest) GetTestCaseResult() planrelatedtestcase.TestCaseResult {
	if x != nil {
		return x.TestCaseResult
	}
	return planrelatedtestcase.TestCaseResult(0)
}

type CreatePlanRelatedTestCaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PlanRelatedTestCase `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreatePlanRelatedTestCaseResponse) Reset() {
	*x = CreatePlanRelatedTestCaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePlanRelatedTestCaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlanRelatedTestCaseResponse) ProtoMessage() {}

func (x *CreatePlanRelatedTestCaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlanRelatedTestCaseResponse.ProtoReflect.Descriptor instead.
func (*CreatePlanRelatedTestCaseResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDescGZIP(), []int{2}
}

func (x *CreatePlanRelatedTestCaseResponse) GetInfo() *PlanRelatedTestCase {
	if x != nil {
		return x.Info
	}
	return nil
}

type DeletePlanRelatedTestCaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *DeletePlanRelatedTestCaseRequest) Reset() {
	*x = DeletePlanRelatedTestCaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePlanRelatedTestCaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePlanRelatedTestCaseRequest) ProtoMessage() {}

func (x *DeletePlanRelatedTestCaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePlanRelatedTestCaseRequest.ProtoReflect.Descriptor instead.
func (*DeletePlanRelatedTestCaseRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDescGZIP(), []int{3}
}

func (x *DeletePlanRelatedTestCaseRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type DeletePlanRelatedTestCaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PlanRelatedTestCase `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeletePlanRelatedTestCaseResponse) Reset() {
	*x = DeletePlanRelatedTestCaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePlanRelatedTestCaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePlanRelatedTestCaseResponse) ProtoMessage() {}

func (x *DeletePlanRelatedTestCaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePlanRelatedTestCaseResponse.ProtoReflect.Descriptor instead.
func (*DeletePlanRelatedTestCaseResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDescGZIP(), []int{4}
}

func (x *DeletePlanRelatedTestCaseResponse) GetInfo() *PlanRelatedTestCase {
	if x != nil {
		return x.Info
	}
	return nil
}

type DeletePlanRelatedTestCasesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestPlanID string `protobuf:"bytes,20,opt,name=TestPlanID,proto3" json:"TestPlanID,omitempty"`
}

func (x *DeletePlanRelatedTestCasesRequest) Reset() {
	*x = DeletePlanRelatedTestCasesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePlanRelatedTestCasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePlanRelatedTestCasesRequest) ProtoMessage() {}

func (x *DeletePlanRelatedTestCasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePlanRelatedTestCasesRequest.ProtoReflect.Descriptor instead.
func (*DeletePlanRelatedTestCasesRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDescGZIP(), []int{5}
}

func (x *DeletePlanRelatedTestCasesRequest) GetTestPlanID() string {
	if x != nil {
		return x.TestPlanID
	}
	return ""
}

type DeletePlanRelatedTestCasesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info []*PlanRelatedTestCase `protobuf:"bytes,10,rep,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeletePlanRelatedTestCasesResponse) Reset() {
	*x = DeletePlanRelatedTestCasesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePlanRelatedTestCasesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePlanRelatedTestCasesResponse) ProtoMessage() {}

func (x *DeletePlanRelatedTestCasesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePlanRelatedTestCasesResponse.ProtoReflect.Descriptor instead.
func (*DeletePlanRelatedTestCasesResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDescGZIP(), []int{6}
}

func (x *DeletePlanRelatedTestCasesResponse) GetInfo() []*PlanRelatedTestCase {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto protoreflect.FileDescriptor

var file_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDesc = []byte{
	0x0a, 0x43, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73,
	0x74, 0x2f, 0x67, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2f, 0x70, 0x6c, 0x61, 0x6e,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x28, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x1a,
	0x44, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74,
	0x2f, 0x6d, 0x67, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2f, 0x70, 0x6c, 0x61, 0x6e,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x73, 0x6d, 0x6f,
	0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x6d, 0x67, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65,
	0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3c, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x73, 0x6d, 0x6f,
	0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x6d, 0x67, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2f, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xce, 0x05, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x73,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54,
	0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x65, 0x73,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a,
	0x0c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x4f, 0x0a, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x61, 0x0a, 0x10, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x18, 0x46, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73,
	0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x52, 0x10, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x26, 0x0a, 0x0e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x75, 0x6e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x52, 0x75, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x54,
	0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x78, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x54, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x0c, 0x54,
	0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x82, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x61, 0x0a, 0x0e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x73, 0x6d, 0x6f, 0x6b,
	0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x0e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x96, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0xd0, 0x02, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61,
	0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x65, 0x73,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x50,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x75, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x5a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x52, 0x75, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x64, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x60, 0x0a, 0x0e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x73, 0x6d,
	0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x76, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x32, 0x0a,
	0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x44, 0x22, 0x76, 0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x43, 0x0a, 0x21, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x22, 0x77,
	0x0a, 0x22, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0xb3, 0x05, 0x0a, 0x07, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x12, 0xdf, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x12, 0x4a, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x4b, 0x2e,
	0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73,
	0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x23, 0x22, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x70,
	0x6c, 0x61, 0x6e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61,
	0x73, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0xdf, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x12, 0x4a, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x4b, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74,
	0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x23, 0x22, 0x1e, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74,
	0x63, 0x61, 0x73, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0xe3, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x12, 0x4b, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x4c, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x22, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x42, 0x4c, 0x5a,
	0x4a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f,
	0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73,
	0x74, 0x2f, 0x67, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDescOnce sync.Once
	file_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDescData = file_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDesc
)

func file_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDescGZIP() []byte {
	file_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDescOnce.Do(func() {
		file_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDescData)
	})
	return file_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDescData
}

var file_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto_goTypes = []interface{}{
	(*PlanRelatedTestCase)(nil),                // 0: smoketest.gateway.planrelatedtestcase.v1.PlanRelatedTestCase
	(*CreatePlanRelatedTestCaseRequest)(nil),   // 1: smoketest.gateway.planrelatedtestcase.v1.CreatePlanRelatedTestCaseRequest
	(*CreatePlanRelatedTestCaseResponse)(nil),  // 2: smoketest.gateway.planrelatedtestcase.v1.CreatePlanRelatedTestCaseResponse
	(*DeletePlanRelatedTestCaseRequest)(nil),   // 3: smoketest.gateway.planrelatedtestcase.v1.DeletePlanRelatedTestCaseRequest
	(*DeletePlanRelatedTestCaseResponse)(nil),  // 4: smoketest.gateway.planrelatedtestcase.v1.DeletePlanRelatedTestCaseResponse
	(*DeletePlanRelatedTestCasesRequest)(nil),  // 5: smoketest.gateway.planrelatedtestcase.v1.DeletePlanRelatedTestCasesRequest
	(*DeletePlanRelatedTestCasesResponse)(nil), // 6: smoketest.gateway.planrelatedtestcase.v1.DeletePlanRelatedTestCasesResponse
	(testcase.TestCaseType)(0),                 // 7: smoketest.manager.testcase.v1.TestCaseType
	(*relatedtestcase.RelatedTestCase)(nil),    // 8: smoketest.manager.relatedtestcase.v1.RelatedTestCase
	(planrelatedtestcase.TestCaseResult)(0),    // 9: smoketest.manager.planrelatedtestcase.v1.TestCaseResult
}
var file_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto_depIdxs = []int32{
	7,  // 0: smoketest.gateway.planrelatedtestcase.v1.PlanRelatedTestCase.TestCaseType:type_name -> smoketest.manager.testcase.v1.TestCaseType
	8,  // 1: smoketest.gateway.planrelatedtestcase.v1.PlanRelatedTestCase.RelatedTestCases:type_name -> smoketest.manager.relatedtestcase.v1.RelatedTestCase
	9,  // 2: smoketest.gateway.planrelatedtestcase.v1.PlanRelatedTestCase.TestCaseResult:type_name -> smoketest.manager.planrelatedtestcase.v1.TestCaseResult
	9,  // 3: smoketest.gateway.planrelatedtestcase.v1.CreatePlanRelatedTestCaseRequest.TestCaseResult:type_name -> smoketest.manager.planrelatedtestcase.v1.TestCaseResult
	0,  // 4: smoketest.gateway.planrelatedtestcase.v1.CreatePlanRelatedTestCaseResponse.Info:type_name -> smoketest.gateway.planrelatedtestcase.v1.PlanRelatedTestCase
	0,  // 5: smoketest.gateway.planrelatedtestcase.v1.DeletePlanRelatedTestCaseResponse.Info:type_name -> smoketest.gateway.planrelatedtestcase.v1.PlanRelatedTestCase
	0,  // 6: smoketest.gateway.planrelatedtestcase.v1.DeletePlanRelatedTestCasesResponse.Info:type_name -> smoketest.gateway.planrelatedtestcase.v1.PlanRelatedTestCase
	1,  // 7: smoketest.gateway.planrelatedtestcase.v1.Gateway.CreatePlanRelatedTestCase:input_type -> smoketest.gateway.planrelatedtestcase.v1.CreatePlanRelatedTestCaseRequest
	3,  // 8: smoketest.gateway.planrelatedtestcase.v1.Gateway.DeletePlanRelatedTestCase:input_type -> smoketest.gateway.planrelatedtestcase.v1.DeletePlanRelatedTestCaseRequest
	5,  // 9: smoketest.gateway.planrelatedtestcase.v1.Gateway.DeletePlanRelatedTestCases:input_type -> smoketest.gateway.planrelatedtestcase.v1.DeletePlanRelatedTestCasesRequest
	2,  // 10: smoketest.gateway.planrelatedtestcase.v1.Gateway.CreatePlanRelatedTestCase:output_type -> smoketest.gateway.planrelatedtestcase.v1.CreatePlanRelatedTestCaseResponse
	4,  // 11: smoketest.gateway.planrelatedtestcase.v1.Gateway.DeletePlanRelatedTestCase:output_type -> smoketest.gateway.planrelatedtestcase.v1.DeletePlanRelatedTestCaseResponse
	6,  // 12: smoketest.gateway.planrelatedtestcase.v1.Gateway.DeletePlanRelatedTestCases:output_type -> smoketest.gateway.planrelatedtestcase.v1.DeletePlanRelatedTestCasesResponse
	10, // [10:13] is the sub-list for method output_type
	7,  // [7:10] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto_init() }
func file_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto_init() {
	if File_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanRelatedTestCase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePlanRelatedTestCaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePlanRelatedTestCaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePlanRelatedTestCaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePlanRelatedTestCaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePlanRelatedTestCasesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePlanRelatedTestCasesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto_goTypes,
		DependencyIndexes: file_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto_depIdxs,
		MessageInfos:      file_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes,
	}.Build()
	File_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto = out.File
	file_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDesc = nil
	file_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto_goTypes = nil
	file_npool_smoketest_gw_v1_planrelatedtestcase_planrelatedtestcase_proto_depIdxs = nil
}
