// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.20.1
// source: npool/smoketest/gw/v1/testplan/testcase/testcase.proto

package testcase

import (
	testcase "github.com/NpoolPlatform/message/npool/smoketest/mgr/v1/testplan/testcase"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateTestPlanTestCaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestPlanID     string                  `protobuf:"bytes,10,opt,name=TestPlanID,proto3" json:"TestPlanID,omitempty"`
	TestCaseID     string                  `protobuf:"bytes,20,opt,name=TestCaseID,proto3" json:"TestCaseID,omitempty"`
	TestCaseOutput *string                 `protobuf:"bytes,30,opt,name=TestCaseOutput,proto3,oneof" json:"TestCaseOutput,omitempty"`
	Description    *string                 `protobuf:"bytes,40,opt,name=Description,proto3,oneof" json:"Description,omitempty"`
	RunDuration    *uint32                 `protobuf:"varint,50,opt,name=RunDuration,proto3,oneof" json:"RunDuration,omitempty"`
	TestUserID     *string                 `protobuf:"bytes,60,opt,name=TestUserID,proto3,oneof" json:"TestUserID,omitempty"`
	Result         testcase.TestCaseResult `protobuf:"varint,70,opt,name=Result,proto3,enum=smoketest.manager.testplan.testcase.v1.TestCaseResult" json:"Result,omitempty"`
	Index          *uint32                 `protobuf:"varint,80,opt,name=Index,proto3,oneof" json:"Index,omitempty"`
}

func (x *CreateTestPlanTestCaseRequest) Reset() {
	*x = CreateTestPlanTestCaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTestPlanTestCaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTestPlanTestCaseRequest) ProtoMessage() {}

func (x *CreateTestPlanTestCaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTestPlanTestCaseRequest.ProtoReflect.Descriptor instead.
func (*CreateTestPlanTestCaseRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_rawDescGZIP(), []int{0}
}

func (x *CreateTestPlanTestCaseRequest) GetTestPlanID() string {
	if x != nil {
		return x.TestPlanID
	}
	return ""
}

func (x *CreateTestPlanTestCaseRequest) GetTestCaseID() string {
	if x != nil {
		return x.TestCaseID
	}
	return ""
}

func (x *CreateTestPlanTestCaseRequest) GetTestCaseOutput() string {
	if x != nil && x.TestCaseOutput != nil {
		return *x.TestCaseOutput
	}
	return ""
}

func (x *CreateTestPlanTestCaseRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CreateTestPlanTestCaseRequest) GetRunDuration() uint32 {
	if x != nil && x.RunDuration != nil {
		return *x.RunDuration
	}
	return 0
}

func (x *CreateTestPlanTestCaseRequest) GetTestUserID() string {
	if x != nil && x.TestUserID != nil {
		return *x.TestUserID
	}
	return ""
}

func (x *CreateTestPlanTestCaseRequest) GetResult() testcase.TestCaseResult {
	if x != nil {
		return x.Result
	}
	return testcase.TestCaseResult(0)
}

func (x *CreateTestPlanTestCaseRequest) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

type CreateTestPlanTestCaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *testcase.TestCase `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateTestPlanTestCaseResponse) Reset() {
	*x = CreateTestPlanTestCaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTestPlanTestCaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTestPlanTestCaseResponse) ProtoMessage() {}

func (x *CreateTestPlanTestCaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTestPlanTestCaseResponse.ProtoReflect.Descriptor instead.
func (*CreateTestPlanTestCaseResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_rawDescGZIP(), []int{1}
}

func (x *CreateTestPlanTestCaseResponse) GetInfo() *testcase.TestCase {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetTestPlanTestCasesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestPlanID string `protobuf:"bytes,10,opt,name=TestPlanID,proto3" json:"TestPlanID,omitempty"`
	Offset     *int32 `protobuf:"varint,20,opt,name=Offset,proto3,oneof" json:"Offset,omitempty"`
	Limit      *int32 `protobuf:"varint,30,opt,name=Limit,proto3,oneof" json:"Limit,omitempty"`
}

func (x *GetTestPlanTestCasesRequest) Reset() {
	*x = GetTestPlanTestCasesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestPlanTestCasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestPlanTestCasesRequest) ProtoMessage() {}

func (x *GetTestPlanTestCasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestPlanTestCasesRequest.ProtoReflect.Descriptor instead.
func (*GetTestPlanTestCasesRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_rawDescGZIP(), []int{2}
}

func (x *GetTestPlanTestCasesRequest) GetTestPlanID() string {
	if x != nil {
		return x.TestPlanID
	}
	return ""
}

func (x *GetTestPlanTestCasesRequest) GetOffset() int32 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *GetTestPlanTestCasesRequest) GetLimit() int32 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

type GetTestPlanTestCasesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*testcase.TestCase `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32               `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetTestPlanTestCasesResponse) Reset() {
	*x = GetTestPlanTestCasesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestPlanTestCasesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestPlanTestCasesResponse) ProtoMessage() {}

func (x *GetTestPlanTestCasesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestPlanTestCasesResponse.ProtoReflect.Descriptor instead.
func (*GetTestPlanTestCasesResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_rawDescGZIP(), []int{3}
}

func (x *GetTestPlanTestCasesResponse) GetInfos() []*testcase.TestCase {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetTestPlanTestCasesResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetTestPlanTestCaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetTestPlanTestCaseRequest) Reset() {
	*x = GetTestPlanTestCaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestPlanTestCaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestPlanTestCaseRequest) ProtoMessage() {}

func (x *GetTestPlanTestCaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestPlanTestCaseRequest.ProtoReflect.Descriptor instead.
func (*GetTestPlanTestCaseRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_rawDescGZIP(), []int{4}
}

func (x *GetTestPlanTestCaseRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetTestPlanTestCaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *testcase.TestCase `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetTestPlanTestCaseResponse) Reset() {
	*x = GetTestPlanTestCaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestPlanTestCaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestPlanTestCaseResponse) ProtoMessage() {}

func (x *GetTestPlanTestCaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestPlanTestCaseResponse.ProtoReflect.Descriptor instead.
func (*GetTestPlanTestCaseResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_rawDescGZIP(), []int{5}
}

func (x *GetTestPlanTestCaseResponse) GetInfo() *testcase.TestCase {
	if x != nil {
		return x.Info
	}
	return nil
}

type DeleteTestPlanTestCaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *DeleteTestPlanTestCaseRequest) Reset() {
	*x = DeleteTestPlanTestCaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTestPlanTestCaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTestPlanTestCaseRequest) ProtoMessage() {}

func (x *DeleteTestPlanTestCaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTestPlanTestCaseRequest.ProtoReflect.Descriptor instead.
func (*DeleteTestPlanTestCaseRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteTestPlanTestCaseRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type DeleteTestPlanTestCaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *testcase.TestCase `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteTestPlanTestCaseResponse) Reset() {
	*x = DeleteTestPlanTestCaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTestPlanTestCaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTestPlanTestCaseResponse) ProtoMessage() {}

func (x *DeleteTestPlanTestCaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTestPlanTestCaseResponse.ProtoReflect.Descriptor instead.
func (*DeleteTestPlanTestCaseResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteTestPlanTestCaseResponse) GetInfo() *testcase.TestCase {
	if x != nil {
		return x.Info
	}
	return nil
}

type DeleteTestPlanTestCasesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestPlanID string `protobuf:"bytes,20,opt,name=TestPlanID,proto3" json:"TestPlanID,omitempty"`
}

func (x *DeleteTestPlanTestCasesRequest) Reset() {
	*x = DeleteTestPlanTestCasesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTestPlanTestCasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTestPlanTestCasesRequest) ProtoMessage() {}

func (x *DeleteTestPlanTestCasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTestPlanTestCasesRequest.ProtoReflect.Descriptor instead.
func (*DeleteTestPlanTestCasesRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteTestPlanTestCasesRequest) GetTestPlanID() string {
	if x != nil {
		return x.TestPlanID
	}
	return ""
}

type DeleteTestPlanTestCasesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info []*testcase.TestCase `protobuf:"bytes,10,rep,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteTestPlanTestCasesResponse) Reset() {
	*x = DeleteTestPlanTestCasesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTestPlanTestCasesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTestPlanTestCasesResponse) ProtoMessage() {}

func (x *DeleteTestPlanTestCasesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTestPlanTestCasesResponse.ProtoReflect.Descriptor instead.
func (*DeleteTestPlanTestCasesResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteTestPlanTestCasesResponse) GetInfo() []*testcase.TestCase {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_smoketest_gw_v1_testplan_testcase_testcase_proto protoreflect.FileDescriptor

var file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_rawDesc = []byte{
	0x0a, 0x36, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73,
	0x74, 0x2f, 0x67, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e,
	0x2f, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x26, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x1a, 0x37, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73,
	0x74, 0x2f, 0x6d, 0x67, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61,
	0x6e, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x63,
	0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb6, 0x03, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x73,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54,
	0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x0e, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0b, 0x52, 0x75, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x02, 0x52, 0x0b, 0x52, 0x75, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x54, 0x65, 0x73, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x73, 0x6d, 0x6f, 0x6b,
	0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x05, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x52, 0x75, 0x6e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x54, 0x65, 0x73, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x22, 0x66, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x44, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x8a, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x65,
	0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x7c, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61,
	0x6e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x22, 0x2c, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x44, 0x22, 0x63, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x44, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2f, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x66, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x40, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49,
	0x44, 0x22, 0x67, 0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x83, 0x05, 0x0a, 0x07, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0xcf, 0x01, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x12, 0x45, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x63, 0x61, 0x73, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0xcf, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x12, 0x45, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x46, 0x2e, 0x73, 0x6d, 0x6f,
	0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x76, 0x31, 0x2f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0xd3, 0x01, 0x0a, 0x17, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x12, 0x46, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x6c, 0x61, 0x6e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x47,
	0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65,
	0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22,
	0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2f, 0x54, 0x65, 0x73, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x3a, 0x01, 0x2a,
	0x42, 0x4a, 0x5a, 0x48, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e,
	0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x73, 0x6d, 0x6f, 0x6b, 0x65,
	0x74, 0x65, 0x73, 0x74, 0x2f, 0x67, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x6c, 0x61, 0x6e, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_rawDescOnce sync.Once
	file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_rawDescData = file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_rawDesc
)

func file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_rawDescGZIP() []byte {
	file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_rawDescOnce.Do(func() {
		file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_rawDescData)
	})
	return file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_rawDescData
}

var file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_goTypes = []interface{}{
	(*CreateTestPlanTestCaseRequest)(nil),   // 0: smoketest.gateway.testplan.testcase.v1.CreateTestPlanTestCaseRequest
	(*CreateTestPlanTestCaseResponse)(nil),  // 1: smoketest.gateway.testplan.testcase.v1.CreateTestPlanTestCaseResponse
	(*GetTestPlanTestCasesRequest)(nil),     // 2: smoketest.gateway.testplan.testcase.v1.GetTestPlanTestCasesRequest
	(*GetTestPlanTestCasesResponse)(nil),    // 3: smoketest.gateway.testplan.testcase.v1.GetTestPlanTestCasesResponse
	(*GetTestPlanTestCaseRequest)(nil),      // 4: smoketest.gateway.testplan.testcase.v1.GetTestPlanTestCaseRequest
	(*GetTestPlanTestCaseResponse)(nil),     // 5: smoketest.gateway.testplan.testcase.v1.GetTestPlanTestCaseResponse
	(*DeleteTestPlanTestCaseRequest)(nil),   // 6: smoketest.gateway.testplan.testcase.v1.DeleteTestPlanTestCaseRequest
	(*DeleteTestPlanTestCaseResponse)(nil),  // 7: smoketest.gateway.testplan.testcase.v1.DeleteTestPlanTestCaseResponse
	(*DeleteTestPlanTestCasesRequest)(nil),  // 8: smoketest.gateway.testplan.testcase.v1.DeleteTestPlanTestCasesRequest
	(*DeleteTestPlanTestCasesResponse)(nil), // 9: smoketest.gateway.testplan.testcase.v1.DeleteTestPlanTestCasesResponse
	(testcase.TestCaseResult)(0),            // 10: smoketest.manager.testplan.testcase.v1.TestCaseResult
	(*testcase.TestCase)(nil),               // 11: smoketest.manager.testplan.testcase.v1.TestCase
}
var file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_depIdxs = []int32{
	10, // 0: smoketest.gateway.testplan.testcase.v1.CreateTestPlanTestCaseRequest.Result:type_name -> smoketest.manager.testplan.testcase.v1.TestCaseResult
	11, // 1: smoketest.gateway.testplan.testcase.v1.CreateTestPlanTestCaseResponse.Info:type_name -> smoketest.manager.testplan.testcase.v1.TestCase
	11, // 2: smoketest.gateway.testplan.testcase.v1.GetTestPlanTestCasesResponse.Infos:type_name -> smoketest.manager.testplan.testcase.v1.TestCase
	11, // 3: smoketest.gateway.testplan.testcase.v1.GetTestPlanTestCaseResponse.Info:type_name -> smoketest.manager.testplan.testcase.v1.TestCase
	11, // 4: smoketest.gateway.testplan.testcase.v1.DeleteTestPlanTestCaseResponse.Info:type_name -> smoketest.manager.testplan.testcase.v1.TestCase
	11, // 5: smoketest.gateway.testplan.testcase.v1.DeleteTestPlanTestCasesResponse.Info:type_name -> smoketest.manager.testplan.testcase.v1.TestCase
	0,  // 6: smoketest.gateway.testplan.testcase.v1.Gateway.CreateTestPlanTestCase:input_type -> smoketest.gateway.testplan.testcase.v1.CreateTestPlanTestCaseRequest
	6,  // 7: smoketest.gateway.testplan.testcase.v1.Gateway.DeleteTestPlanTestCase:input_type -> smoketest.gateway.testplan.testcase.v1.DeleteTestPlanTestCaseRequest
	8,  // 8: smoketest.gateway.testplan.testcase.v1.Gateway.DeleteTestPlanTestCases:input_type -> smoketest.gateway.testplan.testcase.v1.DeleteTestPlanTestCasesRequest
	1,  // 9: smoketest.gateway.testplan.testcase.v1.Gateway.CreateTestPlanTestCase:output_type -> smoketest.gateway.testplan.testcase.v1.CreateTestPlanTestCaseResponse
	7,  // 10: smoketest.gateway.testplan.testcase.v1.Gateway.DeleteTestPlanTestCase:output_type -> smoketest.gateway.testplan.testcase.v1.DeleteTestPlanTestCaseResponse
	9,  // 11: smoketest.gateway.testplan.testcase.v1.Gateway.DeleteTestPlanTestCases:output_type -> smoketest.gateway.testplan.testcase.v1.DeleteTestPlanTestCasesResponse
	9,  // [9:12] is the sub-list for method output_type
	6,  // [6:9] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_init() }
func file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_init() {
	if File_npool_smoketest_gw_v1_testplan_testcase_testcase_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTestPlanTestCaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTestPlanTestCaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTestPlanTestCasesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTestPlanTestCasesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTestPlanTestCaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTestPlanTestCaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTestPlanTestCaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTestPlanTestCaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTestPlanTestCasesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTestPlanTestCasesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_goTypes,
		DependencyIndexes: file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_depIdxs,
		MessageInfos:      file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_msgTypes,
	}.Build()
	File_npool_smoketest_gw_v1_testplan_testcase_testcase_proto = out.File
	file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_rawDesc = nil
	file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_goTypes = nil
	file_npool_smoketest_gw_v1_testplan_testcase_testcase_proto_depIdxs = nil
}
