// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: npool/smoketest/gw/v1/testplan/testcase/testcase.proto

package testcase

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	CreateTestPlanTestCase(ctx context.Context, in *CreateTestPlanTestCaseRequest, opts ...grpc.CallOption) (*CreateTestPlanTestCaseResponse, error)
	DeleteTestPlanTestCase(ctx context.Context, in *DeleteTestPlanTestCaseRequest, opts ...grpc.CallOption) (*DeleteTestPlanTestCaseResponse, error)
	DeleteTestPlanTestCases(ctx context.Context, in *DeleteTestPlanTestCasesRequest, opts ...grpc.CallOption) (*DeleteTestPlanTestCasesResponse, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) CreateTestPlanTestCase(ctx context.Context, in *CreateTestPlanTestCaseRequest, opts ...grpc.CallOption) (*CreateTestPlanTestCaseResponse, error) {
	out := new(CreateTestPlanTestCaseResponse)
	err := c.cc.Invoke(ctx, "/smoketest.gateway.testplan.testcase.v1.Gateway/CreateTestPlanTestCase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) DeleteTestPlanTestCase(ctx context.Context, in *DeleteTestPlanTestCaseRequest, opts ...grpc.CallOption) (*DeleteTestPlanTestCaseResponse, error) {
	out := new(DeleteTestPlanTestCaseResponse)
	err := c.cc.Invoke(ctx, "/smoketest.gateway.testplan.testcase.v1.Gateway/DeleteTestPlanTestCase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) DeleteTestPlanTestCases(ctx context.Context, in *DeleteTestPlanTestCasesRequest, opts ...grpc.CallOption) (*DeleteTestPlanTestCasesResponse, error) {
	out := new(DeleteTestPlanTestCasesResponse)
	err := c.cc.Invoke(ctx, "/smoketest.gateway.testplan.testcase.v1.Gateway/DeleteTestPlanTestCases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	CreateTestPlanTestCase(context.Context, *CreateTestPlanTestCaseRequest) (*CreateTestPlanTestCaseResponse, error)
	DeleteTestPlanTestCase(context.Context, *DeleteTestPlanTestCaseRequest) (*DeleteTestPlanTestCaseResponse, error)
	DeleteTestPlanTestCases(context.Context, *DeleteTestPlanTestCasesRequest) (*DeleteTestPlanTestCasesResponse, error)
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) CreateTestPlanTestCase(context.Context, *CreateTestPlanTestCaseRequest) (*CreateTestPlanTestCaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTestPlanTestCase not implemented")
}
func (UnimplementedGatewayServer) DeleteTestPlanTestCase(context.Context, *DeleteTestPlanTestCaseRequest) (*DeleteTestPlanTestCaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTestPlanTestCase not implemented")
}
func (UnimplementedGatewayServer) DeleteTestPlanTestCases(context.Context, *DeleteTestPlanTestCasesRequest) (*DeleteTestPlanTestCasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTestPlanTestCases not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_CreateTestPlanTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTestPlanTestCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).CreateTestPlanTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smoketest.gateway.testplan.testcase.v1.Gateway/CreateTestPlanTestCase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).CreateTestPlanTestCase(ctx, req.(*CreateTestPlanTestCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_DeleteTestPlanTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTestPlanTestCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).DeleteTestPlanTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smoketest.gateway.testplan.testcase.v1.Gateway/DeleteTestPlanTestCase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).DeleteTestPlanTestCase(ctx, req.(*DeleteTestPlanTestCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_DeleteTestPlanTestCases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTestPlanTestCasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).DeleteTestPlanTestCases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smoketest.gateway.testplan.testcase.v1.Gateway/DeleteTestPlanTestCases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).DeleteTestPlanTestCases(ctx, req.(*DeleteTestPlanTestCasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smoketest.gateway.testplan.testcase.v1.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTestPlanTestCase",
			Handler:    _Gateway_CreateTestPlanTestCase_Handler,
		},
		{
			MethodName: "DeleteTestPlanTestCase",
			Handler:    _Gateway_DeleteTestPlanTestCase_Handler,
		},
		{
			MethodName: "DeleteTestPlanTestCases",
			Handler:    _Gateway_DeleteTestPlanTestCases_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/smoketest/gw/v1/testplan/testcase/testcase.proto",
}
