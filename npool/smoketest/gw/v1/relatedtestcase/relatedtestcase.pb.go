// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.20.1
// source: npool/smoketest/gw/v1/relatedtestcase/relatedtestcase.proto

package relatedtestcase

import (
	relatedtestcase "github.com/NpoolPlatform/message/npool/smoketest/mgr/v1/relatedtestcase"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RelatedTestCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                       string                   `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	CondType                 relatedtestcase.CondType `protobuf:"varint,20,opt,name=CondType,proto3,enum=smoketest.manager.relatedtestcase.v1.CondType" json:"CondType,omitempty"` //条件类型:前置条件|后置条件
	TestCaseID               string                   `protobuf:"bytes,30,opt,name=TestCaseID,proto3" json:"TestCaseID,omitempty"`
	TestCasePath             string                   `protobuf:"bytes,40,opt,name=TestCasePath,proto3" json:"TestCasePath,omitempty"`
	TestCaseArguments        string                   `protobuf:"bytes,50,opt,name=TestCaseArguments,proto3" json:"TestCaseArguments,omitempty"`
	RelatedTestCaseID        string                   `protobuf:"bytes,60,opt,name=RelatedTestCaseID,proto3" json:"RelatedTestCaseID,omitempty"`
	RelatedTestCasePath      string                   `protobuf:"bytes,70,opt,name=RelatedTestCasePath,proto3" json:"RelatedTestCasePath,omitempty"`
	RelatedTestCaseArguments string                   `protobuf:"bytes,80,opt,name=RelatedTestCaseArguments,proto3" json:"RelatedTestCaseArguments,omitempty"`
	ArgumentsTransfer        string                   `protobuf:"bytes,90,opt,name=ArgumentsTransfer,proto3" json:"ArgumentsTransfer,omitempty"`
	Index                    uint32                   `protobuf:"varint,100,opt,name=index,proto3" json:"index,omitempty"`
	CreatedAt                uint32                   `protobuf:"varint,110,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
}

func (x *RelatedTestCase) Reset() {
	*x = RelatedTestCase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelatedTestCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelatedTestCase) ProtoMessage() {}

func (x *RelatedTestCase) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelatedTestCase.ProtoReflect.Descriptor instead.
func (*RelatedTestCase) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_rawDescGZIP(), []int{0}
}

func (x *RelatedTestCase) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *RelatedTestCase) GetCondType() relatedtestcase.CondType {
	if x != nil {
		return x.CondType
	}
	return relatedtestcase.CondType(0)
}

func (x *RelatedTestCase) GetTestCaseID() string {
	if x != nil {
		return x.TestCaseID
	}
	return ""
}

func (x *RelatedTestCase) GetTestCasePath() string {
	if x != nil {
		return x.TestCasePath
	}
	return ""
}

func (x *RelatedTestCase) GetTestCaseArguments() string {
	if x != nil {
		return x.TestCaseArguments
	}
	return ""
}

func (x *RelatedTestCase) GetRelatedTestCaseID() string {
	if x != nil {
		return x.RelatedTestCaseID
	}
	return ""
}

func (x *RelatedTestCase) GetRelatedTestCasePath() string {
	if x != nil {
		return x.RelatedTestCasePath
	}
	return ""
}

func (x *RelatedTestCase) GetRelatedTestCaseArguments() string {
	if x != nil {
		return x.RelatedTestCaseArguments
	}
	return ""
}

func (x *RelatedTestCase) GetArgumentsTransfer() string {
	if x != nil {
		return x.ArgumentsTransfer
	}
	return ""
}

func (x *RelatedTestCase) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *RelatedTestCase) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type CreateRelatedTestCaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TestCaseID        string                   `protobuf:"bytes,10,opt,name=TestCaseID,proto3" json:"TestCaseID,omitempty"`
	RelatedTestCaseID string                   `protobuf:"bytes,20,opt,name=RelatedTestCaseID,proto3" json:"RelatedTestCaseID,omitempty"`
	ArgumentsTransfer string                   `protobuf:"bytes,30,opt,name=ArgumentsTransfer,proto3" json:"ArgumentsTransfer,omitempty"`
	Index             uint32                   `protobuf:"varint,40,opt,name=index,proto3" json:"index,omitempty"`
	CondType          relatedtestcase.CondType `protobuf:"varint,50,opt,name=CondType,proto3,enum=smoketest.manager.relatedtestcase.v1.CondType" json:"CondType,omitempty"`
}

func (x *CreateRelatedTestCaseRequest) Reset() {
	*x = CreateRelatedTestCaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRelatedTestCaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRelatedTestCaseRequest) ProtoMessage() {}

func (x *CreateRelatedTestCaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRelatedTestCaseRequest.ProtoReflect.Descriptor instead.
func (*CreateRelatedTestCaseRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_rawDescGZIP(), []int{1}
}

func (x *CreateRelatedTestCaseRequest) GetTestCaseID() string {
	if x != nil {
		return x.TestCaseID
	}
	return ""
}

func (x *CreateRelatedTestCaseRequest) GetRelatedTestCaseID() string {
	if x != nil {
		return x.RelatedTestCaseID
	}
	return ""
}

func (x *CreateRelatedTestCaseRequest) GetArgumentsTransfer() string {
	if x != nil {
		return x.ArgumentsTransfer
	}
	return ""
}

func (x *CreateRelatedTestCaseRequest) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *CreateRelatedTestCaseRequest) GetCondType() relatedtestcase.CondType {
	if x != nil {
		return x.CondType
	}
	return relatedtestcase.CondType(0)
}

type CreateRelatedTestCaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *RelatedTestCase `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateRelatedTestCaseResponse) Reset() {
	*x = CreateRelatedTestCaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRelatedTestCaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRelatedTestCaseResponse) ProtoMessage() {}

func (x *CreateRelatedTestCaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRelatedTestCaseResponse.ProtoReflect.Descriptor instead.
func (*CreateRelatedTestCaseResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_rawDescGZIP(), []int{2}
}

func (x *CreateRelatedTestCaseResponse) GetInfo() *RelatedTestCase {
	if x != nil {
		return x.Info
	}
	return nil
}

type DeleteRelatedTestCaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *DeleteRelatedTestCaseRequest) Reset() {
	*x = DeleteRelatedTestCaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRelatedTestCaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRelatedTestCaseRequest) ProtoMessage() {}

func (x *DeleteRelatedTestCaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRelatedTestCaseRequest.ProtoReflect.Descriptor instead.
func (*DeleteRelatedTestCaseRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteRelatedTestCaseRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type DeleteRelatedTestCaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *RelatedTestCase `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteRelatedTestCaseResponse) Reset() {
	*x = DeleteRelatedTestCaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRelatedTestCaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRelatedTestCaseResponse) ProtoMessage() {}

func (x *DeleteRelatedTestCaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRelatedTestCaseResponse.ProtoReflect.Descriptor instead.
func (*DeleteRelatedTestCaseResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteRelatedTestCaseResponse) GetInfo() *RelatedTestCase {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetRelatedTestCasesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int32 `protobuf:"varint,10,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32 `protobuf:"varint,20,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetRelatedTestCasesRequest) Reset() {
	*x = GetRelatedTestCasesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRelatedTestCasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRelatedTestCasesRequest) ProtoMessage() {}

func (x *GetRelatedTestCasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRelatedTestCasesRequest.ProtoReflect.Descriptor instead.
func (*GetRelatedTestCasesRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_rawDescGZIP(), []int{5}
}

func (x *GetRelatedTestCasesRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetRelatedTestCasesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetRelatedTestCasesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*RelatedTestCase `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32             `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetRelatedTestCasesResponse) Reset() {
	*x = GetRelatedTestCasesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRelatedTestCasesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRelatedTestCasesResponse) ProtoMessage() {}

func (x *GetRelatedTestCasesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRelatedTestCasesResponse.ProtoReflect.Descriptor instead.
func (*GetRelatedTestCasesResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_rawDescGZIP(), []int{6}
}

func (x *GetRelatedTestCasesResponse) GetInfos() []*RelatedTestCase {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetRelatedTestCasesResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type UpdateRelatedTestCaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                string                   `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	CondType          relatedtestcase.CondType `protobuf:"varint,20,opt,name=CondType,proto3,enum=smoketest.manager.relatedtestcase.v1.CondType" json:"CondType,omitempty"`
	TestCaseID        string                   `protobuf:"bytes,30,opt,name=TestCaseID,proto3" json:"TestCaseID,omitempty"`
	RelatedTestCaseID string                   `protobuf:"bytes,40,opt,name=RelatedTestCaseID,proto3" json:"RelatedTestCaseID,omitempty"`
	ArgumentsTransfer string                   `protobuf:"bytes,50,opt,name=ArgumentsTransfer,proto3" json:"ArgumentsTransfer,omitempty"`
	Index             uint32                   `protobuf:"varint,60,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *UpdateRelatedTestCaseRequest) Reset() {
	*x = UpdateRelatedTestCaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRelatedTestCaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRelatedTestCaseRequest) ProtoMessage() {}

func (x *UpdateRelatedTestCaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRelatedTestCaseRequest.ProtoReflect.Descriptor instead.
func (*UpdateRelatedTestCaseRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateRelatedTestCaseRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *UpdateRelatedTestCaseRequest) GetCondType() relatedtestcase.CondType {
	if x != nil {
		return x.CondType
	}
	return relatedtestcase.CondType(0)
}

func (x *UpdateRelatedTestCaseRequest) GetTestCaseID() string {
	if x != nil {
		return x.TestCaseID
	}
	return ""
}

func (x *UpdateRelatedTestCaseRequest) GetRelatedTestCaseID() string {
	if x != nil {
		return x.RelatedTestCaseID
	}
	return ""
}

func (x *UpdateRelatedTestCaseRequest) GetArgumentsTransfer() string {
	if x != nil {
		return x.ArgumentsTransfer
	}
	return ""
}

func (x *UpdateRelatedTestCaseRequest) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type UpdateRelatedTestCaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *RelatedTestCase `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateRelatedTestCaseResponse) Reset() {
	*x = UpdateRelatedTestCaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRelatedTestCaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRelatedTestCaseResponse) ProtoMessage() {}

func (x *UpdateRelatedTestCaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRelatedTestCaseResponse.ProtoReflect.Descriptor instead.
func (*UpdateRelatedTestCaseResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateRelatedTestCaseResponse) GetInfo() *RelatedTestCase {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto protoreflect.FileDescriptor

var file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_rawDesc = []byte{
	0x0a, 0x3b, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73,
	0x74, 0x2f, 0x67, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74,
	0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74,
	0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x73,
	0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x1a, 0x3c, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x73, 0x6d, 0x6f, 0x6b, 0x65,
	0x74, 0x65, 0x73, 0x74, 0x2f, 0x6d, 0x67, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2f, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xdd, 0x03, 0x0a, 0x0f, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x4a, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x43, 0x6f, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x11, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x41,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x2c, 0x0a, 0x11, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x12,
	0x30, 0x0a, 0x13, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x3a, 0x0a, 0x18, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x50, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x18, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2c, 0x0a,
	0x11, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x6e,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0xfc, 0x01, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44,
	0x12, 0x2c, 0x0a, 0x11, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x12, 0x2c,
	0x0a, 0x11, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x41, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x4a, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x43, 0x6f, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x22, 0x6a,
	0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x49, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e,
	0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2e, 0x0a, 0x1c, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x6a, 0x0a, 0x1d, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x6d, 0x6f, 0x6b,
	0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4a, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0x80, 0x01, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4b, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73,
	0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x8c, 0x02, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x4a, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x43, 0x6f, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44,
	0x12, 0x2c, 0x0a, 0x11, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x41, 0x72, 0x67,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x22, 0x6a, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74,
	0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x32, 0xa9, 0x06, 0x0a, 0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0xbf, 0x01, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x73, 0x12, 0x40, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1d, 0x22, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0xc7,
	0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x12, 0x42, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x73,
	0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73,
	0x74, 0x63, 0x61, 0x73, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0xc7, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x12, 0x42, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65,
	0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x3a,
	0x01, 0x2a, 0x12, 0xc7, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x12, 0x42, 0x2e, 0x73,
	0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x43, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74,
	0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x22, 0x1a, 0x2f,
	0x76, 0x31, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x3a, 0x01, 0x2a, 0x42, 0x48, 0x5a, 0x46,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74,
	0x2f, 0x67, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65,
	0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_rawDescOnce sync.Once
	file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_rawDescData = file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_rawDesc
)

func file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_rawDescGZIP() []byte {
	file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_rawDescOnce.Do(func() {
		file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_rawDescData)
	})
	return file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_rawDescData
}

var file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_goTypes = []interface{}{
	(*RelatedTestCase)(nil),               // 0: smoketest.gateway.relatedtestcase.v1.RelatedTestCase
	(*CreateRelatedTestCaseRequest)(nil),  // 1: smoketest.gateway.relatedtestcase.v1.CreateRelatedTestCaseRequest
	(*CreateRelatedTestCaseResponse)(nil), // 2: smoketest.gateway.relatedtestcase.v1.CreateRelatedTestCaseResponse
	(*DeleteRelatedTestCaseRequest)(nil),  // 3: smoketest.gateway.relatedtestcase.v1.DeleteRelatedTestCaseRequest
	(*DeleteRelatedTestCaseResponse)(nil), // 4: smoketest.gateway.relatedtestcase.v1.DeleteRelatedTestCaseResponse
	(*GetRelatedTestCasesRequest)(nil),    // 5: smoketest.gateway.relatedtestcase.v1.GetRelatedTestCasesRequest
	(*GetRelatedTestCasesResponse)(nil),   // 6: smoketest.gateway.relatedtestcase.v1.GetRelatedTestCasesResponse
	(*UpdateRelatedTestCaseRequest)(nil),  // 7: smoketest.gateway.relatedtestcase.v1.UpdateRelatedTestCaseRequest
	(*UpdateRelatedTestCaseResponse)(nil), // 8: smoketest.gateway.relatedtestcase.v1.UpdateRelatedTestCaseResponse
	(relatedtestcase.CondType)(0),         // 9: smoketest.manager.relatedtestcase.v1.CondType
}
var file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_depIdxs = []int32{
	9,  // 0: smoketest.gateway.relatedtestcase.v1.RelatedTestCase.CondType:type_name -> smoketest.manager.relatedtestcase.v1.CondType
	9,  // 1: smoketest.gateway.relatedtestcase.v1.CreateRelatedTestCaseRequest.CondType:type_name -> smoketest.manager.relatedtestcase.v1.CondType
	0,  // 2: smoketest.gateway.relatedtestcase.v1.CreateRelatedTestCaseResponse.Info:type_name -> smoketest.gateway.relatedtestcase.v1.RelatedTestCase
	0,  // 3: smoketest.gateway.relatedtestcase.v1.DeleteRelatedTestCaseResponse.Info:type_name -> smoketest.gateway.relatedtestcase.v1.RelatedTestCase
	0,  // 4: smoketest.gateway.relatedtestcase.v1.GetRelatedTestCasesResponse.Infos:type_name -> smoketest.gateway.relatedtestcase.v1.RelatedTestCase
	9,  // 5: smoketest.gateway.relatedtestcase.v1.UpdateRelatedTestCaseRequest.CondType:type_name -> smoketest.manager.relatedtestcase.v1.CondType
	0,  // 6: smoketest.gateway.relatedtestcase.v1.UpdateRelatedTestCaseResponse.Info:type_name -> smoketest.gateway.relatedtestcase.v1.RelatedTestCase
	5,  // 7: smoketest.gateway.relatedtestcase.v1.Gateway.GetRelatedTestCases:input_type -> smoketest.gateway.relatedtestcase.v1.GetRelatedTestCasesRequest
	1,  // 8: smoketest.gateway.relatedtestcase.v1.Gateway.CreateRelatedTestCase:input_type -> smoketest.gateway.relatedtestcase.v1.CreateRelatedTestCaseRequest
	7,  // 9: smoketest.gateway.relatedtestcase.v1.Gateway.UpdateRelatedTestCase:input_type -> smoketest.gateway.relatedtestcase.v1.UpdateRelatedTestCaseRequest
	3,  // 10: smoketest.gateway.relatedtestcase.v1.Gateway.DeleteRelatedTestCase:input_type -> smoketest.gateway.relatedtestcase.v1.DeleteRelatedTestCaseRequest
	6,  // 11: smoketest.gateway.relatedtestcase.v1.Gateway.GetRelatedTestCases:output_type -> smoketest.gateway.relatedtestcase.v1.GetRelatedTestCasesResponse
	2,  // 12: smoketest.gateway.relatedtestcase.v1.Gateway.CreateRelatedTestCase:output_type -> smoketest.gateway.relatedtestcase.v1.CreateRelatedTestCaseResponse
	8,  // 13: smoketest.gateway.relatedtestcase.v1.Gateway.UpdateRelatedTestCase:output_type -> smoketest.gateway.relatedtestcase.v1.UpdateRelatedTestCaseResponse
	4,  // 14: smoketest.gateway.relatedtestcase.v1.Gateway.DeleteRelatedTestCase:output_type -> smoketest.gateway.relatedtestcase.v1.DeleteRelatedTestCaseResponse
	11, // [11:15] is the sub-list for method output_type
	7,  // [7:11] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_init() }
func file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_init() {
	if File_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelatedTestCase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRelatedTestCaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRelatedTestCaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRelatedTestCaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRelatedTestCaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRelatedTestCasesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRelatedTestCasesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRelatedTestCaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRelatedTestCaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_goTypes,
		DependencyIndexes: file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_depIdxs,
		MessageInfos:      file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_msgTypes,
	}.Build()
	File_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto = out.File
	file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_rawDesc = nil
	file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_goTypes = nil
	file_npool_smoketest_gw_v1_relatedtestcase_relatedtestcase_proto_depIdxs = nil
}
