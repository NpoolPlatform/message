// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.20.1
// source: npool/smoketest/mgr/v1/planrelatedtestcase/planrelatedtestcase.proto

package planrelatedtestcase

import (
	npool "github.com/NpoolPlatform/message/npool"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TestCaseResult int32

const (
	TestCaseResult_DefaultTestCaseResult TestCaseResult = 0
	TestCaseResult_Skiped                TestCaseResult = 10
	TestCaseResult_Passed                TestCaseResult = 20
	TestCaseResult_Failed                TestCaseResult = 30
)

// Enum value maps for TestCaseResult.
var (
	TestCaseResult_name = map[int32]string{
		0:  "DefaultTestCaseResult",
		10: "Skiped",
		20: "Passed",
		30: "Failed",
	}
	TestCaseResult_value = map[string]int32{
		"DefaultTestCaseResult": 0,
		"Skiped":                10,
		"Passed":                20,
		"Failed":                30,
	}
)

func (x TestCaseResult) Enum() *TestCaseResult {
	p := new(TestCaseResult)
	*p = x
	return p
}

func (x TestCaseResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestCaseResult) Descriptor() protoreflect.EnumDescriptor {
	return file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_enumTypes[0].Descriptor()
}

func (TestCaseResult) Type() protoreflect.EnumType {
	return &file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_enumTypes[0]
}

func (x TestCaseResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestCaseResult.Descriptor instead.
func (TestCaseResult) EnumDescriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDescGZIP(), []int{0}
}

type PlanRelatedTestCaseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             *string         `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	TestPlanID     *string         `protobuf:"bytes,20,opt,name=TestPlanID,proto3,oneof" json:"TestPlanID,omitempty"`
	TestCaseID     *string         `protobuf:"bytes,30,opt,name=TestCaseID,proto3,oneof" json:"TestCaseID,omitempty"`
	TestCaseOutput *string         `protobuf:"bytes,40,opt,name=TestCaseOutput,proto3,oneof" json:"TestCaseOutput,omitempty"`
	Description    *string         `protobuf:"bytes,50,opt,name=Description,proto3,oneof" json:"Description,omitempty"`
	RunDuration    *uint32         `protobuf:"varint,60,opt,name=RunDuration,proto3,oneof" json:"RunDuration,omitempty"`
	TestUserID     *string         `protobuf:"bytes,70,opt,name=TestUserID,proto3,oneof" json:"TestUserID,omitempty"`
	TestCaseResult *TestCaseResult `protobuf:"varint,80,opt,name=TestCaseResult,proto3,enum=smoketest.manager.planrelatedtestcase.v1.TestCaseResult,oneof" json:"TestCaseResult,omitempty"`
	Index          *uint32         `protobuf:"varint,100,opt,name=Index,proto3,oneof" json:"Index,omitempty"`
}

func (x *PlanRelatedTestCaseReq) Reset() {
	*x = PlanRelatedTestCaseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanRelatedTestCaseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanRelatedTestCaseReq) ProtoMessage() {}

func (x *PlanRelatedTestCaseReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanRelatedTestCaseReq.ProtoReflect.Descriptor instead.
func (*PlanRelatedTestCaseReq) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDescGZIP(), []int{0}
}

func (x *PlanRelatedTestCaseReq) GetID() string {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return ""
}

func (x *PlanRelatedTestCaseReq) GetTestPlanID() string {
	if x != nil && x.TestPlanID != nil {
		return *x.TestPlanID
	}
	return ""
}

func (x *PlanRelatedTestCaseReq) GetTestCaseID() string {
	if x != nil && x.TestCaseID != nil {
		return *x.TestCaseID
	}
	return ""
}

func (x *PlanRelatedTestCaseReq) GetTestCaseOutput() string {
	if x != nil && x.TestCaseOutput != nil {
		return *x.TestCaseOutput
	}
	return ""
}

func (x *PlanRelatedTestCaseReq) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *PlanRelatedTestCaseReq) GetRunDuration() uint32 {
	if x != nil && x.RunDuration != nil {
		return *x.RunDuration
	}
	return 0
}

func (x *PlanRelatedTestCaseReq) GetTestUserID() string {
	if x != nil && x.TestUserID != nil {
		return *x.TestUserID
	}
	return ""
}

func (x *PlanRelatedTestCaseReq) GetTestCaseResult() TestCaseResult {
	if x != nil && x.TestCaseResult != nil {
		return *x.TestCaseResult
	}
	return TestCaseResult_DefaultTestCaseResult
}

func (x *PlanRelatedTestCaseReq) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

type PlanRelatedTestCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             string         `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	TestPlanID     string         `protobuf:"bytes,20,opt,name=TestPlanID,proto3" json:"TestPlanID,omitempty"`
	TestCaseID     string         `protobuf:"bytes,40,opt,name=TestCaseID,proto3" json:"TestCaseID,omitempty"`
	TestCaseOutput string         `protobuf:"bytes,50,opt,name=TestCaseOutput,proto3" json:"TestCaseOutput,omitempty"`
	Description    string         `protobuf:"bytes,60,opt,name=Description,proto3" json:"Description,omitempty"`
	RunDuration    uint32         `protobuf:"varint,70,opt,name=RunDuration,proto3" json:"RunDuration,omitempty"`
	TestUserID     string         `protobuf:"bytes,80,opt,name=TestUserID,proto3" json:"TestUserID,omitempty"`
	TestCaseResult TestCaseResult `protobuf:"varint,90,opt,name=TestCaseResult,proto3,enum=smoketest.manager.planrelatedtestcase.v1.TestCaseResult" json:"TestCaseResult,omitempty"`
	CreatedAt      uint32         `protobuf:"varint,100,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	Index          uint32         `protobuf:"varint,110,opt,name=Index,proto3" json:"Index,omitempty"`
}

func (x *PlanRelatedTestCase) Reset() {
	*x = PlanRelatedTestCase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanRelatedTestCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanRelatedTestCase) ProtoMessage() {}

func (x *PlanRelatedTestCase) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanRelatedTestCase.ProtoReflect.Descriptor instead.
func (*PlanRelatedTestCase) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDescGZIP(), []int{1}
}

func (x *PlanRelatedTestCase) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *PlanRelatedTestCase) GetTestPlanID() string {
	if x != nil {
		return x.TestPlanID
	}
	return ""
}

func (x *PlanRelatedTestCase) GetTestCaseID() string {
	if x != nil {
		return x.TestCaseID
	}
	return ""
}

func (x *PlanRelatedTestCase) GetTestCaseOutput() string {
	if x != nil {
		return x.TestCaseOutput
	}
	return ""
}

func (x *PlanRelatedTestCase) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PlanRelatedTestCase) GetRunDuration() uint32 {
	if x != nil {
		return x.RunDuration
	}
	return 0
}

func (x *PlanRelatedTestCase) GetTestUserID() string {
	if x != nil {
		return x.TestUserID
	}
	return ""
}

func (x *PlanRelatedTestCase) GetTestCaseResult() TestCaseResult {
	if x != nil {
		return x.TestCaseResult
	}
	return TestCaseResult_DefaultTestCaseResult
}

func (x *PlanRelatedTestCase) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *PlanRelatedTestCase) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             *npool.StringVal `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	TestPlanID     *npool.StringVal `protobuf:"bytes,20,opt,name=TestPlanID,proto3,oneof" json:"TestPlanID,omitempty"`
	TestUserID     *npool.StringVal `protobuf:"bytes,40,opt,name=TestUserID,proto3,oneof" json:"TestUserID,omitempty"`
	TestCaseResult *npool.StringVal `protobuf:"bytes,50,opt,name=TestCaseResult,proto3,oneof" json:"TestCaseResult,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *npool.StringVal {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetTestPlanID() *npool.StringVal {
	if x != nil {
		return x.TestPlanID
	}
	return nil
}

func (x *Conds) GetTestUserID() *npool.StringVal {
	if x != nil {
		return x.TestUserID
	}
	return nil
}

func (x *Conds) GetTestCaseResult() *npool.StringVal {
	if x != nil {
		return x.TestCaseResult
	}
	return nil
}

type CreatePlanRelatedTestCaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PlanRelatedTestCaseReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreatePlanRelatedTestCaseRequest) Reset() {
	*x = CreatePlanRelatedTestCaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePlanRelatedTestCaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlanRelatedTestCaseRequest) ProtoMessage() {}

func (x *CreatePlanRelatedTestCaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlanRelatedTestCaseRequest.ProtoReflect.Descriptor instead.
func (*CreatePlanRelatedTestCaseRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDescGZIP(), []int{3}
}

func (x *CreatePlanRelatedTestCaseRequest) GetInfo() *PlanRelatedTestCaseReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreatePlanRelatedTestCaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PlanRelatedTestCase `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreatePlanRelatedTestCaseResponse) Reset() {
	*x = CreatePlanRelatedTestCaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePlanRelatedTestCaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlanRelatedTestCaseResponse) ProtoMessage() {}

func (x *CreatePlanRelatedTestCaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlanRelatedTestCaseResponse.ProtoReflect.Descriptor instead.
func (*CreatePlanRelatedTestCaseResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDescGZIP(), []int{4}
}

func (x *CreatePlanRelatedTestCaseResponse) GetInfo() *PlanRelatedTestCase {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreatePlanRelatedTestCasesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*PlanRelatedTestCaseReq `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreatePlanRelatedTestCasesRequest) Reset() {
	*x = CreatePlanRelatedTestCasesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePlanRelatedTestCasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlanRelatedTestCasesRequest) ProtoMessage() {}

func (x *CreatePlanRelatedTestCasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlanRelatedTestCasesRequest.ProtoReflect.Descriptor instead.
func (*CreatePlanRelatedTestCasesRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDescGZIP(), []int{5}
}

func (x *CreatePlanRelatedTestCasesRequest) GetInfos() []*PlanRelatedTestCaseReq {
	if x != nil {
		return x.Infos
	}
	return nil
}

type CreatePlanRelatedTestCasesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*PlanRelatedTestCase `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreatePlanRelatedTestCasesResponse) Reset() {
	*x = CreatePlanRelatedTestCasesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePlanRelatedTestCasesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlanRelatedTestCasesResponse) ProtoMessage() {}

func (x *CreatePlanRelatedTestCasesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlanRelatedTestCasesResponse.ProtoReflect.Descriptor instead.
func (*CreatePlanRelatedTestCasesResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDescGZIP(), []int{6}
}

func (x *CreatePlanRelatedTestCasesResponse) GetInfos() []*PlanRelatedTestCase {
	if x != nil {
		return x.Infos
	}
	return nil
}

type UpdatePlanRelatedTestCaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PlanRelatedTestCaseReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdatePlanRelatedTestCaseRequest) Reset() {
	*x = UpdatePlanRelatedTestCaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePlanRelatedTestCaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePlanRelatedTestCaseRequest) ProtoMessage() {}

func (x *UpdatePlanRelatedTestCaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePlanRelatedTestCaseRequest.ProtoReflect.Descriptor instead.
func (*UpdatePlanRelatedTestCaseRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDescGZIP(), []int{7}
}

func (x *UpdatePlanRelatedTestCaseRequest) GetInfo() *PlanRelatedTestCaseReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdatePlanRelatedTestCaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PlanRelatedTestCase `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdatePlanRelatedTestCaseResponse) Reset() {
	*x = UpdatePlanRelatedTestCaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePlanRelatedTestCaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePlanRelatedTestCaseResponse) ProtoMessage() {}

func (x *UpdatePlanRelatedTestCaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePlanRelatedTestCaseResponse.ProtoReflect.Descriptor instead.
func (*UpdatePlanRelatedTestCaseResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDescGZIP(), []int{8}
}

func (x *UpdatePlanRelatedTestCaseResponse) GetInfo() *PlanRelatedTestCase {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetPlanRelatedTestCaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetPlanRelatedTestCaseRequest) Reset() {
	*x = GetPlanRelatedTestCaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlanRelatedTestCaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlanRelatedTestCaseRequest) ProtoMessage() {}

func (x *GetPlanRelatedTestCaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlanRelatedTestCaseRequest.ProtoReflect.Descriptor instead.
func (*GetPlanRelatedTestCaseRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDescGZIP(), []int{9}
}

func (x *GetPlanRelatedTestCaseRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetPlanRelatedTestCaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PlanRelatedTestCase `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetPlanRelatedTestCaseResponse) Reset() {
	*x = GetPlanRelatedTestCaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlanRelatedTestCaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlanRelatedTestCaseResponse) ProtoMessage() {}

func (x *GetPlanRelatedTestCaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlanRelatedTestCaseResponse.ProtoReflect.Descriptor instead.
func (*GetPlanRelatedTestCaseResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDescGZIP(), []int{10}
}

func (x *GetPlanRelatedTestCaseResponse) GetInfo() *PlanRelatedTestCase {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetPlanRelatedTestCasesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetPlanRelatedTestCasesRequest) Reset() {
	*x = GetPlanRelatedTestCasesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlanRelatedTestCasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlanRelatedTestCasesRequest) ProtoMessage() {}

func (x *GetPlanRelatedTestCasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlanRelatedTestCasesRequest.ProtoReflect.Descriptor instead.
func (*GetPlanRelatedTestCasesRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDescGZIP(), []int{11}
}

func (x *GetPlanRelatedTestCasesRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetPlanRelatedTestCasesRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetPlanRelatedTestCasesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetPlanRelatedTestCasesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*PlanRelatedTestCase `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32                 `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetPlanRelatedTestCasesResponse) Reset() {
	*x = GetPlanRelatedTestCasesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlanRelatedTestCasesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlanRelatedTestCasesResponse) ProtoMessage() {}

func (x *GetPlanRelatedTestCasesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlanRelatedTestCasesResponse.ProtoReflect.Descriptor instead.
func (*GetPlanRelatedTestCasesResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDescGZIP(), []int{12}
}

func (x *GetPlanRelatedTestCasesResponse) GetInfos() []*PlanRelatedTestCase {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetPlanRelatedTestCasesResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetPlanRelatedTestCaseOnlyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *GetPlanRelatedTestCaseOnlyRequest) Reset() {
	*x = GetPlanRelatedTestCaseOnlyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlanRelatedTestCaseOnlyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlanRelatedTestCaseOnlyRequest) ProtoMessage() {}

func (x *GetPlanRelatedTestCaseOnlyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlanRelatedTestCaseOnlyRequest.ProtoReflect.Descriptor instead.
func (*GetPlanRelatedTestCaseOnlyRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDescGZIP(), []int{13}
}

func (x *GetPlanRelatedTestCaseOnlyRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type GetPlanRelatedTestCaseOnlyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PlanRelatedTestCase `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetPlanRelatedTestCaseOnlyResponse) Reset() {
	*x = GetPlanRelatedTestCaseOnlyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlanRelatedTestCaseOnlyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlanRelatedTestCaseOnlyResponse) ProtoMessage() {}

func (x *GetPlanRelatedTestCaseOnlyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlanRelatedTestCaseOnlyResponse.ProtoReflect.Descriptor instead.
func (*GetPlanRelatedTestCaseOnlyResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDescGZIP(), []int{14}
}

func (x *GetPlanRelatedTestCaseOnlyResponse) GetInfo() *PlanRelatedTestCase {
	if x != nil {
		return x.Info
	}
	return nil
}

type ExistPlanRelatedTestCaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ExistPlanRelatedTestCaseRequest) Reset() {
	*x = ExistPlanRelatedTestCaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistPlanRelatedTestCaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistPlanRelatedTestCaseRequest) ProtoMessage() {}

func (x *ExistPlanRelatedTestCaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistPlanRelatedTestCaseRequest.ProtoReflect.Descriptor instead.
func (*ExistPlanRelatedTestCaseRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDescGZIP(), []int{15}
}

func (x *ExistPlanRelatedTestCaseRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ExistPlanRelatedTestCaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistPlanRelatedTestCaseResponse) Reset() {
	*x = ExistPlanRelatedTestCaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistPlanRelatedTestCaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistPlanRelatedTestCaseResponse) ProtoMessage() {}

func (x *ExistPlanRelatedTestCaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistPlanRelatedTestCaseResponse.ProtoReflect.Descriptor instead.
func (*ExistPlanRelatedTestCaseResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDescGZIP(), []int{16}
}

func (x *ExistPlanRelatedTestCaseResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type ExistPlanRelatedTestCaseCondsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *ExistPlanRelatedTestCaseCondsRequest) Reset() {
	*x = ExistPlanRelatedTestCaseCondsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistPlanRelatedTestCaseCondsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistPlanRelatedTestCaseCondsRequest) ProtoMessage() {}

func (x *ExistPlanRelatedTestCaseCondsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistPlanRelatedTestCaseCondsRequest.ProtoReflect.Descriptor instead.
func (*ExistPlanRelatedTestCaseCondsRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDescGZIP(), []int{17}
}

func (x *ExistPlanRelatedTestCaseCondsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type ExistPlanRelatedTestCaseCondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistPlanRelatedTestCaseCondsResponse) Reset() {
	*x = ExistPlanRelatedTestCaseCondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistPlanRelatedTestCaseCondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistPlanRelatedTestCaseCondsResponse) ProtoMessage() {}

func (x *ExistPlanRelatedTestCaseCondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistPlanRelatedTestCaseCondsResponse.ProtoReflect.Descriptor instead.
func (*ExistPlanRelatedTestCaseCondsResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDescGZIP(), []int{18}
}

func (x *ExistPlanRelatedTestCaseCondsResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type CountPlanRelatedTestCasesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *CountPlanRelatedTestCasesRequest) Reset() {
	*x = CountPlanRelatedTestCasesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountPlanRelatedTestCasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountPlanRelatedTestCasesRequest) ProtoMessage() {}

func (x *CountPlanRelatedTestCasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountPlanRelatedTestCasesRequest.ProtoReflect.Descriptor instead.
func (*CountPlanRelatedTestCasesRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDescGZIP(), []int{19}
}

func (x *CountPlanRelatedTestCasesRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type CountPlanRelatedTestCasesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info uint32 `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CountPlanRelatedTestCasesResponse) Reset() {
	*x = CountPlanRelatedTestCasesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountPlanRelatedTestCasesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountPlanRelatedTestCasesResponse) ProtoMessage() {}

func (x *CountPlanRelatedTestCasesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountPlanRelatedTestCasesResponse.ProtoReflect.Descriptor instead.
func (*CountPlanRelatedTestCasesResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDescGZIP(), []int{20}
}

func (x *CountPlanRelatedTestCasesResponse) GetInfo() uint32 {
	if x != nil {
		return x.Info
	}
	return 0
}

type DeletePlanRelatedTestCaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *DeletePlanRelatedTestCaseRequest) Reset() {
	*x = DeletePlanRelatedTestCaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePlanRelatedTestCaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePlanRelatedTestCaseRequest) ProtoMessage() {}

func (x *DeletePlanRelatedTestCaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePlanRelatedTestCaseRequest.ProtoReflect.Descriptor instead.
func (*DeletePlanRelatedTestCaseRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDescGZIP(), []int{21}
}

func (x *DeletePlanRelatedTestCaseRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type DeletePlanRelatedTestCaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *PlanRelatedTestCase `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeletePlanRelatedTestCaseResponse) Reset() {
	*x = DeletePlanRelatedTestCaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePlanRelatedTestCaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePlanRelatedTestCaseResponse) ProtoMessage() {}

func (x *DeletePlanRelatedTestCaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePlanRelatedTestCaseResponse.ProtoReflect.Descriptor instead.
func (*DeletePlanRelatedTestCaseResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDescGZIP(), []int{22}
}

func (x *DeletePlanRelatedTestCaseResponse) GetInfo() *PlanRelatedTestCase {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto protoreflect.FileDescriptor

var file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDesc = []byte{
	0x0a, 0x44, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73,
	0x74, 0x2f, 0x6d, 0x67, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2f, 0x70, 0x6c, 0x61,
	0x6e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x28, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x1a, 0x11, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x9d, 0x04, 0x0a, 0x16, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x12, 0x13,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44,
	0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49,
	0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x0e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x04, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0b, 0x52, 0x75, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x05, 0x52, 0x0b, 0x52, 0x75, 0x6e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0a,
	0x54, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x65, 0x0a,
	0x0e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x50, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48,
	0x07, 0x52, 0x0e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x08, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x54, 0x65, 0x73, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x49, 0x44, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x49, 0x44, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x52, 0x75, 0x6e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x54, 0x65, 0x73, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x22, 0x87, 0x03, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x54,
	0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x75, 0x6e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x52, 0x75, 0x6e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x65, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x60, 0x0a, 0x0e, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x38, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74,
	0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0e, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x6e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x9f, 0x02,
	0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x38, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x0a, 0x54, 0x65,
	0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0a, 0x54,
	0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x48, 0x02, 0x52, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x48, 0x03, 0x52, 0x0e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x54, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x78, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61,
	0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x76, 0x0a, 0x21, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x73,
	0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74,
	0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x7b, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x79,
	0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x78, 0x0a, 0x20, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x73, 0x6d,
	0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x76, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61,
	0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2f, 0x0a, 0x1d, 0x47,
	0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x73, 0x0a, 0x1e,
	0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x73,
	0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74,
	0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x95, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x8c, 0x01, 0x0a, 0x1f, 0x47, 0x65,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a,
	0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x73,
	0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74,
	0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x05, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x6a, 0x0a, 0x21, 0x47, 0x65, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a,
	0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73,
	0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74,
	0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x22, 0x77, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4f, 0x6e,
	0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x31, 0x0a,
	0x1f, 0x45, 0x78, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x22, 0x36, 0x0a, 0x20, 0x45, 0x78, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6d, 0x0a, 0x24, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x45, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74,
	0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x3b, 0x0a, 0x25, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x69, 0x0a, 0x20, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22,
	0x37, 0x0a, 0x21, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x32, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x76, 0x0a, 0x21,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x51, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3d, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74,
	0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x2a, 0x4f, 0x0a, 0x0e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x6b, 0x69, 0x70, 0x65, 0x64, 0x10, 0x0a, 0x12, 0x0a, 0x0a,
	0x06, 0x50, 0x61, 0x73, 0x73, 0x65, 0x64, 0x10, 0x14, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x10, 0x1e, 0x32, 0x09, 0x0a, 0x07, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x42, 0x4d, 0x5a, 0x4b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e,
	0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x73, 0x6d, 0x6f, 0x6b, 0x65,
	0x74, 0x65, 0x73, 0x74, 0x2f, 0x6d, 0x67, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x61, 0x6e,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDescOnce sync.Once
	file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDescData = file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDesc
)

func file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDescGZIP() []byte {
	file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDescOnce.Do(func() {
		file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDescData)
	})
	return file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDescData
}

var file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_goTypes = []interface{}{
	(TestCaseResult)(0),                           // 0: smoketest.manager.planrelatedtestcase.v1.TestCaseResult
	(*PlanRelatedTestCaseReq)(nil),                // 1: smoketest.manager.planrelatedtestcase.v1.PlanRelatedTestCaseReq
	(*PlanRelatedTestCase)(nil),                   // 2: smoketest.manager.planrelatedtestcase.v1.PlanRelatedTestCase
	(*Conds)(nil),                                 // 3: smoketest.manager.planrelatedtestcase.v1.Conds
	(*CreatePlanRelatedTestCaseRequest)(nil),      // 4: smoketest.manager.planrelatedtestcase.v1.CreatePlanRelatedTestCaseRequest
	(*CreatePlanRelatedTestCaseResponse)(nil),     // 5: smoketest.manager.planrelatedtestcase.v1.CreatePlanRelatedTestCaseResponse
	(*CreatePlanRelatedTestCasesRequest)(nil),     // 6: smoketest.manager.planrelatedtestcase.v1.CreatePlanRelatedTestCasesRequest
	(*CreatePlanRelatedTestCasesResponse)(nil),    // 7: smoketest.manager.planrelatedtestcase.v1.CreatePlanRelatedTestCasesResponse
	(*UpdatePlanRelatedTestCaseRequest)(nil),      // 8: smoketest.manager.planrelatedtestcase.v1.UpdatePlanRelatedTestCaseRequest
	(*UpdatePlanRelatedTestCaseResponse)(nil),     // 9: smoketest.manager.planrelatedtestcase.v1.UpdatePlanRelatedTestCaseResponse
	(*GetPlanRelatedTestCaseRequest)(nil),         // 10: smoketest.manager.planrelatedtestcase.v1.GetPlanRelatedTestCaseRequest
	(*GetPlanRelatedTestCaseResponse)(nil),        // 11: smoketest.manager.planrelatedtestcase.v1.GetPlanRelatedTestCaseResponse
	(*GetPlanRelatedTestCasesRequest)(nil),        // 12: smoketest.manager.planrelatedtestcase.v1.GetPlanRelatedTestCasesRequest
	(*GetPlanRelatedTestCasesResponse)(nil),       // 13: smoketest.manager.planrelatedtestcase.v1.GetPlanRelatedTestCasesResponse
	(*GetPlanRelatedTestCaseOnlyRequest)(nil),     // 14: smoketest.manager.planrelatedtestcase.v1.GetPlanRelatedTestCaseOnlyRequest
	(*GetPlanRelatedTestCaseOnlyResponse)(nil),    // 15: smoketest.manager.planrelatedtestcase.v1.GetPlanRelatedTestCaseOnlyResponse
	(*ExistPlanRelatedTestCaseRequest)(nil),       // 16: smoketest.manager.planrelatedtestcase.v1.ExistPlanRelatedTestCaseRequest
	(*ExistPlanRelatedTestCaseResponse)(nil),      // 17: smoketest.manager.planrelatedtestcase.v1.ExistPlanRelatedTestCaseResponse
	(*ExistPlanRelatedTestCaseCondsRequest)(nil),  // 18: smoketest.manager.planrelatedtestcase.v1.ExistPlanRelatedTestCaseCondsRequest
	(*ExistPlanRelatedTestCaseCondsResponse)(nil), // 19: smoketest.manager.planrelatedtestcase.v1.ExistPlanRelatedTestCaseCondsResponse
	(*CountPlanRelatedTestCasesRequest)(nil),      // 20: smoketest.manager.planrelatedtestcase.v1.CountPlanRelatedTestCasesRequest
	(*CountPlanRelatedTestCasesResponse)(nil),     // 21: smoketest.manager.planrelatedtestcase.v1.CountPlanRelatedTestCasesResponse
	(*DeletePlanRelatedTestCaseRequest)(nil),      // 22: smoketest.manager.planrelatedtestcase.v1.DeletePlanRelatedTestCaseRequest
	(*DeletePlanRelatedTestCaseResponse)(nil),     // 23: smoketest.manager.planrelatedtestcase.v1.DeletePlanRelatedTestCaseResponse
	(*npool.StringVal)(nil),                       // 24: npool.v1.StringVal
}
var file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_depIdxs = []int32{
	0,  // 0: smoketest.manager.planrelatedtestcase.v1.PlanRelatedTestCaseReq.TestCaseResult:type_name -> smoketest.manager.planrelatedtestcase.v1.TestCaseResult
	0,  // 1: smoketest.manager.planrelatedtestcase.v1.PlanRelatedTestCase.TestCaseResult:type_name -> smoketest.manager.planrelatedtestcase.v1.TestCaseResult
	24, // 2: smoketest.manager.planrelatedtestcase.v1.Conds.ID:type_name -> npool.v1.StringVal
	24, // 3: smoketest.manager.planrelatedtestcase.v1.Conds.TestPlanID:type_name -> npool.v1.StringVal
	24, // 4: smoketest.manager.planrelatedtestcase.v1.Conds.TestUserID:type_name -> npool.v1.StringVal
	24, // 5: smoketest.manager.planrelatedtestcase.v1.Conds.TestCaseResult:type_name -> npool.v1.StringVal
	1,  // 6: smoketest.manager.planrelatedtestcase.v1.CreatePlanRelatedTestCaseRequest.Info:type_name -> smoketest.manager.planrelatedtestcase.v1.PlanRelatedTestCaseReq
	2,  // 7: smoketest.manager.planrelatedtestcase.v1.CreatePlanRelatedTestCaseResponse.Info:type_name -> smoketest.manager.planrelatedtestcase.v1.PlanRelatedTestCase
	1,  // 8: smoketest.manager.planrelatedtestcase.v1.CreatePlanRelatedTestCasesRequest.Infos:type_name -> smoketest.manager.planrelatedtestcase.v1.PlanRelatedTestCaseReq
	2,  // 9: smoketest.manager.planrelatedtestcase.v1.CreatePlanRelatedTestCasesResponse.Infos:type_name -> smoketest.manager.planrelatedtestcase.v1.PlanRelatedTestCase
	1,  // 10: smoketest.manager.planrelatedtestcase.v1.UpdatePlanRelatedTestCaseRequest.Info:type_name -> smoketest.manager.planrelatedtestcase.v1.PlanRelatedTestCaseReq
	2,  // 11: smoketest.manager.planrelatedtestcase.v1.UpdatePlanRelatedTestCaseResponse.Info:type_name -> smoketest.manager.planrelatedtestcase.v1.PlanRelatedTestCase
	2,  // 12: smoketest.manager.planrelatedtestcase.v1.GetPlanRelatedTestCaseResponse.Info:type_name -> smoketest.manager.planrelatedtestcase.v1.PlanRelatedTestCase
	3,  // 13: smoketest.manager.planrelatedtestcase.v1.GetPlanRelatedTestCasesRequest.Conds:type_name -> smoketest.manager.planrelatedtestcase.v1.Conds
	2,  // 14: smoketest.manager.planrelatedtestcase.v1.GetPlanRelatedTestCasesResponse.Infos:type_name -> smoketest.manager.planrelatedtestcase.v1.PlanRelatedTestCase
	3,  // 15: smoketest.manager.planrelatedtestcase.v1.GetPlanRelatedTestCaseOnlyRequest.Conds:type_name -> smoketest.manager.planrelatedtestcase.v1.Conds
	2,  // 16: smoketest.manager.planrelatedtestcase.v1.GetPlanRelatedTestCaseOnlyResponse.Info:type_name -> smoketest.manager.planrelatedtestcase.v1.PlanRelatedTestCase
	3,  // 17: smoketest.manager.planrelatedtestcase.v1.ExistPlanRelatedTestCaseCondsRequest.Conds:type_name -> smoketest.manager.planrelatedtestcase.v1.Conds
	3,  // 18: smoketest.manager.planrelatedtestcase.v1.CountPlanRelatedTestCasesRequest.Conds:type_name -> smoketest.manager.planrelatedtestcase.v1.Conds
	2,  // 19: smoketest.manager.planrelatedtestcase.v1.DeletePlanRelatedTestCaseResponse.Info:type_name -> smoketest.manager.planrelatedtestcase.v1.PlanRelatedTestCase
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_init() }
func file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_init() {
	if File_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanRelatedTestCaseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanRelatedTestCase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePlanRelatedTestCaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePlanRelatedTestCaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePlanRelatedTestCasesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePlanRelatedTestCasesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePlanRelatedTestCaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePlanRelatedTestCaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlanRelatedTestCaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlanRelatedTestCaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlanRelatedTestCasesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlanRelatedTestCasesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlanRelatedTestCaseOnlyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlanRelatedTestCaseOnlyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistPlanRelatedTestCaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistPlanRelatedTestCaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistPlanRelatedTestCaseCondsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistPlanRelatedTestCaseCondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountPlanRelatedTestCasesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountPlanRelatedTestCasesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePlanRelatedTestCaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePlanRelatedTestCaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_goTypes,
		DependencyIndexes: file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_depIdxs,
		EnumInfos:         file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_enumTypes,
		MessageInfos:      file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_msgTypes,
	}.Build()
	File_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto = out.File
	file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_rawDesc = nil
	file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_goTypes = nil
	file_npool_smoketest_mgr_v1_planrelatedtestcase_planrelatedtestcase_proto_depIdxs = nil
}
