// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.20.1
// source: npool/smoketest/mgr/v1/relatedtestcase/relatedtestcase.proto

package relatedtestcase

import (
	npool "github.com/NpoolPlatform/message/npool"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CondType int32

const (
	CondType_CondTypeDefault CondType = 0
	CondType_PreCondition    CondType = 10
	CondType_Cleaner         CondType = 20
)

// Enum value maps for CondType.
var (
	CondType_name = map[int32]string{
		0:  "CondTypeDefault",
		10: "PreCondition",
		20: "Cleaner",
	}
	CondType_value = map[string]int32{
		"CondTypeDefault": 0,
		"PreCondition":    10,
		"Cleaner":         20,
	}
)

func (x CondType) Enum() *CondType {
	p := new(CondType)
	*p = x
	return p
}

func (x CondType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CondType) Descriptor() protoreflect.EnumDescriptor {
	return file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_enumTypes[0].Descriptor()
}

func (CondType) Type() protoreflect.EnumType {
	return &file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_enumTypes[0]
}

func (x CondType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CondType.Descriptor instead.
func (CondType) EnumDescriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_rawDescGZIP(), []int{0}
}

type RelatedTestCaseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                *string   `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	CondType          *CondType `protobuf:"varint,20,opt,name=CondType,proto3,enum=smoketest.manager.relatedtestcase.v1.CondType,oneof" json:"CondType,omitempty"`
	TestCaseID        *string   `protobuf:"bytes,30,opt,name=TestCaseID,proto3,oneof" json:"TestCaseID,omitempty"`
	RelatedTestCaseID *string   `protobuf:"bytes,40,opt,name=RelatedTestCaseID,proto3,oneof" json:"RelatedTestCaseID,omitempty"`
	ArgumentsTransfer *string   `protobuf:"bytes,50,opt,name=ArgumentsTransfer,proto3,oneof" json:"ArgumentsTransfer,omitempty"`
	Index             *uint32   `protobuf:"varint,60,opt,name=Index,proto3,oneof" json:"Index,omitempty"`
}

func (x *RelatedTestCaseReq) Reset() {
	*x = RelatedTestCaseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelatedTestCaseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelatedTestCaseReq) ProtoMessage() {}

func (x *RelatedTestCaseReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelatedTestCaseReq.ProtoReflect.Descriptor instead.
func (*RelatedTestCaseReq) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_rawDescGZIP(), []int{0}
}

func (x *RelatedTestCaseReq) GetID() string {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return ""
}

func (x *RelatedTestCaseReq) GetCondType() CondType {
	if x != nil && x.CondType != nil {
		return *x.CondType
	}
	return CondType_CondTypeDefault
}

func (x *RelatedTestCaseReq) GetTestCaseID() string {
	if x != nil && x.TestCaseID != nil {
		return *x.TestCaseID
	}
	return ""
}

func (x *RelatedTestCaseReq) GetRelatedTestCaseID() string {
	if x != nil && x.RelatedTestCaseID != nil {
		return *x.RelatedTestCaseID
	}
	return ""
}

func (x *RelatedTestCaseReq) GetArgumentsTransfer() string {
	if x != nil && x.ArgumentsTransfer != nil {
		return *x.ArgumentsTransfer
	}
	return ""
}

func (x *RelatedTestCaseReq) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

type RelatedTestCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                string   `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	CondType          CondType `protobuf:"varint,20,opt,name=CondType,proto3,enum=smoketest.manager.relatedtestcase.v1.CondType" json:"CondType,omitempty"` //条件类型:前置条件|后置条件
	TestCaseID        string   `protobuf:"bytes,30,opt,name=TestCaseID,proto3" json:"TestCaseID,omitempty"`
	RelatedTestCaseID string   `protobuf:"bytes,40,opt,name=RelatedTestCaseID,proto3" json:"RelatedTestCaseID,omitempty"`
	ArgumentsTransfer string   `protobuf:"bytes,50,opt,name=ArgumentsTransfer,proto3" json:"ArgumentsTransfer,omitempty"`
	Index             uint32   `protobuf:"varint,60,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *RelatedTestCase) Reset() {
	*x = RelatedTestCase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelatedTestCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelatedTestCase) ProtoMessage() {}

func (x *RelatedTestCase) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelatedTestCase.ProtoReflect.Descriptor instead.
func (*RelatedTestCase) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_rawDescGZIP(), []int{1}
}

func (x *RelatedTestCase) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *RelatedTestCase) GetCondType() CondType {
	if x != nil {
		return x.CondType
	}
	return CondType_CondTypeDefault
}

func (x *RelatedTestCase) GetTestCaseID() string {
	if x != nil {
		return x.TestCaseID
	}
	return ""
}

func (x *RelatedTestCase) GetRelatedTestCaseID() string {
	if x != nil {
		return x.RelatedTestCaseID
	}
	return ""
}

func (x *RelatedTestCase) GetArgumentsTransfer() string {
	if x != nil {
		return x.ArgumentsTransfer
	}
	return ""
}

func (x *RelatedTestCase) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                *npool.StringVal `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	CondType          *npool.StringVal `protobuf:"bytes,20,opt,name=CondType,proto3,oneof" json:"CondType,omitempty"`
	TestCaseID        *npool.StringVal `protobuf:"bytes,30,opt,name=TestCaseID,proto3,oneof" json:"TestCaseID,omitempty"`
	RelatedTestCaseID *npool.StringVal `protobuf:"bytes,40,opt,name=RelatedTestCaseID,proto3,oneof" json:"RelatedTestCaseID,omitempty"`
	Index             *npool.Int32Val  `protobuf:"bytes,50,opt,name=Index,proto3,oneof" json:"Index,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *npool.StringVal {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetCondType() *npool.StringVal {
	if x != nil {
		return x.CondType
	}
	return nil
}

func (x *Conds) GetTestCaseID() *npool.StringVal {
	if x != nil {
		return x.TestCaseID
	}
	return nil
}

func (x *Conds) GetRelatedTestCaseID() *npool.StringVal {
	if x != nil {
		return x.RelatedTestCaseID
	}
	return nil
}

func (x *Conds) GetIndex() *npool.Int32Val {
	if x != nil {
		return x.Index
	}
	return nil
}

type CreateRelatedTestCaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *RelatedTestCaseReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateRelatedTestCaseRequest) Reset() {
	*x = CreateRelatedTestCaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRelatedTestCaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRelatedTestCaseRequest) ProtoMessage() {}

func (x *CreateRelatedTestCaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRelatedTestCaseRequest.ProtoReflect.Descriptor instead.
func (*CreateRelatedTestCaseRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_rawDescGZIP(), []int{3}
}

func (x *CreateRelatedTestCaseRequest) GetInfo() *RelatedTestCaseReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateRelatedTestCaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *RelatedTestCase `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateRelatedTestCaseResponse) Reset() {
	*x = CreateRelatedTestCaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRelatedTestCaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRelatedTestCaseResponse) ProtoMessage() {}

func (x *CreateRelatedTestCaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRelatedTestCaseResponse.ProtoReflect.Descriptor instead.
func (*CreateRelatedTestCaseResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_rawDescGZIP(), []int{4}
}

func (x *CreateRelatedTestCaseResponse) GetInfo() *RelatedTestCase {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateRelatedTestCasesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*RelatedTestCaseReq `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateRelatedTestCasesRequest) Reset() {
	*x = CreateRelatedTestCasesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRelatedTestCasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRelatedTestCasesRequest) ProtoMessage() {}

func (x *CreateRelatedTestCasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRelatedTestCasesRequest.ProtoReflect.Descriptor instead.
func (*CreateRelatedTestCasesRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_rawDescGZIP(), []int{5}
}

func (x *CreateRelatedTestCasesRequest) GetInfos() []*RelatedTestCaseReq {
	if x != nil {
		return x.Infos
	}
	return nil
}

type CreateRelatedTestCasesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*RelatedTestCase `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateRelatedTestCasesResponse) Reset() {
	*x = CreateRelatedTestCasesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRelatedTestCasesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRelatedTestCasesResponse) ProtoMessage() {}

func (x *CreateRelatedTestCasesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRelatedTestCasesResponse.ProtoReflect.Descriptor instead.
func (*CreateRelatedTestCasesResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_rawDescGZIP(), []int{6}
}

func (x *CreateRelatedTestCasesResponse) GetInfos() []*RelatedTestCase {
	if x != nil {
		return x.Infos
	}
	return nil
}

type UpdateRelatedTestCaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *RelatedTestCaseReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateRelatedTestCaseRequest) Reset() {
	*x = UpdateRelatedTestCaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRelatedTestCaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRelatedTestCaseRequest) ProtoMessage() {}

func (x *UpdateRelatedTestCaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRelatedTestCaseRequest.ProtoReflect.Descriptor instead.
func (*UpdateRelatedTestCaseRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateRelatedTestCaseRequest) GetInfo() *RelatedTestCaseReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateRelatedTestCaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *RelatedTestCase `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateRelatedTestCaseResponse) Reset() {
	*x = UpdateRelatedTestCaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRelatedTestCaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRelatedTestCaseResponse) ProtoMessage() {}

func (x *UpdateRelatedTestCaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRelatedTestCaseResponse.ProtoReflect.Descriptor instead.
func (*UpdateRelatedTestCaseResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateRelatedTestCaseResponse) GetInfo() *RelatedTestCase {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetRelatedTestCaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetRelatedTestCaseRequest) Reset() {
	*x = GetRelatedTestCaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRelatedTestCaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRelatedTestCaseRequest) ProtoMessage() {}

func (x *GetRelatedTestCaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRelatedTestCaseRequest.ProtoReflect.Descriptor instead.
func (*GetRelatedTestCaseRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_rawDescGZIP(), []int{9}
}

func (x *GetRelatedTestCaseRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetRelatedTestCaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *RelatedTestCase `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetRelatedTestCaseResponse) Reset() {
	*x = GetRelatedTestCaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRelatedTestCaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRelatedTestCaseResponse) ProtoMessage() {}

func (x *GetRelatedTestCaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRelatedTestCaseResponse.ProtoReflect.Descriptor instead.
func (*GetRelatedTestCaseResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_rawDescGZIP(), []int{10}
}

func (x *GetRelatedTestCaseResponse) GetInfo() *RelatedTestCase {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetRelatedTestCasesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetRelatedTestCasesRequest) Reset() {
	*x = GetRelatedTestCasesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRelatedTestCasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRelatedTestCasesRequest) ProtoMessage() {}

func (x *GetRelatedTestCasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRelatedTestCasesRequest.ProtoReflect.Descriptor instead.
func (*GetRelatedTestCasesRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_rawDescGZIP(), []int{11}
}

func (x *GetRelatedTestCasesRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetRelatedTestCasesRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetRelatedTestCasesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetRelatedTestCasesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*RelatedTestCase `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32             `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetRelatedTestCasesResponse) Reset() {
	*x = GetRelatedTestCasesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRelatedTestCasesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRelatedTestCasesResponse) ProtoMessage() {}

func (x *GetRelatedTestCasesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRelatedTestCasesResponse.ProtoReflect.Descriptor instead.
func (*GetRelatedTestCasesResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_rawDescGZIP(), []int{12}
}

func (x *GetRelatedTestCasesResponse) GetInfos() []*RelatedTestCase {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetRelatedTestCasesResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetRelatedTestCaseOnlyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *GetRelatedTestCaseOnlyRequest) Reset() {
	*x = GetRelatedTestCaseOnlyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRelatedTestCaseOnlyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRelatedTestCaseOnlyRequest) ProtoMessage() {}

func (x *GetRelatedTestCaseOnlyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRelatedTestCaseOnlyRequest.ProtoReflect.Descriptor instead.
func (*GetRelatedTestCaseOnlyRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_rawDescGZIP(), []int{13}
}

func (x *GetRelatedTestCaseOnlyRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type GetRelatedTestCaseOnlyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *RelatedTestCase `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetRelatedTestCaseOnlyResponse) Reset() {
	*x = GetRelatedTestCaseOnlyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRelatedTestCaseOnlyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRelatedTestCaseOnlyResponse) ProtoMessage() {}

func (x *GetRelatedTestCaseOnlyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRelatedTestCaseOnlyResponse.ProtoReflect.Descriptor instead.
func (*GetRelatedTestCaseOnlyResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_rawDescGZIP(), []int{14}
}

func (x *GetRelatedTestCaseOnlyResponse) GetInfo() *RelatedTestCase {
	if x != nil {
		return x.Info
	}
	return nil
}

type ExistRelatedTestCaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ExistRelatedTestCaseRequest) Reset() {
	*x = ExistRelatedTestCaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistRelatedTestCaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistRelatedTestCaseRequest) ProtoMessage() {}

func (x *ExistRelatedTestCaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistRelatedTestCaseRequest.ProtoReflect.Descriptor instead.
func (*ExistRelatedTestCaseRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_rawDescGZIP(), []int{15}
}

func (x *ExistRelatedTestCaseRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ExistRelatedTestCaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistRelatedTestCaseResponse) Reset() {
	*x = ExistRelatedTestCaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistRelatedTestCaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistRelatedTestCaseResponse) ProtoMessage() {}

func (x *ExistRelatedTestCaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistRelatedTestCaseResponse.ProtoReflect.Descriptor instead.
func (*ExistRelatedTestCaseResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_rawDescGZIP(), []int{16}
}

func (x *ExistRelatedTestCaseResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type ExistRelatedTestCaseCondsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *ExistRelatedTestCaseCondsRequest) Reset() {
	*x = ExistRelatedTestCaseCondsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistRelatedTestCaseCondsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistRelatedTestCaseCondsRequest) ProtoMessage() {}

func (x *ExistRelatedTestCaseCondsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistRelatedTestCaseCondsRequest.ProtoReflect.Descriptor instead.
func (*ExistRelatedTestCaseCondsRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_rawDescGZIP(), []int{17}
}

func (x *ExistRelatedTestCaseCondsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type ExistRelatedTestCaseCondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistRelatedTestCaseCondsResponse) Reset() {
	*x = ExistRelatedTestCaseCondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistRelatedTestCaseCondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistRelatedTestCaseCondsResponse) ProtoMessage() {}

func (x *ExistRelatedTestCaseCondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistRelatedTestCaseCondsResponse.ProtoReflect.Descriptor instead.
func (*ExistRelatedTestCaseCondsResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_rawDescGZIP(), []int{18}
}

func (x *ExistRelatedTestCaseCondsResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type CountRelatedTestCasesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *CountRelatedTestCasesRequest) Reset() {
	*x = CountRelatedTestCasesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountRelatedTestCasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountRelatedTestCasesRequest) ProtoMessage() {}

func (x *CountRelatedTestCasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountRelatedTestCasesRequest.ProtoReflect.Descriptor instead.
func (*CountRelatedTestCasesRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_rawDescGZIP(), []int{19}
}

func (x *CountRelatedTestCasesRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type CountRelatedTestCasesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info uint32 `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CountRelatedTestCasesResponse) Reset() {
	*x = CountRelatedTestCasesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountRelatedTestCasesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountRelatedTestCasesResponse) ProtoMessage() {}

func (x *CountRelatedTestCasesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountRelatedTestCasesResponse.ProtoReflect.Descriptor instead.
func (*CountRelatedTestCasesResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_rawDescGZIP(), []int{20}
}

func (x *CountRelatedTestCasesResponse) GetInfo() uint32 {
	if x != nil {
		return x.Info
	}
	return 0
}

type DeleteRelatedTestCaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *DeleteRelatedTestCaseRequest) Reset() {
	*x = DeleteRelatedTestCaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRelatedTestCaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRelatedTestCaseRequest) ProtoMessage() {}

func (x *DeleteRelatedTestCaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRelatedTestCaseRequest.ProtoReflect.Descriptor instead.
func (*DeleteRelatedTestCaseRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteRelatedTestCaseRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type DeleteRelatedTestCaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *RelatedTestCase `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteRelatedTestCaseResponse) Reset() {
	*x = DeleteRelatedTestCaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRelatedTestCaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRelatedTestCaseResponse) ProtoMessage() {}

func (x *DeleteRelatedTestCaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRelatedTestCaseResponse.ProtoReflect.Descriptor instead.
func (*DeleteRelatedTestCaseResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteRelatedTestCaseResponse) GetInfo() *RelatedTestCase {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto protoreflect.FileDescriptor

var file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_rawDesc = []byte{
	0x0a, 0x3c, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73,
	0x74, 0x2f, 0x6d, 0x67, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24,
	0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x1a, 0x11, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6e, 0x70, 0x6f, 0x6f,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf9, 0x02, 0x0a, 0x12, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x12, 0x13,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44,
	0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01, 0x52, 0x08, 0x43, 0x6f, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x11, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11,
	0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x11, 0x41, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x05,
	0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49,
	0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x43, 0x6f, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x42, 0x14, 0x0a,
	0x12, 0x5f, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x49, 0x44, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x22, 0xff, 0x01, 0x0a, 0x0f, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x4a, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x73, 0x6d, 0x6f, 0x6b,
	0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x43, 0x6f, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49,
	0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49,
	0x44, 0x12, 0x2c, 0x0a, 0x11, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x41, 0x72,
	0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xdb, 0x02, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x28, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x08, 0x43, 0x6f, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x48, 0x01, 0x52, 0x08, 0x43, 0x6f, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x38, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x02, 0x52, 0x0a, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x46, 0x0a, 0x11, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x11, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x2d, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x48, 0x04, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x43, 0x6f, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x49, 0x44, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x22, 0x6c, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73,
	0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x6a, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x49, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74,
	0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6f, 0x0a,
	0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e,
	0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x6d,
	0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4b, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x6c, 0x0a,
	0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x6d,
	0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6a, 0x0a, 0x1d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x6d, 0x6f,
	0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2b, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x44, 0x22, 0x67, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x49, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74,
	0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x8d, 0x01,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x05,
	0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x6d,
	0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x80, 0x01,
	0x0a, 0x1b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a,
	0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73,
	0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x22, 0x62, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x41, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74,
	0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x22, 0x6b, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x2d, 0x0a, 0x1b, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x22, 0x32, 0x0a, 0x1c, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x65, 0x0a, 0x20, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x37, 0x0a, 0x21, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x61, 0x0a, 0x1c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74,
	0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x33, 0x0a, 0x1d, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2e, 0x0a, 0x1c,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x6a, 0x0a, 0x1d,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x73, 0x6d,
	0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x2a, 0x3e, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x72, 0x65,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x43,
	0x6c, 0x65, 0x61, 0x6e, 0x65, 0x72, 0x10, 0x14, 0x32, 0xfb, 0x0c, 0x0a, 0x07, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x12, 0xa2, 0x01, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x12, 0x42,
	0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x43, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65,
	0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa5, 0x01, 0x0a, 0x16, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x73, 0x12, 0x43, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x44, 0x2e, 0x73, 0x6d, 0x6f, 0x6b,
	0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0xa2, 0x01, 0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x12, 0x42, 0x2e, 0x73, 0x6d,
	0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x43, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x99, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x12, 0x3f, 0x2e,
	0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40,
	0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0xa5, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x43, 0x2e,
	0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x44, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65,
	0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4f, 0x6e, 0x6c, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9c, 0x01, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x73, 0x12, 0x40, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65,
	0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x9f, 0x01, 0x0a, 0x14, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x12, 0x41, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65,
	0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x42, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xae, 0x01, 0x0a, 0x19,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x46, 0x2e, 0x73, 0x6d, 0x6f, 0x6b,
	0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x47, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73,
	0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xa2, 0x01, 0x0a,
	0x15, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x12, 0x42, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x43, 0x2e, 0x73, 0x6d, 0x6f,
	0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0xa2, 0x01, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x12, 0x42, 0x2e, 0x73, 0x6d,
	0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x43, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x49, 0x5a, 0x47, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c,
	0x2f, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x6d, 0x67, 0x72, 0x2f, 0x76,
	0x31, 0x2f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_rawDescOnce sync.Once
	file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_rawDescData = file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_rawDesc
)

func file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_rawDescGZIP() []byte {
	file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_rawDescOnce.Do(func() {
		file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_rawDescData)
	})
	return file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_rawDescData
}

var file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_goTypes = []interface{}{
	(CondType)(0),                             // 0: smoketest.manager.relatedtestcase.v1.CondType
	(*RelatedTestCaseReq)(nil),                // 1: smoketest.manager.relatedtestcase.v1.RelatedTestCaseReq
	(*RelatedTestCase)(nil),                   // 2: smoketest.manager.relatedtestcase.v1.RelatedTestCase
	(*Conds)(nil),                             // 3: smoketest.manager.relatedtestcase.v1.Conds
	(*CreateRelatedTestCaseRequest)(nil),      // 4: smoketest.manager.relatedtestcase.v1.CreateRelatedTestCaseRequest
	(*CreateRelatedTestCaseResponse)(nil),     // 5: smoketest.manager.relatedtestcase.v1.CreateRelatedTestCaseResponse
	(*CreateRelatedTestCasesRequest)(nil),     // 6: smoketest.manager.relatedtestcase.v1.CreateRelatedTestCasesRequest
	(*CreateRelatedTestCasesResponse)(nil),    // 7: smoketest.manager.relatedtestcase.v1.CreateRelatedTestCasesResponse
	(*UpdateRelatedTestCaseRequest)(nil),      // 8: smoketest.manager.relatedtestcase.v1.UpdateRelatedTestCaseRequest
	(*UpdateRelatedTestCaseResponse)(nil),     // 9: smoketest.manager.relatedtestcase.v1.UpdateRelatedTestCaseResponse
	(*GetRelatedTestCaseRequest)(nil),         // 10: smoketest.manager.relatedtestcase.v1.GetRelatedTestCaseRequest
	(*GetRelatedTestCaseResponse)(nil),        // 11: smoketest.manager.relatedtestcase.v1.GetRelatedTestCaseResponse
	(*GetRelatedTestCasesRequest)(nil),        // 12: smoketest.manager.relatedtestcase.v1.GetRelatedTestCasesRequest
	(*GetRelatedTestCasesResponse)(nil),       // 13: smoketest.manager.relatedtestcase.v1.GetRelatedTestCasesResponse
	(*GetRelatedTestCaseOnlyRequest)(nil),     // 14: smoketest.manager.relatedtestcase.v1.GetRelatedTestCaseOnlyRequest
	(*GetRelatedTestCaseOnlyResponse)(nil),    // 15: smoketest.manager.relatedtestcase.v1.GetRelatedTestCaseOnlyResponse
	(*ExistRelatedTestCaseRequest)(nil),       // 16: smoketest.manager.relatedtestcase.v1.ExistRelatedTestCaseRequest
	(*ExistRelatedTestCaseResponse)(nil),      // 17: smoketest.manager.relatedtestcase.v1.ExistRelatedTestCaseResponse
	(*ExistRelatedTestCaseCondsRequest)(nil),  // 18: smoketest.manager.relatedtestcase.v1.ExistRelatedTestCaseCondsRequest
	(*ExistRelatedTestCaseCondsResponse)(nil), // 19: smoketest.manager.relatedtestcase.v1.ExistRelatedTestCaseCondsResponse
	(*CountRelatedTestCasesRequest)(nil),      // 20: smoketest.manager.relatedtestcase.v1.CountRelatedTestCasesRequest
	(*CountRelatedTestCasesResponse)(nil),     // 21: smoketest.manager.relatedtestcase.v1.CountRelatedTestCasesResponse
	(*DeleteRelatedTestCaseRequest)(nil),      // 22: smoketest.manager.relatedtestcase.v1.DeleteRelatedTestCaseRequest
	(*DeleteRelatedTestCaseResponse)(nil),     // 23: smoketest.manager.relatedtestcase.v1.DeleteRelatedTestCaseResponse
	(*npool.StringVal)(nil),                   // 24: npool.v1.StringVal
	(*npool.Int32Val)(nil),                    // 25: npool.v1.Int32Val
}
var file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_depIdxs = []int32{
	0,  // 0: smoketest.manager.relatedtestcase.v1.RelatedTestCaseReq.CondType:type_name -> smoketest.manager.relatedtestcase.v1.CondType
	0,  // 1: smoketest.manager.relatedtestcase.v1.RelatedTestCase.CondType:type_name -> smoketest.manager.relatedtestcase.v1.CondType
	24, // 2: smoketest.manager.relatedtestcase.v1.Conds.ID:type_name -> npool.v1.StringVal
	24, // 3: smoketest.manager.relatedtestcase.v1.Conds.CondType:type_name -> npool.v1.StringVal
	24, // 4: smoketest.manager.relatedtestcase.v1.Conds.TestCaseID:type_name -> npool.v1.StringVal
	24, // 5: smoketest.manager.relatedtestcase.v1.Conds.RelatedTestCaseID:type_name -> npool.v1.StringVal
	25, // 6: smoketest.manager.relatedtestcase.v1.Conds.Index:type_name -> npool.v1.Int32Val
	1,  // 7: smoketest.manager.relatedtestcase.v1.CreateRelatedTestCaseRequest.Info:type_name -> smoketest.manager.relatedtestcase.v1.RelatedTestCaseReq
	2,  // 8: smoketest.manager.relatedtestcase.v1.CreateRelatedTestCaseResponse.Info:type_name -> smoketest.manager.relatedtestcase.v1.RelatedTestCase
	1,  // 9: smoketest.manager.relatedtestcase.v1.CreateRelatedTestCasesRequest.Infos:type_name -> smoketest.manager.relatedtestcase.v1.RelatedTestCaseReq
	2,  // 10: smoketest.manager.relatedtestcase.v1.CreateRelatedTestCasesResponse.Infos:type_name -> smoketest.manager.relatedtestcase.v1.RelatedTestCase
	1,  // 11: smoketest.manager.relatedtestcase.v1.UpdateRelatedTestCaseRequest.Info:type_name -> smoketest.manager.relatedtestcase.v1.RelatedTestCaseReq
	2,  // 12: smoketest.manager.relatedtestcase.v1.UpdateRelatedTestCaseResponse.Info:type_name -> smoketest.manager.relatedtestcase.v1.RelatedTestCase
	2,  // 13: smoketest.manager.relatedtestcase.v1.GetRelatedTestCaseResponse.Info:type_name -> smoketest.manager.relatedtestcase.v1.RelatedTestCase
	3,  // 14: smoketest.manager.relatedtestcase.v1.GetRelatedTestCasesRequest.Conds:type_name -> smoketest.manager.relatedtestcase.v1.Conds
	2,  // 15: smoketest.manager.relatedtestcase.v1.GetRelatedTestCasesResponse.Infos:type_name -> smoketest.manager.relatedtestcase.v1.RelatedTestCase
	3,  // 16: smoketest.manager.relatedtestcase.v1.GetRelatedTestCaseOnlyRequest.Conds:type_name -> smoketest.manager.relatedtestcase.v1.Conds
	2,  // 17: smoketest.manager.relatedtestcase.v1.GetRelatedTestCaseOnlyResponse.Info:type_name -> smoketest.manager.relatedtestcase.v1.RelatedTestCase
	3,  // 18: smoketest.manager.relatedtestcase.v1.ExistRelatedTestCaseCondsRequest.Conds:type_name -> smoketest.manager.relatedtestcase.v1.Conds
	3,  // 19: smoketest.manager.relatedtestcase.v1.CountRelatedTestCasesRequest.Conds:type_name -> smoketest.manager.relatedtestcase.v1.Conds
	2,  // 20: smoketest.manager.relatedtestcase.v1.DeleteRelatedTestCaseResponse.Info:type_name -> smoketest.manager.relatedtestcase.v1.RelatedTestCase
	4,  // 21: smoketest.manager.relatedtestcase.v1.Manager.CreateRelatedTestCase:input_type -> smoketest.manager.relatedtestcase.v1.CreateRelatedTestCaseRequest
	6,  // 22: smoketest.manager.relatedtestcase.v1.Manager.CreateRelatedTestCases:input_type -> smoketest.manager.relatedtestcase.v1.CreateRelatedTestCasesRequest
	8,  // 23: smoketest.manager.relatedtestcase.v1.Manager.UpdateRelatedTestCase:input_type -> smoketest.manager.relatedtestcase.v1.UpdateRelatedTestCaseRequest
	10, // 24: smoketest.manager.relatedtestcase.v1.Manager.GetRelatedTestCase:input_type -> smoketest.manager.relatedtestcase.v1.GetRelatedTestCaseRequest
	14, // 25: smoketest.manager.relatedtestcase.v1.Manager.GetRelatedTestCaseOnly:input_type -> smoketest.manager.relatedtestcase.v1.GetRelatedTestCaseOnlyRequest
	12, // 26: smoketest.manager.relatedtestcase.v1.Manager.GetRelatedTestCases:input_type -> smoketest.manager.relatedtestcase.v1.GetRelatedTestCasesRequest
	16, // 27: smoketest.manager.relatedtestcase.v1.Manager.ExistRelatedTestCase:input_type -> smoketest.manager.relatedtestcase.v1.ExistRelatedTestCaseRequest
	18, // 28: smoketest.manager.relatedtestcase.v1.Manager.ExistRelatedTestCaseConds:input_type -> smoketest.manager.relatedtestcase.v1.ExistRelatedTestCaseCondsRequest
	20, // 29: smoketest.manager.relatedtestcase.v1.Manager.CountRelatedTestCases:input_type -> smoketest.manager.relatedtestcase.v1.CountRelatedTestCasesRequest
	22, // 30: smoketest.manager.relatedtestcase.v1.Manager.DeleteRelatedTestCase:input_type -> smoketest.manager.relatedtestcase.v1.DeleteRelatedTestCaseRequest
	5,  // 31: smoketest.manager.relatedtestcase.v1.Manager.CreateRelatedTestCase:output_type -> smoketest.manager.relatedtestcase.v1.CreateRelatedTestCaseResponse
	7,  // 32: smoketest.manager.relatedtestcase.v1.Manager.CreateRelatedTestCases:output_type -> smoketest.manager.relatedtestcase.v1.CreateRelatedTestCasesResponse
	9,  // 33: smoketest.manager.relatedtestcase.v1.Manager.UpdateRelatedTestCase:output_type -> smoketest.manager.relatedtestcase.v1.UpdateRelatedTestCaseResponse
	11, // 34: smoketest.manager.relatedtestcase.v1.Manager.GetRelatedTestCase:output_type -> smoketest.manager.relatedtestcase.v1.GetRelatedTestCaseResponse
	15, // 35: smoketest.manager.relatedtestcase.v1.Manager.GetRelatedTestCaseOnly:output_type -> smoketest.manager.relatedtestcase.v1.GetRelatedTestCaseOnlyResponse
	13, // 36: smoketest.manager.relatedtestcase.v1.Manager.GetRelatedTestCases:output_type -> smoketest.manager.relatedtestcase.v1.GetRelatedTestCasesResponse
	17, // 37: smoketest.manager.relatedtestcase.v1.Manager.ExistRelatedTestCase:output_type -> smoketest.manager.relatedtestcase.v1.ExistRelatedTestCaseResponse
	19, // 38: smoketest.manager.relatedtestcase.v1.Manager.ExistRelatedTestCaseConds:output_type -> smoketest.manager.relatedtestcase.v1.ExistRelatedTestCaseCondsResponse
	21, // 39: smoketest.manager.relatedtestcase.v1.Manager.CountRelatedTestCases:output_type -> smoketest.manager.relatedtestcase.v1.CountRelatedTestCasesResponse
	23, // 40: smoketest.manager.relatedtestcase.v1.Manager.DeleteRelatedTestCase:output_type -> smoketest.manager.relatedtestcase.v1.DeleteRelatedTestCaseResponse
	31, // [31:41] is the sub-list for method output_type
	21, // [21:31] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_init() }
func file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_init() {
	if File_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelatedTestCaseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelatedTestCase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRelatedTestCaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRelatedTestCaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRelatedTestCasesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRelatedTestCasesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRelatedTestCaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRelatedTestCaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRelatedTestCaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRelatedTestCaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRelatedTestCasesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRelatedTestCasesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRelatedTestCaseOnlyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRelatedTestCaseOnlyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistRelatedTestCaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistRelatedTestCaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistRelatedTestCaseCondsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistRelatedTestCaseCondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountRelatedTestCasesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountRelatedTestCasesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRelatedTestCaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRelatedTestCaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_goTypes,
		DependencyIndexes: file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_depIdxs,
		EnumInfos:         file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_enumTypes,
		MessageInfos:      file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_msgTypes,
	}.Build()
	File_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto = out.File
	file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_rawDesc = nil
	file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_goTypes = nil
	file_npool_smoketest_mgr_v1_relatedtestcase_relatedtestcase_proto_depIdxs = nil
}
