// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: npool/smoketest/mgr/v1/testplan/plantestcase/plantestcase.proto

package plantestcase

import (
	npool "github.com/NpoolPlatform/message/npool"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TestCaseResult int32

const (
	TestCaseResult_DefaultTestCaseResult TestCaseResult = 0
	TestCaseResult_Skipped               TestCaseResult = 10
	TestCaseResult_Passed                TestCaseResult = 20
	TestCaseResult_Failed                TestCaseResult = 30
)

// Enum value maps for TestCaseResult.
var (
	TestCaseResult_name = map[int32]string{
		0:  "DefaultTestCaseResult",
		10: "Skipped",
		20: "Passed",
		30: "Failed",
	}
	TestCaseResult_value = map[string]int32{
		"DefaultTestCaseResult": 0,
		"Skipped":               10,
		"Passed":                20,
		"Failed":                30,
	}
)

func (x TestCaseResult) Enum() *TestCaseResult {
	p := new(TestCaseResult)
	*p = x
	return p
}

func (x TestCaseResult) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestCaseResult) Descriptor() protoreflect.EnumDescriptor {
	return file_npool_smoketest_mgr_v1_testplan_plantestcase_plantestcase_proto_enumTypes[0].Descriptor()
}

func (TestCaseResult) Type() protoreflect.EnumType {
	return &file_npool_smoketest_mgr_v1_testplan_plantestcase_plantestcase_proto_enumTypes[0]
}

func (x TestCaseResult) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestCaseResult.Descriptor instead.
func (TestCaseResult) EnumDescriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_testplan_plantestcase_plantestcase_proto_rawDescGZIP(), []int{0}
}

type PlanTestCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: sql:"id"
	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty" sql:"id"`
	// @inject_tag: sql:"test_plan_id"
	TestPlanID string `protobuf:"bytes,20,opt,name=TestPlanID,proto3" json:"TestPlanID,omitempty" sql:"test_plan_id"`
	// @inject_tag: sql:"test_case_id"
	TestCaseID string `protobuf:"bytes,40,opt,name=TestCaseID,proto3" json:"TestCaseID,omitempty" sql:"test_case_id"`
	// @inject_tag: sql:"test_case_output"
	TestCaseOutput string `protobuf:"bytes,50,opt,name=TestCaseOutput,proto3" json:"TestCaseOutput,omitempty" sql:"test_case_output"`
	// @inject_tag: sql:"description"
	Description string `protobuf:"bytes,60,opt,name=Description,proto3" json:"Description,omitempty" sql:"description"`
	// @inject_tag: sql:"run_duration"
	RunDuration uint32 `protobuf:"varint,70,opt,name=RunDuration,proto3" json:"RunDuration,omitempty" sql:"run_duration"`
	// @inject_tag: sql:"test_user_id"
	TestUserID string `protobuf:"bytes,80,opt,name=TestUserID,proto3" json:"TestUserID,omitempty" sql:"test_user_id"`
	// @inject_tag: sql:"result"
	ResultStr string         `protobuf:"bytes,90,opt,name=ResultStr,proto3" json:"ResultStr,omitempty" sql:"result"`
	Result    TestCaseResult `protobuf:"varint,100,opt,name=Result,proto3,enum=smoketest.manager.testplan.plantestcase.v1.TestCaseResult" json:"Result,omitempty"`
	// @inject_tag: sql:"index"
	Index uint32 `protobuf:"varint,110,opt,name=Index,proto3" json:"Index,omitempty" sql:"index"`
	// @inject_tag: sql:"created_at"
	CreatedAt uint32 `protobuf:"varint,120,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
	// @inject_tag: sql:"updated_at"
	UpdatedAt uint32 `protobuf:"varint,130,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty" sql:"updated_at"`
	// @inject_tag: sql:"deleted_at"
	DeletedAt uint32 `protobuf:"varint,140,opt,name=DeletedAt,proto3" json:"DeletedAt,omitempty" sql:"deleted_at"`
}

func (x *PlanTestCase) Reset() {
	*x = PlanTestCase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_testplan_plantestcase_plantestcase_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanTestCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanTestCase) ProtoMessage() {}

func (x *PlanTestCase) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_testplan_plantestcase_plantestcase_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanTestCase.ProtoReflect.Descriptor instead.
func (*PlanTestCase) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_testplan_plantestcase_plantestcase_proto_rawDescGZIP(), []int{0}
}

func (x *PlanTestCase) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *PlanTestCase) GetTestPlanID() string {
	if x != nil {
		return x.TestPlanID
	}
	return ""
}

func (x *PlanTestCase) GetTestCaseID() string {
	if x != nil {
		return x.TestCaseID
	}
	return ""
}

func (x *PlanTestCase) GetTestCaseOutput() string {
	if x != nil {
		return x.TestCaseOutput
	}
	return ""
}

func (x *PlanTestCase) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PlanTestCase) GetRunDuration() uint32 {
	if x != nil {
		return x.RunDuration
	}
	return 0
}

func (x *PlanTestCase) GetTestUserID() string {
	if x != nil {
		return x.TestUserID
	}
	return ""
}

func (x *PlanTestCase) GetResultStr() string {
	if x != nil {
		return x.ResultStr
	}
	return ""
}

func (x *PlanTestCase) GetResult() TestCaseResult {
	if x != nil {
		return x.Result
	}
	return TestCaseResult_DefaultTestCaseResult
}

func (x *PlanTestCase) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *PlanTestCase) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *PlanTestCase) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *PlanTestCase) GetDeletedAt() uint32 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

type PlanTestCaseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             *string         `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	TestPlanID     *string         `protobuf:"bytes,20,opt,name=TestPlanID,proto3,oneof" json:"TestPlanID,omitempty"`
	TestCaseID     *string         `protobuf:"bytes,30,opt,name=TestCaseID,proto3,oneof" json:"TestCaseID,omitempty"`
	TestCaseOutput *string         `protobuf:"bytes,40,opt,name=TestCaseOutput,proto3,oneof" json:"TestCaseOutput,omitempty"`
	Description    *string         `protobuf:"bytes,50,opt,name=Description,proto3,oneof" json:"Description,omitempty"`
	RunDuration    *uint32         `protobuf:"varint,60,opt,name=RunDuration,proto3,oneof" json:"RunDuration,omitempty"`
	TestUserID     *string         `protobuf:"bytes,70,opt,name=TestUserID,proto3,oneof" json:"TestUserID,omitempty"`
	AppID          *string         `protobuf:"bytes,80,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
	Result         *TestCaseResult `protobuf:"varint,90,opt,name=Result,proto3,enum=smoketest.manager.testplan.plantestcase.v1.TestCaseResult,oneof" json:"Result,omitempty"`
	Index          *uint32         `protobuf:"varint,100,opt,name=Index,proto3,oneof" json:"Index,omitempty"`
}

func (x *PlanTestCaseReq) Reset() {
	*x = PlanTestCaseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_testplan_plantestcase_plantestcase_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlanTestCaseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanTestCaseReq) ProtoMessage() {}

func (x *PlanTestCaseReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_testplan_plantestcase_plantestcase_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanTestCaseReq.ProtoReflect.Descriptor instead.
func (*PlanTestCaseReq) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_testplan_plantestcase_plantestcase_proto_rawDescGZIP(), []int{1}
}

func (x *PlanTestCaseReq) GetID() string {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return ""
}

func (x *PlanTestCaseReq) GetTestPlanID() string {
	if x != nil && x.TestPlanID != nil {
		return *x.TestPlanID
	}
	return ""
}

func (x *PlanTestCaseReq) GetTestCaseID() string {
	if x != nil && x.TestCaseID != nil {
		return *x.TestCaseID
	}
	return ""
}

func (x *PlanTestCaseReq) GetTestCaseOutput() string {
	if x != nil && x.TestCaseOutput != nil {
		return *x.TestCaseOutput
	}
	return ""
}

func (x *PlanTestCaseReq) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *PlanTestCaseReq) GetRunDuration() uint32 {
	if x != nil && x.RunDuration != nil {
		return *x.RunDuration
	}
	return 0
}

func (x *PlanTestCaseReq) GetTestUserID() string {
	if x != nil && x.TestUserID != nil {
		return *x.TestUserID
	}
	return ""
}

func (x *PlanTestCaseReq) GetAppID() string {
	if x != nil && x.AppID != nil {
		return *x.AppID
	}
	return ""
}

func (x *PlanTestCaseReq) GetResult() TestCaseResult {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return TestCaseResult_DefaultTestCaseResult
}

func (x *PlanTestCaseReq) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         *npool.StringVal `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	TestPlanID *npool.StringVal `protobuf:"bytes,20,opt,name=TestPlanID,proto3,oneof" json:"TestPlanID,omitempty"`
	TestUserID *npool.StringVal `protobuf:"bytes,30,opt,name=TestUserID,proto3,oneof" json:"TestUserID,omitempty"`
	Result     *npool.StringVal `protobuf:"bytes,40,opt,name=Result,proto3,oneof" json:"Result,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_testplan_plantestcase_plantestcase_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_testplan_plantestcase_plantestcase_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_testplan_plantestcase_plantestcase_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *npool.StringVal {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetTestPlanID() *npool.StringVal {
	if x != nil {
		return x.TestPlanID
	}
	return nil
}

func (x *Conds) GetTestUserID() *npool.StringVal {
	if x != nil {
		return x.TestUserID
	}
	return nil
}

func (x *Conds) GetResult() *npool.StringVal {
	if x != nil {
		return x.Result
	}
	return nil
}

var File_npool_smoketest_mgr_v1_testplan_plantestcase_plantestcase_proto protoreflect.FileDescriptor

var file_npool_smoketest_mgr_v1_testplan_plantestcase_plantestcase_proto_rawDesc = []byte{
	0x0a, 0x3f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73,
	0x74, 0x2f, 0x6d, 0x67, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61,
	0x6e, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2f, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x2a, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x11, 0x6e,
	0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xce, 0x03, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49,
	0x44, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x52,
	0x75, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x52, 0x75, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x0a, 0x54, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x50, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x72, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x72, 0x12, 0x52, 0x0a, 0x06, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x73, 0x6d,
	0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x8c, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0xa5, 0x04, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x54, 0x65,
	0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12,
	0x23, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0e,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x25, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x52, 0x75, 0x6e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x05, 0x52,
	0x0b, 0x52, 0x75, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x23, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x46, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x50, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12,
	0x57, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3a, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x08, 0x52, 0x06, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x09, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x54,
	0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x52, 0x75, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x54, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x87, 0x02, 0x0a, 0x05, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a,
	0x0a, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x48, 0x02, 0x52, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x30, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x54,
	0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x54, 0x65,
	0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x2a, 0x50, 0x0a, 0x0e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x10, 0x0a, 0x12, 0x0a, 0x0a,
	0x06, 0x50, 0x61, 0x73, 0x73, 0x65, 0x64, 0x10, 0x14, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x10, 0x1e, 0x32, 0x09, 0x0a, 0x07, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x42, 0x4f, 0x5a, 0x4d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e,
	0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x73, 0x6d, 0x6f, 0x6b, 0x65,
	0x74, 0x65, 0x73, 0x74, 0x2f, 0x6d, 0x67, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74,
	0x70, 0x6c, 0x61, 0x6e, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_smoketest_mgr_v1_testplan_plantestcase_plantestcase_proto_rawDescOnce sync.Once
	file_npool_smoketest_mgr_v1_testplan_plantestcase_plantestcase_proto_rawDescData = file_npool_smoketest_mgr_v1_testplan_plantestcase_plantestcase_proto_rawDesc
)

func file_npool_smoketest_mgr_v1_testplan_plantestcase_plantestcase_proto_rawDescGZIP() []byte {
	file_npool_smoketest_mgr_v1_testplan_plantestcase_plantestcase_proto_rawDescOnce.Do(func() {
		file_npool_smoketest_mgr_v1_testplan_plantestcase_plantestcase_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_smoketest_mgr_v1_testplan_plantestcase_plantestcase_proto_rawDescData)
	})
	return file_npool_smoketest_mgr_v1_testplan_plantestcase_plantestcase_proto_rawDescData
}

var file_npool_smoketest_mgr_v1_testplan_plantestcase_plantestcase_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_npool_smoketest_mgr_v1_testplan_plantestcase_plantestcase_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_npool_smoketest_mgr_v1_testplan_plantestcase_plantestcase_proto_goTypes = []interface{}{
	(TestCaseResult)(0),     // 0: smoketest.manager.testplan.plantestcase.v1.TestCaseResult
	(*PlanTestCase)(nil),    // 1: smoketest.manager.testplan.plantestcase.v1.PlanTestCase
	(*PlanTestCaseReq)(nil), // 2: smoketest.manager.testplan.plantestcase.v1.PlanTestCaseReq
	(*Conds)(nil),           // 3: smoketest.manager.testplan.plantestcase.v1.Conds
	(*npool.StringVal)(nil), // 4: npool.v1.StringVal
}
var file_npool_smoketest_mgr_v1_testplan_plantestcase_plantestcase_proto_depIdxs = []int32{
	0, // 0: smoketest.manager.testplan.plantestcase.v1.PlanTestCase.Result:type_name -> smoketest.manager.testplan.plantestcase.v1.TestCaseResult
	0, // 1: smoketest.manager.testplan.plantestcase.v1.PlanTestCaseReq.Result:type_name -> smoketest.manager.testplan.plantestcase.v1.TestCaseResult
	4, // 2: smoketest.manager.testplan.plantestcase.v1.Conds.ID:type_name -> npool.v1.StringVal
	4, // 3: smoketest.manager.testplan.plantestcase.v1.Conds.TestPlanID:type_name -> npool.v1.StringVal
	4, // 4: smoketest.manager.testplan.plantestcase.v1.Conds.TestUserID:type_name -> npool.v1.StringVal
	4, // 5: smoketest.manager.testplan.plantestcase.v1.Conds.Result:type_name -> npool.v1.StringVal
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_npool_smoketest_mgr_v1_testplan_plantestcase_plantestcase_proto_init() }
func file_npool_smoketest_mgr_v1_testplan_plantestcase_plantestcase_proto_init() {
	if File_npool_smoketest_mgr_v1_testplan_plantestcase_plantestcase_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_smoketest_mgr_v1_testplan_plantestcase_plantestcase_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanTestCase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mgr_v1_testplan_plantestcase_plantestcase_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlanTestCaseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mgr_v1_testplan_plantestcase_plantestcase_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_smoketest_mgr_v1_testplan_plantestcase_plantestcase_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_npool_smoketest_mgr_v1_testplan_plantestcase_plantestcase_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_smoketest_mgr_v1_testplan_plantestcase_plantestcase_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_smoketest_mgr_v1_testplan_plantestcase_plantestcase_proto_goTypes,
		DependencyIndexes: file_npool_smoketest_mgr_v1_testplan_plantestcase_plantestcase_proto_depIdxs,
		EnumInfos:         file_npool_smoketest_mgr_v1_testplan_plantestcase_plantestcase_proto_enumTypes,
		MessageInfos:      file_npool_smoketest_mgr_v1_testplan_plantestcase_plantestcase_proto_msgTypes,
	}.Build()
	File_npool_smoketest_mgr_v1_testplan_plantestcase_plantestcase_proto = out.File
	file_npool_smoketest_mgr_v1_testplan_plantestcase_plantestcase_proto_rawDesc = nil
	file_npool_smoketest_mgr_v1_testplan_plantestcase_plantestcase_proto_goTypes = nil
	file_npool_smoketest_mgr_v1_testplan_plantestcase_plantestcase_proto_depIdxs = nil
}
