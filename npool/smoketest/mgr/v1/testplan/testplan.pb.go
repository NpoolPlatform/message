// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.18.1
// source: npool/smoketest/mgr/v1/testplan/testplan.proto

package testplan

import (
	npool "github.com/NpoolPlatform/message/npool"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TestResultState int32

const (
	TestResultState_DefaultTestResultState TestResultState = 0
	TestResultState_Passed                 TestResultState = 10
	TestResultState_Failed                 TestResultState = 20
)

// Enum value maps for TestResultState.
var (
	TestResultState_name = map[int32]string{
		0:  "DefaultTestResultState",
		10: "Passed",
		20: "Failed",
	}
	TestResultState_value = map[string]int32{
		"DefaultTestResultState": 0,
		"Passed":                 10,
		"Failed":                 20,
	}
)

func (x TestResultState) Enum() *TestResultState {
	p := new(TestResultState)
	*p = x
	return p
}

func (x TestResultState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestResultState) Descriptor() protoreflect.EnumDescriptor {
	return file_npool_smoketest_mgr_v1_testplan_testplan_proto_enumTypes[0].Descriptor()
}

func (TestResultState) Type() protoreflect.EnumType {
	return &file_npool_smoketest_mgr_v1_testplan_testplan_proto_enumTypes[0]
}

func (x TestResultState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestResultState.Descriptor instead.
func (TestResultState) EnumDescriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_testplan_testplan_proto_rawDescGZIP(), []int{0}
}

type TestPlanState int32

const (
	TestPlanState_DefaultTestPlanState TestPlanState = 0
	TestPlanState_WaitStart            TestPlanState = 10
	TestPlanState_InProgress           TestPlanState = 20
	TestPlanState_Finished             TestPlanState = 30
	TestPlanState_Overdue              TestPlanState = 40
)

// Enum value maps for TestPlanState.
var (
	TestPlanState_name = map[int32]string{
		0:  "DefaultTestPlanState",
		10: "WaitStart",
		20: "InProgress",
		30: "Finished",
		40: "Overdue",
	}
	TestPlanState_value = map[string]int32{
		"DefaultTestPlanState": 0,
		"WaitStart":            10,
		"InProgress":           20,
		"Finished":             30,
		"Overdue":              40,
	}
)

func (x TestPlanState) Enum() *TestPlanState {
	p := new(TestPlanState)
	*p = x
	return p
}

func (x TestPlanState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestPlanState) Descriptor() protoreflect.EnumDescriptor {
	return file_npool_smoketest_mgr_v1_testplan_testplan_proto_enumTypes[1].Descriptor()
}

func (TestPlanState) Type() protoreflect.EnumType {
	return &file_npool_smoketest_mgr_v1_testplan_testplan_proto_enumTypes[1]
}

func (x TestPlanState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestPlanState.Descriptor instead.
func (TestPlanState) EnumDescriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_testplan_testplan_proto_rawDescGZIP(), []int{1}
}

type TestPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: sql:"id"
	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty" sql:"id"`
	// @inject_tag: sql:"name"
	Name string `protobuf:"bytes,20,opt,name=Name,proto3" json:"Name,omitempty" sql:"name"`
	// @inject_tag: sql:"state"
	State TestPlanState `protobuf:"varint,30,opt,name=State,proto3,enum=smoketest.manager.testplan.v1.TestPlanState" json:"State,omitempty" sql:"state"`
	// @inject_tag: sql:"created_by"
	CreatedBy string `protobuf:"bytes,40,opt,name=CreatedBy,proto3" json:"CreatedBy,omitempty" sql:"created_by"`
	// @inject_tag: sql:"executor"
	Executor string `protobuf:"bytes,50,opt,name=Executor,proto3" json:"Executor,omitempty" sql:"executor"`
	// @inject_tag: sql:"fails"
	Fails uint32 `protobuf:"varint,60,opt,name=Fails,proto3" json:"Fails,omitempty" sql:"fails"`
	// @inject_tag: sql:"passes"
	Passes uint32 `protobuf:"varint,70,opt,name=Passes,proto3" json:"Passes,omitempty" sql:"passes"`
	// @inject_tag: sql:"skips"
	Skips uint32 `protobuf:"varint,80,opt,name=Skips,proto3" json:"Skips,omitempty" sql:"skips"`
	// @inject_tag: sql:"run_duration"
	RunDuration uint32 `protobuf:"varint,90,opt,name=RunDuration,proto3" json:"RunDuration,omitempty" sql:"run_duration"`
	// @inject_tag: sql:"result"
	Result TestResultState `protobuf:"varint,100,opt,name=Result,proto3,enum=smoketest.manager.testplan.v1.TestResultState" json:"Result,omitempty" sql:"result"`
	// @inject_tag: sql:"deadline"
	Deadline uint32 `protobuf:"varint,110,opt,name=Deadline,proto3" json:"Deadline,omitempty" sql:"deadline"`
	// @inject_tag: sql:"created_at"
	CreatedAt uint32 `protobuf:"varint,120,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
	// @inject_tag: sql:"updated_at"
	UpdatedAt uint32 `protobuf:"varint,130,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty" sql:"updated_at"`
	// @inject_tag: sql:"deleted_at"
	DeletedAt uint32 `protobuf:"varint,140,opt,name=DeletedAt,proto3" json:"DeletedAt,omitempty" sql:"deleted_at"`
}

func (x *TestPlan) Reset() {
	*x = TestPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_testplan_testplan_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestPlan) ProtoMessage() {}

func (x *TestPlan) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_testplan_testplan_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestPlan.ProtoReflect.Descriptor instead.
func (*TestPlan) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_testplan_testplan_proto_rawDescGZIP(), []int{0}
}

func (x *TestPlan) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *TestPlan) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestPlan) GetState() TestPlanState {
	if x != nil {
		return x.State
	}
	return TestPlanState_DefaultTestPlanState
}

func (x *TestPlan) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *TestPlan) GetExecutor() string {
	if x != nil {
		return x.Executor
	}
	return ""
}

func (x *TestPlan) GetFails() uint32 {
	if x != nil {
		return x.Fails
	}
	return 0
}

func (x *TestPlan) GetPasses() uint32 {
	if x != nil {
		return x.Passes
	}
	return 0
}

func (x *TestPlan) GetSkips() uint32 {
	if x != nil {
		return x.Skips
	}
	return 0
}

func (x *TestPlan) GetRunDuration() uint32 {
	if x != nil {
		return x.RunDuration
	}
	return 0
}

func (x *TestPlan) GetResult() TestResultState {
	if x != nil {
		return x.Result
	}
	return TestResultState_DefaultTestResultState
}

func (x *TestPlan) GetDeadline() uint32 {
	if x != nil {
		return x.Deadline
	}
	return 0
}

func (x *TestPlan) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *TestPlan) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *TestPlan) GetDeletedAt() uint32 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

type TestPlanReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID          *string          `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	Name        *string          `protobuf:"bytes,20,opt,name=Name,proto3,oneof" json:"Name,omitempty"`
	State       *TestPlanState   `protobuf:"varint,30,opt,name=State,proto3,enum=smoketest.manager.testplan.v1.TestPlanState,oneof" json:"State,omitempty"`
	CreatedBy   *string          `protobuf:"bytes,40,opt,name=CreatedBy,proto3,oneof" json:"CreatedBy,omitempty"`
	Executor    *string          `protobuf:"bytes,50,opt,name=Executor,proto3,oneof" json:"Executor,omitempty"`
	Fails       *uint32          `protobuf:"varint,60,opt,name=Fails,proto3,oneof" json:"Fails,omitempty"`
	Passes      *uint32          `protobuf:"varint,70,opt,name=Passes,proto3,oneof" json:"Passes,omitempty"`
	Skips       *uint32          `protobuf:"varint,80,opt,name=Skips,proto3,oneof" json:"Skips,omitempty"`
	RunDuration *uint32          `protobuf:"varint,90,opt,name=RunDuration,proto3,oneof" json:"RunDuration,omitempty"`
	Result      *TestResultState `protobuf:"varint,100,opt,name=Result,proto3,enum=smoketest.manager.testplan.v1.TestResultState,oneof" json:"Result,omitempty"`
	Deadline    *uint32          `protobuf:"varint,110,opt,name=Deadline,proto3,oneof" json:"Deadline,omitempty"`
}

func (x *TestPlanReq) Reset() {
	*x = TestPlanReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_testplan_testplan_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestPlanReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestPlanReq) ProtoMessage() {}

func (x *TestPlanReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_testplan_testplan_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestPlanReq.ProtoReflect.Descriptor instead.
func (*TestPlanReq) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_testplan_testplan_proto_rawDescGZIP(), []int{1}
}

func (x *TestPlanReq) GetID() string {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return ""
}

func (x *TestPlanReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *TestPlanReq) GetState() TestPlanState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return TestPlanState_DefaultTestPlanState
}

func (x *TestPlanReq) GetCreatedBy() string {
	if x != nil && x.CreatedBy != nil {
		return *x.CreatedBy
	}
	return ""
}

func (x *TestPlanReq) GetExecutor() string {
	if x != nil && x.Executor != nil {
		return *x.Executor
	}
	return ""
}

func (x *TestPlanReq) GetFails() uint32 {
	if x != nil && x.Fails != nil {
		return *x.Fails
	}
	return 0
}

func (x *TestPlanReq) GetPasses() uint32 {
	if x != nil && x.Passes != nil {
		return *x.Passes
	}
	return 0
}

func (x *TestPlanReq) GetSkips() uint32 {
	if x != nil && x.Skips != nil {
		return *x.Skips
	}
	return 0
}

func (x *TestPlanReq) GetRunDuration() uint32 {
	if x != nil && x.RunDuration != nil {
		return *x.RunDuration
	}
	return 0
}

func (x *TestPlanReq) GetResult() TestResultState {
	if x != nil && x.Result != nil {
		return *x.Result
	}
	return TestResultState_DefaultTestResultState
}

func (x *TestPlanReq) GetDeadline() uint32 {
	if x != nil && x.Deadline != nil {
		return *x.Deadline
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        *npool.StringVal `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	State     *npool.StringVal `protobuf:"bytes,20,opt,name=State,proto3,oneof" json:"State,omitempty"`
	CreatedBy *npool.StringVal `protobuf:"bytes,30,opt,name=CreatedBy,proto3,oneof" json:"CreatedBy,omitempty"`
	Executor  *npool.StringVal `protobuf:"bytes,40,opt,name=Executor,proto3,oneof" json:"Executor,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_testplan_testplan_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_testplan_testplan_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_testplan_testplan_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *npool.StringVal {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetState() *npool.StringVal {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *Conds) GetCreatedBy() *npool.StringVal {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *Conds) GetExecutor() *npool.StringVal {
	if x != nil {
		return x.Executor
	}
	return nil
}

var File_npool_smoketest_mgr_v1_testplan_testplan_proto protoreflect.FileDescriptor

var file_npool_smoketest_mgr_v1_testplan_testplan_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73,
	0x74, 0x2f, 0x6d, 0x67, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61,
	0x6e, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1d, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x1a,
	0x11, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xd2, 0x03, 0x0a, 0x08, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f,
	0x72, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x46, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x46, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x50, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x53, 0x6b, 0x69, 0x70, 0x73, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x53, 0x6b, 0x69, 0x70, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x75, 0x6e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x52, 0x75, 0x6e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x6e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xac, 0x04, 0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x48, 0x02, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21,
	0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x08, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x46, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x05, 0x52, 0x05, 0x46, 0x61, 0x69, 0x6c, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a,
	0x06, 0x50, 0x61, 0x73, 0x73, 0x65, 0x73, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x06, 0x52,
	0x06, 0x50, 0x61, 0x73, 0x73, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x53, 0x6b,
	0x69, 0x70, 0x73, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x07, 0x52, 0x05, 0x53, 0x6b, 0x69,
	0x70, 0x73, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x52, 0x75, 0x6e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x08, 0x52, 0x0b, 0x52, 0x75,
	0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x06,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x73,
	0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x09, 0x52, 0x06,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x44, 0x65, 0x61,
	0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0a, 0x52, 0x08, 0x44,
	0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49,
	0x44, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x46, 0x61, 0x69, 0x6c, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x50, 0x61,
	0x73, 0x73, 0x65, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x53, 0x6b, 0x69, 0x70, 0x73, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x52, 0x75, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x44, 0x65,
	0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0xfb, 0x01, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x28, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x01,
	0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x48, 0x02, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x34, 0x0a, 0x08, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x6f, 0x72, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x08, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x6f, 0x72, 0x2a, 0x45, 0x0a, 0x0f, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x61, 0x73, 0x73, 0x65, 0x64, 0x10, 0x0a, 0x12,
	0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x14, 0x2a, 0x63, 0x0a, 0x0d, 0x54,
	0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x14,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x61, 0x69, 0x74, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x10, 0x14, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x10, 0x1e, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x76, 0x65, 0x72, 0x64, 0x75, 0x65, 0x10, 0x28,
	0x32, 0x09, 0x0a, 0x07, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x42, 0x42, 0x5a, 0x40, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f,
	0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2f,
	0x6d, 0x67, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_smoketest_mgr_v1_testplan_testplan_proto_rawDescOnce sync.Once
	file_npool_smoketest_mgr_v1_testplan_testplan_proto_rawDescData = file_npool_smoketest_mgr_v1_testplan_testplan_proto_rawDesc
)

func file_npool_smoketest_mgr_v1_testplan_testplan_proto_rawDescGZIP() []byte {
	file_npool_smoketest_mgr_v1_testplan_testplan_proto_rawDescOnce.Do(func() {
		file_npool_smoketest_mgr_v1_testplan_testplan_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_smoketest_mgr_v1_testplan_testplan_proto_rawDescData)
	})
	return file_npool_smoketest_mgr_v1_testplan_testplan_proto_rawDescData
}

var file_npool_smoketest_mgr_v1_testplan_testplan_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_npool_smoketest_mgr_v1_testplan_testplan_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_npool_smoketest_mgr_v1_testplan_testplan_proto_goTypes = []interface{}{
	(TestResultState)(0),    // 0: smoketest.manager.testplan.v1.TestResultState
	(TestPlanState)(0),      // 1: smoketest.manager.testplan.v1.TestPlanState
	(*TestPlan)(nil),        // 2: smoketest.manager.testplan.v1.TestPlan
	(*TestPlanReq)(nil),     // 3: smoketest.manager.testplan.v1.TestPlanReq
	(*Conds)(nil),           // 4: smoketest.manager.testplan.v1.Conds
	(*npool.StringVal)(nil), // 5: npool.v1.StringVal
}
var file_npool_smoketest_mgr_v1_testplan_testplan_proto_depIdxs = []int32{
	1, // 0: smoketest.manager.testplan.v1.TestPlan.State:type_name -> smoketest.manager.testplan.v1.TestPlanState
	0, // 1: smoketest.manager.testplan.v1.TestPlan.Result:type_name -> smoketest.manager.testplan.v1.TestResultState
	1, // 2: smoketest.manager.testplan.v1.TestPlanReq.State:type_name -> smoketest.manager.testplan.v1.TestPlanState
	0, // 3: smoketest.manager.testplan.v1.TestPlanReq.Result:type_name -> smoketest.manager.testplan.v1.TestResultState
	5, // 4: smoketest.manager.testplan.v1.Conds.ID:type_name -> npool.v1.StringVal
	5, // 5: smoketest.manager.testplan.v1.Conds.State:type_name -> npool.v1.StringVal
	5, // 6: smoketest.manager.testplan.v1.Conds.CreatedBy:type_name -> npool.v1.StringVal
	5, // 7: smoketest.manager.testplan.v1.Conds.Executor:type_name -> npool.v1.StringVal
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_npool_smoketest_mgr_v1_testplan_testplan_proto_init() }
func file_npool_smoketest_mgr_v1_testplan_testplan_proto_init() {
	if File_npool_smoketest_mgr_v1_testplan_testplan_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_smoketest_mgr_v1_testplan_testplan_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mgr_v1_testplan_testplan_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestPlanReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mgr_v1_testplan_testplan_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_smoketest_mgr_v1_testplan_testplan_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_npool_smoketest_mgr_v1_testplan_testplan_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_smoketest_mgr_v1_testplan_testplan_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_smoketest_mgr_v1_testplan_testplan_proto_goTypes,
		DependencyIndexes: file_npool_smoketest_mgr_v1_testplan_testplan_proto_depIdxs,
		EnumInfos:         file_npool_smoketest_mgr_v1_testplan_testplan_proto_enumTypes,
		MessageInfos:      file_npool_smoketest_mgr_v1_testplan_testplan_proto_msgTypes,
	}.Build()
	File_npool_smoketest_mgr_v1_testplan_testplan_proto = out.File
	file_npool_smoketest_mgr_v1_testplan_testplan_proto_rawDesc = nil
	file_npool_smoketest_mgr_v1_testplan_testplan_proto_goTypes = nil
	file_npool_smoketest_mgr_v1_testplan_testplan_proto_depIdxs = nil
}
