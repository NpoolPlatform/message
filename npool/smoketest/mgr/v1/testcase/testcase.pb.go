// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.18.1
// source: npool/smoketest/mgr/v1/testcase/testcase.proto

package testcase

import (
	npool "github.com/NpoolPlatform/message/npool"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TestCaseType int32

const (
	TestCaseType_DefaultTestCaseType TestCaseType = 0
	TestCaseType_Manual              TestCaseType = 10
	TestCaseType_Automatic           TestCaseType = 20
)

// Enum value maps for TestCaseType.
var (
	TestCaseType_name = map[int32]string{
		0:  "DefaultTestCaseType",
		10: "Manual",
		20: "Automatic",
	}
	TestCaseType_value = map[string]int32{
		"DefaultTestCaseType": 0,
		"Manual":              10,
		"Automatic":           20,
	}
)

func (x TestCaseType) Enum() *TestCaseType {
	p := new(TestCaseType)
	*p = x
	return p
}

func (x TestCaseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestCaseType) Descriptor() protoreflect.EnumDescriptor {
	return file_npool_smoketest_mgr_v1_testcase_testcase_proto_enumTypes[0].Descriptor()
}

func (TestCaseType) Type() protoreflect.EnumType {
	return &file_npool_smoketest_mgr_v1_testcase_testcase_proto_enumTypes[0]
}

func (x TestCaseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestCaseType.Descriptor instead.
func (TestCaseType) EnumDescriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_testcase_testcase_proto_rawDescGZIP(), []int{0}
}

type TestCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           string       `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	Name         string       `protobuf:"bytes,20,opt,name=Name,proto3" json:"Name,omitempty"`
	Description  string       `protobuf:"bytes,30,opt,name=Description,proto3" json:"Description,omitempty"`
	ModuleID     string       `protobuf:"bytes,40,opt,name=ModuleID,proto3" json:"ModuleID,omitempty"`
	ApiID        string       `protobuf:"bytes,50,opt,name=ApiID,proto3" json:"ApiID,omitempty"`
	Input        string       `protobuf:"bytes,60,opt,name=Input,proto3" json:"Input,omitempty"`
	InputDesc    string       `protobuf:"bytes,70,opt,name=InputDesc,proto3" json:"InputDesc,omitempty"`
	Expectation  string       `protobuf:"bytes,80,opt,name=Expectation,proto3" json:"Expectation,omitempty"`
	TestCaseType TestCaseType `protobuf:"varint,90,opt,name=TestCaseType,proto3,enum=smoketest.manager.testcase.v1.TestCaseType" json:"TestCaseType,omitempty"`
	Deprecated   bool         `protobuf:"varint,100,opt,name=Deprecated,proto3" json:"Deprecated,omitempty"`
	CreatedAt    uint32       `protobuf:"varint,110,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt    uint32       `protobuf:"varint,120,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
	DeletedAt    uint32       `protobuf:"varint,130,opt,name=DeletedAt,proto3" json:"DeletedAt,omitempty"`
}

func (x *TestCase) Reset() {
	*x = TestCase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_testcase_testcase_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCase) ProtoMessage() {}

func (x *TestCase) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_testcase_testcase_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCase.ProtoReflect.Descriptor instead.
func (*TestCase) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_testcase_testcase_proto_rawDescGZIP(), []int{0}
}

func (x *TestCase) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *TestCase) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestCase) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TestCase) GetModuleID() string {
	if x != nil {
		return x.ModuleID
	}
	return ""
}

func (x *TestCase) GetApiID() string {
	if x != nil {
		return x.ApiID
	}
	return ""
}

func (x *TestCase) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

func (x *TestCase) GetInputDesc() string {
	if x != nil {
		return x.InputDesc
	}
	return ""
}

func (x *TestCase) GetExpectation() string {
	if x != nil {
		return x.Expectation
	}
	return ""
}

func (x *TestCase) GetTestCaseType() TestCaseType {
	if x != nil {
		return x.TestCaseType
	}
	return TestCaseType_DefaultTestCaseType
}

func (x *TestCase) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *TestCase) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *TestCase) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *TestCase) GetDeletedAt() uint32 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

type TestCaseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           *string       `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	Name         *string       `protobuf:"bytes,20,opt,name=Name,proto3,oneof" json:"Name,omitempty"`
	Description  *string       `protobuf:"bytes,30,opt,name=Description,proto3,oneof" json:"Description,omitempty"`
	ModuleID     *string       `protobuf:"bytes,40,opt,name=ModuleID,proto3,oneof" json:"ModuleID,omitempty"`
	ApiID        *string       `protobuf:"bytes,50,opt,name=ApiID,proto3,oneof" json:"ApiID,omitempty"`
	Input        *string       `protobuf:"bytes,60,opt,name=Input,proto3,oneof" json:"Input,omitempty"`
	InputDesc    *string       `protobuf:"bytes,70,opt,name=InputDesc,proto3,oneof" json:"InputDesc,omitempty"`
	Expectation  *string       `protobuf:"bytes,80,opt,name=Expectation,proto3,oneof" json:"Expectation,omitempty"`
	TestCaseType *TestCaseType `protobuf:"varint,90,opt,name=TestCaseType,proto3,enum=smoketest.manager.testcase.v1.TestCaseType,oneof" json:"TestCaseType,omitempty"`
	Deprecated   *bool         `protobuf:"varint,100,opt,name=Deprecated,proto3,oneof" json:"Deprecated,omitempty"`
}

func (x *TestCaseReq) Reset() {
	*x = TestCaseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_testcase_testcase_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCaseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCaseReq) ProtoMessage() {}

func (x *TestCaseReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_testcase_testcase_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCaseReq.ProtoReflect.Descriptor instead.
func (*TestCaseReq) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_testcase_testcase_proto_rawDescGZIP(), []int{1}
}

func (x *TestCaseReq) GetID() string {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return ""
}

func (x *TestCaseReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *TestCaseReq) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *TestCaseReq) GetModuleID() string {
	if x != nil && x.ModuleID != nil {
		return *x.ModuleID
	}
	return ""
}

func (x *TestCaseReq) GetApiID() string {
	if x != nil && x.ApiID != nil {
		return *x.ApiID
	}
	return ""
}

func (x *TestCaseReq) GetInput() string {
	if x != nil && x.Input != nil {
		return *x.Input
	}
	return ""
}

func (x *TestCaseReq) GetInputDesc() string {
	if x != nil && x.InputDesc != nil {
		return *x.InputDesc
	}
	return ""
}

func (x *TestCaseReq) GetExpectation() string {
	if x != nil && x.Expectation != nil {
		return *x.Expectation
	}
	return ""
}

func (x *TestCaseReq) GetTestCaseType() TestCaseType {
	if x != nil && x.TestCaseType != nil {
		return *x.TestCaseType
	}
	return TestCaseType_DefaultTestCaseType
}

func (x *TestCaseReq) GetDeprecated() bool {
	if x != nil && x.Deprecated != nil {
		return *x.Deprecated
	}
	return false
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           *npool.StringVal      `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	ModuleID     *npool.StringVal      `protobuf:"bytes,20,opt,name=ModuleID,proto3,oneof" json:"ModuleID,omitempty"`
	ApiID        *npool.StringVal      `protobuf:"bytes,30,opt,name=ApiID,proto3,oneof" json:"ApiID,omitempty"`
	TestCaseType *npool.StringVal      `protobuf:"bytes,40,opt,name=TestCaseType,proto3,oneof" json:"TestCaseType,omitempty"`
	Deprecated   *npool.BoolVal        `protobuf:"bytes,50,opt,name=Deprecated,proto3,oneof" json:"Deprecated,omitempty"`
	IDs          *npool.StringSliceVal `protobuf:"bytes,60,opt,name=IDs,proto3,oneof" json:"IDs,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mgr_v1_testcase_testcase_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mgr_v1_testcase_testcase_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mgr_v1_testcase_testcase_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *npool.StringVal {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetModuleID() *npool.StringVal {
	if x != nil {
		return x.ModuleID
	}
	return nil
}

func (x *Conds) GetApiID() *npool.StringVal {
	if x != nil {
		return x.ApiID
	}
	return nil
}

func (x *Conds) GetTestCaseType() *npool.StringVal {
	if x != nil {
		return x.TestCaseType
	}
	return nil
}

func (x *Conds) GetDeprecated() *npool.BoolVal {
	if x != nil {
		return x.Deprecated
	}
	return nil
}

func (x *Conds) GetIDs() *npool.StringSliceVal {
	if x != nil {
		return x.IDs
	}
	return nil
}

var File_npool_smoketest_mgr_v1_testcase_testcase_proto protoreflect.FileDescriptor

var file_npool_smoketest_mgr_v1_testcase_testcase_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73,
	0x74, 0x2f, 0x6d, 0x67, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73,
	0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1d, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x1a,
	0x11, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xa4, 0x03, 0x0a, 0x08, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49,
	0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49,
	0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x69, 0x49, 0x44, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x41, 0x70, 0x69, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x65, 0x73, 0x63, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x65, 0x73, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x45,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a,
	0x0c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x5a, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x09, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xfd, 0x03, 0x0a, 0x0b, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f,
	0x0a, 0x08, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x08, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x41, 0x70, 0x69, 0x49, 0x44, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x05, 0x41, 0x70, 0x69, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x05, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x65,
	0x73, 0x63, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x09, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x44, 0x65, 0x73, 0x63, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x45, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52,
	0x0b, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x54, 0x0a, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x5a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x08, 0x52, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x08, 0x48, 0x09, 0x52, 0x0a, 0x44, 0x65, 0x70,
	0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49,
	0x44, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x41, 0x70, 0x69, 0x49,
	0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x65, 0x73, 0x63, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x45, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x44,
	0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x22, 0x84, 0x03, 0x0a, 0x05, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a,
	0x08, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x48, 0x01, 0x52, 0x08, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44,
	0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x05, 0x41, 0x70, 0x69, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x02, 0x52, 0x05, 0x41, 0x70, 0x69, 0x49, 0x44,
	0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x03,
	0x52, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x36, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x48, 0x04, 0x52, 0x0a, 0x44, 0x65, 0x70, 0x72,
	0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x03, 0x49, 0x44, 0x73,
	0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x56, 0x61, 0x6c,
	0x48, 0x05, 0x52, 0x03, 0x49, 0x44, 0x73, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49,
	0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x41, 0x70, 0x69, 0x49, 0x44, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x44, 0x65,
	0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x49, 0x44, 0x73,
	0x2a, 0x42, 0x0a, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x17, 0x0a, 0x13, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x61, 0x6e,
	0x75, 0x61, 0x6c, 0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74,
	0x69, 0x63, 0x10, 0x14, 0x32, 0x09, 0x0a, 0x07, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x42,
	0x42, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70,
	0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74,
	0x65, 0x73, 0x74, 0x2f, 0x6d, 0x67, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x63,
	0x61, 0x73, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_smoketest_mgr_v1_testcase_testcase_proto_rawDescOnce sync.Once
	file_npool_smoketest_mgr_v1_testcase_testcase_proto_rawDescData = file_npool_smoketest_mgr_v1_testcase_testcase_proto_rawDesc
)

func file_npool_smoketest_mgr_v1_testcase_testcase_proto_rawDescGZIP() []byte {
	file_npool_smoketest_mgr_v1_testcase_testcase_proto_rawDescOnce.Do(func() {
		file_npool_smoketest_mgr_v1_testcase_testcase_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_smoketest_mgr_v1_testcase_testcase_proto_rawDescData)
	})
	return file_npool_smoketest_mgr_v1_testcase_testcase_proto_rawDescData
}

var file_npool_smoketest_mgr_v1_testcase_testcase_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_npool_smoketest_mgr_v1_testcase_testcase_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_npool_smoketest_mgr_v1_testcase_testcase_proto_goTypes = []interface{}{
	(TestCaseType)(0),            // 0: smoketest.manager.testcase.v1.TestCaseType
	(*TestCase)(nil),             // 1: smoketest.manager.testcase.v1.TestCase
	(*TestCaseReq)(nil),          // 2: smoketest.manager.testcase.v1.TestCaseReq
	(*Conds)(nil),                // 3: smoketest.manager.testcase.v1.Conds
	(*npool.StringVal)(nil),      // 4: npool.v1.StringVal
	(*npool.BoolVal)(nil),        // 5: npool.v1.BoolVal
	(*npool.StringSliceVal)(nil), // 6: npool.v1.StringSliceVal
}
var file_npool_smoketest_mgr_v1_testcase_testcase_proto_depIdxs = []int32{
	0, // 0: smoketest.manager.testcase.v1.TestCase.TestCaseType:type_name -> smoketest.manager.testcase.v1.TestCaseType
	0, // 1: smoketest.manager.testcase.v1.TestCaseReq.TestCaseType:type_name -> smoketest.manager.testcase.v1.TestCaseType
	4, // 2: smoketest.manager.testcase.v1.Conds.ID:type_name -> npool.v1.StringVal
	4, // 3: smoketest.manager.testcase.v1.Conds.ModuleID:type_name -> npool.v1.StringVal
	4, // 4: smoketest.manager.testcase.v1.Conds.ApiID:type_name -> npool.v1.StringVal
	4, // 5: smoketest.manager.testcase.v1.Conds.TestCaseType:type_name -> npool.v1.StringVal
	5, // 6: smoketest.manager.testcase.v1.Conds.Deprecated:type_name -> npool.v1.BoolVal
	6, // 7: smoketest.manager.testcase.v1.Conds.IDs:type_name -> npool.v1.StringSliceVal
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_npool_smoketest_mgr_v1_testcase_testcase_proto_init() }
func file_npool_smoketest_mgr_v1_testcase_testcase_proto_init() {
	if File_npool_smoketest_mgr_v1_testcase_testcase_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_smoketest_mgr_v1_testcase_testcase_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mgr_v1_testcase_testcase_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCaseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mgr_v1_testcase_testcase_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_smoketest_mgr_v1_testcase_testcase_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_npool_smoketest_mgr_v1_testcase_testcase_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_smoketest_mgr_v1_testcase_testcase_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_smoketest_mgr_v1_testcase_testcase_proto_goTypes,
		DependencyIndexes: file_npool_smoketest_mgr_v1_testcase_testcase_proto_depIdxs,
		EnumInfos:         file_npool_smoketest_mgr_v1_testcase_testcase_proto_enumTypes,
		MessageInfos:      file_npool_smoketest_mgr_v1_testcase_testcase_proto_msgTypes,
	}.Build()
	File_npool_smoketest_mgr_v1_testcase_testcase_proto = out.File
	file_npool_smoketest_mgr_v1_testcase_testcase_proto_rawDesc = nil
	file_npool_smoketest_mgr_v1_testcase_testcase_proto_goTypes = nil
	file_npool_smoketest_mgr_v1_testcase_testcase_proto_depIdxs = nil
}
