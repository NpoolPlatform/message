syntax = "proto3";

package smoketest.middleware.relatedtestcase.v1;

option go_package = "github.com/NpoolPlatform/message/npool/smoketest/mw/v1/relatedtestcase";

import "npool/npool.proto";

// Service Name
service Middleware {
    rpc CreateRelatedTestCase     (CreateRelatedTestCaseRequest)     returns (CreateRelatedTestCaseResponse)     {}
    rpc CreateRelatedTestCases    (CreateRelatedTestCasesRequest)    returns (CreateRelatedTestCasesResponse)    {}
    rpc UpdateRelatedTestCase     (UpdateRelatedTestCaseRequest)     returns (UpdateRelatedTestCaseResponse)     {}
    rpc GetRelatedTestCase        (GetRelatedTestCaseRequest)        returns (GetRelatedTestCaseResponse)        {}
    rpc GetRelatedTestCaseOnly    (GetRelatedTestCaseOnlyRequest)    returns (GetRelatedTestCaseOnlyResponse)    {}
    rpc GetRelatedTestCases       (GetRelatedTestCasesRequest)       returns (GetRelatedTestCasesResponse)       {}
    rpc ExistRelatedTestCase      (ExistRelatedTestCaseRequest)      returns (ExistRelatedTestCaseResponse)      {}
    rpc ExistRelatedTestCaseConds (ExistRelatedTestCaseCondsRequest) returns (ExistRelatedTestCaseCondsResponse) {}
    rpc CountRelatedTestCases     (CountRelatedTestCasesRequest)     returns (CountRelatedTestCasesResponse)     {}
    rpc DeleteRelatedTestCase     (DeleteRelatedTestCaseRequest)     returns (DeleteRelatedTestCaseResponse)     {}
}

message RelatedTestCaseReq {
    optional string   ID                                         = 10;
    optional CondType CondType                                   = 20;
    optional string   TestCaseID                                 = 30;
    optional string   RelatedTestCaseID                          = 40;
    optional uint32   Index                                      = 60;
    optional uint32   CreatedAt                                  = 70;
}

message RelatedTestCase {
  // @inject_tag: sql:"id"
    string          ID                                = 10;
    // @inject_tag: sql:"cond_type"
    CondType        CondType                          = 20; //条件类型:前置条件|后置条件
    // @inject_tag: sql:"test_case_id"
    string          TestCaseID                        = 30;
    // @inject_tag: sql:"related_test_case_id"
    string          RelatedTestCaseID                 = 40;
    // @inject_tag: sql:"index"
    uint32          Index                             = 60;
    // @inject_tag: sql:"created_at"
    uint32          CreatedAt                         = 70;
}

message Conds {
    optional npool.v1.StringVal      ID                = 10;
    optional npool.v1.StringVal      CondType          = 20;
    optional npool.v1.StringVal      TestCaseID        = 30;
    optional npool.v1.StringVal      RelatedTestCaseID = 40;
    optional npool.v1.Int32Val       Index             = 50;
}

enum CondType {
    DefaultCondType         = 0;
    PreCondition             = 10;
    Cleaner                  = 20;
}

message CreateRelatedTestCaseRequest {
    RelatedTestCaseReq Info = 10;
}

message CreateRelatedTestCaseResponse {
    RelatedTestCase Info = 10;
}

message CreateRelatedTestCasesRequest {
    repeated RelatedTestCaseReq Infos = 10;
}

message CreateRelatedTestCasesResponse {
    repeated RelatedTestCase Infos = 10;
}

message UpdateRelatedTestCaseRequest {
    RelatedTestCaseReq Info = 10;
}

message UpdateRelatedTestCaseResponse {
    RelatedTestCase Info = 10;
}

message GetRelatedTestCaseRequest {
    string ID = 10;
}

message GetRelatedTestCaseResponse {
    RelatedTestCase Info = 10;
}

message GetRelatedTestCasesRequest {
    Conds Conds   = 10;
    int32 Offset  = 20;
    int32 Limit   = 30;
}

message GetRelatedTestCasesResponse {
    repeated RelatedTestCase Infos = 10;
    uint32           Total = 20;
}

message GetRelatedTestCaseOnlyRequest {
    Conds Conds = 10;
}

message GetRelatedTestCaseOnlyResponse {
    RelatedTestCase Info = 10;
}

message ExistRelatedTestCaseRequest {
    string ID = 10;
}

message ExistRelatedTestCaseResponse {
    bool Info = 10;
}

message ExistRelatedTestCaseCondsRequest {
    Conds Conds = 10;
}

message ExistRelatedTestCaseCondsResponse {
    bool Info = 10;
}

message CountRelatedTestCasesRequest {
    Conds Conds = 10;
}

message CountRelatedTestCasesResponse {
    uint32 Info = 10;
}

message DeleteRelatedTestCaseRequest {
    string ID = 10;
}

message DeleteRelatedTestCaseResponse {
    RelatedTestCase Info = 10;
}
