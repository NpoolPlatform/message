// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: npool/smoketest/mw/v1/relatedtestcase/relatedtestcase.proto

package relatedtestcase

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
	CreateRelatedTestCase(ctx context.Context, in *CreateRelatedTestCaseRequest, opts ...grpc.CallOption) (*CreateRelatedTestCaseResponse, error)
	CreateRelatedTestCases(ctx context.Context, in *CreateRelatedTestCasesRequest, opts ...grpc.CallOption) (*CreateRelatedTestCasesResponse, error)
	UpdateRelatedTestCase(ctx context.Context, in *UpdateRelatedTestCaseRequest, opts ...grpc.CallOption) (*UpdateRelatedTestCaseResponse, error)
	GetRelatedTestCase(ctx context.Context, in *GetRelatedTestCaseRequest, opts ...grpc.CallOption) (*GetRelatedTestCaseResponse, error)
	GetRelatedTestCaseOnly(ctx context.Context, in *GetRelatedTestCaseOnlyRequest, opts ...grpc.CallOption) (*GetRelatedTestCaseOnlyResponse, error)
	GetRelatedTestCases(ctx context.Context, in *GetRelatedTestCasesRequest, opts ...grpc.CallOption) (*GetRelatedTestCasesResponse, error)
	ExistRelatedTestCase(ctx context.Context, in *ExistRelatedTestCaseRequest, opts ...grpc.CallOption) (*ExistRelatedTestCaseResponse, error)
	ExistRelatedTestCaseConds(ctx context.Context, in *ExistRelatedTestCaseCondsRequest, opts ...grpc.CallOption) (*ExistRelatedTestCaseCondsResponse, error)
	CountRelatedTestCases(ctx context.Context, in *CountRelatedTestCasesRequest, opts ...grpc.CallOption) (*CountRelatedTestCasesResponse, error)
	DeleteRelatedTestCase(ctx context.Context, in *DeleteRelatedTestCaseRequest, opts ...grpc.CallOption) (*DeleteRelatedTestCaseResponse, error)
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) CreateRelatedTestCase(ctx context.Context, in *CreateRelatedTestCaseRequest, opts ...grpc.CallOption) (*CreateRelatedTestCaseResponse, error) {
	out := new(CreateRelatedTestCaseResponse)
	err := c.cc.Invoke(ctx, "/smoketest.middleware.relatedtestcase.v1.Middleware/CreateRelatedTestCase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) CreateRelatedTestCases(ctx context.Context, in *CreateRelatedTestCasesRequest, opts ...grpc.CallOption) (*CreateRelatedTestCasesResponse, error) {
	out := new(CreateRelatedTestCasesResponse)
	err := c.cc.Invoke(ctx, "/smoketest.middleware.relatedtestcase.v1.Middleware/CreateRelatedTestCases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) UpdateRelatedTestCase(ctx context.Context, in *UpdateRelatedTestCaseRequest, opts ...grpc.CallOption) (*UpdateRelatedTestCaseResponse, error) {
	out := new(UpdateRelatedTestCaseResponse)
	err := c.cc.Invoke(ctx, "/smoketest.middleware.relatedtestcase.v1.Middleware/UpdateRelatedTestCase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetRelatedTestCase(ctx context.Context, in *GetRelatedTestCaseRequest, opts ...grpc.CallOption) (*GetRelatedTestCaseResponse, error) {
	out := new(GetRelatedTestCaseResponse)
	err := c.cc.Invoke(ctx, "/smoketest.middleware.relatedtestcase.v1.Middleware/GetRelatedTestCase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetRelatedTestCaseOnly(ctx context.Context, in *GetRelatedTestCaseOnlyRequest, opts ...grpc.CallOption) (*GetRelatedTestCaseOnlyResponse, error) {
	out := new(GetRelatedTestCaseOnlyResponse)
	err := c.cc.Invoke(ctx, "/smoketest.middleware.relatedtestcase.v1.Middleware/GetRelatedTestCaseOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetRelatedTestCases(ctx context.Context, in *GetRelatedTestCasesRequest, opts ...grpc.CallOption) (*GetRelatedTestCasesResponse, error) {
	out := new(GetRelatedTestCasesResponse)
	err := c.cc.Invoke(ctx, "/smoketest.middleware.relatedtestcase.v1.Middleware/GetRelatedTestCases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ExistRelatedTestCase(ctx context.Context, in *ExistRelatedTestCaseRequest, opts ...grpc.CallOption) (*ExistRelatedTestCaseResponse, error) {
	out := new(ExistRelatedTestCaseResponse)
	err := c.cc.Invoke(ctx, "/smoketest.middleware.relatedtestcase.v1.Middleware/ExistRelatedTestCase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) ExistRelatedTestCaseConds(ctx context.Context, in *ExistRelatedTestCaseCondsRequest, opts ...grpc.CallOption) (*ExistRelatedTestCaseCondsResponse, error) {
	out := new(ExistRelatedTestCaseCondsResponse)
	err := c.cc.Invoke(ctx, "/smoketest.middleware.relatedtestcase.v1.Middleware/ExistRelatedTestCaseConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) CountRelatedTestCases(ctx context.Context, in *CountRelatedTestCasesRequest, opts ...grpc.CallOption) (*CountRelatedTestCasesResponse, error) {
	out := new(CountRelatedTestCasesResponse)
	err := c.cc.Invoke(ctx, "/smoketest.middleware.relatedtestcase.v1.Middleware/CountRelatedTestCases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) DeleteRelatedTestCase(ctx context.Context, in *DeleteRelatedTestCaseRequest, opts ...grpc.CallOption) (*DeleteRelatedTestCaseResponse, error) {
	out := new(DeleteRelatedTestCaseResponse)
	err := c.cc.Invoke(ctx, "/smoketest.middleware.relatedtestcase.v1.Middleware/DeleteRelatedTestCase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
	CreateRelatedTestCase(context.Context, *CreateRelatedTestCaseRequest) (*CreateRelatedTestCaseResponse, error)
	CreateRelatedTestCases(context.Context, *CreateRelatedTestCasesRequest) (*CreateRelatedTestCasesResponse, error)
	UpdateRelatedTestCase(context.Context, *UpdateRelatedTestCaseRequest) (*UpdateRelatedTestCaseResponse, error)
	GetRelatedTestCase(context.Context, *GetRelatedTestCaseRequest) (*GetRelatedTestCaseResponse, error)
	GetRelatedTestCaseOnly(context.Context, *GetRelatedTestCaseOnlyRequest) (*GetRelatedTestCaseOnlyResponse, error)
	GetRelatedTestCases(context.Context, *GetRelatedTestCasesRequest) (*GetRelatedTestCasesResponse, error)
	ExistRelatedTestCase(context.Context, *ExistRelatedTestCaseRequest) (*ExistRelatedTestCaseResponse, error)
	ExistRelatedTestCaseConds(context.Context, *ExistRelatedTestCaseCondsRequest) (*ExistRelatedTestCaseCondsResponse, error)
	CountRelatedTestCases(context.Context, *CountRelatedTestCasesRequest) (*CountRelatedTestCasesResponse, error)
	DeleteRelatedTestCase(context.Context, *DeleteRelatedTestCaseRequest) (*DeleteRelatedTestCaseResponse, error)
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) CreateRelatedTestCase(context.Context, *CreateRelatedTestCaseRequest) (*CreateRelatedTestCaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRelatedTestCase not implemented")
}
func (UnimplementedMiddlewareServer) CreateRelatedTestCases(context.Context, *CreateRelatedTestCasesRequest) (*CreateRelatedTestCasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRelatedTestCases not implemented")
}
func (UnimplementedMiddlewareServer) UpdateRelatedTestCase(context.Context, *UpdateRelatedTestCaseRequest) (*UpdateRelatedTestCaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRelatedTestCase not implemented")
}
func (UnimplementedMiddlewareServer) GetRelatedTestCase(context.Context, *GetRelatedTestCaseRequest) (*GetRelatedTestCaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelatedTestCase not implemented")
}
func (UnimplementedMiddlewareServer) GetRelatedTestCaseOnly(context.Context, *GetRelatedTestCaseOnlyRequest) (*GetRelatedTestCaseOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelatedTestCaseOnly not implemented")
}
func (UnimplementedMiddlewareServer) GetRelatedTestCases(context.Context, *GetRelatedTestCasesRequest) (*GetRelatedTestCasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelatedTestCases not implemented")
}
func (UnimplementedMiddlewareServer) ExistRelatedTestCase(context.Context, *ExistRelatedTestCaseRequest) (*ExistRelatedTestCaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistRelatedTestCase not implemented")
}
func (UnimplementedMiddlewareServer) ExistRelatedTestCaseConds(context.Context, *ExistRelatedTestCaseCondsRequest) (*ExistRelatedTestCaseCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistRelatedTestCaseConds not implemented")
}
func (UnimplementedMiddlewareServer) CountRelatedTestCases(context.Context, *CountRelatedTestCasesRequest) (*CountRelatedTestCasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountRelatedTestCases not implemented")
}
func (UnimplementedMiddlewareServer) DeleteRelatedTestCase(context.Context, *DeleteRelatedTestCaseRequest) (*DeleteRelatedTestCaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRelatedTestCase not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_CreateRelatedTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRelatedTestCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateRelatedTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smoketest.middleware.relatedtestcase.v1.Middleware/CreateRelatedTestCase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateRelatedTestCase(ctx, req.(*CreateRelatedTestCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_CreateRelatedTestCases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRelatedTestCasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreateRelatedTestCases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smoketest.middleware.relatedtestcase.v1.Middleware/CreateRelatedTestCases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreateRelatedTestCases(ctx, req.(*CreateRelatedTestCasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_UpdateRelatedTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRelatedTestCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).UpdateRelatedTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smoketest.middleware.relatedtestcase.v1.Middleware/UpdateRelatedTestCase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).UpdateRelatedTestCase(ctx, req.(*UpdateRelatedTestCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetRelatedTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRelatedTestCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetRelatedTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smoketest.middleware.relatedtestcase.v1.Middleware/GetRelatedTestCase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetRelatedTestCase(ctx, req.(*GetRelatedTestCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetRelatedTestCaseOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRelatedTestCaseOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetRelatedTestCaseOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smoketest.middleware.relatedtestcase.v1.Middleware/GetRelatedTestCaseOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetRelatedTestCaseOnly(ctx, req.(*GetRelatedTestCaseOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetRelatedTestCases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRelatedTestCasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetRelatedTestCases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smoketest.middleware.relatedtestcase.v1.Middleware/GetRelatedTestCases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetRelatedTestCases(ctx, req.(*GetRelatedTestCasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ExistRelatedTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistRelatedTestCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ExistRelatedTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smoketest.middleware.relatedtestcase.v1.Middleware/ExistRelatedTestCase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ExistRelatedTestCase(ctx, req.(*ExistRelatedTestCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_ExistRelatedTestCaseConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistRelatedTestCaseCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).ExistRelatedTestCaseConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smoketest.middleware.relatedtestcase.v1.Middleware/ExistRelatedTestCaseConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).ExistRelatedTestCaseConds(ctx, req.(*ExistRelatedTestCaseCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_CountRelatedTestCases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountRelatedTestCasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CountRelatedTestCases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smoketest.middleware.relatedtestcase.v1.Middleware/CountRelatedTestCases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CountRelatedTestCases(ctx, req.(*CountRelatedTestCasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_DeleteRelatedTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRelatedTestCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).DeleteRelatedTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smoketest.middleware.relatedtestcase.v1.Middleware/DeleteRelatedTestCase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).DeleteRelatedTestCase(ctx, req.(*DeleteRelatedTestCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smoketest.middleware.relatedtestcase.v1.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRelatedTestCase",
			Handler:    _Middleware_CreateRelatedTestCase_Handler,
		},
		{
			MethodName: "CreateRelatedTestCases",
			Handler:    _Middleware_CreateRelatedTestCases_Handler,
		},
		{
			MethodName: "UpdateRelatedTestCase",
			Handler:    _Middleware_UpdateRelatedTestCase_Handler,
		},
		{
			MethodName: "GetRelatedTestCase",
			Handler:    _Middleware_GetRelatedTestCase_Handler,
		},
		{
			MethodName: "GetRelatedTestCaseOnly",
			Handler:    _Middleware_GetRelatedTestCaseOnly_Handler,
		},
		{
			MethodName: "GetRelatedTestCases",
			Handler:    _Middleware_GetRelatedTestCases_Handler,
		},
		{
			MethodName: "ExistRelatedTestCase",
			Handler:    _Middleware_ExistRelatedTestCase_Handler,
		},
		{
			MethodName: "ExistRelatedTestCaseConds",
			Handler:    _Middleware_ExistRelatedTestCaseConds_Handler,
		},
		{
			MethodName: "CountRelatedTestCases",
			Handler:    _Middleware_CountRelatedTestCases_Handler,
		},
		{
			MethodName: "DeleteRelatedTestCase",
			Handler:    _Middleware_DeleteRelatedTestCase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/smoketest/mw/v1/relatedtestcase/relatedtestcase.proto",
}
