syntax = "proto3";

package smoketest.middleware.testplan.plantestcase.v1;

option go_package = "github.com/NpoolPlatform/message/npool/smoketest/mw/v1/testplan/plantestcase";

import "npool/npool.proto";

// Service Name
service Middleware {
    rpc CreatePlanTestCase     (CreatePlanTestCaseRequest)     returns (CreatePlanTestCaseResponse)     {}
    rpc UpdatePlanTestCase     (UpdatePlanTestCaseRequest)     returns (UpdatePlanTestCaseResponse)     {}
    rpc GetPlanTestCase        (GetPlanTestCaseRequest)        returns (GetPlanTestCaseResponse)        {}
    rpc GetPlanTestCases       (GetPlanTestCasesRequest)       returns (GetPlanTestCasesResponse)       {}
    rpc DeletePlanTestCase     (DeletePlanTestCaseRequest)     returns (DeletePlanTestCaseResponse)     {}
}

enum TestCaseResult {
    DefaultTestCaseResult     = 0;
    Skipped                   = 10;
    Passed                    = 20;
    Failed                    = 30;
}

message PlanTestCase {
    // @inject_tag: sql:"id"
    string          ID                                      = 10;
    // @inject_tag: sql:"test_plan_id"
    string          TestPlanID                              = 20;
    // @inject_tag: sql:"test_case_id"
    string          TestCaseID                              = 40;
    // @inject_tag: sql:"input"
    string          Input                                   = 50;
    // @inject_tag: sql:"output"
    string          Output                                  = 60;
    // @inject_tag: sql:"description"
    string          Description                             = 70;
    // @inject_tag: sql:"run_duration"
    uint32          RunDuration                             = 80;
    // @inject_tag: sql:"test_user_id"
    string          TestUserID                              = 90;
    // @inject_tag: sql:"result"
    string          ResultStr                               = 100; 
    TestCaseResult  Result                                  = 110; 
    // @inject_tag: sql:"index"
    uint32          Index                                   = 120;
    // @inject_tag: sql:"created_at"
    uint32          CreatedAt                               = 130;
    // @inject_tag: sql:"updated_at"
    uint32          UpdatedAt                               = 140;
    // @inject_tag: sql:"deleted_at"
    uint32          DeletedAt                               = 150;
}

message PlanTestCaseReq {
    optional string          ID                                      = 10;
    optional string          TestPlanID                              = 20;
    optional string          TestCaseID                              = 30;
    optional string          Input                                   = 40;
    optional string          Output                                  = 50;
    optional string          Description                             = 60;
    optional uint32          RunDuration                             = 70;
    optional string          TestUserID                              = 80;
    optional string          AppID                                   = 90;
    optional TestCaseResult  Result                                  = 100; 
    optional uint32          Index                                   = 110;
    
}

message Conds {
    optional npool.v1.StringVal      ID             = 10;
    optional npool.v1.StringVal      TestPlanID     = 20;
    optional npool.v1.StringVal      TestUserID     = 30;
    optional npool.v1.StringVal      Result         = 40;
    optional npool.v1.StringSliceVal TestPlanIDs    = 50;
}

message CreatePlanTestCaseRequest {
    PlanTestCaseReq Info = 10;
}

message CreatePlanTestCaseResponse {
    PlanTestCase Info = 10;
}

message UpdatePlanTestCaseRequest {
    PlanTestCaseReq Info = 10;
}

message UpdatePlanTestCaseResponse {
    PlanTestCase Info = 10;
}

message GetPlanTestCaseRequest {
    string ID = 10;
}

message GetPlanTestCaseResponse {
    PlanTestCase Info = 10;
}

message GetPlanTestCasesRequest {
    Conds               Conds  = 10;
    int32               Offset = 20;
    int32               Limit  = 30;
}

message GetPlanTestCasesResponse {
    repeated PlanTestCase Infos = 10;
    uint32                Total = 20;
}

message GetPlanTestCaseOnlyRequest {
    Conds Conds = 10;
}

message GetPlanTestCaseOnlyResponse {
    PlanTestCase Info = 10;
}

message ExistPlanTestCaseRequest {
    string ID = 10;
}

message ExistPlanTestCaseResponse {
    bool Info = 10;
}

message DeletePlanTestCaseRequest {
    PlanTestCaseReq Info = 10;
}

message DeletePlanTestCaseResponse {
    PlanTestCase Info = 10;
}
