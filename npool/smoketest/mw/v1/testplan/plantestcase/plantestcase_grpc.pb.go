// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/smoketest/mw/v1/testplan/plantestcase/plantestcase.proto

package plantestcase

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Middleware_CreatePlanTestCase_FullMethodName = "/smoketest.middleware.testplan.plantestcase.v1.Middleware/CreatePlanTestCase"
	Middleware_UpdatePlanTestCase_FullMethodName = "/smoketest.middleware.testplan.plantestcase.v1.Middleware/UpdatePlanTestCase"
	Middleware_GetPlanTestCase_FullMethodName    = "/smoketest.middleware.testplan.plantestcase.v1.Middleware/GetPlanTestCase"
	Middleware_GetPlanTestCases_FullMethodName   = "/smoketest.middleware.testplan.plantestcase.v1.Middleware/GetPlanTestCases"
	Middleware_DeletePlanTestCase_FullMethodName = "/smoketest.middleware.testplan.plantestcase.v1.Middleware/DeletePlanTestCase"
)

// MiddlewareClient is the client API for Middleware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlewareClient interface {
	CreatePlanTestCase(ctx context.Context, in *CreatePlanTestCaseRequest, opts ...grpc.CallOption) (*CreatePlanTestCaseResponse, error)
	UpdatePlanTestCase(ctx context.Context, in *UpdatePlanTestCaseRequest, opts ...grpc.CallOption) (*UpdatePlanTestCaseResponse, error)
	GetPlanTestCase(ctx context.Context, in *GetPlanTestCaseRequest, opts ...grpc.CallOption) (*GetPlanTestCaseResponse, error)
	GetPlanTestCases(ctx context.Context, in *GetPlanTestCasesRequest, opts ...grpc.CallOption) (*GetPlanTestCasesResponse, error)
	DeletePlanTestCase(ctx context.Context, in *DeletePlanTestCaseRequest, opts ...grpc.CallOption) (*DeletePlanTestCaseResponse, error)
}

type middlewareClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlewareClient(cc grpc.ClientConnInterface) MiddlewareClient {
	return &middlewareClient{cc}
}

func (c *middlewareClient) CreatePlanTestCase(ctx context.Context, in *CreatePlanTestCaseRequest, opts ...grpc.CallOption) (*CreatePlanTestCaseResponse, error) {
	out := new(CreatePlanTestCaseResponse)
	err := c.cc.Invoke(ctx, Middleware_CreatePlanTestCase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) UpdatePlanTestCase(ctx context.Context, in *UpdatePlanTestCaseRequest, opts ...grpc.CallOption) (*UpdatePlanTestCaseResponse, error) {
	out := new(UpdatePlanTestCaseResponse)
	err := c.cc.Invoke(ctx, Middleware_UpdatePlanTestCase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetPlanTestCase(ctx context.Context, in *GetPlanTestCaseRequest, opts ...grpc.CallOption) (*GetPlanTestCaseResponse, error) {
	out := new(GetPlanTestCaseResponse)
	err := c.cc.Invoke(ctx, Middleware_GetPlanTestCase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) GetPlanTestCases(ctx context.Context, in *GetPlanTestCasesRequest, opts ...grpc.CallOption) (*GetPlanTestCasesResponse, error) {
	out := new(GetPlanTestCasesResponse)
	err := c.cc.Invoke(ctx, Middleware_GetPlanTestCases_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareClient) DeletePlanTestCase(ctx context.Context, in *DeletePlanTestCaseRequest, opts ...grpc.CallOption) (*DeletePlanTestCaseResponse, error) {
	out := new(DeletePlanTestCaseResponse)
	err := c.cc.Invoke(ctx, Middleware_DeletePlanTestCase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlewareServer is the server API for Middleware service.
// All implementations must embed UnimplementedMiddlewareServer
// for forward compatibility
type MiddlewareServer interface {
	CreatePlanTestCase(context.Context, *CreatePlanTestCaseRequest) (*CreatePlanTestCaseResponse, error)
	UpdatePlanTestCase(context.Context, *UpdatePlanTestCaseRequest) (*UpdatePlanTestCaseResponse, error)
	GetPlanTestCase(context.Context, *GetPlanTestCaseRequest) (*GetPlanTestCaseResponse, error)
	GetPlanTestCases(context.Context, *GetPlanTestCasesRequest) (*GetPlanTestCasesResponse, error)
	DeletePlanTestCase(context.Context, *DeletePlanTestCaseRequest) (*DeletePlanTestCaseResponse, error)
	mustEmbedUnimplementedMiddlewareServer()
}

// UnimplementedMiddlewareServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlewareServer struct {
}

func (UnimplementedMiddlewareServer) CreatePlanTestCase(context.Context, *CreatePlanTestCaseRequest) (*CreatePlanTestCaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlanTestCase not implemented")
}
func (UnimplementedMiddlewareServer) UpdatePlanTestCase(context.Context, *UpdatePlanTestCaseRequest) (*UpdatePlanTestCaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlanTestCase not implemented")
}
func (UnimplementedMiddlewareServer) GetPlanTestCase(context.Context, *GetPlanTestCaseRequest) (*GetPlanTestCaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlanTestCase not implemented")
}
func (UnimplementedMiddlewareServer) GetPlanTestCases(context.Context, *GetPlanTestCasesRequest) (*GetPlanTestCasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlanTestCases not implemented")
}
func (UnimplementedMiddlewareServer) DeletePlanTestCase(context.Context, *DeletePlanTestCaseRequest) (*DeletePlanTestCaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePlanTestCase not implemented")
}
func (UnimplementedMiddlewareServer) mustEmbedUnimplementedMiddlewareServer() {}

// UnsafeMiddlewareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlewareServer will
// result in compilation errors.
type UnsafeMiddlewareServer interface {
	mustEmbedUnimplementedMiddlewareServer()
}

func RegisterMiddlewareServer(s grpc.ServiceRegistrar, srv MiddlewareServer) {
	s.RegisterService(&Middleware_ServiceDesc, srv)
}

func _Middleware_CreatePlanTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlanTestCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).CreatePlanTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_CreatePlanTestCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).CreatePlanTestCase(ctx, req.(*CreatePlanTestCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_UpdatePlanTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlanTestCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).UpdatePlanTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_UpdatePlanTestCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).UpdatePlanTestCase(ctx, req.(*UpdatePlanTestCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetPlanTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlanTestCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetPlanTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetPlanTestCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetPlanTestCase(ctx, req.(*GetPlanTestCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_GetPlanTestCases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlanTestCasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).GetPlanTestCases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_GetPlanTestCases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).GetPlanTestCases(ctx, req.(*GetPlanTestCasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleware_DeletePlanTestCase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePlanTestCaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlewareServer).DeletePlanTestCase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Middleware_DeletePlanTestCase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlewareServer).DeletePlanTestCase(ctx, req.(*DeletePlanTestCaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleware_ServiceDesc is the grpc.ServiceDesc for Middleware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "smoketest.middleware.testplan.plantestcase.v1.Middleware",
	HandlerType: (*MiddlewareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePlanTestCase",
			Handler:    _Middleware_CreatePlanTestCase_Handler,
		},
		{
			MethodName: "UpdatePlanTestCase",
			Handler:    _Middleware_UpdatePlanTestCase_Handler,
		},
		{
			MethodName: "GetPlanTestCase",
			Handler:    _Middleware_GetPlanTestCase_Handler,
		},
		{
			MethodName: "GetPlanTestCases",
			Handler:    _Middleware_GetPlanTestCases_Handler,
		},
		{
			MethodName: "DeletePlanTestCase",
			Handler:    _Middleware_DeletePlanTestCase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/smoketest/mw/v1/testplan/plantestcase/plantestcase.proto",
}
