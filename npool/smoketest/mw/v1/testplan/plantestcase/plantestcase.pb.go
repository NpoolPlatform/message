// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: npool/smoketest/mw/v1/testplan/plantestcase/plantestcase.proto

package testcase

import (
	plantestcase "github.com/NpoolPlatform/message/npool/smoketest/mgr/v1/testplan/plantestcase"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreatePlanTestCaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *plantestcase.PlanTestCaseReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreatePlanTestCaseRequest) Reset() {
	*x = CreatePlanTestCaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePlanTestCaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlanTestCaseRequest) ProtoMessage() {}

func (x *CreatePlanTestCaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlanTestCaseRequest.ProtoReflect.Descriptor instead.
func (*CreatePlanTestCaseRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_rawDescGZIP(), []int{0}
}

func (x *CreatePlanTestCaseRequest) GetInfo() *plantestcase.PlanTestCaseReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreatePlanTestCaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *plantestcase.PlanTestCase `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreatePlanTestCaseResponse) Reset() {
	*x = CreatePlanTestCaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePlanTestCaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlanTestCaseResponse) ProtoMessage() {}

func (x *CreatePlanTestCaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlanTestCaseResponse.ProtoReflect.Descriptor instead.
func (*CreatePlanTestCaseResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_rawDescGZIP(), []int{1}
}

func (x *CreatePlanTestCaseResponse) GetInfo() *plantestcase.PlanTestCase {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdatePlanTestCaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *plantestcase.PlanTestCaseReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdatePlanTestCaseRequest) Reset() {
	*x = UpdatePlanTestCaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePlanTestCaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePlanTestCaseRequest) ProtoMessage() {}

func (x *UpdatePlanTestCaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePlanTestCaseRequest.ProtoReflect.Descriptor instead.
func (*UpdatePlanTestCaseRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_rawDescGZIP(), []int{2}
}

func (x *UpdatePlanTestCaseRequest) GetInfo() *plantestcase.PlanTestCaseReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdatePlanTestCaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *plantestcase.PlanTestCase `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdatePlanTestCaseResponse) Reset() {
	*x = UpdatePlanTestCaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePlanTestCaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePlanTestCaseResponse) ProtoMessage() {}

func (x *UpdatePlanTestCaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePlanTestCaseResponse.ProtoReflect.Descriptor instead.
func (*UpdatePlanTestCaseResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_rawDescGZIP(), []int{3}
}

func (x *UpdatePlanTestCaseResponse) GetInfo() *plantestcase.PlanTestCase {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetPlanTestCaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetPlanTestCaseRequest) Reset() {
	*x = GetPlanTestCaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlanTestCaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlanTestCaseRequest) ProtoMessage() {}

func (x *GetPlanTestCaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlanTestCaseRequest.ProtoReflect.Descriptor instead.
func (*GetPlanTestCaseRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_rawDescGZIP(), []int{4}
}

func (x *GetPlanTestCaseRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetPlanTestCaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *plantestcase.PlanTestCase `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetPlanTestCaseResponse) Reset() {
	*x = GetPlanTestCaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlanTestCaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlanTestCaseResponse) ProtoMessage() {}

func (x *GetPlanTestCaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlanTestCaseResponse.ProtoReflect.Descriptor instead.
func (*GetPlanTestCaseResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_rawDescGZIP(), []int{5}
}

func (x *GetPlanTestCaseResponse) GetInfo() *plantestcase.PlanTestCase {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetPlanTestCasesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *plantestcase.Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32               `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32               `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetPlanTestCasesRequest) Reset() {
	*x = GetPlanTestCasesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlanTestCasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlanTestCasesRequest) ProtoMessage() {}

func (x *GetPlanTestCasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlanTestCasesRequest.ProtoReflect.Descriptor instead.
func (*GetPlanTestCasesRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_rawDescGZIP(), []int{6}
}

func (x *GetPlanTestCasesRequest) GetConds() *plantestcase.Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetPlanTestCasesRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetPlanTestCasesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetPlanTestCasesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*plantestcase.PlanTestCase `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32                       `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetPlanTestCasesResponse) Reset() {
	*x = GetPlanTestCasesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlanTestCasesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlanTestCasesResponse) ProtoMessage() {}

func (x *GetPlanTestCasesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlanTestCasesResponse.ProtoReflect.Descriptor instead.
func (*GetPlanTestCasesResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_rawDescGZIP(), []int{7}
}

func (x *GetPlanTestCasesResponse) GetInfos() []*plantestcase.PlanTestCase {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetPlanTestCasesResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetPlanTestCaseOnlyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *plantestcase.Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *GetPlanTestCaseOnlyRequest) Reset() {
	*x = GetPlanTestCaseOnlyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlanTestCaseOnlyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlanTestCaseOnlyRequest) ProtoMessage() {}

func (x *GetPlanTestCaseOnlyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlanTestCaseOnlyRequest.ProtoReflect.Descriptor instead.
func (*GetPlanTestCaseOnlyRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_rawDescGZIP(), []int{8}
}

func (x *GetPlanTestCaseOnlyRequest) GetConds() *plantestcase.Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type GetPlanTestCaseOnlyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *plantestcase.PlanTestCase `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetPlanTestCaseOnlyResponse) Reset() {
	*x = GetPlanTestCaseOnlyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlanTestCaseOnlyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlanTestCaseOnlyResponse) ProtoMessage() {}

func (x *GetPlanTestCaseOnlyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlanTestCaseOnlyResponse.ProtoReflect.Descriptor instead.
func (*GetPlanTestCaseOnlyResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_rawDescGZIP(), []int{9}
}

func (x *GetPlanTestCaseOnlyResponse) GetInfo() *plantestcase.PlanTestCase {
	if x != nil {
		return x.Info
	}
	return nil
}

type ExistPlanTestCaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ExistPlanTestCaseRequest) Reset() {
	*x = ExistPlanTestCaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistPlanTestCaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistPlanTestCaseRequest) ProtoMessage() {}

func (x *ExistPlanTestCaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistPlanTestCaseRequest.ProtoReflect.Descriptor instead.
func (*ExistPlanTestCaseRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_rawDescGZIP(), []int{10}
}

func (x *ExistPlanTestCaseRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ExistPlanTestCaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistPlanTestCaseResponse) Reset() {
	*x = ExistPlanTestCaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistPlanTestCaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistPlanTestCaseResponse) ProtoMessage() {}

func (x *ExistPlanTestCaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistPlanTestCaseResponse.ProtoReflect.Descriptor instead.
func (*ExistPlanTestCaseResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_rawDescGZIP(), []int{11}
}

func (x *ExistPlanTestCaseResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type DeletePlanTestCaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *plantestcase.Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *DeletePlanTestCaseRequest) Reset() {
	*x = DeletePlanTestCaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePlanTestCaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePlanTestCaseRequest) ProtoMessage() {}

func (x *DeletePlanTestCaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePlanTestCaseRequest.ProtoReflect.Descriptor instead.
func (*DeletePlanTestCaseRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_rawDescGZIP(), []int{12}
}

func (x *DeletePlanTestCaseRequest) GetConds() *plantestcase.Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type DeletePlanTestCaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *plantestcase.PlanTestCase `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeletePlanTestCaseResponse) Reset() {
	*x = DeletePlanTestCaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePlanTestCaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePlanTestCaseResponse) ProtoMessage() {}

func (x *DeletePlanTestCaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePlanTestCaseResponse.ProtoReflect.Descriptor instead.
func (*DeletePlanTestCaseResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_rawDescGZIP(), []int{13}
}

func (x *DeletePlanTestCaseResponse) GetInfo() *plantestcase.PlanTestCase {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto protoreflect.FileDescriptor

var file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_rawDesc = []byte{
	0x0a, 0x3e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73,
	0x74, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e,
	0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2f, 0x70, 0x6c,
	0x61, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x24, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x3f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x73, 0x6d,
	0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x6d, 0x67, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x74,
	0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x63, 0x61, 0x73, 0x65, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6c, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e,
	0x70, 0x6c, 0x61, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6a, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x6c, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x73,
	0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x6a, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x6d,
	0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x28, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x67, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4c, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x70, 0x6c, 0x61, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x90,
	0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x05, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x6d, 0x6f, 0x6b,
	0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x63,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0x80, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e,
	0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x22, 0x65, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x47, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x6b, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x4f, 0x6e,
	0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x2a, 0x0a, 0x18, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x44, 0x22, 0x2f, 0x0a, 0x19, 0x45, 0x78, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x64, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x47, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x6a, 0x0a, 0x1a, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0xc1, 0x08, 0x0a, 0x0a, 0x4d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x12, 0x99, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x12, 0x3f, 0x2e,
	0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40,
	0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x99, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61,
	0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x12, 0x3f, 0x2e, 0x73, 0x6d, 0x6f, 0x6b,
	0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x73, 0x6d, 0x6f,
	0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x90,
	0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x12, 0x3c, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x3d, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x9c, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x40, 0x2e, 0x73, 0x6d, 0x6f, 0x6b,
	0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x41, 0x2e, 0x73, 0x6d,
	0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x93, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74,
	0x43, 0x61, 0x73, 0x65, 0x73, 0x12, 0x3d, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x50, 0x6c, 0x61,
	0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x6e,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x96, 0x01, 0x0a, 0x11, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x12, 0x3e, 0x2e, 0x73,
	0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x73,
	0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x99, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x12, 0x3f, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x50, 0x6c,
	0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x40, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x50,
	0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x4a, 0x5a, 0x48, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f,
	0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2f,
	0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2f, 0x74,
	0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_rawDescOnce sync.Once
	file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_rawDescData = file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_rawDesc
)

func file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_rawDescGZIP() []byte {
	file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_rawDescOnce.Do(func() {
		file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_rawDescData)
	})
	return file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_rawDescData
}

var file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_goTypes = []interface{}{
	(*CreatePlanTestCaseRequest)(nil),    // 0: smoketest.middleware.PlanTestCase.v1.CreatePlanTestCaseRequest
	(*CreatePlanTestCaseResponse)(nil),   // 1: smoketest.middleware.PlanTestCase.v1.CreatePlanTestCaseResponse
	(*UpdatePlanTestCaseRequest)(nil),    // 2: smoketest.middleware.PlanTestCase.v1.UpdatePlanTestCaseRequest
	(*UpdatePlanTestCaseResponse)(nil),   // 3: smoketest.middleware.PlanTestCase.v1.UpdatePlanTestCaseResponse
	(*GetPlanTestCaseRequest)(nil),       // 4: smoketest.middleware.PlanTestCase.v1.GetPlanTestCaseRequest
	(*GetPlanTestCaseResponse)(nil),      // 5: smoketest.middleware.PlanTestCase.v1.GetPlanTestCaseResponse
	(*GetPlanTestCasesRequest)(nil),      // 6: smoketest.middleware.PlanTestCase.v1.GetPlanTestCasesRequest
	(*GetPlanTestCasesResponse)(nil),     // 7: smoketest.middleware.PlanTestCase.v1.GetPlanTestCasesResponse
	(*GetPlanTestCaseOnlyRequest)(nil),   // 8: smoketest.middleware.PlanTestCase.v1.GetPlanTestCaseOnlyRequest
	(*GetPlanTestCaseOnlyResponse)(nil),  // 9: smoketest.middleware.PlanTestCase.v1.GetPlanTestCaseOnlyResponse
	(*ExistPlanTestCaseRequest)(nil),     // 10: smoketest.middleware.PlanTestCase.v1.ExistPlanTestCaseRequest
	(*ExistPlanTestCaseResponse)(nil),    // 11: smoketest.middleware.PlanTestCase.v1.ExistPlanTestCaseResponse
	(*DeletePlanTestCaseRequest)(nil),    // 12: smoketest.middleware.PlanTestCase.v1.DeletePlanTestCaseRequest
	(*DeletePlanTestCaseResponse)(nil),   // 13: smoketest.middleware.PlanTestCase.v1.DeletePlanTestCaseResponse
	(*plantestcase.PlanTestCaseReq)(nil), // 14: smoketest.manager.testplan.plantestcase.v1.PlanTestCaseReq
	(*plantestcase.PlanTestCase)(nil),    // 15: smoketest.manager.testplan.plantestcase.v1.PlanTestCase
	(*plantestcase.Conds)(nil),           // 16: smoketest.manager.testplan.plantestcase.v1.Conds
}
var file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_depIdxs = []int32{
	14, // 0: smoketest.middleware.PlanTestCase.v1.CreatePlanTestCaseRequest.Info:type_name -> smoketest.manager.testplan.plantestcase.v1.PlanTestCaseReq
	15, // 1: smoketest.middleware.PlanTestCase.v1.CreatePlanTestCaseResponse.Info:type_name -> smoketest.manager.testplan.plantestcase.v1.PlanTestCase
	14, // 2: smoketest.middleware.PlanTestCase.v1.UpdatePlanTestCaseRequest.Info:type_name -> smoketest.manager.testplan.plantestcase.v1.PlanTestCaseReq
	15, // 3: smoketest.middleware.PlanTestCase.v1.UpdatePlanTestCaseResponse.Info:type_name -> smoketest.manager.testplan.plantestcase.v1.PlanTestCase
	15, // 4: smoketest.middleware.PlanTestCase.v1.GetPlanTestCaseResponse.Info:type_name -> smoketest.manager.testplan.plantestcase.v1.PlanTestCase
	16, // 5: smoketest.middleware.PlanTestCase.v1.GetPlanTestCasesRequest.Conds:type_name -> smoketest.manager.testplan.plantestcase.v1.Conds
	15, // 6: smoketest.middleware.PlanTestCase.v1.GetPlanTestCasesResponse.Infos:type_name -> smoketest.manager.testplan.plantestcase.v1.PlanTestCase
	16, // 7: smoketest.middleware.PlanTestCase.v1.GetPlanTestCaseOnlyRequest.Conds:type_name -> smoketest.manager.testplan.plantestcase.v1.Conds
	15, // 8: smoketest.middleware.PlanTestCase.v1.GetPlanTestCaseOnlyResponse.Info:type_name -> smoketest.manager.testplan.plantestcase.v1.PlanTestCase
	16, // 9: smoketest.middleware.PlanTestCase.v1.DeletePlanTestCaseRequest.Conds:type_name -> smoketest.manager.testplan.plantestcase.v1.Conds
	15, // 10: smoketest.middleware.PlanTestCase.v1.DeletePlanTestCaseResponse.Info:type_name -> smoketest.manager.testplan.plantestcase.v1.PlanTestCase
	0,  // 11: smoketest.middleware.PlanTestCase.v1.Middleware.CreatePlanTestCase:input_type -> smoketest.middleware.PlanTestCase.v1.CreatePlanTestCaseRequest
	2,  // 12: smoketest.middleware.PlanTestCase.v1.Middleware.UpdatePlanTestCase:input_type -> smoketest.middleware.PlanTestCase.v1.UpdatePlanTestCaseRequest
	4,  // 13: smoketest.middleware.PlanTestCase.v1.Middleware.GetPlanTestCase:input_type -> smoketest.middleware.PlanTestCase.v1.GetPlanTestCaseRequest
	8,  // 14: smoketest.middleware.PlanTestCase.v1.Middleware.GetPlanTestCaseOnly:input_type -> smoketest.middleware.PlanTestCase.v1.GetPlanTestCaseOnlyRequest
	6,  // 15: smoketest.middleware.PlanTestCase.v1.Middleware.GetPlanTestCases:input_type -> smoketest.middleware.PlanTestCase.v1.GetPlanTestCasesRequest
	10, // 16: smoketest.middleware.PlanTestCase.v1.Middleware.ExistPlanTestCase:input_type -> smoketest.middleware.PlanTestCase.v1.ExistPlanTestCaseRequest
	12, // 17: smoketest.middleware.PlanTestCase.v1.Middleware.DeletePlanTestCase:input_type -> smoketest.middleware.PlanTestCase.v1.DeletePlanTestCaseRequest
	1,  // 18: smoketest.middleware.PlanTestCase.v1.Middleware.CreatePlanTestCase:output_type -> smoketest.middleware.PlanTestCase.v1.CreatePlanTestCaseResponse
	3,  // 19: smoketest.middleware.PlanTestCase.v1.Middleware.UpdatePlanTestCase:output_type -> smoketest.middleware.PlanTestCase.v1.UpdatePlanTestCaseResponse
	5,  // 20: smoketest.middleware.PlanTestCase.v1.Middleware.GetPlanTestCase:output_type -> smoketest.middleware.PlanTestCase.v1.GetPlanTestCaseResponse
	9,  // 21: smoketest.middleware.PlanTestCase.v1.Middleware.GetPlanTestCaseOnly:output_type -> smoketest.middleware.PlanTestCase.v1.GetPlanTestCaseOnlyResponse
	7,  // 22: smoketest.middleware.PlanTestCase.v1.Middleware.GetPlanTestCases:output_type -> smoketest.middleware.PlanTestCase.v1.GetPlanTestCasesResponse
	11, // 23: smoketest.middleware.PlanTestCase.v1.Middleware.ExistPlanTestCase:output_type -> smoketest.middleware.PlanTestCase.v1.ExistPlanTestCaseResponse
	13, // 24: smoketest.middleware.PlanTestCase.v1.Middleware.DeletePlanTestCase:output_type -> smoketest.middleware.PlanTestCase.v1.DeletePlanTestCaseResponse
	18, // [18:25] is the sub-list for method output_type
	11, // [11:18] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_init() }
func file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_init() {
	if File_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePlanTestCaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePlanTestCaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePlanTestCaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePlanTestCaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlanTestCaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlanTestCaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlanTestCasesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlanTestCasesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlanTestCaseOnlyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlanTestCaseOnlyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistPlanTestCaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistPlanTestCaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePlanTestCaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePlanTestCaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_goTypes,
		DependencyIndexes: file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_depIdxs,
		MessageInfos:      file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_msgTypes,
	}.Build()
	File_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto = out.File
	file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_rawDesc = nil
	file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_goTypes = nil
	file_npool_smoketest_mw_v1_testplan_plantestcase_plantestcase_proto_depIdxs = nil
}
