// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.20.1
// source: npool/smoketest/mw/v1/testplan/testplan.proto

package testplan

import (
	testplan "github.com/NpoolPlatform/message/npool/smoketest/mgr/v1/testplan"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TestResultState int32

const (
	TestResultState_DefaultTestResultState TestResultState = 0
	TestResultState_Passed                 TestResultState = 10
	TestResultState_Failed                 TestResultState = 20
)

// Enum value maps for TestResultState.
var (
	TestResultState_name = map[int32]string{
		0:  "DefaultTestResultState",
		10: "Passed",
		20: "Failed",
	}
	TestResultState_value = map[string]int32{
		"DefaultTestResultState": 0,
		"Passed":                 10,
		"Failed":                 20,
	}
)

func (x TestResultState) Enum() *TestResultState {
	p := new(TestResultState)
	*p = x
	return p
}

func (x TestResultState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestResultState) Descriptor() protoreflect.EnumDescriptor {
	return file_npool_smoketest_mw_v1_testplan_testplan_proto_enumTypes[0].Descriptor()
}

func (TestResultState) Type() protoreflect.EnumType {
	return &file_npool_smoketest_mw_v1_testplan_testplan_proto_enumTypes[0]
}

func (x TestResultState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestResultState.Descriptor instead.
func (TestResultState) EnumDescriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testplan_testplan_proto_rawDescGZIP(), []int{0}
}

type TestPlanState int32

const (
	TestPlanState_DefaultTestPlanState TestPlanState = 0
	TestPlanState_WaitStart            TestPlanState = 10
	TestPlanState_Completed            TestPlanState = 20
	TestPlanState_Finished             TestPlanState = 30
	TestPlanState_Overdue              TestPlanState = 40
)

// Enum value maps for TestPlanState.
var (
	TestPlanState_name = map[int32]string{
		0:  "DefaultTestPlanState",
		10: "WaitStart",
		20: "Completed",
		30: "Finished",
		40: "Overdue",
	}
	TestPlanState_value = map[string]int32{
		"DefaultTestPlanState": 0,
		"WaitStart":            10,
		"Completed":            20,
		"Finished":             30,
		"Overdue":              40,
	}
)

func (x TestPlanState) Enum() *TestPlanState {
	p := new(TestPlanState)
	*p = x
	return p
}

func (x TestPlanState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestPlanState) Descriptor() protoreflect.EnumDescriptor {
	return file_npool_smoketest_mw_v1_testplan_testplan_proto_enumTypes[1].Descriptor()
}

func (TestPlanState) Type() protoreflect.EnumType {
	return &file_npool_smoketest_mw_v1_testplan_testplan_proto_enumTypes[1]
}

func (x TestPlanState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestPlanState.Descriptor instead.
func (TestPlanState) EnumDescriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testplan_testplan_proto_rawDescGZIP(), []int{1}
}

type TestPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: sql:"id"
	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty" sql:"id"`
	// @inject_tag: sql:"name"
	Name string `protobuf:"bytes,20,opt,name=Name,proto3" json:"Name,omitempty" sql:"name"`
	// @inject_tag: sql:"state"
	State TestPlanState `protobuf:"varint,30,opt,name=State,proto3,enum=smoketest.middleware.testplan.v1.TestPlanState" json:"State,omitempty" sql:"state"` //未开始|正在进行|已完成|已逾期
	// @inject_tag: sql:"owner_id"
	OwnerID string `protobuf:"bytes,40,opt,name=OwnerID,proto3" json:"OwnerID,omitempty" sql:"owner_id"`
	// @inject_tag: sql:"responsible_user_id"
	ResponsibleUserID string `protobuf:"bytes,50,opt,name=ResponsibleUserID,proto3" json:"ResponsibleUserID,omitempty" sql:"responsible_user_id"`
	// @inject_tag: sql:"failed_test_cases_count"
	FailedTestCasesCount uint32 `protobuf:"varint,60,opt,name=FailedTestCasesCount,proto3" json:"FailedTestCasesCount,omitempty" sql:"failed_test_cases_count"`
	// @inject_tag: sql:"passed_test_cases_count"
	PassedTestCasesCount uint32 `protobuf:"varint,70,opt,name=PassedTestCasesCount,proto3" json:"PassedTestCasesCount,omitempty" sql:"passed_test_cases_count"`
	// @inject_tag: sql:"skipped_test_cases_count"
	SkippedTestCasesCount uint32 `protobuf:"varint,80,opt,name=SkippedTestCasesCount,proto3" json:"SkippedTestCasesCount,omitempty" sql:"skipped_test_cases_count"`
	// @inject_tag: sql:"run_duration"
	RunDuration uint32 `protobuf:"varint,90,opt,name=RunDuration,proto3" json:"RunDuration,omitempty" sql:"run_duration"`
	// @inject_tag: sql:"test_result"
	TestResult TestResultState `protobuf:"varint,100,opt,name=TestResult,proto3,enum=smoketest.middleware.testplan.v1.TestResultState" json:"TestResult,omitempty" sql:"test_result"`
	// @inject_tag: sql:"deadline"
	Deadline uint32 `protobuf:"varint,110,opt,name=Deadline,proto3" json:"Deadline,omitempty" sql:"deadline"`
	// @inject_tag: sql:"created_at"
	CreatedAt uint32 `protobuf:"varint,120,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
	// @inject_tag: sql:"updated_at"
	UpdatedAt uint32 `protobuf:"varint,130,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty" sql:"updated_at"`
	// @inject_tag: sql:"deleted_at"
	DeletedAt uint32 `protobuf:"varint,140,opt,name=DeletedAt,proto3" json:"DeletedAt,omitempty" sql:"deleted_at"`
}

func (x *TestPlan) Reset() {
	*x = TestPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestPlan) ProtoMessage() {}

func (x *TestPlan) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestPlan.ProtoReflect.Descriptor instead.
func (*TestPlan) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testplan_testplan_proto_rawDescGZIP(), []int{0}
}

func (x *TestPlan) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *TestPlan) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestPlan) GetState() TestPlanState {
	if x != nil {
		return x.State
	}
	return TestPlanState_DefaultTestPlanState
}

func (x *TestPlan) GetOwnerID() string {
	if x != nil {
		return x.OwnerID
	}
	return ""
}

func (x *TestPlan) GetResponsibleUserID() string {
	if x != nil {
		return x.ResponsibleUserID
	}
	return ""
}

func (x *TestPlan) GetFailedTestCasesCount() uint32 {
	if x != nil {
		return x.FailedTestCasesCount
	}
	return 0
}

func (x *TestPlan) GetPassedTestCasesCount() uint32 {
	if x != nil {
		return x.PassedTestCasesCount
	}
	return 0
}

func (x *TestPlan) GetSkippedTestCasesCount() uint32 {
	if x != nil {
		return x.SkippedTestCasesCount
	}
	return 0
}

func (x *TestPlan) GetRunDuration() uint32 {
	if x != nil {
		return x.RunDuration
	}
	return 0
}

func (x *TestPlan) GetTestResult() TestResultState {
	if x != nil {
		return x.TestResult
	}
	return TestResultState_DefaultTestResultState
}

func (x *TestPlan) GetDeadline() uint32 {
	if x != nil {
		return x.Deadline
	}
	return 0
}

func (x *TestPlan) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *TestPlan) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *TestPlan) GetDeletedAt() uint32 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

type TestPlanReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                    *string          `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	Name                  *string          `protobuf:"bytes,20,opt,name=Name,proto3,oneof" json:"Name,omitempty"`
	State                 *TestPlanState   `protobuf:"varint,30,opt,name=State,proto3,enum=smoketest.middleware.testplan.v1.TestPlanState,oneof" json:"State,omitempty"`
	OwnerID               *string          `protobuf:"bytes,40,opt,name=OwnerID,proto3,oneof" json:"OwnerID,omitempty"`
	ResponsibleUserID     *string          `protobuf:"bytes,50,opt,name=ResponsibleUserID,proto3,oneof" json:"ResponsibleUserID,omitempty"`
	FailedTestCasesCount  *uint32          `protobuf:"varint,60,opt,name=FailedTestCasesCount,proto3,oneof" json:"FailedTestCasesCount,omitempty"`
	PassedTestCasesCount  *uint32          `protobuf:"varint,70,opt,name=PassedTestCasesCount,proto3,oneof" json:"PassedTestCasesCount,omitempty"`
	SkippedTestCasesCount *uint32          `protobuf:"varint,80,opt,name=SkippedTestCasesCount,proto3,oneof" json:"SkippedTestCasesCount,omitempty"`
	RunDuration           *uint32          `protobuf:"varint,90,opt,name=RunDuration,proto3,oneof" json:"RunDuration,omitempty"`
	TestResult            *TestResultState `protobuf:"varint,100,opt,name=TestResult,proto3,enum=smoketest.middleware.testplan.v1.TestResultState,oneof" json:"TestResult,omitempty"`
	Deadline              *uint32          `protobuf:"varint,110,opt,name=Deadline,proto3,oneof" json:"Deadline,omitempty"`
	CreatedAt             *uint32          `protobuf:"varint,120,opt,name=CreatedAt,proto3,oneof" json:"CreatedAt,omitempty"`
}

func (x *TestPlanReq) Reset() {
	*x = TestPlanReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestPlanReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestPlanReq) ProtoMessage() {}

func (x *TestPlanReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestPlanReq.ProtoReflect.Descriptor instead.
func (*TestPlanReq) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testplan_testplan_proto_rawDescGZIP(), []int{1}
}

func (x *TestPlanReq) GetID() string {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return ""
}

func (x *TestPlanReq) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *TestPlanReq) GetState() TestPlanState {
	if x != nil && x.State != nil {
		return *x.State
	}
	return TestPlanState_DefaultTestPlanState
}

func (x *TestPlanReq) GetOwnerID() string {
	if x != nil && x.OwnerID != nil {
		return *x.OwnerID
	}
	return ""
}

func (x *TestPlanReq) GetResponsibleUserID() string {
	if x != nil && x.ResponsibleUserID != nil {
		return *x.ResponsibleUserID
	}
	return ""
}

func (x *TestPlanReq) GetFailedTestCasesCount() uint32 {
	if x != nil && x.FailedTestCasesCount != nil {
		return *x.FailedTestCasesCount
	}
	return 0
}

func (x *TestPlanReq) GetPassedTestCasesCount() uint32 {
	if x != nil && x.PassedTestCasesCount != nil {
		return *x.PassedTestCasesCount
	}
	return 0
}

func (x *TestPlanReq) GetSkippedTestCasesCount() uint32 {
	if x != nil && x.SkippedTestCasesCount != nil {
		return *x.SkippedTestCasesCount
	}
	return 0
}

func (x *TestPlanReq) GetRunDuration() uint32 {
	if x != nil && x.RunDuration != nil {
		return *x.RunDuration
	}
	return 0
}

func (x *TestPlanReq) GetTestResult() TestResultState {
	if x != nil && x.TestResult != nil {
		return *x.TestResult
	}
	return TestResultState_DefaultTestResultState
}

func (x *TestPlanReq) GetDeadline() uint32 {
	if x != nil && x.Deadline != nil {
		return *x.Deadline
	}
	return 0
}

func (x *TestPlanReq) GetCreatedAt() uint32 {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return 0
}

type CreateTestPlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *TestPlanReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateTestPlanRequest) Reset() {
	*x = CreateTestPlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTestPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTestPlanRequest) ProtoMessage() {}

func (x *CreateTestPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTestPlanRequest.ProtoReflect.Descriptor instead.
func (*CreateTestPlanRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testplan_testplan_proto_rawDescGZIP(), []int{2}
}

func (x *CreateTestPlanRequest) GetInfo() *TestPlanReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateTestPlanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *TestPlan `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateTestPlanResponse) Reset() {
	*x = CreateTestPlanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTestPlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTestPlanResponse) ProtoMessage() {}

func (x *CreateTestPlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTestPlanResponse.ProtoReflect.Descriptor instead.
func (*CreateTestPlanResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testplan_testplan_proto_rawDescGZIP(), []int{3}
}

func (x *CreateTestPlanResponse) GetInfo() *TestPlan {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateTestPlansRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*TestPlanReq `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateTestPlansRequest) Reset() {
	*x = CreateTestPlansRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTestPlansRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTestPlansRequest) ProtoMessage() {}

func (x *CreateTestPlansRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTestPlansRequest.ProtoReflect.Descriptor instead.
func (*CreateTestPlansRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testplan_testplan_proto_rawDescGZIP(), []int{4}
}

func (x *CreateTestPlansRequest) GetInfos() []*TestPlanReq {
	if x != nil {
		return x.Infos
	}
	return nil
}

type CreateTestPlansResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*TestPlan `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateTestPlansResponse) Reset() {
	*x = CreateTestPlansResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTestPlansResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTestPlansResponse) ProtoMessage() {}

func (x *CreateTestPlansResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTestPlansResponse.ProtoReflect.Descriptor instead.
func (*CreateTestPlansResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testplan_testplan_proto_rawDescGZIP(), []int{5}
}

func (x *CreateTestPlansResponse) GetInfos() []*TestPlan {
	if x != nil {
		return x.Infos
	}
	return nil
}

type UpdateTestPlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *TestPlanReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateTestPlanRequest) Reset() {
	*x = UpdateTestPlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTestPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTestPlanRequest) ProtoMessage() {}

func (x *UpdateTestPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTestPlanRequest.ProtoReflect.Descriptor instead.
func (*UpdateTestPlanRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testplan_testplan_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateTestPlanRequest) GetInfo() *TestPlanReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateTestPlanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *TestPlan `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateTestPlanResponse) Reset() {
	*x = UpdateTestPlanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTestPlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTestPlanResponse) ProtoMessage() {}

func (x *UpdateTestPlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTestPlanResponse.ProtoReflect.Descriptor instead.
func (*UpdateTestPlanResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testplan_testplan_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateTestPlanResponse) GetInfo() *TestPlan {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetTestPlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetTestPlanRequest) Reset() {
	*x = GetTestPlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestPlanRequest) ProtoMessage() {}

func (x *GetTestPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestPlanRequest.ProtoReflect.Descriptor instead.
func (*GetTestPlanRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testplan_testplan_proto_rawDescGZIP(), []int{8}
}

func (x *GetTestPlanRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetTestPlanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *TestPlan `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetTestPlanResponse) Reset() {
	*x = GetTestPlanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestPlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestPlanResponse) ProtoMessage() {}

func (x *GetTestPlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestPlanResponse.ProtoReflect.Descriptor instead.
func (*GetTestPlanResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testplan_testplan_proto_rawDescGZIP(), []int{9}
}

func (x *GetTestPlanResponse) GetInfo() *TestPlan {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetTestPlansRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *testplan.Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32           `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32           `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetTestPlansRequest) Reset() {
	*x = GetTestPlansRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestPlansRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestPlansRequest) ProtoMessage() {}

func (x *GetTestPlansRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestPlansRequest.ProtoReflect.Descriptor instead.
func (*GetTestPlansRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testplan_testplan_proto_rawDescGZIP(), []int{10}
}

func (x *GetTestPlansRequest) GetConds() *testplan.Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetTestPlansRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetTestPlansRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetTestPlansResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*TestPlan `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32      `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetTestPlansResponse) Reset() {
	*x = GetTestPlansResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestPlansResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestPlansResponse) ProtoMessage() {}

func (x *GetTestPlansResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestPlansResponse.ProtoReflect.Descriptor instead.
func (*GetTestPlansResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testplan_testplan_proto_rawDescGZIP(), []int{11}
}

func (x *GetTestPlansResponse) GetInfos() []*TestPlan {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetTestPlansResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetTestPlanOnlyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *testplan.Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *GetTestPlanOnlyRequest) Reset() {
	*x = GetTestPlanOnlyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestPlanOnlyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestPlanOnlyRequest) ProtoMessage() {}

func (x *GetTestPlanOnlyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestPlanOnlyRequest.ProtoReflect.Descriptor instead.
func (*GetTestPlanOnlyRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testplan_testplan_proto_rawDescGZIP(), []int{12}
}

func (x *GetTestPlanOnlyRequest) GetConds() *testplan.Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type GetTestPlanOnlyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *TestPlan `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetTestPlanOnlyResponse) Reset() {
	*x = GetTestPlanOnlyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTestPlanOnlyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTestPlanOnlyResponse) ProtoMessage() {}

func (x *GetTestPlanOnlyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTestPlanOnlyResponse.ProtoReflect.Descriptor instead.
func (*GetTestPlanOnlyResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testplan_testplan_proto_rawDescGZIP(), []int{13}
}

func (x *GetTestPlanOnlyResponse) GetInfo() *TestPlan {
	if x != nil {
		return x.Info
	}
	return nil
}

type ExistTestPlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ExistTestPlanRequest) Reset() {
	*x = ExistTestPlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistTestPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistTestPlanRequest) ProtoMessage() {}

func (x *ExistTestPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistTestPlanRequest.ProtoReflect.Descriptor instead.
func (*ExistTestPlanRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testplan_testplan_proto_rawDescGZIP(), []int{14}
}

func (x *ExistTestPlanRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ExistTestPlanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistTestPlanResponse) Reset() {
	*x = ExistTestPlanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistTestPlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistTestPlanResponse) ProtoMessage() {}

func (x *ExistTestPlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistTestPlanResponse.ProtoReflect.Descriptor instead.
func (*ExistTestPlanResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testplan_testplan_proto_rawDescGZIP(), []int{15}
}

func (x *ExistTestPlanResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type ExistTestPlanCondsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *testplan.Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *ExistTestPlanCondsRequest) Reset() {
	*x = ExistTestPlanCondsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistTestPlanCondsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistTestPlanCondsRequest) ProtoMessage() {}

func (x *ExistTestPlanCondsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistTestPlanCondsRequest.ProtoReflect.Descriptor instead.
func (*ExistTestPlanCondsRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testplan_testplan_proto_rawDescGZIP(), []int{16}
}

func (x *ExistTestPlanCondsRequest) GetConds() *testplan.Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type ExistTestPlanCondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistTestPlanCondsResponse) Reset() {
	*x = ExistTestPlanCondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistTestPlanCondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistTestPlanCondsResponse) ProtoMessage() {}

func (x *ExistTestPlanCondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistTestPlanCondsResponse.ProtoReflect.Descriptor instead.
func (*ExistTestPlanCondsResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testplan_testplan_proto_rawDescGZIP(), []int{17}
}

func (x *ExistTestPlanCondsResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type CountTestPlansRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *testplan.Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *CountTestPlansRequest) Reset() {
	*x = CountTestPlansRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountTestPlansRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountTestPlansRequest) ProtoMessage() {}

func (x *CountTestPlansRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountTestPlansRequest.ProtoReflect.Descriptor instead.
func (*CountTestPlansRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testplan_testplan_proto_rawDescGZIP(), []int{18}
}

func (x *CountTestPlansRequest) GetConds() *testplan.Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type CountTestPlansResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info uint32 `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CountTestPlansResponse) Reset() {
	*x = CountTestPlansResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountTestPlansResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountTestPlansResponse) ProtoMessage() {}

func (x *CountTestPlansResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountTestPlansResponse.ProtoReflect.Descriptor instead.
func (*CountTestPlansResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testplan_testplan_proto_rawDescGZIP(), []int{19}
}

func (x *CountTestPlansResponse) GetInfo() uint32 {
	if x != nil {
		return x.Info
	}
	return 0
}

type DeleteTestPlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *DeleteTestPlanRequest) Reset() {
	*x = DeleteTestPlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTestPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTestPlanRequest) ProtoMessage() {}

func (x *DeleteTestPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTestPlanRequest.ProtoReflect.Descriptor instead.
func (*DeleteTestPlanRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testplan_testplan_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteTestPlanRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type DeleteTestPlanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *TestPlan `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteTestPlanResponse) Reset() {
	*x = DeleteTestPlanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTestPlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTestPlanResponse) ProtoMessage() {}

func (x *DeleteTestPlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTestPlanResponse.ProtoReflect.Descriptor instead.
func (*DeleteTestPlanResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testplan_testplan_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteTestPlanResponse) GetInfo() *TestPlan {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_smoketest_mw_v1_testplan_testplan_proto protoreflect.FileDescriptor

var file_npool_smoketest_mw_v1_testplan_testplan_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73,
	0x74, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e,
	0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x20, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x76,
	0x31, 0x1a, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65,
	0x73, 0x74, 0x2f, 0x6d, 0x67, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c,
	0x61, 0x6e, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xc8, 0x04, 0x0a, 0x08, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x45, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2f, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x32, 0x0a, 0x14, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x14, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x50, 0x61, 0x73, 0x73, 0x65, 0x64, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x46, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x50, 0x61, 0x73, 0x73, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x53, 0x6b, 0x69,
	0x70, 0x70, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65,
	0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x52, 0x75, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x5a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x52, 0x75, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x51, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x6e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x78, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d,
	0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x82, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a,
	0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x8c, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x8b, 0x06, 0x0a,
	0x0b, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x17, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x73, 0x6d, 0x6f, 0x6b,
	0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x48, 0x02, 0x52, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x32, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x04, 0x52, 0x11, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x14, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x05, 0x52, 0x14, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x37, 0x0a, 0x14, 0x50, 0x61, 0x73, 0x73, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x46, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x06, 0x52, 0x14, 0x50, 0x61, 0x73, 0x73, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73,
	0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x15, 0x53, 0x6b,
	0x69, 0x70, 0x70, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x07, 0x52, 0x15, 0x53, 0x6b, 0x69,
	0x70, 0x70, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x52, 0x75, 0x6e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x08, 0x52, 0x0b, 0x52, 0x75,
	0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x56, 0x0a, 0x0a,
	0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x31, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x48, 0x09, 0x52, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x6e, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0a, 0x52, 0x08, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0b, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x42, 0x14,
	0x0a, 0x12, 0x5f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x17, 0x0a,
	0x15, 0x5f, 0x50, 0x61, 0x73, 0x73, 0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x53, 0x6b, 0x69, 0x70, 0x70,
	0x65, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x52, 0x75, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x5a, 0x0a, 0x15, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x58, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3e, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x5d, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x05, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x6d, 0x6f, 0x6b,
	0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22,
	0x5b, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x49, 0x6e,
	0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x6d, 0x6f, 0x6b,
	0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x5a, 0x0a, 0x15,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x6c, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52,
	0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x58, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x24, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x55, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54,
	0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3e, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x7f, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c,
	0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0x6e, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x22, 0x54, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4f,
	0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x05, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x6d, 0x6f, 0x6b,
	0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52,
	0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x59, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3e, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x26, 0x0a, 0x14, 0x45, 0x78, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x2b, 0x0a, 0x15, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x57, 0x0a, 0x19, 0x45, 0x78, 0x69, 0x73, 0x74, 0x54,
	0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22,
	0x30, 0x0a, 0x1a, 0x45, 0x78, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x53, 0x0a, 0x15, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x05, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x6d, 0x6f, 0x6b,
	0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52,
	0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x2c, 0x0a, 0x16, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x27, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65,
	0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x58, 0x0a,
	0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x2a, 0x45, 0x0a, 0x0f, 0x54, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x61, 0x73, 0x73, 0x65, 0x64,
	0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x14, 0x2a, 0x62,
	0x0a, 0x0d, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x14, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x61, 0x69,
	0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x10, 0x14, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x10, 0x1e, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x76, 0x65, 0x72, 0x64, 0x75, 0x65,
	0x10, 0x28, 0x32, 0xda, 0x0a, 0x0a, 0x0a, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x12, 0x85, 0x01, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x12, 0x37, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e,
	0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x88, 0x01, 0x0a, 0x0f, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x38, 0x2e,
	0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x37, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x38, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x34, 0x2e, 0x73, 0x6d,
	0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x35, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x88, 0x01, 0x0a, 0x0f, 0x47,
	0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x38,
	0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x6e, 0x6c,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x35, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74,
	0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x73,
	0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x82, 0x01, 0x0a, 0x0d, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x36, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x37, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x91, 0x01, 0x0a, 0x12,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x3b, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c,
	0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x3c, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x85, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x73, 0x12, 0x37, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c,
	0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x65, 0x73, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x73, 0x6d,
	0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x37, 0x2e, 0x73, 0x6d, 0x6f,
	0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x70,
	0x6c, 0x61, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x73,
	0x74, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x41, 0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70,
	0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74,
	0x65, 0x73, 0x74, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x70, 0x6c,
	0x61, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_smoketest_mw_v1_testplan_testplan_proto_rawDescOnce sync.Once
	file_npool_smoketest_mw_v1_testplan_testplan_proto_rawDescData = file_npool_smoketest_mw_v1_testplan_testplan_proto_rawDesc
)

func file_npool_smoketest_mw_v1_testplan_testplan_proto_rawDescGZIP() []byte {
	file_npool_smoketest_mw_v1_testplan_testplan_proto_rawDescOnce.Do(func() {
		file_npool_smoketest_mw_v1_testplan_testplan_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_smoketest_mw_v1_testplan_testplan_proto_rawDescData)
	})
	return file_npool_smoketest_mw_v1_testplan_testplan_proto_rawDescData
}

var file_npool_smoketest_mw_v1_testplan_testplan_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_npool_smoketest_mw_v1_testplan_testplan_proto_goTypes = []interface{}{
	(TestResultState)(0),               // 0: smoketest.middleware.testplan.v1.TestResultState
	(TestPlanState)(0),                 // 1: smoketest.middleware.testplan.v1.TestPlanState
	(*TestPlan)(nil),                   // 2: smoketest.middleware.testplan.v1.TestPlan
	(*TestPlanReq)(nil),                // 3: smoketest.middleware.testplan.v1.TestPlanReq
	(*CreateTestPlanRequest)(nil),      // 4: smoketest.middleware.testplan.v1.CreateTestPlanRequest
	(*CreateTestPlanResponse)(nil),     // 5: smoketest.middleware.testplan.v1.CreateTestPlanResponse
	(*CreateTestPlansRequest)(nil),     // 6: smoketest.middleware.testplan.v1.CreateTestPlansRequest
	(*CreateTestPlansResponse)(nil),    // 7: smoketest.middleware.testplan.v1.CreateTestPlansResponse
	(*UpdateTestPlanRequest)(nil),      // 8: smoketest.middleware.testplan.v1.UpdateTestPlanRequest
	(*UpdateTestPlanResponse)(nil),     // 9: smoketest.middleware.testplan.v1.UpdateTestPlanResponse
	(*GetTestPlanRequest)(nil),         // 10: smoketest.middleware.testplan.v1.GetTestPlanRequest
	(*GetTestPlanResponse)(nil),        // 11: smoketest.middleware.testplan.v1.GetTestPlanResponse
	(*GetTestPlansRequest)(nil),        // 12: smoketest.middleware.testplan.v1.GetTestPlansRequest
	(*GetTestPlansResponse)(nil),       // 13: smoketest.middleware.testplan.v1.GetTestPlansResponse
	(*GetTestPlanOnlyRequest)(nil),     // 14: smoketest.middleware.testplan.v1.GetTestPlanOnlyRequest
	(*GetTestPlanOnlyResponse)(nil),    // 15: smoketest.middleware.testplan.v1.GetTestPlanOnlyResponse
	(*ExistTestPlanRequest)(nil),       // 16: smoketest.middleware.testplan.v1.ExistTestPlanRequest
	(*ExistTestPlanResponse)(nil),      // 17: smoketest.middleware.testplan.v1.ExistTestPlanResponse
	(*ExistTestPlanCondsRequest)(nil),  // 18: smoketest.middleware.testplan.v1.ExistTestPlanCondsRequest
	(*ExistTestPlanCondsResponse)(nil), // 19: smoketest.middleware.testplan.v1.ExistTestPlanCondsResponse
	(*CountTestPlansRequest)(nil),      // 20: smoketest.middleware.testplan.v1.CountTestPlansRequest
	(*CountTestPlansResponse)(nil),     // 21: smoketest.middleware.testplan.v1.CountTestPlansResponse
	(*DeleteTestPlanRequest)(nil),      // 22: smoketest.middleware.testplan.v1.DeleteTestPlanRequest
	(*DeleteTestPlanResponse)(nil),     // 23: smoketest.middleware.testplan.v1.DeleteTestPlanResponse
	(*testplan.Conds)(nil),             // 24: smoketest.manager.testplan.v1.Conds
}
var file_npool_smoketest_mw_v1_testplan_testplan_proto_depIdxs = []int32{
	1,  // 0: smoketest.middleware.testplan.v1.TestPlan.State:type_name -> smoketest.middleware.testplan.v1.TestPlanState
	0,  // 1: smoketest.middleware.testplan.v1.TestPlan.TestResult:type_name -> smoketest.middleware.testplan.v1.TestResultState
	1,  // 2: smoketest.middleware.testplan.v1.TestPlanReq.State:type_name -> smoketest.middleware.testplan.v1.TestPlanState
	0,  // 3: smoketest.middleware.testplan.v1.TestPlanReq.TestResult:type_name -> smoketest.middleware.testplan.v1.TestResultState
	3,  // 4: smoketest.middleware.testplan.v1.CreateTestPlanRequest.Info:type_name -> smoketest.middleware.testplan.v1.TestPlanReq
	2,  // 5: smoketest.middleware.testplan.v1.CreateTestPlanResponse.Info:type_name -> smoketest.middleware.testplan.v1.TestPlan
	3,  // 6: smoketest.middleware.testplan.v1.CreateTestPlansRequest.Infos:type_name -> smoketest.middleware.testplan.v1.TestPlanReq
	2,  // 7: smoketest.middleware.testplan.v1.CreateTestPlansResponse.Infos:type_name -> smoketest.middleware.testplan.v1.TestPlan
	3,  // 8: smoketest.middleware.testplan.v1.UpdateTestPlanRequest.Info:type_name -> smoketest.middleware.testplan.v1.TestPlanReq
	2,  // 9: smoketest.middleware.testplan.v1.UpdateTestPlanResponse.Info:type_name -> smoketest.middleware.testplan.v1.TestPlan
	2,  // 10: smoketest.middleware.testplan.v1.GetTestPlanResponse.Info:type_name -> smoketest.middleware.testplan.v1.TestPlan
	24, // 11: smoketest.middleware.testplan.v1.GetTestPlansRequest.Conds:type_name -> smoketest.manager.testplan.v1.Conds
	2,  // 12: smoketest.middleware.testplan.v1.GetTestPlansResponse.Infos:type_name -> smoketest.middleware.testplan.v1.TestPlan
	24, // 13: smoketest.middleware.testplan.v1.GetTestPlanOnlyRequest.Conds:type_name -> smoketest.manager.testplan.v1.Conds
	2,  // 14: smoketest.middleware.testplan.v1.GetTestPlanOnlyResponse.Info:type_name -> smoketest.middleware.testplan.v1.TestPlan
	24, // 15: smoketest.middleware.testplan.v1.ExistTestPlanCondsRequest.Conds:type_name -> smoketest.manager.testplan.v1.Conds
	24, // 16: smoketest.middleware.testplan.v1.CountTestPlansRequest.Conds:type_name -> smoketest.manager.testplan.v1.Conds
	2,  // 17: smoketest.middleware.testplan.v1.DeleteTestPlanResponse.Info:type_name -> smoketest.middleware.testplan.v1.TestPlan
	4,  // 18: smoketest.middleware.testplan.v1.Middleware.CreateTestPlan:input_type -> smoketest.middleware.testplan.v1.CreateTestPlanRequest
	6,  // 19: smoketest.middleware.testplan.v1.Middleware.CreateTestPlans:input_type -> smoketest.middleware.testplan.v1.CreateTestPlansRequest
	8,  // 20: smoketest.middleware.testplan.v1.Middleware.UpdateTestPlan:input_type -> smoketest.middleware.testplan.v1.UpdateTestPlanRequest
	10, // 21: smoketest.middleware.testplan.v1.Middleware.GetTestPlan:input_type -> smoketest.middleware.testplan.v1.GetTestPlanRequest
	14, // 22: smoketest.middleware.testplan.v1.Middleware.GetTestPlanOnly:input_type -> smoketest.middleware.testplan.v1.GetTestPlanOnlyRequest
	12, // 23: smoketest.middleware.testplan.v1.Middleware.GetTestPlans:input_type -> smoketest.middleware.testplan.v1.GetTestPlansRequest
	16, // 24: smoketest.middleware.testplan.v1.Middleware.ExistTestPlan:input_type -> smoketest.middleware.testplan.v1.ExistTestPlanRequest
	18, // 25: smoketest.middleware.testplan.v1.Middleware.ExistTestPlanConds:input_type -> smoketest.middleware.testplan.v1.ExistTestPlanCondsRequest
	20, // 26: smoketest.middleware.testplan.v1.Middleware.CountTestPlans:input_type -> smoketest.middleware.testplan.v1.CountTestPlansRequest
	22, // 27: smoketest.middleware.testplan.v1.Middleware.DeleteTestPlan:input_type -> smoketest.middleware.testplan.v1.DeleteTestPlanRequest
	5,  // 28: smoketest.middleware.testplan.v1.Middleware.CreateTestPlan:output_type -> smoketest.middleware.testplan.v1.CreateTestPlanResponse
	7,  // 29: smoketest.middleware.testplan.v1.Middleware.CreateTestPlans:output_type -> smoketest.middleware.testplan.v1.CreateTestPlansResponse
	9,  // 30: smoketest.middleware.testplan.v1.Middleware.UpdateTestPlan:output_type -> smoketest.middleware.testplan.v1.UpdateTestPlanResponse
	11, // 31: smoketest.middleware.testplan.v1.Middleware.GetTestPlan:output_type -> smoketest.middleware.testplan.v1.GetTestPlanResponse
	15, // 32: smoketest.middleware.testplan.v1.Middleware.GetTestPlanOnly:output_type -> smoketest.middleware.testplan.v1.GetTestPlanOnlyResponse
	13, // 33: smoketest.middleware.testplan.v1.Middleware.GetTestPlans:output_type -> smoketest.middleware.testplan.v1.GetTestPlansResponse
	17, // 34: smoketest.middleware.testplan.v1.Middleware.ExistTestPlan:output_type -> smoketest.middleware.testplan.v1.ExistTestPlanResponse
	19, // 35: smoketest.middleware.testplan.v1.Middleware.ExistTestPlanConds:output_type -> smoketest.middleware.testplan.v1.ExistTestPlanCondsResponse
	21, // 36: smoketest.middleware.testplan.v1.Middleware.CountTestPlans:output_type -> smoketest.middleware.testplan.v1.CountTestPlansResponse
	23, // 37: smoketest.middleware.testplan.v1.Middleware.DeleteTestPlan:output_type -> smoketest.middleware.testplan.v1.DeleteTestPlanResponse
	28, // [28:38] is the sub-list for method output_type
	18, // [18:28] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_npool_smoketest_mw_v1_testplan_testplan_proto_init() }
func file_npool_smoketest_mw_v1_testplan_testplan_proto_init() {
	if File_npool_smoketest_mw_v1_testplan_testplan_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestPlanReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTestPlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTestPlanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTestPlansRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTestPlansResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTestPlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTestPlanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTestPlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTestPlanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTestPlansRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTestPlansResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTestPlanOnlyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTestPlanOnlyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistTestPlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistTestPlanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistTestPlanCondsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistTestPlanCondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountTestPlansRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountTestPlansResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTestPlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTestPlanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_smoketest_mw_v1_testplan_testplan_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_smoketest_mw_v1_testplan_testplan_proto_goTypes,
		DependencyIndexes: file_npool_smoketest_mw_v1_testplan_testplan_proto_depIdxs,
		EnumInfos:         file_npool_smoketest_mw_v1_testplan_testplan_proto_enumTypes,
		MessageInfos:      file_npool_smoketest_mw_v1_testplan_testplan_proto_msgTypes,
	}.Build()
	File_npool_smoketest_mw_v1_testplan_testplan_proto = out.File
	file_npool_smoketest_mw_v1_testplan_testplan_proto_rawDesc = nil
	file_npool_smoketest_mw_v1_testplan_testplan_proto_goTypes = nil
	file_npool_smoketest_mw_v1_testplan_testplan_proto_depIdxs = nil
}
