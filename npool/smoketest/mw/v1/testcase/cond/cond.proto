syntax = "proto3";

package smoketest.middleware.testcase.cond.v1;

option go_package = "github.com/NpoolPlatform/message/npool/smoketest/mw/v1/testcase/cond";

import "npool/smoketest/mgr/v1/testcase/cond/cond.proto";

// Service Name
service Middleware {
    rpc CreateCond     (CreateCondRequest)     returns (CreateCondResponse)     {}
    rpc UpdateCond     (UpdateCondRequest)     returns (UpdateCondResponse)     {}
    rpc GetCond        (GetCondRequest)        returns (GetCondResponse)        {}
    rpc GetCondOnly    (GetCondOnlyRequest)    returns (GetCondOnlyResponse)    {}
    rpc ExistCond      (ExistCondRequest)      returns (ExistCondResponse)      {}
    rpc DeleteCond     (DeleteCondRequest)     returns (DeleteCondResponse)     {}
}

message CreateCondRequest {
    smoketest.manager.testcase.cond.v1.CondReq Info = 10;
}

message CreateCondResponse {
    smoketest.manager.testcase.cond.v1.Cond Info = 10;
}

message CreateCondsRequest {
    repeated smoketest.manager.testcase.cond.v1.CondReq Infos = 10;
}

message CreateCondsResponse {
    repeated smoketest.manager.testcase.cond.v1.Cond Infos = 10;
}

message UpdateCondRequest {
    smoketest.manager.testcase.cond.v1.CondReq Info = 10;
}

message UpdateCondResponse {
    smoketest.manager.testcase.cond.v1.Cond Info = 10;
}

message GetCondRequest {
    string ID = 10;
}

message GetCondResponse {
    smoketest.manager.testcase.cond.v1.Cond Info = 10;
}

message GetCondOnlyRequest {
    smoketest.manager.testcase.cond.v1.Conds Conds = 10;
}

message GetCondOnlyResponse {
    smoketest.manager.testcase.cond.v1.Cond Info = 10;
}

message ExistCondRequest {
    string ID = 10;
}

message ExistCondResponse {
    bool Info = 10;
}

message DeleteCondRequest {
    smoketest.manager.testcase.cond.v1.Conds Conds = 10;
}

message DeleteCondResponse {
    smoketest.manager.testcase.cond.v1.Cond Info = 10;
}
