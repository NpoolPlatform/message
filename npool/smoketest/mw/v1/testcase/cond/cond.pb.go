// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.18.1
// source: npool/smoketest/mw/v1/testcase/cond/cond.proto

package cond

import (
	npool "github.com/NpoolPlatform/message/npool"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CondType int32

const (
	CondType_DefaultCondType CondType = 0
	CondType_PreCondition    CondType = 10
	CondType_Cleaner         CondType = 20
)

// Enum value maps for CondType.
var (
	CondType_name = map[int32]string{
		0:  "DefaultCondType",
		10: "PreCondition",
		20: "Cleaner",
	}
	CondType_value = map[string]int32{
		"DefaultCondType": 0,
		"PreCondition":    10,
		"Cleaner":         20,
	}
)

func (x CondType) Enum() *CondType {
	p := new(CondType)
	*p = x
	return p
}

func (x CondType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CondType) Descriptor() protoreflect.EnumDescriptor {
	return file_npool_smoketest_mw_v1_testcase_cond_cond_proto_enumTypes[0].Descriptor()
}

func (CondType) Type() protoreflect.EnumType {
	return &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_enumTypes[0]
}

func (x CondType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CondType.Descriptor instead.
func (CondType) EnumDescriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDescGZIP(), []int{0}
}

type CondReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             *string   `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	CondType       *CondType `protobuf:"varint,20,opt,name=CondType,proto3,enum=smoketest.middleware.testcase.cond.v1.CondType,oneof" json:"CondType,omitempty"`
	TestCaseID     *string   `protobuf:"bytes,30,opt,name=TestCaseID,proto3,oneof" json:"TestCaseID,omitempty"`
	CondTestCaseID *string   `protobuf:"bytes,40,opt,name=CondTestCaseID,proto3,oneof" json:"CondTestCaseID,omitempty"`
	Index          *uint32   `protobuf:"varint,50,opt,name=Index,proto3,oneof" json:"Index,omitempty"`
	CreatedAt      *uint32   `protobuf:"varint,60,opt,name=CreatedAt,proto3,oneof" json:"CreatedAt,omitempty"`
	ArgumentMap    *string   `protobuf:"bytes,70,opt,name=ArgumentMap,proto3,oneof" json:"ArgumentMap,omitempty"`
}

func (x *CondReq) Reset() {
	*x = CondReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CondReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CondReq) ProtoMessage() {}

func (x *CondReq) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CondReq.ProtoReflect.Descriptor instead.
func (*CondReq) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDescGZIP(), []int{0}
}

func (x *CondReq) GetID() string {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return ""
}

func (x *CondReq) GetCondType() CondType {
	if x != nil && x.CondType != nil {
		return *x.CondType
	}
	return CondType_DefaultCondType
}

func (x *CondReq) GetTestCaseID() string {
	if x != nil && x.TestCaseID != nil {
		return *x.TestCaseID
	}
	return ""
}

func (x *CondReq) GetCondTestCaseID() string {
	if x != nil && x.CondTestCaseID != nil {
		return *x.CondTestCaseID
	}
	return ""
}

func (x *CondReq) GetIndex() uint32 {
	if x != nil && x.Index != nil {
		return *x.Index
	}
	return 0
}

func (x *CondReq) GetCreatedAt() uint32 {
	if x != nil && x.CreatedAt != nil {
		return *x.CreatedAt
	}
	return 0
}

func (x *CondReq) GetArgumentMap() string {
	if x != nil && x.ArgumentMap != nil {
		return *x.ArgumentMap
	}
	return ""
}

type Cond struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: sql:"id"
	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty" sql:"id"`
	// @inject_tag: sql:"cond_type"
	CondTypeStr string   `protobuf:"bytes,20,opt,name=CondTypeStr,proto3" json:"CondTypeStr,omitempty" sql:"cond_type"`
	CondType    CondType `protobuf:"varint,30,opt,name=CondType,proto3,enum=smoketest.middleware.testcase.cond.v1.CondType" json:"CondType,omitempty"`
	// @inject_tag: sql:"test_case_id"
	TestCaseID string `protobuf:"bytes,40,opt,name=TestCaseID,proto3" json:"TestCaseID,omitempty" sql:"test_case_id"`
	// @inject_tag: sql:"cond_test_case_id"
	CondTestCaseID string `protobuf:"bytes,50,opt,name=CondTestCaseID,proto3" json:"CondTestCaseID,omitempty" sql:"cond_test_case_id"`
	// @inject_tag: sql:"index"
	Index uint32 `protobuf:"varint,60,opt,name=Index,proto3" json:"Index,omitempty" sql:"index"`
	// @inject_tag: sql:"argument_map"
	ArgumentMap string `protobuf:"bytes,70,opt,name=ArgumentMap,proto3" json:"ArgumentMap,omitempty" sql:"argument_map"`
	// @inject_tag: sql:"created_at"
	CreatedAt uint32 `protobuf:"varint,80,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty" sql:"created_at"`
	// @inject_tag: sql:"updated_at"
	UpdatedAt uint32 `protobuf:"varint,90,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty" sql:"updated_at"`
	// @inject_tag: sql:"deleted_at"
	DeletedAt uint32 `protobuf:"varint,100,opt,name=DeletedAt,proto3" json:"DeletedAt,omitempty" sql:"deleted_at"`
}

func (x *Cond) Reset() {
	*x = Cond{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cond) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cond) ProtoMessage() {}

func (x *Cond) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cond.ProtoReflect.Descriptor instead.
func (*Cond) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDescGZIP(), []int{1}
}

func (x *Cond) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Cond) GetCondTypeStr() string {
	if x != nil {
		return x.CondTypeStr
	}
	return ""
}

func (x *Cond) GetCondType() CondType {
	if x != nil {
		return x.CondType
	}
	return CondType_DefaultCondType
}

func (x *Cond) GetTestCaseID() string {
	if x != nil {
		return x.TestCaseID
	}
	return ""
}

func (x *Cond) GetCondTestCaseID() string {
	if x != nil {
		return x.CondTestCaseID
	}
	return ""
}

func (x *Cond) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Cond) GetArgumentMap() string {
	if x != nil {
		return x.ArgumentMap
	}
	return ""
}

func (x *Cond) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Cond) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Cond) GetDeletedAt() uint32 {
	if x != nil {
		return x.DeletedAt
	}
	return 0
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             *npool.StringVal `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	CondType       *npool.StringVal `protobuf:"bytes,20,opt,name=CondType,proto3,oneof" json:"CondType,omitempty"`
	TestCaseID     *npool.StringVal `protobuf:"bytes,30,opt,name=TestCaseID,proto3,oneof" json:"TestCaseID,omitempty"`
	CondTestCaseID *npool.StringVal `protobuf:"bytes,40,opt,name=CondTestCaseID,proto3,oneof" json:"CondTestCaseID,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDescGZIP(), []int{2}
}

func (x *Conds) GetID() *npool.StringVal {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetCondType() *npool.StringVal {
	if x != nil {
		return x.CondType
	}
	return nil
}

func (x *Conds) GetTestCaseID() *npool.StringVal {
	if x != nil {
		return x.TestCaseID
	}
	return nil
}

func (x *Conds) GetCondTestCaseID() *npool.StringVal {
	if x != nil {
		return x.CondTestCaseID
	}
	return nil
}

type CreateCondRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CondReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateCondRequest) Reset() {
	*x = CreateCondRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCondRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCondRequest) ProtoMessage() {}

func (x *CreateCondRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCondRequest.ProtoReflect.Descriptor instead.
func (*CreateCondRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDescGZIP(), []int{3}
}

func (x *CreateCondRequest) GetInfo() *CondReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateCondResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Cond `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateCondResponse) Reset() {
	*x = CreateCondResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCondResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCondResponse) ProtoMessage() {}

func (x *CreateCondResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCondResponse.ProtoReflect.Descriptor instead.
func (*CreateCondResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDescGZIP(), []int{4}
}

func (x *CreateCondResponse) GetInfo() *Cond {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateCondsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*CondReq `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateCondsRequest) Reset() {
	*x = CreateCondsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCondsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCondsRequest) ProtoMessage() {}

func (x *CreateCondsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCondsRequest.ProtoReflect.Descriptor instead.
func (*CreateCondsRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDescGZIP(), []int{5}
}

func (x *CreateCondsRequest) GetInfos() []*CondReq {
	if x != nil {
		return x.Infos
	}
	return nil
}

type CreateCondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Cond `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateCondsResponse) Reset() {
	*x = CreateCondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCondsResponse) ProtoMessage() {}

func (x *CreateCondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCondsResponse.ProtoReflect.Descriptor instead.
func (*CreateCondsResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDescGZIP(), []int{6}
}

func (x *CreateCondsResponse) GetInfos() []*Cond {
	if x != nil {
		return x.Infos
	}
	return nil
}

type UpdateCondRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CondReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateCondRequest) Reset() {
	*x = UpdateCondRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCondRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCondRequest) ProtoMessage() {}

func (x *UpdateCondRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCondRequest.ProtoReflect.Descriptor instead.
func (*UpdateCondRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateCondRequest) GetInfo() *CondReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateCondResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Cond `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateCondResponse) Reset() {
	*x = UpdateCondResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCondResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCondResponse) ProtoMessage() {}

func (x *UpdateCondResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCondResponse.ProtoReflect.Descriptor instead.
func (*UpdateCondResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateCondResponse) GetInfo() *Cond {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetCondRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetCondRequest) Reset() {
	*x = GetCondRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCondRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCondRequest) ProtoMessage() {}

func (x *GetCondRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCondRequest.ProtoReflect.Descriptor instead.
func (*GetCondRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDescGZIP(), []int{9}
}

func (x *GetCondRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetCondResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Cond `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetCondResponse) Reset() {
	*x = GetCondResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCondResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCondResponse) ProtoMessage() {}

func (x *GetCondResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCondResponse.ProtoReflect.Descriptor instead.
func (*GetCondResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDescGZIP(), []int{10}
}

func (x *GetCondResponse) GetInfo() *Cond {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetCondsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetCondsRequest) Reset() {
	*x = GetCondsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCondsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCondsRequest) ProtoMessage() {}

func (x *GetCondsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCondsRequest.ProtoReflect.Descriptor instead.
func (*GetCondsRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDescGZIP(), []int{11}
}

func (x *GetCondsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetCondsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetCondsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetCondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*Cond `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32  `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetCondsResponse) Reset() {
	*x = GetCondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCondsResponse) ProtoMessage() {}

func (x *GetCondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCondsResponse.ProtoReflect.Descriptor instead.
func (*GetCondsResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDescGZIP(), []int{12}
}

func (x *GetCondsResponse) GetInfos() []*Cond {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetCondsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type DeleteCondRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *CondReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteCondRequest) Reset() {
	*x = DeleteCondRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCondRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCondRequest) ProtoMessage() {}

func (x *DeleteCondRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCondRequest.ProtoReflect.Descriptor instead.
func (*DeleteCondRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteCondRequest) GetInfo() *CondReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type DeleteCondResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Cond `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteCondResponse) Reset() {
	*x = DeleteCondResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCondResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCondResponse) ProtoMessage() {}

func (x *DeleteCondResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCondResponse.ProtoReflect.Descriptor instead.
func (*DeleteCondResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteCondResponse) GetInfo() *Cond {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_smoketest_mw_v1_testcase_cond_cond_proto protoreflect.FileDescriptor

var file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73,
	0x74, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65,
	0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x25, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x1a, 0x11, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6e,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x85, 0x03, 0x0a, 0x07, 0x43,
	0x6f, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x13, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x08, 0x43,
	0x6f, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e,
	0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x48, 0x01,
	0x52, 0x08, 0x43, 0x6f, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a,
	0x0a, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x88,
	0x01, 0x01, 0x12, 0x2b, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0e, 0x43, 0x6f,
	0x6e, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12,
	0x19, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x04,
	0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x05, 0x52,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a,
	0x0b, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x18, 0x46, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x06, 0x52, 0x0b, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61,
	0x70, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x43, 0x6f, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x43, 0x6f, 0x6e, 0x64,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x61, 0x70, 0x22, 0xdf, 0x02, 0x0a, 0x04, 0x43, 0x6f, 0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x43,
	0x6f, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x12, 0x4b, 0x0a,
	0x08, 0x43, 0x6f, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2f, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x43, 0x6f, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f,
	0x6e, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x22, 0x99, 0x02, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x28,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48,
	0x00, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f,
	0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48,
	0x01, 0x52, 0x08, 0x43, 0x6f, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x38,
	0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x02, 0x52, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x43,
	0x61, 0x73, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x64,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x64, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49,
	0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x43, 0x6f, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0d,
	0x0a, 0x0b, 0x5f, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x43, 0x6f, 0x6e, 0x64, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x49, 0x44,
	0x22, 0x57, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63,
	0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x55, 0x0a, 0x12, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3f, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x5a, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x58, 0x0a, 0x13,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61,
	0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x52,
	0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x57, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x6d, 0x6f, 0x6b,
	0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x55, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63,
	0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x20, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x52, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x6d, 0x6f, 0x6b,
	0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x83, 0x01, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x42, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0x6b, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x64, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22,
	0x57, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61,
	0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x55, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73,
	0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x2a,
	0x3e, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x65, 0x72, 0x10, 0x14, 0x32,
	0x99, 0x05, 0x0a, 0x0a, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x12, 0x83,
	0x01, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x12, 0x38, 0x2e,
	0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x83, 0x01, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x64, 0x12, 0x38, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63,
	0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e,
	0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x07, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x64, 0x12, 0x35, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x73,
	0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x7d, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x36, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61,
	0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x73, 0x6d, 0x6f,
	0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x83, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x64, 0x12, 0x38, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x63, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39,
	0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x46, 0x5a, 0x44, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f,
	0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2f,
	0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2f, 0x63,
	0x6f, 0x6e, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDescOnce sync.Once
	file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDescData = file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDesc
)

func file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDescGZIP() []byte {
	file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDescOnce.Do(func() {
		file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDescData)
	})
	return file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDescData
}

var file_npool_smoketest_mw_v1_testcase_cond_cond_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_npool_smoketest_mw_v1_testcase_cond_cond_proto_goTypes = []interface{}{
	(CondType)(0),               // 0: smoketest.middleware.testcase.cond.v1.CondType
	(*CondReq)(nil),             // 1: smoketest.middleware.testcase.cond.v1.CondReq
	(*Cond)(nil),                // 2: smoketest.middleware.testcase.cond.v1.Cond
	(*Conds)(nil),               // 3: smoketest.middleware.testcase.cond.v1.Conds
	(*CreateCondRequest)(nil),   // 4: smoketest.middleware.testcase.cond.v1.CreateCondRequest
	(*CreateCondResponse)(nil),  // 5: smoketest.middleware.testcase.cond.v1.CreateCondResponse
	(*CreateCondsRequest)(nil),  // 6: smoketest.middleware.testcase.cond.v1.CreateCondsRequest
	(*CreateCondsResponse)(nil), // 7: smoketest.middleware.testcase.cond.v1.CreateCondsResponse
	(*UpdateCondRequest)(nil),   // 8: smoketest.middleware.testcase.cond.v1.UpdateCondRequest
	(*UpdateCondResponse)(nil),  // 9: smoketest.middleware.testcase.cond.v1.UpdateCondResponse
	(*GetCondRequest)(nil),      // 10: smoketest.middleware.testcase.cond.v1.GetCondRequest
	(*GetCondResponse)(nil),     // 11: smoketest.middleware.testcase.cond.v1.GetCondResponse
	(*GetCondsRequest)(nil),     // 12: smoketest.middleware.testcase.cond.v1.GetCondsRequest
	(*GetCondsResponse)(nil),    // 13: smoketest.middleware.testcase.cond.v1.GetCondsResponse
	(*DeleteCondRequest)(nil),   // 14: smoketest.middleware.testcase.cond.v1.DeleteCondRequest
	(*DeleteCondResponse)(nil),  // 15: smoketest.middleware.testcase.cond.v1.DeleteCondResponse
	(*npool.StringVal)(nil),     // 16: npool.v1.StringVal
}
var file_npool_smoketest_mw_v1_testcase_cond_cond_proto_depIdxs = []int32{
	0,  // 0: smoketest.middleware.testcase.cond.v1.CondReq.CondType:type_name -> smoketest.middleware.testcase.cond.v1.CondType
	0,  // 1: smoketest.middleware.testcase.cond.v1.Cond.CondType:type_name -> smoketest.middleware.testcase.cond.v1.CondType
	16, // 2: smoketest.middleware.testcase.cond.v1.Conds.ID:type_name -> npool.v1.StringVal
	16, // 3: smoketest.middleware.testcase.cond.v1.Conds.CondType:type_name -> npool.v1.StringVal
	16, // 4: smoketest.middleware.testcase.cond.v1.Conds.TestCaseID:type_name -> npool.v1.StringVal
	16, // 5: smoketest.middleware.testcase.cond.v1.Conds.CondTestCaseID:type_name -> npool.v1.StringVal
	1,  // 6: smoketest.middleware.testcase.cond.v1.CreateCondRequest.Info:type_name -> smoketest.middleware.testcase.cond.v1.CondReq
	2,  // 7: smoketest.middleware.testcase.cond.v1.CreateCondResponse.Info:type_name -> smoketest.middleware.testcase.cond.v1.Cond
	1,  // 8: smoketest.middleware.testcase.cond.v1.CreateCondsRequest.Infos:type_name -> smoketest.middleware.testcase.cond.v1.CondReq
	2,  // 9: smoketest.middleware.testcase.cond.v1.CreateCondsResponse.Infos:type_name -> smoketest.middleware.testcase.cond.v1.Cond
	1,  // 10: smoketest.middleware.testcase.cond.v1.UpdateCondRequest.Info:type_name -> smoketest.middleware.testcase.cond.v1.CondReq
	2,  // 11: smoketest.middleware.testcase.cond.v1.UpdateCondResponse.Info:type_name -> smoketest.middleware.testcase.cond.v1.Cond
	2,  // 12: smoketest.middleware.testcase.cond.v1.GetCondResponse.Info:type_name -> smoketest.middleware.testcase.cond.v1.Cond
	3,  // 13: smoketest.middleware.testcase.cond.v1.GetCondsRequest.Conds:type_name -> smoketest.middleware.testcase.cond.v1.Conds
	2,  // 14: smoketest.middleware.testcase.cond.v1.GetCondsResponse.Infos:type_name -> smoketest.middleware.testcase.cond.v1.Cond
	1,  // 15: smoketest.middleware.testcase.cond.v1.DeleteCondRequest.Info:type_name -> smoketest.middleware.testcase.cond.v1.CondReq
	2,  // 16: smoketest.middleware.testcase.cond.v1.DeleteCondResponse.Info:type_name -> smoketest.middleware.testcase.cond.v1.Cond
	4,  // 17: smoketest.middleware.testcase.cond.v1.Middleware.CreateCond:input_type -> smoketest.middleware.testcase.cond.v1.CreateCondRequest
	8,  // 18: smoketest.middleware.testcase.cond.v1.Middleware.UpdateCond:input_type -> smoketest.middleware.testcase.cond.v1.UpdateCondRequest
	10, // 19: smoketest.middleware.testcase.cond.v1.Middleware.GetCond:input_type -> smoketest.middleware.testcase.cond.v1.GetCondRequest
	12, // 20: smoketest.middleware.testcase.cond.v1.Middleware.GetConds:input_type -> smoketest.middleware.testcase.cond.v1.GetCondsRequest
	14, // 21: smoketest.middleware.testcase.cond.v1.Middleware.DeleteCond:input_type -> smoketest.middleware.testcase.cond.v1.DeleteCondRequest
	5,  // 22: smoketest.middleware.testcase.cond.v1.Middleware.CreateCond:output_type -> smoketest.middleware.testcase.cond.v1.CreateCondResponse
	9,  // 23: smoketest.middleware.testcase.cond.v1.Middleware.UpdateCond:output_type -> smoketest.middleware.testcase.cond.v1.UpdateCondResponse
	11, // 24: smoketest.middleware.testcase.cond.v1.Middleware.GetCond:output_type -> smoketest.middleware.testcase.cond.v1.GetCondResponse
	13, // 25: smoketest.middleware.testcase.cond.v1.Middleware.GetConds:output_type -> smoketest.middleware.testcase.cond.v1.GetCondsResponse
	15, // 26: smoketest.middleware.testcase.cond.v1.Middleware.DeleteCond:output_type -> smoketest.middleware.testcase.cond.v1.DeleteCondResponse
	22, // [22:27] is the sub-list for method output_type
	17, // [17:22] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_npool_smoketest_mw_v1_testcase_cond_cond_proto_init() }
func file_npool_smoketest_mw_v1_testcase_cond_cond_proto_init() {
	if File_npool_smoketest_mw_v1_testcase_cond_cond_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CondReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cond); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCondRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCondResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCondsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCondRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCondResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCondRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCondResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCondsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCondRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCondResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_smoketest_mw_v1_testcase_cond_cond_proto_goTypes,
		DependencyIndexes: file_npool_smoketest_mw_v1_testcase_cond_cond_proto_depIdxs,
		EnumInfos:         file_npool_smoketest_mw_v1_testcase_cond_cond_proto_enumTypes,
		MessageInfos:      file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes,
	}.Build()
	File_npool_smoketest_mw_v1_testcase_cond_cond_proto = out.File
	file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDesc = nil
	file_npool_smoketest_mw_v1_testcase_cond_cond_proto_goTypes = nil
	file_npool_smoketest_mw_v1_testcase_cond_cond_proto_depIdxs = nil
}
