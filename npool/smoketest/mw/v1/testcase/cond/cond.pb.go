// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: npool/smoketest/mw/v1/testcase/cond/cond.proto

package cond

import (
	cond "github.com/NpoolPlatform/message/npool/smoketest/mgr/v1/testcase/cond"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateCondRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *cond.CondReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateCondRequest) Reset() {
	*x = CreateCondRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCondRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCondRequest) ProtoMessage() {}

func (x *CreateCondRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCondRequest.ProtoReflect.Descriptor instead.
func (*CreateCondRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDescGZIP(), []int{0}
}

func (x *CreateCondRequest) GetInfo() *cond.CondReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateCondResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *cond.Cond `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateCondResponse) Reset() {
	*x = CreateCondResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCondResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCondResponse) ProtoMessage() {}

func (x *CreateCondResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCondResponse.ProtoReflect.Descriptor instead.
func (*CreateCondResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDescGZIP(), []int{1}
}

func (x *CreateCondResponse) GetInfo() *cond.Cond {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateCondsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*cond.CondReq `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateCondsRequest) Reset() {
	*x = CreateCondsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCondsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCondsRequest) ProtoMessage() {}

func (x *CreateCondsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCondsRequest.ProtoReflect.Descriptor instead.
func (*CreateCondsRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDescGZIP(), []int{2}
}

func (x *CreateCondsRequest) GetInfos() []*cond.CondReq {
	if x != nil {
		return x.Infos
	}
	return nil
}

type CreateCondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*cond.Cond `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateCondsResponse) Reset() {
	*x = CreateCondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCondsResponse) ProtoMessage() {}

func (x *CreateCondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCondsResponse.ProtoReflect.Descriptor instead.
func (*CreateCondsResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDescGZIP(), []int{3}
}

func (x *CreateCondsResponse) GetInfos() []*cond.Cond {
	if x != nil {
		return x.Infos
	}
	return nil
}

type UpdateCondRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *cond.CondReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateCondRequest) Reset() {
	*x = UpdateCondRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCondRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCondRequest) ProtoMessage() {}

func (x *UpdateCondRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCondRequest.ProtoReflect.Descriptor instead.
func (*UpdateCondRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateCondRequest) GetInfo() *cond.CondReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateCondResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *cond.Cond `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateCondResponse) Reset() {
	*x = UpdateCondResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCondResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCondResponse) ProtoMessage() {}

func (x *UpdateCondResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCondResponse.ProtoReflect.Descriptor instead.
func (*UpdateCondResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateCondResponse) GetInfo() *cond.Cond {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetCondRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetCondRequest) Reset() {
	*x = GetCondRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCondRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCondRequest) ProtoMessage() {}

func (x *GetCondRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCondRequest.ProtoReflect.Descriptor instead.
func (*GetCondRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDescGZIP(), []int{6}
}

func (x *GetCondRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetCondResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *cond.Cond `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetCondResponse) Reset() {
	*x = GetCondResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCondResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCondResponse) ProtoMessage() {}

func (x *GetCondResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCondResponse.ProtoReflect.Descriptor instead.
func (*GetCondResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDescGZIP(), []int{7}
}

func (x *GetCondResponse) GetInfo() *cond.Cond {
	if x != nil {
		return x.Info
	}
	return nil
}

type GetCondsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info   *cond.Cond `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
	Offset int32      `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32      `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetCondsRequest) Reset() {
	*x = GetCondsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCondsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCondsRequest) ProtoMessage() {}

func (x *GetCondsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCondsRequest.ProtoReflect.Descriptor instead.
func (*GetCondsRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDescGZIP(), []int{8}
}

func (x *GetCondsRequest) GetInfo() *cond.Cond {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *GetCondsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetCondsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetCondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info  []*cond.Cond `protobuf:"bytes,10,rep,name=Info,proto3" json:"Info,omitempty"`
	Total uint32       `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetCondsResponse) Reset() {
	*x = GetCondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCondsResponse) ProtoMessage() {}

func (x *GetCondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCondsResponse.ProtoReflect.Descriptor instead.
func (*GetCondsResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDescGZIP(), []int{9}
}

func (x *GetCondsResponse) GetInfo() []*cond.Cond {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *GetCondsResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetCondOnlyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *cond.Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *GetCondOnlyRequest) Reset() {
	*x = GetCondOnlyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCondOnlyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCondOnlyRequest) ProtoMessage() {}

func (x *GetCondOnlyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCondOnlyRequest.ProtoReflect.Descriptor instead.
func (*GetCondOnlyRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDescGZIP(), []int{10}
}

func (x *GetCondOnlyRequest) GetConds() *cond.Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type GetCondOnlyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *cond.Cond `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetCondOnlyResponse) Reset() {
	*x = GetCondOnlyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCondOnlyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCondOnlyResponse) ProtoMessage() {}

func (x *GetCondOnlyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCondOnlyResponse.ProtoReflect.Descriptor instead.
func (*GetCondOnlyResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDescGZIP(), []int{11}
}

func (x *GetCondOnlyResponse) GetInfo() *cond.Cond {
	if x != nil {
		return x.Info
	}
	return nil
}

type ExistCondRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ExistCondRequest) Reset() {
	*x = ExistCondRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistCondRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistCondRequest) ProtoMessage() {}

func (x *ExistCondRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistCondRequest.ProtoReflect.Descriptor instead.
func (*ExistCondRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDescGZIP(), []int{12}
}

func (x *ExistCondRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ExistCondResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistCondResponse) Reset() {
	*x = ExistCondResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistCondResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistCondResponse) ProtoMessage() {}

func (x *ExistCondResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistCondResponse.ProtoReflect.Descriptor instead.
func (*ExistCondResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDescGZIP(), []int{13}
}

func (x *ExistCondResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type DeleteCondRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *cond.CondReq `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteCondRequest) Reset() {
	*x = DeleteCondRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCondRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCondRequest) ProtoMessage() {}

func (x *DeleteCondRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCondRequest.ProtoReflect.Descriptor instead.
func (*DeleteCondRequest) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteCondRequest) GetInfo() *cond.CondReq {
	if x != nil {
		return x.Info
	}
	return nil
}

type DeleteCondResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *cond.Cond `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteCondResponse) Reset() {
	*x = DeleteCondResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCondResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCondResponse) ProtoMessage() {}

func (x *DeleteCondResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCondResponse.ProtoReflect.Descriptor instead.
func (*DeleteCondResponse) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDescGZIP(), []int{15}
}

func (x *DeleteCondResponse) GetInfo() *cond.Cond {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_smoketest_mw_v1_testcase_cond_cond_proto protoreflect.FileDescriptor

var file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73,
	0x74, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65,
	0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x25, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x1a, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x73,
	0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x6d, 0x67, 0x72, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x2f, 0x63, 0x6f,
	0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x54, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x6d,
	0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x52,
	0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x57, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x63, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x55, 0x0a, 0x13, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x05, 0x49, 0x6e, 0x66,
	0x6f, 0x73, 0x22, 0x54, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61,
	0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x52, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c,
	0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73,
	0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x20, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x4f,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3c, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x7d, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3c, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x66,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x55, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x05,
	0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x6d,
	0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x53, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x04, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x22, 0x0a, 0x10, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x27, 0x0a, 0x11, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x54, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x52, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x6d, 0x6f, 0x6b,
	0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0xa5, 0x07, 0x0a, 0x0a, 0x4d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x0a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x12, 0x38, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x39, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69,
	0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x83,
	0x01, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x12, 0x38, 0x2e,
	0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x12,
	0x35, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x7d, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x36, 0x2e, 0x73,
	0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x63, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x86, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12,
	0x39, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x4f,
	0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x73, 0x6d, 0x6f,
	0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x80, 0x01, 0x0a, 0x09, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x12, 0x37, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x38, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64,
	0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x83, 0x01, 0x0a, 0x0a,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x12, 0x38, 0x2e, 0x73, 0x6d, 0x6f,
	0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x64, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x63, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x42, 0x46, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x73, 0x6d, 0x6f, 0x6b,
	0x65, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74,
	0x63, 0x61, 0x73, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDescOnce sync.Once
	file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDescData = file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDesc
)

func file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDescGZIP() []byte {
	file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDescOnce.Do(func() {
		file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDescData)
	})
	return file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDescData
}

var file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_npool_smoketest_mw_v1_testcase_cond_cond_proto_goTypes = []interface{}{
	(*CreateCondRequest)(nil),   // 0: smoketest.middleware.testcase.cond.v1.CreateCondRequest
	(*CreateCondResponse)(nil),  // 1: smoketest.middleware.testcase.cond.v1.CreateCondResponse
	(*CreateCondsRequest)(nil),  // 2: smoketest.middleware.testcase.cond.v1.CreateCondsRequest
	(*CreateCondsResponse)(nil), // 3: smoketest.middleware.testcase.cond.v1.CreateCondsResponse
	(*UpdateCondRequest)(nil),   // 4: smoketest.middleware.testcase.cond.v1.UpdateCondRequest
	(*UpdateCondResponse)(nil),  // 5: smoketest.middleware.testcase.cond.v1.UpdateCondResponse
	(*GetCondRequest)(nil),      // 6: smoketest.middleware.testcase.cond.v1.GetCondRequest
	(*GetCondResponse)(nil),     // 7: smoketest.middleware.testcase.cond.v1.GetCondResponse
	(*GetCondsRequest)(nil),     // 8: smoketest.middleware.testcase.cond.v1.GetCondsRequest
	(*GetCondsResponse)(nil),    // 9: smoketest.middleware.testcase.cond.v1.GetCondsResponse
	(*GetCondOnlyRequest)(nil),  // 10: smoketest.middleware.testcase.cond.v1.GetCondOnlyRequest
	(*GetCondOnlyResponse)(nil), // 11: smoketest.middleware.testcase.cond.v1.GetCondOnlyResponse
	(*ExistCondRequest)(nil),    // 12: smoketest.middleware.testcase.cond.v1.ExistCondRequest
	(*ExistCondResponse)(nil),   // 13: smoketest.middleware.testcase.cond.v1.ExistCondResponse
	(*DeleteCondRequest)(nil),   // 14: smoketest.middleware.testcase.cond.v1.DeleteCondRequest
	(*DeleteCondResponse)(nil),  // 15: smoketest.middleware.testcase.cond.v1.DeleteCondResponse
	(*cond.CondReq)(nil),        // 16: smoketest.manager.testcase.cond.v1.CondReq
	(*cond.Cond)(nil),           // 17: smoketest.manager.testcase.cond.v1.Cond
	(*cond.Conds)(nil),          // 18: smoketest.manager.testcase.cond.v1.Conds
}
var file_npool_smoketest_mw_v1_testcase_cond_cond_proto_depIdxs = []int32{
	16, // 0: smoketest.middleware.testcase.cond.v1.CreateCondRequest.Info:type_name -> smoketest.manager.testcase.cond.v1.CondReq
	17, // 1: smoketest.middleware.testcase.cond.v1.CreateCondResponse.Info:type_name -> smoketest.manager.testcase.cond.v1.Cond
	16, // 2: smoketest.middleware.testcase.cond.v1.CreateCondsRequest.Infos:type_name -> smoketest.manager.testcase.cond.v1.CondReq
	17, // 3: smoketest.middleware.testcase.cond.v1.CreateCondsResponse.Infos:type_name -> smoketest.manager.testcase.cond.v1.Cond
	16, // 4: smoketest.middleware.testcase.cond.v1.UpdateCondRequest.Info:type_name -> smoketest.manager.testcase.cond.v1.CondReq
	17, // 5: smoketest.middleware.testcase.cond.v1.UpdateCondResponse.Info:type_name -> smoketest.manager.testcase.cond.v1.Cond
	17, // 6: smoketest.middleware.testcase.cond.v1.GetCondResponse.Info:type_name -> smoketest.manager.testcase.cond.v1.Cond
	17, // 7: smoketest.middleware.testcase.cond.v1.GetCondsRequest.Info:type_name -> smoketest.manager.testcase.cond.v1.Cond
	17, // 8: smoketest.middleware.testcase.cond.v1.GetCondsResponse.Info:type_name -> smoketest.manager.testcase.cond.v1.Cond
	18, // 9: smoketest.middleware.testcase.cond.v1.GetCondOnlyRequest.Conds:type_name -> smoketest.manager.testcase.cond.v1.Conds
	17, // 10: smoketest.middleware.testcase.cond.v1.GetCondOnlyResponse.Info:type_name -> smoketest.manager.testcase.cond.v1.Cond
	16, // 11: smoketest.middleware.testcase.cond.v1.DeleteCondRequest.Info:type_name -> smoketest.manager.testcase.cond.v1.CondReq
	17, // 12: smoketest.middleware.testcase.cond.v1.DeleteCondResponse.Info:type_name -> smoketest.manager.testcase.cond.v1.Cond
	0,  // 13: smoketest.middleware.testcase.cond.v1.Middleware.CreateCond:input_type -> smoketest.middleware.testcase.cond.v1.CreateCondRequest
	4,  // 14: smoketest.middleware.testcase.cond.v1.Middleware.UpdateCond:input_type -> smoketest.middleware.testcase.cond.v1.UpdateCondRequest
	6,  // 15: smoketest.middleware.testcase.cond.v1.Middleware.GetCond:input_type -> smoketest.middleware.testcase.cond.v1.GetCondRequest
	8,  // 16: smoketest.middleware.testcase.cond.v1.Middleware.GetConds:input_type -> smoketest.middleware.testcase.cond.v1.GetCondsRequest
	10, // 17: smoketest.middleware.testcase.cond.v1.Middleware.GetCondOnly:input_type -> smoketest.middleware.testcase.cond.v1.GetCondOnlyRequest
	12, // 18: smoketest.middleware.testcase.cond.v1.Middleware.ExistCond:input_type -> smoketest.middleware.testcase.cond.v1.ExistCondRequest
	14, // 19: smoketest.middleware.testcase.cond.v1.Middleware.DeleteCond:input_type -> smoketest.middleware.testcase.cond.v1.DeleteCondRequest
	1,  // 20: smoketest.middleware.testcase.cond.v1.Middleware.CreateCond:output_type -> smoketest.middleware.testcase.cond.v1.CreateCondResponse
	5,  // 21: smoketest.middleware.testcase.cond.v1.Middleware.UpdateCond:output_type -> smoketest.middleware.testcase.cond.v1.UpdateCondResponse
	7,  // 22: smoketest.middleware.testcase.cond.v1.Middleware.GetCond:output_type -> smoketest.middleware.testcase.cond.v1.GetCondResponse
	9,  // 23: smoketest.middleware.testcase.cond.v1.Middleware.GetConds:output_type -> smoketest.middleware.testcase.cond.v1.GetCondsResponse
	11, // 24: smoketest.middleware.testcase.cond.v1.Middleware.GetCondOnly:output_type -> smoketest.middleware.testcase.cond.v1.GetCondOnlyResponse
	13, // 25: smoketest.middleware.testcase.cond.v1.Middleware.ExistCond:output_type -> smoketest.middleware.testcase.cond.v1.ExistCondResponse
	15, // 26: smoketest.middleware.testcase.cond.v1.Middleware.DeleteCond:output_type -> smoketest.middleware.testcase.cond.v1.DeleteCondResponse
	20, // [20:27] is the sub-list for method output_type
	13, // [13:20] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_npool_smoketest_mw_v1_testcase_cond_cond_proto_init() }
func file_npool_smoketest_mw_v1_testcase_cond_cond_proto_init() {
	if File_npool_smoketest_mw_v1_testcase_cond_cond_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCondRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCondResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCondsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCondRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCondResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCondRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCondResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCondsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCondOnlyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCondOnlyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistCondRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistCondResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCondRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCondResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_smoketest_mw_v1_testcase_cond_cond_proto_goTypes,
		DependencyIndexes: file_npool_smoketest_mw_v1_testcase_cond_cond_proto_depIdxs,
		MessageInfos:      file_npool_smoketest_mw_v1_testcase_cond_cond_proto_msgTypes,
	}.Build()
	File_npool_smoketest_mw_v1_testcase_cond_cond_proto = out.File
	file_npool_smoketest_mw_v1_testcase_cond_cond_proto_rawDesc = nil
	file_npool_smoketest_mw_v1_testcase_cond_cond_proto_goTypes = nil
	file_npool_smoketest_mw_v1_testcase_cond_cond_proto_depIdxs = nil
}
