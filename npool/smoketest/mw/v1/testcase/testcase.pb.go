// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.20.1
// source: npool/smoketest/mw/v1/testcase/testcase.proto

package testcase

import (
	npool "github.com/NpoolPlatform/message/npool"
	relatedtestcase "github.com/NpoolPlatform/message/npool/smoketest/mgr/v1/relatedtestcase"
	testcase "github.com/NpoolPlatform/message/npool/smoketest/mgr/v1/testcase"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           *npool.StringVal `protobuf:"bytes,10,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	ModuleID     *npool.StringVal `protobuf:"bytes,20,opt,name=ModuleID,proto3,oneof" json:"ModuleID,omitempty"`
	ApiID        *npool.StringVal `protobuf:"bytes,30,opt,name=ApiID,proto3,oneof" json:"ApiID,omitempty"`
	TestcaseType *npool.StringVal `protobuf:"bytes,40,opt,name=TestcaseType,proto3,oneof" json:"TestcaseType,omitempty"`
	Deprecated   *npool.BoolVal   `protobuf:"bytes,50,opt,name=Deprecated,proto3,oneof" json:"Deprecated,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testcase_testcase_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testcase_testcase_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testcase_testcase_proto_rawDescGZIP(), []int{0}
}

func (x *Conds) GetID() *npool.StringVal {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetModuleID() *npool.StringVal {
	if x != nil {
		return x.ModuleID
	}
	return nil
}

func (x *Conds) GetApiID() *npool.StringVal {
	if x != nil {
		return x.ApiID
	}
	return nil
}

func (x *Conds) GetTestcaseType() *npool.StringVal {
	if x != nil {
		return x.TestcaseType
	}
	return nil
}

func (x *Conds) GetDeprecated() *npool.BoolVal {
	if x != nil {
		return x.Deprecated
	}
	return nil
}

type TestCase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                string                             `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
	Name              string                             `protobuf:"bytes,20,opt,name=Name,proto3" json:"Name,omitempty"`
	Description       string                             `protobuf:"bytes,30,opt,name=Description,proto3" json:"Description,omitempty"`
	ModuleID          string                             `protobuf:"bytes,40,opt,name=ModuleID,proto3" json:"ModuleID,omitempty"`
	ModuleName        string                             `protobuf:"bytes,50,opt,name=ModuleName,proto3" json:"ModuleName,omitempty"`
	ApiID             string                             `protobuf:"bytes,60,opt,name=ApiID,proto3" json:"ApiID,omitempty"`
	ExpectationResult string                             `protobuf:"bytes,70,opt,name=ExpectationResult,proto3" json:"ExpectationResult,omitempty"`
	TestCaseType      testcase.TestCaseType              `protobuf:"varint,80,opt,name=TestCaseType,proto3,enum=smoketest.manager.testcase.v1.TestCaseType" json:"TestCaseType,omitempty"`
	Deprecated        bool                               `protobuf:"varint,90,opt,name=Deprecated,proto3" json:"Deprecated,omitempty"`
	RelatedTestCases  []*relatedtestcase.RelatedTestCase `protobuf:"bytes,100,rep,name=RelatedTestCases,proto3" json:"RelatedTestCases,omitempty"`
	CreatedAt         uint32                             `protobuf:"varint,110,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt         uint32                             `protobuf:"varint,120,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (x *TestCase) Reset() {
	*x = TestCase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_smoketest_mw_v1_testcase_testcase_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestCase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestCase) ProtoMessage() {}

func (x *TestCase) ProtoReflect() protoreflect.Message {
	mi := &file_npool_smoketest_mw_v1_testcase_testcase_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestCase.ProtoReflect.Descriptor instead.
func (*TestCase) Descriptor() ([]byte, []int) {
	return file_npool_smoketest_mw_v1_testcase_testcase_proto_rawDescGZIP(), []int{1}
}

func (x *TestCase) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *TestCase) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestCase) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TestCase) GetModuleID() string {
	if x != nil {
		return x.ModuleID
	}
	return ""
}

func (x *TestCase) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

func (x *TestCase) GetApiID() string {
	if x != nil {
		return x.ApiID
	}
	return ""
}

func (x *TestCase) GetExpectationResult() string {
	if x != nil {
		return x.ExpectationResult
	}
	return ""
}

func (x *TestCase) GetTestCaseType() testcase.TestCaseType {
	if x != nil {
		return x.TestCaseType
	}
	return testcase.TestCaseType(0)
}

func (x *TestCase) GetDeprecated() bool {
	if x != nil {
		return x.Deprecated
	}
	return false
}

func (x *TestCase) GetRelatedTestCases() []*relatedtestcase.RelatedTestCase {
	if x != nil {
		return x.RelatedTestCases
	}
	return nil
}

func (x *TestCase) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *TestCase) GetUpdatedAt() uint32 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

var File_npool_smoketest_mw_v1_testcase_testcase_proto protoreflect.FileDescriptor

var file_npool_smoketest_mw_v1_testcase_testcase_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73,
	0x74, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65,
	0x2f, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x20, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x1a, 0x11, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x73, 0x6d, 0x6f, 0x6b,
	0x65, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x6d, 0x67, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73,
	0x74, 0x63, 0x61, 0x73, 0x65, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3c, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x73, 0x6d, 0x6f, 0x6b,
	0x65, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x6d, 0x67, 0x72, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2f, 0x72, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xcb, 0x02, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x00, 0x52,
	0x02, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a, 0x08, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x01, 0x52,
	0x08, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x05,
	0x41, 0x70, 0x69, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70,
	0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x48, 0x02, 0x52, 0x05, 0x41, 0x70, 0x69, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0c,
	0x54, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x48, 0x03, 0x52, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x63,
	0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x0a, 0x44, 0x65,
	0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x48, 0x04, 0x52, 0x0a, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x88,
	0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x41, 0x70, 0x69, 0x49, 0x44,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x54, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x22, 0xe0, 0x03, 0x0a, 0x08, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x18,
	0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x41, 0x70, 0x69, 0x49, 0x44, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x41, 0x70, 0x69, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x46, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x4f, 0x0a, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x73, 0x6d, 0x6f, 0x6b,
	0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x63, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61,
	0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x54, 0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x5a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x61, 0x0a, 0x10, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x65, 0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x61, 0x73, 0x65, 0x52, 0x10, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x61, 0x73, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x32, 0x09, 0x0a, 0x07, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x42, 0x41,
	0x5a, 0x3f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f,
	0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x73, 0x6d, 0x6f, 0x6b, 0x65, 0x74, 0x65,
	0x73, 0x74, 0x2f, 0x6d, 0x77, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x63, 0x61, 0x73,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_smoketest_mw_v1_testcase_testcase_proto_rawDescOnce sync.Once
	file_npool_smoketest_mw_v1_testcase_testcase_proto_rawDescData = file_npool_smoketest_mw_v1_testcase_testcase_proto_rawDesc
)

func file_npool_smoketest_mw_v1_testcase_testcase_proto_rawDescGZIP() []byte {
	file_npool_smoketest_mw_v1_testcase_testcase_proto_rawDescOnce.Do(func() {
		file_npool_smoketest_mw_v1_testcase_testcase_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_smoketest_mw_v1_testcase_testcase_proto_rawDescData)
	})
	return file_npool_smoketest_mw_v1_testcase_testcase_proto_rawDescData
}

var file_npool_smoketest_mw_v1_testcase_testcase_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_npool_smoketest_mw_v1_testcase_testcase_proto_goTypes = []interface{}{
	(*Conds)(nil),                           // 0: smoketest.middleware.testcase.v1.Conds
	(*TestCase)(nil),                        // 1: smoketest.middleware.testcase.v1.TestCase
	(*npool.StringVal)(nil),                 // 2: npool.v1.StringVal
	(*npool.BoolVal)(nil),                   // 3: npool.v1.BoolVal
	(testcase.TestCaseType)(0),              // 4: smoketest.manager.testcase.v1.TestCaseType
	(*relatedtestcase.RelatedTestCase)(nil), // 5: smoketest.manager.relatedtestcase.v1.RelatedTestCase
}
var file_npool_smoketest_mw_v1_testcase_testcase_proto_depIdxs = []int32{
	2, // 0: smoketest.middleware.testcase.v1.Conds.ID:type_name -> npool.v1.StringVal
	2, // 1: smoketest.middleware.testcase.v1.Conds.ModuleID:type_name -> npool.v1.StringVal
	2, // 2: smoketest.middleware.testcase.v1.Conds.ApiID:type_name -> npool.v1.StringVal
	2, // 3: smoketest.middleware.testcase.v1.Conds.TestcaseType:type_name -> npool.v1.StringVal
	3, // 4: smoketest.middleware.testcase.v1.Conds.Deprecated:type_name -> npool.v1.BoolVal
	4, // 5: smoketest.middleware.testcase.v1.TestCase.TestCaseType:type_name -> smoketest.manager.testcase.v1.TestCaseType
	5, // 6: smoketest.middleware.testcase.v1.TestCase.RelatedTestCases:type_name -> smoketest.manager.relatedtestcase.v1.RelatedTestCase
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_npool_smoketest_mw_v1_testcase_testcase_proto_init() }
func file_npool_smoketest_mw_v1_testcase_testcase_proto_init() {
	if File_npool_smoketest_mw_v1_testcase_testcase_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_smoketest_mw_v1_testcase_testcase_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_smoketest_mw_v1_testcase_testcase_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestCase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_smoketest_mw_v1_testcase_testcase_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_smoketest_mw_v1_testcase_testcase_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_smoketest_mw_v1_testcase_testcase_proto_goTypes,
		DependencyIndexes: file_npool_smoketest_mw_v1_testcase_testcase_proto_depIdxs,
		MessageInfos:      file_npool_smoketest_mw_v1_testcase_testcase_proto_msgTypes,
	}.Build()
	File_npool_smoketest_mw_v1_testcase_testcase_proto = out.File
	file_npool_smoketest_mw_v1_testcase_testcase_proto_rawDesc = nil
	file_npool_smoketest_mw_v1_testcase_testcase_proto_goTypes = nil
	file_npool_smoketest_mw_v1_testcase_testcase_proto_depIdxs = nil
}
