syntax = "proto3";

package smoketest.middleware.testcase.v1;

option go_package = "github.com/NpoolPlatform/message/npool/smoketest/mw/v1/testcase";

import "npool/npool.proto";
import "npool/smoketest/mgr/v1/testcase/testcase.proto";

// Service Name
service Middleware {
    rpc CreateTestCase        (CreateTestCaseRequest)       returns (CreateTestCaseResponse)       {}
    rpc UpdateTestCase        (UpdateTestCaseRequest)       returns (UpdateTestCaseResponse)       {}

    rpc GetTestCases          (GetTestCasesRequest)         returns (GetTestCasesResponse)         {}
    rpc GetTestCase           (GetTestCaseRequest)         returns (GetTestCaseResponse)         {}

    rpc DeleteTestCase        (DeleteTestCaseRequest)       returns (DeleteTestCaseResponse)       {}
}

message Conds {
    optional npool.v1.StringVal      ID           = 10;
    optional npool.v1.StringVal      ModuleID     = 20;
    optional npool.v1.StringVal      ApiID        = 30;
    optional npool.v1.StringVal      TestcaseType = 40;
    optional npool.v1.BoolVal        Deprecated   = 50;
}


message TestCase {
    // @inject_tag: sql:"id"
    string          ID                                                = 10;
    // @inject_tag: sql:"name"
    string          Name                                              = 20;
    // @inject_tag: sql:"description"
    string          Description                                       = 30;
    // @inject_tag: sql:"module_id"
    string          ModuleID                                          = 40;
    // @inject_tag: sql:"module_name"
    string          ModuleName                                        = 50;
    // @inject_tag: sql:"api_id"
    string          ApiID                                             = 60;
    // @inject_tag: sql:"expectation_result"
    string          ExpectationResult                                 = 70;
    // @inject_tag: sql:"arguments"
    string          Arguments                                         = 130;
    smoketest.manager.testcase.v1.TestCaseType    TestCaseType        = 80;
    // @inject_tag: sql:"deprecated"
    bool            Deprecated                                        = 90;
    // @inject_tag: sql:"created_at"
    uint32          CreatedAt                                         = 110;
    // @inject_tag: sql:"updated_at"
    uint32          UpdatedAt                                         = 120;
}

message CreateTestCaseReq {
    optional string          ID                                                         = 10;
    optional string          Name                                                       = 20;
    optional string          Description                                                = 30;
    optional string          ModuleID                                                   = 40;
    optional string          ModuleName                                                 = 50;
    optional string          ApiID                                                      = 60;
    optional string          Arguments                                                  = 70;
    optional string          ArgTypeDescription                                         = 80;
    optional string          ExpectationResult                                          = 90;
    optional smoketest.manager.testcase.v1.TestCaseType    TestCaseType                 = 100;
    optional bool            Deprecated                                                 = 110;
}

message CreateTestCaseRequest {
    CreateTestCaseReq Info = 10;
}

message CreateTestCaseResponse {
    TestCase Info = 10;
}


message DeleteTestCaseRequest {
    string ID        = 10;
}

message DeleteTestCaseResponse {
    TestCase Info = 10;
}

message GetTestCasesRequest {
    smoketest.manager.testcase.v1.Conds Conds = 10;
    int32  Offset = 20;
    int32  Limit  = 30;
}

message GetTestCasesResponse {
    repeated TestCase Infos = 10;
    uint32        Total   = 20;
}

message GetTestCaseRequest {
    string ID = 10;
}

message GetTestCaseResponse {
    TestCase Info = 10;
}

message UpdateTestCaseRequest {
    CreateTestCaseReq info = 10;
}

message UpdateTestCaseResponse {
    TestCase Info = 10;
}