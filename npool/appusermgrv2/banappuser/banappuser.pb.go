// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: npool/appusermgrv2/banappuser/banappuser.proto

package banappuser

import (
	_ "github.com/NpoolPlatform/message/npool"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/structpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BanAppUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  *string `protobuf:"bytes,10,opt,name=UserID,proto3,oneof" json:"UserID,omitempty"`
	Message *string `protobuf:"bytes,20,opt,name=Message,proto3,oneof" json:"Message,omitempty"`
	ID      *string `protobuf:"bytes,30,opt,name=ID,proto3,oneof" json:"ID,omitempty"`
	AppID   *string `protobuf:"bytes,40,opt,name=AppID,proto3,oneof" json:"AppID,omitempty"`
}

func (x *BanAppUser) Reset() {
	*x = BanAppUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BanAppUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BanAppUser) ProtoMessage() {}

func (x *BanAppUser) ProtoReflect() protoreflect.Message {
	mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BanAppUser.ProtoReflect.Descriptor instead.
func (*BanAppUser) Descriptor() ([]byte, []int) {
	return file_npool_appusermgrv2_banappuser_banappuser_proto_rawDescGZIP(), []int{0}
}

func (x *BanAppUser) GetUserID() string {
	if x != nil && x.UserID != nil {
		return *x.UserID
	}
	return ""
}

func (x *BanAppUser) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *BanAppUser) GetID() string {
	if x != nil && x.ID != nil {
		return *x.ID
	}
	return ""
}

func (x *BanAppUser) GetAppID() string {
	if x != nil && x.AppID != nil {
		return *x.AppID
	}
	return ""
}

type BanAppUserRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  string `protobuf:"bytes,10,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Message string `protobuf:"bytes,20,opt,name=Message,proto3" json:"Message,omitempty"`
	ID      string `protobuf:"bytes,30,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID   string `protobuf:"bytes,40,opt,name=AppID,proto3" json:"AppID,omitempty"`
}

func (x *BanAppUserRes) Reset() {
	*x = BanAppUserRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BanAppUserRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BanAppUserRes) ProtoMessage() {}

func (x *BanAppUserRes) ProtoReflect() protoreflect.Message {
	mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BanAppUserRes.ProtoReflect.Descriptor instead.
func (*BanAppUserRes) Descriptor() ([]byte, []int) {
	return file_npool_appusermgrv2_banappuser_banappuser_proto_rawDescGZIP(), []int{1}
}

func (x *BanAppUserRes) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *BanAppUserRes) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BanAppUserRes) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *BanAppUserRes) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

type CreateBanAppUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *BanAppUser `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateBanAppUserRequest) Reset() {
	*x = CreateBanAppUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBanAppUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBanAppUserRequest) ProtoMessage() {}

func (x *CreateBanAppUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBanAppUserRequest.ProtoReflect.Descriptor instead.
func (*CreateBanAppUserRequest) Descriptor() ([]byte, []int) {
	return file_npool_appusermgrv2_banappuser_banappuser_proto_rawDescGZIP(), []int{2}
}

func (x *CreateBanAppUserRequest) GetInfo() *BanAppUser {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateBanAppUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *BanAppUserRes `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateBanAppUserResponse) Reset() {
	*x = CreateBanAppUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBanAppUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBanAppUserResponse) ProtoMessage() {}

func (x *CreateBanAppUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBanAppUserResponse.ProtoReflect.Descriptor instead.
func (*CreateBanAppUserResponse) Descriptor() ([]byte, []int) {
	return file_npool_appusermgrv2_banappuser_banappuser_proto_rawDescGZIP(), []int{3}
}

func (x *CreateBanAppUserResponse) GetInfo() *BanAppUserRes {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateBanAppUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*BanAppUser `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateBanAppUsersRequest) Reset() {
	*x = CreateBanAppUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBanAppUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBanAppUsersRequest) ProtoMessage() {}

func (x *CreateBanAppUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBanAppUsersRequest.ProtoReflect.Descriptor instead.
func (*CreateBanAppUsersRequest) Descriptor() ([]byte, []int) {
	return file_npool_appusermgrv2_banappuser_banappuser_proto_rawDescGZIP(), []int{4}
}

func (x *CreateBanAppUsersRequest) GetInfos() []*BanAppUser {
	if x != nil {
		return x.Infos
	}
	return nil
}

type CreateBanAppUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*BanAppUserRes `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
}

func (x *CreateBanAppUsersResponse) Reset() {
	*x = CreateBanAppUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBanAppUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBanAppUsersResponse) ProtoMessage() {}

func (x *CreateBanAppUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBanAppUsersResponse.ProtoReflect.Descriptor instead.
func (*CreateBanAppUsersResponse) Descriptor() ([]byte, []int) {
	return file_npool_appusermgrv2_banappuser_banappuser_proto_rawDescGZIP(), []int{5}
}

func (x *CreateBanAppUsersResponse) GetInfos() []*BanAppUserRes {
	if x != nil {
		return x.Infos
	}
	return nil
}

type GetBanAppUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetBanAppUserRequest) Reset() {
	*x = GetBanAppUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBanAppUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBanAppUserRequest) ProtoMessage() {}

func (x *GetBanAppUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBanAppUserRequest.ProtoReflect.Descriptor instead.
func (*GetBanAppUserRequest) Descriptor() ([]byte, []int) {
	return file_npool_appusermgrv2_banappuser_banappuser_proto_rawDescGZIP(), []int{6}
}

func (x *GetBanAppUserRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetBanAppUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *BanAppUserRes `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetBanAppUserResponse) Reset() {
	*x = GetBanAppUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBanAppUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBanAppUserResponse) ProtoMessage() {}

func (x *GetBanAppUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBanAppUserResponse.ProtoReflect.Descriptor instead.
func (*GetBanAppUserResponse) Descriptor() ([]byte, []int) {
	return file_npool_appusermgrv2_banappuser_banappuser_proto_rawDescGZIP(), []int{7}
}

func (x *GetBanAppUserResponse) GetInfo() *BanAppUserRes {
	if x != nil {
		return x.Info
	}
	return nil
}

type UserIDVal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,10,opt,name=Value,proto3" json:"Value,omitempty"`
	Op    string `protobuf:"bytes,20,opt,name=Op,proto3" json:"Op,omitempty"`
}

func (x *UserIDVal) Reset() {
	*x = UserIDVal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserIDVal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIDVal) ProtoMessage() {}

func (x *UserIDVal) ProtoReflect() protoreflect.Message {
	mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIDVal.ProtoReflect.Descriptor instead.
func (*UserIDVal) Descriptor() ([]byte, []int) {
	return file_npool_appusermgrv2_banappuser_banappuser_proto_rawDescGZIP(), []int{8}
}

func (x *UserIDVal) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *UserIDVal) GetOp() string {
	if x != nil {
		return x.Op
	}
	return ""
}

type MessageVal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,10,opt,name=Value,proto3" json:"Value,omitempty"`
	Op    string `protobuf:"bytes,20,opt,name=Op,proto3" json:"Op,omitempty"`
}

func (x *MessageVal) Reset() {
	*x = MessageVal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageVal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageVal) ProtoMessage() {}

func (x *MessageVal) ProtoReflect() protoreflect.Message {
	mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageVal.ProtoReflect.Descriptor instead.
func (*MessageVal) Descriptor() ([]byte, []int) {
	return file_npool_appusermgrv2_banappuser_banappuser_proto_rawDescGZIP(), []int{9}
}

func (x *MessageVal) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *MessageVal) GetOp() string {
	if x != nil {
		return x.Op
	}
	return ""
}

type IDVal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,10,opt,name=Value,proto3" json:"Value,omitempty"`
	Op    string `protobuf:"bytes,20,opt,name=Op,proto3" json:"Op,omitempty"`
}

func (x *IDVal) Reset() {
	*x = IDVal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDVal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDVal) ProtoMessage() {}

func (x *IDVal) ProtoReflect() protoreflect.Message {
	mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDVal.ProtoReflect.Descriptor instead.
func (*IDVal) Descriptor() ([]byte, []int) {
	return file_npool_appusermgrv2_banappuser_banappuser_proto_rawDescGZIP(), []int{10}
}

func (x *IDVal) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *IDVal) GetOp() string {
	if x != nil {
		return x.Op
	}
	return ""
}

type AppIDVal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,10,opt,name=Value,proto3" json:"Value,omitempty"`
	Op    string `protobuf:"bytes,20,opt,name=Op,proto3" json:"Op,omitempty"`
}

func (x *AppIDVal) Reset() {
	*x = AppIDVal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppIDVal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppIDVal) ProtoMessage() {}

func (x *AppIDVal) ProtoReflect() protoreflect.Message {
	mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppIDVal.ProtoReflect.Descriptor instead.
func (*AppIDVal) Descriptor() ([]byte, []int) {
	return file_npool_appusermgrv2_banappuser_banappuser_proto_rawDescGZIP(), []int{11}
}

func (x *AppIDVal) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *AppIDVal) GetOp() string {
	if x != nil {
		return x.Op
	}
	return ""
}

type Conds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID  *UserIDVal  `protobuf:"bytes,10,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Message *MessageVal `protobuf:"bytes,20,opt,name=Message,proto3" json:"Message,omitempty"`
	ID      *IDVal      `protobuf:"bytes,30,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID   *AppIDVal   `protobuf:"bytes,40,opt,name=AppID,proto3" json:"AppID,omitempty"`
}

func (x *Conds) Reset() {
	*x = Conds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conds) ProtoMessage() {}

func (x *Conds) ProtoReflect() protoreflect.Message {
	mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conds.ProtoReflect.Descriptor instead.
func (*Conds) Descriptor() ([]byte, []int) {
	return file_npool_appusermgrv2_banappuser_banappuser_proto_rawDescGZIP(), []int{12}
}

func (x *Conds) GetUserID() *UserIDVal {
	if x != nil {
		return x.UserID
	}
	return nil
}

func (x *Conds) GetMessage() *MessageVal {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *Conds) GetID() *IDVal {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *Conds) GetAppID() *AppIDVal {
	if x != nil {
		return x.AppID
	}
	return nil
}

type GetBanAppUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds  *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
	Offset int32  `protobuf:"varint,20,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32  `protobuf:"varint,30,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *GetBanAppUsersRequest) Reset() {
	*x = GetBanAppUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBanAppUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBanAppUsersRequest) ProtoMessage() {}

func (x *GetBanAppUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBanAppUsersRequest.ProtoReflect.Descriptor instead.
func (*GetBanAppUsersRequest) Descriptor() ([]byte, []int) {
	return file_npool_appusermgrv2_banappuser_banappuser_proto_rawDescGZIP(), []int{13}
}

func (x *GetBanAppUsersRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

func (x *GetBanAppUsersRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetBanAppUsersRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetBanAppUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Infos []*BanAppUserRes `protobuf:"bytes,10,rep,name=Infos,proto3" json:"Infos,omitempty"`
	Total uint32           `protobuf:"varint,20,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetBanAppUsersResponse) Reset() {
	*x = GetBanAppUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBanAppUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBanAppUsersResponse) ProtoMessage() {}

func (x *GetBanAppUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBanAppUsersResponse.ProtoReflect.Descriptor instead.
func (*GetBanAppUsersResponse) Descriptor() ([]byte, []int) {
	return file_npool_appusermgrv2_banappuser_banappuser_proto_rawDescGZIP(), []int{14}
}

func (x *GetBanAppUsersResponse) GetInfos() []*BanAppUserRes {
	if x != nil {
		return x.Infos
	}
	return nil
}

func (x *GetBanAppUsersResponse) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GetBanAppUserOnlyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *GetBanAppUserOnlyRequest) Reset() {
	*x = GetBanAppUserOnlyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBanAppUserOnlyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBanAppUserOnlyRequest) ProtoMessage() {}

func (x *GetBanAppUserOnlyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBanAppUserOnlyRequest.ProtoReflect.Descriptor instead.
func (*GetBanAppUserOnlyRequest) Descriptor() ([]byte, []int) {
	return file_npool_appusermgrv2_banappuser_banappuser_proto_rawDescGZIP(), []int{15}
}

func (x *GetBanAppUserOnlyRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type GetBanAppUserOnlyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *BanAppUserRes `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *GetBanAppUserOnlyResponse) Reset() {
	*x = GetBanAppUserOnlyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBanAppUserOnlyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBanAppUserOnlyResponse) ProtoMessage() {}

func (x *GetBanAppUserOnlyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBanAppUserOnlyResponse.ProtoReflect.Descriptor instead.
func (*GetBanAppUserOnlyResponse) Descriptor() ([]byte, []int) {
	return file_npool_appusermgrv2_banappuser_banappuser_proto_rawDescGZIP(), []int{16}
}

func (x *GetBanAppUserOnlyResponse) GetInfo() *BanAppUserRes {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateBanAppUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *BanAppUser `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateBanAppUserRequest) Reset() {
	*x = UpdateBanAppUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBanAppUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBanAppUserRequest) ProtoMessage() {}

func (x *UpdateBanAppUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBanAppUserRequest.ProtoReflect.Descriptor instead.
func (*UpdateBanAppUserRequest) Descriptor() ([]byte, []int) {
	return file_npool_appusermgrv2_banappuser_banappuser_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateBanAppUserRequest) GetInfo() *BanAppUser {
	if x != nil {
		return x.Info
	}
	return nil
}

type UpdateBanAppUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *BanAppUserRes `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *UpdateBanAppUserResponse) Reset() {
	*x = UpdateBanAppUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBanAppUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBanAppUserResponse) ProtoMessage() {}

func (x *UpdateBanAppUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBanAppUserResponse.ProtoReflect.Descriptor instead.
func (*UpdateBanAppUserResponse) Descriptor() ([]byte, []int) {
	return file_npool_appusermgrv2_banappuser_banappuser_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateBanAppUserResponse) GetInfo() *BanAppUserRes {
	if x != nil {
		return x.Info
	}
	return nil
}

type ExistBanAppUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *ExistBanAppUserRequest) Reset() {
	*x = ExistBanAppUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistBanAppUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistBanAppUserRequest) ProtoMessage() {}

func (x *ExistBanAppUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistBanAppUserRequest.ProtoReflect.Descriptor instead.
func (*ExistBanAppUserRequest) Descriptor() ([]byte, []int) {
	return file_npool_appusermgrv2_banappuser_banappuser_proto_rawDescGZIP(), []int{19}
}

func (x *ExistBanAppUserRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type ExistBanAppUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistBanAppUserResponse) Reset() {
	*x = ExistBanAppUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistBanAppUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistBanAppUserResponse) ProtoMessage() {}

func (x *ExistBanAppUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistBanAppUserResponse.ProtoReflect.Descriptor instead.
func (*ExistBanAppUserResponse) Descriptor() ([]byte, []int) {
	return file_npool_appusermgrv2_banappuser_banappuser_proto_rawDescGZIP(), []int{20}
}

func (x *ExistBanAppUserResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type ExistBanAppUserCondsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *ExistBanAppUserCondsRequest) Reset() {
	*x = ExistBanAppUserCondsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistBanAppUserCondsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistBanAppUserCondsRequest) ProtoMessage() {}

func (x *ExistBanAppUserCondsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistBanAppUserCondsRequest.ProtoReflect.Descriptor instead.
func (*ExistBanAppUserCondsRequest) Descriptor() ([]byte, []int) {
	return file_npool_appusermgrv2_banappuser_banappuser_proto_rawDescGZIP(), []int{21}
}

func (x *ExistBanAppUserCondsRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type ExistBanAppUserCondsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info bool `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *ExistBanAppUserCondsResponse) Reset() {
	*x = ExistBanAppUserCondsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExistBanAppUserCondsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistBanAppUserCondsResponse) ProtoMessage() {}

func (x *ExistBanAppUserCondsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistBanAppUserCondsResponse.ProtoReflect.Descriptor instead.
func (*ExistBanAppUserCondsResponse) Descriptor() ([]byte, []int) {
	return file_npool_appusermgrv2_banappuser_banappuser_proto_rawDescGZIP(), []int{22}
}

func (x *ExistBanAppUserCondsResponse) GetInfo() bool {
	if x != nil {
		return x.Info
	}
	return false
}

type CountBanAppUsersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Conds *Conds `protobuf:"bytes,10,opt,name=Conds,proto3" json:"Conds,omitempty"`
}

func (x *CountBanAppUsersRequest) Reset() {
	*x = CountBanAppUsersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountBanAppUsersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountBanAppUsersRequest) ProtoMessage() {}

func (x *CountBanAppUsersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountBanAppUsersRequest.ProtoReflect.Descriptor instead.
func (*CountBanAppUsersRequest) Descriptor() ([]byte, []int) {
	return file_npool_appusermgrv2_banappuser_banappuser_proto_rawDescGZIP(), []int{23}
}

func (x *CountBanAppUsersRequest) GetConds() *Conds {
	if x != nil {
		return x.Conds
	}
	return nil
}

type CountBanAppUsersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info uint32 `protobuf:"varint,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CountBanAppUsersResponse) Reset() {
	*x = CountBanAppUsersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountBanAppUsersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountBanAppUsersResponse) ProtoMessage() {}

func (x *CountBanAppUsersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountBanAppUsersResponse.ProtoReflect.Descriptor instead.
func (*CountBanAppUsersResponse) Descriptor() ([]byte, []int) {
	return file_npool_appusermgrv2_banappuser_banappuser_proto_rawDescGZIP(), []int{24}
}

func (x *CountBanAppUsersResponse) GetInfo() uint32 {
	if x != nil {
		return x.Info
	}
	return 0
}

type DeleteBanAppUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,10,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *DeleteBanAppUserRequest) Reset() {
	*x = DeleteBanAppUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBanAppUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBanAppUserRequest) ProtoMessage() {}

func (x *DeleteBanAppUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBanAppUserRequest.ProtoReflect.Descriptor instead.
func (*DeleteBanAppUserRequest) Descriptor() ([]byte, []int) {
	return file_npool_appusermgrv2_banappuser_banappuser_proto_rawDescGZIP(), []int{25}
}

func (x *DeleteBanAppUserRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type DeleteBanAppUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *BanAppUserRes `protobuf:"bytes,10,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *DeleteBanAppUserResponse) Reset() {
	*x = DeleteBanAppUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBanAppUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBanAppUserResponse) ProtoMessage() {}

func (x *DeleteBanAppUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBanAppUserResponse.ProtoReflect.Descriptor instead.
func (*DeleteBanAppUserResponse) Descriptor() ([]byte, []int) {
	return file_npool_appusermgrv2_banappuser_banappuser_proto_rawDescGZIP(), []int{26}
}

func (x *DeleteBanAppUserResponse) GetInfo() *BanAppUserRes {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_appusermgrv2_banappuser_banappuser_proto protoreflect.FileDescriptor

var file_npool_appusermgrv2_banappuser_banappuser_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x6d,
	0x67, 0x72, 0x76, 0x32, 0x2f, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2f,
	0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1e, 0x61, 0x70, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11,
	0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xa0, 0x01, 0x0a, 0x0a, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x1b, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x02, 0x49, 0x44, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x49, 0x44, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x22, 0x67, 0x0a, 0x0d, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x22, 0x59, 0x0a,
	0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5d, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5c, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x60, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x61, 0x6e, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x43, 0x0a, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x76, 0x32, 0x2e, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x26, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x42, 0x61,
	0x6e, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22,
	0x5a, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x31, 0x0a, 0x09, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x56, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x4f, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x4f, 0x70, 0x22, 0x32,
	0x0a, 0x0a, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x4f, 0x70, 0x22, 0x2d, 0x0a, 0x05, 0x49, 0x44, 0x56, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x4f,
	0x70, 0x22, 0x30, 0x0a, 0x08, 0x41, 0x70, 0x70, 0x49, 0x44, 0x56, 0x61, 0x6c, 0x12, 0x14, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x70, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x4f, 0x70, 0x22, 0x87, 0x02, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x41, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x56, 0x61, 0x6c, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x44, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x76, 0x32, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x52, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x32, 0x2e, 0x49, 0x44, 0x56, 0x61, 0x6c, 0x52, 0x02, 0x49, 0x44, 0x12, 0x3e, 0x0a,
	0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61,
	0x70, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e,
	0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x56, 0x61, 0x6c, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x22, 0x82, 0x01,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0x73, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x05,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x62,
	0x61, 0x6e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x6e,
	0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x52, 0x05, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x57, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x42, 0x61,
	0x6e, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73,
	0x22, 0x5e, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65,
	0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x70,
	0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x62,
	0x61, 0x6e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x6e,
	0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x59, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e,
	0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x6e, 0x41, 0x70,
	0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5d, 0x0a, 0x18, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x28, 0x0a, 0x16, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x44, 0x22, 0x2d, 0x0a, 0x17, 0x45, 0x78, 0x69, 0x73, 0x74, 0x42, 0x61, 0x6e,
	0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x5a, 0x0a, 0x1b, 0x45, 0x78, 0x69, 0x73, 0x74, 0x42, 0x61, 0x6e, 0x41,
	0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3b, 0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x76, 0x32, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22,
	0x32, 0x0a, 0x1c, 0x45, 0x78, 0x69, 0x73, 0x74, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x56, 0x0a, 0x17, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x41,
	0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b,
	0x0a, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x43,
	0x6f, 0x6e, 0x64, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x2e, 0x0a, 0x18, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x29, 0x0a, 0x17, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x5d, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x32, 0x2e, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x52,
	0x04, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0x92, 0x0b, 0x0a, 0x18, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x89, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e,
	0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x56, 0x32, 0x12, 0x37, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e,
	0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x38, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8c,
	0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x56, 0x32, 0x12, 0x38, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61,
	0x6e, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x39, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x32, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x89, 0x01,
	0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x55, 0x73,
	0x65, 0x72, 0x56, 0x32, 0x12, 0x37, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x41,
	0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x80, 0x01, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x56, 0x32, 0x12, 0x34, 0x2e,
	0x61, 0x70, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x47,
	0x65, 0x74, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8c, 0x01, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e,
	0x6c, 0x79, 0x56, 0x32, 0x12, 0x38, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x55,
	0x73, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x6c,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x83, 0x01, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x73, 0x56, 0x32,
	0x12, 0x35, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76,
	0x32, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70,
	0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x41,
	0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x86, 0x01, 0x0a, 0x11, 0x45, 0x78, 0x69, 0x73, 0x74, 0x42, 0x61, 0x6e, 0x41, 0x70,
	0x70, 0x55, 0x73, 0x65, 0x72, 0x56, 0x32, 0x12, 0x36, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70,
	0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x42, 0x61,
	0x6e, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x37, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32,
	0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x95, 0x01, 0x0a, 0x16, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x64, 0x73, 0x56, 0x32, 0x12, 0x3b, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x42, 0x61, 0x6e, 0x41,
	0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3c, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x32, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x89, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x41,
	0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x73, 0x56, 0x32, 0x12, 0x37, 0x2e, 0x61, 0x70, 0x70, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e,
	0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x38, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x76, 0x32, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x89,
	0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x55,
	0x73, 0x65, 0x72, 0x56, 0x32, 0x12, 0x37, 0x2e, 0x61, 0x70, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x6e,
	0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38,
	0x2e, 0x61, 0x70, 0x70, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x76, 0x32, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x61, 0x6e, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x40, 0x5a, 0x3e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e,
	0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x6d, 0x67, 0x72, 0x76,
	0x32, 0x2f, 0x62, 0x61, 0x6e, 0x61, 0x70, 0x70, 0x75, 0x73, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_appusermgrv2_banappuser_banappuser_proto_rawDescOnce sync.Once
	file_npool_appusermgrv2_banappuser_banappuser_proto_rawDescData = file_npool_appusermgrv2_banappuser_banappuser_proto_rawDesc
)

func file_npool_appusermgrv2_banappuser_banappuser_proto_rawDescGZIP() []byte {
	file_npool_appusermgrv2_banappuser_banappuser_proto_rawDescOnce.Do(func() {
		file_npool_appusermgrv2_banappuser_banappuser_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_appusermgrv2_banappuser_banappuser_proto_rawDescData)
	})
	return file_npool_appusermgrv2_banappuser_banappuser_proto_rawDescData
}

var file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_npool_appusermgrv2_banappuser_banappuser_proto_goTypes = []interface{}{
	(*BanAppUser)(nil),                   // 0: app.user.manager.banappuser.v2.BanAppUser
	(*BanAppUserRes)(nil),                // 1: app.user.manager.banappuser.v2.BanAppUserRes
	(*CreateBanAppUserRequest)(nil),      // 2: app.user.manager.banappuser.v2.CreateBanAppUserRequest
	(*CreateBanAppUserResponse)(nil),     // 3: app.user.manager.banappuser.v2.CreateBanAppUserResponse
	(*CreateBanAppUsersRequest)(nil),     // 4: app.user.manager.banappuser.v2.CreateBanAppUsersRequest
	(*CreateBanAppUsersResponse)(nil),    // 5: app.user.manager.banappuser.v2.CreateBanAppUsersResponse
	(*GetBanAppUserRequest)(nil),         // 6: app.user.manager.banappuser.v2.GetBanAppUserRequest
	(*GetBanAppUserResponse)(nil),        // 7: app.user.manager.banappuser.v2.GetBanAppUserResponse
	(*UserIDVal)(nil),                    // 8: app.user.manager.banappuser.v2.UserIDVal
	(*MessageVal)(nil),                   // 9: app.user.manager.banappuser.v2.MessageVal
	(*IDVal)(nil),                        // 10: app.user.manager.banappuser.v2.IDVal
	(*AppIDVal)(nil),                     // 11: app.user.manager.banappuser.v2.AppIDVal
	(*Conds)(nil),                        // 12: app.user.manager.banappuser.v2.Conds
	(*GetBanAppUsersRequest)(nil),        // 13: app.user.manager.banappuser.v2.GetBanAppUsersRequest
	(*GetBanAppUsersResponse)(nil),       // 14: app.user.manager.banappuser.v2.GetBanAppUsersResponse
	(*GetBanAppUserOnlyRequest)(nil),     // 15: app.user.manager.banappuser.v2.GetBanAppUserOnlyRequest
	(*GetBanAppUserOnlyResponse)(nil),    // 16: app.user.manager.banappuser.v2.GetBanAppUserOnlyResponse
	(*UpdateBanAppUserRequest)(nil),      // 17: app.user.manager.banappuser.v2.UpdateBanAppUserRequest
	(*UpdateBanAppUserResponse)(nil),     // 18: app.user.manager.banappuser.v2.UpdateBanAppUserResponse
	(*ExistBanAppUserRequest)(nil),       // 19: app.user.manager.banappuser.v2.ExistBanAppUserRequest
	(*ExistBanAppUserResponse)(nil),      // 20: app.user.manager.banappuser.v2.ExistBanAppUserResponse
	(*ExistBanAppUserCondsRequest)(nil),  // 21: app.user.manager.banappuser.v2.ExistBanAppUserCondsRequest
	(*ExistBanAppUserCondsResponse)(nil), // 22: app.user.manager.banappuser.v2.ExistBanAppUserCondsResponse
	(*CountBanAppUsersRequest)(nil),      // 23: app.user.manager.banappuser.v2.CountBanAppUsersRequest
	(*CountBanAppUsersResponse)(nil),     // 24: app.user.manager.banappuser.v2.CountBanAppUsersResponse
	(*DeleteBanAppUserRequest)(nil),      // 25: app.user.manager.banappuser.v2.DeleteBanAppUserRequest
	(*DeleteBanAppUserResponse)(nil),     // 26: app.user.manager.banappuser.v2.DeleteBanAppUserResponse
}
var file_npool_appusermgrv2_banappuser_banappuser_proto_depIdxs = []int32{
	0,  // 0: app.user.manager.banappuser.v2.CreateBanAppUserRequest.Info:type_name -> app.user.manager.banappuser.v2.BanAppUser
	1,  // 1: app.user.manager.banappuser.v2.CreateBanAppUserResponse.Info:type_name -> app.user.manager.banappuser.v2.BanAppUserRes
	0,  // 2: app.user.manager.banappuser.v2.CreateBanAppUsersRequest.Infos:type_name -> app.user.manager.banappuser.v2.BanAppUser
	1,  // 3: app.user.manager.banappuser.v2.CreateBanAppUsersResponse.Infos:type_name -> app.user.manager.banappuser.v2.BanAppUserRes
	1,  // 4: app.user.manager.banappuser.v2.GetBanAppUserResponse.Info:type_name -> app.user.manager.banappuser.v2.BanAppUserRes
	8,  // 5: app.user.manager.banappuser.v2.Conds.UserID:type_name -> app.user.manager.banappuser.v2.UserIDVal
	9,  // 6: app.user.manager.banappuser.v2.Conds.Message:type_name -> app.user.manager.banappuser.v2.MessageVal
	10, // 7: app.user.manager.banappuser.v2.Conds.ID:type_name -> app.user.manager.banappuser.v2.IDVal
	11, // 8: app.user.manager.banappuser.v2.Conds.AppID:type_name -> app.user.manager.banappuser.v2.AppIDVal
	12, // 9: app.user.manager.banappuser.v2.GetBanAppUsersRequest.Conds:type_name -> app.user.manager.banappuser.v2.Conds
	1,  // 10: app.user.manager.banappuser.v2.GetBanAppUsersResponse.Infos:type_name -> app.user.manager.banappuser.v2.BanAppUserRes
	12, // 11: app.user.manager.banappuser.v2.GetBanAppUserOnlyRequest.Conds:type_name -> app.user.manager.banappuser.v2.Conds
	1,  // 12: app.user.manager.banappuser.v2.GetBanAppUserOnlyResponse.Info:type_name -> app.user.manager.banappuser.v2.BanAppUserRes
	0,  // 13: app.user.manager.banappuser.v2.UpdateBanAppUserRequest.Info:type_name -> app.user.manager.banappuser.v2.BanAppUser
	1,  // 14: app.user.manager.banappuser.v2.UpdateBanAppUserResponse.Info:type_name -> app.user.manager.banappuser.v2.BanAppUserRes
	12, // 15: app.user.manager.banappuser.v2.ExistBanAppUserCondsRequest.Conds:type_name -> app.user.manager.banappuser.v2.Conds
	12, // 16: app.user.manager.banappuser.v2.CountBanAppUsersRequest.Conds:type_name -> app.user.manager.banappuser.v2.Conds
	1,  // 17: app.user.manager.banappuser.v2.DeleteBanAppUserResponse.Info:type_name -> app.user.manager.banappuser.v2.BanAppUserRes
	2,  // 18: app.user.manager.banappuser.v2.AppUserManagerBanAppUser.CreateBanAppUserV2:input_type -> app.user.manager.banappuser.v2.CreateBanAppUserRequest
	4,  // 19: app.user.manager.banappuser.v2.AppUserManagerBanAppUser.CreateBanAppUsersV2:input_type -> app.user.manager.banappuser.v2.CreateBanAppUsersRequest
	17, // 20: app.user.manager.banappuser.v2.AppUserManagerBanAppUser.UpdateBanAppUserV2:input_type -> app.user.manager.banappuser.v2.UpdateBanAppUserRequest
	6,  // 21: app.user.manager.banappuser.v2.AppUserManagerBanAppUser.GetBanAppUserV2:input_type -> app.user.manager.banappuser.v2.GetBanAppUserRequest
	15, // 22: app.user.manager.banappuser.v2.AppUserManagerBanAppUser.GetBanAppUserOnlyV2:input_type -> app.user.manager.banappuser.v2.GetBanAppUserOnlyRequest
	13, // 23: app.user.manager.banappuser.v2.AppUserManagerBanAppUser.GetBanAppUsersV2:input_type -> app.user.manager.banappuser.v2.GetBanAppUsersRequest
	19, // 24: app.user.manager.banappuser.v2.AppUserManagerBanAppUser.ExistBanAppUserV2:input_type -> app.user.manager.banappuser.v2.ExistBanAppUserRequest
	21, // 25: app.user.manager.banappuser.v2.AppUserManagerBanAppUser.ExistBanAppUserCondsV2:input_type -> app.user.manager.banappuser.v2.ExistBanAppUserCondsRequest
	23, // 26: app.user.manager.banappuser.v2.AppUserManagerBanAppUser.CountBanAppUsersV2:input_type -> app.user.manager.banappuser.v2.CountBanAppUsersRequest
	25, // 27: app.user.manager.banappuser.v2.AppUserManagerBanAppUser.DeleteBanAppUserV2:input_type -> app.user.manager.banappuser.v2.DeleteBanAppUserRequest
	3,  // 28: app.user.manager.banappuser.v2.AppUserManagerBanAppUser.CreateBanAppUserV2:output_type -> app.user.manager.banappuser.v2.CreateBanAppUserResponse
	5,  // 29: app.user.manager.banappuser.v2.AppUserManagerBanAppUser.CreateBanAppUsersV2:output_type -> app.user.manager.banappuser.v2.CreateBanAppUsersResponse
	18, // 30: app.user.manager.banappuser.v2.AppUserManagerBanAppUser.UpdateBanAppUserV2:output_type -> app.user.manager.banappuser.v2.UpdateBanAppUserResponse
	7,  // 31: app.user.manager.banappuser.v2.AppUserManagerBanAppUser.GetBanAppUserV2:output_type -> app.user.manager.banappuser.v2.GetBanAppUserResponse
	16, // 32: app.user.manager.banappuser.v2.AppUserManagerBanAppUser.GetBanAppUserOnlyV2:output_type -> app.user.manager.banappuser.v2.GetBanAppUserOnlyResponse
	14, // 33: app.user.manager.banappuser.v2.AppUserManagerBanAppUser.GetBanAppUsersV2:output_type -> app.user.manager.banappuser.v2.GetBanAppUsersResponse
	20, // 34: app.user.manager.banappuser.v2.AppUserManagerBanAppUser.ExistBanAppUserV2:output_type -> app.user.manager.banappuser.v2.ExistBanAppUserResponse
	22, // 35: app.user.manager.banappuser.v2.AppUserManagerBanAppUser.ExistBanAppUserCondsV2:output_type -> app.user.manager.banappuser.v2.ExistBanAppUserCondsResponse
	24, // 36: app.user.manager.banappuser.v2.AppUserManagerBanAppUser.CountBanAppUsersV2:output_type -> app.user.manager.banappuser.v2.CountBanAppUsersResponse
	26, // 37: app.user.manager.banappuser.v2.AppUserManagerBanAppUser.DeleteBanAppUserV2:output_type -> app.user.manager.banappuser.v2.DeleteBanAppUserResponse
	28, // [28:38] is the sub-list for method output_type
	18, // [18:28] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_npool_appusermgrv2_banappuser_banappuser_proto_init() }
func file_npool_appusermgrv2_banappuser_banappuser_proto_init() {
	if File_npool_appusermgrv2_banappuser_banappuser_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BanAppUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BanAppUserRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBanAppUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBanAppUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBanAppUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBanAppUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBanAppUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBanAppUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserIDVal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageVal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDVal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppIDVal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBanAppUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBanAppUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBanAppUserOnlyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBanAppUserOnlyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBanAppUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBanAppUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistBanAppUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistBanAppUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistBanAppUserCondsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExistBanAppUserCondsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountBanAppUsersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountBanAppUsersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBanAppUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBanAppUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_appusermgrv2_banappuser_banappuser_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_appusermgrv2_banappuser_banappuser_proto_goTypes,
		DependencyIndexes: file_npool_appusermgrv2_banappuser_banappuser_proto_depIdxs,
		MessageInfos:      file_npool_appusermgrv2_banappuser_banappuser_proto_msgTypes,
	}.Build()
	File_npool_appusermgrv2_banappuser_banappuser_proto = out.File
	file_npool_appusermgrv2_banappuser_banappuser_proto_rawDesc = nil
	file_npool_appusermgrv2_banappuser_banappuser_proto_goTypes = nil
	file_npool_appusermgrv2_banappuser_banappuser_proto_depIdxs = nil
}
