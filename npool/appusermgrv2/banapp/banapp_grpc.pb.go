// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/appusermgrv2/banapp/banapp.proto

package banapp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppUserManagerBanAppClient is the client API for AppUserManagerBanApp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppUserManagerBanAppClient interface {
	CreateBanAppV2(ctx context.Context, in *CreateBanAppRequest, opts ...grpc.CallOption) (*CreateBanAppResponse, error)
	CreateBanAppsV2(ctx context.Context, in *CreateBanAppsRequest, opts ...grpc.CallOption) (*CreateBanAppsResponse, error)
	UpdateBanAppV2(ctx context.Context, in *UpdateBanAppRequest, opts ...grpc.CallOption) (*UpdateBanAppResponse, error)
	GetBanAppV2(ctx context.Context, in *GetBanAppRequest, opts ...grpc.CallOption) (*GetBanAppResponse, error)
	GetBanAppOnlyV2(ctx context.Context, in *GetBanAppOnlyRequest, opts ...grpc.CallOption) (*GetBanAppOnlyResponse, error)
	GetBanAppsV2(ctx context.Context, in *GetBanAppsRequest, opts ...grpc.CallOption) (*GetBanAppsResponse, error)
	ExistBanAppV2(ctx context.Context, in *ExistBanAppRequest, opts ...grpc.CallOption) (*ExistBanAppResponse, error)
	ExistBanAppCondsV2(ctx context.Context, in *ExistBanAppCondsRequest, opts ...grpc.CallOption) (*ExistBanAppCondsResponse, error)
	CountBanAppsV2(ctx context.Context, in *CountBanAppsRequest, opts ...grpc.CallOption) (*CountBanAppsResponse, error)
	DeleteBanAppV2(ctx context.Context, in *DeleteBanAppRequest, opts ...grpc.CallOption) (*DeleteBanAppResponse, error)
}

type appUserManagerBanAppClient struct {
	cc grpc.ClientConnInterface
}

func NewAppUserManagerBanAppClient(cc grpc.ClientConnInterface) AppUserManagerBanAppClient {
	return &appUserManagerBanAppClient{cc}
}

func (c *appUserManagerBanAppClient) CreateBanAppV2(ctx context.Context, in *CreateBanAppRequest, opts ...grpc.CallOption) (*CreateBanAppResponse, error) {
	out := new(CreateBanAppResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.banapp.v2.AppUserManagerBanApp/CreateBanAppV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerBanAppClient) CreateBanAppsV2(ctx context.Context, in *CreateBanAppsRequest, opts ...grpc.CallOption) (*CreateBanAppsResponse, error) {
	out := new(CreateBanAppsResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.banapp.v2.AppUserManagerBanApp/CreateBanAppsV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerBanAppClient) UpdateBanAppV2(ctx context.Context, in *UpdateBanAppRequest, opts ...grpc.CallOption) (*UpdateBanAppResponse, error) {
	out := new(UpdateBanAppResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.banapp.v2.AppUserManagerBanApp/UpdateBanAppV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerBanAppClient) GetBanAppV2(ctx context.Context, in *GetBanAppRequest, opts ...grpc.CallOption) (*GetBanAppResponse, error) {
	out := new(GetBanAppResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.banapp.v2.AppUserManagerBanApp/GetBanAppV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerBanAppClient) GetBanAppOnlyV2(ctx context.Context, in *GetBanAppOnlyRequest, opts ...grpc.CallOption) (*GetBanAppOnlyResponse, error) {
	out := new(GetBanAppOnlyResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.banapp.v2.AppUserManagerBanApp/GetBanAppOnlyV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerBanAppClient) GetBanAppsV2(ctx context.Context, in *GetBanAppsRequest, opts ...grpc.CallOption) (*GetBanAppsResponse, error) {
	out := new(GetBanAppsResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.banapp.v2.AppUserManagerBanApp/GetBanAppsV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerBanAppClient) ExistBanAppV2(ctx context.Context, in *ExistBanAppRequest, opts ...grpc.CallOption) (*ExistBanAppResponse, error) {
	out := new(ExistBanAppResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.banapp.v2.AppUserManagerBanApp/ExistBanAppV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerBanAppClient) ExistBanAppCondsV2(ctx context.Context, in *ExistBanAppCondsRequest, opts ...grpc.CallOption) (*ExistBanAppCondsResponse, error) {
	out := new(ExistBanAppCondsResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.banapp.v2.AppUserManagerBanApp/ExistBanAppCondsV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerBanAppClient) CountBanAppsV2(ctx context.Context, in *CountBanAppsRequest, opts ...grpc.CallOption) (*CountBanAppsResponse, error) {
	out := new(CountBanAppsResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.banapp.v2.AppUserManagerBanApp/CountBanAppsV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerBanAppClient) DeleteBanAppV2(ctx context.Context, in *DeleteBanAppRequest, opts ...grpc.CallOption) (*DeleteBanAppResponse, error) {
	out := new(DeleteBanAppResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.banapp.v2.AppUserManagerBanApp/DeleteBanAppV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppUserManagerBanAppServer is the server API for AppUserManagerBanApp service.
// All implementations must embed UnimplementedAppUserManagerBanAppServer
// for forward compatibility
type AppUserManagerBanAppServer interface {
	CreateBanAppV2(context.Context, *CreateBanAppRequest) (*CreateBanAppResponse, error)
	CreateBanAppsV2(context.Context, *CreateBanAppsRequest) (*CreateBanAppsResponse, error)
	UpdateBanAppV2(context.Context, *UpdateBanAppRequest) (*UpdateBanAppResponse, error)
	GetBanAppV2(context.Context, *GetBanAppRequest) (*GetBanAppResponse, error)
	GetBanAppOnlyV2(context.Context, *GetBanAppOnlyRequest) (*GetBanAppOnlyResponse, error)
	GetBanAppsV2(context.Context, *GetBanAppsRequest) (*GetBanAppsResponse, error)
	ExistBanAppV2(context.Context, *ExistBanAppRequest) (*ExistBanAppResponse, error)
	ExistBanAppCondsV2(context.Context, *ExistBanAppCondsRequest) (*ExistBanAppCondsResponse, error)
	CountBanAppsV2(context.Context, *CountBanAppsRequest) (*CountBanAppsResponse, error)
	DeleteBanAppV2(context.Context, *DeleteBanAppRequest) (*DeleteBanAppResponse, error)
	mustEmbedUnimplementedAppUserManagerBanAppServer()
}

// UnimplementedAppUserManagerBanAppServer must be embedded to have forward compatible implementations.
type UnimplementedAppUserManagerBanAppServer struct {
}

func (UnimplementedAppUserManagerBanAppServer) CreateBanAppV2(context.Context, *CreateBanAppRequest) (*CreateBanAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBanAppV2 not implemented")
}
func (UnimplementedAppUserManagerBanAppServer) CreateBanAppsV2(context.Context, *CreateBanAppsRequest) (*CreateBanAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBanAppsV2 not implemented")
}
func (UnimplementedAppUserManagerBanAppServer) UpdateBanAppV2(context.Context, *UpdateBanAppRequest) (*UpdateBanAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBanAppV2 not implemented")
}
func (UnimplementedAppUserManagerBanAppServer) GetBanAppV2(context.Context, *GetBanAppRequest) (*GetBanAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBanAppV2 not implemented")
}
func (UnimplementedAppUserManagerBanAppServer) GetBanAppOnlyV2(context.Context, *GetBanAppOnlyRequest) (*GetBanAppOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBanAppOnlyV2 not implemented")
}
func (UnimplementedAppUserManagerBanAppServer) GetBanAppsV2(context.Context, *GetBanAppsRequest) (*GetBanAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBanAppsV2 not implemented")
}
func (UnimplementedAppUserManagerBanAppServer) ExistBanAppV2(context.Context, *ExistBanAppRequest) (*ExistBanAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistBanAppV2 not implemented")
}
func (UnimplementedAppUserManagerBanAppServer) ExistBanAppCondsV2(context.Context, *ExistBanAppCondsRequest) (*ExistBanAppCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistBanAppCondsV2 not implemented")
}
func (UnimplementedAppUserManagerBanAppServer) CountBanAppsV2(context.Context, *CountBanAppsRequest) (*CountBanAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountBanAppsV2 not implemented")
}
func (UnimplementedAppUserManagerBanAppServer) DeleteBanAppV2(context.Context, *DeleteBanAppRequest) (*DeleteBanAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBanAppV2 not implemented")
}
func (UnimplementedAppUserManagerBanAppServer) mustEmbedUnimplementedAppUserManagerBanAppServer() {}

// UnsafeAppUserManagerBanAppServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppUserManagerBanAppServer will
// result in compilation errors.
type UnsafeAppUserManagerBanAppServer interface {
	mustEmbedUnimplementedAppUserManagerBanAppServer()
}

func RegisterAppUserManagerBanAppServer(s grpc.ServiceRegistrar, srv AppUserManagerBanAppServer) {
	s.RegisterService(&AppUserManagerBanApp_ServiceDesc, srv)
}

func _AppUserManagerBanApp_CreateBanAppV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBanAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerBanAppServer).CreateBanAppV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.banapp.v2.AppUserManagerBanApp/CreateBanAppV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerBanAppServer).CreateBanAppV2(ctx, req.(*CreateBanAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerBanApp_CreateBanAppsV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBanAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerBanAppServer).CreateBanAppsV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.banapp.v2.AppUserManagerBanApp/CreateBanAppsV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerBanAppServer).CreateBanAppsV2(ctx, req.(*CreateBanAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerBanApp_UpdateBanAppV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBanAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerBanAppServer).UpdateBanAppV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.banapp.v2.AppUserManagerBanApp/UpdateBanAppV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerBanAppServer).UpdateBanAppV2(ctx, req.(*UpdateBanAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerBanApp_GetBanAppV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBanAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerBanAppServer).GetBanAppV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.banapp.v2.AppUserManagerBanApp/GetBanAppV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerBanAppServer).GetBanAppV2(ctx, req.(*GetBanAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerBanApp_GetBanAppOnlyV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBanAppOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerBanAppServer).GetBanAppOnlyV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.banapp.v2.AppUserManagerBanApp/GetBanAppOnlyV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerBanAppServer).GetBanAppOnlyV2(ctx, req.(*GetBanAppOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerBanApp_GetBanAppsV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBanAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerBanAppServer).GetBanAppsV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.banapp.v2.AppUserManagerBanApp/GetBanAppsV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerBanAppServer).GetBanAppsV2(ctx, req.(*GetBanAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerBanApp_ExistBanAppV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistBanAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerBanAppServer).ExistBanAppV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.banapp.v2.AppUserManagerBanApp/ExistBanAppV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerBanAppServer).ExistBanAppV2(ctx, req.(*ExistBanAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerBanApp_ExistBanAppCondsV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistBanAppCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerBanAppServer).ExistBanAppCondsV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.banapp.v2.AppUserManagerBanApp/ExistBanAppCondsV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerBanAppServer).ExistBanAppCondsV2(ctx, req.(*ExistBanAppCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerBanApp_CountBanAppsV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountBanAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerBanAppServer).CountBanAppsV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.banapp.v2.AppUserManagerBanApp/CountBanAppsV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerBanAppServer).CountBanAppsV2(ctx, req.(*CountBanAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerBanApp_DeleteBanAppV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBanAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerBanAppServer).DeleteBanAppV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.banapp.v2.AppUserManagerBanApp/DeleteBanAppV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerBanAppServer).DeleteBanAppV2(ctx, req.(*DeleteBanAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppUserManagerBanApp_ServiceDesc is the grpc.ServiceDesc for AppUserManagerBanApp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppUserManagerBanApp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app.user.manager.banapp.v2.AppUserManagerBanApp",
	HandlerType: (*AppUserManagerBanAppServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBanAppV2",
			Handler:    _AppUserManagerBanApp_CreateBanAppV2_Handler,
		},
		{
			MethodName: "CreateBanAppsV2",
			Handler:    _AppUserManagerBanApp_CreateBanAppsV2_Handler,
		},
		{
			MethodName: "UpdateBanAppV2",
			Handler:    _AppUserManagerBanApp_UpdateBanAppV2_Handler,
		},
		{
			MethodName: "GetBanAppV2",
			Handler:    _AppUserManagerBanApp_GetBanAppV2_Handler,
		},
		{
			MethodName: "GetBanAppOnlyV2",
			Handler:    _AppUserManagerBanApp_GetBanAppOnlyV2_Handler,
		},
		{
			MethodName: "GetBanAppsV2",
			Handler:    _AppUserManagerBanApp_GetBanAppsV2_Handler,
		},
		{
			MethodName: "ExistBanAppV2",
			Handler:    _AppUserManagerBanApp_ExistBanAppV2_Handler,
		},
		{
			MethodName: "ExistBanAppCondsV2",
			Handler:    _AppUserManagerBanApp_ExistBanAppCondsV2_Handler,
		},
		{
			MethodName: "CountBanAppsV2",
			Handler:    _AppUserManagerBanApp_CountBanAppsV2_Handler,
		},
		{
			MethodName: "DeleteBanAppV2",
			Handler:    _AppUserManagerBanApp_DeleteBanAppV2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/appusermgrv2/banapp/banapp.proto",
}
