// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/appusermgrv2/app/app.proto

package app

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppUserManagerAppClient is the client API for AppUserManagerApp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppUserManagerAppClient interface {
	CreateAppV2(ctx context.Context, in *CreateAppRequest, opts ...grpc.CallOption) (*CreateAppResponse, error)
	CreateAppsV2(ctx context.Context, in *CreateAppsRequest, opts ...grpc.CallOption) (*CreateAppsResponse, error)
	UpdateAppV2(ctx context.Context, in *UpdateAppRequest, opts ...grpc.CallOption) (*UpdateAppResponse, error)
	UpdateAppFieldsV2(ctx context.Context, in *UpdateAppFieldsRequest, opts ...grpc.CallOption) (*UpdateAppFieldsResponse, error)
	GetAppV2(ctx context.Context, in *GetAppRequest, opts ...grpc.CallOption) (*GetAppResponse, error)
	GetAppOnlyV2(ctx context.Context, in *GetAppOnlyRequest, opts ...grpc.CallOption) (*GetAppOnlyResponse, error)
	GetAppsV2(ctx context.Context, in *GetAppsRequest, opts ...grpc.CallOption) (*GetAppsResponse, error)
	ExistAppV2(ctx context.Context, in *ExistAppRequest, opts ...grpc.CallOption) (*ExistAppResponse, error)
	ExistAppCondsV2(ctx context.Context, in *ExistAppCondsRequest, opts ...grpc.CallOption) (*ExistAppCondsResponse, error)
	CountAppsV2(ctx context.Context, in *CountAppsRequest, opts ...grpc.CallOption) (*CountAppsResponse, error)
	DeleteAppV2(ctx context.Context, in *DeleteAppRequest, opts ...grpc.CallOption) (*DeleteAppResponse, error)
}

type appUserManagerAppClient struct {
	cc grpc.ClientConnInterface
}

func NewAppUserManagerAppClient(cc grpc.ClientConnInterface) AppUserManagerAppClient {
	return &appUserManagerAppClient{cc}
}

func (c *appUserManagerAppClient) CreateAppV2(ctx context.Context, in *CreateAppRequest, opts ...grpc.CallOption) (*CreateAppResponse, error) {
	out := new(CreateAppResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v2.AppUserManagerApp/CreateAppV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppClient) CreateAppsV2(ctx context.Context, in *CreateAppsRequest, opts ...grpc.CallOption) (*CreateAppsResponse, error) {
	out := new(CreateAppsResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v2.AppUserManagerApp/CreateAppsV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppClient) UpdateAppV2(ctx context.Context, in *UpdateAppRequest, opts ...grpc.CallOption) (*UpdateAppResponse, error) {
	out := new(UpdateAppResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v2.AppUserManagerApp/UpdateAppV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppClient) UpdateAppFieldsV2(ctx context.Context, in *UpdateAppFieldsRequest, opts ...grpc.CallOption) (*UpdateAppFieldsResponse, error) {
	out := new(UpdateAppFieldsResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v2.AppUserManagerApp/UpdateAppFieldsV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppClient) GetAppV2(ctx context.Context, in *GetAppRequest, opts ...grpc.CallOption) (*GetAppResponse, error) {
	out := new(GetAppResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v2.AppUserManagerApp/GetAppV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppClient) GetAppOnlyV2(ctx context.Context, in *GetAppOnlyRequest, opts ...grpc.CallOption) (*GetAppOnlyResponse, error) {
	out := new(GetAppOnlyResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v2.AppUserManagerApp/GetAppOnlyV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppClient) GetAppsV2(ctx context.Context, in *GetAppsRequest, opts ...grpc.CallOption) (*GetAppsResponse, error) {
	out := new(GetAppsResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v2.AppUserManagerApp/GetAppsV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppClient) ExistAppV2(ctx context.Context, in *ExistAppRequest, opts ...grpc.CallOption) (*ExistAppResponse, error) {
	out := new(ExistAppResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v2.AppUserManagerApp/ExistAppV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppClient) ExistAppCondsV2(ctx context.Context, in *ExistAppCondsRequest, opts ...grpc.CallOption) (*ExistAppCondsResponse, error) {
	out := new(ExistAppCondsResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v2.AppUserManagerApp/ExistAppCondsV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppClient) CountAppsV2(ctx context.Context, in *CountAppsRequest, opts ...grpc.CallOption) (*CountAppsResponse, error) {
	out := new(CountAppsResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v2.AppUserManagerApp/CountAppsV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppClient) DeleteAppV2(ctx context.Context, in *DeleteAppRequest, opts ...grpc.CallOption) (*DeleteAppResponse, error) {
	out := new(DeleteAppResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.v2.AppUserManagerApp/DeleteAppV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppUserManagerAppServer is the server API for AppUserManagerApp service.
// All implementations must embed UnimplementedAppUserManagerAppServer
// for forward compatibility
type AppUserManagerAppServer interface {
	CreateAppV2(context.Context, *CreateAppRequest) (*CreateAppResponse, error)
	CreateAppsV2(context.Context, *CreateAppsRequest) (*CreateAppsResponse, error)
	UpdateAppV2(context.Context, *UpdateAppRequest) (*UpdateAppResponse, error)
	UpdateAppFieldsV2(context.Context, *UpdateAppFieldsRequest) (*UpdateAppFieldsResponse, error)
	GetAppV2(context.Context, *GetAppRequest) (*GetAppResponse, error)
	GetAppOnlyV2(context.Context, *GetAppOnlyRequest) (*GetAppOnlyResponse, error)
	GetAppsV2(context.Context, *GetAppsRequest) (*GetAppsResponse, error)
	ExistAppV2(context.Context, *ExistAppRequest) (*ExistAppResponse, error)
	ExistAppCondsV2(context.Context, *ExistAppCondsRequest) (*ExistAppCondsResponse, error)
	CountAppsV2(context.Context, *CountAppsRequest) (*CountAppsResponse, error)
	DeleteAppV2(context.Context, *DeleteAppRequest) (*DeleteAppResponse, error)
	mustEmbedUnimplementedAppUserManagerAppServer()
}

// UnimplementedAppUserManagerAppServer must be embedded to have forward compatible implementations.
type UnimplementedAppUserManagerAppServer struct {
}

func (UnimplementedAppUserManagerAppServer) CreateAppV2(context.Context, *CreateAppRequest) (*CreateAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppV2 not implemented")
}
func (UnimplementedAppUserManagerAppServer) CreateAppsV2(context.Context, *CreateAppsRequest) (*CreateAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppsV2 not implemented")
}
func (UnimplementedAppUserManagerAppServer) UpdateAppV2(context.Context, *UpdateAppRequest) (*UpdateAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppV2 not implemented")
}
func (UnimplementedAppUserManagerAppServer) UpdateAppFieldsV2(context.Context, *UpdateAppFieldsRequest) (*UpdateAppFieldsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppFieldsV2 not implemented")
}
func (UnimplementedAppUserManagerAppServer) GetAppV2(context.Context, *GetAppRequest) (*GetAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppV2 not implemented")
}
func (UnimplementedAppUserManagerAppServer) GetAppOnlyV2(context.Context, *GetAppOnlyRequest) (*GetAppOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppOnlyV2 not implemented")
}
func (UnimplementedAppUserManagerAppServer) GetAppsV2(context.Context, *GetAppsRequest) (*GetAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppsV2 not implemented")
}
func (UnimplementedAppUserManagerAppServer) ExistAppV2(context.Context, *ExistAppRequest) (*ExistAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistAppV2 not implemented")
}
func (UnimplementedAppUserManagerAppServer) ExistAppCondsV2(context.Context, *ExistAppCondsRequest) (*ExistAppCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistAppCondsV2 not implemented")
}
func (UnimplementedAppUserManagerAppServer) CountAppsV2(context.Context, *CountAppsRequest) (*CountAppsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAppsV2 not implemented")
}
func (UnimplementedAppUserManagerAppServer) DeleteAppV2(context.Context, *DeleteAppRequest) (*DeleteAppResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppV2 not implemented")
}
func (UnimplementedAppUserManagerAppServer) mustEmbedUnimplementedAppUserManagerAppServer() {}

// UnsafeAppUserManagerAppServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppUserManagerAppServer will
// result in compilation errors.
type UnsafeAppUserManagerAppServer interface {
	mustEmbedUnimplementedAppUserManagerAppServer()
}

func RegisterAppUserManagerAppServer(s grpc.ServiceRegistrar, srv AppUserManagerAppServer) {
	s.RegisterService(&AppUserManagerApp_ServiceDesc, srv)
}

func _AppUserManagerApp_CreateAppV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppServer).CreateAppV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v2.AppUserManagerApp/CreateAppV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppServer).CreateAppV2(ctx, req.(*CreateAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerApp_CreateAppsV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppServer).CreateAppsV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v2.AppUserManagerApp/CreateAppsV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppServer).CreateAppsV2(ctx, req.(*CreateAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerApp_UpdateAppV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppServer).UpdateAppV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v2.AppUserManagerApp/UpdateAppV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppServer).UpdateAppV2(ctx, req.(*UpdateAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerApp_UpdateAppFieldsV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppFieldsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppServer).UpdateAppFieldsV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v2.AppUserManagerApp/UpdateAppFieldsV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppServer).UpdateAppFieldsV2(ctx, req.(*UpdateAppFieldsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerApp_GetAppV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppServer).GetAppV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v2.AppUserManagerApp/GetAppV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppServer).GetAppV2(ctx, req.(*GetAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerApp_GetAppOnlyV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppServer).GetAppOnlyV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v2.AppUserManagerApp/GetAppOnlyV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppServer).GetAppOnlyV2(ctx, req.(*GetAppOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerApp_GetAppsV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppServer).GetAppsV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v2.AppUserManagerApp/GetAppsV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppServer).GetAppsV2(ctx, req.(*GetAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerApp_ExistAppV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppServer).ExistAppV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v2.AppUserManagerApp/ExistAppV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppServer).ExistAppV2(ctx, req.(*ExistAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerApp_ExistAppCondsV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistAppCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppServer).ExistAppCondsV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v2.AppUserManagerApp/ExistAppCondsV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppServer).ExistAppCondsV2(ctx, req.(*ExistAppCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerApp_CountAppsV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAppsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppServer).CountAppsV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v2.AppUserManagerApp/CountAppsV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppServer).CountAppsV2(ctx, req.(*CountAppsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerApp_DeleteAppV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppServer).DeleteAppV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.v2.AppUserManagerApp/DeleteAppV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppServer).DeleteAppV2(ctx, req.(*DeleteAppRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppUserManagerApp_ServiceDesc is the grpc.ServiceDesc for AppUserManagerApp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppUserManagerApp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app.user.manager.v2.AppUserManagerApp",
	HandlerType: (*AppUserManagerAppServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAppV2",
			Handler:    _AppUserManagerApp_CreateAppV2_Handler,
		},
		{
			MethodName: "CreateAppsV2",
			Handler:    _AppUserManagerApp_CreateAppsV2_Handler,
		},
		{
			MethodName: "UpdateAppV2",
			Handler:    _AppUserManagerApp_UpdateAppV2_Handler,
		},
		{
			MethodName: "UpdateAppFieldsV2",
			Handler:    _AppUserManagerApp_UpdateAppFieldsV2_Handler,
		},
		{
			MethodName: "GetAppV2",
			Handler:    _AppUserManagerApp_GetAppV2_Handler,
		},
		{
			MethodName: "GetAppOnlyV2",
			Handler:    _AppUserManagerApp_GetAppOnlyV2_Handler,
		},
		{
			MethodName: "GetAppsV2",
			Handler:    _AppUserManagerApp_GetAppsV2_Handler,
		},
		{
			MethodName: "ExistAppV2",
			Handler:    _AppUserManagerApp_ExistAppV2_Handler,
		},
		{
			MethodName: "ExistAppCondsV2",
			Handler:    _AppUserManagerApp_ExistAppCondsV2_Handler,
		},
		{
			MethodName: "CountAppsV2",
			Handler:    _AppUserManagerApp_CountAppsV2_Handler,
		},
		{
			MethodName: "DeleteAppV2",
			Handler:    _AppUserManagerApp_DeleteAppV2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/appusermgrv2/app/app.proto",
}
