// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/appusermgrv2/approle/approle.proto

package approle

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AppUserManagerAppRoleClient is the client API for AppUserManagerAppRole service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppUserManagerAppRoleClient interface {
	CreateAppRoleV2(ctx context.Context, in *CreateAppRoleRequest, opts ...grpc.CallOption) (*CreateAppRoleResponse, error)
	CreateAppRolesV2(ctx context.Context, in *CreateAppRolesRequest, opts ...grpc.CallOption) (*CreateAppRolesResponse, error)
	UpdateAppRoleV2(ctx context.Context, in *UpdateAppRoleRequest, opts ...grpc.CallOption) (*UpdateAppRoleResponse, error)
	GetAppRoleV2(ctx context.Context, in *GetAppRoleRequest, opts ...grpc.CallOption) (*GetAppRoleResponse, error)
	GetAppRoleOnlyV2(ctx context.Context, in *GetAppRoleOnlyRequest, opts ...grpc.CallOption) (*GetAppRoleOnlyResponse, error)
	GetAppRolesV2(ctx context.Context, in *GetAppRolesRequest, opts ...grpc.CallOption) (*GetAppRolesResponse, error)
	ExistAppRoleV2(ctx context.Context, in *ExistAppRoleRequest, opts ...grpc.CallOption) (*ExistAppRoleResponse, error)
	ExistAppRoleCondsV2(ctx context.Context, in *ExistAppRoleCondsRequest, opts ...grpc.CallOption) (*ExistAppRoleCondsResponse, error)
	CountAppRolesV2(ctx context.Context, in *CountAppRolesRequest, opts ...grpc.CallOption) (*CountAppRolesResponse, error)
	DeleteAppRoleV2(ctx context.Context, in *DeleteAppRoleRequest, opts ...grpc.CallOption) (*DeleteAppRoleResponse, error)
}

type appUserManagerAppRoleClient struct {
	cc grpc.ClientConnInterface
}

func NewAppUserManagerAppRoleClient(cc grpc.ClientConnInterface) AppUserManagerAppRoleClient {
	return &appUserManagerAppRoleClient{cc}
}

func (c *appUserManagerAppRoleClient) CreateAppRoleV2(ctx context.Context, in *CreateAppRoleRequest, opts ...grpc.CallOption) (*CreateAppRoleResponse, error) {
	out := new(CreateAppRoleResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.approle.v2.AppUserManagerAppRole/CreateAppRoleV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppRoleClient) CreateAppRolesV2(ctx context.Context, in *CreateAppRolesRequest, opts ...grpc.CallOption) (*CreateAppRolesResponse, error) {
	out := new(CreateAppRolesResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.approle.v2.AppUserManagerAppRole/CreateAppRolesV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppRoleClient) UpdateAppRoleV2(ctx context.Context, in *UpdateAppRoleRequest, opts ...grpc.CallOption) (*UpdateAppRoleResponse, error) {
	out := new(UpdateAppRoleResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.approle.v2.AppUserManagerAppRole/UpdateAppRoleV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppRoleClient) GetAppRoleV2(ctx context.Context, in *GetAppRoleRequest, opts ...grpc.CallOption) (*GetAppRoleResponse, error) {
	out := new(GetAppRoleResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.approle.v2.AppUserManagerAppRole/GetAppRoleV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppRoleClient) GetAppRoleOnlyV2(ctx context.Context, in *GetAppRoleOnlyRequest, opts ...grpc.CallOption) (*GetAppRoleOnlyResponse, error) {
	out := new(GetAppRoleOnlyResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.approle.v2.AppUserManagerAppRole/GetAppRoleOnlyV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppRoleClient) GetAppRolesV2(ctx context.Context, in *GetAppRolesRequest, opts ...grpc.CallOption) (*GetAppRolesResponse, error) {
	out := new(GetAppRolesResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.approle.v2.AppUserManagerAppRole/GetAppRolesV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppRoleClient) ExistAppRoleV2(ctx context.Context, in *ExistAppRoleRequest, opts ...grpc.CallOption) (*ExistAppRoleResponse, error) {
	out := new(ExistAppRoleResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.approle.v2.AppUserManagerAppRole/ExistAppRoleV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppRoleClient) ExistAppRoleCondsV2(ctx context.Context, in *ExistAppRoleCondsRequest, opts ...grpc.CallOption) (*ExistAppRoleCondsResponse, error) {
	out := new(ExistAppRoleCondsResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.approle.v2.AppUserManagerAppRole/ExistAppRoleCondsV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppRoleClient) CountAppRolesV2(ctx context.Context, in *CountAppRolesRequest, opts ...grpc.CallOption) (*CountAppRolesResponse, error) {
	out := new(CountAppRolesResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.approle.v2.AppUserManagerAppRole/CountAppRolesV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appUserManagerAppRoleClient) DeleteAppRoleV2(ctx context.Context, in *DeleteAppRoleRequest, opts ...grpc.CallOption) (*DeleteAppRoleResponse, error) {
	out := new(DeleteAppRoleResponse)
	err := c.cc.Invoke(ctx, "/app.user.manager.approle.v2.AppUserManagerAppRole/DeleteAppRoleV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppUserManagerAppRoleServer is the server API for AppUserManagerAppRole service.
// All implementations must embed UnimplementedAppUserManagerAppRoleServer
// for forward compatibility
type AppUserManagerAppRoleServer interface {
	CreateAppRoleV2(context.Context, *CreateAppRoleRequest) (*CreateAppRoleResponse, error)
	CreateAppRolesV2(context.Context, *CreateAppRolesRequest) (*CreateAppRolesResponse, error)
	UpdateAppRoleV2(context.Context, *UpdateAppRoleRequest) (*UpdateAppRoleResponse, error)
	GetAppRoleV2(context.Context, *GetAppRoleRequest) (*GetAppRoleResponse, error)
	GetAppRoleOnlyV2(context.Context, *GetAppRoleOnlyRequest) (*GetAppRoleOnlyResponse, error)
	GetAppRolesV2(context.Context, *GetAppRolesRequest) (*GetAppRolesResponse, error)
	ExistAppRoleV2(context.Context, *ExistAppRoleRequest) (*ExistAppRoleResponse, error)
	ExistAppRoleCondsV2(context.Context, *ExistAppRoleCondsRequest) (*ExistAppRoleCondsResponse, error)
	CountAppRolesV2(context.Context, *CountAppRolesRequest) (*CountAppRolesResponse, error)
	DeleteAppRoleV2(context.Context, *DeleteAppRoleRequest) (*DeleteAppRoleResponse, error)
	mustEmbedUnimplementedAppUserManagerAppRoleServer()
}

// UnimplementedAppUserManagerAppRoleServer must be embedded to have forward compatible implementations.
type UnimplementedAppUserManagerAppRoleServer struct {
}

func (UnimplementedAppUserManagerAppRoleServer) CreateAppRoleV2(context.Context, *CreateAppRoleRequest) (*CreateAppRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppRoleV2 not implemented")
}
func (UnimplementedAppUserManagerAppRoleServer) CreateAppRolesV2(context.Context, *CreateAppRolesRequest) (*CreateAppRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAppRolesV2 not implemented")
}
func (UnimplementedAppUserManagerAppRoleServer) UpdateAppRoleV2(context.Context, *UpdateAppRoleRequest) (*UpdateAppRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAppRoleV2 not implemented")
}
func (UnimplementedAppUserManagerAppRoleServer) GetAppRoleV2(context.Context, *GetAppRoleRequest) (*GetAppRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppRoleV2 not implemented")
}
func (UnimplementedAppUserManagerAppRoleServer) GetAppRoleOnlyV2(context.Context, *GetAppRoleOnlyRequest) (*GetAppRoleOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppRoleOnlyV2 not implemented")
}
func (UnimplementedAppUserManagerAppRoleServer) GetAppRolesV2(context.Context, *GetAppRolesRequest) (*GetAppRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppRolesV2 not implemented")
}
func (UnimplementedAppUserManagerAppRoleServer) ExistAppRoleV2(context.Context, *ExistAppRoleRequest) (*ExistAppRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistAppRoleV2 not implemented")
}
func (UnimplementedAppUserManagerAppRoleServer) ExistAppRoleCondsV2(context.Context, *ExistAppRoleCondsRequest) (*ExistAppRoleCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistAppRoleCondsV2 not implemented")
}
func (UnimplementedAppUserManagerAppRoleServer) CountAppRolesV2(context.Context, *CountAppRolesRequest) (*CountAppRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountAppRolesV2 not implemented")
}
func (UnimplementedAppUserManagerAppRoleServer) DeleteAppRoleV2(context.Context, *DeleteAppRoleRequest) (*DeleteAppRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAppRoleV2 not implemented")
}
func (UnimplementedAppUserManagerAppRoleServer) mustEmbedUnimplementedAppUserManagerAppRoleServer() {}

// UnsafeAppUserManagerAppRoleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppUserManagerAppRoleServer will
// result in compilation errors.
type UnsafeAppUserManagerAppRoleServer interface {
	mustEmbedUnimplementedAppUserManagerAppRoleServer()
}

func RegisterAppUserManagerAppRoleServer(s grpc.ServiceRegistrar, srv AppUserManagerAppRoleServer) {
	s.RegisterService(&AppUserManagerAppRole_ServiceDesc, srv)
}

func _AppUserManagerAppRole_CreateAppRoleV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppRoleServer).CreateAppRoleV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.approle.v2.AppUserManagerAppRole/CreateAppRoleV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppRoleServer).CreateAppRoleV2(ctx, req.(*CreateAppRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerAppRole_CreateAppRolesV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAppRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppRoleServer).CreateAppRolesV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.approle.v2.AppUserManagerAppRole/CreateAppRolesV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppRoleServer).CreateAppRolesV2(ctx, req.(*CreateAppRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerAppRole_UpdateAppRoleV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAppRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppRoleServer).UpdateAppRoleV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.approle.v2.AppUserManagerAppRole/UpdateAppRoleV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppRoleServer).UpdateAppRoleV2(ctx, req.(*UpdateAppRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerAppRole_GetAppRoleV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppRoleServer).GetAppRoleV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.approle.v2.AppUserManagerAppRole/GetAppRoleV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppRoleServer).GetAppRoleV2(ctx, req.(*GetAppRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerAppRole_GetAppRoleOnlyV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppRoleOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppRoleServer).GetAppRoleOnlyV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.approle.v2.AppUserManagerAppRole/GetAppRoleOnlyV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppRoleServer).GetAppRoleOnlyV2(ctx, req.(*GetAppRoleOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerAppRole_GetAppRolesV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppRoleServer).GetAppRolesV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.approle.v2.AppUserManagerAppRole/GetAppRolesV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppRoleServer).GetAppRolesV2(ctx, req.(*GetAppRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerAppRole_ExistAppRoleV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistAppRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppRoleServer).ExistAppRoleV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.approle.v2.AppUserManagerAppRole/ExistAppRoleV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppRoleServer).ExistAppRoleV2(ctx, req.(*ExistAppRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerAppRole_ExistAppRoleCondsV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistAppRoleCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppRoleServer).ExistAppRoleCondsV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.approle.v2.AppUserManagerAppRole/ExistAppRoleCondsV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppRoleServer).ExistAppRoleCondsV2(ctx, req.(*ExistAppRoleCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerAppRole_CountAppRolesV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountAppRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppRoleServer).CountAppRolesV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.approle.v2.AppUserManagerAppRole/CountAppRolesV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppRoleServer).CountAppRolesV2(ctx, req.(*CountAppRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppUserManagerAppRole_DeleteAppRoleV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAppRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppUserManagerAppRoleServer).DeleteAppRoleV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/app.user.manager.approle.v2.AppUserManagerAppRole/DeleteAppRoleV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppUserManagerAppRoleServer).DeleteAppRoleV2(ctx, req.(*DeleteAppRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppUserManagerAppRole_ServiceDesc is the grpc.ServiceDesc for AppUserManagerAppRole service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppUserManagerAppRole_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app.user.manager.approle.v2.AppUserManagerAppRole",
	HandlerType: (*AppUserManagerAppRoleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAppRoleV2",
			Handler:    _AppUserManagerAppRole_CreateAppRoleV2_Handler,
		},
		{
			MethodName: "CreateAppRolesV2",
			Handler:    _AppUserManagerAppRole_CreateAppRolesV2_Handler,
		},
		{
			MethodName: "UpdateAppRoleV2",
			Handler:    _AppUserManagerAppRole_UpdateAppRoleV2_Handler,
		},
		{
			MethodName: "GetAppRoleV2",
			Handler:    _AppUserManagerAppRole_GetAppRoleV2_Handler,
		},
		{
			MethodName: "GetAppRoleOnlyV2",
			Handler:    _AppUserManagerAppRole_GetAppRoleOnlyV2_Handler,
		},
		{
			MethodName: "GetAppRolesV2",
			Handler:    _AppUserManagerAppRole_GetAppRolesV2_Handler,
		},
		{
			MethodName: "ExistAppRoleV2",
			Handler:    _AppUserManagerAppRole_ExistAppRoleV2_Handler,
		},
		{
			MethodName: "ExistAppRoleCondsV2",
			Handler:    _AppUserManagerAppRole_ExistAppRoleCondsV2_Handler,
		},
		{
			MethodName: "CountAppRolesV2",
			Handler:    _AppUserManagerAppRole_CountAppRolesV2_Handler,
		},
		{
			MethodName: "DeleteAppRoleV2",
			Handler:    _AppUserManagerAppRole_DeleteAppRoleV2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/appusermgrv2/approle/approle.proto",
}
