// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/notif/mgr/v1/template/sms/sms.proto

package sms

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateSMSTemplate(ctx context.Context, in *CreateSMSTemplateRequest, opts ...grpc.CallOption) (*CreateSMSTemplateResponse, error)
	CreateSMSTemplates(ctx context.Context, in *CreateSMSTemplatesRequest, opts ...grpc.CallOption) (*CreateSMSTemplatesResponse, error)
	UpdateSMSTemplate(ctx context.Context, in *UpdateSMSTemplateRequest, opts ...grpc.CallOption) (*UpdateSMSTemplateResponse, error)
	GetSMSTemplate(ctx context.Context, in *GetSMSTemplateRequest, opts ...grpc.CallOption) (*GetSMSTemplateResponse, error)
	GetSMSTemplateOnly(ctx context.Context, in *GetSMSTemplateOnlyRequest, opts ...grpc.CallOption) (*GetSMSTemplateOnlyResponse, error)
	GetSMSTemplates(ctx context.Context, in *GetSMSTemplatesRequest, opts ...grpc.CallOption) (*GetSMSTemplatesResponse, error)
	ExistSMSTemplate(ctx context.Context, in *ExistSMSTemplateRequest, opts ...grpc.CallOption) (*ExistSMSTemplateResponse, error)
	ExistSMSTemplateConds(ctx context.Context, in *ExistSMSTemplateCondsRequest, opts ...grpc.CallOption) (*ExistSMSTemplateCondsResponse, error)
	DeleteSMSTemplate(ctx context.Context, in *DeleteSMSTemplateRequest, opts ...grpc.CallOption) (*DeleteSMSTemplateResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateSMSTemplate(ctx context.Context, in *CreateSMSTemplateRequest, opts ...grpc.CallOption) (*CreateSMSTemplateResponse, error) {
	out := new(CreateSMSTemplateResponse)
	err := c.cc.Invoke(ctx, "/notif.manager.template.sms.v1.Manager/CreateSMSTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateSMSTemplates(ctx context.Context, in *CreateSMSTemplatesRequest, opts ...grpc.CallOption) (*CreateSMSTemplatesResponse, error) {
	out := new(CreateSMSTemplatesResponse)
	err := c.cc.Invoke(ctx, "/notif.manager.template.sms.v1.Manager/CreateSMSTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateSMSTemplate(ctx context.Context, in *UpdateSMSTemplateRequest, opts ...grpc.CallOption) (*UpdateSMSTemplateResponse, error) {
	out := new(UpdateSMSTemplateResponse)
	err := c.cc.Invoke(ctx, "/notif.manager.template.sms.v1.Manager/UpdateSMSTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetSMSTemplate(ctx context.Context, in *GetSMSTemplateRequest, opts ...grpc.CallOption) (*GetSMSTemplateResponse, error) {
	out := new(GetSMSTemplateResponse)
	err := c.cc.Invoke(ctx, "/notif.manager.template.sms.v1.Manager/GetSMSTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetSMSTemplateOnly(ctx context.Context, in *GetSMSTemplateOnlyRequest, opts ...grpc.CallOption) (*GetSMSTemplateOnlyResponse, error) {
	out := new(GetSMSTemplateOnlyResponse)
	err := c.cc.Invoke(ctx, "/notif.manager.template.sms.v1.Manager/GetSMSTemplateOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetSMSTemplates(ctx context.Context, in *GetSMSTemplatesRequest, opts ...grpc.CallOption) (*GetSMSTemplatesResponse, error) {
	out := new(GetSMSTemplatesResponse)
	err := c.cc.Invoke(ctx, "/notif.manager.template.sms.v1.Manager/GetSMSTemplates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistSMSTemplate(ctx context.Context, in *ExistSMSTemplateRequest, opts ...grpc.CallOption) (*ExistSMSTemplateResponse, error) {
	out := new(ExistSMSTemplateResponse)
	err := c.cc.Invoke(ctx, "/notif.manager.template.sms.v1.Manager/ExistSMSTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistSMSTemplateConds(ctx context.Context, in *ExistSMSTemplateCondsRequest, opts ...grpc.CallOption) (*ExistSMSTemplateCondsResponse, error) {
	out := new(ExistSMSTemplateCondsResponse)
	err := c.cc.Invoke(ctx, "/notif.manager.template.sms.v1.Manager/ExistSMSTemplateConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteSMSTemplate(ctx context.Context, in *DeleteSMSTemplateRequest, opts ...grpc.CallOption) (*DeleteSMSTemplateResponse, error) {
	out := new(DeleteSMSTemplateResponse)
	err := c.cc.Invoke(ctx, "/notif.manager.template.sms.v1.Manager/DeleteSMSTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateSMSTemplate(context.Context, *CreateSMSTemplateRequest) (*CreateSMSTemplateResponse, error)
	CreateSMSTemplates(context.Context, *CreateSMSTemplatesRequest) (*CreateSMSTemplatesResponse, error)
	UpdateSMSTemplate(context.Context, *UpdateSMSTemplateRequest) (*UpdateSMSTemplateResponse, error)
	GetSMSTemplate(context.Context, *GetSMSTemplateRequest) (*GetSMSTemplateResponse, error)
	GetSMSTemplateOnly(context.Context, *GetSMSTemplateOnlyRequest) (*GetSMSTemplateOnlyResponse, error)
	GetSMSTemplates(context.Context, *GetSMSTemplatesRequest) (*GetSMSTemplatesResponse, error)
	ExistSMSTemplate(context.Context, *ExistSMSTemplateRequest) (*ExistSMSTemplateResponse, error)
	ExistSMSTemplateConds(context.Context, *ExistSMSTemplateCondsRequest) (*ExistSMSTemplateCondsResponse, error)
	DeleteSMSTemplate(context.Context, *DeleteSMSTemplateRequest) (*DeleteSMSTemplateResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateSMSTemplate(context.Context, *CreateSMSTemplateRequest) (*CreateSMSTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSMSTemplate not implemented")
}
func (UnimplementedManagerServer) CreateSMSTemplates(context.Context, *CreateSMSTemplatesRequest) (*CreateSMSTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSMSTemplates not implemented")
}
func (UnimplementedManagerServer) UpdateSMSTemplate(context.Context, *UpdateSMSTemplateRequest) (*UpdateSMSTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSMSTemplate not implemented")
}
func (UnimplementedManagerServer) GetSMSTemplate(context.Context, *GetSMSTemplateRequest) (*GetSMSTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSMSTemplate not implemented")
}
func (UnimplementedManagerServer) GetSMSTemplateOnly(context.Context, *GetSMSTemplateOnlyRequest) (*GetSMSTemplateOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSMSTemplateOnly not implemented")
}
func (UnimplementedManagerServer) GetSMSTemplates(context.Context, *GetSMSTemplatesRequest) (*GetSMSTemplatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSMSTemplates not implemented")
}
func (UnimplementedManagerServer) ExistSMSTemplate(context.Context, *ExistSMSTemplateRequest) (*ExistSMSTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistSMSTemplate not implemented")
}
func (UnimplementedManagerServer) ExistSMSTemplateConds(context.Context, *ExistSMSTemplateCondsRequest) (*ExistSMSTemplateCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistSMSTemplateConds not implemented")
}
func (UnimplementedManagerServer) DeleteSMSTemplate(context.Context, *DeleteSMSTemplateRequest) (*DeleteSMSTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSMSTemplate not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateSMSTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSMSTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateSMSTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.manager.template.sms.v1.Manager/CreateSMSTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateSMSTemplate(ctx, req.(*CreateSMSTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateSMSTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSMSTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateSMSTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.manager.template.sms.v1.Manager/CreateSMSTemplates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateSMSTemplates(ctx, req.(*CreateSMSTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateSMSTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSMSTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateSMSTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.manager.template.sms.v1.Manager/UpdateSMSTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateSMSTemplate(ctx, req.(*UpdateSMSTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetSMSTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSMSTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetSMSTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.manager.template.sms.v1.Manager/GetSMSTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetSMSTemplate(ctx, req.(*GetSMSTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetSMSTemplateOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSMSTemplateOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetSMSTemplateOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.manager.template.sms.v1.Manager/GetSMSTemplateOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetSMSTemplateOnly(ctx, req.(*GetSMSTemplateOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetSMSTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSMSTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetSMSTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.manager.template.sms.v1.Manager/GetSMSTemplates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetSMSTemplates(ctx, req.(*GetSMSTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistSMSTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistSMSTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistSMSTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.manager.template.sms.v1.Manager/ExistSMSTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistSMSTemplate(ctx, req.(*ExistSMSTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistSMSTemplateConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistSMSTemplateCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistSMSTemplateConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.manager.template.sms.v1.Manager/ExistSMSTemplateConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistSMSTemplateConds(ctx, req.(*ExistSMSTemplateCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteSMSTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSMSTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteSMSTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.manager.template.sms.v1.Manager/DeleteSMSTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteSMSTemplate(ctx, req.(*DeleteSMSTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notif.manager.template.sms.v1.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSMSTemplate",
			Handler:    _Manager_CreateSMSTemplate_Handler,
		},
		{
			MethodName: "CreateSMSTemplates",
			Handler:    _Manager_CreateSMSTemplates_Handler,
		},
		{
			MethodName: "UpdateSMSTemplate",
			Handler:    _Manager_UpdateSMSTemplate_Handler,
		},
		{
			MethodName: "GetSMSTemplate",
			Handler:    _Manager_GetSMSTemplate_Handler,
		},
		{
			MethodName: "GetSMSTemplateOnly",
			Handler:    _Manager_GetSMSTemplateOnly_Handler,
		},
		{
			MethodName: "GetSMSTemplates",
			Handler:    _Manager_GetSMSTemplates_Handler,
		},
		{
			MethodName: "ExistSMSTemplate",
			Handler:    _Manager_ExistSMSTemplate_Handler,
		},
		{
			MethodName: "ExistSMSTemplateConds",
			Handler:    _Manager_ExistSMSTemplateConds_Handler,
		},
		{
			MethodName: "DeleteSMSTemplate",
			Handler:    _Manager_DeleteSMSTemplate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/notif/mgr/v1/template/sms/sms.proto",
}
