// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.1
// source: npool/notif/mgr/v1/contact/contact.proto

package contact

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Manager_CreateContact_FullMethodName     = "/notif.manager.contact.v1.Manager/CreateContact"
	Manager_CreateContacts_FullMethodName    = "/notif.manager.contact.v1.Manager/CreateContacts"
	Manager_UpdateContact_FullMethodName     = "/notif.manager.contact.v1.Manager/UpdateContact"
	Manager_GetContact_FullMethodName        = "/notif.manager.contact.v1.Manager/GetContact"
	Manager_GetContactOnly_FullMethodName    = "/notif.manager.contact.v1.Manager/GetContactOnly"
	Manager_GetContacts_FullMethodName       = "/notif.manager.contact.v1.Manager/GetContacts"
	Manager_ExistContact_FullMethodName      = "/notif.manager.contact.v1.Manager/ExistContact"
	Manager_ExistContactConds_FullMethodName = "/notif.manager.contact.v1.Manager/ExistContactConds"
	Manager_DeleteContact_FullMethodName     = "/notif.manager.contact.v1.Manager/DeleteContact"
)

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateContact(ctx context.Context, in *CreateContactRequest, opts ...grpc.CallOption) (*CreateContactResponse, error)
	CreateContacts(ctx context.Context, in *CreateContactsRequest, opts ...grpc.CallOption) (*CreateContactsResponse, error)
	UpdateContact(ctx context.Context, in *UpdateContactRequest, opts ...grpc.CallOption) (*UpdateContactResponse, error)
	GetContact(ctx context.Context, in *GetContactRequest, opts ...grpc.CallOption) (*GetContactResponse, error)
	GetContactOnly(ctx context.Context, in *GetContactOnlyRequest, opts ...grpc.CallOption) (*GetContactOnlyResponse, error)
	GetContacts(ctx context.Context, in *GetContactsRequest, opts ...grpc.CallOption) (*GetContactsResponse, error)
	ExistContact(ctx context.Context, in *ExistContactRequest, opts ...grpc.CallOption) (*ExistContactResponse, error)
	ExistContactConds(ctx context.Context, in *ExistContactCondsRequest, opts ...grpc.CallOption) (*ExistContactCondsResponse, error)
	DeleteContact(ctx context.Context, in *DeleteContactRequest, opts ...grpc.CallOption) (*DeleteContactResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateContact(ctx context.Context, in *CreateContactRequest, opts ...grpc.CallOption) (*CreateContactResponse, error) {
	out := new(CreateContactResponse)
	err := c.cc.Invoke(ctx, Manager_CreateContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateContacts(ctx context.Context, in *CreateContactsRequest, opts ...grpc.CallOption) (*CreateContactsResponse, error) {
	out := new(CreateContactsResponse)
	err := c.cc.Invoke(ctx, Manager_CreateContacts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateContact(ctx context.Context, in *UpdateContactRequest, opts ...grpc.CallOption) (*UpdateContactResponse, error) {
	out := new(UpdateContactResponse)
	err := c.cc.Invoke(ctx, Manager_UpdateContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetContact(ctx context.Context, in *GetContactRequest, opts ...grpc.CallOption) (*GetContactResponse, error) {
	out := new(GetContactResponse)
	err := c.cc.Invoke(ctx, Manager_GetContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetContactOnly(ctx context.Context, in *GetContactOnlyRequest, opts ...grpc.CallOption) (*GetContactOnlyResponse, error) {
	out := new(GetContactOnlyResponse)
	err := c.cc.Invoke(ctx, Manager_GetContactOnly_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetContacts(ctx context.Context, in *GetContactsRequest, opts ...grpc.CallOption) (*GetContactsResponse, error) {
	out := new(GetContactsResponse)
	err := c.cc.Invoke(ctx, Manager_GetContacts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistContact(ctx context.Context, in *ExistContactRequest, opts ...grpc.CallOption) (*ExistContactResponse, error) {
	out := new(ExistContactResponse)
	err := c.cc.Invoke(ctx, Manager_ExistContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistContactConds(ctx context.Context, in *ExistContactCondsRequest, opts ...grpc.CallOption) (*ExistContactCondsResponse, error) {
	out := new(ExistContactCondsResponse)
	err := c.cc.Invoke(ctx, Manager_ExistContactConds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteContact(ctx context.Context, in *DeleteContactRequest, opts ...grpc.CallOption) (*DeleteContactResponse, error) {
	out := new(DeleteContactResponse)
	err := c.cc.Invoke(ctx, Manager_DeleteContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateContact(context.Context, *CreateContactRequest) (*CreateContactResponse, error)
	CreateContacts(context.Context, *CreateContactsRequest) (*CreateContactsResponse, error)
	UpdateContact(context.Context, *UpdateContactRequest) (*UpdateContactResponse, error)
	GetContact(context.Context, *GetContactRequest) (*GetContactResponse, error)
	GetContactOnly(context.Context, *GetContactOnlyRequest) (*GetContactOnlyResponse, error)
	GetContacts(context.Context, *GetContactsRequest) (*GetContactsResponse, error)
	ExistContact(context.Context, *ExistContactRequest) (*ExistContactResponse, error)
	ExistContactConds(context.Context, *ExistContactCondsRequest) (*ExistContactCondsResponse, error)
	DeleteContact(context.Context, *DeleteContactRequest) (*DeleteContactResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateContact(context.Context, *CreateContactRequest) (*CreateContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContact not implemented")
}
func (UnimplementedManagerServer) CreateContacts(context.Context, *CreateContactsRequest) (*CreateContactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateContacts not implemented")
}
func (UnimplementedManagerServer) UpdateContact(context.Context, *UpdateContactRequest) (*UpdateContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContact not implemented")
}
func (UnimplementedManagerServer) GetContact(context.Context, *GetContactRequest) (*GetContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContact not implemented")
}
func (UnimplementedManagerServer) GetContactOnly(context.Context, *GetContactOnlyRequest) (*GetContactOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContactOnly not implemented")
}
func (UnimplementedManagerServer) GetContacts(context.Context, *GetContactsRequest) (*GetContactsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContacts not implemented")
}
func (UnimplementedManagerServer) ExistContact(context.Context, *ExistContactRequest) (*ExistContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistContact not implemented")
}
func (UnimplementedManagerServer) ExistContactConds(context.Context, *ExistContactCondsRequest) (*ExistContactCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistContactConds not implemented")
}
func (UnimplementedManagerServer) DeleteContact(context.Context, *DeleteContactRequest) (*DeleteContactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContact not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_CreateContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateContact(ctx, req.(*CreateContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_CreateContacts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateContacts(ctx, req.(*CreateContactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_UpdateContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateContact(ctx, req.(*UpdateContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetContact(ctx, req.(*GetContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetContactOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetContactOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetContactOnly_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetContactOnly(ctx, req.(*GetContactOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContactsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_GetContacts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetContacts(ctx, req.(*GetContactsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_ExistContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistContact(ctx, req.(*ExistContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistContactConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistContactCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistContactConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_ExistContactConds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistContactConds(ctx, req.(*ExistContactCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Manager_DeleteContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteContact(ctx, req.(*DeleteContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notif.manager.contact.v1.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateContact",
			Handler:    _Manager_CreateContact_Handler,
		},
		{
			MethodName: "CreateContacts",
			Handler:    _Manager_CreateContacts_Handler,
		},
		{
			MethodName: "UpdateContact",
			Handler:    _Manager_UpdateContact_Handler,
		},
		{
			MethodName: "GetContact",
			Handler:    _Manager_GetContact_Handler,
		},
		{
			MethodName: "GetContactOnly",
			Handler:    _Manager_GetContactOnly_Handler,
		},
		{
			MethodName: "GetContacts",
			Handler:    _Manager_GetContacts_Handler,
		},
		{
			MethodName: "ExistContact",
			Handler:    _Manager_ExistContact_Handler,
		},
		{
			MethodName: "ExistContactConds",
			Handler:    _Manager_ExistContactConds_Handler,
		},
		{
			MethodName: "DeleteContact",
			Handler:    _Manager_DeleteContact_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/notif/mgr/v1/contact/contact.proto",
}
