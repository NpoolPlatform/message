// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: npool/notif/mgr/v1/notif/channel/channel.proto

package channel

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagerClient is the client API for Manager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerClient interface {
	CreateChannel(ctx context.Context, in *CreateChannelRequest, opts ...grpc.CallOption) (*CreateChannelResponse, error)
	CreateChannels(ctx context.Context, in *CreateChannelsRequest, opts ...grpc.CallOption) (*CreateChannelsResponse, error)
	UpdateChannel(ctx context.Context, in *UpdateChannelRequest, opts ...grpc.CallOption) (*UpdateChannelResponse, error)
	GetChannel(ctx context.Context, in *GetChannelRequest, opts ...grpc.CallOption) (*GetChannelResponse, error)
	GetChannelOnly(ctx context.Context, in *GetChannelOnlyRequest, opts ...grpc.CallOption) (*GetChannelOnlyResponse, error)
	GetChannels(ctx context.Context, in *GetChannelsRequest, opts ...grpc.CallOption) (*GetChannelsResponse, error)
	ExistChannel(ctx context.Context, in *ExistChannelRequest, opts ...grpc.CallOption) (*ExistChannelResponse, error)
	ExistChannelConds(ctx context.Context, in *ExistChannelCondsRequest, opts ...grpc.CallOption) (*ExistChannelCondsResponse, error)
	CountChannels(ctx context.Context, in *CountChannelsRequest, opts ...grpc.CallOption) (*CountChannelsResponse, error)
	DeleteChannel(ctx context.Context, in *DeleteChannelRequest, opts ...grpc.CallOption) (*DeleteChannelResponse, error)
}

type managerClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerClient(cc grpc.ClientConnInterface) ManagerClient {
	return &managerClient{cc}
}

func (c *managerClient) CreateChannel(ctx context.Context, in *CreateChannelRequest, opts ...grpc.CallOption) (*CreateChannelResponse, error) {
	out := new(CreateChannelResponse)
	err := c.cc.Invoke(ctx, "/notif.manager.notif1.channel.v1.Manager/CreateChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CreateChannels(ctx context.Context, in *CreateChannelsRequest, opts ...grpc.CallOption) (*CreateChannelsResponse, error) {
	out := new(CreateChannelsResponse)
	err := c.cc.Invoke(ctx, "/notif.manager.notif1.channel.v1.Manager/CreateChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) UpdateChannel(ctx context.Context, in *UpdateChannelRequest, opts ...grpc.CallOption) (*UpdateChannelResponse, error) {
	out := new(UpdateChannelResponse)
	err := c.cc.Invoke(ctx, "/notif.manager.notif1.channel.v1.Manager/UpdateChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetChannel(ctx context.Context, in *GetChannelRequest, opts ...grpc.CallOption) (*GetChannelResponse, error) {
	out := new(GetChannelResponse)
	err := c.cc.Invoke(ctx, "/notif.manager.notif1.channel.v1.Manager/GetChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetChannelOnly(ctx context.Context, in *GetChannelOnlyRequest, opts ...grpc.CallOption) (*GetChannelOnlyResponse, error) {
	out := new(GetChannelOnlyResponse)
	err := c.cc.Invoke(ctx, "/notif.manager.notif1.channel.v1.Manager/GetChannelOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) GetChannels(ctx context.Context, in *GetChannelsRequest, opts ...grpc.CallOption) (*GetChannelsResponse, error) {
	out := new(GetChannelsResponse)
	err := c.cc.Invoke(ctx, "/notif.manager.notif1.channel.v1.Manager/GetChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistChannel(ctx context.Context, in *ExistChannelRequest, opts ...grpc.CallOption) (*ExistChannelResponse, error) {
	out := new(ExistChannelResponse)
	err := c.cc.Invoke(ctx, "/notif.manager.notif1.channel.v1.Manager/ExistChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) ExistChannelConds(ctx context.Context, in *ExistChannelCondsRequest, opts ...grpc.CallOption) (*ExistChannelCondsResponse, error) {
	out := new(ExistChannelCondsResponse)
	err := c.cc.Invoke(ctx, "/notif.manager.notif1.channel.v1.Manager/ExistChannelConds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) CountChannels(ctx context.Context, in *CountChannelsRequest, opts ...grpc.CallOption) (*CountChannelsResponse, error) {
	out := new(CountChannelsResponse)
	err := c.cc.Invoke(ctx, "/notif.manager.notif1.channel.v1.Manager/CountChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerClient) DeleteChannel(ctx context.Context, in *DeleteChannelRequest, opts ...grpc.CallOption) (*DeleteChannelResponse, error) {
	out := new(DeleteChannelResponse)
	err := c.cc.Invoke(ctx, "/notif.manager.notif1.channel.v1.Manager/DeleteChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServer is the server API for Manager service.
// All implementations must embed UnimplementedManagerServer
// for forward compatibility
type ManagerServer interface {
	CreateChannel(context.Context, *CreateChannelRequest) (*CreateChannelResponse, error)
	CreateChannels(context.Context, *CreateChannelsRequest) (*CreateChannelsResponse, error)
	UpdateChannel(context.Context, *UpdateChannelRequest) (*UpdateChannelResponse, error)
	GetChannel(context.Context, *GetChannelRequest) (*GetChannelResponse, error)
	GetChannelOnly(context.Context, *GetChannelOnlyRequest) (*GetChannelOnlyResponse, error)
	GetChannels(context.Context, *GetChannelsRequest) (*GetChannelsResponse, error)
	ExistChannel(context.Context, *ExistChannelRequest) (*ExistChannelResponse, error)
	ExistChannelConds(context.Context, *ExistChannelCondsRequest) (*ExistChannelCondsResponse, error)
	CountChannels(context.Context, *CountChannelsRequest) (*CountChannelsResponse, error)
	DeleteChannel(context.Context, *DeleteChannelRequest) (*DeleteChannelResponse, error)
	mustEmbedUnimplementedManagerServer()
}

// UnimplementedManagerServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServer struct {
}

func (UnimplementedManagerServer) CreateChannel(context.Context, *CreateChannelRequest) (*CreateChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChannel not implemented")
}
func (UnimplementedManagerServer) CreateChannels(context.Context, *CreateChannelsRequest) (*CreateChannelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChannels not implemented")
}
func (UnimplementedManagerServer) UpdateChannel(context.Context, *UpdateChannelRequest) (*UpdateChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChannel not implemented")
}
func (UnimplementedManagerServer) GetChannel(context.Context, *GetChannelRequest) (*GetChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannel not implemented")
}
func (UnimplementedManagerServer) GetChannelOnly(context.Context, *GetChannelOnlyRequest) (*GetChannelOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelOnly not implemented")
}
func (UnimplementedManagerServer) GetChannels(context.Context, *GetChannelsRequest) (*GetChannelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannels not implemented")
}
func (UnimplementedManagerServer) ExistChannel(context.Context, *ExistChannelRequest) (*ExistChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistChannel not implemented")
}
func (UnimplementedManagerServer) ExistChannelConds(context.Context, *ExistChannelCondsRequest) (*ExistChannelCondsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExistChannelConds not implemented")
}
func (UnimplementedManagerServer) CountChannels(context.Context, *CountChannelsRequest) (*CountChannelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountChannels not implemented")
}
func (UnimplementedManagerServer) DeleteChannel(context.Context, *DeleteChannelRequest) (*DeleteChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChannel not implemented")
}
func (UnimplementedManagerServer) mustEmbedUnimplementedManagerServer() {}

// UnsafeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServer will
// result in compilation errors.
type UnsafeManagerServer interface {
	mustEmbedUnimplementedManagerServer()
}

func RegisterManagerServer(s grpc.ServiceRegistrar, srv ManagerServer) {
	s.RegisterService(&Manager_ServiceDesc, srv)
}

func _Manager_CreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.manager.notif1.channel.v1.Manager/CreateChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateChannel(ctx, req.(*CreateChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CreateChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CreateChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.manager.notif1.channel.v1.Manager/CreateChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CreateChannels(ctx, req.(*CreateChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_UpdateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).UpdateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.manager.notif1.channel.v1.Manager/UpdateChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).UpdateChannel(ctx, req.(*UpdateChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.manager.notif1.channel.v1.Manager/GetChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetChannel(ctx, req.(*GetChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetChannelOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetChannelOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.manager.notif1.channel.v1.Manager/GetChannelOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetChannelOnly(ctx, req.(*GetChannelOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_GetChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).GetChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.manager.notif1.channel.v1.Manager/GetChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).GetChannels(ctx, req.(*GetChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.manager.notif1.channel.v1.Manager/ExistChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistChannel(ctx, req.(*ExistChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_ExistChannelConds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExistChannelCondsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).ExistChannelConds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.manager.notif1.channel.v1.Manager/ExistChannelConds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).ExistChannelConds(ctx, req.(*ExistChannelCondsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_CountChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).CountChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.manager.notif1.channel.v1.Manager/CountChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).CountChannels(ctx, req.(*CountChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manager_DeleteChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServer).DeleteChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/notif.manager.notif1.channel.v1.Manager/DeleteChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServer).DeleteChannel(ctx, req.(*DeleteChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Manager_ServiceDesc is the grpc.ServiceDesc for Manager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Manager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notif.manager.notif1.channel.v1.Manager",
	HandlerType: (*ManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChannel",
			Handler:    _Manager_CreateChannel_Handler,
		},
		{
			MethodName: "CreateChannels",
			Handler:    _Manager_CreateChannels_Handler,
		},
		{
			MethodName: "UpdateChannel",
			Handler:    _Manager_UpdateChannel_Handler,
		},
		{
			MethodName: "GetChannel",
			Handler:    _Manager_GetChannel_Handler,
		},
		{
			MethodName: "GetChannelOnly",
			Handler:    _Manager_GetChannelOnly_Handler,
		},
		{
			MethodName: "GetChannels",
			Handler:    _Manager_GetChannels_Handler,
		},
		{
			MethodName: "ExistChannel",
			Handler:    _Manager_ExistChannel_Handler,
		},
		{
			MethodName: "ExistChannelConds",
			Handler:    _Manager_ExistChannelConds_Handler,
		},
		{
			MethodName: "CountChannels",
			Handler:    _Manager_CountChannels_Handler,
		},
		{
			MethodName: "DeleteChannel",
			Handler:    _Manager_DeleteChannel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "npool/notif/mgr/v1/notif/channel/channel.proto",
}
